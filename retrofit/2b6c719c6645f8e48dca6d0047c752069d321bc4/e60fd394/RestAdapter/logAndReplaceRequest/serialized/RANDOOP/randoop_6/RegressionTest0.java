import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0001");
        int int0 = retrofit.RestAdapter.LOG_CHUNK_SIZE;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 4000 + "'", int0 == 4000);
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0002");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.Throwable throwable11 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter10.logException(throwable11, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0003");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.client.Request request11 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request12 = restAdapter10.logAndReplaceRequest(request11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0004");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.ErrorHandler errorHandler3 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder4 = builder2.setErrorHandler(errorHandler3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Error handler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0005");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.RestAdapter.Log log3 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0006");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Profiler profiler1 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder2 = builder0.setProfiler(profiler1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0007");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        java.util.concurrent.Executor executor5 = null;
        java.util.concurrent.Executor executor6 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder7 = builder0.setExecutors(executor5, executor6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: HTTP executor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0008");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder2 = builder0.setServer(server1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0009");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.logLevel = logLevel23;
        int int26 = restAdapter10.getLOG_CHUNK_SIZE();
        java.lang.Throwable throwable27 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter10.logException(throwable27, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4000 + "'", int26 == 4000);
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0010");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RestAdapter.Log log4 = null;
        builder0.log = log4;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder7 = builder0.setRequestInterceptor(requestInterceptor6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Request interceptor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0011");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel3 = builder2.logLevel;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder5 = builder2.setRequestInterceptor(requestInterceptor4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Request interceptor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0012");
        java.lang.String str0 = retrofit.RestAdapter.IDLE_THREAD_NAME;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "Retrofit-Idle" + "'", str0, "Retrofit-Idle");
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0013");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collections collections2 = serializedObjectSupporter0.deserializeObjectList1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.Collections$UnmodifiableRandomAccessList cannot be cast to java.util.Collections");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(requestInterceptor1);
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0014");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter10.logLevel;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        java.lang.Throwable throwable14 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter10.logException(throwable14, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(executor13);
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0015");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter7();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter4 = serializedObjectSupporter0.deserializeObjectLogLevel3();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0016");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        java.util.concurrent.Executor executor5 = null;
        java.util.concurrent.Executor executor6 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder7 = builder2.setExecutors(executor5, executor6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: HTTP executor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0017");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        java.lang.String str15 = restAdapter10.getTHREAD_PREFIX();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Retrofit-" + "'", str15, "Retrofit-");
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0018");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor14 = serializedObjectSupporter13.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter15 = serializedObjectSupporter13.deserializeObjectConverter7();
        retrofit.client.Request request16 = serializedObjectSupporter13.deserializeObjectRequest1();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request17 = restAdapter10.logAndReplaceRequest(request16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNotNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(gsonConverter15);
        org.junit.Assert.assertNotNull(request16);
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0019");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RestAdapter.Log log4 = null;
        builder0.log = log4;
        retrofit.client.Client client6 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder7 = builder0.setClient(client6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0020");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.client.Response response16 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response18 = restAdapter10.logAndReplaceResponse("hi!", response16, (long) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(provider14);
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0021");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.Server server4 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder5 = builder0.setServer(server4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0022");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server4 = null;
        builder0.server = server4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = null;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        retrofit.ErrorHandler errorHandler17 = restAdapter16.errorHandler;
        java.util.concurrent.Executor executor18 = restAdapter16.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter16.getLogLevel();
        builder0.logLevel = logLevel19;
        java.util.concurrent.Executor executor21 = null;
        builder0.callbackExecutor = executor21;
        retrofit.client.Client client23 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder24 = builder0.setClient(client23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0023");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = null;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel13);
        builder0.logLevel = logLevel13;
        retrofit.client.Client client16 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder17 = builder0.setClient(client16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0024");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        retrofit.client.Client.Provider provider6 = builder0.getclientProvider();
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(provider6);
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0025");
        java.lang.String str0 = retrofit.RestAdapter.THREAD_PREFIX;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "Retrofit-" + "'", str0, "Retrofit-");
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0026");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server4 = null;
        builder0.server = server4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = null;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        retrofit.ErrorHandler errorHandler17 = restAdapter16.errorHandler;
        java.util.concurrent.Executor executor18 = restAdapter16.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter16.getLogLevel();
        builder0.logLevel = logLevel19;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        builder0.requestInterceptor = requestInterceptor21;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0027");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        java.util.concurrent.Executor executor6 = null;
        builder0.sethttpExecutor(executor6);
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder10 = builder8.setServer("hi!");
        java.util.concurrent.Executor executor11 = null;
        builder10.callbackExecutor = executor11;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor14 = serializedObjectSupporter13.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder15 = builder10.setRequestInterceptor(requestInterceptor14);
        retrofit.RestAdapter.Builder builder16 = builder0.setRequestInterceptor(requestInterceptor14);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter17 = builder16.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.Profiler profiler15 = restAdapter10.profiler;
        retrofit.converter.Converter converter16 = restAdapter10.converter;
        retrofit.client.Header[] headerArray19 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList20 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList20, headerArray19);
        retrofit.mime.TypedOutput typedOutput22 = null;
        retrofit.client.Request request23 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList20, typedOutput22);
        java.lang.String str24 = request23.url;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request25 = restAdapter10.logAndReplaceRequest(request23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(headerArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0029");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.client.Client.Provider provider5 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder6 = builder0.setClient(provider5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(requestInterceptor4);
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0030");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = null;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel13);
        builder0.logLevel = logLevel13;
        java.util.concurrent.Executor executor16 = builder0.httpExecutor;
        retrofit.RestAdapter.Log log17 = builder0.log;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter18 = builder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(log17);
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0031");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.client.Client.Provider provider15 = restAdapter10.getclientProvider();
        retrofit.client.Response response17 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response19 = restAdapter10.logAndReplaceResponse("hi!", response17, (long) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(provider15);
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0032");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server4 = null;
        builder0.server = server4;
        java.util.concurrent.Executor executor6 = builder0.gethttpExecutor();
        retrofit.Server server7 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder8 = builder0.setServer(server7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor6);
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0033");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.client.Request request9 = serializedObjectSupporter6.deserializeObjectRequest1();
        builder0.serializedObjectSupporter = serializedObjectSupporter6;
        builder0.ensureSaneDefaults();
        retrofit.ErrorHandler errorHandler12 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder13 = builder0.setErrorHandler(errorHandler12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Error handler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(request9);
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0034");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter8();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString2();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Retrofit-Idle" + "'", str3, "Retrofit-Idle");
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0035");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter10.logLevel;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        retrofit.converter.Converter converter14 = restAdapter10.converter;
        retrofit.Server server15 = restAdapter10.getserver();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter10.getLogLevel();
        java.lang.String str17 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.client.Response response19 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response21 = restAdapter10.logAndReplaceResponse("Retrofit-Idle", response19, (long) 4000);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-Idle" + "'", str17, "Retrofit-Idle");
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0036");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter10.logLevel;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.gethttpExecutor();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(executor13);
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0037");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.Profiler profiler6 = builder0.profiler;
        java.util.concurrent.Executor executor7 = null;
        java.util.concurrent.Executor executor8 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder9 = builder0.setExecutors(executor7, executor8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: HTTP executor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNull(profiler6);
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0038");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.client.Client.Provider provider15 = restAdapter10.getclientProvider();
        java.lang.String str16 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.Server server17 = null;
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Log log25 = null;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server17, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log25, logLevel26);
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter27.logLevel;
        retrofit.ErrorHandler errorHandler29 = restAdapter27.geterrorHandler();
        java.util.concurrent.Executor executor30 = restAdapter27.getcallbackExecutor();
        retrofit.converter.Converter converter31 = restAdapter27.converter;
        retrofit.Server server32 = restAdapter27.getserver();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter27.getLogLevel();
        restAdapter10.setLogLevel(logLevel33);
        retrofit.RestAdapter.RestHandler restHandler35 = restAdapter10.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter36 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor37 = serializedObjectSupporter36.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter38 = serializedObjectSupporter36.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter39 = serializedObjectSupporter36.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter40 = serializedObjectSupporter36.deserializeObjectConverter8();
        retrofit.client.Request request41 = serializedObjectSupporter36.deserializeObjectRequest5();
        java.lang.reflect.Method method42 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter43 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor44 = serializedObjectSupporter43.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter45 = serializedObjectSupporter43.deserializeObjectConverter7();
        retrofit.client.Request request46 = serializedObjectSupporter43.deserializeObjectRequest2();
        retrofit.SerializedObjectSupporter serializedObjectSupporter47 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler48 = serializedObjectSupporter47.deserializeObjectErrorHandler1();
        java.lang.Object[] objArray49 = new java.lang.Object[] { serializedObjectSupporter43, serializedObjectSupporter47 };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj50 = restHandler35.invoke((java.lang.Object) request41, method42, objArray49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Retrofit-Idle" + "'", str16, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNull(converter31);
        org.junit.Assert.assertNull(server32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(requestInterceptor37);
        org.junit.Assert.assertNotNull(gsonConverter38);
        org.junit.Assert.assertNotNull(gsonConverter39);
        org.junit.Assert.assertNotNull(gsonConverter40);
        org.junit.Assert.assertNotNull(request41);
        org.junit.Assert.assertNotNull(requestInterceptor44);
        org.junit.Assert.assertNotNull(gsonConverter45);
        org.junit.Assert.assertNotNull(request46);
        org.junit.Assert.assertNotNull(errorHandler48);
        org.junit.Assert.assertNotNull(objArray49);
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0039");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter8();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString1();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter4 = serializedObjectSupporter0.deserializeObjectLogLevel3();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Retrofit-" + "'", str3, "Retrofit-");
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0040");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.Server server5 = null;
        retrofit.client.Client.Provider provider6 = null;
        java.util.concurrent.Executor executor7 = null;
        java.util.concurrent.Executor executor8 = null;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        retrofit.converter.Converter converter10 = null;
        retrofit.Profiler profiler11 = null;
        retrofit.ErrorHandler errorHandler12 = null;
        retrofit.RestAdapter.Log log13 = null;
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter(server5, provider6, executor7, executor8, requestInterceptor9, converter10, profiler11, errorHandler12, log13, logLevel14);
        retrofit.ErrorHandler errorHandler16 = restAdapter15.errorHandler;
        int int17 = restAdapter15.getLOG_CHUNK_SIZE();
        retrofit.Server server18 = restAdapter15.getserver();
        retrofit.client.Client.Provider provider19 = restAdapter15.clientProvider;
        retrofit.client.Client.Provider provider20 = restAdapter15.getclientProvider();
        java.lang.String str21 = restAdapter15.getIDLE_THREAD_NAME();
        retrofit.Server server22 = null;
        retrofit.client.Client.Provider provider23 = null;
        java.util.concurrent.Executor executor24 = null;
        java.util.concurrent.Executor executor25 = null;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        retrofit.converter.Converter converter27 = null;
        retrofit.Profiler profiler28 = null;
        retrofit.ErrorHandler errorHandler29 = null;
        retrofit.RestAdapter.Log log30 = null;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server22, provider23, executor24, executor25, requestInterceptor26, converter27, profiler28, errorHandler29, log30, logLevel31);
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter32.logLevel;
        retrofit.ErrorHandler errorHandler34 = restAdapter32.geterrorHandler();
        java.util.concurrent.Executor executor35 = restAdapter32.getcallbackExecutor();
        retrofit.converter.Converter converter36 = restAdapter32.converter;
        retrofit.Server server37 = restAdapter32.getserver();
        retrofit.RestAdapter.LogLevel logLevel38 = restAdapter32.getLogLevel();
        restAdapter15.setLogLevel(logLevel38);
        retrofit.RestAdapter.Builder builder40 = builder0.setLogLevel(logLevel38);
        retrofit.RestAdapter.Log log41 = builder0.log;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4000 + "'", int17 == 4000);
        org.junit.Assert.assertNull(server18);
        org.junit.Assert.assertNull(provider19);
        org.junit.Assert.assertNull(provider20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Retrofit-Idle" + "'", str21, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler34);
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertNull(converter36);
        org.junit.Assert.assertNull(server37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(log41);
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0041");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server4 = null;
        builder0.server = server4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = null;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        retrofit.ErrorHandler errorHandler17 = restAdapter16.errorHandler;
        java.util.concurrent.Executor executor18 = restAdapter16.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter16.getLogLevel();
        builder0.logLevel = logLevel19;
        retrofit.client.Client.Provider provider21 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder22 = builder0.setClient(provider21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0042");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.SerializedObjectSupporter serializedObjectSupporter5 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor6 = serializedObjectSupporter5.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder7 = builder2.setRequestInterceptor(requestInterceptor6);
        retrofit.Server server8 = builder7.server;
        retrofit.client.Client client9 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder10 = builder7.setClient(client9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(server8);
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0043");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.lang.String str7 = request6.url;
        java.util.List<retrofit.client.Header> headerList8 = request6.headers;
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(headerList8);
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0044");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = null;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter13;
        retrofit.client.Client.Provider provider15 = restAdapter10.getclientProvider();
        retrofit.ErrorHandler errorHandler16 = restAdapter10.geterrorHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter17.deserializeObjectConverter5();
        retrofit.client.Request request20 = serializedObjectSupporter17.deserializeObjectRequest8();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request21 = restAdapter10.logAndReplaceRequest(request20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(request20);
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0045");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler2 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.mime.TypedString typedString3 = serializedObjectSupporter0.deserializeObjectTypedOutput2();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest1();
        java.lang.String str5 = request4.getMethod();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(errorHandler2);
        org.junit.Assert.assertNotNull(typedString3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GET" + "'", str5, "GET");
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0046");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        java.util.concurrent.Executor executor3 = builder0.httpExecutor;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter5 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor6 = serializedObjectSupporter5.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter5.deserializeObjectConverter8();
        java.lang.String str8 = serializedObjectSupporter5.deserializeObjectString2();
        builder0.serializedObjectSupporter = serializedObjectSupporter5;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collections collections10 = serializedObjectSupporter5.deserializeObjectList1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.Collections$UnmodifiableRandomAccessList cannot be cast to java.util.Collections");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNotNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Retrofit-Idle" + "'", str8, "Retrofit-Idle");
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0047");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        java.util.concurrent.Executor executor3 = builder0.httpExecutor;
        java.util.concurrent.Executor executor4 = null;
        builder0.sethttpExecutor(executor4);
        org.junit.Assert.assertNull(executor3);
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0048");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter10.new RestHandler();
        java.util.concurrent.Executor executor14 = restAdapter10.callbackExecutor;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(executor14);
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0049");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder7 = builder5.setServer("hi!");
        retrofit.client.Client.Provider provider8 = builder5.clientProvider;
        java.util.concurrent.Executor executor9 = null;
        builder5.setcallbackExecutor(executor9);
        retrofit.RestAdapter.Log log11 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder12 = builder5.setLog(log11);
        retrofit.RestAdapter.Builder builder13 = builder0.setLog(log11);
        java.lang.Class<?> wildcardClass14 = builder13.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNotNull(log11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0050");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler7 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder8 = builder0.setErrorHandler(errorHandler7);
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder11 = builder9.setServer("hi!");
        retrofit.client.Client.Provider provider12 = builder9.clientProvider;
        retrofit.RequestInterceptor requestInterceptor13 = builder9.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean15 = logLevel14.log();
        retrofit.RestAdapter.Builder builder16 = builder9.setLogLevel(logLevel14);
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor18 = builder17.getcallbackExecutor();
        retrofit.client.Client.Provider provider19 = null;
        builder17.clientProvider = provider19;
        retrofit.Server server21 = null;
        builder17.server = server21;
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        builder17.log = log23;
        builder9.log = log23;
        retrofit.RestAdapter.Builder builder26 = builder8.setLog(log23);
        retrofit.RestAdapter.Builder builder28 = builder26.setServer("Retrofit-Idle");
        retrofit.client.Client.Provider provider29 = builder26.getclientProvider();
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNotNull(errorHandler7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertNull(requestInterceptor13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(provider29);
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0051");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.Server server5 = null;
        retrofit.client.Client.Provider provider6 = null;
        java.util.concurrent.Executor executor7 = null;
        java.util.concurrent.Executor executor8 = null;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        retrofit.converter.Converter converter10 = null;
        retrofit.Profiler profiler11 = null;
        retrofit.ErrorHandler errorHandler12 = null;
        retrofit.RestAdapter.Log log13 = null;
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter(server5, provider6, executor7, executor8, requestInterceptor9, converter10, profiler11, errorHandler12, log13, logLevel14);
        retrofit.ErrorHandler errorHandler16 = restAdapter15.errorHandler;
        int int17 = restAdapter15.getLOG_CHUNK_SIZE();
        retrofit.Server server18 = restAdapter15.getserver();
        retrofit.client.Client.Provider provider19 = restAdapter15.clientProvider;
        retrofit.client.Client.Provider provider20 = restAdapter15.getclientProvider();
        java.lang.String str21 = restAdapter15.getIDLE_THREAD_NAME();
        retrofit.Server server22 = null;
        retrofit.client.Client.Provider provider23 = null;
        java.util.concurrent.Executor executor24 = null;
        java.util.concurrent.Executor executor25 = null;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        retrofit.converter.Converter converter27 = null;
        retrofit.Profiler profiler28 = null;
        retrofit.ErrorHandler errorHandler29 = null;
        retrofit.RestAdapter.Log log30 = null;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server22, provider23, executor24, executor25, requestInterceptor26, converter27, profiler28, errorHandler29, log30, logLevel31);
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter32.logLevel;
        retrofit.ErrorHandler errorHandler34 = restAdapter32.geterrorHandler();
        java.util.concurrent.Executor executor35 = restAdapter32.getcallbackExecutor();
        retrofit.converter.Converter converter36 = restAdapter32.converter;
        retrofit.Server server37 = restAdapter32.getserver();
        retrofit.RestAdapter.LogLevel logLevel38 = restAdapter32.getLogLevel();
        restAdapter15.setLogLevel(logLevel38);
        retrofit.RestAdapter.Builder builder40 = builder0.setLogLevel(logLevel38);
        retrofit.client.Client client41 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder42 = builder40.setClient(client41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4000 + "'", int17 == 4000);
        org.junit.Assert.assertNull(server18);
        org.junit.Assert.assertNull(provider19);
        org.junit.Assert.assertNull(provider20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Retrofit-Idle" + "'", str21, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler34);
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertNull(converter36);
        org.junit.Assert.assertNull(server37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0052");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter6();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest8();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString3();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter0.deserializeObjectConverter3();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GET" + "'", str6, "GET");
        org.junit.Assert.assertNotNull(gsonConverter7);
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0053");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder7 = builder5.setServer("hi!");
        java.util.concurrent.Executor executor8 = null;
        builder7.callbackExecutor = executor8;
        retrofit.SerializedObjectSupporter serializedObjectSupporter10 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor11 = serializedObjectSupporter10.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder12 = builder7.setRequestInterceptor(requestInterceptor11);
        retrofit.RestAdapter.Builder builder13 = builder0.setRequestInterceptor(requestInterceptor11);
        retrofit.client.Client.Provider provider14 = null;
        builder13.clientProvider = provider14;
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0054");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.getrequestInterceptor();
        retrofit.converter.Converter converter15 = restAdapter10.getconverter();
        retrofit.client.Header[] headerArray18 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList19 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList19, headerArray18);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList19, typedOutput21);
        java.lang.String str23 = request22.url;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request24 = restAdapter10.logAndReplaceRequest(request22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNull(converter15);
        org.junit.Assert.assertNotNull(headerArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0055");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter2 = serializedObjectSupporter0.deserializeObjectLogLevel2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(requestInterceptor1);
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0056");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        java.util.concurrent.Executor executor6 = null;
        builder0.sethttpExecutor(executor6);
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder10 = builder8.setServer("hi!");
        java.util.concurrent.Executor executor11 = null;
        builder10.callbackExecutor = executor11;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor14 = serializedObjectSupporter13.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder15 = builder10.setRequestInterceptor(requestInterceptor14);
        retrofit.RestAdapter.Builder builder16 = builder0.setRequestInterceptor(requestInterceptor14);
        java.util.concurrent.Executor executor17 = null;
        builder0.setcallbackExecutor(executor17);
        retrofit.RequestInterceptor requestInterceptor19 = null;
        builder0.requestInterceptor = requestInterceptor19;
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0057");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString2();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString1();
        retrofit.RequestInterceptor requestInterceptor3 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest4();
        java.util.List<retrofit.client.Header> headerList5 = request4.headers;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Retrofit-Idle" + "'", str1, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Retrofit-" + "'", str2, "Retrofit-");
        org.junit.Assert.assertNotNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(headerList5);
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0058");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter10.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter14 = null;
        restHandler13.serializedObjectSupporter = serializedObjectSupporter14;
        retrofit.Server server16 = null;
        retrofit.client.Client.Provider provider17 = null;
        java.util.concurrent.Executor executor18 = null;
        java.util.concurrent.Executor executor19 = null;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        retrofit.converter.Converter converter21 = null;
        retrofit.Profiler profiler22 = null;
        retrofit.ErrorHandler errorHandler23 = null;
        retrofit.RestAdapter.Log log24 = null;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter(server16, provider17, executor18, executor19, requestInterceptor20, converter21, profiler22, errorHandler23, log24, logLevel25);
        retrofit.ErrorHandler errorHandler27 = restAdapter26.errorHandler;
        retrofit.ErrorHandler errorHandler28 = restAdapter26.errorHandler;
        retrofit.ErrorHandler errorHandler29 = restAdapter26.geterrorHandler();
        retrofit.RequestInterceptor requestInterceptor30 = restAdapter26.getrequestInterceptor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = restAdapter26.serializedObjectSupporter;
        java.lang.reflect.Method method32 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] {};
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj34 = restHandler13.invoke((java.lang.Object) restAdapter26, method32, objArray33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNull(requestInterceptor30);
        org.junit.Assert.assertNull(serializedObjectSupporter31);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0059");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server4 = null;
        builder0.server = server4;
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        builder0.log = log6;
        retrofit.converter.Converter converter8 = builder0.converter;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder10 = builder0.setServer("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be blank.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertNull(converter8);
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0060");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest8();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString4();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter5 = serializedObjectSupporter0.deserializeObjectLogLevel2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "http://example.com/" + "'", str4, "http://example.com/");
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0061");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel3 = builder2.logLevel;
        retrofit.client.Client.Provider provider4 = null;
        builder2.setclientProvider(provider4);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0062");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server4 = null;
        builder0.server = server4;
        java.util.concurrent.Executor executor6 = builder0.gethttpExecutor();
        retrofit.RestAdapter.LogLevel logLevel7 = builder0.logLevel;
        retrofit.SerializedObjectSupporter serializedObjectSupporter8 = builder0.serializedObjectSupporter;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertTrue("'" + logLevel7 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel7.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(serializedObjectSupporter8);
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0063");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server4 = null;
        builder0.server = server4;
        retrofit.client.Client.Provider provider6 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder7 = builder0.setClient(provider6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0064");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter10.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter14 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request15 = serializedObjectSupporter14.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler16 = serializedObjectSupporter14.deserializeObjectErrorHandler1();
        retrofit.client.Request request17 = serializedObjectSupporter14.deserializeObjectRequest8();
        java.lang.reflect.Method method18 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter19 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor20 = serializedObjectSupporter19.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter21 = serializedObjectSupporter19.deserializeObjectConverter8();
        java.lang.Object[] objArray22 = new java.lang.Object[] { serializedObjectSupporter19 };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj23 = restHandler13.invoke((java.lang.Object) serializedObjectSupporter14, method18, objArray22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(errorHandler16);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertNotNull(requestInterceptor20);
        org.junit.Assert.assertNotNull(gsonConverter21);
        org.junit.Assert.assertNotNull(objArray22);
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0065");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest1();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest8();
        java.lang.Class<?> wildcardClass5 = request4.getClass();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0066");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest1();
        java.lang.String str4 = request3.getMethod();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GET" + "'", str4, "GET");
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0067");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = builder0.profiler;
        retrofit.client.Client.Provider provider4 = builder0.clientProvider;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.sethttpExecutor(executor7);
        retrofit.Profiler profiler9 = null;
        builder6.profiler = profiler9;
        retrofit.RestAdapter.LogLevel logLevel11 = builder6.logLevel;
        java.util.concurrent.Executor executor12 = null;
        builder6.sethttpExecutor(executor12);
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        java.util.concurrent.Executor executor17 = null;
        builder16.callbackExecutor = executor17;
        retrofit.SerializedObjectSupporter serializedObjectSupporter19 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor20 = serializedObjectSupporter19.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder21 = builder16.setRequestInterceptor(requestInterceptor20);
        retrofit.RestAdapter.Builder builder22 = builder6.setRequestInterceptor(requestInterceptor20);
        java.util.concurrent.Executor executor23 = builder22.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor25 = serializedObjectSupporter24.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter26 = serializedObjectSupporter24.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter27 = serializedObjectSupporter24.deserializeObjectConverter7();
        retrofit.Server server28 = serializedObjectSupporter24.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder29 = builder22.setServer(server28);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder32 = builder30.setServer("hi!");
        java.util.concurrent.Executor executor33 = null;
        builder32.callbackExecutor = executor33;
        retrofit.RestAdapter restAdapter35 = builder32.build();
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor37 = null;
        builder36.sethttpExecutor(executor37);
        retrofit.Profiler profiler39 = null;
        builder36.profiler = profiler39;
        retrofit.RestAdapter.Log log41 = builder36.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter42 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler43 = serializedObjectSupporter42.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder44 = builder36.setErrorHandler(errorHandler43);
        retrofit.RestAdapter.Builder builder45 = builder32.setErrorHandler(errorHandler43);
        java.util.concurrent.Executor executor46 = builder45.callbackExecutor;
        builder29.sethttpExecutor(executor46);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder48 = builder0.setExecutors(executor5, executor46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: HTTP executor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(provider4);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(requestInterceptor20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNotNull(gsonConverter26);
        org.junit.Assert.assertNotNull(gsonConverter27);
        org.junit.Assert.assertNotNull(server28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(restAdapter35);
        org.junit.Assert.assertNull(log41);
        org.junit.Assert.assertNotNull(errorHandler43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(executor46);
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0068");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        java.util.concurrent.Executor executor3 = builder0.httpExecutor;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter5 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor6 = serializedObjectSupporter5.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter5.deserializeObjectConverter8();
        java.lang.String str8 = serializedObjectSupporter5.deserializeObjectString2();
        builder0.serializedObjectSupporter = serializedObjectSupporter5;
        retrofit.Profiler profiler10 = null;
        builder0.profiler = profiler10;
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNotNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Retrofit-Idle" + "'", str8, "Retrofit-Idle");
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0069");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider5 = builder0.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request7 = serializedObjectSupporter6.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler8 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        builder0.errorHandler = errorHandler8;
        retrofit.Server server10 = builder0.server;
        java.util.concurrent.Executor executor11 = null;
        builder0.sethttpExecutor(executor11);
        retrofit.client.Client.Provider provider13 = null;
        builder0.clientProvider = provider13;
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(errorHandler8);
        org.junit.Assert.assertNull(server10);
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0070");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        java.util.concurrent.Executor executor14 = restAdapter10.getcallbackExecutor();
        java.lang.String str15 = restAdapter10.getTHREAD_PREFIX();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Retrofit-" + "'", str15, "Retrofit-");
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0071");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean6 = logLevel5.log();
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel5);
        java.util.concurrent.Executor executor8 = null;
        builder7.setcallbackExecutor(executor8);
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor11 = null;
        builder10.sethttpExecutor(executor11);
        retrofit.Profiler profiler13 = null;
        builder10.profiler = profiler13;
        retrofit.Server server15 = builder10.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor17 = serializedObjectSupporter16.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter18 = serializedObjectSupporter16.deserializeObjectConverter7();
        retrofit.client.Request request19 = serializedObjectSupporter16.deserializeObjectRequest1();
        builder10.serializedObjectSupporter = serializedObjectSupporter16;
        builder10.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder24 = builder22.setServer("hi!");
        java.util.concurrent.Executor executor25 = null;
        builder24.callbackExecutor = executor25;
        retrofit.RestAdapter restAdapter27 = builder24.build();
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor29 = null;
        builder28.sethttpExecutor(executor29);
        retrofit.Profiler profiler31 = null;
        builder28.profiler = profiler31;
        retrofit.RestAdapter.Log log33 = builder28.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter34 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler35 = serializedObjectSupporter34.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder36 = builder28.setErrorHandler(errorHandler35);
        retrofit.RestAdapter.Builder builder37 = builder24.setErrorHandler(errorHandler35);
        java.util.concurrent.Executor executor38 = builder37.callbackExecutor;
        builder10.setcallbackExecutor(executor38);
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor41 = null;
        builder40.sethttpExecutor(executor41);
        retrofit.Profiler profiler43 = null;
        builder40.profiler = profiler43;
        retrofit.Server server45 = builder40.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter46 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor47 = serializedObjectSupporter46.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter48 = serializedObjectSupporter46.deserializeObjectConverter7();
        retrofit.client.Request request49 = serializedObjectSupporter46.deserializeObjectRequest1();
        builder40.serializedObjectSupporter = serializedObjectSupporter46;
        builder40.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder54 = builder52.setServer("hi!");
        java.util.concurrent.Executor executor55 = null;
        builder54.callbackExecutor = executor55;
        retrofit.RestAdapter restAdapter57 = builder54.build();
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor59 = null;
        builder58.sethttpExecutor(executor59);
        retrofit.Profiler profiler61 = null;
        builder58.profiler = profiler61;
        retrofit.RestAdapter.Log log63 = builder58.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter64 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler65 = serializedObjectSupporter64.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder66 = builder58.setErrorHandler(errorHandler65);
        retrofit.RestAdapter.Builder builder67 = builder54.setErrorHandler(errorHandler65);
        java.util.concurrent.Executor executor68 = builder67.callbackExecutor;
        builder40.setcallbackExecutor(executor68);
        retrofit.RestAdapter.Builder builder70 = builder7.setExecutors(executor38, executor68);
        retrofit.RestAdapter.LogLevel logLevel71 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder72 = builder70.setLogLevel(logLevel71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log level may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertNotNull(requestInterceptor17);
        org.junit.Assert.assertNotNull(gsonConverter18);
        org.junit.Assert.assertNotNull(request19);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(restAdapter27);
        org.junit.Assert.assertNull(log33);
        org.junit.Assert.assertNotNull(errorHandler35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(executor38);
        org.junit.Assert.assertNull(server45);
        org.junit.Assert.assertNotNull(requestInterceptor47);
        org.junit.Assert.assertNotNull(gsonConverter48);
        org.junit.Assert.assertNotNull(request49);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(restAdapter57);
        org.junit.Assert.assertNull(log63);
        org.junit.Assert.assertNotNull(errorHandler65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(executor68);
        org.junit.Assert.assertNotNull(builder70);
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0072");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = null;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel13);
        builder0.logLevel = logLevel13;
        java.util.concurrent.Executor executor16 = builder0.httpExecutor;
        retrofit.RestAdapter.Log log17 = builder0.log;
        retrofit.client.Client client18 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder19 = builder0.setClient(client18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(log17);
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0073");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder7 = builder5.setServer("hi!");
        retrofit.client.Client.Provider provider8 = builder5.clientProvider;
        java.util.concurrent.Executor executor9 = null;
        builder5.setcallbackExecutor(executor9);
        retrofit.RestAdapter.Log log11 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder12 = builder5.setLog(log11);
        retrofit.RestAdapter.Builder builder13 = builder0.setLog(log11);
        retrofit.client.Client.Provider provider14 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder15 = builder0.setClient(provider14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNotNull(log11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0074");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider5 = builder0.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request7 = serializedObjectSupporter6.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler8 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        builder0.errorHandler = errorHandler8;
        retrofit.Server server10 = builder0.server;
        builder0.ensureSaneDefaults();
        retrofit.Profiler profiler12 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder13 = builder0.setProfiler(profiler12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(errorHandler8);
        org.junit.Assert.assertNull(server10);
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0075");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.client.Client.Provider provider15 = restAdapter10.getclientProvider();
        java.lang.String str16 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.Server server17 = null;
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Log log25 = null;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server17, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log25, logLevel26);
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter27.logLevel;
        retrofit.ErrorHandler errorHandler29 = restAdapter27.geterrorHandler();
        java.util.concurrent.Executor executor30 = restAdapter27.getcallbackExecutor();
        retrofit.converter.Converter converter31 = restAdapter27.converter;
        retrofit.Server server32 = restAdapter27.getserver();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter27.getLogLevel();
        restAdapter10.setLogLevel(logLevel33);
        boolean boolean35 = logLevel33.log();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Retrofit-Idle" + "'", str16, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNull(converter31);
        org.junit.Assert.assertNull(server32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0076");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.ErrorHandler errorHandler6 = builder0.errorHandler;
        java.util.concurrent.Executor executor7 = builder0.httpExecutor;
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(executor7);
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.getrequestInterceptor();
        retrofit.client.Response response16 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response18 = restAdapter10.logAndReplaceResponse("Retrofit-Idle", response16, (long) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(requestInterceptor14);
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0078");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.SerializedObjectSupporter serializedObjectSupporter5 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor6 = serializedObjectSupporter5.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder7 = builder2.setRequestInterceptor(requestInterceptor6);
        retrofit.RestAdapter.LogLevel logLevel8 = builder2.logLevel;
        java.util.concurrent.Executor executor9 = builder2.callbackExecutor;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor9);
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0079");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder7 = builder5.setServer("hi!");
        retrofit.client.Client.Provider provider8 = builder5.clientProvider;
        java.util.concurrent.Executor executor9 = null;
        builder5.setcallbackExecutor(executor9);
        retrofit.RestAdapter.Log log11 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder12 = builder5.setLog(log11);
        retrofit.RestAdapter.Builder builder13 = builder0.setLog(log11);
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = null;
        builder14.sethttpExecutor(executor15);
        retrofit.Profiler profiler17 = null;
        builder14.profiler = profiler17;
        retrofit.Server server19 = builder14.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter7();
        retrofit.client.Request request23 = serializedObjectSupporter20.deserializeObjectRequest1();
        builder14.serializedObjectSupporter = serializedObjectSupporter20;
        builder14.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder28 = builder26.setServer("hi!");
        java.util.concurrent.Executor executor29 = null;
        builder28.callbackExecutor = executor29;
        retrofit.RestAdapter restAdapter31 = builder28.build();
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor33 = null;
        builder32.sethttpExecutor(executor33);
        retrofit.Profiler profiler35 = null;
        builder32.profiler = profiler35;
        retrofit.RestAdapter.Log log37 = builder32.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter38 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler39 = serializedObjectSupporter38.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder40 = builder32.setErrorHandler(errorHandler39);
        retrofit.RestAdapter.Builder builder41 = builder28.setErrorHandler(errorHandler39);
        java.util.concurrent.Executor executor42 = builder41.callbackExecutor;
        builder14.setcallbackExecutor(executor42);
        builder13.callbackExecutor = executor42;
        retrofit.client.Client.Provider provider45 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder46 = builder13.setClient(provider45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNotNull(log11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(restAdapter31);
        org.junit.Assert.assertNull(log37);
        org.junit.Assert.assertNotNull(errorHandler39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(executor42);
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0080");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RestAdapter.Log log4 = null;
        builder0.log = log4;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter6.deserializeObjectConverter5();
        retrofit.client.Request request10 = serializedObjectSupporter6.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter11 = serializedObjectSupporter6.deserializeObjectConverter3();
        builder0.converter = gsonConverter11;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(gsonConverter9);
        org.junit.Assert.assertNotNull(request10);
        org.junit.Assert.assertNotNull(gsonConverter11);
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0081");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.getcallbackExecutor();
        java.lang.String str13 = restAdapter10.getIDLE_THREAD_NAME();
        java.lang.Throwable throwable14 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter10.logException(throwable14, "GET");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-Idle" + "'", str13, "Retrofit-Idle");
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0082");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean6 = logLevel5.log();
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel5);
        retrofit.SerializedObjectSupporter serializedObjectSupporter8 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor9 = serializedObjectSupporter8.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter10 = serializedObjectSupporter8.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter11 = serializedObjectSupporter8.deserializeObjectConverter7();
        retrofit.Server server12 = serializedObjectSupporter8.deserializeObjectServer1();
        builder0.server = server12;
        retrofit.client.Client.Provider provider14 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder15 = builder0.setClient(provider14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(requestInterceptor9);
        org.junit.Assert.assertNotNull(gsonConverter10);
        org.junit.Assert.assertNotNull(gsonConverter11);
        org.junit.Assert.assertNotNull(server12);
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0083");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        java.util.List<retrofit.client.Header> headerList2 = request1.headers;
        java.lang.String str3 = request1.getUrl();
        java.lang.String str4 = request1.method;
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(headerList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GET" + "'", str4, "GET");
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0084");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.Profiler profiler6 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder7 = builder0.setProfiler(profiler6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(log5);
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0085");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        java.util.concurrent.Executor executor6 = null;
        builder0.sethttpExecutor(executor6);
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder10 = builder8.setServer("hi!");
        java.util.concurrent.Executor executor11 = null;
        builder10.callbackExecutor = executor11;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor14 = serializedObjectSupporter13.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder15 = builder10.setRequestInterceptor(requestInterceptor14);
        retrofit.RestAdapter.Builder builder16 = builder0.setRequestInterceptor(requestInterceptor14);
        java.util.concurrent.Executor executor17 = builder16.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter18.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter21 = serializedObjectSupporter18.deserializeObjectConverter7();
        retrofit.Server server22 = serializedObjectSupporter18.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder23 = builder16.setServer(server22);
        retrofit.Profiler profiler24 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder25 = builder23.setProfiler(profiler24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNotNull(gsonConverter21);
        org.junit.Assert.assertNotNull(server22);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0086");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler7 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder8 = builder0.setErrorHandler(errorHandler7);
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder11 = builder9.setServer("hi!");
        retrofit.client.Client.Provider provider12 = builder9.clientProvider;
        retrofit.RequestInterceptor requestInterceptor13 = builder9.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean15 = logLevel14.log();
        retrofit.RestAdapter.Builder builder16 = builder9.setLogLevel(logLevel14);
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor18 = builder17.getcallbackExecutor();
        retrofit.client.Client.Provider provider19 = null;
        builder17.clientProvider = provider19;
        retrofit.Server server21 = null;
        builder17.server = server21;
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        builder17.log = log23;
        builder9.log = log23;
        retrofit.RestAdapter.Builder builder26 = builder8.setLog(log23);
        retrofit.RestAdapter.Builder builder28 = builder26.setServer("Retrofit-Idle");
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor30 = serializedObjectSupporter29.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter31 = serializedObjectSupporter29.deserializeObjectConverter5();
        retrofit.client.Request request32 = serializedObjectSupporter29.deserializeObjectRequest8();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter29.deserializeObjectConverter2();
        retrofit.RestAdapter.Builder builder34 = builder28.setConverter((retrofit.converter.Converter) gsonConverter33);
        retrofit.client.Client.Provider provider35 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder36 = builder34.setClient(provider35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNotNull(errorHandler7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertNull(requestInterceptor13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(gsonConverter31);
        org.junit.Assert.assertNotNull(request32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0087");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.client.Request request9 = serializedObjectSupporter6.deserializeObjectRequest1();
        builder0.serializedObjectSupporter = serializedObjectSupporter6;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder14 = builder12.setServer("hi!");
        java.util.concurrent.Executor executor15 = null;
        builder14.callbackExecutor = executor15;
        retrofit.RestAdapter restAdapter17 = builder14.build();
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor19 = null;
        builder18.sethttpExecutor(executor19);
        retrofit.Profiler profiler21 = null;
        builder18.profiler = profiler21;
        retrofit.RestAdapter.Log log23 = builder18.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder26 = builder18.setErrorHandler(errorHandler25);
        retrofit.RestAdapter.Builder builder27 = builder14.setErrorHandler(errorHandler25);
        java.util.concurrent.Executor executor28 = builder27.callbackExecutor;
        builder0.setcallbackExecutor(executor28);
        retrofit.converter.Converter converter30 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder31 = builder0.setConverter(converter30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Converter may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(restAdapter17);
        org.junit.Assert.assertNull(log23);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(executor28);
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0088");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest4();
        retrofit.ErrorHandler errorHandler5 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collections collections6 = serializedObjectSupporter0.deserializeObjectList1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.Collections$UnmodifiableRandomAccessList cannot be cast to java.util.Collections");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(errorHandler5);
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0089");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.client.Client.Provider provider15 = restAdapter10.getclientProvider();
        java.lang.String str16 = restAdapter10.getIDLE_THREAD_NAME();
        java.util.concurrent.Executor executor17 = restAdapter10.callbackExecutor;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Retrofit-Idle" + "'", str16, "Retrofit-Idle");
        org.junit.Assert.assertNull(executor17);
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0090");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter6();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest8();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString3();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter0.deserializeObjectConverter4();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter8 = serializedObjectSupporter0.deserializeObjectLogLevel2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GET" + "'", str6, "GET");
        org.junit.Assert.assertNotNull(gsonConverter7);
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0091");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.client.Request request9 = serializedObjectSupporter6.deserializeObjectRequest1();
        builder0.serializedObjectSupporter = serializedObjectSupporter6;
        retrofit.client.Request request11 = serializedObjectSupporter6.deserializeObjectRequest2();
        retrofit.client.Request request12 = serializedObjectSupporter6.deserializeObjectRequest5();
        retrofit.mime.TypedOutput typedOutput13 = request12.body;
        java.lang.String str14 = request12.getUrl();
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNotNull(request11);
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNull(typedOutput13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "http://example.com/" + "'", str14, "http://example.com/");
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0092");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = null;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel13);
        builder0.logLevel = logLevel13;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor17 = builder16.getcallbackExecutor();
        retrofit.client.Client.Provider provider18 = null;
        builder16.clientProvider = provider18;
        retrofit.Server server20 = null;
        builder16.server = server20;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        builder16.log = log22;
        log22.log("hi!");
        builder0.log = log22;
        retrofit.SerializedObjectSupporter serializedObjectSupporter27 = builder0.serializedObjectSupporter;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertNull(serializedObjectSupporter27);
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0093");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler1 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest6();
        java.lang.String str3 = request2.url;
        java.lang.String str4 = request2.getUrl();
        java.lang.String str5 = request2.method;
        org.junit.Assert.assertNotNull(errorHandler1);
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "http://example.com/" + "'", str4, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GET" + "'", str5, "GET");
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0094");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider5 = builder0.getclientProvider();
        retrofit.client.Client.Provider provider6 = null;
        builder0.setclientProvider(provider6);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(provider5);
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0095");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter1 = serializedObjectSupporter0.deserializeObjectConverter2();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest7();
        java.lang.String str3 = request2.url;
        java.lang.String str4 = request2.method;
        java.lang.String str5 = request2.getMethod();
        org.junit.Assert.assertNotNull(gsonConverter1);
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GET" + "'", str4, "GET");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GET" + "'", str5, "GET");
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0096");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler13 = restAdapter10.geterrorHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter14 = restAdapter10.serializedObjectSupporter;
        retrofit.client.Response response16 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response18 = restAdapter10.logAndReplaceResponse("GET", response16, 100L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(serializedObjectSupporter14);
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0097");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        java.util.List<retrofit.client.Header> headerList2 = request1.headers;
        java.lang.String str3 = request1.getUrl();
        java.lang.String str4 = request1.url;
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(headerList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "http://example.com/" + "'", str4, "http://example.com/");
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0098");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest1();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest8();
        java.util.List<retrofit.client.Header> headerList5 = request4.headers;
        java.lang.String str6 = request4.method;
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(headerList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GET" + "'", str6, "GET");
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0099");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = null;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter13;
        retrofit.client.Client.Provider provider15 = restAdapter10.getclientProvider();
        retrofit.ErrorHandler errorHandler16 = restAdapter10.geterrorHandler();
        retrofit.Profiler profiler17 = restAdapter10.getprofiler();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNull(profiler17);
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0100");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server4 = null;
        builder0.server = server4;
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        builder0.log = log6;
        retrofit.Profiler profiler8 = builder0.profiler;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        builder0.logLevel = logLevel9;
        retrofit.Profiler profiler11 = builder0.profiler;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertNull(profiler8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler11);
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0101");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server4 = null;
        builder0.server = server4;
        java.util.concurrent.Executor executor6 = builder0.gethttpExecutor();
        java.util.concurrent.Executor executor7 = builder0.gethttpExecutor();
        retrofit.client.Client client8 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder9 = builder0.setClient(client8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0102");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel15 = restAdapter10.logLevel;
        retrofit.converter.Converter converter16 = restAdapter10.getconverter();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(converter16);
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0103");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.client.Client.Provider provider17 = builder14.clientProvider;
        retrofit.RestAdapter.Log log18 = null;
        builder14.log = log18;
        java.util.concurrent.Executor executor20 = builder14.getcallbackExecutor();
        java.util.concurrent.Executor executor21 = builder14.callbackExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter22 = new retrofit.SerializedObjectSupporter();
        java.lang.String str23 = serializedObjectSupporter22.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter24 = serializedObjectSupporter22.deserializeObjectConverter2();
        retrofit.converter.GsonConverter gsonConverter25 = serializedObjectSupporter22.deserializeObjectConverter7();
        retrofit.RestAdapter.Builder builder26 = builder14.setConverter((retrofit.converter.Converter) gsonConverter25);
        java.lang.reflect.Method method27 = null;
        java.lang.Object[] objArray28 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj29 = restHandler13.invoke((java.lang.Object) builder14, method27, objArray28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(provider17);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Retrofit-Idle" + "'", str23, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter24);
        org.junit.Assert.assertNotNull(gsonConverter25);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0104");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler2 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.mime.TypedString typedString3 = serializedObjectSupporter0.deserializeObjectTypedOutput2();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString3();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collections collections5 = serializedObjectSupporter0.deserializeObjectList1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.Collections$UnmodifiableRandomAccessList cannot be cast to java.util.Collections");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(errorHandler2);
        org.junit.Assert.assertNotNull(typedString3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GET" + "'", str4, "GET");
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0105");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        java.lang.String str13 = restAdapter10.getIDLE_THREAD_NAME();
        java.util.concurrent.Executor executor14 = restAdapter10.gethttpExecutor();
        retrofit.RestAdapter.Log log15 = restAdapter10.log;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-Idle" + "'", str13, "Retrofit-Idle");
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(log15);
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0106");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString3();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter3 = serializedObjectSupporter0.deserializeObjectLogLevel2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "GET" + "'", str1, "GET");
        org.junit.Assert.assertNotNull(gsonConverter2);
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0107");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.converter.Converter converter5 = builder0.converter;
        java.util.concurrent.Executor executor6 = builder0.httpExecutor;
        org.junit.Assert.assertNull(converter5);
        org.junit.Assert.assertNull(executor6);
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0108");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.client.Client.Provider provider3 = builder0.getclientProvider();
        retrofit.client.Client.Provider provider4 = builder0.getclientProvider();
        retrofit.Server server5 = builder0.server;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.sethttpExecutor(executor7);
        retrofit.Profiler profiler9 = null;
        builder6.profiler = profiler9;
        retrofit.Server server11 = builder6.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor13 = serializedObjectSupporter12.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter12.deserializeObjectConverter7();
        retrofit.client.Request request15 = serializedObjectSupporter12.deserializeObjectRequest1();
        builder6.serializedObjectSupporter = serializedObjectSupporter12;
        retrofit.client.Request request17 = serializedObjectSupporter12.deserializeObjectRequest2();
        retrofit.mime.TypedString typedString18 = serializedObjectSupporter12.deserializeObjectTypedOutput2();
        builder0.serializedObjectSupporter = serializedObjectSupporter12;
        java.lang.String str20 = serializedObjectSupporter12.deserializeObjectString2();
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(provider4);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNull(server11);
        org.junit.Assert.assertNotNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertNotNull(typedString18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Retrofit-Idle" + "'", str20, "Retrofit-Idle");
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0109");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.RestAdapter restAdapter5 = builder2.build();
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.sethttpExecutor(executor7);
        retrofit.Profiler profiler9 = null;
        builder6.profiler = profiler9;
        retrofit.RestAdapter.Log log11 = builder6.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler13 = serializedObjectSupporter12.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder14 = builder6.setErrorHandler(errorHandler13);
        retrofit.RestAdapter.Builder builder15 = builder2.setErrorHandler(errorHandler13);
        java.util.concurrent.Executor executor16 = builder15.callbackExecutor;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor18 = null;
        builder17.sethttpExecutor(executor18);
        retrofit.Profiler profiler20 = null;
        builder17.profiler = profiler20;
        retrofit.Server server22 = builder17.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter23 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor24 = serializedObjectSupporter23.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter25 = serializedObjectSupporter23.deserializeObjectConverter7();
        retrofit.client.Request request26 = serializedObjectSupporter23.deserializeObjectRequest1();
        builder17.serializedObjectSupporter = serializedObjectSupporter23;
        java.lang.String str28 = serializedObjectSupporter23.deserializeObjectString2();
        retrofit.ErrorHandler errorHandler29 = serializedObjectSupporter23.deserializeObjectErrorHandler1();
        builder15.errorHandler = errorHandler29;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder33 = builder31.setServer("hi!");
        retrofit.client.Client.Provider provider34 = builder31.clientProvider;
        retrofit.RestAdapter.Log log35 = null;
        builder31.log = log35;
        java.util.concurrent.Executor executor37 = builder31.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor39 = builder38.getcallbackExecutor();
        retrofit.client.Client.Provider provider40 = null;
        builder38.clientProvider = provider40;
        retrofit.SerializedObjectSupporter serializedObjectSupporter42 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor43 = serializedObjectSupporter42.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter44 = serializedObjectSupporter42.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter45 = serializedObjectSupporter42.deserializeObjectConverter5();
        retrofit.client.Request request46 = serializedObjectSupporter42.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter47 = serializedObjectSupporter42.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter48 = serializedObjectSupporter42.deserializeObjectConverter6();
        retrofit.RestAdapter.Builder builder49 = builder38.setConverter((retrofit.converter.Converter) gsonConverter48);
        builder31.converter = gsonConverter48;
        retrofit.ErrorHandler errorHandler51 = builder31.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter52 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler53 = serializedObjectSupporter52.deserializeObjectErrorHandler1();
        retrofit.Server server54 = serializedObjectSupporter52.deserializeObjectServer1();
        builder31.server = server54;
        retrofit.RestAdapter.Builder builder56 = builder15.setServer(server54);
        retrofit.RestAdapter.Log log57 = builder15.log;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(restAdapter5);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertNotNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(executor16);
        org.junit.Assert.assertNull(server22);
        org.junit.Assert.assertNotNull(requestInterceptor24);
        org.junit.Assert.assertNotNull(gsonConverter25);
        org.junit.Assert.assertNotNull(request26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Retrofit-Idle" + "'", str28, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(provider34);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNotNull(requestInterceptor43);
        org.junit.Assert.assertNotNull(gsonConverter44);
        org.junit.Assert.assertNotNull(gsonConverter45);
        org.junit.Assert.assertNotNull(request46);
        org.junit.Assert.assertNotNull(gsonConverter47);
        org.junit.Assert.assertNotNull(gsonConverter48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(errorHandler51);
        org.junit.Assert.assertNotNull(errorHandler53);
        org.junit.Assert.assertNotNull(server54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(log57);
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0110");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean6 = logLevel5.log();
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder9 = builder0.setServer("http://example.com/");
        retrofit.client.Client client10 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder11 = builder0.setClient(client10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0111");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.RestAdapter restAdapter5 = builder2.build();
        retrofit.RestAdapter.Log log6 = restAdapter5.log;
        java.lang.String str7 = restAdapter5.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler8 = restAdapter5.geterrorHandler();
        java.lang.Throwable throwable9 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter5.logException(throwable9, "http://example.com/");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(restAdapter5);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Retrofit-Idle" + "'", str7, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler8);
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0112");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        java.lang.Throwable throwable13 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter10.logException(throwable13, "Retrofit-Idle");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0113");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        java.lang.String str14 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor16 = serializedObjectSupporter15.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter15.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter18 = serializedObjectSupporter15.deserializeObjectConverter5();
        retrofit.client.Request request19 = serializedObjectSupporter15.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter15.deserializeObjectConverter3();
        retrofit.client.Request request21 = serializedObjectSupporter15.deserializeObjectRequest4();
        java.util.List<retrofit.client.Header> headerList22 = request21.headers;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request23 = restAdapter10.logAndReplaceRequest(request21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Retrofit-Idle" + "'", str14, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(requestInterceptor16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertNotNull(gsonConverter18);
        org.junit.Assert.assertNotNull(request19);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNotNull(request21);
        org.junit.Assert.assertNotNull(headerList22);
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0114");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.RestAdapter restAdapter5 = builder2.build();
        retrofit.RestAdapter.Log log6 = restAdapter5.log;
        java.util.concurrent.Executor executor7 = restAdapter5.gethttpExecutor();
        java.lang.Throwable throwable8 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter5.logException(throwable8, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(restAdapter5);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertNotNull(executor7);
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0115");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter8();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest5();
        retrofit.client.Request request6 = serializedObjectSupporter0.deserializeObjectRequest8();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(request6);
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0116");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider5 = builder0.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request7 = serializedObjectSupporter6.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler8 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        builder0.errorHandler = errorHandler8;
        retrofit.converter.Converter converter10 = builder0.converter;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder13 = builder11.setServer("hi!");
        java.util.concurrent.Executor executor14 = null;
        builder13.callbackExecutor = executor14;
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor17 = serializedObjectSupporter16.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder18 = builder13.setRequestInterceptor(requestInterceptor17);
        retrofit.RestAdapter.Builder builder19 = builder0.setRequestInterceptor(requestInterceptor17);
        java.util.concurrent.Executor executor20 = builder0.getcallbackExecutor();
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(errorHandler8);
        org.junit.Assert.assertNull(converter10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(requestInterceptor17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(executor20);
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0117");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        java.lang.String str2 = request1.getUrl();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "http://example.com/" + "'", str2, "http://example.com/");
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0118");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.client.Client.Provider provider5 = null;
        builder0.setclientProvider(provider5);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder8 = builder0.setServer("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be blank.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(requestInterceptor4);
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0119");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        java.lang.String str13 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        retrofit.ErrorHandler errorHandler25 = restAdapter24.errorHandler;
        int int26 = restAdapter24.getLOG_CHUNK_SIZE();
        retrofit.RestAdapter.Log log27 = restAdapter24.log;
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter24.getLogLevel();
        restAdapter10.logLevel = logLevel28;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder32 = builder30.setServer("hi!");
        java.util.concurrent.Executor executor33 = null;
        builder32.callbackExecutor = executor33;
        retrofit.RestAdapter restAdapter35 = builder32.build();
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder38 = builder36.setServer("hi!");
        retrofit.client.Client.Provider provider39 = builder36.clientProvider;
        retrofit.RequestInterceptor requestInterceptor40 = builder36.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean42 = logLevel41.log();
        retrofit.RestAdapter.Builder builder43 = builder36.setLogLevel(logLevel41);
        builder32.logLevel = logLevel41;
        restAdapter10.setLogLevel(logLevel41);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-Idle" + "'", str13, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4000 + "'", int26 == 4000);
        org.junit.Assert.assertNull(log27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(restAdapter35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(provider39);
        org.junit.Assert.assertNull(requestInterceptor40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0120");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest8();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter1();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Retrofit-Idle" + "'", str4, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter5);
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0121");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.ErrorHandler errorHandler6 = builder0.errorHandler;
        java.util.concurrent.Executor executor7 = builder0.getcallbackExecutor();
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(executor7);
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0122");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        java.lang.Throwable throwable14 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter10.logException(throwable14, "POST");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(log13);
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0123");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.SerializedObjectSupporter serializedObjectSupporter5 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor6 = serializedObjectSupporter5.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder7 = builder2.setRequestInterceptor(requestInterceptor6);
        retrofit.SerializedObjectSupporter serializedObjectSupporter8 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request9 = serializedObjectSupporter8.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter10 = serializedObjectSupporter8.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter11 = serializedObjectSupporter8.deserializeObjectConverter1();
        builder7.converter = gsonConverter11;
        java.lang.Class<?> wildcardClass13 = builder7.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNotNull(gsonConverter10);
        org.junit.Assert.assertNotNull(gsonConverter11);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0124");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        java.util.concurrent.Executor executor5 = builder0.callbackExecutor;
        retrofit.ErrorHandler errorHandler6 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.sethttpExecutor(executor8);
        retrofit.Profiler profiler10 = null;
        builder7.profiler = profiler10;
        retrofit.Server server12 = builder7.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor14 = serializedObjectSupporter13.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter15 = serializedObjectSupporter13.deserializeObjectConverter7();
        retrofit.client.Request request16 = serializedObjectSupporter13.deserializeObjectRequest1();
        builder7.serializedObjectSupporter = serializedObjectSupporter13;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor19 = null;
        builder18.sethttpExecutor(executor19);
        retrofit.Profiler profiler21 = null;
        builder18.profiler = profiler21;
        retrofit.Server server23 = builder18.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor25 = serializedObjectSupporter24.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter26 = serializedObjectSupporter24.deserializeObjectConverter7();
        retrofit.client.Request request27 = serializedObjectSupporter24.deserializeObjectRequest1();
        builder18.serializedObjectSupporter = serializedObjectSupporter24;
        java.lang.String str29 = serializedObjectSupporter24.deserializeObjectString2();
        retrofit.ErrorHandler errorHandler30 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder31 = builder7.setErrorHandler(errorHandler30);
        retrofit.RestAdapter.Builder builder32 = builder0.setErrorHandler(errorHandler30);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter33 = builder32.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNotNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(gsonConverter15);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNull(server23);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNotNull(gsonConverter26);
        org.junit.Assert.assertNotNull(request27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Retrofit-Idle" + "'", str29, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0125");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest1();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest7();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter3();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collections collections6 = serializedObjectSupporter0.deserializeObjectList1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.Collections$UnmodifiableRandomAccessList cannot be cast to java.util.Collections");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(gsonConverter5);
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0126");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.client.Request request9 = serializedObjectSupporter6.deserializeObjectRequest1();
        builder0.serializedObjectSupporter = serializedObjectSupporter6;
        java.lang.String str11 = serializedObjectSupporter6.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter12 = serializedObjectSupporter6.deserializeObjectConverter1();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter13 = serializedObjectSupporter6.deserializeObjectLogLevel2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-Idle" + "'", str11, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter12);
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0127");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel12 = restAdapter10.logLevel;
        java.lang.Throwable throwable13 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter10.logException(throwable13, "POST");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0128");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = null;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter13;
        retrofit.client.Client.Provider provider15 = restAdapter10.getclientProvider();
        retrofit.ErrorHandler errorHandler16 = restAdapter10.geterrorHandler();
        retrofit.RequestInterceptor requestInterceptor17 = restAdapter10.requestInterceptor;
        java.lang.Throwable throwable18 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter10.logException(throwable18, "http://example.com/");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNull(requestInterceptor17);
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0129");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RestAdapter.Log log4 = null;
        builder0.log = log4;
        java.util.concurrent.Executor executor6 = builder0.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = builder7.getcallbackExecutor();
        retrofit.client.Client.Provider provider9 = null;
        builder7.clientProvider = provider9;
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor12 = serializedObjectSupporter11.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter13 = serializedObjectSupporter11.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter11.deserializeObjectConverter5();
        retrofit.client.Request request15 = serializedObjectSupporter11.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter11.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter11.deserializeObjectConverter6();
        retrofit.RestAdapter.Builder builder18 = builder7.setConverter((retrofit.converter.Converter) gsonConverter17);
        builder0.converter = gsonConverter17;
        retrofit.ErrorHandler errorHandler20 = builder0.errorHandler;
        retrofit.Profiler profiler21 = builder0.profiler;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNotNull(requestInterceptor12);
        org.junit.Assert.assertNotNull(gsonConverter13);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(gsonConverter16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNull(profiler21);
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0130");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter8();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString3();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter0.deserializeObjectConverter6();
        retrofit.client.Request request8 = serializedObjectSupporter0.deserializeObjectRequest1();
        retrofit.client.Request request9 = serializedObjectSupporter0.deserializeObjectRequest8();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "http://example.com/" + "'", str5, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GET" + "'", str6, "GET");
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertNotNull(request8);
        org.junit.Assert.assertNotNull(request9);
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0131");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.converter.Converter converter15 = restAdapter10.converter;
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter10.logLevel;
        retrofit.RestAdapter.Log log17 = restAdapter10.log;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(converter15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(log17);
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider5 = builder0.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request7 = serializedObjectSupporter6.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler8 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        builder0.errorHandler = errorHandler8;
        retrofit.RestAdapter.Log log10 = builder0.log;
        java.util.concurrent.Executor executor11 = builder0.httpExecutor;
        builder0.ensureSaneDefaults();
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(errorHandler8);
        org.junit.Assert.assertNull(log10);
        org.junit.Assert.assertNull(executor11);
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0133");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder7 = builder5.setServer("hi!");
        retrofit.client.Client.Provider provider8 = builder5.clientProvider;
        java.util.concurrent.Executor executor9 = null;
        builder5.setcallbackExecutor(executor9);
        retrofit.RestAdapter.Log log11 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder12 = builder5.setLog(log11);
        retrofit.RestAdapter.Builder builder13 = builder0.setLog(log11);
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = null;
        builder14.sethttpExecutor(executor15);
        retrofit.Profiler profiler17 = null;
        builder14.profiler = profiler17;
        retrofit.RestAdapter.LogLevel logLevel19 = builder14.logLevel;
        java.util.concurrent.Executor executor20 = null;
        builder14.sethttpExecutor(executor20);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder24 = builder22.setServer("hi!");
        java.util.concurrent.Executor executor25 = null;
        builder24.callbackExecutor = executor25;
        retrofit.SerializedObjectSupporter serializedObjectSupporter27 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor28 = serializedObjectSupporter27.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder29 = builder24.setRequestInterceptor(requestInterceptor28);
        retrofit.RestAdapter.Builder builder30 = builder14.setRequestInterceptor(requestInterceptor28);
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean32 = logLevel31.log();
        builder14.logLevel = logLevel31;
        retrofit.SerializedObjectSupporter serializedObjectSupporter34 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor35 = serializedObjectSupporter34.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter36 = serializedObjectSupporter34.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter37 = serializedObjectSupporter34.deserializeObjectConverter5();
        retrofit.client.Request request38 = serializedObjectSupporter34.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter39 = serializedObjectSupporter34.deserializeObjectConverter3();
        retrofit.client.Request request40 = serializedObjectSupporter34.deserializeObjectRequest4();
        retrofit.client.Request request41 = serializedObjectSupporter34.deserializeObjectRequest2();
        builder14.serializedObjectSupporter = serializedObjectSupporter34;
        retrofit.converter.GsonConverter gsonConverter43 = serializedObjectSupporter34.deserializeObjectConverter5();
        builder0.serializedObjectSupporter = serializedObjectSupporter34;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor47 = null;
        builder46.sethttpExecutor(executor47);
        retrofit.Profiler profiler49 = null;
        builder46.profiler = profiler49;
        retrofit.RestAdapter.Log log51 = builder46.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter52 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler53 = serializedObjectSupporter52.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder54 = builder46.setErrorHandler(errorHandler53);
        builder0.errorHandler = errorHandler53;
        retrofit.RestAdapter.Log log56 = builder0.log;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNotNull(log11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(requestInterceptor28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(requestInterceptor35);
        org.junit.Assert.assertNotNull(gsonConverter36);
        org.junit.Assert.assertNotNull(gsonConverter37);
        org.junit.Assert.assertNotNull(request38);
        org.junit.Assert.assertNotNull(gsonConverter39);
        org.junit.Assert.assertNotNull(request40);
        org.junit.Assert.assertNotNull(request41);
        org.junit.Assert.assertNotNull(gsonConverter43);
        org.junit.Assert.assertNull(log51);
        org.junit.Assert.assertNotNull(errorHandler53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(log56);
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0134");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter2();
        java.lang.Class<?> wildcardClass3 = serializedObjectSupporter0.getClass();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Retrofit-Idle" + "'", str1, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0135");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.SerializedObjectSupporter serializedObjectSupporter5 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor6 = serializedObjectSupporter5.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder7 = builder2.setRequestInterceptor(requestInterceptor6);
        java.util.concurrent.Executor executor8 = builder7.gethttpExecutor();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(executor8);
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0136");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        java.util.concurrent.Executor executor14 = restAdapter10.getcallbackExecutor();
        retrofit.Server server15 = null;
        retrofit.client.Client.Provider provider16 = null;
        java.util.concurrent.Executor executor17 = null;
        java.util.concurrent.Executor executor18 = null;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        retrofit.converter.Converter converter20 = null;
        retrofit.Profiler profiler21 = null;
        retrofit.ErrorHandler errorHandler22 = null;
        retrofit.RestAdapter.Log log23 = null;
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter(server15, provider16, executor17, executor18, requestInterceptor19, converter20, profiler21, errorHandler22, log23, logLevel24);
        retrofit.ErrorHandler errorHandler26 = restAdapter25.errorHandler;
        int int27 = restAdapter25.getLOG_CHUNK_SIZE();
        retrofit.Server server28 = restAdapter25.getserver();
        retrofit.client.Client.Provider provider29 = restAdapter25.clientProvider;
        retrofit.client.Client.Provider provider30 = restAdapter25.getclientProvider();
        java.lang.String str31 = restAdapter25.getIDLE_THREAD_NAME();
        retrofit.Server server32 = null;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Log log40 = null;
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log40, logLevel41);
        retrofit.RestAdapter.LogLevel logLevel43 = restAdapter42.logLevel;
        retrofit.ErrorHandler errorHandler44 = restAdapter42.geterrorHandler();
        java.util.concurrent.Executor executor45 = restAdapter42.getcallbackExecutor();
        retrofit.converter.Converter converter46 = restAdapter42.converter;
        retrofit.Server server47 = restAdapter42.getserver();
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter42.getLogLevel();
        restAdapter25.setLogLevel(logLevel48);
        restAdapter10.logLevel = logLevel48;
        retrofit.client.Client.Provider provider51 = restAdapter10.getclientProvider();
        retrofit.RestAdapter.LogLevel logLevel52 = restAdapter10.getLogLevel();
        retrofit.Profiler profiler53 = restAdapter10.getprofiler();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4000 + "'", int27 == 4000);
        org.junit.Assert.assertNull(server28);
        org.junit.Assert.assertNull(provider29);
        org.junit.Assert.assertNull(provider30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Retrofit-Idle" + "'", str31, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler44);
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertNull(converter46);
        org.junit.Assert.assertNull(server47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(profiler53);
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0137");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest8();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString4();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter4();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter6 = serializedObjectSupporter0.deserializeObjectLogLevel1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "http://example.com/" + "'", str4, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter5);
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0138");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter6();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest8();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString3();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter0.deserializeObjectConverter4();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GET" + "'", str6, "GET");
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertNotNull(gsonConverter8);
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0139");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        java.util.concurrent.Executor executor6 = null;
        builder0.sethttpExecutor(executor6);
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder10 = builder8.setServer("hi!");
        java.util.concurrent.Executor executor11 = null;
        builder10.callbackExecutor = executor11;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor14 = serializedObjectSupporter13.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder15 = builder10.setRequestInterceptor(requestInterceptor14);
        retrofit.RestAdapter.Builder builder16 = builder0.setRequestInterceptor(requestInterceptor14);
        java.util.concurrent.Executor executor17 = builder16.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter18.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter21 = serializedObjectSupporter18.deserializeObjectConverter7();
        retrofit.Server server22 = serializedObjectSupporter18.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder23 = builder16.setServer(server22);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder26 = builder24.setServer("hi!");
        java.util.concurrent.Executor executor27 = null;
        builder26.callbackExecutor = executor27;
        retrofit.RestAdapter restAdapter29 = builder26.build();
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor31 = null;
        builder30.sethttpExecutor(executor31);
        retrofit.Profiler profiler33 = null;
        builder30.profiler = profiler33;
        retrofit.RestAdapter.Log log35 = builder30.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter36 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler37 = serializedObjectSupporter36.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder38 = builder30.setErrorHandler(errorHandler37);
        retrofit.RestAdapter.Builder builder39 = builder26.setErrorHandler(errorHandler37);
        java.util.concurrent.Executor executor40 = builder39.callbackExecutor;
        builder23.sethttpExecutor(executor40);
        retrofit.SerializedObjectSupporter serializedObjectSupporter42 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request43 = serializedObjectSupporter42.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter44 = serializedObjectSupporter42.deserializeObjectConverter8();
        builder23.serializedObjectSupporter = serializedObjectSupporter42;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter46 = serializedObjectSupporter42.deserializeObjectLogLevel2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNotNull(gsonConverter21);
        org.junit.Assert.assertNotNull(server22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(restAdapter29);
        org.junit.Assert.assertNull(log35);
        org.junit.Assert.assertNotNull(errorHandler37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(executor40);
        org.junit.Assert.assertNotNull(request43);
        org.junit.Assert.assertNotNull(gsonConverter44);
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0140");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.util.concurrent.Executor executor11 = restAdapter10.getcallbackExecutor();
        retrofit.ErrorHandler errorHandler12 = restAdapter10.geterrorHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        java.lang.String str14 = serializedObjectSupporter13.deserializeObjectString3();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter13;
        retrofit.ErrorHandler errorHandler16 = serializedObjectSupporter13.deserializeObjectErrorHandler1();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GET" + "'", str14, "GET");
        org.junit.Assert.assertNotNull(errorHandler16);
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0141");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean6 = logLevel5.log();
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder9 = builder0.setServer("http://example.com/");
        java.util.concurrent.Executor executor10 = builder0.httpExecutor;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = null;
        builder11.sethttpExecutor(executor12);
        retrofit.converter.Converter converter14 = builder11.converter;
        java.util.concurrent.Executor executor15 = builder11.getcallbackExecutor();
        retrofit.client.Client.Provider provider16 = builder11.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request18 = serializedObjectSupporter17.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler19 = serializedObjectSupporter17.deserializeObjectErrorHandler1();
        builder11.errorHandler = errorHandler19;
        retrofit.Server server21 = builder11.server;
        builder11.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor23 = builder11.requestInterceptor;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder26 = builder24.setServer("hi!");
        java.util.concurrent.Executor executor27 = null;
        builder26.callbackExecutor = executor27;
        retrofit.RestAdapter restAdapter29 = builder26.build();
        retrofit.RestAdapter.Log log30 = restAdapter29.log;
        builder11.log = log30;
        log30.log("Retrofit-");
        builder0.log = log30;
        java.lang.Class<?> wildcardClass35 = log30.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(provider16);
        org.junit.Assert.assertNotNull(request18);
        org.junit.Assert.assertNotNull(errorHandler19);
        org.junit.Assert.assertNull(server21);
        org.junit.Assert.assertNotNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(restAdapter29);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0142");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        java.lang.String str13 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        retrofit.ErrorHandler errorHandler25 = restAdapter24.errorHandler;
        int int26 = restAdapter24.getLOG_CHUNK_SIZE();
        retrofit.RestAdapter.Log log27 = restAdapter24.log;
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter24.getLogLevel();
        restAdapter10.logLevel = logLevel28;
        boolean boolean30 = logLevel28.log();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-Idle" + "'", str13, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4000 + "'", int26 == 4000);
        org.junit.Assert.assertNull(log27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0143");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.Profiler profiler15 = restAdapter10.profiler;
        java.lang.String str16 = restAdapter10.getTHREAD_PREFIX();
        retrofit.RequestInterceptor requestInterceptor17 = restAdapter10.getrequestInterceptor();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Retrofit-" + "'", str16, "Retrofit-");
        org.junit.Assert.assertNull(requestInterceptor17);
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0144");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest8();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest5();
        retrofit.mime.TypedOutput typedOutput5 = request4.body;
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNull(typedOutput5);
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0145");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        java.util.concurrent.Executor executor6 = null;
        builder0.sethttpExecutor(executor6);
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder10 = builder8.setServer("hi!");
        java.util.concurrent.Executor executor11 = null;
        builder10.callbackExecutor = executor11;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor14 = serializedObjectSupporter13.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder15 = builder10.setRequestInterceptor(requestInterceptor14);
        retrofit.RestAdapter.Builder builder16 = builder0.setRequestInterceptor(requestInterceptor14);
        java.util.concurrent.Executor executor17 = builder16.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter18.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter21 = serializedObjectSupporter18.deserializeObjectConverter7();
        retrofit.Server server22 = serializedObjectSupporter18.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder23 = builder16.setServer(server22);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder26 = builder24.setServer("hi!");
        java.util.concurrent.Executor executor27 = null;
        builder26.callbackExecutor = executor27;
        retrofit.RestAdapter restAdapter29 = builder26.build();
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor31 = null;
        builder30.sethttpExecutor(executor31);
        retrofit.Profiler profiler33 = null;
        builder30.profiler = profiler33;
        retrofit.RestAdapter.Log log35 = builder30.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter36 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler37 = serializedObjectSupporter36.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder38 = builder30.setErrorHandler(errorHandler37);
        retrofit.RestAdapter.Builder builder39 = builder26.setErrorHandler(errorHandler37);
        java.util.concurrent.Executor executor40 = builder39.callbackExecutor;
        builder23.sethttpExecutor(executor40);
        retrofit.SerializedObjectSupporter serializedObjectSupporter42 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request43 = serializedObjectSupporter42.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter44 = serializedObjectSupporter42.deserializeObjectConverter8();
        builder23.serializedObjectSupporter = serializedObjectSupporter42;
        retrofit.client.Client.Provider provider46 = builder23.getclientProvider();
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNotNull(gsonConverter21);
        org.junit.Assert.assertNotNull(server22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(restAdapter29);
        org.junit.Assert.assertNull(log35);
        org.junit.Assert.assertNotNull(errorHandler37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(executor40);
        org.junit.Assert.assertNotNull(request43);
        org.junit.Assert.assertNotNull(gsonConverter44);
        org.junit.Assert.assertNull(provider46);
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0146");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter1 = serializedObjectSupporter0.deserializeObjectConverter2();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest3();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter6();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter6 = serializedObjectSupporter0.deserializeObjectLogLevel1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(gsonConverter1);
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(gsonConverter5);
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0147");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest3();
        java.lang.String str5 = request4.getMethod();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "POST" + "'", str5, "POST");
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0148");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter5();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collections collections4 = serializedObjectSupporter0.deserializeObjectList1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.Collections$UnmodifiableRandomAccessList cannot be cast to java.util.Collections");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0149");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.RestAdapter restAdapter5 = builder2.build();
        retrofit.RestAdapter.Log log6 = restAdapter5.log;
        java.util.concurrent.Executor executor7 = restAdapter5.gethttpExecutor();
        java.lang.String str8 = restAdapter5.getIDLE_THREAD_NAME();
        retrofit.Server server9 = null;
        retrofit.client.Client.Provider provider10 = null;
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        retrofit.converter.Converter converter14 = null;
        retrofit.Profiler profiler15 = null;
        retrofit.ErrorHandler errorHandler16 = null;
        retrofit.RestAdapter.Log log17 = null;
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter(server9, provider10, executor11, executor12, requestInterceptor13, converter14, profiler15, errorHandler16, log17, logLevel18);
        retrofit.ErrorHandler errorHandler20 = restAdapter19.errorHandler;
        java.util.concurrent.Executor executor21 = restAdapter19.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter19.getLogLevel();
        restAdapter5.logLevel = logLevel22;
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter5.logLevel = logLevel24;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(restAdapter5);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertNotNull(executor7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Retrofit-Idle" + "'", str8, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.FULL));
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0150");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter1 = serializedObjectSupporter0.deserializeObjectConverter2();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest7();
        retrofit.mime.TypedOutput typedOutput3 = request2.getBody();
        org.junit.Assert.assertNotNull(gsonConverter1);
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertNull(typedOutput3);
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0151");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter8();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString3();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter0.deserializeObjectConverter6();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter8 = serializedObjectSupporter0.deserializeObjectLogLevel2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "http://example.com/" + "'", str5, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GET" + "'", str6, "GET");
        org.junit.Assert.assertNotNull(gsonConverter7);
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0152");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.util.concurrent.Executor executor11 = restAdapter10.getcallbackExecutor();
        retrofit.ErrorHandler errorHandler12 = restAdapter10.geterrorHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        java.lang.String str14 = serializedObjectSupporter13.deserializeObjectString3();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter13;
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter10.requestInterceptor;
        retrofit.RestAdapter.Log log17 = restAdapter10.log;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GET" + "'", str14, "GET");
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNull(log17);
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0153");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.getcallbackExecutor();
        java.lang.String str13 = restAdapter10.getIDLE_THREAD_NAME();
        java.util.concurrent.Executor executor14 = restAdapter10.gethttpExecutor();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-Idle" + "'", str13, "Retrofit-Idle");
        org.junit.Assert.assertNull(executor14);
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0154");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter8();
        retrofit.mime.TypedString typedString5 = serializedObjectSupporter0.deserializeObjectTypedOutput2();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString2();
        retrofit.client.Request request7 = serializedObjectSupporter0.deserializeObjectRequest8();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(typedString5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Retrofit-Idle" + "'", str6, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(request7);
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0155");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.logLevel = logLevel23;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter10.setLogLevel(logLevel26);
        retrofit.RequestInterceptor requestInterceptor28 = restAdapter10.requestInterceptor;
        retrofit.converter.Converter converter29 = restAdapter10.converter;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(requestInterceptor28);
        org.junit.Assert.assertNull(converter29);
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0156");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor5 = null;
        builder4.sethttpExecutor(executor5);
        retrofit.Profiler profiler7 = null;
        builder4.profiler = profiler7;
        retrofit.RestAdapter.LogLevel logLevel9 = builder4.logLevel;
        java.util.concurrent.Executor executor10 = null;
        builder4.sethttpExecutor(executor10);
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder14 = builder12.setServer("hi!");
        java.util.concurrent.Executor executor15 = null;
        builder14.callbackExecutor = executor15;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder19 = builder14.setRequestInterceptor(requestInterceptor18);
        retrofit.RestAdapter.Builder builder20 = builder4.setRequestInterceptor(requestInterceptor18);
        java.util.concurrent.Executor executor21 = builder20.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter22 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor23 = serializedObjectSupporter22.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter24 = serializedObjectSupporter22.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter25 = serializedObjectSupporter22.deserializeObjectConverter7();
        retrofit.Server server26 = serializedObjectSupporter22.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder27 = builder20.setServer(server26);
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder30 = builder28.setServer("hi!");
        java.util.concurrent.Executor executor31 = null;
        builder30.callbackExecutor = executor31;
        retrofit.RestAdapter restAdapter33 = builder30.build();
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor35 = null;
        builder34.sethttpExecutor(executor35);
        retrofit.Profiler profiler37 = null;
        builder34.profiler = profiler37;
        retrofit.RestAdapter.Log log39 = builder34.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter40 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler41 = serializedObjectSupporter40.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder42 = builder34.setErrorHandler(errorHandler41);
        retrofit.RestAdapter.Builder builder43 = builder30.setErrorHandler(errorHandler41);
        java.util.concurrent.Executor executor44 = builder43.callbackExecutor;
        builder27.sethttpExecutor(executor44);
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder48 = builder46.setServer("hi!");
        retrofit.client.Client.Provider provider49 = builder46.clientProvider;
        retrofit.RequestInterceptor requestInterceptor50 = builder46.requestInterceptor;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder53 = builder51.setServer("hi!");
        retrofit.client.Client.Provider provider54 = builder51.clientProvider;
        java.util.concurrent.Executor executor55 = null;
        builder51.setcallbackExecutor(executor55);
        retrofit.RestAdapter.Log log57 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder58 = builder51.setLog(log57);
        retrofit.RestAdapter.Builder builder59 = builder46.setLog(log57);
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor61 = null;
        builder60.sethttpExecutor(executor61);
        retrofit.Profiler profiler63 = null;
        builder60.profiler = profiler63;
        retrofit.Server server65 = builder60.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter66 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor67 = serializedObjectSupporter66.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter68 = serializedObjectSupporter66.deserializeObjectConverter7();
        retrofit.client.Request request69 = serializedObjectSupporter66.deserializeObjectRequest1();
        builder60.serializedObjectSupporter = serializedObjectSupporter66;
        builder60.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder74 = builder72.setServer("hi!");
        java.util.concurrent.Executor executor75 = null;
        builder74.callbackExecutor = executor75;
        retrofit.RestAdapter restAdapter77 = builder74.build();
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor79 = null;
        builder78.sethttpExecutor(executor79);
        retrofit.Profiler profiler81 = null;
        builder78.profiler = profiler81;
        retrofit.RestAdapter.Log log83 = builder78.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter84 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler85 = serializedObjectSupporter84.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder86 = builder78.setErrorHandler(errorHandler85);
        retrofit.RestAdapter.Builder builder87 = builder74.setErrorHandler(errorHandler85);
        java.util.concurrent.Executor executor88 = builder87.callbackExecutor;
        builder60.setcallbackExecutor(executor88);
        builder59.callbackExecutor = executor88;
        retrofit.RestAdapter.Builder builder91 = builder0.setExecutors(executor44, executor88);
        retrofit.Server server92 = builder0.server;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNotNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(gsonConverter24);
        org.junit.Assert.assertNotNull(gsonConverter25);
        org.junit.Assert.assertNotNull(server26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(restAdapter33);
        org.junit.Assert.assertNull(log39);
        org.junit.Assert.assertNotNull(errorHandler41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(executor44);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(provider49);
        org.junit.Assert.assertNull(requestInterceptor50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(provider54);
        org.junit.Assert.assertNotNull(log57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(server65);
        org.junit.Assert.assertNotNull(requestInterceptor67);
        org.junit.Assert.assertNotNull(gsonConverter68);
        org.junit.Assert.assertNotNull(request69);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(restAdapter77);
        org.junit.Assert.assertNull(log83);
        org.junit.Assert.assertNotNull(errorHandler85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(executor88);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(server92);
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0157");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.Profiler profiler15 = restAdapter10.profiler;
        retrofit.converter.Converter converter16 = restAdapter10.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter17.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter17.deserializeObjectConverter4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter17;
        retrofit.RequestInterceptor requestInterceptor22 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter23 = serializedObjectSupporter17.deserializeObjectConverter3();
        retrofit.ErrorHandler errorHandler24 = serializedObjectSupporter17.deserializeObjectErrorHandler1();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter25 = serializedObjectSupporter17.deserializeObjectLogLevel1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNotNull(requestInterceptor22);
        org.junit.Assert.assertNotNull(gsonConverter23);
        org.junit.Assert.assertNotNull(errorHandler24);
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0158");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest1();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest7();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter0.deserializeObjectConverter6();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter7 = serializedObjectSupporter0.deserializeObjectLogLevel3();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(gsonConverter6);
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0159");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        java.util.concurrent.Executor executor13 = restAdapter10.httpExecutor;
        retrofit.Profiler profiler14 = restAdapter10.profiler;
        retrofit.Server server15 = restAdapter10.getserver();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(profiler14);
        org.junit.Assert.assertNull(server15);
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0160");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter10.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter14 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request15 = serializedObjectSupporter14.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter14.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter14.deserializeObjectConverter1();
        restHandler13.serializedObjectSupporter = serializedObjectSupporter14;
        retrofit.SerializedObjectSupporter serializedObjectSupporter19 = restHandler13.serializedObjectSupporter;
        java.lang.String str20 = serializedObjectSupporter19.deserializeObjectString5();
        retrofit.converter.GsonConverter gsonConverter21 = serializedObjectSupporter19.deserializeObjectConverter7();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(gsonConverter16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertNotNull(serializedObjectSupporter19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "POST" + "'", str20, "POST");
        org.junit.Assert.assertNotNull(gsonConverter21);
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0161");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.SerializedObjectSupporter serializedObjectSupporter5 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor6 = serializedObjectSupporter5.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder7 = builder2.setRequestInterceptor(requestInterceptor6);
        retrofit.Server server8 = builder7.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter9 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler10 = serializedObjectSupporter9.deserializeObjectErrorHandler1();
        builder7.serializedObjectSupporter = serializedObjectSupporter9;
        retrofit.Profiler profiler12 = null;
        builder7.profiler = profiler12;
        retrofit.SerializedObjectSupporter serializedObjectSupporter14 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor15 = serializedObjectSupporter14.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter14.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter14.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter18 = serializedObjectSupporter14.deserializeObjectConverter8();
        java.lang.String str19 = serializedObjectSupporter14.deserializeObjectString4();
        java.lang.String str20 = serializedObjectSupporter14.deserializeObjectString3();
        retrofit.converter.GsonConverter gsonConverter21 = serializedObjectSupporter14.deserializeObjectConverter6();
        retrofit.RestAdapter.Builder builder22 = builder7.setConverter((retrofit.converter.Converter) gsonConverter21);
        java.util.concurrent.Executor executor23 = builder22.httpExecutor;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(server8);
        org.junit.Assert.assertNotNull(errorHandler10);
        org.junit.Assert.assertNotNull(requestInterceptor15);
        org.junit.Assert.assertNotNull(gsonConverter16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertNotNull(gsonConverter18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "GET" + "'", str20, "GET");
        org.junit.Assert.assertNotNull(gsonConverter21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(executor23);
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0162");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        java.util.concurrent.Executor executor5 = builder0.callbackExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter6.deserializeObjectConverter5();
        retrofit.RestAdapter.Builder builder10 = builder0.setConverter((retrofit.converter.Converter) gsonConverter9);
        retrofit.client.Client.Provider provider11 = builder0.getclientProvider();
        retrofit.RequestInterceptor requestInterceptor12 = builder0.requestInterceptor;
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(gsonConverter9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertNull(requestInterceptor12);
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0163");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler13 = restAdapter10.geterrorHandler();
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel15 = restAdapter10.getLogLevel();
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor17 = serializedObjectSupporter16.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter18 = serializedObjectSupporter16.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter16.deserializeObjectConverter5();
        retrofit.client.Request request20 = serializedObjectSupporter16.deserializeObjectRequest8();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request21 = restAdapter10.logAndReplaceRequest(request20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(requestInterceptor17);
        org.junit.Assert.assertNotNull(gsonConverter18);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(request20);
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0164");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean6 = logLevel5.log();
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = builder8.getcallbackExecutor();
        retrofit.client.Client.Provider provider10 = null;
        builder8.clientProvider = provider10;
        retrofit.Server server12 = null;
        builder8.server = server12;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        builder8.log = log14;
        builder0.log = log14;
        log14.log("Retrofit-");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNotNull(log14);
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0165");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        java.lang.String str14 = restAdapter10.getIDLE_THREAD_NAME();
        java.util.concurrent.Executor executor15 = restAdapter10.getcallbackExecutor();
        retrofit.RestAdapter.Log log16 = restAdapter10.log;
        retrofit.RestAdapter.Log log17 = restAdapter10.log;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Retrofit-Idle" + "'", str14, "Retrofit-Idle");
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(log16);
        org.junit.Assert.assertNull(log17);
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0166");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        java.util.concurrent.Executor executor4 = null;
        builder0.setcallbackExecutor(executor4);
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder7 = builder0.setLog(log6);
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = null;
        builder8.sethttpExecutor(executor9);
        retrofit.Profiler profiler11 = null;
        builder8.profiler = profiler11;
        retrofit.RestAdapter.LogLevel logLevel13 = builder8.logLevel;
        builder0.logLevel = logLevel13;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor16 = null;
        builder15.sethttpExecutor(executor16);
        retrofit.Profiler profiler18 = null;
        builder15.profiler = profiler18;
        retrofit.RestAdapter.LogLevel logLevel20 = builder15.logLevel;
        java.util.concurrent.Executor executor21 = null;
        builder15.sethttpExecutor(executor21);
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder25 = builder23.setServer("hi!");
        java.util.concurrent.Executor executor26 = null;
        builder25.callbackExecutor = executor26;
        retrofit.SerializedObjectSupporter serializedObjectSupporter28 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor29 = serializedObjectSupporter28.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder30 = builder25.setRequestInterceptor(requestInterceptor29);
        retrofit.RestAdapter.Builder builder31 = builder15.setRequestInterceptor(requestInterceptor29);
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean33 = logLevel32.log();
        builder15.logLevel = logLevel32;
        retrofit.RequestInterceptor requestInterceptor35 = builder15.requestInterceptor;
        builder0.requestInterceptor = requestInterceptor35;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(requestInterceptor29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(requestInterceptor35);
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0167");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.getcallbackExecutor();
        java.lang.String str13 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.SerializedObjectSupporter serializedObjectSupporter14 = new retrofit.SerializedObjectSupporter();
        java.lang.String str15 = serializedObjectSupporter14.deserializeObjectString2();
        java.lang.String str16 = serializedObjectSupporter14.deserializeObjectString1();
        retrofit.RequestInterceptor requestInterceptor17 = serializedObjectSupporter14.deserializeObjectRequestInterceptor1();
        retrofit.client.Request request18 = serializedObjectSupporter14.deserializeObjectRequest4();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request19 = restAdapter10.logAndReplaceRequest(request18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-Idle" + "'", str13, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Retrofit-Idle" + "'", str15, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Retrofit-" + "'", str16, "Retrofit-");
        org.junit.Assert.assertNotNull(requestInterceptor17);
        org.junit.Assert.assertNotNull(request18);
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0168");
        retrofit.SerializedObjectSupporter serializedObjectSupporter2 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor3 = serializedObjectSupporter2.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter2.deserializeObjectConverter7();
        retrofit.client.Request request5 = serializedObjectSupporter2.deserializeObjectRequest2();
        java.util.List<retrofit.client.Header> headerList6 = request5.getHeaders();
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "GET", headerList6, typedOutput7);
        org.junit.Assert.assertNotNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(headerList6);
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0169");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel12 = restAdapter10.logLevel;
        int int13 = restAdapter10.getLOG_CHUNK_SIZE();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4000 + "'", int13 == 4000);
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0170");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server4 = null;
        builder0.server = server4;
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        builder0.log = log6;
        retrofit.RequestInterceptor requestInterceptor8 = builder0.requestInterceptor;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertNull(requestInterceptor8);
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0171");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        java.lang.String str13 = restAdapter10.getTHREAD_PREFIX();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.requestInterceptor;
        retrofit.client.Client.Provider provider15 = restAdapter10.clientProvider;
        int int16 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.converter.Converter converter17 = restAdapter10.converter;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-" + "'", str13, "Retrofit-");
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4000 + "'", int16 == 4000);
        org.junit.Assert.assertNull(converter17);
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0172");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor13 = serializedObjectSupporter12.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter12.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter15 = serializedObjectSupporter12.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter12.deserializeObjectConverter8();
        java.lang.String str17 = serializedObjectSupporter12.deserializeObjectString4();
        java.lang.String str18 = serializedObjectSupporter12.deserializeObjectString3();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter12.deserializeObjectConverter6();
        retrofit.client.Request request20 = serializedObjectSupporter12.deserializeObjectRequest1();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request21 = restAdapter10.logAndReplaceRequest(request20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNotNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(gsonConverter15);
        org.junit.Assert.assertNotNull(gsonConverter16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "http://example.com/" + "'", str17, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GET" + "'", str18, "GET");
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(request20);
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0173");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = restAdapter10.serializedObjectSupporter;
        retrofit.client.Response response15 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response17 = restAdapter10.logAndReplaceResponse("", response15, (long) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(serializedObjectSupporter13);
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0174");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server4 = null;
        builder0.server = server4;
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        builder0.log = log6;
        retrofit.converter.Converter converter8 = builder0.converter;
        retrofit.client.Client client9 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder10 = builder0.setClient(client9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertNull(converter8);
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0175");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.client.Request request9 = serializedObjectSupporter6.deserializeObjectRequest1();
        builder0.serializedObjectSupporter = serializedObjectSupporter6;
        retrofit.client.Request request11 = serializedObjectSupporter6.deserializeObjectRequest2();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter12 = serializedObjectSupporter6.deserializeObjectLogLevel3();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNotNull(request11);
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0176");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter2();
        retrofit.RequestInterceptor requestInterceptor3 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter4 = serializedObjectSupporter0.deserializeObjectLogLevel3();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Retrofit-Idle" + "'", str1, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(requestInterceptor3);
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0177");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        java.lang.String str13 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        retrofit.ErrorHandler errorHandler25 = restAdapter24.errorHandler;
        int int26 = restAdapter24.getLOG_CHUNK_SIZE();
        retrofit.RestAdapter.Log log27 = restAdapter24.log;
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter24.getLogLevel();
        restAdapter10.logLevel = logLevel28;
        retrofit.ErrorHandler errorHandler30 = restAdapter10.errorHandler;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass31 = errorHandler30.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-Idle" + "'", str13, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4000 + "'", int26 == 4000);
        org.junit.Assert.assertNull(log27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler30);
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0178");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter8();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString3();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "http://example.com/" + "'", str5, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GET" + "'", str6, "GET");
        org.junit.Assert.assertNotNull(requestInterceptor7);
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0179");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = null;
        builder11.sethttpExecutor(executor12);
        retrofit.Profiler profiler14 = null;
        builder11.profiler = profiler14;
        retrofit.Server server16 = builder11.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter17.deserializeObjectConverter7();
        retrofit.client.Request request20 = serializedObjectSupporter17.deserializeObjectRequest1();
        builder11.serializedObjectSupporter = serializedObjectSupporter17;
        retrofit.client.Request request22 = serializedObjectSupporter17.deserializeObjectRequest2();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request23 = restAdapter10.logAndReplaceRequest(request22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertNotNull(request22);
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0180");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString3();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString3();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString2();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "GET" + "'", str1, "GET");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "GET" + "'", str2, "GET");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Retrofit-Idle" + "'", str3, "Retrofit-Idle");
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0181");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.client.Client.Provider provider4 = null;
        builder0.clientProvider = provider4;
        retrofit.RequestInterceptor requestInterceptor6 = builder0.requestInterceptor;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(requestInterceptor6);
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0182");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        java.util.concurrent.Executor executor6 = null;
        builder0.sethttpExecutor(executor6);
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder10 = builder8.setServer("hi!");
        java.util.concurrent.Executor executor11 = null;
        builder10.callbackExecutor = executor11;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor14 = serializedObjectSupporter13.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder15 = builder10.setRequestInterceptor(requestInterceptor14);
        retrofit.RestAdapter.Builder builder16 = builder0.setRequestInterceptor(requestInterceptor14);
        java.util.concurrent.Executor executor17 = null;
        builder16.callbackExecutor = executor17;
        java.util.concurrent.Executor executor19 = null;
        builder16.callbackExecutor = executor19;
        retrofit.SerializedObjectSupporter serializedObjectSupporter21 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter21.deserializeObjectConverter2();
        retrofit.client.Request request23 = serializedObjectSupporter21.deserializeObjectRequest7();
        retrofit.client.Request request24 = serializedObjectSupporter21.deserializeObjectRequest2();
        retrofit.client.Request request25 = serializedObjectSupporter21.deserializeObjectRequest3();
        retrofit.converter.GsonConverter gsonConverter26 = serializedObjectSupporter21.deserializeObjectConverter1();
        retrofit.converter.GsonConverter gsonConverter27 = serializedObjectSupporter21.deserializeObjectConverter5();
        builder16.converter = gsonConverter27;
        retrofit.Profiler profiler29 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder30 = builder16.setProfiler(profiler29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertNotNull(request24);
        org.junit.Assert.assertNotNull(request25);
        org.junit.Assert.assertNotNull(gsonConverter26);
        org.junit.Assert.assertNotNull(gsonConverter27);
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0183");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest1();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest8();
        java.lang.Class<?> wildcardClass5 = serializedObjectSupporter0.getClass();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0184");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider5 = builder0.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request7 = serializedObjectSupporter6.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler8 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        builder0.errorHandler = errorHandler8;
        retrofit.converter.Converter converter10 = builder0.converter;
        java.util.concurrent.Executor executor11 = builder0.callbackExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = builder0.serializedObjectSupporter;
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(errorHandler8);
        org.junit.Assert.assertNull(converter10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(serializedObjectSupporter12);
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0185");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.client.Client.Provider provider4 = null;
        builder0.clientProvider = provider4;
        retrofit.Profiler profiler6 = builder0.profiler;
        retrofit.ErrorHandler errorHandler7 = builder0.errorHandler;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(profiler6);
        org.junit.Assert.assertNull(errorHandler7);
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0186");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.SerializedObjectSupporter serializedObjectSupporter5 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor6 = serializedObjectSupporter5.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder7 = builder2.setRequestInterceptor(requestInterceptor6);
        retrofit.ErrorHandler errorHandler8 = builder2.errorHandler;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(errorHandler8);
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0187");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RestAdapter.Log log4 = null;
        builder0.log = log4;
        java.util.concurrent.Executor executor6 = builder0.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = builder7.getcallbackExecutor();
        retrofit.client.Client.Provider provider9 = null;
        builder7.clientProvider = provider9;
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor12 = serializedObjectSupporter11.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter13 = serializedObjectSupporter11.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter11.deserializeObjectConverter5();
        retrofit.client.Request request15 = serializedObjectSupporter11.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter11.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter11.deserializeObjectConverter6();
        retrofit.RestAdapter.Builder builder18 = builder7.setConverter((retrofit.converter.Converter) gsonConverter17);
        builder0.converter = gsonConverter17;
        retrofit.client.Client.Provider provider20 = builder0.getclientProvider();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNotNull(requestInterceptor12);
        org.junit.Assert.assertNotNull(gsonConverter13);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(gsonConverter16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(provider20);
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0188");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.RestAdapter.Builder builder7 = builder0.setServer("Retrofit-Idle");
        retrofit.client.Client.Provider provider8 = null;
        builder7.clientProvider = provider8;
        retrofit.converter.Converter converter10 = builder7.converter;
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(converter10);
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0189");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider5 = builder0.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request7 = serializedObjectSupporter6.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler8 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        builder0.errorHandler = errorHandler8;
        retrofit.RestAdapter.Log log10 = builder0.log;
        java.util.concurrent.Executor executor11 = builder0.httpExecutor;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor13 = null;
        builder12.sethttpExecutor(executor13);
        retrofit.Profiler profiler15 = null;
        builder12.profiler = profiler15;
        retrofit.Server server17 = builder12.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter18.deserializeObjectConverter7();
        retrofit.client.Request request21 = serializedObjectSupporter18.deserializeObjectRequest1();
        builder12.serializedObjectSupporter = serializedObjectSupporter18;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor24 = null;
        builder23.sethttpExecutor(executor24);
        retrofit.Profiler profiler26 = null;
        builder23.profiler = profiler26;
        retrofit.Server server28 = builder23.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor30 = serializedObjectSupporter29.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter31 = serializedObjectSupporter29.deserializeObjectConverter7();
        retrofit.client.Request request32 = serializedObjectSupporter29.deserializeObjectRequest1();
        builder23.serializedObjectSupporter = serializedObjectSupporter29;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor35 = null;
        builder34.sethttpExecutor(executor35);
        retrofit.Profiler profiler37 = null;
        builder34.profiler = profiler37;
        retrofit.Server server39 = builder34.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter40 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor41 = serializedObjectSupporter40.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter42 = serializedObjectSupporter40.deserializeObjectConverter7();
        retrofit.client.Request request43 = serializedObjectSupporter40.deserializeObjectRequest1();
        builder34.serializedObjectSupporter = serializedObjectSupporter40;
        java.lang.String str45 = serializedObjectSupporter40.deserializeObjectString2();
        retrofit.ErrorHandler errorHandler46 = serializedObjectSupporter40.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder47 = builder23.setErrorHandler(errorHandler46);
        retrofit.RestAdapter.Builder builder48 = builder12.setErrorHandler(errorHandler46);
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor50 = null;
        builder49.sethttpExecutor(executor50);
        retrofit.Profiler profiler52 = null;
        builder49.profiler = profiler52;
        retrofit.RestAdapter.LogLevel logLevel54 = builder49.logLevel;
        java.util.concurrent.Executor executor55 = null;
        builder49.sethttpExecutor(executor55);
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder59 = builder57.setServer("hi!");
        java.util.concurrent.Executor executor60 = null;
        builder59.callbackExecutor = executor60;
        retrofit.SerializedObjectSupporter serializedObjectSupporter62 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor63 = serializedObjectSupporter62.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder64 = builder59.setRequestInterceptor(requestInterceptor63);
        retrofit.RestAdapter.Builder builder65 = builder49.setRequestInterceptor(requestInterceptor63);
        java.util.concurrent.Executor executor66 = builder65.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter67 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor68 = serializedObjectSupporter67.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter69 = serializedObjectSupporter67.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter70 = serializedObjectSupporter67.deserializeObjectConverter7();
        retrofit.Server server71 = serializedObjectSupporter67.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder72 = builder65.setServer(server71);
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder75 = builder73.setServer("hi!");
        java.util.concurrent.Executor executor76 = null;
        builder75.callbackExecutor = executor76;
        retrofit.RestAdapter restAdapter78 = builder75.build();
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor80 = null;
        builder79.sethttpExecutor(executor80);
        retrofit.Profiler profiler82 = null;
        builder79.profiler = profiler82;
        retrofit.RestAdapter.Log log84 = builder79.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter85 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler86 = serializedObjectSupporter85.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder87 = builder79.setErrorHandler(errorHandler86);
        retrofit.RestAdapter.Builder builder88 = builder75.setErrorHandler(errorHandler86);
        java.util.concurrent.Executor executor89 = builder88.callbackExecutor;
        builder72.sethttpExecutor(executor89);
        builder48.sethttpExecutor(executor89);
        builder0.sethttpExecutor(executor89);
        java.lang.Class<?> wildcardClass93 = builder0.getClass();
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(errorHandler8);
        org.junit.Assert.assertNull(log10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(server17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNotNull(request21);
        org.junit.Assert.assertNull(server28);
        org.junit.Assert.assertNotNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(gsonConverter31);
        org.junit.Assert.assertNotNull(request32);
        org.junit.Assert.assertNull(server39);
        org.junit.Assert.assertNotNull(requestInterceptor41);
        org.junit.Assert.assertNotNull(gsonConverter42);
        org.junit.Assert.assertNotNull(request43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Retrofit-Idle" + "'", str45, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(requestInterceptor63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(executor66);
        org.junit.Assert.assertNotNull(requestInterceptor68);
        org.junit.Assert.assertNotNull(gsonConverter69);
        org.junit.Assert.assertNotNull(gsonConverter70);
        org.junit.Assert.assertNotNull(server71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(restAdapter78);
        org.junit.Assert.assertNull(log84);
        org.junit.Assert.assertNotNull(errorHandler86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(executor89);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0190");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.RestAdapter restAdapter5 = builder2.build();
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.sethttpExecutor(executor7);
        retrofit.Profiler profiler9 = null;
        builder6.profiler = profiler9;
        retrofit.RestAdapter.Log log11 = builder6.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler13 = serializedObjectSupporter12.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder14 = builder6.setErrorHandler(errorHandler13);
        retrofit.RestAdapter.Builder builder15 = builder2.setErrorHandler(errorHandler13);
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder17 = builder15.setLogLevel(logLevel16);
        retrofit.Profiler profiler18 = builder15.profiler;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(restAdapter5);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertNotNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(profiler18);
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0191");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RestAdapter.Log log4 = null;
        builder0.log = log4;
        java.util.concurrent.Executor executor6 = builder0.getcallbackExecutor();
        java.util.concurrent.Executor executor7 = builder0.callbackExecutor;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder9 = builder0.setServer("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be blank.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0192");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler7 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder8 = builder0.setErrorHandler(errorHandler7);
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder11 = builder9.setServer("hi!");
        retrofit.client.Client.Provider provider12 = builder9.clientProvider;
        retrofit.RequestInterceptor requestInterceptor13 = builder9.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean15 = logLevel14.log();
        retrofit.RestAdapter.Builder builder16 = builder9.setLogLevel(logLevel14);
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor18 = builder17.getcallbackExecutor();
        retrofit.client.Client.Provider provider19 = null;
        builder17.clientProvider = provider19;
        retrofit.Server server21 = null;
        builder17.server = server21;
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        builder17.log = log23;
        builder9.log = log23;
        retrofit.RestAdapter.Builder builder26 = builder8.setLog(log23);
        retrofit.client.Client.Provider provider27 = null;
        builder26.clientProvider = provider27;
        retrofit.Profiler profiler29 = builder26.profiler;
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNotNull(errorHandler7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertNull(requestInterceptor13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(profiler29);
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0193");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean6 = logLevel5.log();
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = builder8.getcallbackExecutor();
        retrofit.client.Client.Provider provider10 = null;
        builder8.clientProvider = provider10;
        retrofit.Server server12 = null;
        builder8.server = server12;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        builder8.log = log14;
        builder0.log = log14;
        java.util.concurrent.Executor executor17 = null;
        builder0.httpExecutor = executor17;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNotNull(log14);
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0194");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.client.Request request9 = serializedObjectSupporter6.deserializeObjectRequest1();
        builder0.serializedObjectSupporter = serializedObjectSupporter6;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = null;
        builder11.sethttpExecutor(executor12);
        retrofit.Profiler profiler14 = null;
        builder11.profiler = profiler14;
        retrofit.Server server16 = builder11.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter17.deserializeObjectConverter7();
        retrofit.client.Request request20 = serializedObjectSupporter17.deserializeObjectRequest1();
        builder11.serializedObjectSupporter = serializedObjectSupporter17;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor23 = null;
        builder22.sethttpExecutor(executor23);
        retrofit.Profiler profiler25 = null;
        builder22.profiler = profiler25;
        retrofit.Server server27 = builder22.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter28 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor29 = serializedObjectSupporter28.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter30 = serializedObjectSupporter28.deserializeObjectConverter7();
        retrofit.client.Request request31 = serializedObjectSupporter28.deserializeObjectRequest1();
        builder22.serializedObjectSupporter = serializedObjectSupporter28;
        java.lang.String str33 = serializedObjectSupporter28.deserializeObjectString2();
        retrofit.ErrorHandler errorHandler34 = serializedObjectSupporter28.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder35 = builder11.setErrorHandler(errorHandler34);
        retrofit.RestAdapter.Builder builder36 = builder0.setErrorHandler(errorHandler34);
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor38 = null;
        builder37.sethttpExecutor(executor38);
        retrofit.Profiler profiler40 = null;
        builder37.profiler = profiler40;
        retrofit.RestAdapter.LogLevel logLevel42 = builder37.logLevel;
        java.util.concurrent.Executor executor43 = null;
        builder37.sethttpExecutor(executor43);
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder47 = builder45.setServer("hi!");
        java.util.concurrent.Executor executor48 = null;
        builder47.callbackExecutor = executor48;
        retrofit.SerializedObjectSupporter serializedObjectSupporter50 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor51 = serializedObjectSupporter50.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder52 = builder47.setRequestInterceptor(requestInterceptor51);
        retrofit.RestAdapter.Builder builder53 = builder37.setRequestInterceptor(requestInterceptor51);
        java.util.concurrent.Executor executor54 = builder53.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter55 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor56 = serializedObjectSupporter55.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter57 = serializedObjectSupporter55.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter58 = serializedObjectSupporter55.deserializeObjectConverter7();
        retrofit.Server server59 = serializedObjectSupporter55.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder60 = builder53.setServer(server59);
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder63 = builder61.setServer("hi!");
        java.util.concurrent.Executor executor64 = null;
        builder63.callbackExecutor = executor64;
        retrofit.RestAdapter restAdapter66 = builder63.build();
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor68 = null;
        builder67.sethttpExecutor(executor68);
        retrofit.Profiler profiler70 = null;
        builder67.profiler = profiler70;
        retrofit.RestAdapter.Log log72 = builder67.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter73 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler74 = serializedObjectSupporter73.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder75 = builder67.setErrorHandler(errorHandler74);
        retrofit.RestAdapter.Builder builder76 = builder63.setErrorHandler(errorHandler74);
        java.util.concurrent.Executor executor77 = builder76.callbackExecutor;
        builder60.sethttpExecutor(executor77);
        builder36.sethttpExecutor(executor77);
        retrofit.SerializedObjectSupporter serializedObjectSupporter80 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor81 = serializedObjectSupporter80.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter82 = serializedObjectSupporter80.deserializeObjectConverter5();
        builder36.converter = gsonConverter82;
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertNull(server27);
        org.junit.Assert.assertNotNull(requestInterceptor29);
        org.junit.Assert.assertNotNull(gsonConverter30);
        org.junit.Assert.assertNotNull(request31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Retrofit-Idle" + "'", str33, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(requestInterceptor51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(executor54);
        org.junit.Assert.assertNotNull(requestInterceptor56);
        org.junit.Assert.assertNotNull(gsonConverter57);
        org.junit.Assert.assertNotNull(gsonConverter58);
        org.junit.Assert.assertNotNull(server59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(restAdapter66);
        org.junit.Assert.assertNull(log72);
        org.junit.Assert.assertNotNull(errorHandler74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(executor77);
        org.junit.Assert.assertNotNull(requestInterceptor81);
        org.junit.Assert.assertNotNull(gsonConverter82);
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0195");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server4 = null;
        builder0.server = server4;
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        builder0.log = log6;
        retrofit.converter.Converter converter8 = builder0.converter;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = null;
        builder9.sethttpExecutor(executor10);
        retrofit.Profiler profiler12 = null;
        builder9.profiler = profiler12;
        retrofit.Server server14 = builder9.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor16 = serializedObjectSupporter15.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter15.deserializeObjectConverter7();
        retrofit.client.Request request18 = serializedObjectSupporter15.deserializeObjectRequest1();
        builder9.serializedObjectSupporter = serializedObjectSupporter15;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor21 = null;
        builder20.sethttpExecutor(executor21);
        retrofit.Profiler profiler23 = null;
        builder20.profiler = profiler23;
        retrofit.Server server25 = builder20.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor27 = serializedObjectSupporter26.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter26.deserializeObjectConverter7();
        retrofit.client.Request request29 = serializedObjectSupporter26.deserializeObjectRequest1();
        builder20.serializedObjectSupporter = serializedObjectSupporter26;
        java.lang.String str31 = serializedObjectSupporter26.deserializeObjectString2();
        retrofit.ErrorHandler errorHandler32 = serializedObjectSupporter26.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder33 = builder9.setErrorHandler(errorHandler32);
        builder0.errorHandler = errorHandler32;
        java.util.concurrent.Executor executor35 = builder0.callbackExecutor;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNull(server14);
        org.junit.Assert.assertNotNull(requestInterceptor16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertNotNull(request18);
        org.junit.Assert.assertNull(server25);
        org.junit.Assert.assertNotNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(request29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Retrofit-Idle" + "'", str31, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(executor35);
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0196");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.logLevel = logLevel23;
        retrofit.Server server26 = restAdapter10.getserver();
        retrofit.client.Client.Provider provider27 = restAdapter10.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler29 = restAdapter10.new RestHandler();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(server26);
        org.junit.Assert.assertNull(provider27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0197");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.Profiler profiler15 = restAdapter10.profiler;
        retrofit.converter.Converter converter16 = restAdapter10.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter17.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter17.deserializeObjectConverter4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter17;
        retrofit.RequestInterceptor requestInterceptor22 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter23 = serializedObjectSupporter17.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter24 = serializedObjectSupporter17.deserializeObjectConverter5();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNotNull(requestInterceptor22);
        org.junit.Assert.assertNotNull(gsonConverter23);
        org.junit.Assert.assertNotNull(gsonConverter24);
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0198");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter8();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest5();
        java.util.List<retrofit.client.Header> headerList6 = request5.getHeaders();
        java.lang.String str7 = request5.method;
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(headerList6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GET" + "'", str7, "GET");
    }

    @Test
    public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0199");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.setcallbackExecutor(executor1);
        java.util.concurrent.Executor executor3 = null;
        builder0.httpExecutor = executor3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder6 = builder0.setRequestInterceptor(requestInterceptor5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Request interceptor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0200");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        java.lang.String str14 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter10.getrequestInterceptor();
        retrofit.Server server16 = null;
        retrofit.client.Client.Provider provider17 = null;
        java.util.concurrent.Executor executor18 = null;
        java.util.concurrent.Executor executor19 = null;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        retrofit.converter.Converter converter21 = null;
        retrofit.Profiler profiler22 = null;
        retrofit.ErrorHandler errorHandler23 = null;
        retrofit.RestAdapter.Log log24 = null;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter(server16, provider17, executor18, executor19, requestInterceptor20, converter21, profiler22, errorHandler23, log24, logLevel25);
        retrofit.ErrorHandler errorHandler27 = restAdapter26.errorHandler;
        java.util.concurrent.Executor executor28 = restAdapter26.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel29 = restAdapter26.getLogLevel();
        retrofit.client.Client.Provider provider30 = restAdapter26.clientProvider;
        retrofit.Profiler profiler31 = restAdapter26.profiler;
        retrofit.converter.Converter converter32 = restAdapter26.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter33 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor34 = serializedObjectSupporter33.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter35 = serializedObjectSupporter33.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter36 = serializedObjectSupporter33.deserializeObjectConverter4();
        restAdapter26.serializedObjectSupporter = serializedObjectSupporter33;
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter26.setLogLevel(logLevel38);
        retrofit.RestAdapter.LogLevel logLevel40 = restAdapter26.logLevel;
        restAdapter10.setLogLevel(logLevel40);
        java.lang.Throwable throwable42 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter10.logException(throwable42, "http://example.com/");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Retrofit-Idle" + "'", str14, "Retrofit-Idle");
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider30);
        org.junit.Assert.assertNull(profiler31);
        org.junit.Assert.assertNull(converter32);
        org.junit.Assert.assertNotNull(requestInterceptor34);
        org.junit.Assert.assertNotNull(gsonConverter35);
        org.junit.Assert.assertNotNull(gsonConverter36);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0201");
        retrofit.SerializedObjectSupporter serializedObjectSupporter2 = new retrofit.SerializedObjectSupporter();
        java.lang.String str3 = serializedObjectSupporter2.deserializeObjectString3();
        java.lang.String str4 = serializedObjectSupporter2.deserializeObjectString4();
        retrofit.client.Request request5 = serializedObjectSupporter2.deserializeObjectRequest2();
        java.util.List<retrofit.client.Header> headerList6 = request5.getHeaders();
        retrofit.SerializedObjectSupporter serializedObjectSupporter7 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request8 = serializedObjectSupporter7.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter7.deserializeObjectConverter8();
        retrofit.client.Request request10 = serializedObjectSupporter7.deserializeObjectRequest1();
        retrofit.mime.TypedString typedString11 = serializedObjectSupporter7.deserializeObjectTypedOutput2();
        retrofit.client.Request request12 = new retrofit.client.Request("POST", "hi!", headerList6, (retrofit.mime.TypedOutput) typedString11);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "GET" + "'", str3, "GET");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "http://example.com/" + "'", str4, "http://example.com/");
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(headerList6);
        org.junit.Assert.assertNotNull(request8);
        org.junit.Assert.assertNotNull(gsonConverter9);
        org.junit.Assert.assertNotNull(request10);
        org.junit.Assert.assertNotNull(typedString11);
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0202");
        retrofit.SerializedObjectSupporter serializedObjectSupporter2 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request3 = serializedObjectSupporter2.deserializeObjectRequest6();
        java.util.List<retrofit.client.Header> headerList4 = request3.headers;
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", headerList4, typedOutput5);
        retrofit.mime.TypedOutput typedOutput7 = request6.getBody();
        java.util.List<retrofit.client.Header> headerList8 = request6.getHeaders();
        java.lang.String str9 = request6.url;
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(headerList4);
        org.junit.Assert.assertNull(typedOutput7);
        org.junit.Assert.assertNotNull(headerList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0203");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = null;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter13;
        retrofit.client.Client.Provider provider15 = restAdapter10.getclientProvider();
        retrofit.ErrorHandler errorHandler16 = restAdapter10.geterrorHandler();
        retrofit.RequestInterceptor requestInterceptor17 = restAdapter10.requestInterceptor;
        retrofit.client.Client.Provider provider18 = restAdapter10.clientProvider;
        retrofit.client.Response response20 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response22 = restAdapter10.logAndReplaceResponse("Retrofit-", response20, (long) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNull(requestInterceptor17);
        org.junit.Assert.assertNull(provider18);
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0204");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = null;
        builder14.sethttpExecutor(executor15);
        retrofit.converter.Converter converter17 = builder14.converter;
        java.util.concurrent.Executor executor18 = builder14.getcallbackExecutor();
        retrofit.client.Client.Provider provider19 = builder14.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request21 = serializedObjectSupporter20.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler22 = serializedObjectSupporter20.deserializeObjectErrorHandler1();
        builder14.errorHandler = errorHandler22;
        retrofit.RestAdapter.Log log24 = builder14.log;
        retrofit.Server server25 = null;
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Log log33 = null;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server25, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log33, logLevel34);
        retrofit.ErrorHandler errorHandler36 = restAdapter35.errorHandler;
        retrofit.ErrorHandler errorHandler37 = restAdapter35.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler38 = restAdapter35.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter39 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request40 = serializedObjectSupporter39.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter41 = serializedObjectSupporter39.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter42 = serializedObjectSupporter39.deserializeObjectConverter1();
        restHandler38.serializedObjectSupporter = serializedObjectSupporter39;
        retrofit.SerializedObjectSupporter serializedObjectSupporter44 = restHandler38.serializedObjectSupporter;
        java.lang.String str45 = serializedObjectSupporter44.deserializeObjectString5();
        builder14.serializedObjectSupporter = serializedObjectSupporter44;
        restHandler13.serializedObjectSupporter = serializedObjectSupporter44;
        retrofit.SerializedObjectSupporter serializedObjectSupporter48 = new retrofit.SerializedObjectSupporter();
        java.lang.String str49 = serializedObjectSupporter48.deserializeObjectString3();
        retrofit.converter.GsonConverter gsonConverter50 = serializedObjectSupporter48.deserializeObjectConverter7();
        java.lang.reflect.Method method51 = null;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder54 = builder52.setServer("hi!");
        retrofit.client.Client.Provider provider55 = builder52.clientProvider;
        retrofit.RequestInterceptor requestInterceptor56 = builder52.requestInterceptor;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder59 = builder57.setServer("hi!");
        retrofit.client.Client.Provider provider60 = builder57.clientProvider;
        java.util.concurrent.Executor executor61 = null;
        builder57.setcallbackExecutor(executor61);
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder64 = builder57.setLog(log63);
        retrofit.RestAdapter.Builder builder65 = builder52.setLog(log63);
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor67 = null;
        builder66.sethttpExecutor(executor67);
        retrofit.Profiler profiler69 = null;
        builder66.profiler = profiler69;
        retrofit.Server server71 = builder66.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter72 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor73 = serializedObjectSupporter72.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter74 = serializedObjectSupporter72.deserializeObjectConverter7();
        retrofit.client.Request request75 = serializedObjectSupporter72.deserializeObjectRequest1();
        builder66.serializedObjectSupporter = serializedObjectSupporter72;
        builder66.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder80 = builder78.setServer("hi!");
        java.util.concurrent.Executor executor81 = null;
        builder80.callbackExecutor = executor81;
        retrofit.RestAdapter restAdapter83 = builder80.build();
        retrofit.RestAdapter.Builder builder84 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor85 = null;
        builder84.sethttpExecutor(executor85);
        retrofit.Profiler profiler87 = null;
        builder84.profiler = profiler87;
        retrofit.RestAdapter.Log log89 = builder84.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter90 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler91 = serializedObjectSupporter90.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder92 = builder84.setErrorHandler(errorHandler91);
        retrofit.RestAdapter.Builder builder93 = builder80.setErrorHandler(errorHandler91);
        java.util.concurrent.Executor executor94 = builder93.callbackExecutor;
        builder66.setcallbackExecutor(executor94);
        builder65.callbackExecutor = executor94;
        java.lang.Object[] objArray97 = new java.lang.Object[] { executor94 };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj98 = restHandler13.invoke((java.lang.Object) serializedObjectSupporter48, method51, objArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(converter17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(provider19);
        org.junit.Assert.assertNotNull(request21);
        org.junit.Assert.assertNotNull(errorHandler22);
        org.junit.Assert.assertNull(log24);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler36);
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNotNull(request40);
        org.junit.Assert.assertNotNull(gsonConverter41);
        org.junit.Assert.assertNotNull(gsonConverter42);
        org.junit.Assert.assertNotNull(serializedObjectSupporter44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "POST" + "'", str45, "POST");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "GET" + "'", str49, "GET");
        org.junit.Assert.assertNotNull(gsonConverter50);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(provider55);
        org.junit.Assert.assertNull(requestInterceptor56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(provider60);
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(server71);
        org.junit.Assert.assertNotNull(requestInterceptor73);
        org.junit.Assert.assertNotNull(gsonConverter74);
        org.junit.Assert.assertNotNull(request75);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(restAdapter83);
        org.junit.Assert.assertNull(log89);
        org.junit.Assert.assertNotNull(errorHandler91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(executor94);
        org.junit.Assert.assertNotNull(objArray97);
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.SerializedObjectSupporter serializedObjectSupporter5 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor6 = serializedObjectSupporter5.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder7 = builder2.setRequestInterceptor(requestInterceptor6);
        retrofit.Server server8 = builder7.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter9 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter10 = serializedObjectSupporter9.deserializeObjectConverter2();
        builder7.serializedObjectSupporter = serializedObjectSupporter9;
        retrofit.client.Request request12 = serializedObjectSupporter9.deserializeObjectRequest5();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collections collections13 = serializedObjectSupporter9.deserializeObjectList1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.Collections$UnmodifiableRandomAccessList cannot be cast to java.util.Collections");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(server8);
        org.junit.Assert.assertNotNull(gsonConverter10);
        org.junit.Assert.assertNotNull(request12);
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0206");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString4();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter8();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest7();
        java.util.List<retrofit.client.Header> headerList4 = request3.headers;
        retrofit.mime.TypedOutput typedOutput5 = request3.getBody();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "http://example.com/" + "'", str1, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(headerList4);
        org.junit.Assert.assertNull(typedOutput5);
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0207");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.client.Request request9 = serializedObjectSupporter6.deserializeObjectRequest1();
        builder0.serializedObjectSupporter = serializedObjectSupporter6;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = null;
        builder11.sethttpExecutor(executor12);
        retrofit.Profiler profiler14 = null;
        builder11.profiler = profiler14;
        retrofit.Server server16 = builder11.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter17.deserializeObjectConverter7();
        retrofit.client.Request request20 = serializedObjectSupporter17.deserializeObjectRequest1();
        builder11.serializedObjectSupporter = serializedObjectSupporter17;
        java.lang.String str22 = serializedObjectSupporter17.deserializeObjectString2();
        retrofit.ErrorHandler errorHandler23 = serializedObjectSupporter17.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder24 = builder0.setErrorHandler(errorHandler23);
        retrofit.client.Client.Provider provider25 = builder0.getclientProvider();
        retrofit.converter.Converter converter26 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder27 = builder0.setConverter(converter26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Converter may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Retrofit-Idle" + "'", str22, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(provider25);
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0208");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.client.Client.Provider provider15 = restAdapter10.getclientProvider();
        java.lang.String str16 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.Profiler profiler17 = restAdapter10.getprofiler();
        retrofit.Server server18 = null;
        retrofit.client.Client.Provider provider19 = null;
        java.util.concurrent.Executor executor20 = null;
        java.util.concurrent.Executor executor21 = null;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        retrofit.converter.Converter converter23 = null;
        retrofit.Profiler profiler24 = null;
        retrofit.ErrorHandler errorHandler25 = null;
        retrofit.RestAdapter.Log log26 = null;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server18, provider19, executor20, executor21, requestInterceptor22, converter23, profiler24, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler29 = restAdapter28.errorHandler;
        int int30 = restAdapter28.getLOG_CHUNK_SIZE();
        retrofit.Server server31 = restAdapter28.getserver();
        java.util.concurrent.Executor executor32 = restAdapter28.getcallbackExecutor();
        retrofit.Server server33 = null;
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.RestAdapter.Log log41 = null;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter(server33, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log41, logLevel42);
        retrofit.ErrorHandler errorHandler44 = restAdapter43.errorHandler;
        int int45 = restAdapter43.getLOG_CHUNK_SIZE();
        retrofit.Server server46 = restAdapter43.getserver();
        retrofit.client.Client.Provider provider47 = restAdapter43.clientProvider;
        retrofit.client.Client.Provider provider48 = restAdapter43.getclientProvider();
        java.lang.String str49 = restAdapter43.getIDLE_THREAD_NAME();
        retrofit.Server server50 = null;
        retrofit.client.Client.Provider provider51 = null;
        java.util.concurrent.Executor executor52 = null;
        java.util.concurrent.Executor executor53 = null;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        retrofit.converter.Converter converter55 = null;
        retrofit.Profiler profiler56 = null;
        retrofit.ErrorHandler errorHandler57 = null;
        retrofit.RestAdapter.Log log58 = null;
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter(server50, provider51, executor52, executor53, requestInterceptor54, converter55, profiler56, errorHandler57, log58, logLevel59);
        retrofit.RestAdapter.LogLevel logLevel61 = restAdapter60.logLevel;
        retrofit.ErrorHandler errorHandler62 = restAdapter60.geterrorHandler();
        java.util.concurrent.Executor executor63 = restAdapter60.getcallbackExecutor();
        retrofit.converter.Converter converter64 = restAdapter60.converter;
        retrofit.Server server65 = restAdapter60.getserver();
        retrofit.RestAdapter.LogLevel logLevel66 = restAdapter60.getLogLevel();
        restAdapter43.setLogLevel(logLevel66);
        restAdapter28.logLevel = logLevel66;
        retrofit.client.Client.Provider provider69 = restAdapter28.getclientProvider();
        retrofit.RestAdapter.LogLevel logLevel70 = restAdapter28.getLogLevel();
        restAdapter10.setLogLevel(logLevel70);
        retrofit.client.Response response73 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response75 = restAdapter10.logAndReplaceResponse("http://example.com/", response73, (long) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Retrofit-Idle" + "'", str16, "Retrofit-Idle");
        org.junit.Assert.assertNull(profiler17);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4000 + "'", int30 == 4000);
        org.junit.Assert.assertNull(server31);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 4000 + "'", int45 == 4000);
        org.junit.Assert.assertNull(server46);
        org.junit.Assert.assertNull(provider47);
        org.junit.Assert.assertNull(provider48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Retrofit-Idle" + "'", str49, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler62);
        org.junit.Assert.assertNull(executor63);
        org.junit.Assert.assertNull(converter64);
        org.junit.Assert.assertNull(server65);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0209");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.Profiler profiler15 = restAdapter10.profiler;
        retrofit.converter.Converter converter16 = restAdapter10.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter17.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter17.deserializeObjectConverter4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter17;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter22 = serializedObjectSupporter17.deserializeObjectLogLevel3();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(gsonConverter20);
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0210");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler2 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.mime.TypedString typedString3 = serializedObjectSupporter0.deserializeObjectTypedOutput2();
        retrofit.ErrorHandler errorHandler4 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest8();
        java.lang.String str6 = request5.getUrl();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(errorHandler2);
        org.junit.Assert.assertNotNull(typedString3);
        org.junit.Assert.assertNotNull(errorHandler4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://example.com/" + "'", str6, "http://example.com/");
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0211");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean6 = logLevel5.log();
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder9 = builder0.setServer("http://example.com/");
        java.util.concurrent.Executor executor10 = builder0.httpExecutor;
        retrofit.client.Client.Provider provider11 = null;
        builder0.clientProvider = provider11;
        retrofit.RestAdapter.Log log13 = builder0.log;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(log13);
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0212");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest2();
        java.util.List<retrofit.client.Header> headerList5 = request4.getHeaders();
        java.util.List<retrofit.client.Header> headerList6 = request4.headers;
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(headerList5);
        org.junit.Assert.assertNotNull(headerList6);
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0213");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter8();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest1();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter0.deserializeObjectConverter6();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(gsonConverter6);
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0214");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.converter.Converter converter5 = builder0.converter;
        retrofit.ErrorHandler errorHandler6 = builder0.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter7 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor8 = serializedObjectSupporter7.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter7.deserializeObjectConverter7();
        retrofit.client.Request request10 = serializedObjectSupporter7.deserializeObjectRequest1();
        retrofit.Server server11 = serializedObjectSupporter7.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder12 = builder0.setServer(server11);
        org.junit.Assert.assertNull(converter5);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNotNull(requestInterceptor8);
        org.junit.Assert.assertNotNull(gsonConverter9);
        org.junit.Assert.assertNotNull(request10);
        org.junit.Assert.assertNotNull(server11);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0215");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest8();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest5();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest3();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(request5);
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0216");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler7 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder8 = builder0.setErrorHandler(errorHandler7);
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder11 = builder9.setServer("hi!");
        retrofit.client.Client.Provider provider12 = builder9.clientProvider;
        retrofit.RequestInterceptor requestInterceptor13 = builder9.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean15 = logLevel14.log();
        retrofit.RestAdapter.Builder builder16 = builder9.setLogLevel(logLevel14);
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor18 = builder17.getcallbackExecutor();
        retrofit.client.Client.Provider provider19 = null;
        builder17.clientProvider = provider19;
        retrofit.Server server21 = null;
        builder17.server = server21;
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        builder17.log = log23;
        builder9.log = log23;
        retrofit.RestAdapter.Builder builder26 = builder8.setLog(log23);
        java.util.concurrent.Executor executor27 = builder8.getcallbackExecutor();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter28 = builder8.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNotNull(errorHandler7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertNull(requestInterceptor13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(executor27);
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0217");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler2 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.mime.TypedString typedString3 = serializedObjectSupporter0.deserializeObjectTypedOutput2();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter1();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(errorHandler2);
        org.junit.Assert.assertNotNull(typedString3);
        org.junit.Assert.assertNotNull(gsonConverter4);
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0218");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.Profiler profiler15 = restAdapter10.profiler;
        retrofit.converter.Converter converter16 = restAdapter10.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter17.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter17.deserializeObjectConverter4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter17;
        retrofit.Profiler profiler22 = restAdapter10.profiler;
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter10.getLogLevel();
        java.lang.Throwable throwable24 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter10.logException(throwable24, "POST");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0219");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest1();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest7();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter5();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(gsonConverter5);
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0220");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter10.logLevel;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter14 = restAdapter10.serializedObjectSupporter;
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter10.requestInterceptor;
        retrofit.ErrorHandler errorHandler16 = restAdapter10.geterrorHandler();
        retrofit.RestAdapter.Log log17 = restAdapter10.log;
        retrofit.ErrorHandler errorHandler18 = restAdapter10.errorHandler;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(serializedObjectSupporter14);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNull(log17);
        org.junit.Assert.assertNull(errorHandler18);
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0221");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.Profiler profiler12 = restAdapter10.profiler;
        java.lang.Throwable throwable13 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter10.logException(throwable13, "POST");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNull(profiler12);
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0222");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.mime.TypedOutput typedOutput2 = request1.getBody();
        java.util.List<retrofit.client.Header> headerList3 = request1.getHeaders();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNull(typedOutput2);
        org.junit.Assert.assertNotNull(headerList3);
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0223");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter2 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request3 = serializedObjectSupporter2.deserializeObjectRequest6();
        builder0.serializedObjectSupporter = serializedObjectSupporter2;
        java.lang.String str5 = serializedObjectSupporter2.deserializeObjectString3();
        java.lang.Class<?> wildcardClass6 = serializedObjectSupporter2.getClass();
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GET" + "'", str5, "GET");
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0224");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest8();
        java.lang.String str4 = request3.getUrl();
        java.lang.String str5 = request3.getUrl();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "http://example.com/" + "'", str4, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "http://example.com/" + "'", str5, "http://example.com/");
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0225");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.converter.Converter converter15 = restAdapter10.converter;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter10.setLogLevel(logLevel16);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(converter15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.FULL));
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0226");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.RestAdapter restAdapter5 = builder2.build();
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.sethttpExecutor(executor7);
        retrofit.Profiler profiler9 = null;
        builder6.profiler = profiler9;
        retrofit.RestAdapter.Log log11 = builder6.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler13 = serializedObjectSupporter12.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder14 = builder6.setErrorHandler(errorHandler13);
        retrofit.RestAdapter.Builder builder15 = builder2.setErrorHandler(errorHandler13);
        java.util.concurrent.Executor executor16 = builder15.callbackExecutor;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor18 = null;
        builder17.sethttpExecutor(executor18);
        retrofit.Profiler profiler20 = null;
        builder17.profiler = profiler20;
        retrofit.Server server22 = builder17.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter23 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor24 = serializedObjectSupporter23.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter25 = serializedObjectSupporter23.deserializeObjectConverter7();
        retrofit.client.Request request26 = serializedObjectSupporter23.deserializeObjectRequest1();
        builder17.serializedObjectSupporter = serializedObjectSupporter23;
        java.lang.String str28 = serializedObjectSupporter23.deserializeObjectString2();
        retrofit.ErrorHandler errorHandler29 = serializedObjectSupporter23.deserializeObjectErrorHandler1();
        builder15.errorHandler = errorHandler29;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder33 = builder31.setServer("hi!");
        retrofit.client.Client.Provider provider34 = builder31.clientProvider;
        retrofit.RestAdapter.Log log35 = null;
        builder31.log = log35;
        java.util.concurrent.Executor executor37 = builder31.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor39 = builder38.getcallbackExecutor();
        retrofit.client.Client.Provider provider40 = null;
        builder38.clientProvider = provider40;
        retrofit.SerializedObjectSupporter serializedObjectSupporter42 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor43 = serializedObjectSupporter42.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter44 = serializedObjectSupporter42.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter45 = serializedObjectSupporter42.deserializeObjectConverter5();
        retrofit.client.Request request46 = serializedObjectSupporter42.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter47 = serializedObjectSupporter42.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter48 = serializedObjectSupporter42.deserializeObjectConverter6();
        retrofit.RestAdapter.Builder builder49 = builder38.setConverter((retrofit.converter.Converter) gsonConverter48);
        builder31.converter = gsonConverter48;
        retrofit.ErrorHandler errorHandler51 = builder31.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter52 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler53 = serializedObjectSupporter52.deserializeObjectErrorHandler1();
        retrofit.Server server54 = serializedObjectSupporter52.deserializeObjectServer1();
        builder31.server = server54;
        retrofit.RestAdapter.Builder builder56 = builder15.setServer(server54);
        retrofit.RequestInterceptor requestInterceptor57 = builder15.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter58 = new retrofit.SerializedObjectSupporter();
        java.lang.String str59 = serializedObjectSupporter58.deserializeObjectString3();
        java.lang.String str60 = serializedObjectSupporter58.deserializeObjectString4();
        retrofit.client.Request request61 = serializedObjectSupporter58.deserializeObjectRequest2();
        retrofit.client.Request request62 = serializedObjectSupporter58.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter63 = serializedObjectSupporter58.deserializeObjectConverter2();
        builder15.converter = gsonConverter63;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(restAdapter5);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertNotNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(executor16);
        org.junit.Assert.assertNull(server22);
        org.junit.Assert.assertNotNull(requestInterceptor24);
        org.junit.Assert.assertNotNull(gsonConverter25);
        org.junit.Assert.assertNotNull(request26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Retrofit-Idle" + "'", str28, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(provider34);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNotNull(requestInterceptor43);
        org.junit.Assert.assertNotNull(gsonConverter44);
        org.junit.Assert.assertNotNull(gsonConverter45);
        org.junit.Assert.assertNotNull(request46);
        org.junit.Assert.assertNotNull(gsonConverter47);
        org.junit.Assert.assertNotNull(gsonConverter48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(errorHandler51);
        org.junit.Assert.assertNotNull(errorHandler53);
        org.junit.Assert.assertNotNull(server54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(requestInterceptor57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "GET" + "'", str59, "GET");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "http://example.com/" + "'", str60, "http://example.com/");
        org.junit.Assert.assertNotNull(request61);
        org.junit.Assert.assertNotNull(request62);
        org.junit.Assert.assertNotNull(gsonConverter63);
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0227");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString4();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter2 = serializedObjectSupporter0.deserializeObjectLogLevel1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "http://example.com/" + "'", str1, "http://example.com/");
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0228");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        java.util.concurrent.Executor executor14 = restAdapter10.getcallbackExecutor();
        retrofit.Server server15 = null;
        retrofit.client.Client.Provider provider16 = null;
        java.util.concurrent.Executor executor17 = null;
        java.util.concurrent.Executor executor18 = null;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        retrofit.converter.Converter converter20 = null;
        retrofit.Profiler profiler21 = null;
        retrofit.ErrorHandler errorHandler22 = null;
        retrofit.RestAdapter.Log log23 = null;
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter(server15, provider16, executor17, executor18, requestInterceptor19, converter20, profiler21, errorHandler22, log23, logLevel24);
        retrofit.ErrorHandler errorHandler26 = restAdapter25.errorHandler;
        int int27 = restAdapter25.getLOG_CHUNK_SIZE();
        retrofit.Server server28 = restAdapter25.getserver();
        retrofit.client.Client.Provider provider29 = restAdapter25.clientProvider;
        retrofit.client.Client.Provider provider30 = restAdapter25.getclientProvider();
        java.lang.String str31 = restAdapter25.getIDLE_THREAD_NAME();
        retrofit.Server server32 = null;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Log log40 = null;
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log40, logLevel41);
        retrofit.RestAdapter.LogLevel logLevel43 = restAdapter42.logLevel;
        retrofit.ErrorHandler errorHandler44 = restAdapter42.geterrorHandler();
        java.util.concurrent.Executor executor45 = restAdapter42.getcallbackExecutor();
        retrofit.converter.Converter converter46 = restAdapter42.converter;
        retrofit.Server server47 = restAdapter42.getserver();
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter42.getLogLevel();
        restAdapter25.setLogLevel(logLevel48);
        restAdapter10.logLevel = logLevel48;
        retrofit.client.Client.Provider provider51 = restAdapter10.getclientProvider();
        java.lang.String str52 = restAdapter10.getTHREAD_PREFIX();
        retrofit.client.Response response54 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response56 = restAdapter10.logAndReplaceResponse("GET", response54, 100L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4000 + "'", int27 == 4000);
        org.junit.Assert.assertNull(server28);
        org.junit.Assert.assertNull(provider29);
        org.junit.Assert.assertNull(provider30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Retrofit-Idle" + "'", str31, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler44);
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertNull(converter46);
        org.junit.Assert.assertNull(server47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Retrofit-" + "'", str52, "Retrofit-");
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0229");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter8();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest5();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter6 = serializedObjectSupporter0.deserializeObjectLogLevel2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(request5);
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0230");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RestAdapter.Log log4 = null;
        builder0.log = log4;
        java.util.concurrent.Executor executor6 = builder0.getcallbackExecutor();
        retrofit.client.Client client7 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder8 = builder0.setClient(client7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(executor6);
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0231");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter2 = builder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0232");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter0.deserializeObjectConverter6();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter0.deserializeObjectConverter2();
        java.lang.String str8 = serializedObjectSupporter0.deserializeObjectString3();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(gsonConverter6);
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0233");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder7 = builder5.setServer("hi!");
        retrofit.client.Client.Provider provider8 = builder5.clientProvider;
        java.util.concurrent.Executor executor9 = null;
        builder5.setcallbackExecutor(executor9);
        retrofit.RestAdapter.Log log11 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder12 = builder5.setLog(log11);
        retrofit.RestAdapter.Builder builder13 = builder0.setLog(log11);
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = null;
        builder14.sethttpExecutor(executor15);
        retrofit.Profiler profiler17 = null;
        builder14.profiler = profiler17;
        retrofit.Server server19 = builder14.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter7();
        retrofit.client.Request request23 = serializedObjectSupporter20.deserializeObjectRequest1();
        builder14.serializedObjectSupporter = serializedObjectSupporter20;
        builder14.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder28 = builder26.setServer("hi!");
        java.util.concurrent.Executor executor29 = null;
        builder28.callbackExecutor = executor29;
        retrofit.RestAdapter restAdapter31 = builder28.build();
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor33 = null;
        builder32.sethttpExecutor(executor33);
        retrofit.Profiler profiler35 = null;
        builder32.profiler = profiler35;
        retrofit.RestAdapter.Log log37 = builder32.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter38 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler39 = serializedObjectSupporter38.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder40 = builder32.setErrorHandler(errorHandler39);
        retrofit.RestAdapter.Builder builder41 = builder28.setErrorHandler(errorHandler39);
        java.util.concurrent.Executor executor42 = builder41.callbackExecutor;
        builder14.setcallbackExecutor(executor42);
        builder13.callbackExecutor = executor42;
        java.util.concurrent.Executor executor45 = builder13.gethttpExecutor();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNotNull(log11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(restAdapter31);
        org.junit.Assert.assertNull(log37);
        org.junit.Assert.assertNotNull(errorHandler39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(executor42);
        org.junit.Assert.assertNull(executor45);
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0234");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter8();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(gsonConverter5);
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0235");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider5 = builder0.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request7 = serializedObjectSupporter6.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler8 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        builder0.errorHandler = errorHandler8;
        retrofit.RestAdapter.Log log10 = builder0.log;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder13 = builder11.setServer("hi!");
        retrofit.client.Client.Provider provider14 = builder11.clientProvider;
        retrofit.RequestInterceptor requestInterceptor15 = builder11.requestInterceptor;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder18 = builder16.setServer("hi!");
        retrofit.client.Client.Provider provider19 = builder16.clientProvider;
        java.util.concurrent.Executor executor20 = null;
        builder16.setcallbackExecutor(executor20);
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder23 = builder16.setLog(log22);
        retrofit.RestAdapter.Builder builder24 = builder11.setLog(log22);
        builder0.log = log22;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder28 = builder26.setServer("hi!");
        retrofit.client.Client.Provider provider29 = builder26.clientProvider;
        retrofit.RestAdapter.Log log30 = null;
        builder26.log = log30;
        java.util.concurrent.Executor executor32 = builder26.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = null;
        builder33.sethttpExecutor(executor34);
        retrofit.Profiler profiler36 = null;
        builder33.profiler = profiler36;
        retrofit.RestAdapter.Log log38 = builder33.log;
        retrofit.client.Client.Provider provider39 = null;
        builder33.setclientProvider(provider39);
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder43 = builder41.setServer("hi!");
        java.util.concurrent.Executor executor44 = null;
        builder43.callbackExecutor = executor44;
        retrofit.SerializedObjectSupporter serializedObjectSupporter46 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor47 = serializedObjectSupporter46.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder48 = builder43.setRequestInterceptor(requestInterceptor47);
        retrofit.Server server49 = builder48.server;
        builder33.server = server49;
        builder26.server = server49;
        builder0.server = server49;
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(errorHandler8);
        org.junit.Assert.assertNull(log10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(provider19);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(provider29);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(log38);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(requestInterceptor47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(server49);
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0236");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.Server server5 = null;
        builder0.server = server5;
        java.util.concurrent.Executor executor7 = builder0.gethttpExecutor();
        retrofit.client.Client.Provider provider8 = null;
        builder0.clientProvider = provider8;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNull(executor7);
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0237");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        java.lang.String str13 = restAdapter10.getTHREAD_PREFIX();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.requestInterceptor;
        retrofit.client.Client.Provider provider15 = restAdapter10.clientProvider;
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter16.deserializeObjectConverter2();
        retrofit.client.Request request18 = serializedObjectSupporter16.deserializeObjectRequest7();
        java.util.List<retrofit.client.Header> headerList19 = request18.headers;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request20 = restAdapter10.logAndReplaceRequest(request18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-" + "'", str13, "Retrofit-");
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertNotNull(request18);
        org.junit.Assert.assertNotNull(headerList19);
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0238");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.errorHandler;
        retrofit.converter.Converter converter13 = restAdapter10.converter;
        retrofit.Profiler profiler14 = restAdapter10.profiler;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertNull(profiler14);
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0239");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.client.Client.Provider provider15 = restAdapter10.getclientProvider();
        java.lang.String str16 = restAdapter10.getIDLE_THREAD_NAME();
        java.lang.String str17 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.client.Response response19 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response21 = restAdapter10.logAndReplaceResponse("hi!", response19, (long) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Retrofit-Idle" + "'", str16, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-Idle" + "'", str17, "Retrofit-Idle");
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0240");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter6();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest8();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString3();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter7 = serializedObjectSupporter0.deserializeObjectLogLevel1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GET" + "'", str6, "GET");
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0241");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter1 = serializedObjectSupporter0.deserializeObjectConverter2();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest7();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter1();
        java.lang.Class<?> wildcardClass5 = serializedObjectSupporter0.getClass();
        org.junit.Assert.assertNotNull(gsonConverter1);
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0242");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter10.logLevel;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter14 = restAdapter10.serializedObjectSupporter;
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter10.new RestHandler();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(serializedObjectSupporter14);
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0243");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest1();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest7();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter0.deserializeObjectConverter2();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter7 = serializedObjectSupporter0.deserializeObjectLogLevel1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(gsonConverter6);
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0244");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        java.util.concurrent.Executor executor6 = null;
        builder0.sethttpExecutor(executor6);
        retrofit.client.Client.Provider provider8 = builder0.clientProvider;
        java.util.concurrent.Executor executor9 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder12 = builder10.setServer("hi!");
        java.util.concurrent.Executor executor13 = null;
        builder12.callbackExecutor = executor13;
        retrofit.RestAdapter restAdapter15 = builder12.build();
        retrofit.RestAdapter.Log log16 = restAdapter15.log;
        java.util.concurrent.Executor executor17 = restAdapter15.gethttpExecutor();
        retrofit.client.Client.Provider provider18 = restAdapter15.getclientProvider();
        builder0.setclientProvider(provider18);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor21 = null;
        builder20.sethttpExecutor(executor21);
        retrofit.Profiler profiler23 = null;
        builder20.profiler = profiler23;
        retrofit.RestAdapter.Log log25 = builder20.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler27 = serializedObjectSupporter26.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder28 = builder20.setErrorHandler(errorHandler27);
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder31 = builder29.setServer("hi!");
        retrofit.client.Client.Provider provider32 = builder29.clientProvider;
        retrofit.RequestInterceptor requestInterceptor33 = builder29.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean35 = logLevel34.log();
        retrofit.RestAdapter.Builder builder36 = builder29.setLogLevel(logLevel34);
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor38 = builder37.getcallbackExecutor();
        retrofit.client.Client.Provider provider39 = null;
        builder37.clientProvider = provider39;
        retrofit.Server server41 = null;
        builder37.server = server41;
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        builder37.log = log43;
        builder29.log = log43;
        retrofit.RestAdapter.Builder builder46 = builder28.setLog(log43);
        retrofit.ErrorHandler errorHandler47 = builder28.errorHandler;
        retrofit.RestAdapter.Builder builder48 = builder0.setErrorHandler(errorHandler47);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(restAdapter15);
        org.junit.Assert.assertNotNull(log16);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(provider18);
        org.junit.Assert.assertNull(log25);
        org.junit.Assert.assertNotNull(errorHandler27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(provider32);
        org.junit.Assert.assertNull(requestInterceptor33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(errorHandler47);
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0245");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString3();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString4();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        java.lang.String str4 = request3.getUrl();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "GET" + "'", str1, "GET");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "http://example.com/" + "'", str2, "http://example.com/");
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "http://example.com/" + "'", str4, "http://example.com/");
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0246");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.RestAdapter.Builder builder7 = builder0.setServer("Retrofit-Idle");
        retrofit.client.Client.Provider provider8 = builder7.clientProvider;
        retrofit.SerializedObjectSupporter serializedObjectSupporter9 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request10 = serializedObjectSupporter9.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter11 = serializedObjectSupporter9.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter12 = serializedObjectSupporter9.deserializeObjectConverter1();
        retrofit.RequestInterceptor requestInterceptor13 = serializedObjectSupporter9.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder14 = builder7.setRequestInterceptor(requestInterceptor13);
        retrofit.client.Client client15 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder16 = builder7.setClient(client15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNotNull(request10);
        org.junit.Assert.assertNotNull(gsonConverter11);
        org.junit.Assert.assertNotNull(gsonConverter12);
        org.junit.Assert.assertNotNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0247");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter6();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest8();
        retrofit.mime.TypedOutput typedOutput6 = request5.body;
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNull(typedOutput6);
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0248");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter8();
        retrofit.mime.TypedString typedString5 = serializedObjectSupporter0.deserializeObjectTypedOutput2();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter0.deserializeObjectConverter3();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(typedString5);
        org.junit.Assert.assertNotNull(gsonConverter6);
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0249");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest1();
        java.lang.String str2 = request1.url;
        java.lang.String str3 = request1.url;
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "http://example.com/" + "'", str2, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0250");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.logLevel = logLevel23;
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = restAdapter10.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter27 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter27.deserializeObjectConverter2();
        retrofit.client.Request request29 = serializedObjectSupporter27.deserializeObjectRequest7();
        retrofit.client.Request request30 = serializedObjectSupporter27.deserializeObjectRequest2();
        retrofit.client.Request request31 = serializedObjectSupporter27.deserializeObjectRequest3();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter27;
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter27.deserializeObjectConverter7();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter34 = serializedObjectSupporter27.deserializeObjectLogLevel3();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(serializedObjectSupporter26);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(request29);
        org.junit.Assert.assertNotNull(request30);
        org.junit.Assert.assertNotNull(request31);
        org.junit.Assert.assertNotNull(gsonConverter33);
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0251");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter8();
        retrofit.mime.TypedString typedString5 = serializedObjectSupporter0.deserializeObjectTypedOutput2();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString2();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter7 = serializedObjectSupporter0.deserializeObjectLogLevel3();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(typedString5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Retrofit-Idle" + "'", str6, "Retrofit-Idle");
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0252");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor5 = builder0.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel6 = builder0.logLevel;
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0253");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.RequestInterceptor requestInterceptor4 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter4();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString3();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter0.deserializeObjectConverter6();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(requestInterceptor4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GET" + "'", str6, "GET");
        org.junit.Assert.assertNotNull(gsonConverter7);
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0254");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.getrequestInterceptor();
        retrofit.RestAdapter.Log log15 = restAdapter10.log;
        retrofit.RestAdapter.LogLevel logLevel16 = null;
        restAdapter10.logLevel = logLevel16;
        retrofit.Server server18 = restAdapter10.server;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNull(log15);
        org.junit.Assert.assertNull(server18);
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0255");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString4();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter8();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest7();
        java.util.List<retrofit.client.Header> headerList4 = request3.getHeaders();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "http://example.com/" + "'", str1, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(headerList4);
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0256");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RestAdapter.Log log4 = null;
        builder0.log = log4;
        java.util.concurrent.Executor executor6 = builder0.getcallbackExecutor();
        java.util.concurrent.Executor executor7 = builder0.callbackExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter8 = new retrofit.SerializedObjectSupporter();
        java.lang.String str9 = serializedObjectSupporter8.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter10 = serializedObjectSupporter8.deserializeObjectConverter2();
        retrofit.converter.GsonConverter gsonConverter11 = serializedObjectSupporter8.deserializeObjectConverter7();
        retrofit.RestAdapter.Builder builder12 = builder0.setConverter((retrofit.converter.Converter) gsonConverter11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder15 = builder13.setServer("hi!");
        java.util.concurrent.Executor executor16 = null;
        builder15.callbackExecutor = executor16;
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder20 = builder15.setRequestInterceptor(requestInterceptor19);
        retrofit.SerializedObjectSupporter serializedObjectSupporter21 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request22 = serializedObjectSupporter21.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter23 = serializedObjectSupporter21.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter24 = serializedObjectSupporter21.deserializeObjectConverter1();
        builder20.converter = gsonConverter24;
        retrofit.RestAdapter.Builder builder26 = builder0.setConverter((retrofit.converter.Converter) gsonConverter24);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Retrofit-Idle" + "'", str9, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter10);
        org.junit.Assert.assertNotNull(gsonConverter11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(request22);
        org.junit.Assert.assertNotNull(gsonConverter23);
        org.junit.Assert.assertNotNull(gsonConverter24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0257");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.Profiler profiler15 = restAdapter10.profiler;
        retrofit.converter.Converter converter16 = restAdapter10.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter17.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter17.deserializeObjectConverter4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter17;
        retrofit.RequestInterceptor requestInterceptor22 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter23 = serializedObjectSupporter17.deserializeObjectConverter7();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter24 = serializedObjectSupporter17.deserializeObjectLogLevel1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNotNull(requestInterceptor22);
        org.junit.Assert.assertNotNull(gsonConverter23);
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0258");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.client.Request request9 = serializedObjectSupporter6.deserializeObjectRequest1();
        builder0.serializedObjectSupporter = serializedObjectSupporter6;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter11 = serializedObjectSupporter6.deserializeObjectLogLevel3();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(request9);
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0259");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest8();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter6();
        retrofit.client.Request request6 = serializedObjectSupporter0.deserializeObjectRequest8();
        retrofit.ErrorHandler errorHandler7 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(request6);
        org.junit.Assert.assertNotNull(errorHandler7);
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0260");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = null;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter13;
        java.util.concurrent.Executor executor15 = restAdapter10.callbackExecutor;
        retrofit.Profiler profiler16 = restAdapter10.getprofiler();
        java.lang.Throwable throwable17 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter10.logException(throwable17, "POST");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(profiler16);
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0261");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.Server server5 = null;
        retrofit.client.Client.Provider provider6 = null;
        java.util.concurrent.Executor executor7 = null;
        java.util.concurrent.Executor executor8 = null;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        retrofit.converter.Converter converter10 = null;
        retrofit.Profiler profiler11 = null;
        retrofit.ErrorHandler errorHandler12 = null;
        retrofit.RestAdapter.Log log13 = null;
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter(server5, provider6, executor7, executor8, requestInterceptor9, converter10, profiler11, errorHandler12, log13, logLevel14);
        retrofit.ErrorHandler errorHandler16 = restAdapter15.errorHandler;
        int int17 = restAdapter15.getLOG_CHUNK_SIZE();
        retrofit.Server server18 = restAdapter15.getserver();
        retrofit.client.Client.Provider provider19 = restAdapter15.clientProvider;
        retrofit.client.Client.Provider provider20 = restAdapter15.getclientProvider();
        java.lang.String str21 = restAdapter15.getIDLE_THREAD_NAME();
        retrofit.Server server22 = null;
        retrofit.client.Client.Provider provider23 = null;
        java.util.concurrent.Executor executor24 = null;
        java.util.concurrent.Executor executor25 = null;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        retrofit.converter.Converter converter27 = null;
        retrofit.Profiler profiler28 = null;
        retrofit.ErrorHandler errorHandler29 = null;
        retrofit.RestAdapter.Log log30 = null;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server22, provider23, executor24, executor25, requestInterceptor26, converter27, profiler28, errorHandler29, log30, logLevel31);
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter32.logLevel;
        retrofit.ErrorHandler errorHandler34 = restAdapter32.geterrorHandler();
        java.util.concurrent.Executor executor35 = restAdapter32.getcallbackExecutor();
        retrofit.converter.Converter converter36 = restAdapter32.converter;
        retrofit.Server server37 = restAdapter32.getserver();
        retrofit.RestAdapter.LogLevel logLevel38 = restAdapter32.getLogLevel();
        restAdapter15.setLogLevel(logLevel38);
        retrofit.RestAdapter.Builder builder40 = builder0.setLogLevel(logLevel38);
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor42 = null;
        builder41.sethttpExecutor(executor42);
        retrofit.Profiler profiler44 = null;
        builder41.profiler = profiler44;
        retrofit.RestAdapter.LogLevel logLevel46 = builder41.logLevel;
        java.util.concurrent.Executor executor47 = null;
        builder41.sethttpExecutor(executor47);
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder51 = builder49.setServer("hi!");
        java.util.concurrent.Executor executor52 = null;
        builder51.callbackExecutor = executor52;
        retrofit.SerializedObjectSupporter serializedObjectSupporter54 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor55 = serializedObjectSupporter54.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder56 = builder51.setRequestInterceptor(requestInterceptor55);
        retrofit.RestAdapter.Builder builder57 = builder41.setRequestInterceptor(requestInterceptor55);
        java.util.concurrent.Executor executor58 = builder57.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter59 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor60 = serializedObjectSupporter59.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter61 = serializedObjectSupporter59.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter62 = serializedObjectSupporter59.deserializeObjectConverter7();
        retrofit.Server server63 = serializedObjectSupporter59.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder64 = builder57.setServer(server63);
        retrofit.RestAdapter.Builder builder65 = builder0.setServer(server63);
        retrofit.ErrorHandler errorHandler66 = builder0.errorHandler;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4000 + "'", int17 == 4000);
        org.junit.Assert.assertNull(server18);
        org.junit.Assert.assertNull(provider19);
        org.junit.Assert.assertNull(provider20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Retrofit-Idle" + "'", str21, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler34);
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertNull(converter36);
        org.junit.Assert.assertNull(server37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(requestInterceptor55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(executor58);
        org.junit.Assert.assertNotNull(requestInterceptor60);
        org.junit.Assert.assertNotNull(gsonConverter61);
        org.junit.Assert.assertNotNull(gsonConverter62);
        org.junit.Assert.assertNotNull(server63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(errorHandler66);
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0262");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString5();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter1();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collections collections4 = serializedObjectSupporter0.deserializeObjectList1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.Collections$UnmodifiableRandomAccessList cannot be cast to java.util.Collections");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "http://example.com/" + "'", str1, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "POST" + "'", str2, "POST");
        org.junit.Assert.assertNotNull(gsonConverter3);
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0263");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        java.lang.String str13 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        retrofit.ErrorHandler errorHandler25 = restAdapter24.errorHandler;
        int int26 = restAdapter24.getLOG_CHUNK_SIZE();
        retrofit.RestAdapter.Log log27 = restAdapter24.log;
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter24.getLogLevel();
        restAdapter10.logLevel = logLevel28;
        retrofit.ErrorHandler errorHandler30 = restAdapter10.errorHandler;
        retrofit.client.Client.Provider provider31 = restAdapter10.clientProvider;
        retrofit.Profiler profiler32 = restAdapter10.profiler;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-Idle" + "'", str13, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4000 + "'", int26 == 4000);
        org.junit.Assert.assertNull(log27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler30);
        org.junit.Assert.assertNull(provider31);
        org.junit.Assert.assertNull(profiler32);
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0264");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler13 = restAdapter10.geterrorHandler();
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel15 = restAdapter10.getLogLevel();
        retrofit.Profiler profiler16 = restAdapter10.getprofiler();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(profiler16);
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0265");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider5 = builder0.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request7 = serializedObjectSupporter6.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler8 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        builder0.errorHandler = errorHandler8;
        retrofit.Server server10 = builder0.server;
        builder0.ensureSaneDefaults();
        java.util.concurrent.Executor executor12 = builder0.gethttpExecutor();
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder15 = builder13.setServer("hi!");
        retrofit.client.Client.Provider provider16 = builder13.clientProvider;
        retrofit.RequestInterceptor requestInterceptor17 = builder13.requestInterceptor;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder20 = builder18.setServer("hi!");
        retrofit.client.Client.Provider provider21 = builder18.clientProvider;
        java.util.concurrent.Executor executor22 = null;
        builder18.setcallbackExecutor(executor22);
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = builder18.setLog(log24);
        retrofit.RestAdapter.Builder builder26 = builder13.setLog(log24);
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor28 = null;
        builder27.sethttpExecutor(executor28);
        retrofit.Profiler profiler30 = null;
        builder27.profiler = profiler30;
        retrofit.Server server32 = builder27.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter33 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor34 = serializedObjectSupporter33.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter35 = serializedObjectSupporter33.deserializeObjectConverter7();
        retrofit.client.Request request36 = serializedObjectSupporter33.deserializeObjectRequest1();
        builder27.serializedObjectSupporter = serializedObjectSupporter33;
        builder27.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder41 = builder39.setServer("hi!");
        java.util.concurrent.Executor executor42 = null;
        builder41.callbackExecutor = executor42;
        retrofit.RestAdapter restAdapter44 = builder41.build();
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor46 = null;
        builder45.sethttpExecutor(executor46);
        retrofit.Profiler profiler48 = null;
        builder45.profiler = profiler48;
        retrofit.RestAdapter.Log log50 = builder45.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter51 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler52 = serializedObjectSupporter51.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder53 = builder45.setErrorHandler(errorHandler52);
        retrofit.RestAdapter.Builder builder54 = builder41.setErrorHandler(errorHandler52);
        java.util.concurrent.Executor executor55 = builder54.callbackExecutor;
        builder27.setcallbackExecutor(executor55);
        builder26.callbackExecutor = executor55;
        builder0.callbackExecutor = executor55;
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(errorHandler8);
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertNotNull(executor12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(provider16);
        org.junit.Assert.assertNull(requestInterceptor17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(provider21);
        org.junit.Assert.assertNotNull(log24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(server32);
        org.junit.Assert.assertNotNull(requestInterceptor34);
        org.junit.Assert.assertNotNull(gsonConverter35);
        org.junit.Assert.assertNotNull(request36);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(restAdapter44);
        org.junit.Assert.assertNull(log50);
        org.junit.Assert.assertNotNull(errorHandler52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(executor55);
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0266");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider5 = builder0.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request7 = serializedObjectSupporter6.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler8 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        builder0.errorHandler = errorHandler8;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor11 = null;
        builder10.sethttpExecutor(executor11);
        retrofit.converter.Converter converter13 = builder10.converter;
        java.util.concurrent.Executor executor14 = builder10.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor15 = builder10.requestInterceptor;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor17 = null;
        builder16.sethttpExecutor(executor17);
        retrofit.converter.Converter converter19 = builder16.converter;
        java.util.concurrent.Executor executor20 = builder16.getcallbackExecutor();
        retrofit.client.Client.Provider provider21 = builder16.getclientProvider();
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder24 = builder22.setServer("hi!");
        java.util.concurrent.Executor executor25 = null;
        builder24.callbackExecutor = executor25;
        retrofit.RestAdapter restAdapter27 = builder24.build();
        retrofit.RestAdapter.Log log28 = restAdapter27.log;
        java.util.concurrent.Executor executor29 = restAdapter27.gethttpExecutor();
        retrofit.client.Client.Provider provider30 = restAdapter27.getclientProvider();
        builder16.setclientProvider(provider30);
        retrofit.RestAdapter.Builder builder32 = builder10.setClient(provider30);
        builder0.setclientProvider(provider30);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(errorHandler8);
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(provider21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(restAdapter27);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNotNull(executor29);
        org.junit.Assert.assertNotNull(provider30);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0267");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler7 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder8 = builder0.setErrorHandler(errorHandler7);
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder11 = builder9.setServer("hi!");
        retrofit.client.Client.Provider provider12 = builder9.clientProvider;
        retrofit.RequestInterceptor requestInterceptor13 = builder9.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean15 = logLevel14.log();
        retrofit.RestAdapter.Builder builder16 = builder9.setLogLevel(logLevel14);
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor18 = builder17.getcallbackExecutor();
        retrofit.client.Client.Provider provider19 = null;
        builder17.clientProvider = provider19;
        retrofit.Server server21 = null;
        builder17.server = server21;
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        builder17.log = log23;
        builder9.log = log23;
        retrofit.RestAdapter.Builder builder26 = builder8.setLog(log23);
        retrofit.RestAdapter.Builder builder28 = builder26.setServer("Retrofit-Idle");
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor30 = serializedObjectSupporter29.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter31 = serializedObjectSupporter29.deserializeObjectConverter7();
        retrofit.client.Request request32 = serializedObjectSupporter29.deserializeObjectRequest1();
        retrofit.client.Request request33 = serializedObjectSupporter29.deserializeObjectRequest7();
        retrofit.converter.GsonConverter gsonConverter34 = serializedObjectSupporter29.deserializeObjectConverter3();
        builder28.converter = gsonConverter34;
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNotNull(errorHandler7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertNull(requestInterceptor13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(gsonConverter31);
        org.junit.Assert.assertNotNull(request32);
        org.junit.Assert.assertNotNull(request33);
        org.junit.Assert.assertNotNull(gsonConverter34);
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0268");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor13 = restAdapter10.getrequestInterceptor();
        retrofit.converter.Converter converter14 = restAdapter10.getconverter();
        retrofit.ErrorHandler errorHandler15 = restAdapter10.errorHandler;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(requestInterceptor13);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(errorHandler15);
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0269");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.client.Client.Provider provider3 = builder0.getclientProvider();
        retrofit.client.Client.Provider provider4 = builder0.getclientProvider();
        retrofit.Server server5 = builder0.server;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.sethttpExecutor(executor7);
        retrofit.Profiler profiler9 = null;
        builder6.profiler = profiler9;
        retrofit.Server server11 = builder6.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor13 = serializedObjectSupporter12.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter12.deserializeObjectConverter7();
        retrofit.client.Request request15 = serializedObjectSupporter12.deserializeObjectRequest1();
        builder6.serializedObjectSupporter = serializedObjectSupporter12;
        retrofit.client.Request request17 = serializedObjectSupporter12.deserializeObjectRequest2();
        retrofit.mime.TypedString typedString18 = serializedObjectSupporter12.deserializeObjectTypedOutput2();
        builder0.serializedObjectSupporter = serializedObjectSupporter12;
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter12.deserializeObjectConverter7();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter12.deserializeObjectRequestInterceptor1();
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(provider4);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNull(server11);
        org.junit.Assert.assertNotNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertNotNull(typedString18);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNotNull(requestInterceptor21);
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0270");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server4 = null;
        builder0.server = server4;
        java.util.concurrent.Executor executor6 = builder0.gethttpExecutor();
        java.util.concurrent.Executor executor7 = builder0.httpExecutor;
        retrofit.Profiler profiler8 = builder0.profiler;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(profiler8);
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0271");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("hi!");
        retrofit.client.Client.Provider provider9 = builder6.clientProvider;
        retrofit.RequestInterceptor requestInterceptor10 = builder6.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean12 = logLevel11.log();
        retrofit.RestAdapter.Builder builder13 = builder6.setLogLevel(logLevel11);
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = builder14.getcallbackExecutor();
        retrofit.client.Client.Provider provider16 = null;
        builder14.clientProvider = provider16;
        retrofit.Server server18 = null;
        builder14.server = server18;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        builder14.log = log20;
        builder6.log = log20;
        builder0.log = log20;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = builder0.serializedObjectSupporter;
        retrofit.client.Client.Provider provider25 = builder0.getclientProvider();
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(provider9);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNull(serializedObjectSupporter24);
        org.junit.Assert.assertNull(provider25);
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0272");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString3();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString3();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest6();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "GET" + "'", str1, "GET");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "GET" + "'", str2, "GET");
        org.junit.Assert.assertNotNull(request3);
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0273");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = null;
        builder0.serializedObjectSupporter = serializedObjectSupporter1;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor4 = null;
        builder3.sethttpExecutor(executor4);
        retrofit.converter.Converter converter6 = builder3.converter;
        java.util.concurrent.Executor executor7 = builder3.getcallbackExecutor();
        java.util.concurrent.Executor executor8 = builder3.callbackExecutor;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = null;
        builder9.sethttpExecutor(executor10);
        retrofit.Profiler profiler12 = null;
        builder9.profiler = profiler12;
        retrofit.Server server14 = builder9.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor16 = serializedObjectSupporter15.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter15.deserializeObjectConverter7();
        retrofit.client.Request request18 = serializedObjectSupporter15.deserializeObjectRequest1();
        builder9.serializedObjectSupporter = serializedObjectSupporter15;
        builder9.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder23 = builder21.setServer("hi!");
        java.util.concurrent.Executor executor24 = null;
        builder23.callbackExecutor = executor24;
        retrofit.RestAdapter restAdapter26 = builder23.build();
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor28 = null;
        builder27.sethttpExecutor(executor28);
        retrofit.Profiler profiler30 = null;
        builder27.profiler = profiler30;
        retrofit.RestAdapter.Log log32 = builder27.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter33 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler34 = serializedObjectSupporter33.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder35 = builder27.setErrorHandler(errorHandler34);
        retrofit.RestAdapter.Builder builder36 = builder23.setErrorHandler(errorHandler34);
        java.util.concurrent.Executor executor37 = builder36.callbackExecutor;
        builder9.setcallbackExecutor(executor37);
        builder3.httpExecutor = executor37;
        retrofit.SerializedObjectSupporter serializedObjectSupporter40 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor41 = serializedObjectSupporter40.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter42 = serializedObjectSupporter40.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter43 = serializedObjectSupporter40.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter44 = serializedObjectSupporter40.deserializeObjectConverter8();
        retrofit.client.Request request45 = serializedObjectSupporter40.deserializeObjectRequest5();
        retrofit.Server server46 = serializedObjectSupporter40.deserializeObjectServer1();
        builder3.server = server46;
        builder0.server = server46;
        java.util.concurrent.Executor executor49 = builder0.httpExecutor;
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(server14);
        org.junit.Assert.assertNotNull(requestInterceptor16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertNotNull(request18);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(restAdapter26);
        org.junit.Assert.assertNull(log32);
        org.junit.Assert.assertNotNull(errorHandler34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(executor37);
        org.junit.Assert.assertNotNull(requestInterceptor41);
        org.junit.Assert.assertNotNull(gsonConverter42);
        org.junit.Assert.assertNotNull(gsonConverter43);
        org.junit.Assert.assertNotNull(gsonConverter44);
        org.junit.Assert.assertNotNull(request45);
        org.junit.Assert.assertNotNull(server46);
        org.junit.Assert.assertNull(executor49);
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0274");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.converter.Converter converter12 = restAdapter10.converter;
        retrofit.client.Response response14 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response16 = restAdapter10.logAndReplaceResponse("http://example.com/", response14, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNull(converter12);
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0275");
        retrofit.RestAdapter restAdapter0 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to retrofit.RestAdapter$RestHandler with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0276");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = null;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel13);
        builder0.logLevel = logLevel13;
        java.util.concurrent.Executor executor16 = builder0.httpExecutor;
        java.util.concurrent.Executor executor17 = builder0.getcallbackExecutor();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(executor17);
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0277");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.RestAdapter restAdapter5 = builder2.build();
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.sethttpExecutor(executor7);
        retrofit.Profiler profiler9 = null;
        builder6.profiler = profiler9;
        retrofit.RestAdapter.Log log11 = builder6.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler13 = serializedObjectSupporter12.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder14 = builder6.setErrorHandler(errorHandler13);
        retrofit.RestAdapter.Builder builder15 = builder2.setErrorHandler(errorHandler13);
        retrofit.client.Client client16 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder17 = builder15.setClient(client16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(restAdapter5);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertNotNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0278");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = null;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter13;
        retrofit.client.Client.Provider provider15 = restAdapter10.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = restAdapter10.serializedObjectSupporter;
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter10.getLogLevel();
        java.lang.Class<?> wildcardClass18 = restAdapter10.getClass();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertNull(serializedObjectSupporter16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0279");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.client.Request request9 = serializedObjectSupporter6.deserializeObjectRequest1();
        builder0.serializedObjectSupporter = serializedObjectSupporter6;
        retrofit.converter.Converter converter11 = builder0.converter;
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNull(converter11);
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0280");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = null;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter13;
        java.util.concurrent.Executor executor15 = restAdapter10.callbackExecutor;
        java.util.concurrent.Executor executor16 = restAdapter10.callbackExecutor;
        retrofit.converter.Converter converter17 = restAdapter10.converter;
        retrofit.client.Client.Provider provider18 = restAdapter10.clientProvider;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(converter17);
        org.junit.Assert.assertNull(provider18);
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0281");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        retrofit.ErrorHandler errorHandler14 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor15 = restAdapter10.httpExecutor;
        retrofit.client.Client.Provider provider16 = restAdapter10.clientProvider;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(provider16);
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0282");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString3();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter1();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter4 = serializedObjectSupporter0.deserializeObjectLogLevel3();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "GET" + "'", str1, "GET");
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0283");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        java.util.concurrent.Executor executor5 = builder0.callbackExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter6.deserializeObjectConverter5();
        retrofit.RestAdapter.Builder builder10 = builder0.setConverter((retrofit.converter.Converter) gsonConverter9);
        retrofit.ErrorHandler errorHandler11 = builder10.errorHandler;
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = null;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel21);
        retrofit.ErrorHandler errorHandler23 = restAdapter22.errorHandler;
        int int24 = restAdapter22.getLOG_CHUNK_SIZE();
        retrofit.Server server25 = restAdapter22.getserver();
        retrofit.converter.Converter converter26 = restAdapter22.getconverter();
        retrofit.converter.Converter converter27 = restAdapter22.converter;
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter22.logLevel;
        retrofit.RestAdapter.Builder builder29 = builder10.setLogLevel(logLevel28);
        retrofit.RestAdapter.LogLevel logLevel30 = builder10.logLevel;
        retrofit.client.Client client31 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder32 = builder10.setClient(client31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(gsonConverter9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4000 + "'", int24 == 4000);
        org.junit.Assert.assertNull(server25);
        org.junit.Assert.assertNull(converter26);
        org.junit.Assert.assertNull(converter27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0284");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.SerializedObjectSupporter serializedObjectSupporter5 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor6 = serializedObjectSupporter5.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder7 = builder2.setRequestInterceptor(requestInterceptor6);
        retrofit.Server server8 = builder7.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter9 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter10 = serializedObjectSupporter9.deserializeObjectConverter2();
        builder7.serializedObjectSupporter = serializedObjectSupporter9;
        retrofit.client.Request request12 = serializedObjectSupporter9.deserializeObjectRequest1();
        java.lang.String str13 = serializedObjectSupporter9.deserializeObjectString4();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(server8);
        org.junit.Assert.assertNotNull(gsonConverter10);
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "http://example.com/" + "'", str13, "http://example.com/");
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0285");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = restAdapter10.serializedObjectSupporter;
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.getrequestInterceptor();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(serializedObjectSupporter13);
        org.junit.Assert.assertNull(requestInterceptor14);
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0286");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest1();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest8();
        java.util.List<retrofit.client.Header> headerList5 = request4.getHeaders();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(headerList5);
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0287");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter10.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter14 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request15 = serializedObjectSupporter14.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter14.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter14.deserializeObjectConverter1();
        restHandler13.serializedObjectSupporter = serializedObjectSupporter14;
        retrofit.SerializedObjectSupporter serializedObjectSupporter19 = restHandler13.serializedObjectSupporter;
        java.lang.String str20 = serializedObjectSupporter19.deserializeObjectString5();
        retrofit.converter.GsonConverter gsonConverter21 = serializedObjectSupporter19.deserializeObjectConverter6();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter22 = serializedObjectSupporter19.deserializeObjectLogLevel2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(gsonConverter16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertNotNull(serializedObjectSupporter19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "POST" + "'", str20, "POST");
        org.junit.Assert.assertNotNull(gsonConverter21);
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0288");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter10.logLevel;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter14 = restAdapter10.serializedObjectSupporter;
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor17 = restAdapter10.requestInterceptor;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(serializedObjectSupporter14);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNull(requestInterceptor17);
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0289");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = null;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter13;
        retrofit.client.Client.Provider provider15 = restAdapter10.getclientProvider();
        retrofit.ErrorHandler errorHandler16 = restAdapter10.geterrorHandler();
        retrofit.RestAdapter.Log log17 = restAdapter10.log;
        java.util.concurrent.Executor executor18 = restAdapter10.gethttpExecutor();
        retrofit.client.Client.Provider provider19 = restAdapter10.getclientProvider();
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter10.setLogLevel(logLevel20);
        retrofit.Server server22 = restAdapter10.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter23 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor24 = serializedObjectSupporter23.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter25 = serializedObjectSupporter23.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter26 = serializedObjectSupporter23.deserializeObjectConverter5();
        retrofit.client.Request request27 = serializedObjectSupporter23.deserializeObjectRequest4();
        retrofit.mime.TypedOutput typedOutput28 = request27.body;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request29 = restAdapter10.logAndReplaceRequest(request27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNull(log17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(provider19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(server22);
        org.junit.Assert.assertNotNull(requestInterceptor24);
        org.junit.Assert.assertNotNull(gsonConverter25);
        org.junit.Assert.assertNotNull(gsonConverter26);
        org.junit.Assert.assertNotNull(request27);
        org.junit.Assert.assertNull(typedOutput28);
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0290");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean6 = logLevel5.log();
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel5);
        retrofit.SerializedObjectSupporter serializedObjectSupporter8 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor9 = serializedObjectSupporter8.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter10 = serializedObjectSupporter8.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter11 = serializedObjectSupporter8.deserializeObjectConverter7();
        retrofit.Server server12 = serializedObjectSupporter8.deserializeObjectServer1();
        builder0.server = server12;
        java.util.concurrent.Executor executor14 = builder0.httpExecutor;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor16 = null;
        builder15.sethttpExecutor(executor16);
        retrofit.converter.Converter converter18 = builder15.converter;
        java.util.concurrent.Executor executor19 = builder15.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor20 = builder15.requestInterceptor;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor22 = null;
        builder21.sethttpExecutor(executor22);
        retrofit.converter.Converter converter24 = builder21.converter;
        java.util.concurrent.Executor executor25 = builder21.getcallbackExecutor();
        retrofit.client.Client.Provider provider26 = builder21.getclientProvider();
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder29 = builder27.setServer("hi!");
        java.util.concurrent.Executor executor30 = null;
        builder29.callbackExecutor = executor30;
        retrofit.RestAdapter restAdapter32 = builder29.build();
        retrofit.RestAdapter.Log log33 = restAdapter32.log;
        java.util.concurrent.Executor executor34 = restAdapter32.gethttpExecutor();
        retrofit.client.Client.Provider provider35 = restAdapter32.getclientProvider();
        builder21.setclientProvider(provider35);
        retrofit.RestAdapter.Builder builder37 = builder15.setClient(provider35);
        builder0.setclientProvider(provider35);
        retrofit.Server server39 = null;
        retrofit.client.Client.Provider provider40 = null;
        java.util.concurrent.Executor executor41 = null;
        java.util.concurrent.Executor executor42 = null;
        retrofit.RequestInterceptor requestInterceptor43 = null;
        retrofit.converter.Converter converter44 = null;
        retrofit.Profiler profiler45 = null;
        retrofit.ErrorHandler errorHandler46 = null;
        retrofit.RestAdapter.Log log47 = null;
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server39, provider40, executor41, executor42, requestInterceptor43, converter44, profiler45, errorHandler46, log47, logLevel48);
        retrofit.ErrorHandler errorHandler50 = restAdapter49.errorHandler;
        java.util.concurrent.Executor executor51 = restAdapter49.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter52 = restAdapter49.serializedObjectSupporter;
        java.util.concurrent.Executor executor53 = restAdapter49.gethttpExecutor();
        retrofit.Server server54 = restAdapter49.getserver();
        retrofit.RestAdapter.RestHandler restHandler55 = restAdapter49.new RestHandler();
        retrofit.Server server56 = null;
        retrofit.client.Client.Provider provider57 = null;
        java.util.concurrent.Executor executor58 = null;
        java.util.concurrent.Executor executor59 = null;
        retrofit.RequestInterceptor requestInterceptor60 = null;
        retrofit.converter.Converter converter61 = null;
        retrofit.Profiler profiler62 = null;
        retrofit.ErrorHandler errorHandler63 = null;
        retrofit.RestAdapter.Log log64 = null;
        retrofit.RestAdapter.LogLevel logLevel65 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter(server56, provider57, executor58, executor59, requestInterceptor60, converter61, profiler62, errorHandler63, log64, logLevel65);
        retrofit.ErrorHandler errorHandler67 = restAdapter66.errorHandler;
        retrofit.ErrorHandler errorHandler68 = restAdapter66.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler69 = restAdapter66.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter70 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request71 = serializedObjectSupporter70.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter72 = serializedObjectSupporter70.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter73 = serializedObjectSupporter70.deserializeObjectConverter1();
        restHandler69.serializedObjectSupporter = serializedObjectSupporter70;
        retrofit.SerializedObjectSupporter serializedObjectSupporter75 = restHandler69.serializedObjectSupporter;
        java.lang.String str76 = serializedObjectSupporter75.deserializeObjectString5();
        restHandler55.serializedObjectSupporter = serializedObjectSupporter75;
        builder0.serializedObjectSupporter = serializedObjectSupporter75;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(requestInterceptor9);
        org.junit.Assert.assertNotNull(gsonConverter10);
        org.junit.Assert.assertNotNull(gsonConverter11);
        org.junit.Assert.assertNotNull(server12);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(converter18);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(requestInterceptor20);
        org.junit.Assert.assertNull(converter24);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(provider26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(restAdapter32);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(executor34);
        org.junit.Assert.assertNotNull(provider35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler50);
        org.junit.Assert.assertNull(executor51);
        org.junit.Assert.assertNull(serializedObjectSupporter52);
        org.junit.Assert.assertNull(executor53);
        org.junit.Assert.assertNull(server54);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler67);
        org.junit.Assert.assertNull(errorHandler68);
        org.junit.Assert.assertNotNull(request71);
        org.junit.Assert.assertNotNull(gsonConverter72);
        org.junit.Assert.assertNotNull(gsonConverter73);
        org.junit.Assert.assertNotNull(serializedObjectSupporter75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "POST" + "'", str76, "POST");
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0291");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.Profiler profiler15 = restAdapter10.profiler;
        retrofit.converter.Converter converter16 = restAdapter10.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter17.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter17.deserializeObjectConverter4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter17;
        retrofit.Profiler profiler22 = restAdapter10.profiler;
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.Log log24 = restAdapter10.log;
        retrofit.client.Response response26 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response28 = restAdapter10.logAndReplaceResponse("POST", response26, (long) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(log24);
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0292");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        java.util.concurrent.Executor executor4 = null;
        builder0.setcallbackExecutor(executor4);
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder7 = builder0.setLog(log6);
        retrofit.RestAdapter restAdapter8 = builder7.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(restAdapter8);
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0293");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider5 = builder0.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request7 = serializedObjectSupporter6.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler8 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        builder0.errorHandler = errorHandler8;
        retrofit.converter.Converter converter10 = builder0.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        java.lang.String str12 = serializedObjectSupporter11.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter13 = serializedObjectSupporter11.deserializeObjectConverter2();
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter11.deserializeObjectConverter7();
        retrofit.RestAdapter.Builder builder15 = builder0.setConverter((retrofit.converter.Converter) gsonConverter14);
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor17 = builder16.getcallbackExecutor();
        retrofit.client.Client.Provider provider18 = null;
        builder16.clientProvider = provider18;
        retrofit.Server server20 = null;
        builder16.server = server20;
        java.util.concurrent.Executor executor22 = builder16.gethttpExecutor();
        java.util.concurrent.Executor executor23 = builder16.gethttpExecutor();
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = builder24.getcallbackExecutor();
        retrofit.client.Client.Provider provider26 = null;
        builder24.clientProvider = provider26;
        retrofit.Server server28 = null;
        builder24.server = server28;
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        builder24.log = log30;
        builder16.log = log30;
        builder15.log = log30;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor35 = null;
        builder34.sethttpExecutor(executor35);
        retrofit.Profiler profiler37 = null;
        builder34.profiler = profiler37;
        retrofit.RestAdapter.LogLevel logLevel39 = builder34.logLevel;
        java.util.concurrent.Executor executor40 = null;
        builder34.sethttpExecutor(executor40);
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder44 = builder42.setServer("hi!");
        java.util.concurrent.Executor executor45 = null;
        builder44.callbackExecutor = executor45;
        retrofit.SerializedObjectSupporter serializedObjectSupporter47 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor48 = serializedObjectSupporter47.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder49 = builder44.setRequestInterceptor(requestInterceptor48);
        retrofit.RestAdapter.Builder builder50 = builder34.setRequestInterceptor(requestInterceptor48);
        java.util.concurrent.Executor executor51 = builder50.httpExecutor;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder54 = builder52.setServer("hi!");
        retrofit.client.Client.Provider provider55 = builder52.clientProvider;
        retrofit.RequestInterceptor requestInterceptor56 = builder52.requestInterceptor;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder59 = builder57.setServer("hi!");
        retrofit.client.Client.Provider provider60 = builder57.clientProvider;
        java.util.concurrent.Executor executor61 = null;
        builder57.setcallbackExecutor(executor61);
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder64 = builder57.setLog(log63);
        retrofit.RestAdapter.Builder builder65 = builder52.setLog(log63);
        builder50.log = log63;
        log63.log("");
        builder15.log = log63;
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(errorHandler8);
        org.junit.Assert.assertNull(converter10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter13);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(requestInterceptor48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(executor51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(provider55);
        org.junit.Assert.assertNull(requestInterceptor56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(provider60);
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0294");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.client.Request request9 = serializedObjectSupporter6.deserializeObjectRequest1();
        builder0.serializedObjectSupporter = serializedObjectSupporter6;
        retrofit.client.Request request11 = serializedObjectSupporter6.deserializeObjectRequest2();
        retrofit.mime.TypedString typedString12 = serializedObjectSupporter6.deserializeObjectTypedOutput2();
        retrofit.converter.GsonConverter gsonConverter13 = serializedObjectSupporter6.deserializeObjectConverter8();
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNotNull(request11);
        org.junit.Assert.assertNotNull(typedString12);
        org.junit.Assert.assertNotNull(gsonConverter13);
    }

    @Test
    public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0295");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider5 = builder0.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request7 = serializedObjectSupporter6.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler8 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        builder0.errorHandler = errorHandler8;
        retrofit.converter.Converter converter10 = builder0.converter;
        java.util.concurrent.Executor executor11 = builder0.callbackExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor13 = serializedObjectSupporter12.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter12.deserializeObjectConverter8();
        java.lang.String str15 = serializedObjectSupporter12.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter12.deserializeObjectConverter4();
        builder0.serializedObjectSupporter = serializedObjectSupporter12;
        java.util.concurrent.Executor executor18 = builder0.httpExecutor;
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(errorHandler8);
        org.junit.Assert.assertNull(converter10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNotNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Retrofit-Idle" + "'", str15, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter16);
        org.junit.Assert.assertNull(executor18);
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0296");
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request5 = serializedObjectSupporter4.deserializeObjectRequest6();
        java.util.List<retrofit.client.Header> headerList6 = request5.headers;
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", headerList6, typedOutput7);
        retrofit.SerializedObjectSupporter serializedObjectSupporter9 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request10 = serializedObjectSupporter9.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler11 = serializedObjectSupporter9.deserializeObjectErrorHandler1();
        retrofit.mime.TypedString typedString12 = serializedObjectSupporter9.deserializeObjectTypedOutput2();
        retrofit.client.Request request13 = new retrofit.client.Request("http://example.com/", "", headerList6, (retrofit.mime.TypedOutput) typedString12);
        java.util.List<retrofit.client.Header> headerList14 = request13.headers;
        java.lang.String str15 = request13.getUrl();
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(headerList6);
        org.junit.Assert.assertNotNull(request10);
        org.junit.Assert.assertNotNull(errorHandler11);
        org.junit.Assert.assertNotNull(typedString12);
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0297");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString3();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter4();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "GET" + "'", str1, "GET");
        org.junit.Assert.assertNotNull(gsonConverter2);
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0298");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor13 = restAdapter10.getrequestInterceptor();
        int int14 = restAdapter10.getLOG_CHUNK_SIZE();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(requestInterceptor13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4000 + "'", int14 == 4000);
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0299");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler7 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        retrofit.Server server8 = serializedObjectSupporter6.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder9 = builder0.setServer(server8);
        retrofit.client.Client client10 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder11 = builder0.setClient(client10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(errorHandler7);
        org.junit.Assert.assertNotNull(server8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0300");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        java.util.concurrent.Executor executor14 = restAdapter10.getcallbackExecutor();
        retrofit.Server server15 = null;
        retrofit.client.Client.Provider provider16 = null;
        java.util.concurrent.Executor executor17 = null;
        java.util.concurrent.Executor executor18 = null;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        retrofit.converter.Converter converter20 = null;
        retrofit.Profiler profiler21 = null;
        retrofit.ErrorHandler errorHandler22 = null;
        retrofit.RestAdapter.Log log23 = null;
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter(server15, provider16, executor17, executor18, requestInterceptor19, converter20, profiler21, errorHandler22, log23, logLevel24);
        retrofit.ErrorHandler errorHandler26 = restAdapter25.errorHandler;
        int int27 = restAdapter25.getLOG_CHUNK_SIZE();
        retrofit.Server server28 = restAdapter25.getserver();
        retrofit.client.Client.Provider provider29 = restAdapter25.clientProvider;
        retrofit.client.Client.Provider provider30 = restAdapter25.getclientProvider();
        java.lang.String str31 = restAdapter25.getIDLE_THREAD_NAME();
        retrofit.Server server32 = null;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Log log40 = null;
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log40, logLevel41);
        retrofit.RestAdapter.LogLevel logLevel43 = restAdapter42.logLevel;
        retrofit.ErrorHandler errorHandler44 = restAdapter42.geterrorHandler();
        java.util.concurrent.Executor executor45 = restAdapter42.getcallbackExecutor();
        retrofit.converter.Converter converter46 = restAdapter42.converter;
        retrofit.Server server47 = restAdapter42.getserver();
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter42.getLogLevel();
        restAdapter25.setLogLevel(logLevel48);
        restAdapter10.logLevel = logLevel48;
        retrofit.client.Client.Provider provider51 = restAdapter10.getclientProvider();
        retrofit.RestAdapter.LogLevel logLevel52 = restAdapter10.getLogLevel();
        retrofit.ErrorHandler errorHandler53 = restAdapter10.errorHandler;
        retrofit.client.Response response55 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response57 = restAdapter10.logAndReplaceResponse("Retrofit-", response55, (long) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4000 + "'", int27 == 4000);
        org.junit.Assert.assertNull(server28);
        org.junit.Assert.assertNull(provider29);
        org.junit.Assert.assertNull(provider30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Retrofit-Idle" + "'", str31, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler44);
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertNull(converter46);
        org.junit.Assert.assertNull(server47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler53);
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0301");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.RequestInterceptor requestInterceptor4 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter4();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString3();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter7 = serializedObjectSupporter0.deserializeObjectLogLevel2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(requestInterceptor4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GET" + "'", str6, "GET");
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0302");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.RestAdapter.Builder builder7 = builder0.setServer("Retrofit-Idle");
        retrofit.client.Client.Provider provider8 = builder7.clientProvider;
        retrofit.SerializedObjectSupporter serializedObjectSupporter9 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request10 = serializedObjectSupporter9.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter11 = serializedObjectSupporter9.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter12 = serializedObjectSupporter9.deserializeObjectConverter1();
        retrofit.RequestInterceptor requestInterceptor13 = serializedObjectSupporter9.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder14 = builder7.setRequestInterceptor(requestInterceptor13);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor16 = builder15.getcallbackExecutor();
        retrofit.client.Client.Provider provider17 = null;
        builder15.clientProvider = provider17;
        retrofit.Server server19 = null;
        builder15.server = server19;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        builder15.log = log21;
        retrofit.converter.Converter converter23 = builder15.converter;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = null;
        builder24.sethttpExecutor(executor25);
        retrofit.Profiler profiler27 = null;
        builder24.profiler = profiler27;
        retrofit.Server server29 = builder24.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor31 = serializedObjectSupporter30.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter32 = serializedObjectSupporter30.deserializeObjectConverter7();
        retrofit.client.Request request33 = serializedObjectSupporter30.deserializeObjectRequest1();
        builder24.serializedObjectSupporter = serializedObjectSupporter30;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor36 = null;
        builder35.sethttpExecutor(executor36);
        retrofit.Profiler profiler38 = null;
        builder35.profiler = profiler38;
        retrofit.Server server40 = builder35.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter41 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor42 = serializedObjectSupporter41.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter43 = serializedObjectSupporter41.deserializeObjectConverter7();
        retrofit.client.Request request44 = serializedObjectSupporter41.deserializeObjectRequest1();
        builder35.serializedObjectSupporter = serializedObjectSupporter41;
        java.lang.String str46 = serializedObjectSupporter41.deserializeObjectString2();
        retrofit.ErrorHandler errorHandler47 = serializedObjectSupporter41.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder48 = builder24.setErrorHandler(errorHandler47);
        builder15.errorHandler = errorHandler47;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder52 = builder50.setServer("hi!");
        java.util.concurrent.Executor executor53 = null;
        builder52.callbackExecutor = executor53;
        retrofit.RestAdapter restAdapter55 = builder52.build();
        retrofit.RestAdapter.Log log56 = restAdapter55.log;
        java.util.concurrent.Executor executor57 = restAdapter55.gethttpExecutor();
        builder15.callbackExecutor = executor57;
        builder14.httpExecutor = executor57;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor61 = null;
        builder60.sethttpExecutor(executor61);
        retrofit.Profiler profiler63 = null;
        builder60.profiler = profiler63;
        retrofit.RestAdapter.Log log65 = builder60.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter66 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler67 = serializedObjectSupporter66.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder68 = builder60.setErrorHandler(errorHandler67);
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor70 = null;
        builder69.sethttpExecutor(executor70);
        retrofit.Profiler profiler72 = null;
        builder69.profiler = profiler72;
        retrofit.Server server74 = builder69.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter75 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor76 = serializedObjectSupporter75.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter77 = serializedObjectSupporter75.deserializeObjectConverter7();
        retrofit.client.Request request78 = serializedObjectSupporter75.deserializeObjectRequest1();
        builder69.serializedObjectSupporter = serializedObjectSupporter75;
        builder69.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder81 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder83 = builder81.setServer("hi!");
        java.util.concurrent.Executor executor84 = null;
        builder83.callbackExecutor = executor84;
        retrofit.RestAdapter restAdapter86 = builder83.build();
        retrofit.RestAdapter.Log log87 = restAdapter86.log;
        java.util.concurrent.Executor executor88 = restAdapter86.gethttpExecutor();
        retrofit.client.Client.Provider provider89 = restAdapter86.getclientProvider();
        builder69.setclientProvider(provider89);
        builder68.setclientProvider(provider89);
        builder14.setclientProvider(provider89);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNotNull(request10);
        org.junit.Assert.assertNotNull(gsonConverter11);
        org.junit.Assert.assertNotNull(gsonConverter12);
        org.junit.Assert.assertNotNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertNull(converter23);
        org.junit.Assert.assertNull(server29);
        org.junit.Assert.assertNotNull(requestInterceptor31);
        org.junit.Assert.assertNotNull(gsonConverter32);
        org.junit.Assert.assertNotNull(request33);
        org.junit.Assert.assertNull(server40);
        org.junit.Assert.assertNotNull(requestInterceptor42);
        org.junit.Assert.assertNotNull(gsonConverter43);
        org.junit.Assert.assertNotNull(request44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Retrofit-Idle" + "'", str46, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(restAdapter55);
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertNotNull(executor57);
        org.junit.Assert.assertNull(log65);
        org.junit.Assert.assertNotNull(errorHandler67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNull(server74);
        org.junit.Assert.assertNotNull(requestInterceptor76);
        org.junit.Assert.assertNotNull(gsonConverter77);
        org.junit.Assert.assertNotNull(request78);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(restAdapter86);
        org.junit.Assert.assertNotNull(log87);
        org.junit.Assert.assertNotNull(executor88);
        org.junit.Assert.assertNotNull(provider89);
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0303");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.client.Request request9 = serializedObjectSupporter6.deserializeObjectRequest1();
        builder0.serializedObjectSupporter = serializedObjectSupporter6;
        retrofit.client.Request request11 = serializedObjectSupporter6.deserializeObjectRequest2();
        retrofit.client.Request request12 = serializedObjectSupporter6.deserializeObjectRequest5();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter13 = serializedObjectSupporter6.deserializeObjectLogLevel2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNotNull(request11);
        org.junit.Assert.assertNotNull(request12);
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0304");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider5 = builder0.getclientProvider();
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("hi!");
        java.util.concurrent.Executor executor9 = null;
        builder8.callbackExecutor = executor9;
        retrofit.RestAdapter restAdapter11 = builder8.build();
        retrofit.RestAdapter.Log log12 = restAdapter11.log;
        java.util.concurrent.Executor executor13 = restAdapter11.gethttpExecutor();
        retrofit.client.Client.Provider provider14 = restAdapter11.getclientProvider();
        builder0.setclientProvider(provider14);
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder18 = builder16.setServer("hi!");
        java.util.concurrent.Executor executor19 = null;
        builder18.callbackExecutor = executor19;
        retrofit.RestAdapter restAdapter21 = builder18.build();
        retrofit.RestAdapter.Log log22 = restAdapter21.log;
        java.util.concurrent.Executor executor23 = restAdapter21.gethttpExecutor();
        builder0.callbackExecutor = executor23;
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(restAdapter11);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNotNull(executor13);
        org.junit.Assert.assertNotNull(provider14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(restAdapter21);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertNotNull(executor23);
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0305");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler13 = restAdapter10.geterrorHandler();
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel15 = restAdapter10.getLogLevel();
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor17 = serializedObjectSupporter16.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter18 = serializedObjectSupporter16.deserializeObjectConverter7();
        retrofit.client.Request request19 = serializedObjectSupporter16.deserializeObjectRequest2();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter16.deserializeObjectConverter6();
        retrofit.client.Request request21 = serializedObjectSupporter16.deserializeObjectRequest8();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request22 = restAdapter10.logAndReplaceRequest(request21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(requestInterceptor17);
        org.junit.Assert.assertNotNull(gsonConverter18);
        org.junit.Assert.assertNotNull(request19);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNotNull(request21);
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0306");
        retrofit.SerializedObjectSupporter serializedObjectSupporter2 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request3 = serializedObjectSupporter2.deserializeObjectRequest6();
        java.util.List<retrofit.client.Header> headerList4 = request3.headers;
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", headerList4, typedOutput5);
        java.util.List<retrofit.client.Header> headerList7 = request6.getHeaders();
        java.util.List<retrofit.client.Header> headerList8 = request6.headers;
        java.lang.String str9 = request6.url;
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(headerList4);
        org.junit.Assert.assertNotNull(headerList7);
        org.junit.Assert.assertNotNull(headerList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0307");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server4 = null;
        builder0.server = server4;
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        builder0.log = log6;
        retrofit.converter.Converter converter8 = builder0.converter;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = null;
        builder9.sethttpExecutor(executor10);
        retrofit.Profiler profiler12 = null;
        builder9.profiler = profiler12;
        retrofit.Server server14 = builder9.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor16 = serializedObjectSupporter15.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter15.deserializeObjectConverter7();
        retrofit.client.Request request18 = serializedObjectSupporter15.deserializeObjectRequest1();
        builder9.serializedObjectSupporter = serializedObjectSupporter15;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor21 = null;
        builder20.sethttpExecutor(executor21);
        retrofit.Profiler profiler23 = null;
        builder20.profiler = profiler23;
        retrofit.Server server25 = builder20.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor27 = serializedObjectSupporter26.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter26.deserializeObjectConverter7();
        retrofit.client.Request request29 = serializedObjectSupporter26.deserializeObjectRequest1();
        builder20.serializedObjectSupporter = serializedObjectSupporter26;
        java.lang.String str31 = serializedObjectSupporter26.deserializeObjectString2();
        retrofit.ErrorHandler errorHandler32 = serializedObjectSupporter26.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder33 = builder9.setErrorHandler(errorHandler32);
        builder0.errorHandler = errorHandler32;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder37 = builder35.setServer("hi!");
        java.util.concurrent.Executor executor38 = null;
        builder37.callbackExecutor = executor38;
        retrofit.RestAdapter restAdapter40 = builder37.build();
        retrofit.RestAdapter.Log log41 = restAdapter40.log;
        java.util.concurrent.Executor executor42 = restAdapter40.gethttpExecutor();
        builder0.callbackExecutor = executor42;
        retrofit.Profiler profiler44 = builder0.profiler;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNull(server14);
        org.junit.Assert.assertNotNull(requestInterceptor16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertNotNull(request18);
        org.junit.Assert.assertNull(server25);
        org.junit.Assert.assertNotNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(request29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Retrofit-Idle" + "'", str31, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(restAdapter40);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertNotNull(executor42);
        org.junit.Assert.assertNull(profiler44);
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0308");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.ErrorHandler errorHandler6 = builder0.errorHandler;
        retrofit.Profiler profiler7 = builder0.profiler;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = null;
        builder8.sethttpExecutor(executor9);
        retrofit.client.Client.Provider provider11 = builder8.getclientProvider();
        retrofit.client.Client.Provider provider12 = builder8.getclientProvider();
        retrofit.Server server13 = builder8.server;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = null;
        builder14.sethttpExecutor(executor15);
        retrofit.Profiler profiler17 = null;
        builder14.profiler = profiler17;
        retrofit.Server server19 = builder14.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter7();
        retrofit.client.Request request23 = serializedObjectSupporter20.deserializeObjectRequest1();
        builder14.serializedObjectSupporter = serializedObjectSupporter20;
        retrofit.client.Request request25 = serializedObjectSupporter20.deserializeObjectRequest2();
        retrofit.mime.TypedString typedString26 = serializedObjectSupporter20.deserializeObjectTypedOutput2();
        builder8.serializedObjectSupporter = serializedObjectSupporter20;
        java.util.concurrent.Executor executor28 = builder8.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request30 = serializedObjectSupporter29.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler31 = serializedObjectSupporter29.deserializeObjectErrorHandler1();
        retrofit.mime.TypedString typedString32 = serializedObjectSupporter29.deserializeObjectTypedOutput2();
        retrofit.ErrorHandler errorHandler33 = serializedObjectSupporter29.deserializeObjectErrorHandler1();
        builder8.errorHandler = errorHandler33;
        retrofit.RestAdapter.Builder builder35 = builder0.setErrorHandler(errorHandler33);
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder38 = builder36.setServer("hi!");
        java.util.concurrent.Executor executor39 = null;
        builder38.callbackExecutor = executor39;
        retrofit.SerializedObjectSupporter serializedObjectSupporter41 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor42 = serializedObjectSupporter41.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder43 = builder38.setRequestInterceptor(requestInterceptor42);
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor45 = null;
        builder44.sethttpExecutor(executor45);
        retrofit.Profiler profiler47 = null;
        builder44.profiler = profiler47;
        retrofit.Server server49 = builder44.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter50 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor51 = serializedObjectSupporter50.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter52 = serializedObjectSupporter50.deserializeObjectConverter7();
        retrofit.client.Request request53 = serializedObjectSupporter50.deserializeObjectRequest1();
        builder44.serializedObjectSupporter = serializedObjectSupporter50;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor56 = null;
        builder55.sethttpExecutor(executor56);
        retrofit.Profiler profiler58 = null;
        builder55.profiler = profiler58;
        retrofit.Server server60 = builder55.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter61 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor62 = serializedObjectSupporter61.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter63 = serializedObjectSupporter61.deserializeObjectConverter7();
        retrofit.client.Request request64 = serializedObjectSupporter61.deserializeObjectRequest1();
        builder55.serializedObjectSupporter = serializedObjectSupporter61;
        java.lang.String str66 = serializedObjectSupporter61.deserializeObjectString2();
        retrofit.ErrorHandler errorHandler67 = serializedObjectSupporter61.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder68 = builder44.setErrorHandler(errorHandler67);
        builder38.errorHandler = errorHandler67;
        retrofit.RestAdapter.Builder builder70 = builder35.setErrorHandler(errorHandler67);
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertNotNull(request25);
        org.junit.Assert.assertNotNull(typedString26);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNotNull(request30);
        org.junit.Assert.assertNotNull(errorHandler31);
        org.junit.Assert.assertNotNull(typedString32);
        org.junit.Assert.assertNotNull(errorHandler33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(requestInterceptor42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(server49);
        org.junit.Assert.assertNotNull(requestInterceptor51);
        org.junit.Assert.assertNotNull(gsonConverter52);
        org.junit.Assert.assertNotNull(request53);
        org.junit.Assert.assertNull(server60);
        org.junit.Assert.assertNotNull(requestInterceptor62);
        org.junit.Assert.assertNotNull(gsonConverter63);
        org.junit.Assert.assertNotNull(request64);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Retrofit-Idle" + "'", str66, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0309");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.logLevel = logLevel23;
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = restAdapter10.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter27 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter27.deserializeObjectConverter2();
        retrofit.client.Request request29 = serializedObjectSupporter27.deserializeObjectRequest7();
        retrofit.client.Request request30 = serializedObjectSupporter27.deserializeObjectRequest2();
        retrofit.client.Request request31 = serializedObjectSupporter27.deserializeObjectRequest3();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter27;
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter27.deserializeObjectConverter7();
        java.lang.String str34 = serializedObjectSupporter27.deserializeObjectString4();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(serializedObjectSupporter26);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(request29);
        org.junit.Assert.assertNotNull(request30);
        org.junit.Assert.assertNotNull(request31);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "http://example.com/" + "'", str34, "http://example.com/");
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0310");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest8();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter2();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter0.deserializeObjectConverter4();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(gsonConverter6);
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0311");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.client.Client.Provider provider15 = restAdapter10.getclientProvider();
        java.lang.String str16 = restAdapter10.getIDLE_THREAD_NAME();
        java.lang.String str17 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request19 = serializedObjectSupporter18.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter18.deserializeObjectConverter8();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter18;
        retrofit.Server server22 = restAdapter10.server;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Retrofit-Idle" + "'", str16, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-Idle" + "'", str17, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(request19);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNull(server22);
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0312");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        java.lang.String str13 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.converter.Converter converter14 = restAdapter10.converter;
        retrofit.ErrorHandler errorHandler15 = restAdapter10.errorHandler;
        java.lang.Throwable throwable16 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter10.logException(throwable16, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-Idle" + "'", str13, "Retrofit-Idle");
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(errorHandler15);
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0313");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler2 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.mime.TypedString typedString3 = serializedObjectSupporter0.deserializeObjectTypedOutput2();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest6();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter5 = serializedObjectSupporter0.deserializeObjectLogLevel3();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(errorHandler2);
        org.junit.Assert.assertNotNull(typedString3);
        org.junit.Assert.assertNotNull(request4);
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0314");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter1 = serializedObjectSupporter0.deserializeObjectConverter2();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest3();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.client.Request request6 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter0.deserializeObjectConverter4();
        org.junit.Assert.assertNotNull(gsonConverter1);
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(request6);
        org.junit.Assert.assertNotNull(gsonConverter7);
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0315");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.SerializedObjectSupporter serializedObjectSupporter5 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor6 = serializedObjectSupporter5.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder7 = builder2.setRequestInterceptor(requestInterceptor6);
        retrofit.Server server8 = builder7.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter9 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter10 = serializedObjectSupporter9.deserializeObjectConverter2();
        builder7.serializedObjectSupporter = serializedObjectSupporter9;
        retrofit.client.Request request12 = serializedObjectSupporter9.deserializeObjectRequest5();
        java.util.List<retrofit.client.Header> headerList13 = request12.headers;
        java.util.List<retrofit.client.Header> headerList14 = request12.headers;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(server8);
        org.junit.Assert.assertNotNull(gsonConverter10);
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(headerList13);
        org.junit.Assert.assertNotNull(headerList14);
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0316");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter10.logLevel;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        retrofit.converter.Converter converter14 = restAdapter10.converter;
        java.lang.Throwable throwable15 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter10.logException(throwable15, "POST");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(converter14);
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0317");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        boolean boolean14 = logLevel13.log();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0318");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.converter.Converter converter15 = restAdapter10.getconverter();
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = restAdapter10.serializedObjectSupporter;
        retrofit.Server server17 = restAdapter10.getserver();
        java.util.concurrent.Executor executor18 = restAdapter10.callbackExecutor;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(converter15);
        org.junit.Assert.assertNull(serializedObjectSupporter16);
        org.junit.Assert.assertNull(server17);
        org.junit.Assert.assertNull(executor18);
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0319");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server4 = null;
        builder0.server = server4;
        java.util.concurrent.Executor executor6 = builder0.gethttpExecutor();
        retrofit.Profiler profiler7 = builder0.profiler;
        retrofit.RequestInterceptor requestInterceptor8 = builder0.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter9 = builder0.serializedObjectSupporter;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertNull(serializedObjectSupporter9);
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0320");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        java.lang.String str13 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.converter.Converter converter14 = restAdapter10.converter;
        retrofit.ErrorHandler errorHandler15 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor16 = restAdapter10.httpExecutor;
        int int17 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter10.getLogLevel();
        java.util.concurrent.Executor executor19 = restAdapter10.callbackExecutor;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-Idle" + "'", str13, "Retrofit-Idle");
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4000 + "'", int17 == 4000);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(executor19);
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0321");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        java.lang.String str13 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.converter.Converter converter14 = restAdapter10.converter;
        java.lang.Throwable throwable15 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter10.logException(throwable15, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-Idle" + "'", str13, "Retrofit-Idle");
        org.junit.Assert.assertNull(converter14);
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0322");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter1 = serializedObjectSupporter0.deserializeObjectConverter2();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest3();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest6();
        java.lang.String str6 = request5.url;
        org.junit.Assert.assertNotNull(gsonConverter1);
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://example.com/" + "'", str6, "http://example.com/");
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0323");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.Server server5 = null;
        builder0.server = server5;
        retrofit.SerializedObjectSupporter serializedObjectSupporter7 = new retrofit.SerializedObjectSupporter();
        java.lang.String str8 = serializedObjectSupporter7.deserializeObjectString4();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter7.deserializeObjectConverter8();
        builder0.converter = gsonConverter9;
        retrofit.RestAdapter.Log log11 = builder0.log;
        retrofit.client.Client.Provider provider12 = builder0.getclientProvider();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://example.com/" + "'", str8, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter9);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertNull(provider12);
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0324");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter10.getLogLevel();
        retrofit.Server server15 = restAdapter10.getserver();
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request17 = serializedObjectSupporter16.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler18 = serializedObjectSupporter16.deserializeObjectErrorHandler1();
        retrofit.mime.TypedString typedString19 = serializedObjectSupporter16.deserializeObjectTypedOutput2();
        retrofit.client.Request request20 = serializedObjectSupporter16.deserializeObjectRequest6();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter16;
        retrofit.Server server22 = restAdapter10.getserver();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertNotNull(errorHandler18);
        org.junit.Assert.assertNotNull(typedString19);
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertNull(server22);
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0325");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.Server server5 = builder2.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = builder2.serializedObjectSupporter;
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = null;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel16);
        builder2.logLevel = logLevel16;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(server5);
        org.junit.Assert.assertNull(serializedObjectSupporter6);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0326");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest8();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter2();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter6 = serializedObjectSupporter0.deserializeObjectLogLevel1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(gsonConverter5);
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0327");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter0.deserializeObjectConverter6();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter0.deserializeObjectConverter6();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter8 = serializedObjectSupporter0.deserializeObjectLogLevel3();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(gsonConverter6);
        org.junit.Assert.assertNotNull(gsonConverter7);
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0328");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.converter.Converter converter15 = restAdapter10.converter;
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter10.getrequestInterceptor();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(converter15);
        org.junit.Assert.assertNull(requestInterceptor16);
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0329");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter1 = serializedObjectSupporter0.deserializeObjectConverter2();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest3();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter6();
        retrofit.RequestInterceptor requestInterceptor6 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.mime.TypedString typedString7 = serializedObjectSupporter0.deserializeObjectTypedOutput2();
        org.junit.Assert.assertNotNull(gsonConverter1);
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(typedString7);
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0330");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.errorHandler;
        retrofit.converter.Converter converter13 = restAdapter10.converter;
        java.util.concurrent.Executor executor14 = restAdapter10.callbackExecutor;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertNull(executor14);
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0331");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RestAdapter.Log log4 = null;
        builder0.log = log4;
        java.util.concurrent.Executor executor6 = builder0.getcallbackExecutor();
        java.util.concurrent.Executor executor7 = builder0.callbackExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter8 = new retrofit.SerializedObjectSupporter();
        java.lang.String str9 = serializedObjectSupporter8.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter10 = serializedObjectSupporter8.deserializeObjectConverter2();
        retrofit.converter.GsonConverter gsonConverter11 = serializedObjectSupporter8.deserializeObjectConverter7();
        retrofit.RestAdapter.Builder builder12 = builder0.setConverter((retrofit.converter.Converter) gsonConverter11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor14 = null;
        builder13.sethttpExecutor(executor14);
        retrofit.Profiler profiler16 = null;
        builder13.profiler = profiler16;
        retrofit.RestAdapter.Log log18 = builder13.log;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor20 = null;
        builder19.sethttpExecutor(executor20);
        retrofit.Profiler profiler22 = null;
        builder19.profiler = profiler22;
        retrofit.RestAdapter.LogLevel logLevel24 = builder19.logLevel;
        retrofit.RestAdapter.Builder builder25 = builder13.setLogLevel(logLevel24);
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor27 = null;
        builder26.sethttpExecutor(executor27);
        retrofit.converter.Converter converter29 = builder26.converter;
        java.util.concurrent.Executor executor30 = builder26.getcallbackExecutor();
        java.util.concurrent.Executor executor31 = builder26.callbackExecutor;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor33 = null;
        builder32.sethttpExecutor(executor33);
        retrofit.Profiler profiler35 = null;
        builder32.profiler = profiler35;
        retrofit.Server server37 = builder32.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter38 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor39 = serializedObjectSupporter38.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter40 = serializedObjectSupporter38.deserializeObjectConverter7();
        retrofit.client.Request request41 = serializedObjectSupporter38.deserializeObjectRequest1();
        builder32.serializedObjectSupporter = serializedObjectSupporter38;
        builder32.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder46 = builder44.setServer("hi!");
        java.util.concurrent.Executor executor47 = null;
        builder46.callbackExecutor = executor47;
        retrofit.RestAdapter restAdapter49 = builder46.build();
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor51 = null;
        builder50.sethttpExecutor(executor51);
        retrofit.Profiler profiler53 = null;
        builder50.profiler = profiler53;
        retrofit.RestAdapter.Log log55 = builder50.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter56 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler57 = serializedObjectSupporter56.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder58 = builder50.setErrorHandler(errorHandler57);
        retrofit.RestAdapter.Builder builder59 = builder46.setErrorHandler(errorHandler57);
        java.util.concurrent.Executor executor60 = builder59.callbackExecutor;
        builder32.setcallbackExecutor(executor60);
        builder26.httpExecutor = executor60;
        builder13.httpExecutor = executor60;
        builder0.sethttpExecutor(executor60);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Retrofit-Idle" + "'", str9, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter10);
        org.junit.Assert.assertNotNull(gsonConverter11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(log18);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(converter29);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNull(server37);
        org.junit.Assert.assertNotNull(requestInterceptor39);
        org.junit.Assert.assertNotNull(gsonConverter40);
        org.junit.Assert.assertNotNull(request41);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(restAdapter49);
        org.junit.Assert.assertNull(log55);
        org.junit.Assert.assertNotNull(errorHandler57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(executor60);
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0332");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = restAdapter10.serializedObjectSupporter;
        java.util.concurrent.Executor executor14 = restAdapter10.gethttpExecutor();
        retrofit.Server server15 = restAdapter10.getserver();
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter10.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter17.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter17.deserializeObjectConverter7();
        retrofit.client.Request request21 = serializedObjectSupporter17.deserializeObjectRequest5();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter17.deserializeObjectConverter6();
        java.lang.reflect.Method method23 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] {};
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj25 = restHandler16.invoke((java.lang.Object) gsonConverter22, method23, objArray24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(serializedObjectSupporter13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNotNull(request21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0333");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler13 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor14 = restAdapter10.callbackExecutor;
        retrofit.client.Response response16 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response18 = restAdapter10.logAndReplaceResponse("", response16, 1L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(executor14);
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0334");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter0.deserializeObjectConverter6();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter0.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter0.deserializeObjectConverter3();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(gsonConverter6);
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertNotNull(gsonConverter8);
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0335");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.util.concurrent.Executor executor11 = restAdapter10.httpExecutor;
        retrofit.client.Client.Provider provider12 = restAdapter10.getclientProvider();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(provider12);
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0336");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.RestAdapter restAdapter5 = builder2.build();
        retrofit.RestAdapter.Log log6 = restAdapter5.log;
        java.util.concurrent.Executor executor7 = restAdapter5.gethttpExecutor();
        java.lang.Throwable throwable8 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter5.logException(throwable8, "Retrofit-");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(restAdapter5);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertNotNull(executor7);
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0337");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.logLevel = logLevel23;
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = restAdapter10.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter27 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter27.deserializeObjectConverter2();
        retrofit.client.Request request29 = serializedObjectSupporter27.deserializeObjectRequest7();
        retrofit.client.Request request30 = serializedObjectSupporter27.deserializeObjectRequest2();
        retrofit.client.Request request31 = serializedObjectSupporter27.deserializeObjectRequest3();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter27;
        retrofit.Server server33 = serializedObjectSupporter27.deserializeObjectServer1();
        java.lang.String str34 = serializedObjectSupporter27.deserializeObjectString4();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(serializedObjectSupporter26);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(request29);
        org.junit.Assert.assertNotNull(request30);
        org.junit.Assert.assertNotNull(request31);
        org.junit.Assert.assertNotNull(server33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "http://example.com/" + "'", str34, "http://example.com/");
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0338");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter6();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString4();
        retrofit.client.Request request6 = serializedObjectSupporter0.deserializeObjectRequest4();
        java.util.List<retrofit.client.Header> headerList7 = request6.getHeaders();
        java.lang.String str8 = request6.url;
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "http://example.com/" + "'", str5, "http://example.com/");
        org.junit.Assert.assertNotNull(request6);
        org.junit.Assert.assertNotNull(headerList7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://example.com/" + "'", str8, "http://example.com/");
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0339");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter0.deserializeObjectConverter6();
        java.lang.Class<?> wildcardClass7 = serializedObjectSupporter0.getClass();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(gsonConverter6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0340");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = restAdapter10.serializedObjectSupporter;
        java.util.concurrent.Executor executor14 = restAdapter10.gethttpExecutor();
        retrofit.Server server15 = restAdapter10.getserver();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter10.logLevel;
        java.lang.Throwable throwable17 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter10.logException(throwable17, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(serializedObjectSupporter13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0341");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest8();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter6();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter6 = serializedObjectSupporter0.deserializeObjectLogLevel1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(gsonConverter5);
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0342");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter1 = serializedObjectSupporter0.deserializeObjectConverter2();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest3();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter6();
        retrofit.RequestInterceptor requestInterceptor6 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter0.deserializeObjectConverter7();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter8 = serializedObjectSupporter0.deserializeObjectLogLevel3();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(gsonConverter1);
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(gsonConverter7);
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0343");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler2 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.mime.TypedString typedString3 = serializedObjectSupporter0.deserializeObjectTypedOutput2();
        retrofit.ErrorHandler errorHandler4 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest8();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString4();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(errorHandler2);
        org.junit.Assert.assertNotNull(typedString3);
        org.junit.Assert.assertNotNull(errorHandler4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://example.com/" + "'", str6, "http://example.com/");
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0344");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter3();
        retrofit.client.Request request6 = serializedObjectSupporter0.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request8 = serializedObjectSupporter0.deserializeObjectRequest6();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter9 = serializedObjectSupporter0.deserializeObjectLogLevel2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(request6);
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertNotNull(request8);
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0345");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor5 = serializedObjectSupporter4.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter4.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter4.deserializeObjectConverter7();
        retrofit.Server server8 = serializedObjectSupporter4.deserializeObjectServer1();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter4.deserializeObjectConverter7();
        retrofit.ErrorHandler errorHandler10 = serializedObjectSupporter4.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder11 = builder0.setErrorHandler(errorHandler10);
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor13 = null;
        builder12.sethttpExecutor(executor13);
        retrofit.converter.Converter converter15 = builder12.converter;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor17 = null;
        builder16.sethttpExecutor(executor17);
        retrofit.converter.Converter converter19 = builder16.converter;
        java.util.concurrent.Executor executor20 = builder16.getcallbackExecutor();
        retrofit.client.Client.Provider provider21 = builder16.getclientProvider();
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder24 = builder22.setServer("hi!");
        java.util.concurrent.Executor executor25 = null;
        builder24.callbackExecutor = executor25;
        retrofit.RestAdapter restAdapter27 = builder24.build();
        retrofit.RestAdapter.Log log28 = restAdapter27.log;
        java.util.concurrent.Executor executor29 = restAdapter27.gethttpExecutor();
        retrofit.client.Client.Provider provider30 = restAdapter27.getclientProvider();
        builder16.setclientProvider(provider30);
        retrofit.RestAdapter.Builder builder32 = builder12.setClient(provider30);
        builder11.clientProvider = provider30;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder36 = builder34.setServer("hi!");
        java.util.concurrent.Executor executor37 = null;
        builder36.callbackExecutor = executor37;
        retrofit.RestAdapter restAdapter39 = builder36.build();
        retrofit.RestAdapter.Log log40 = restAdapter39.log;
        java.util.concurrent.Executor executor41 = restAdapter39.gethttpExecutor();
        retrofit.client.Client.Provider provider42 = restAdapter39.getclientProvider();
        builder11.clientProvider = provider42;
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNotNull(requestInterceptor5);
        org.junit.Assert.assertNotNull(gsonConverter6);
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertNotNull(server8);
        org.junit.Assert.assertNotNull(gsonConverter9);
        org.junit.Assert.assertNotNull(errorHandler10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(converter15);
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(provider21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(restAdapter27);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNotNull(executor29);
        org.junit.Assert.assertNotNull(provider30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(restAdapter39);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertNotNull(executor41);
        org.junit.Assert.assertNotNull(provider42);
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0346");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.client.Client.Provider provider3 = builder0.getclientProvider();
        retrofit.client.Client.Provider provider4 = builder0.getclientProvider();
        retrofit.Server server5 = builder0.server;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.sethttpExecutor(executor7);
        retrofit.Profiler profiler9 = null;
        builder6.profiler = profiler9;
        retrofit.Server server11 = builder6.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor13 = serializedObjectSupporter12.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter12.deserializeObjectConverter7();
        retrofit.client.Request request15 = serializedObjectSupporter12.deserializeObjectRequest1();
        builder6.serializedObjectSupporter = serializedObjectSupporter12;
        retrofit.client.Request request17 = serializedObjectSupporter12.deserializeObjectRequest2();
        retrofit.mime.TypedString typedString18 = serializedObjectSupporter12.deserializeObjectTypedOutput2();
        builder0.serializedObjectSupporter = serializedObjectSupporter12;
        retrofit.client.Request request20 = serializedObjectSupporter12.deserializeObjectRequest4();
        retrofit.client.Request request21 = serializedObjectSupporter12.deserializeObjectRequest7();
        java.lang.String str22 = request21.getUrl();
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(provider4);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNull(server11);
        org.junit.Assert.assertNotNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertNotNull(typedString18);
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertNotNull(request21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "http://example.com/" + "'", str22, "http://example.com/");
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0347");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString4();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter8();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest7();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest1();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "http://example.com/" + "'", str1, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0348");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("hi!");
        java.util.concurrent.Executor executor9 = null;
        builder8.callbackExecutor = executor9;
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor12 = serializedObjectSupporter11.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder13 = builder8.setRequestInterceptor(requestInterceptor12);
        builder0.requestInterceptor = requestInterceptor12;
        java.util.concurrent.Executor executor15 = builder0.getcallbackExecutor();
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(requestInterceptor12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(executor15);
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0349");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.RestAdapter restAdapter5 = builder2.build();
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.sethttpExecutor(executor7);
        retrofit.Profiler profiler9 = null;
        builder6.profiler = profiler9;
        retrofit.RestAdapter.Log log11 = builder6.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler13 = serializedObjectSupporter12.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder14 = builder6.setErrorHandler(errorHandler13);
        retrofit.RestAdapter.Builder builder15 = builder2.setErrorHandler(errorHandler13);
        retrofit.converter.Converter converter16 = null;
        builder15.converter = converter16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder20 = builder18.setServer("hi!");
        retrofit.client.Client.Provider provider21 = builder18.clientProvider;
        retrofit.RequestInterceptor requestInterceptor22 = builder18.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean24 = logLevel23.log();
        retrofit.RestAdapter.Builder builder25 = builder18.setLogLevel(logLevel23);
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor27 = serializedObjectSupporter26.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter26.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter29 = serializedObjectSupporter26.deserializeObjectConverter7();
        retrofit.Server server30 = serializedObjectSupporter26.deserializeObjectServer1();
        builder18.server = server30;
        builder15.server = server30;
        retrofit.RestAdapter restAdapter33 = builder15.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(restAdapter5);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertNotNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(provider21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(gsonConverter29);
        org.junit.Assert.assertNotNull(server30);
        org.junit.Assert.assertNotNull(restAdapter33);
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0350");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter3();
        retrofit.client.Request request6 = serializedObjectSupporter0.deserializeObjectRequest4();
        retrofit.client.Request request7 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.client.Request request8 = serializedObjectSupporter0.deserializeObjectRequest7();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter9 = serializedObjectSupporter0.deserializeObjectLogLevel2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(request6);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(request8);
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0351");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = null;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter13;
        java.util.concurrent.Executor executor15 = restAdapter10.callbackExecutor;
        java.util.concurrent.Executor executor16 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter10.logLevel = logLevel17;
        boolean boolean19 = logLevel17.log();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0352");
        retrofit.SerializedObjectSupporter serializedObjectSupporter2 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request3 = serializedObjectSupporter2.deserializeObjectRequest6();
        java.util.List<retrofit.client.Header> headerList4 = request3.headers;
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", headerList4, typedOutput5);
        java.util.List<retrofit.client.Header> headerList7 = request6.getHeaders();
        java.lang.String str8 = request6.method;
        java.lang.String str9 = request6.url;
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(headerList4);
        org.junit.Assert.assertNotNull(headerList7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0353");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.RestAdapter restAdapter5 = builder2.build();
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.sethttpExecutor(executor7);
        retrofit.Profiler profiler9 = null;
        builder6.profiler = profiler9;
        retrofit.RestAdapter.Log log11 = builder6.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler13 = serializedObjectSupporter12.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder14 = builder6.setErrorHandler(errorHandler13);
        retrofit.RestAdapter.Builder builder15 = builder2.setErrorHandler(errorHandler13);
        java.util.concurrent.Executor executor16 = builder15.callbackExecutor;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor18 = null;
        builder17.sethttpExecutor(executor18);
        retrofit.Profiler profiler20 = null;
        builder17.profiler = profiler20;
        retrofit.Server server22 = builder17.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter23 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor24 = serializedObjectSupporter23.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter25 = serializedObjectSupporter23.deserializeObjectConverter7();
        retrofit.client.Request request26 = serializedObjectSupporter23.deserializeObjectRequest1();
        builder17.serializedObjectSupporter = serializedObjectSupporter23;
        java.lang.String str28 = serializedObjectSupporter23.deserializeObjectString2();
        retrofit.ErrorHandler errorHandler29 = serializedObjectSupporter23.deserializeObjectErrorHandler1();
        builder15.errorHandler = errorHandler29;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder33 = builder31.setServer("hi!");
        retrofit.client.Client.Provider provider34 = builder31.clientProvider;
        retrofit.RestAdapter.Log log35 = null;
        builder31.log = log35;
        java.util.concurrent.Executor executor37 = builder31.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor39 = builder38.getcallbackExecutor();
        retrofit.client.Client.Provider provider40 = null;
        builder38.clientProvider = provider40;
        retrofit.SerializedObjectSupporter serializedObjectSupporter42 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor43 = serializedObjectSupporter42.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter44 = serializedObjectSupporter42.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter45 = serializedObjectSupporter42.deserializeObjectConverter5();
        retrofit.client.Request request46 = serializedObjectSupporter42.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter47 = serializedObjectSupporter42.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter48 = serializedObjectSupporter42.deserializeObjectConverter6();
        retrofit.RestAdapter.Builder builder49 = builder38.setConverter((retrofit.converter.Converter) gsonConverter48);
        builder31.converter = gsonConverter48;
        retrofit.ErrorHandler errorHandler51 = builder31.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter52 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler53 = serializedObjectSupporter52.deserializeObjectErrorHandler1();
        retrofit.Server server54 = serializedObjectSupporter52.deserializeObjectServer1();
        builder31.server = server54;
        retrofit.RestAdapter.Builder builder56 = builder15.setServer(server54);
        retrofit.RequestInterceptor requestInterceptor57 = builder15.requestInterceptor;
        java.lang.Class<?> wildcardClass58 = builder15.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(restAdapter5);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertNotNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(executor16);
        org.junit.Assert.assertNull(server22);
        org.junit.Assert.assertNotNull(requestInterceptor24);
        org.junit.Assert.assertNotNull(gsonConverter25);
        org.junit.Assert.assertNotNull(request26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Retrofit-Idle" + "'", str28, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(provider34);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNotNull(requestInterceptor43);
        org.junit.Assert.assertNotNull(gsonConverter44);
        org.junit.Assert.assertNotNull(gsonConverter45);
        org.junit.Assert.assertNotNull(request46);
        org.junit.Assert.assertNotNull(gsonConverter47);
        org.junit.Assert.assertNotNull(gsonConverter48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(errorHandler51);
        org.junit.Assert.assertNotNull(errorHandler53);
        org.junit.Assert.assertNotNull(server54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(requestInterceptor57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0354");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("hi!");
        java.util.concurrent.Executor executor9 = null;
        builder8.callbackExecutor = executor9;
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor12 = serializedObjectSupporter11.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder13 = builder8.setRequestInterceptor(requestInterceptor12);
        builder0.requestInterceptor = requestInterceptor12;
        retrofit.ErrorHandler errorHandler15 = builder0.errorHandler;
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(requestInterceptor12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(errorHandler15);
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0355");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.client.Request request9 = serializedObjectSupporter6.deserializeObjectRequest1();
        builder0.serializedObjectSupporter = serializedObjectSupporter6;
        retrofit.client.Request request11 = serializedObjectSupporter6.deserializeObjectRequest2();
        retrofit.client.Request request12 = serializedObjectSupporter6.deserializeObjectRequest5();
        retrofit.mime.TypedOutput typedOutput13 = request12.getBody();
        java.lang.String str14 = request12.method;
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNotNull(request11);
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNull(typedOutput13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GET" + "'", str14, "GET");
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0356");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = null;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter13;
        retrofit.client.Client.Provider provider15 = restAdapter10.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = restAdapter10.serializedObjectSupporter;
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter10.getLogLevel();
        boolean boolean18 = logLevel17.log();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertNull(serializedObjectSupporter16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0357");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString2();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString1();
        retrofit.RequestInterceptor requestInterceptor3 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest4();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest5();
        java.lang.Class<?> wildcardClass6 = request5.getClass();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Retrofit-Idle" + "'", str1, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Retrofit-" + "'", str2, "Retrofit-");
        org.junit.Assert.assertNotNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0358");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        java.util.concurrent.Executor executor6 = null;
        builder0.sethttpExecutor(executor6);
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder10 = builder8.setServer("hi!");
        java.util.concurrent.Executor executor11 = null;
        builder10.callbackExecutor = executor11;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor14 = serializedObjectSupporter13.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder15 = builder10.setRequestInterceptor(requestInterceptor14);
        retrofit.RestAdapter.Builder builder16 = builder0.setRequestInterceptor(requestInterceptor14);
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean18 = logLevel17.log();
        builder0.logLevel = logLevel17;
        retrofit.RequestInterceptor requestInterceptor20 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor22 = null;
        builder21.sethttpExecutor(executor22);
        retrofit.Profiler profiler24 = null;
        builder21.profiler = profiler24;
        retrofit.RestAdapter.Log log26 = builder21.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter27 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler28 = serializedObjectSupporter27.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder29 = builder21.setErrorHandler(errorHandler28);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder32 = builder30.setServer("hi!");
        retrofit.client.Client.Provider provider33 = builder30.clientProvider;
        retrofit.RequestInterceptor requestInterceptor34 = builder30.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean36 = logLevel35.log();
        retrofit.RestAdapter.Builder builder37 = builder30.setLogLevel(logLevel35);
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor39 = builder38.getcallbackExecutor();
        retrofit.client.Client.Provider provider40 = null;
        builder38.clientProvider = provider40;
        retrofit.Server server42 = null;
        builder38.server = server42;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        builder38.log = log44;
        builder30.log = log44;
        retrofit.RestAdapter.Builder builder47 = builder29.setLog(log44);
        retrofit.RestAdapter.Builder builder49 = builder47.setServer("Retrofit-Idle");
        retrofit.SerializedObjectSupporter serializedObjectSupporter50 = new retrofit.SerializedObjectSupporter();
        java.lang.String str51 = serializedObjectSupporter50.deserializeObjectString2();
        java.lang.String str52 = serializedObjectSupporter50.deserializeObjectString1();
        retrofit.RequestInterceptor requestInterceptor53 = serializedObjectSupporter50.deserializeObjectRequestInterceptor1();
        builder47.requestInterceptor = requestInterceptor53;
        retrofit.RestAdapter.Builder builder55 = builder0.setRequestInterceptor(requestInterceptor53);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(requestInterceptor20);
        org.junit.Assert.assertNull(log26);
        org.junit.Assert.assertNotNull(errorHandler28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(provider33);
        org.junit.Assert.assertNull(requestInterceptor34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Retrofit-Idle" + "'", str51, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Retrofit-" + "'", str52, "Retrofit-");
        org.junit.Assert.assertNotNull(requestInterceptor53);
        org.junit.Assert.assertNotNull(builder55);
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0359");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.RestAdapter restAdapter5 = builder2.build();
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.sethttpExecutor(executor7);
        retrofit.Profiler profiler9 = null;
        builder6.profiler = profiler9;
        retrofit.RestAdapter.Log log11 = builder6.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler13 = serializedObjectSupporter12.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder14 = builder6.setErrorHandler(errorHandler13);
        retrofit.RestAdapter.Builder builder15 = builder2.setErrorHandler(errorHandler13);
        java.util.concurrent.Executor executor16 = builder15.callbackExecutor;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor18 = null;
        builder17.sethttpExecutor(executor18);
        retrofit.Profiler profiler20 = null;
        builder17.profiler = profiler20;
        retrofit.Server server22 = builder17.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter23 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor24 = serializedObjectSupporter23.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter25 = serializedObjectSupporter23.deserializeObjectConverter7();
        retrofit.client.Request request26 = serializedObjectSupporter23.deserializeObjectRequest1();
        builder17.serializedObjectSupporter = serializedObjectSupporter23;
        java.lang.String str28 = serializedObjectSupporter23.deserializeObjectString2();
        retrofit.ErrorHandler errorHandler29 = serializedObjectSupporter23.deserializeObjectErrorHandler1();
        builder15.errorHandler = errorHandler29;
        retrofit.Profiler profiler31 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder32 = builder15.setProfiler(profiler31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(restAdapter5);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertNotNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(executor16);
        org.junit.Assert.assertNull(server22);
        org.junit.Assert.assertNotNull(requestInterceptor24);
        org.junit.Assert.assertNotNull(gsonConverter25);
        org.junit.Assert.assertNotNull(request26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Retrofit-Idle" + "'", str28, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler29);
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0360");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean6 = logLevel5.log();
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel5);
        retrofit.converter.Converter converter8 = builder0.converter;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = null;
        builder9.sethttpExecutor(executor10);
        retrofit.client.Client.Provider provider12 = builder9.getclientProvider();
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor14 = null;
        builder13.sethttpExecutor(executor14);
        retrofit.Profiler profiler16 = null;
        builder13.profiler = profiler16;
        retrofit.Server server18 = builder13.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter19 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor20 = serializedObjectSupporter19.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter21 = serializedObjectSupporter19.deserializeObjectConverter7();
        retrofit.client.Request request22 = serializedObjectSupporter19.deserializeObjectRequest1();
        builder13.serializedObjectSupporter = serializedObjectSupporter19;
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder27 = builder25.setServer("hi!");
        java.util.concurrent.Executor executor28 = null;
        builder27.callbackExecutor = executor28;
        retrofit.RestAdapter restAdapter30 = builder27.build();
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor32 = null;
        builder31.sethttpExecutor(executor32);
        retrofit.Profiler profiler34 = null;
        builder31.profiler = profiler34;
        retrofit.RestAdapter.Log log36 = builder31.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter37 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler38 = serializedObjectSupporter37.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder39 = builder31.setErrorHandler(errorHandler38);
        retrofit.RestAdapter.Builder builder40 = builder27.setErrorHandler(errorHandler38);
        java.util.concurrent.Executor executor41 = builder40.callbackExecutor;
        builder13.setcallbackExecutor(executor41);
        builder9.setcallbackExecutor(executor41);
        builder0.sethttpExecutor(executor41);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertNull(server18);
        org.junit.Assert.assertNotNull(requestInterceptor20);
        org.junit.Assert.assertNotNull(gsonConverter21);
        org.junit.Assert.assertNotNull(request22);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(restAdapter30);
        org.junit.Assert.assertNull(log36);
        org.junit.Assert.assertNotNull(errorHandler38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(executor41);
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0361");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean6 = logLevel5.log();
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder9 = builder0.setServer("http://example.com/");
        java.util.concurrent.Executor executor10 = builder0.httpExecutor;
        retrofit.client.Client.Provider provider11 = null;
        builder0.clientProvider = provider11;
        retrofit.Server server13 = builder0.server;
        java.util.concurrent.Executor executor14 = builder0.httpExecutor;
        retrofit.client.Client.Provider provider15 = builder0.getclientProvider();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(provider15);
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0362");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel12 = restAdapter10.logLevel;
        java.util.concurrent.Executor executor13 = restAdapter10.callbackExecutor;
        retrofit.Server server14 = restAdapter10.server;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(server14);
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0363");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler2 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest8();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest5();
        retrofit.mime.TypedOutput typedOutput5 = request4.getBody();
        java.lang.String str6 = request4.getUrl();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(errorHandler2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNull(typedOutput5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://example.com/" + "'", str6, "http://example.com/");
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0364");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Server server3 = null;
        retrofit.client.Client.Provider provider4 = null;
        java.util.concurrent.Executor executor5 = null;
        java.util.concurrent.Executor executor6 = null;
        retrofit.RequestInterceptor requestInterceptor7 = null;
        retrofit.converter.Converter converter8 = null;
        retrofit.Profiler profiler9 = null;
        retrofit.ErrorHandler errorHandler10 = null;
        retrofit.RestAdapter.Log log11 = null;
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter(server3, provider4, executor5, executor6, requestInterceptor7, converter8, profiler9, errorHandler10, log11, logLevel12);
        retrofit.ErrorHandler errorHandler14 = restAdapter13.errorHandler;
        int int15 = restAdapter13.getLOG_CHUNK_SIZE();
        retrofit.Server server16 = restAdapter13.getserver();
        retrofit.Server server17 = null;
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Log log25 = null;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server17, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log25, logLevel26);
        restAdapter13.logLevel = logLevel26;
        builder0.logLevel = logLevel26;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter30 = builder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4000 + "'", int15 == 4000);
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0365");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.Profiler profiler15 = restAdapter10.profiler;
        retrofit.converter.Converter converter16 = restAdapter10.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter17.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter17.deserializeObjectConverter4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter17;
        retrofit.converter.Converter converter22 = restAdapter10.converter;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNull(converter22);
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0366");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler7 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder8 = builder0.setErrorHandler(errorHandler7);
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder11 = builder9.setServer("hi!");
        retrofit.client.Client.Provider provider12 = builder9.clientProvider;
        retrofit.RequestInterceptor requestInterceptor13 = builder9.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean15 = logLevel14.log();
        retrofit.RestAdapter.Builder builder16 = builder9.setLogLevel(logLevel14);
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor18 = builder17.getcallbackExecutor();
        retrofit.client.Client.Provider provider19 = null;
        builder17.clientProvider = provider19;
        retrofit.Server server21 = null;
        builder17.server = server21;
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        builder17.log = log23;
        builder9.log = log23;
        retrofit.RestAdapter.Builder builder26 = builder8.setLog(log23);
        retrofit.RestAdapter.Builder builder28 = builder26.setServer("Retrofit-Idle");
        retrofit.client.Client client29 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder30 = builder28.setClient(client29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNotNull(errorHandler7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertNull(requestInterceptor13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0367");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        java.util.concurrent.Executor executor15 = restAdapter10.gethttpExecutor();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(executor15);
    }

    @Test
    public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0368");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter8();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter3 = serializedObjectSupporter0.deserializeObjectLogLevel2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0369");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = null;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter13;
        retrofit.client.Client.Provider provider15 = restAdapter10.getclientProvider();
        retrofit.ErrorHandler errorHandler16 = restAdapter10.errorHandler;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertNull(errorHandler16);
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0370");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter8();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString1();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest5();
        retrofit.mime.TypedOutput typedOutput5 = request4.getBody();
        java.lang.Class<?> wildcardClass6 = request4.getClass();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Retrofit-" + "'", str3, "Retrofit-");
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNull(typedOutput5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0371");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.RequestInterceptor requestInterceptor4 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest2();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(requestInterceptor4);
        org.junit.Assert.assertNotNull(request5);
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0372");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString3();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString4();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.mime.TypedOutput typedOutput4 = request3.body;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "GET" + "'", str1, "GET");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "http://example.com/" + "'", str2, "http://example.com/");
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNull(typedOutput4);
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0373");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.converter.Converter converter14 = restAdapter10.getconverter();
        retrofit.client.Response response16 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response18 = restAdapter10.logAndReplaceResponse("POST", response16, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(converter14);
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0374");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.converter.Converter converter3 = builder2.converter;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor5 = null;
        builder4.sethttpExecutor(executor5);
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = null;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel16);
        retrofit.ErrorHandler errorHandler18 = restAdapter17.errorHandler;
        int int19 = restAdapter17.getLOG_CHUNK_SIZE();
        retrofit.Server server20 = restAdapter17.getserver();
        retrofit.Server server21 = null;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = null;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel30);
        restAdapter17.logLevel = logLevel30;
        builder4.logLevel = logLevel30;
        retrofit.RestAdapter.Builder builder34 = builder2.setLogLevel(logLevel30);
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor36 = null;
        builder35.sethttpExecutor(executor36);
        retrofit.converter.Converter converter38 = builder35.converter;
        java.util.concurrent.Executor executor39 = builder35.getcallbackExecutor();
        retrofit.client.Client.Provider provider40 = builder35.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter41 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request42 = serializedObjectSupporter41.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler43 = serializedObjectSupporter41.deserializeObjectErrorHandler1();
        builder35.errorHandler = errorHandler43;
        retrofit.RestAdapter.Log log45 = builder35.log;
        retrofit.Server server46 = null;
        retrofit.client.Client.Provider provider47 = null;
        java.util.concurrent.Executor executor48 = null;
        java.util.concurrent.Executor executor49 = null;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        retrofit.converter.Converter converter51 = null;
        retrofit.Profiler profiler52 = null;
        retrofit.ErrorHandler errorHandler53 = null;
        retrofit.RestAdapter.Log log54 = null;
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter(server46, provider47, executor48, executor49, requestInterceptor50, converter51, profiler52, errorHandler53, log54, logLevel55);
        retrofit.ErrorHandler errorHandler57 = restAdapter56.errorHandler;
        retrofit.ErrorHandler errorHandler58 = restAdapter56.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler59 = restAdapter56.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter60 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request61 = serializedObjectSupporter60.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter62 = serializedObjectSupporter60.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter63 = serializedObjectSupporter60.deserializeObjectConverter1();
        restHandler59.serializedObjectSupporter = serializedObjectSupporter60;
        retrofit.SerializedObjectSupporter serializedObjectSupporter65 = restHandler59.serializedObjectSupporter;
        java.lang.String str66 = serializedObjectSupporter65.deserializeObjectString5();
        builder35.serializedObjectSupporter = serializedObjectSupporter65;
        retrofit.client.Request request68 = serializedObjectSupporter65.deserializeObjectRequest5();
        java.lang.String str69 = serializedObjectSupporter65.deserializeObjectString5();
        retrofit.converter.GsonConverter gsonConverter70 = serializedObjectSupporter65.deserializeObjectConverter2();
        builder34.converter = gsonConverter70;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4000 + "'", int19 == 4000);
        org.junit.Assert.assertNull(server20);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(converter38);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNull(provider40);
        org.junit.Assert.assertNotNull(request42);
        org.junit.Assert.assertNotNull(errorHandler43);
        org.junit.Assert.assertNull(log45);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler57);
        org.junit.Assert.assertNull(errorHandler58);
        org.junit.Assert.assertNotNull(request61);
        org.junit.Assert.assertNotNull(gsonConverter62);
        org.junit.Assert.assertNotNull(gsonConverter63);
        org.junit.Assert.assertNotNull(serializedObjectSupporter65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "POST" + "'", str66, "POST");
        org.junit.Assert.assertNotNull(request68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "POST" + "'", str69, "POST");
        org.junit.Assert.assertNotNull(gsonConverter70);
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0375");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor13 = serializedObjectSupporter12.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter12.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter15 = serializedObjectSupporter12.deserializeObjectConverter5();
        retrofit.client.Request request16 = serializedObjectSupporter12.deserializeObjectRequest4();
        java.util.List<retrofit.client.Header> headerList17 = request16.headers;
        java.lang.String str18 = request16.getUrl();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request19 = restAdapter10.logAndReplaceRequest(request16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNotNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(gsonConverter15);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(headerList17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.Profiler profiler15 = restAdapter10.profiler;
        retrofit.converter.Converter converter16 = restAdapter10.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter17.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter17.deserializeObjectConverter4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter17;
        retrofit.Profiler profiler22 = restAdapter10.profiler;
        retrofit.RestAdapter.LogLevel logLevel23 = null;
        restAdapter10.setLogLevel(logLevel23);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNull(profiler22);
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0377");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest8();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter2();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString3();
        retrofit.client.Request request7 = serializedObjectSupporter0.deserializeObjectRequest3();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GET" + "'", str6, "GET");
        org.junit.Assert.assertNotNull(request7);
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0378");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest1();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest7();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter3();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter6 = serializedObjectSupporter0.deserializeObjectLogLevel3();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(gsonConverter5);
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0379");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean6 = logLevel5.log();
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder9 = builder0.setServer("http://example.com/");
        java.util.concurrent.Executor executor10 = builder0.httpExecutor;
        retrofit.client.Client.Provider provider11 = null;
        builder0.clientProvider = provider11;
        retrofit.Server server13 = builder0.server;
        retrofit.converter.Converter converter14 = builder0.converter;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNull(converter14);
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0380");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        java.lang.String str13 = restAdapter10.getTHREAD_PREFIX();
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter10.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = restHandler14.serializedObjectSupporter;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor17 = null;
        builder16.sethttpExecutor(executor17);
        retrofit.Profiler profiler19 = null;
        builder16.profiler = profiler19;
        retrofit.RestAdapter.Log log21 = builder16.log;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder24 = builder22.setServer("hi!");
        java.util.concurrent.Executor executor25 = null;
        builder24.callbackExecutor = executor25;
        retrofit.SerializedObjectSupporter serializedObjectSupporter27 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor28 = serializedObjectSupporter27.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder29 = builder24.setRequestInterceptor(requestInterceptor28);
        builder16.requestInterceptor = requestInterceptor28;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler32 = builder31.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter33 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request34 = serializedObjectSupporter33.deserializeObjectRequest6();
        builder31.serializedObjectSupporter = serializedObjectSupporter33;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor37 = null;
        builder36.sethttpExecutor(executor37);
        retrofit.Profiler profiler39 = null;
        builder36.profiler = profiler39;
        retrofit.RestAdapter.Log log41 = builder36.log;
        retrofit.client.Client.Provider provider42 = null;
        builder36.setclientProvider(provider42);
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder46 = builder44.setServer("hi!");
        java.util.concurrent.Executor executor47 = null;
        builder46.callbackExecutor = executor47;
        retrofit.SerializedObjectSupporter serializedObjectSupporter49 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor50 = serializedObjectSupporter49.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder51 = builder46.setRequestInterceptor(requestInterceptor50);
        retrofit.Server server52 = builder51.server;
        builder36.server = server52;
        builder31.server = server52;
        retrofit.RestAdapter.Builder builder55 = builder16.setServer(server52);
        java.lang.reflect.Method method56 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter57 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor58 = serializedObjectSupporter57.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter59 = serializedObjectSupporter57.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter60 = serializedObjectSupporter57.deserializeObjectConverter5();
        retrofit.client.Request request61 = serializedObjectSupporter57.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter62 = serializedObjectSupporter57.deserializeObjectConverter3();
        retrofit.client.Request request63 = serializedObjectSupporter57.deserializeObjectRequest4();
        retrofit.client.Request request64 = serializedObjectSupporter57.deserializeObjectRequest2();
        retrofit.RequestInterceptor requestInterceptor65 = serializedObjectSupporter57.deserializeObjectRequestInterceptor1();
        java.lang.Object[] objArray66 = new java.lang.Object[] { serializedObjectSupporter57 };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj67 = restHandler14.invoke((java.lang.Object) builder16, method56, objArray66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-" + "'", str13, "Retrofit-");
        org.junit.Assert.assertNull(serializedObjectSupporter15);
        org.junit.Assert.assertNull(log21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(requestInterceptor28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(errorHandler32);
        org.junit.Assert.assertNotNull(request34);
        org.junit.Assert.assertNull(log41);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(requestInterceptor50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(server52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(requestInterceptor58);
        org.junit.Assert.assertNotNull(gsonConverter59);
        org.junit.Assert.assertNotNull(gsonConverter60);
        org.junit.Assert.assertNotNull(request61);
        org.junit.Assert.assertNotNull(gsonConverter62);
        org.junit.Assert.assertNotNull(request63);
        org.junit.Assert.assertNotNull(request64);
        org.junit.Assert.assertNotNull(requestInterceptor65);
        org.junit.Assert.assertNotNull(objArray66);
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0381");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor5 = null;
        builder4.sethttpExecutor(executor5);
        retrofit.Profiler profiler7 = null;
        builder4.profiler = profiler7;
        retrofit.Server server9 = builder4.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter10 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor11 = serializedObjectSupporter10.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter12 = serializedObjectSupporter10.deserializeObjectConverter7();
        retrofit.client.Request request13 = serializedObjectSupporter10.deserializeObjectRequest1();
        builder4.serializedObjectSupporter = serializedObjectSupporter10;
        java.lang.String str15 = serializedObjectSupporter10.deserializeObjectString2();
        retrofit.ErrorHandler errorHandler16 = serializedObjectSupporter10.deserializeObjectErrorHandler1();
        java.lang.String str17 = serializedObjectSupporter10.deserializeObjectString1();
        retrofit.converter.GsonConverter gsonConverter18 = serializedObjectSupporter10.deserializeObjectConverter7();
        builder0.converter = gsonConverter18;
        java.util.concurrent.Executor executor20 = builder0.callbackExecutor;
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(server9);
        org.junit.Assert.assertNotNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(gsonConverter12);
        org.junit.Assert.assertNotNull(request13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Retrofit-Idle" + "'", str15, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-" + "'", str17, "Retrofit-");
        org.junit.Assert.assertNotNull(gsonConverter18);
        org.junit.Assert.assertNull(executor20);
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0382");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server4 = null;
        builder0.server = server4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = null;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        retrofit.ErrorHandler errorHandler17 = restAdapter16.errorHandler;
        java.util.concurrent.Executor executor18 = restAdapter16.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter16.getLogLevel();
        builder0.logLevel = logLevel19;
        java.util.concurrent.Executor executor21 = null;
        builder0.callbackExecutor = executor21;
        retrofit.SerializedObjectSupporter serializedObjectSupporter23 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor24 = serializedObjectSupporter23.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter25 = serializedObjectSupporter23.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter26 = serializedObjectSupporter23.deserializeObjectConverter7();
        retrofit.Server server27 = serializedObjectSupporter23.deserializeObjectServer1();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter23.deserializeObjectConverter7();
        retrofit.ErrorHandler errorHandler29 = serializedObjectSupporter23.deserializeObjectErrorHandler1();
        builder0.errorHandler = errorHandler29;
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor32 = serializedObjectSupporter31.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter31.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter34 = serializedObjectSupporter31.deserializeObjectConverter5();
        retrofit.client.Request request35 = serializedObjectSupporter31.deserializeObjectRequest4();
        retrofit.ErrorHandler errorHandler36 = serializedObjectSupporter31.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder37 = builder0.setErrorHandler(errorHandler36);
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor39 = null;
        builder38.sethttpExecutor(executor39);
        retrofit.converter.Converter converter41 = builder38.converter;
        java.util.concurrent.Executor executor42 = builder38.getcallbackExecutor();
        retrofit.client.Client.Provider provider43 = builder38.getclientProvider();
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder46 = builder44.setServer("hi!");
        java.util.concurrent.Executor executor47 = null;
        builder46.callbackExecutor = executor47;
        retrofit.RestAdapter restAdapter49 = builder46.build();
        retrofit.RestAdapter.Log log50 = restAdapter49.log;
        java.util.concurrent.Executor executor51 = restAdapter49.gethttpExecutor();
        retrofit.client.Client.Provider provider52 = restAdapter49.getclientProvider();
        builder38.setclientProvider(provider52);
        builder0.setclientProvider(provider52);
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder57 = builder55.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel58 = builder57.logLevel;
        builder0.logLevel = logLevel58;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(requestInterceptor24);
        org.junit.Assert.assertNotNull(gsonConverter25);
        org.junit.Assert.assertNotNull(gsonConverter26);
        org.junit.Assert.assertNotNull(server27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(errorHandler29);
        org.junit.Assert.assertNotNull(requestInterceptor32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(gsonConverter34);
        org.junit.Assert.assertNotNull(request35);
        org.junit.Assert.assertNotNull(errorHandler36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(converter41);
        org.junit.Assert.assertNull(executor42);
        org.junit.Assert.assertNull(provider43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(restAdapter49);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertNotNull(executor51);
        org.junit.Assert.assertNotNull(provider52);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0383");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        java.util.concurrent.Executor executor3 = builder0.httpExecutor;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter5 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor6 = serializedObjectSupporter5.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter5.deserializeObjectConverter8();
        java.lang.String str8 = serializedObjectSupporter5.deserializeObjectString2();
        builder0.serializedObjectSupporter = serializedObjectSupporter5;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter10 = builder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNotNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Retrofit-Idle" + "'", str8, "Retrofit-Idle");
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0384");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider5 = builder0.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request7 = serializedObjectSupporter6.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler8 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        builder0.errorHandler = errorHandler8;
        retrofit.RestAdapter.Log log10 = builder0.log;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder13 = builder11.setServer("hi!");
        retrofit.client.Client.Provider provider14 = builder11.clientProvider;
        retrofit.RequestInterceptor requestInterceptor15 = builder11.requestInterceptor;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder18 = builder16.setServer("hi!");
        retrofit.client.Client.Provider provider19 = builder16.clientProvider;
        java.util.concurrent.Executor executor20 = null;
        builder16.setcallbackExecutor(executor20);
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder23 = builder16.setLog(log22);
        retrofit.RestAdapter.Builder builder24 = builder11.setLog(log22);
        builder0.log = log22;
        java.util.concurrent.Executor executor26 = builder0.gethttpExecutor();
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(errorHandler8);
        org.junit.Assert.assertNull(log10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(provider19);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(executor26);
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0385");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter2 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request3 = serializedObjectSupporter2.deserializeObjectRequest6();
        builder0.serializedObjectSupporter = serializedObjectSupporter2;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor6 = null;
        builder5.sethttpExecutor(executor6);
        retrofit.Profiler profiler8 = null;
        builder5.profiler = profiler8;
        retrofit.RestAdapter.Log log10 = builder5.log;
        retrofit.client.Client.Provider provider11 = null;
        builder5.setclientProvider(provider11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder15 = builder13.setServer("hi!");
        java.util.concurrent.Executor executor16 = null;
        builder15.callbackExecutor = executor16;
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder20 = builder15.setRequestInterceptor(requestInterceptor19);
        retrofit.Server server21 = builder20.server;
        builder5.server = server21;
        builder0.server = server21;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = null;
        builder24.sethttpExecutor(executor25);
        retrofit.converter.Converter converter27 = builder24.converter;
        java.util.concurrent.Executor executor28 = builder24.getcallbackExecutor();
        retrofit.client.Client.Provider provider29 = builder24.getclientProvider();
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder32 = builder30.setServer("hi!");
        java.util.concurrent.Executor executor33 = null;
        builder32.callbackExecutor = executor33;
        retrofit.RestAdapter restAdapter35 = builder32.build();
        retrofit.RestAdapter.Log log36 = restAdapter35.log;
        java.util.concurrent.Executor executor37 = restAdapter35.gethttpExecutor();
        retrofit.client.Client.Provider provider38 = restAdapter35.getclientProvider();
        builder24.setclientProvider(provider38);
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor41 = null;
        builder40.sethttpExecutor(executor41);
        retrofit.converter.Converter converter43 = builder40.converter;
        java.util.concurrent.Executor executor44 = builder40.getcallbackExecutor();
        retrofit.client.Client.Provider provider45 = builder40.getclientProvider();
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor47 = null;
        builder46.sethttpExecutor(executor47);
        retrofit.Profiler profiler49 = null;
        builder46.profiler = profiler49;
        retrofit.RestAdapter.LogLevel logLevel51 = builder46.logLevel;
        java.util.concurrent.Executor executor52 = null;
        builder46.sethttpExecutor(executor52);
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder56 = builder54.setServer("hi!");
        java.util.concurrent.Executor executor57 = null;
        builder56.callbackExecutor = executor57;
        retrofit.SerializedObjectSupporter serializedObjectSupporter59 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor60 = serializedObjectSupporter59.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder61 = builder56.setRequestInterceptor(requestInterceptor60);
        retrofit.RestAdapter.Builder builder62 = builder46.setRequestInterceptor(requestInterceptor60);
        java.util.concurrent.Executor executor63 = builder62.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter64 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor65 = serializedObjectSupporter64.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter66 = serializedObjectSupporter64.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter67 = serializedObjectSupporter64.deserializeObjectConverter7();
        retrofit.Server server68 = serializedObjectSupporter64.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder69 = builder62.setServer(server68);
        java.util.concurrent.Executor executor70 = null;
        builder69.sethttpExecutor(executor70);
        retrofit.Server server72 = builder69.server;
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder75 = builder73.setServer("hi!");
        java.util.concurrent.Executor executor76 = null;
        builder75.callbackExecutor = executor76;
        retrofit.RestAdapter restAdapter78 = builder75.build();
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor80 = null;
        builder79.sethttpExecutor(executor80);
        retrofit.Profiler profiler82 = null;
        builder79.profiler = profiler82;
        retrofit.RestAdapter.Log log84 = builder79.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter85 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler86 = serializedObjectSupporter85.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder87 = builder79.setErrorHandler(errorHandler86);
        retrofit.RestAdapter.Builder builder88 = builder75.setErrorHandler(errorHandler86);
        java.util.concurrent.Executor executor89 = builder88.callbackExecutor;
        builder69.callbackExecutor = executor89;
        builder40.sethttpExecutor(executor89);
        builder24.httpExecutor = executor89;
        builder0.httpExecutor = executor89;
        retrofit.RestAdapter restAdapter94 = builder0.build();
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNull(log10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(server21);
        org.junit.Assert.assertNull(converter27);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNull(provider29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(restAdapter35);
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertNotNull(executor37);
        org.junit.Assert.assertNotNull(provider38);
        org.junit.Assert.assertNull(converter43);
        org.junit.Assert.assertNull(executor44);
        org.junit.Assert.assertNull(provider45);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(requestInterceptor60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(executor63);
        org.junit.Assert.assertNotNull(requestInterceptor65);
        org.junit.Assert.assertNotNull(gsonConverter66);
        org.junit.Assert.assertNotNull(gsonConverter67);
        org.junit.Assert.assertNotNull(server68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(server72);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(restAdapter78);
        org.junit.Assert.assertNull(log84);
        org.junit.Assert.assertNotNull(errorHandler86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(executor89);
        org.junit.Assert.assertNotNull(restAdapter94);
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0386");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        java.lang.String str14 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter10.getrequestInterceptor();
        retrofit.client.Client.Provider provider16 = restAdapter10.clientProvider;
        retrofit.RequestInterceptor requestInterceptor17 = restAdapter10.getrequestInterceptor();
        retrofit.Server server18 = null;
        retrofit.client.Client.Provider provider19 = null;
        java.util.concurrent.Executor executor20 = null;
        java.util.concurrent.Executor executor21 = null;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        retrofit.converter.Converter converter23 = null;
        retrofit.Profiler profiler24 = null;
        retrofit.ErrorHandler errorHandler25 = null;
        retrofit.RestAdapter.Log log26 = null;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server18, provider19, executor20, executor21, requestInterceptor22, converter23, profiler24, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler29 = restAdapter28.errorHandler;
        java.util.concurrent.Executor executor30 = restAdapter28.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter28.getLogLevel();
        retrofit.client.Client.Provider provider32 = restAdapter28.clientProvider;
        retrofit.Profiler profiler33 = restAdapter28.profiler;
        retrofit.converter.Converter converter34 = restAdapter28.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter35 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor36 = serializedObjectSupporter35.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter37 = serializedObjectSupporter35.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter38 = serializedObjectSupporter35.deserializeObjectConverter4();
        restAdapter28.serializedObjectSupporter = serializedObjectSupporter35;
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter28.setLogLevel(logLevel40);
        retrofit.RestAdapter.LogLevel logLevel42 = restAdapter28.logLevel;
        java.lang.String str43 = restAdapter28.getIDLE_THREAD_NAME();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter28.getLogLevel();
        restAdapter10.setLogLevel(logLevel44);
        retrofit.RestAdapter.LogLevel logLevel46 = restAdapter10.getLogLevel();
        java.lang.String str47 = restAdapter10.getTHREAD_PREFIX();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Retrofit-Idle" + "'", str14, "Retrofit-Idle");
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNull(provider16);
        org.junit.Assert.assertNull(requestInterceptor17);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider32);
        org.junit.Assert.assertNull(profiler33);
        org.junit.Assert.assertNull(converter34);
        org.junit.Assert.assertNotNull(requestInterceptor36);
        org.junit.Assert.assertNotNull(gsonConverter37);
        org.junit.Assert.assertNotNull(gsonConverter38);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Retrofit-Idle" + "'", str43, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Retrofit-" + "'", str47, "Retrofit-");
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0387");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        java.lang.Class<?> wildcardClass2 = serializedObjectSupporter0.getClass();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0388");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        java.util.concurrent.Executor executor6 = null;
        builder0.sethttpExecutor(executor6);
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder10 = builder8.setServer("hi!");
        java.util.concurrent.Executor executor11 = null;
        builder10.callbackExecutor = executor11;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor14 = serializedObjectSupporter13.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder15 = builder10.setRequestInterceptor(requestInterceptor14);
        retrofit.RestAdapter.Builder builder16 = builder0.setRequestInterceptor(requestInterceptor14);
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean18 = logLevel17.log();
        builder0.logLevel = logLevel17;
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter23 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.client.Request request24 = serializedObjectSupporter20.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter25 = serializedObjectSupporter20.deserializeObjectConverter3();
        retrofit.client.Request request26 = serializedObjectSupporter20.deserializeObjectRequest4();
        retrofit.client.Request request27 = serializedObjectSupporter20.deserializeObjectRequest2();
        builder0.serializedObjectSupporter = serializedObjectSupporter20;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collections collections29 = serializedObjectSupporter20.deserializeObjectList1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.Collections$UnmodifiableRandomAccessList cannot be cast to java.util.Collections");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(gsonConverter23);
        org.junit.Assert.assertNotNull(request24);
        org.junit.Assert.assertNotNull(gsonConverter25);
        org.junit.Assert.assertNotNull(request26);
        org.junit.Assert.assertNotNull(request27);
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0389");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.Profiler profiler15 = restAdapter10.profiler;
        retrofit.converter.Converter converter16 = restAdapter10.converter;
        java.util.concurrent.Executor executor17 = restAdapter10.gethttpExecutor();
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter10.getLogLevel();
        retrofit.Server server19 = restAdapter10.getserver();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(server19);
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0390");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest4();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest7();
        retrofit.mime.TypedOutput typedOutput5 = request4.body;
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNull(typedOutput5);
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0391");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler7 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        retrofit.Server server8 = serializedObjectSupporter6.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder9 = builder0.setServer(server8);
        java.util.concurrent.Executor executor10 = builder9.gethttpExecutor();
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = null;
        builder11.sethttpExecutor(executor12);
        retrofit.client.Client.Provider provider14 = builder11.getclientProvider();
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor16 = null;
        builder15.sethttpExecutor(executor16);
        retrofit.Profiler profiler18 = null;
        builder15.profiler = profiler18;
        retrofit.Server server20 = builder15.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter21 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor22 = serializedObjectSupporter21.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter23 = serializedObjectSupporter21.deserializeObjectConverter7();
        retrofit.client.Request request24 = serializedObjectSupporter21.deserializeObjectRequest1();
        builder15.serializedObjectSupporter = serializedObjectSupporter21;
        builder15.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder29 = builder27.setServer("hi!");
        java.util.concurrent.Executor executor30 = null;
        builder29.callbackExecutor = executor30;
        retrofit.RestAdapter restAdapter32 = builder29.build();
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = null;
        builder33.sethttpExecutor(executor34);
        retrofit.Profiler profiler36 = null;
        builder33.profiler = profiler36;
        retrofit.RestAdapter.Log log38 = builder33.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter39 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler40 = serializedObjectSupporter39.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder41 = builder33.setErrorHandler(errorHandler40);
        retrofit.RestAdapter.Builder builder42 = builder29.setErrorHandler(errorHandler40);
        java.util.concurrent.Executor executor43 = builder42.callbackExecutor;
        builder15.setcallbackExecutor(executor43);
        builder11.setcallbackExecutor(executor43);
        builder9.callbackExecutor = executor43;
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(errorHandler7);
        org.junit.Assert.assertNotNull(server8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(server20);
        org.junit.Assert.assertNotNull(requestInterceptor22);
        org.junit.Assert.assertNotNull(gsonConverter23);
        org.junit.Assert.assertNotNull(request24);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(restAdapter32);
        org.junit.Assert.assertNull(log38);
        org.junit.Assert.assertNotNull(errorHandler40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(executor43);
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0392");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel15 = restAdapter10.logLevel;
        retrofit.converter.Converter converter16 = restAdapter10.converter;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor18 = builder17.getcallbackExecutor();
        retrofit.client.Client.Provider provider19 = null;
        builder17.clientProvider = provider19;
        java.util.concurrent.Executor executor21 = builder17.getcallbackExecutor();
        retrofit.Server server22 = null;
        retrofit.client.Client.Provider provider23 = null;
        java.util.concurrent.Executor executor24 = null;
        java.util.concurrent.Executor executor25 = null;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        retrofit.converter.Converter converter27 = null;
        retrofit.Profiler profiler28 = null;
        retrofit.ErrorHandler errorHandler29 = null;
        retrofit.RestAdapter.Log log30 = null;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server22, provider23, executor24, executor25, requestInterceptor26, converter27, profiler28, errorHandler29, log30, logLevel31);
        retrofit.ErrorHandler errorHandler33 = restAdapter32.errorHandler;
        int int34 = restAdapter32.getLOG_CHUNK_SIZE();
        retrofit.Server server35 = restAdapter32.getserver();
        retrofit.client.Client.Provider provider36 = restAdapter32.clientProvider;
        retrofit.client.Client.Provider provider37 = restAdapter32.getclientProvider();
        java.lang.String str38 = restAdapter32.getIDLE_THREAD_NAME();
        retrofit.Server server39 = null;
        retrofit.client.Client.Provider provider40 = null;
        java.util.concurrent.Executor executor41 = null;
        java.util.concurrent.Executor executor42 = null;
        retrofit.RequestInterceptor requestInterceptor43 = null;
        retrofit.converter.Converter converter44 = null;
        retrofit.Profiler profiler45 = null;
        retrofit.ErrorHandler errorHandler46 = null;
        retrofit.RestAdapter.Log log47 = null;
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server39, provider40, executor41, executor42, requestInterceptor43, converter44, profiler45, errorHandler46, log47, logLevel48);
        retrofit.RestAdapter.LogLevel logLevel50 = restAdapter49.logLevel;
        retrofit.ErrorHandler errorHandler51 = restAdapter49.geterrorHandler();
        java.util.concurrent.Executor executor52 = restAdapter49.getcallbackExecutor();
        retrofit.converter.Converter converter53 = restAdapter49.converter;
        retrofit.Server server54 = restAdapter49.getserver();
        retrofit.RestAdapter.LogLevel logLevel55 = restAdapter49.getLogLevel();
        restAdapter32.setLogLevel(logLevel55);
        retrofit.RestAdapter.Builder builder57 = builder17.setLogLevel(logLevel55);
        restAdapter10.setLogLevel(logLevel55);
        retrofit.RestAdapter.LogLevel logLevel59 = restAdapter10.logLevel;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 4000 + "'", int34 == 4000);
        org.junit.Assert.assertNull(server35);
        org.junit.Assert.assertNull(provider36);
        org.junit.Assert.assertNull(provider37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Retrofit-Idle" + "'", str38, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler51);
        org.junit.Assert.assertNull(executor52);
        org.junit.Assert.assertNull(converter53);
        org.junit.Assert.assertNull(server54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0393");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        java.lang.String str13 = restAdapter10.getTHREAD_PREFIX();
        int int14 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Profiler profiler15 = restAdapter10.getprofiler();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-" + "'", str13, "Retrofit-");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4000 + "'", int14 == 4000);
        org.junit.Assert.assertNull(profiler15);
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0394");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        java.util.concurrent.Executor executor6 = null;
        builder0.sethttpExecutor(executor6);
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder10 = builder8.setServer("hi!");
        java.util.concurrent.Executor executor11 = null;
        builder10.callbackExecutor = executor11;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor14 = serializedObjectSupporter13.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder15 = builder10.setRequestInterceptor(requestInterceptor14);
        retrofit.RestAdapter.Builder builder16 = builder0.setRequestInterceptor(requestInterceptor14);
        java.util.concurrent.Executor executor17 = null;
        builder16.callbackExecutor = executor17;
        retrofit.Server server19 = builder16.server;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor21 = null;
        builder20.sethttpExecutor(executor21);
        retrofit.Profiler profiler23 = null;
        builder20.profiler = profiler23;
        retrofit.RestAdapter.LogLevel logLevel25 = builder20.logLevel;
        java.util.concurrent.Executor executor26 = null;
        builder20.sethttpExecutor(executor26);
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder30 = builder28.setServer("hi!");
        java.util.concurrent.Executor executor31 = null;
        builder30.callbackExecutor = executor31;
        retrofit.SerializedObjectSupporter serializedObjectSupporter33 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor34 = serializedObjectSupporter33.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder35 = builder30.setRequestInterceptor(requestInterceptor34);
        retrofit.RestAdapter.Builder builder36 = builder20.setRequestInterceptor(requestInterceptor34);
        java.util.concurrent.Executor executor37 = builder36.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter38 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor39 = serializedObjectSupporter38.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter40 = serializedObjectSupporter38.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter41 = serializedObjectSupporter38.deserializeObjectConverter7();
        retrofit.Server server42 = serializedObjectSupporter38.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder43 = builder36.setServer(server42);
        java.util.concurrent.Executor executor44 = null;
        builder43.sethttpExecutor(executor44);
        retrofit.Server server46 = builder43.server;
        retrofit.RestAdapter.Builder builder47 = builder16.setServer(server46);
        retrofit.Profiler profiler48 = null;
        builder47.profiler = profiler48;
        java.util.concurrent.Executor executor50 = builder47.getcallbackExecutor();
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(requestInterceptor34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNotNull(requestInterceptor39);
        org.junit.Assert.assertNotNull(gsonConverter40);
        org.junit.Assert.assertNotNull(gsonConverter41);
        org.junit.Assert.assertNotNull(server42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(server46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(executor50);
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0395");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest8();
        java.util.List<retrofit.client.Header> headerList4 = request3.getHeaders();
        java.util.List<retrofit.client.Header> headerList5 = request3.headers;
        java.lang.String str6 = request3.url;
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(headerList4);
        org.junit.Assert.assertNotNull(headerList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://example.com/" + "'", str6, "http://example.com/");
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0396");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.RestAdapter restAdapter5 = builder2.build();
        retrofit.RestAdapter.Log log6 = restAdapter5.log;
        java.util.concurrent.Executor executor7 = restAdapter5.gethttpExecutor();
        java.lang.String str8 = restAdapter5.getIDLE_THREAD_NAME();
        retrofit.Server server9 = null;
        retrofit.client.Client.Provider provider10 = null;
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        retrofit.converter.Converter converter14 = null;
        retrofit.Profiler profiler15 = null;
        retrofit.ErrorHandler errorHandler16 = null;
        retrofit.RestAdapter.Log log17 = null;
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter(server9, provider10, executor11, executor12, requestInterceptor13, converter14, profiler15, errorHandler16, log17, logLevel18);
        retrofit.ErrorHandler errorHandler20 = restAdapter19.errorHandler;
        java.util.concurrent.Executor executor21 = restAdapter19.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter19.getLogLevel();
        restAdapter5.logLevel = logLevel22;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = restAdapter5.serializedObjectSupporter;
        retrofit.Profiler profiler25 = restAdapter5.profiler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor27 = serializedObjectSupporter26.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter26.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter29 = serializedObjectSupporter26.deserializeObjectConverter7();
        restAdapter5.serializedObjectSupporter = serializedObjectSupporter26;
        retrofit.client.Client.Provider provider31 = restAdapter5.clientProvider;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(restAdapter5);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertNotNull(executor7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Retrofit-Idle" + "'", str8, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(serializedObjectSupporter24);
        org.junit.Assert.assertNull(profiler25);
        org.junit.Assert.assertNotNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(gsonConverter29);
        org.junit.Assert.assertNotNull(provider31);
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0397");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter3();
        retrofit.client.Request request6 = serializedObjectSupporter0.deserializeObjectRequest4();
        java.util.List<retrofit.client.Header> headerList7 = request6.headers;
        java.lang.String str8 = request6.method;
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(request6);
        org.junit.Assert.assertNotNull(headerList7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0398");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        java.util.concurrent.Executor executor6 = null;
        builder0.sethttpExecutor(executor6);
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder10 = builder8.setServer("hi!");
        java.util.concurrent.Executor executor11 = null;
        builder10.callbackExecutor = executor11;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor14 = serializedObjectSupporter13.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder15 = builder10.setRequestInterceptor(requestInterceptor14);
        retrofit.RestAdapter.Builder builder16 = builder0.setRequestInterceptor(requestInterceptor14);
        java.util.concurrent.Executor executor17 = null;
        builder16.callbackExecutor = executor17;
        java.util.concurrent.Executor executor19 = null;
        builder16.callbackExecutor = executor19;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter21 = builder16.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0399");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest4();
        java.util.List<retrofit.client.Header> headerList5 = request4.headers;
        java.util.List<retrofit.client.Header> headerList6 = request4.headers;
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(headerList5);
        org.junit.Assert.assertNotNull(headerList6);
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0400");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider5 = builder0.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request7 = serializedObjectSupporter6.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler8 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        builder0.errorHandler = errorHandler8;
        retrofit.converter.Converter converter10 = builder0.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        java.lang.String str12 = serializedObjectSupporter11.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter13 = serializedObjectSupporter11.deserializeObjectConverter2();
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter11.deserializeObjectConverter7();
        retrofit.RestAdapter.Builder builder15 = builder0.setConverter((retrofit.converter.Converter) gsonConverter14);
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor17 = null;
        builder16.sethttpExecutor(executor17);
        retrofit.Profiler profiler19 = null;
        builder16.profiler = profiler19;
        retrofit.RestAdapter.LogLevel logLevel21 = builder16.logLevel;
        java.util.concurrent.Executor executor22 = null;
        builder16.sethttpExecutor(executor22);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder26 = builder24.setServer("hi!");
        java.util.concurrent.Executor executor27 = null;
        builder26.callbackExecutor = executor27;
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor30 = serializedObjectSupporter29.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder31 = builder26.setRequestInterceptor(requestInterceptor30);
        retrofit.RestAdapter.Builder builder32 = builder16.setRequestInterceptor(requestInterceptor30);
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean34 = logLevel33.log();
        builder16.logLevel = logLevel33;
        retrofit.RequestInterceptor requestInterceptor36 = builder16.requestInterceptor;
        builder0.requestInterceptor = requestInterceptor36;
        java.util.concurrent.Executor executor38 = builder0.callbackExecutor;
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(errorHandler8);
        org.junit.Assert.assertNull(converter10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter13);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(requestInterceptor36);
        org.junit.Assert.assertNull(executor38);
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0401");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = null;
        builder0.serializedObjectSupporter = serializedObjectSupporter1;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor4 = null;
        builder3.sethttpExecutor(executor4);
        retrofit.converter.Converter converter6 = builder3.converter;
        java.util.concurrent.Executor executor7 = builder3.getcallbackExecutor();
        java.util.concurrent.Executor executor8 = builder3.callbackExecutor;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = null;
        builder9.sethttpExecutor(executor10);
        retrofit.Profiler profiler12 = null;
        builder9.profiler = profiler12;
        retrofit.Server server14 = builder9.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor16 = serializedObjectSupporter15.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter15.deserializeObjectConverter7();
        retrofit.client.Request request18 = serializedObjectSupporter15.deserializeObjectRequest1();
        builder9.serializedObjectSupporter = serializedObjectSupporter15;
        builder9.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder23 = builder21.setServer("hi!");
        java.util.concurrent.Executor executor24 = null;
        builder23.callbackExecutor = executor24;
        retrofit.RestAdapter restAdapter26 = builder23.build();
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor28 = null;
        builder27.sethttpExecutor(executor28);
        retrofit.Profiler profiler30 = null;
        builder27.profiler = profiler30;
        retrofit.RestAdapter.Log log32 = builder27.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter33 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler34 = serializedObjectSupporter33.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder35 = builder27.setErrorHandler(errorHandler34);
        retrofit.RestAdapter.Builder builder36 = builder23.setErrorHandler(errorHandler34);
        java.util.concurrent.Executor executor37 = builder36.callbackExecutor;
        builder9.setcallbackExecutor(executor37);
        builder3.httpExecutor = executor37;
        retrofit.SerializedObjectSupporter serializedObjectSupporter40 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor41 = serializedObjectSupporter40.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter42 = serializedObjectSupporter40.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter43 = serializedObjectSupporter40.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter44 = serializedObjectSupporter40.deserializeObjectConverter8();
        retrofit.client.Request request45 = serializedObjectSupporter40.deserializeObjectRequest5();
        retrofit.Server server46 = serializedObjectSupporter40.deserializeObjectServer1();
        builder3.server = server46;
        builder0.server = server46;
        java.util.concurrent.Executor executor49 = builder0.gethttpExecutor();
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder52 = builder50.setServer("hi!");
        java.util.concurrent.Executor executor53 = null;
        builder52.callbackExecutor = executor53;
        retrofit.RestAdapter restAdapter55 = builder52.build();
        retrofit.RestAdapter.Log log56 = restAdapter55.log;
        java.util.concurrent.Executor executor57 = restAdapter55.gethttpExecutor();
        retrofit.client.Client.Provider provider58 = restAdapter55.getclientProvider();
        builder0.setclientProvider(provider58);
        java.util.concurrent.Executor executor60 = null;
        builder0.httpExecutor = executor60;
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(server14);
        org.junit.Assert.assertNotNull(requestInterceptor16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertNotNull(request18);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(restAdapter26);
        org.junit.Assert.assertNull(log32);
        org.junit.Assert.assertNotNull(errorHandler34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(executor37);
        org.junit.Assert.assertNotNull(requestInterceptor41);
        org.junit.Assert.assertNotNull(gsonConverter42);
        org.junit.Assert.assertNotNull(gsonConverter43);
        org.junit.Assert.assertNotNull(gsonConverter44);
        org.junit.Assert.assertNotNull(request45);
        org.junit.Assert.assertNotNull(server46);
        org.junit.Assert.assertNull(executor49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(restAdapter55);
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertNotNull(executor57);
        org.junit.Assert.assertNotNull(provider58);
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0402");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server4 = null;
        builder0.server = server4;
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        builder0.log = log6;
        retrofit.converter.Converter converter8 = builder0.converter;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = null;
        builder9.sethttpExecutor(executor10);
        retrofit.converter.Converter converter12 = builder9.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor14 = serializedObjectSupporter13.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter15 = serializedObjectSupporter13.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter13.deserializeObjectConverter7();
        retrofit.Server server17 = serializedObjectSupporter13.deserializeObjectServer1();
        retrofit.converter.GsonConverter gsonConverter18 = serializedObjectSupporter13.deserializeObjectConverter7();
        retrofit.ErrorHandler errorHandler19 = serializedObjectSupporter13.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder20 = builder9.setErrorHandler(errorHandler19);
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor22 = null;
        builder21.sethttpExecutor(executor22);
        retrofit.converter.Converter converter24 = builder21.converter;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = null;
        builder25.sethttpExecutor(executor26);
        retrofit.converter.Converter converter28 = builder25.converter;
        java.util.concurrent.Executor executor29 = builder25.getcallbackExecutor();
        retrofit.client.Client.Provider provider30 = builder25.getclientProvider();
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder33 = builder31.setServer("hi!");
        java.util.concurrent.Executor executor34 = null;
        builder33.callbackExecutor = executor34;
        retrofit.RestAdapter restAdapter36 = builder33.build();
        retrofit.RestAdapter.Log log37 = restAdapter36.log;
        java.util.concurrent.Executor executor38 = restAdapter36.gethttpExecutor();
        retrofit.client.Client.Provider provider39 = restAdapter36.getclientProvider();
        builder25.setclientProvider(provider39);
        retrofit.RestAdapter.Builder builder41 = builder21.setClient(provider39);
        builder20.clientProvider = provider39;
        retrofit.RestAdapter.Builder builder43 = builder0.setClient(provider39);
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor45 = builder44.getcallbackExecutor();
        retrofit.client.Client.Provider provider46 = null;
        builder44.clientProvider = provider46;
        retrofit.Server server48 = null;
        builder44.server = server48;
        java.util.concurrent.Executor executor50 = builder44.gethttpExecutor();
        java.util.concurrent.Executor executor51 = builder44.gethttpExecutor();
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder54 = builder52.setServer("hi!");
        java.util.concurrent.Executor executor55 = null;
        builder54.callbackExecutor = executor55;
        retrofit.RestAdapter restAdapter57 = builder54.build();
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor59 = null;
        builder58.sethttpExecutor(executor59);
        retrofit.Profiler profiler61 = null;
        builder58.profiler = profiler61;
        retrofit.RestAdapter.Log log63 = builder58.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter64 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler65 = serializedObjectSupporter64.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder66 = builder58.setErrorHandler(errorHandler65);
        retrofit.RestAdapter.Builder builder67 = builder54.setErrorHandler(errorHandler65);
        java.util.concurrent.Executor executor68 = builder67.callbackExecutor;
        builder44.callbackExecutor = executor68;
        builder0.httpExecutor = executor68;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNull(converter12);
        org.junit.Assert.assertNotNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(gsonConverter15);
        org.junit.Assert.assertNotNull(gsonConverter16);
        org.junit.Assert.assertNotNull(server17);
        org.junit.Assert.assertNotNull(gsonConverter18);
        org.junit.Assert.assertNotNull(errorHandler19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(converter24);
        org.junit.Assert.assertNull(converter28);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(provider30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(restAdapter36);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNotNull(executor38);
        org.junit.Assert.assertNotNull(provider39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertNull(executor50);
        org.junit.Assert.assertNull(executor51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(restAdapter57);
        org.junit.Assert.assertNull(log63);
        org.junit.Assert.assertNotNull(errorHandler65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(executor68);
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0403");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider5 = builder0.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request7 = serializedObjectSupporter6.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler8 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        builder0.errorHandler = errorHandler8;
        retrofit.Server server10 = builder0.server;
        builder0.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor12 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder15 = builder13.setServer("hi!");
        java.util.concurrent.Executor executor16 = null;
        builder15.callbackExecutor = executor16;
        retrofit.RestAdapter restAdapter18 = builder15.build();
        retrofit.RestAdapter.Log log19 = restAdapter18.log;
        builder0.log = log19;
        log19.log("Retrofit-");
        log19.log("POST");
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(errorHandler8);
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertNotNull(requestInterceptor12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(restAdapter18);
        org.junit.Assert.assertNotNull(log19);
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0404");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter10.new RestHandler();
        java.util.concurrent.Executor executor14 = restAdapter10.getcallbackExecutor();
        retrofit.converter.Converter converter15 = restAdapter10.converter;
        retrofit.converter.Converter converter16 = restAdapter10.getconverter();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(converter15);
        org.junit.Assert.assertNull(converter16);
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0405");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        java.util.concurrent.Executor executor14 = restAdapter10.getcallbackExecutor();
        retrofit.Server server15 = null;
        retrofit.client.Client.Provider provider16 = null;
        java.util.concurrent.Executor executor17 = null;
        java.util.concurrent.Executor executor18 = null;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        retrofit.converter.Converter converter20 = null;
        retrofit.Profiler profiler21 = null;
        retrofit.ErrorHandler errorHandler22 = null;
        retrofit.RestAdapter.Log log23 = null;
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter(server15, provider16, executor17, executor18, requestInterceptor19, converter20, profiler21, errorHandler22, log23, logLevel24);
        retrofit.ErrorHandler errorHandler26 = restAdapter25.errorHandler;
        int int27 = restAdapter25.getLOG_CHUNK_SIZE();
        retrofit.Server server28 = restAdapter25.getserver();
        retrofit.client.Client.Provider provider29 = restAdapter25.clientProvider;
        retrofit.client.Client.Provider provider30 = restAdapter25.getclientProvider();
        java.lang.String str31 = restAdapter25.getIDLE_THREAD_NAME();
        retrofit.Server server32 = null;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Log log40 = null;
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log40, logLevel41);
        retrofit.RestAdapter.LogLevel logLevel43 = restAdapter42.logLevel;
        retrofit.ErrorHandler errorHandler44 = restAdapter42.geterrorHandler();
        java.util.concurrent.Executor executor45 = restAdapter42.getcallbackExecutor();
        retrofit.converter.Converter converter46 = restAdapter42.converter;
        retrofit.Server server47 = restAdapter42.getserver();
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter42.getLogLevel();
        restAdapter25.setLogLevel(logLevel48);
        restAdapter10.logLevel = logLevel48;
        retrofit.converter.Converter converter51 = restAdapter10.getconverter();
        java.lang.String str52 = restAdapter10.getIDLE_THREAD_NAME();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4000 + "'", int27 == 4000);
        org.junit.Assert.assertNull(server28);
        org.junit.Assert.assertNull(provider29);
        org.junit.Assert.assertNull(provider30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Retrofit-Idle" + "'", str31, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler44);
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertNull(converter46);
        org.junit.Assert.assertNull(server47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(converter51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Retrofit-Idle" + "'", str52, "Retrofit-Idle");
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0406");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.getrequestInterceptor();
        retrofit.RestAdapter.Log log15 = restAdapter10.log;
        retrofit.converter.Converter converter16 = restAdapter10.getconverter();
        int int17 = restAdapter10.getLOG_CHUNK_SIZE();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNull(log15);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4000 + "'", int17 == 4000);
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0407");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler13 = restAdapter10.geterrorHandler();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.getrequestInterceptor();
        int int15 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.client.Client.Provider provider16 = restAdapter10.getclientProvider();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4000 + "'", int15 == 4000);
        org.junit.Assert.assertNull(provider16);
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0408");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter10.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter14 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request15 = serializedObjectSupporter14.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter14.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter14.deserializeObjectConverter1();
        restHandler13.serializedObjectSupporter = serializedObjectSupporter14;
        retrofit.SerializedObjectSupporter serializedObjectSupporter19 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor20 = serializedObjectSupporter19.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter21 = serializedObjectSupporter19.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter19.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter23 = serializedObjectSupporter19.deserializeObjectConverter8();
        restHandler13.serializedObjectSupporter = serializedObjectSupporter19;
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor26 = serializedObjectSupporter25.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter27 = serializedObjectSupporter25.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter25.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter29 = serializedObjectSupporter25.deserializeObjectConverter8();
        restHandler13.serializedObjectSupporter = serializedObjectSupporter25;
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor32 = serializedObjectSupporter31.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter31.deserializeObjectConverter8();
        java.lang.String str34 = serializedObjectSupporter31.deserializeObjectString1();
        retrofit.client.Request request35 = serializedObjectSupporter31.deserializeObjectRequest5();
        java.lang.reflect.Method method36 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] {};
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj38 = restHandler13.invoke((java.lang.Object) serializedObjectSupporter31, method36, objArray37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(gsonConverter16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertNotNull(requestInterceptor20);
        org.junit.Assert.assertNotNull(gsonConverter21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(gsonConverter23);
        org.junit.Assert.assertNotNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(gsonConverter27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(gsonConverter29);
        org.junit.Assert.assertNotNull(requestInterceptor32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Retrofit-" + "'", str34, "Retrofit-");
        org.junit.Assert.assertNotNull(request35);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0409");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest8();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.RequestInterceptor requestInterceptor6 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(requestInterceptor6);
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0410");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.ErrorHandler errorHandler15 = restAdapter10.errorHandler;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(errorHandler15);
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0411");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        java.lang.String str13 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        retrofit.ErrorHandler errorHandler25 = restAdapter24.errorHandler;
        int int26 = restAdapter24.getLOG_CHUNK_SIZE();
        retrofit.RestAdapter.Log log27 = restAdapter24.log;
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter24.getLogLevel();
        restAdapter10.logLevel = logLevel28;
        retrofit.ErrorHandler errorHandler30 = restAdapter10.errorHandler;
        retrofit.client.Client.Provider provider31 = restAdapter10.clientProvider;
        java.lang.String str32 = restAdapter10.getIDLE_THREAD_NAME();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-Idle" + "'", str13, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4000 + "'", int26 == 4000);
        org.junit.Assert.assertNull(log27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler30);
        org.junit.Assert.assertNull(provider31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Retrofit-Idle" + "'", str32, "Retrofit-Idle");
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0412");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter8();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString3();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString4();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter8 = serializedObjectSupporter0.deserializeObjectLogLevel2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "http://example.com/" + "'", str5, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GET" + "'", str6, "GET");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "http://example.com/" + "'", str7, "http://example.com/");
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0413");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.RestAdapter restAdapter5 = builder2.build();
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.sethttpExecutor(executor7);
        retrofit.Profiler profiler9 = null;
        builder6.profiler = profiler9;
        retrofit.RestAdapter.Log log11 = builder6.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler13 = serializedObjectSupporter12.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder14 = builder6.setErrorHandler(errorHandler13);
        retrofit.RestAdapter.Builder builder15 = builder2.setErrorHandler(errorHandler13);
        java.util.concurrent.Executor executor16 = builder15.callbackExecutor;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor18 = null;
        builder17.sethttpExecutor(executor18);
        retrofit.Profiler profiler20 = null;
        builder17.profiler = profiler20;
        retrofit.Server server22 = builder17.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter23 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor24 = serializedObjectSupporter23.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter25 = serializedObjectSupporter23.deserializeObjectConverter7();
        retrofit.client.Request request26 = serializedObjectSupporter23.deserializeObjectRequest1();
        builder17.serializedObjectSupporter = serializedObjectSupporter23;
        java.lang.String str28 = serializedObjectSupporter23.deserializeObjectString2();
        retrofit.ErrorHandler errorHandler29 = serializedObjectSupporter23.deserializeObjectErrorHandler1();
        builder15.errorHandler = errorHandler29;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder33 = builder31.setServer("hi!");
        retrofit.client.Client.Provider provider34 = builder31.clientProvider;
        retrofit.RestAdapter.Log log35 = null;
        builder31.log = log35;
        java.util.concurrent.Executor executor37 = builder31.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor39 = builder38.getcallbackExecutor();
        retrofit.client.Client.Provider provider40 = null;
        builder38.clientProvider = provider40;
        retrofit.SerializedObjectSupporter serializedObjectSupporter42 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor43 = serializedObjectSupporter42.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter44 = serializedObjectSupporter42.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter45 = serializedObjectSupporter42.deserializeObjectConverter5();
        retrofit.client.Request request46 = serializedObjectSupporter42.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter47 = serializedObjectSupporter42.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter48 = serializedObjectSupporter42.deserializeObjectConverter6();
        retrofit.RestAdapter.Builder builder49 = builder38.setConverter((retrofit.converter.Converter) gsonConverter48);
        builder31.converter = gsonConverter48;
        retrofit.ErrorHandler errorHandler51 = builder31.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter52 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler53 = serializedObjectSupporter52.deserializeObjectErrorHandler1();
        retrofit.Server server54 = serializedObjectSupporter52.deserializeObjectServer1();
        builder31.server = server54;
        retrofit.RestAdapter.Builder builder56 = builder15.setServer(server54);
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor58 = null;
        builder57.sethttpExecutor(executor58);
        retrofit.converter.Converter converter60 = builder57.converter;
        java.util.concurrent.Executor executor61 = builder57.getcallbackExecutor();
        retrofit.client.Client.Provider provider62 = builder57.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter63 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request64 = serializedObjectSupporter63.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler65 = serializedObjectSupporter63.deserializeObjectErrorHandler1();
        builder57.errorHandler = errorHandler65;
        retrofit.Server server67 = builder57.server;
        builder57.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor69 = builder57.requestInterceptor;
        java.util.concurrent.Executor executor70 = builder57.getcallbackExecutor();
        builder15.setcallbackExecutor(executor70);
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor73 = builder72.getcallbackExecutor();
        retrofit.client.Client.Provider provider74 = null;
        builder72.clientProvider = provider74;
        java.util.concurrent.Executor executor76 = builder72.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter77 = new retrofit.SerializedObjectSupporter();
        java.lang.String str78 = serializedObjectSupporter77.deserializeObjectString2();
        java.lang.String str79 = serializedObjectSupporter77.deserializeObjectString1();
        retrofit.RequestInterceptor requestInterceptor80 = serializedObjectSupporter77.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder81 = builder72.setRequestInterceptor(requestInterceptor80);
        retrofit.RestAdapter.Builder builder82 = builder15.setRequestInterceptor(requestInterceptor80);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(restAdapter5);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertNotNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(executor16);
        org.junit.Assert.assertNull(server22);
        org.junit.Assert.assertNotNull(requestInterceptor24);
        org.junit.Assert.assertNotNull(gsonConverter25);
        org.junit.Assert.assertNotNull(request26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Retrofit-Idle" + "'", str28, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(provider34);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNotNull(requestInterceptor43);
        org.junit.Assert.assertNotNull(gsonConverter44);
        org.junit.Assert.assertNotNull(gsonConverter45);
        org.junit.Assert.assertNotNull(request46);
        org.junit.Assert.assertNotNull(gsonConverter47);
        org.junit.Assert.assertNotNull(gsonConverter48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(errorHandler51);
        org.junit.Assert.assertNotNull(errorHandler53);
        org.junit.Assert.assertNotNull(server54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(converter60);
        org.junit.Assert.assertNull(executor61);
        org.junit.Assert.assertNull(provider62);
        org.junit.Assert.assertNotNull(request64);
        org.junit.Assert.assertNotNull(errorHandler65);
        org.junit.Assert.assertNull(server67);
        org.junit.Assert.assertNotNull(requestInterceptor69);
        org.junit.Assert.assertNotNull(executor70);
        org.junit.Assert.assertNull(executor73);
        org.junit.Assert.assertNull(executor76);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Retrofit-Idle" + "'", str78, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Retrofit-" + "'", str79, "Retrofit-");
        org.junit.Assert.assertNotNull(requestInterceptor80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0414");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.logLevel = logLevel23;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter10.setLogLevel(logLevel26);
        retrofit.Server server28 = restAdapter10.getserver();
        retrofit.converter.Converter converter29 = restAdapter10.getconverter();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(server28);
        org.junit.Assert.assertNull(converter29);
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0415");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter10.logLevel;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.geterrorHandler();
        java.lang.String str13 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler14 = restAdapter10.geterrorHandler();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-Idle" + "'", str13, "Retrofit-Idle");
        org.junit.Assert.assertNull(errorHandler14);
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0416");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString3();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString4();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter2();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString1();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter0.deserializeObjectConverter3();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "GET" + "'", str1, "GET");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "http://example.com/" + "'", str2, "http://example.com/");
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Retrofit-" + "'", str6, "Retrofit-");
        org.junit.Assert.assertNotNull(gsonConverter7);
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0417");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.sethttpExecutor(executor7);
        retrofit.Profiler profiler9 = null;
        builder6.profiler = profiler9;
        retrofit.RestAdapter.LogLevel logLevel11 = builder6.logLevel;
        retrofit.RestAdapter.Builder builder12 = builder0.setLogLevel(logLevel11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor14 = null;
        builder13.sethttpExecutor(executor14);
        retrofit.converter.Converter converter16 = builder13.converter;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        java.util.concurrent.Executor executor18 = builder13.callbackExecutor;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor20 = null;
        builder19.sethttpExecutor(executor20);
        retrofit.Profiler profiler22 = null;
        builder19.profiler = profiler22;
        retrofit.Server server24 = builder19.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor26 = serializedObjectSupporter25.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter27 = serializedObjectSupporter25.deserializeObjectConverter7();
        retrofit.client.Request request28 = serializedObjectSupporter25.deserializeObjectRequest1();
        builder19.serializedObjectSupporter = serializedObjectSupporter25;
        builder19.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder33 = builder31.setServer("hi!");
        java.util.concurrent.Executor executor34 = null;
        builder33.callbackExecutor = executor34;
        retrofit.RestAdapter restAdapter36 = builder33.build();
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor38 = null;
        builder37.sethttpExecutor(executor38);
        retrofit.Profiler profiler40 = null;
        builder37.profiler = profiler40;
        retrofit.RestAdapter.Log log42 = builder37.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter43 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler44 = serializedObjectSupporter43.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder45 = builder37.setErrorHandler(errorHandler44);
        retrofit.RestAdapter.Builder builder46 = builder33.setErrorHandler(errorHandler44);
        java.util.concurrent.Executor executor47 = builder46.callbackExecutor;
        builder19.setcallbackExecutor(executor47);
        builder13.httpExecutor = executor47;
        builder0.httpExecutor = executor47;
        builder0.ensureSaneDefaults();
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(server24);
        org.junit.Assert.assertNotNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(gsonConverter27);
        org.junit.Assert.assertNotNull(request28);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(restAdapter36);
        org.junit.Assert.assertNull(log42);
        org.junit.Assert.assertNotNull(errorHandler44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(executor47);
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0418");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor13 = restAdapter10.getrequestInterceptor();
        retrofit.converter.Converter converter14 = restAdapter10.getconverter();
        retrofit.RestAdapter.LogLevel logLevel15 = restAdapter10.logLevel;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(requestInterceptor13);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0419");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        java.lang.String str13 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        retrofit.ErrorHandler errorHandler25 = restAdapter24.errorHandler;
        int int26 = restAdapter24.getLOG_CHUNK_SIZE();
        retrofit.RestAdapter.Log log27 = restAdapter24.log;
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter24.getLogLevel();
        restAdapter10.logLevel = logLevel28;
        retrofit.ErrorHandler errorHandler30 = restAdapter10.errorHandler;
        retrofit.client.Client.Provider provider31 = restAdapter10.clientProvider;
        retrofit.converter.Converter converter32 = restAdapter10.getconverter();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-Idle" + "'", str13, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4000 + "'", int26 == 4000);
        org.junit.Assert.assertNull(log27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler30);
        org.junit.Assert.assertNull(provider31);
        org.junit.Assert.assertNull(converter32);
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0420");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        java.util.List<retrofit.client.Header> headerList4 = request3.getHeaders();
        java.lang.String str5 = request3.getMethod();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(headerList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GET" + "'", str5, "GET");
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0421");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = null;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter13;
        retrofit.client.Client.Provider provider15 = restAdapter10.getclientProvider();
        retrofit.ErrorHandler errorHandler16 = restAdapter10.geterrorHandler();
        retrofit.RequestInterceptor requestInterceptor17 = restAdapter10.requestInterceptor;
        retrofit.client.Client.Provider provider18 = restAdapter10.clientProvider;
        retrofit.RestAdapter.Log log19 = restAdapter10.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request21 = serializedObjectSupporter20.deserializeObjectRequest1();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter20;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNull(requestInterceptor17);
        org.junit.Assert.assertNull(provider18);
        org.junit.Assert.assertNull(log19);
        org.junit.Assert.assertNotNull(request21);
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0422");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.logLevel = logLevel23;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter10.setLogLevel(logLevel26);
        retrofit.Server server28 = restAdapter10.getserver();
        retrofit.RestAdapter.Log log29 = restAdapter10.log;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(server28);
        org.junit.Assert.assertNull(log29);
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0423");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor5 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.sethttpExecutor(executor7);
        retrofit.converter.Converter converter9 = builder6.converter;
        java.util.concurrent.Executor executor10 = builder6.getcallbackExecutor();
        retrofit.client.Client.Provider provider11 = builder6.getclientProvider();
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder14 = builder12.setServer("hi!");
        java.util.concurrent.Executor executor15 = null;
        builder14.callbackExecutor = executor15;
        retrofit.RestAdapter restAdapter17 = builder14.build();
        retrofit.RestAdapter.Log log18 = restAdapter17.log;
        java.util.concurrent.Executor executor19 = restAdapter17.gethttpExecutor();
        retrofit.client.Client.Provider provider20 = restAdapter17.getclientProvider();
        builder6.setclientProvider(provider20);
        retrofit.RestAdapter.Builder builder22 = builder0.setClient(provider20);
        retrofit.Server server23 = null;
        retrofit.client.Client.Provider provider24 = null;
        java.util.concurrent.Executor executor25 = null;
        java.util.concurrent.Executor executor26 = null;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        retrofit.converter.Converter converter28 = null;
        retrofit.Profiler profiler29 = null;
        retrofit.ErrorHandler errorHandler30 = null;
        retrofit.RestAdapter.Log log31 = null;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter(server23, provider24, executor25, executor26, requestInterceptor27, converter28, profiler29, errorHandler30, log31, logLevel32);
        retrofit.ErrorHandler errorHandler34 = restAdapter33.errorHandler;
        int int35 = restAdapter33.getLOG_CHUNK_SIZE();
        retrofit.Server server36 = restAdapter33.getserver();
        retrofit.Server server37 = null;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Log log45 = null;
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log45, logLevel46);
        restAdapter33.logLevel = logLevel46;
        retrofit.SerializedObjectSupporter serializedObjectSupporter49 = restAdapter33.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter50 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter51 = serializedObjectSupporter50.deserializeObjectConverter2();
        retrofit.client.Request request52 = serializedObjectSupporter50.deserializeObjectRequest7();
        retrofit.client.Request request53 = serializedObjectSupporter50.deserializeObjectRequest2();
        retrofit.client.Request request54 = serializedObjectSupporter50.deserializeObjectRequest3();
        restAdapter33.serializedObjectSupporter = serializedObjectSupporter50;
        retrofit.converter.GsonConverter gsonConverter56 = serializedObjectSupporter50.deserializeObjectConverter7();
        retrofit.RestAdapter.Builder builder57 = builder22.setConverter((retrofit.converter.Converter) gsonConverter56);
        java.lang.Class<?> wildcardClass58 = gsonConverter56.getClass();
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertNull(converter9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(restAdapter17);
        org.junit.Assert.assertNotNull(log18);
        org.junit.Assert.assertNotNull(executor19);
        org.junit.Assert.assertNotNull(provider20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4000 + "'", int35 == 4000);
        org.junit.Assert.assertNull(server36);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(serializedObjectSupporter49);
        org.junit.Assert.assertNotNull(gsonConverter51);
        org.junit.Assert.assertNotNull(request52);
        org.junit.Assert.assertNotNull(request53);
        org.junit.Assert.assertNotNull(request54);
        org.junit.Assert.assertNotNull(gsonConverter56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0424");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.SerializedObjectSupporter serializedObjectSupporter5 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor6 = serializedObjectSupporter5.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder7 = builder2.setRequestInterceptor(requestInterceptor6);
        retrofit.SerializedObjectSupporter serializedObjectSupporter8 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request9 = serializedObjectSupporter8.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter10 = serializedObjectSupporter8.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter11 = serializedObjectSupporter8.deserializeObjectConverter1();
        builder7.converter = gsonConverter11;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = null;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel22);
        retrofit.ErrorHandler errorHandler24 = restAdapter23.errorHandler;
        int int25 = restAdapter23.getLOG_CHUNK_SIZE();
        retrofit.Server server26 = restAdapter23.getserver();
        java.util.concurrent.Executor executor27 = restAdapter23.getcallbackExecutor();
        retrofit.Server server28 = null;
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.RestAdapter.Log log36 = null;
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter(server28, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log36, logLevel37);
        retrofit.ErrorHandler errorHandler39 = restAdapter38.errorHandler;
        int int40 = restAdapter38.getLOG_CHUNK_SIZE();
        retrofit.Server server41 = restAdapter38.getserver();
        retrofit.client.Client.Provider provider42 = restAdapter38.clientProvider;
        retrofit.client.Client.Provider provider43 = restAdapter38.getclientProvider();
        java.lang.String str44 = restAdapter38.getIDLE_THREAD_NAME();
        retrofit.Server server45 = null;
        retrofit.client.Client.Provider provider46 = null;
        java.util.concurrent.Executor executor47 = null;
        java.util.concurrent.Executor executor48 = null;
        retrofit.RequestInterceptor requestInterceptor49 = null;
        retrofit.converter.Converter converter50 = null;
        retrofit.Profiler profiler51 = null;
        retrofit.ErrorHandler errorHandler52 = null;
        retrofit.RestAdapter.Log log53 = null;
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter(server45, provider46, executor47, executor48, requestInterceptor49, converter50, profiler51, errorHandler52, log53, logLevel54);
        retrofit.RestAdapter.LogLevel logLevel56 = restAdapter55.logLevel;
        retrofit.ErrorHandler errorHandler57 = restAdapter55.geterrorHandler();
        java.util.concurrent.Executor executor58 = restAdapter55.getcallbackExecutor();
        retrofit.converter.Converter converter59 = restAdapter55.converter;
        retrofit.Server server60 = restAdapter55.getserver();
        retrofit.RestAdapter.LogLevel logLevel61 = restAdapter55.getLogLevel();
        restAdapter38.setLogLevel(logLevel61);
        restAdapter23.logLevel = logLevel61;
        retrofit.client.Client.Provider provider64 = restAdapter23.getclientProvider();
        retrofit.RestAdapter.LogLevel logLevel65 = restAdapter23.getLogLevel();
        retrofit.RestAdapter.Builder builder66 = builder7.setLogLevel(logLevel65);
        retrofit.ErrorHandler errorHandler67 = builder66.errorHandler;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNotNull(gsonConverter10);
        org.junit.Assert.assertNotNull(gsonConverter11);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4000 + "'", int25 == 4000);
        org.junit.Assert.assertNull(server26);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 4000 + "'", int40 == 4000);
        org.junit.Assert.assertNull(server41);
        org.junit.Assert.assertNull(provider42);
        org.junit.Assert.assertNull(provider43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Retrofit-Idle" + "'", str44, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler57);
        org.junit.Assert.assertNull(executor58);
        org.junit.Assert.assertNull(converter59);
        org.junit.Assert.assertNull(server60);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider64);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(errorHandler67);
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0425");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder7 = builder5.setServer("hi!");
        retrofit.client.Client.Provider provider8 = builder5.clientProvider;
        java.util.concurrent.Executor executor9 = null;
        builder5.setcallbackExecutor(executor9);
        retrofit.RestAdapter.Log log11 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder12 = builder5.setLog(log11);
        retrofit.RestAdapter.Builder builder13 = builder0.setLog(log11);
        retrofit.client.Client client14 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder15 = builder13.setClient(client14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNotNull(log11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0426");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.getrequestInterceptor();
        retrofit.RestAdapter.Log log15 = restAdapter10.log;
        retrofit.converter.Converter converter16 = restAdapter10.converter;
        retrofit.Server server17 = restAdapter10.server;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNull(log15);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(server17);
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0427");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        java.util.concurrent.Executor executor3 = builder0.httpExecutor;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter5 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor6 = serializedObjectSupporter5.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter5.deserializeObjectConverter8();
        java.lang.String str8 = serializedObjectSupporter5.deserializeObjectString2();
        builder0.serializedObjectSupporter = serializedObjectSupporter5;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor11 = null;
        builder10.sethttpExecutor(executor11);
        retrofit.Profiler profiler13 = null;
        builder10.profiler = profiler13;
        retrofit.Server server15 = builder10.server;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder18 = builder16.setServer("hi!");
        retrofit.client.Client.Provider provider19 = builder16.clientProvider;
        retrofit.RequestInterceptor requestInterceptor20 = builder16.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean22 = logLevel21.log();
        retrofit.RestAdapter.Builder builder23 = builder16.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = builder24.getcallbackExecutor();
        retrofit.client.Client.Provider provider26 = null;
        builder24.clientProvider = provider26;
        retrofit.Server server28 = null;
        builder24.server = server28;
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        builder24.log = log30;
        builder16.log = log30;
        builder10.log = log30;
        retrofit.RestAdapter.Builder builder34 = builder0.setLog(log30);
        java.util.concurrent.Executor executor35 = builder0.getcallbackExecutor();
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNotNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Retrofit-Idle" + "'", str8, "Retrofit-Idle");
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(provider19);
        org.junit.Assert.assertNull(requestInterceptor20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(executor35);
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0428");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.RestAdapter restAdapter5 = builder2.build();
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.sethttpExecutor(executor7);
        retrofit.Profiler profiler9 = null;
        builder6.profiler = profiler9;
        retrofit.RestAdapter.Log log11 = builder6.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler13 = serializedObjectSupporter12.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder14 = builder6.setErrorHandler(errorHandler13);
        retrofit.RestAdapter.Builder builder15 = builder2.setErrorHandler(errorHandler13);
        java.util.concurrent.Executor executor16 = builder15.callbackExecutor;
        retrofit.Server server17 = null;
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Log log25 = null;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server17, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log25, logLevel26);
        retrofit.ErrorHandler errorHandler28 = restAdapter27.errorHandler;
        int int29 = restAdapter27.getLOG_CHUNK_SIZE();
        retrofit.Server server30 = restAdapter27.getserver();
        retrofit.Server server31 = null;
        retrofit.client.Client.Provider provider32 = null;
        java.util.concurrent.Executor executor33 = null;
        java.util.concurrent.Executor executor34 = null;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        retrofit.converter.Converter converter36 = null;
        retrofit.Profiler profiler37 = null;
        retrofit.ErrorHandler errorHandler38 = null;
        retrofit.RestAdapter.Log log39 = null;
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter(server31, provider32, executor33, executor34, requestInterceptor35, converter36, profiler37, errorHandler38, log39, logLevel40);
        restAdapter27.logLevel = logLevel40;
        retrofit.SerializedObjectSupporter serializedObjectSupporter43 = restAdapter27.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter44 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter45 = serializedObjectSupporter44.deserializeObjectConverter2();
        retrofit.client.Request request46 = serializedObjectSupporter44.deserializeObjectRequest7();
        retrofit.client.Request request47 = serializedObjectSupporter44.deserializeObjectRequest2();
        retrofit.client.Request request48 = serializedObjectSupporter44.deserializeObjectRequest3();
        restAdapter27.serializedObjectSupporter = serializedObjectSupporter44;
        retrofit.Server server50 = serializedObjectSupporter44.deserializeObjectServer1();
        retrofit.converter.GsonConverter gsonConverter51 = serializedObjectSupporter44.deserializeObjectConverter2();
        builder15.converter = gsonConverter51;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(restAdapter5);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertNotNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(executor16);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4000 + "'", int29 == 4000);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(serializedObjectSupporter43);
        org.junit.Assert.assertNotNull(gsonConverter45);
        org.junit.Assert.assertNotNull(request46);
        org.junit.Assert.assertNotNull(request47);
        org.junit.Assert.assertNotNull(request48);
        org.junit.Assert.assertNotNull(server50);
        org.junit.Assert.assertNotNull(gsonConverter51);
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0429");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RestAdapter.Log log4 = null;
        builder0.log = log4;
        java.util.concurrent.Executor executor6 = builder0.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = builder7.getcallbackExecutor();
        retrofit.client.Client.Provider provider9 = null;
        builder7.clientProvider = provider9;
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor12 = serializedObjectSupporter11.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter13 = serializedObjectSupporter11.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter11.deserializeObjectConverter5();
        retrofit.client.Request request15 = serializedObjectSupporter11.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter11.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter11.deserializeObjectConverter6();
        retrofit.RestAdapter.Builder builder18 = builder7.setConverter((retrofit.converter.Converter) gsonConverter17);
        builder0.converter = gsonConverter17;
        retrofit.ErrorHandler errorHandler20 = builder0.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter21 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter21.deserializeObjectConverter2();
        retrofit.client.Request request23 = serializedObjectSupporter21.deserializeObjectRequest7();
        retrofit.client.Request request24 = serializedObjectSupporter21.deserializeObjectRequest2();
        retrofit.client.Request request25 = serializedObjectSupporter21.deserializeObjectRequest3();
        retrofit.converter.GsonConverter gsonConverter26 = serializedObjectSupporter21.deserializeObjectConverter6();
        retrofit.RequestInterceptor requestInterceptor27 = serializedObjectSupporter21.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder28 = builder0.setRequestInterceptor(requestInterceptor27);
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request30 = serializedObjectSupporter29.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter31 = serializedObjectSupporter29.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter32 = serializedObjectSupporter29.deserializeObjectConverter1();
        retrofit.RestAdapter.Builder builder33 = builder28.setConverter((retrofit.converter.Converter) gsonConverter32);
        retrofit.Profiler profiler34 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder35 = builder28.setProfiler(profiler34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNotNull(requestInterceptor12);
        org.junit.Assert.assertNotNull(gsonConverter13);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(gsonConverter16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertNotNull(request24);
        org.junit.Assert.assertNotNull(request25);
        org.junit.Assert.assertNotNull(gsonConverter26);
        org.junit.Assert.assertNotNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(request30);
        org.junit.Assert.assertNotNull(gsonConverter31);
        org.junit.Assert.assertNotNull(gsonConverter32);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0430");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString2();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter2 = serializedObjectSupporter0.deserializeObjectLogLevel2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Retrofit-Idle" + "'", str1, "Retrofit-Idle");
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0431");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter10.logLevel;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        retrofit.converter.Converter converter14 = restAdapter10.converter;
        retrofit.Server server15 = restAdapter10.getserver();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter10.getLogLevel();
        retrofit.ErrorHandler errorHandler17 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor18 = restAdapter10.gethttpExecutor();
        retrofit.ErrorHandler errorHandler19 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor20 = restAdapter10.httpExecutor;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(executor20);
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0432");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.converter.Converter converter15 = restAdapter10.converter;
        java.util.concurrent.Executor executor16 = restAdapter10.gethttpExecutor();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(converter15);
        org.junit.Assert.assertNull(executor16);
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0433");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = null;
        builder0.serializedObjectSupporter = serializedObjectSupporter1;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor4 = null;
        builder3.sethttpExecutor(executor4);
        retrofit.Profiler profiler6 = null;
        builder3.profiler = profiler6;
        retrofit.RestAdapter.LogLevel logLevel8 = builder3.logLevel;
        java.util.concurrent.Executor executor9 = null;
        builder3.sethttpExecutor(executor9);
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder13 = builder11.setServer("hi!");
        java.util.concurrent.Executor executor14 = null;
        builder13.callbackExecutor = executor14;
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor17 = serializedObjectSupporter16.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder18 = builder13.setRequestInterceptor(requestInterceptor17);
        retrofit.RestAdapter.Builder builder19 = builder3.setRequestInterceptor(requestInterceptor17);
        retrofit.RestAdapter.Builder builder20 = builder0.setRequestInterceptor(requestInterceptor17);
        retrofit.ErrorHandler errorHandler21 = builder20.errorHandler;
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(requestInterceptor17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(errorHandler21);
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0434");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest8();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter4();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter6 = serializedObjectSupporter0.deserializeObjectLogLevel2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Retrofit-Idle" + "'", str4, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter5);
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0435");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider5 = builder0.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request7 = serializedObjectSupporter6.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler8 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        builder0.errorHandler = errorHandler8;
        retrofit.converter.Converter converter10 = builder0.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        java.lang.String str12 = serializedObjectSupporter11.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter13 = serializedObjectSupporter11.deserializeObjectConverter2();
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter11.deserializeObjectConverter7();
        retrofit.RestAdapter.Builder builder15 = builder0.setConverter((retrofit.converter.Converter) gsonConverter14);
        retrofit.client.Client.Provider provider16 = null;
        builder15.setclientProvider(provider16);
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter19 = null;
        builder18.serializedObjectSupporter = serializedObjectSupporter19;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor22 = null;
        builder21.sethttpExecutor(executor22);
        retrofit.Profiler profiler24 = null;
        builder21.profiler = profiler24;
        retrofit.RestAdapter.LogLevel logLevel26 = builder21.logLevel;
        java.util.concurrent.Executor executor27 = null;
        builder21.sethttpExecutor(executor27);
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder31 = builder29.setServer("hi!");
        java.util.concurrent.Executor executor32 = null;
        builder31.callbackExecutor = executor32;
        retrofit.SerializedObjectSupporter serializedObjectSupporter34 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor35 = serializedObjectSupporter34.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder36 = builder31.setRequestInterceptor(requestInterceptor35);
        retrofit.RestAdapter.Builder builder37 = builder21.setRequestInterceptor(requestInterceptor35);
        retrofit.RestAdapter.Builder builder38 = builder18.setRequestInterceptor(requestInterceptor35);
        retrofit.RestAdapter.Builder builder39 = builder15.setRequestInterceptor(requestInterceptor35);
        java.lang.Class<?> wildcardClass40 = requestInterceptor35.getClass();
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(errorHandler8);
        org.junit.Assert.assertNull(converter10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter13);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(requestInterceptor35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0436");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        java.lang.String str13 = restAdapter10.getIDLE_THREAD_NAME();
        java.util.concurrent.Executor executor14 = restAdapter10.httpExecutor;
        java.lang.String str15 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = restAdapter10.serializedObjectSupporter;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler18 = builder17.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter19 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request20 = serializedObjectSupporter19.deserializeObjectRequest6();
        builder17.serializedObjectSupporter = serializedObjectSupporter19;
        java.lang.String str22 = serializedObjectSupporter19.deserializeObjectString2();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter19;
        java.util.concurrent.Executor executor24 = restAdapter10.callbackExecutor;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-Idle" + "'", str13, "Retrofit-Idle");
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Retrofit-Idle" + "'", str15, "Retrofit-Idle");
        org.junit.Assert.assertNull(serializedObjectSupporter16);
        org.junit.Assert.assertNull(errorHandler18);
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Retrofit-Idle" + "'", str22, "Retrofit-Idle");
        org.junit.Assert.assertNull(executor24);
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0437");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter6();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString4();
        retrofit.client.Request request6 = serializedObjectSupporter0.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter0.deserializeObjectConverter8();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "http://example.com/" + "'", str5, "http://example.com/");
        org.junit.Assert.assertNotNull(request6);
        org.junit.Assert.assertNotNull(gsonConverter7);
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0438");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server4 = null;
        builder0.server = server4;
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        builder0.log = log6;
        retrofit.converter.Converter converter8 = builder0.converter;
        retrofit.RestAdapter.LogLevel logLevel9 = builder0.logLevel;
        boolean boolean10 = logLevel9.log();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0439");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.client.Client.Provider provider15 = restAdapter10.getclientProvider();
        java.lang.String str16 = restAdapter10.getIDLE_THREAD_NAME();
        java.lang.String str17 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter10.new RestHandler();
        java.lang.Throwable throwable19 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter10.logException(throwable19, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Retrofit-Idle" + "'", str16, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-Idle" + "'", str17, "Retrofit-Idle");
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0440");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest3();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString2();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Retrofit-Idle" + "'", str3, "Retrofit-Idle");
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0441");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter1 = serializedObjectSupporter0.deserializeObjectConverter2();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest3();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.RequestInterceptor requestInterceptor6 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.mime.TypedString typedString7 = serializedObjectSupporter0.deserializeObjectTypedOutput2();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter8 = serializedObjectSupporter0.deserializeObjectLogLevel1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(gsonConverter1);
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(typedString7);
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0442");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler2 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.mime.TypedString typedString3 = serializedObjectSupporter0.deserializeObjectTypedOutput2();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest3();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString4();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(errorHandler2);
        org.junit.Assert.assertNotNull(typedString3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "http://example.com/" + "'", str5, "http://example.com/");
    }

    @Test
    public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0443");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter10.logLevel;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0444");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        java.util.concurrent.Executor executor5 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.sethttpExecutor(executor7);
        retrofit.Profiler profiler9 = null;
        builder6.profiler = profiler9;
        retrofit.Server server11 = builder6.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor13 = serializedObjectSupporter12.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter12.deserializeObjectConverter7();
        retrofit.client.Request request15 = serializedObjectSupporter12.deserializeObjectRequest1();
        builder6.serializedObjectSupporter = serializedObjectSupporter12;
        builder6.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder20 = builder18.setServer("hi!");
        java.util.concurrent.Executor executor21 = null;
        builder20.callbackExecutor = executor21;
        retrofit.RestAdapter restAdapter23 = builder20.build();
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = null;
        builder24.sethttpExecutor(executor25);
        retrofit.Profiler profiler27 = null;
        builder24.profiler = profiler27;
        retrofit.RestAdapter.Log log29 = builder24.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler31 = serializedObjectSupporter30.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder32 = builder24.setErrorHandler(errorHandler31);
        retrofit.RestAdapter.Builder builder33 = builder20.setErrorHandler(errorHandler31);
        java.util.concurrent.Executor executor34 = builder33.callbackExecutor;
        builder6.setcallbackExecutor(executor34);
        builder0.httpExecutor = executor34;
        retrofit.SerializedObjectSupporter serializedObjectSupporter37 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor38 = serializedObjectSupporter37.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter39 = serializedObjectSupporter37.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter40 = serializedObjectSupporter37.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter41 = serializedObjectSupporter37.deserializeObjectConverter8();
        retrofit.client.Request request42 = serializedObjectSupporter37.deserializeObjectRequest5();
        retrofit.Server server43 = serializedObjectSupporter37.deserializeObjectServer1();
        builder0.server = server43;
        retrofit.SerializedObjectSupporter serializedObjectSupporter45 = new retrofit.SerializedObjectSupporter();
        java.lang.String str46 = serializedObjectSupporter45.deserializeObjectString3();
        java.lang.String str47 = serializedObjectSupporter45.deserializeObjectString4();
        retrofit.client.Request request48 = serializedObjectSupporter45.deserializeObjectRequest2();
        retrofit.client.Request request49 = serializedObjectSupporter45.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter50 = serializedObjectSupporter45.deserializeObjectConverter2();
        builder0.converter = gsonConverter50;
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(server11);
        org.junit.Assert.assertNotNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(restAdapter23);
        org.junit.Assert.assertNull(log29);
        org.junit.Assert.assertNotNull(errorHandler31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(executor34);
        org.junit.Assert.assertNotNull(requestInterceptor38);
        org.junit.Assert.assertNotNull(gsonConverter39);
        org.junit.Assert.assertNotNull(gsonConverter40);
        org.junit.Assert.assertNotNull(gsonConverter41);
        org.junit.Assert.assertNotNull(request42);
        org.junit.Assert.assertNotNull(server43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "GET" + "'", str46, "GET");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "http://example.com/" + "'", str47, "http://example.com/");
        org.junit.Assert.assertNotNull(request48);
        org.junit.Assert.assertNotNull(request49);
        org.junit.Assert.assertNotNull(gsonConverter50);
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0445");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("hi!");
        retrofit.client.Client.Provider provider9 = builder6.clientProvider;
        retrofit.RequestInterceptor requestInterceptor10 = builder6.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean12 = logLevel11.log();
        retrofit.RestAdapter.Builder builder13 = builder6.setLogLevel(logLevel11);
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = builder14.getcallbackExecutor();
        retrofit.client.Client.Provider provider16 = null;
        builder14.clientProvider = provider16;
        retrofit.Server server18 = null;
        builder14.server = server18;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        builder14.log = log20;
        builder6.log = log20;
        builder0.log = log20;
        retrofit.RestAdapter.Builder builder25 = builder0.setServer("GET");
        java.util.concurrent.Executor executor26 = builder25.gethttpExecutor();
        retrofit.RequestInterceptor requestInterceptor27 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder28 = builder25.setRequestInterceptor(requestInterceptor27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Request interceptor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(provider9);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(executor26);
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0446");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter7();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(gsonConverter4);
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0447");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = builder0.profiler;
        retrofit.client.Client.Provider provider4 = builder0.clientProvider;
        retrofit.SerializedObjectSupporter serializedObjectSupporter5 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter5.deserializeObjectConverter2();
        retrofit.client.Request request7 = serializedObjectSupporter5.deserializeObjectRequest7();
        retrofit.client.Request request8 = serializedObjectSupporter5.deserializeObjectRequest2();
        retrofit.client.Request request9 = serializedObjectSupporter5.deserializeObjectRequest3();
        java.lang.String str10 = serializedObjectSupporter5.deserializeObjectString4();
        builder0.serializedObjectSupporter = serializedObjectSupporter5;
        retrofit.client.Request request12 = serializedObjectSupporter5.deserializeObjectRequest1();
        retrofit.mime.TypedOutput typedOutput13 = request12.getBody();
        java.util.List<retrofit.client.Header> headerList14 = request12.headers;
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(provider4);
        org.junit.Assert.assertNotNull(gsonConverter6);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(request8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "http://example.com/" + "'", str10, "http://example.com/");
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNull(typedOutput13);
        org.junit.Assert.assertNotNull(headerList14);
    }

    @Test
    public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0448");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor5 = null;
        builder4.sethttpExecutor(executor5);
        retrofit.converter.Converter converter7 = builder4.converter;
        java.util.concurrent.Executor executor8 = builder4.getcallbackExecutor();
        retrofit.client.Client.Provider provider9 = builder4.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter10 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request11 = serializedObjectSupporter10.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler12 = serializedObjectSupporter10.deserializeObjectErrorHandler1();
        builder4.errorHandler = errorHandler12;
        retrofit.Server server14 = builder4.server;
        builder4.ensureSaneDefaults();
        retrofit.client.Client.Provider provider16 = builder4.clientProvider;
        builder0.clientProvider = provider16;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(provider9);
        org.junit.Assert.assertNotNull(request11);
        org.junit.Assert.assertNotNull(errorHandler12);
        org.junit.Assert.assertNull(server14);
        org.junit.Assert.assertNotNull(provider16);
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0449");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter3();
        retrofit.client.Request request6 = serializedObjectSupporter0.deserializeObjectRequest4();
        retrofit.client.Request request7 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.mime.TypedOutput typedOutput8 = request7.getBody();
        java.lang.String str9 = request7.url;
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(request6);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNull(typedOutput8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "http://example.com/" + "'", str9, "http://example.com/");
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0450");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        java.util.concurrent.Executor executor4 = null;
        builder0.setcallbackExecutor(executor4);
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder9 = builder7.setServer("hi!");
        java.util.concurrent.Executor executor10 = null;
        builder9.callbackExecutor = executor10;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor13 = serializedObjectSupporter12.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder14 = builder9.setRequestInterceptor(requestInterceptor13);
        retrofit.RestAdapter.Builder builder15 = builder0.setRequestInterceptor(requestInterceptor13);
        retrofit.client.Client client16 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder17 = builder15.setClient(client16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0451");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = null;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter13;
        java.util.concurrent.Executor executor15 = restAdapter10.callbackExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor17 = serializedObjectSupporter16.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter18 = serializedObjectSupporter16.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter16.deserializeObjectConverter5();
        retrofit.client.Request request20 = serializedObjectSupporter16.deserializeObjectRequest4();
        retrofit.ErrorHandler errorHandler21 = serializedObjectSupporter16.deserializeObjectErrorHandler1();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter16;
        retrofit.client.Request request23 = serializedObjectSupporter16.deserializeObjectRequest5();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNotNull(requestInterceptor17);
        org.junit.Assert.assertNotNull(gsonConverter18);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertNotNull(errorHandler21);
        org.junit.Assert.assertNotNull(request23);
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0452");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter10.logLevel;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        retrofit.converter.Converter converter14 = restAdapter10.converter;
        retrofit.Server server15 = restAdapter10.getserver();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter10.getLogLevel();
        java.lang.String str17 = restAdapter10.getIDLE_THREAD_NAME();
        java.util.concurrent.Executor executor18 = restAdapter10.gethttpExecutor();
        retrofit.converter.Converter converter19 = restAdapter10.getconverter();
        java.lang.Throwable throwable20 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter10.logException(throwable20, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-Idle" + "'", str17, "Retrofit-Idle");
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(converter19);
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0453");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.logLevel = logLevel23;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter10.setLogLevel(logLevel26);
        retrofit.client.Response response29 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response31 = restAdapter10.logAndReplaceResponse("", response29, (long) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.FULL));
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0454");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.util.concurrent.Executor executor11 = restAdapter10.getcallbackExecutor();
        retrofit.ErrorHandler errorHandler12 = restAdapter10.geterrorHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        java.lang.String str14 = serializedObjectSupporter13.deserializeObjectString3();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter13;
        int int16 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server17 = null;
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Log log25 = null;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server17, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log25, logLevel26);
        retrofit.ErrorHandler errorHandler28 = restAdapter27.errorHandler;
        int int29 = restAdapter27.getLOG_CHUNK_SIZE();
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = null;
        restAdapter27.serializedObjectSupporter = serializedObjectSupporter30;
        java.util.concurrent.Executor executor32 = restAdapter27.callbackExecutor;
        java.util.concurrent.Executor executor33 = restAdapter27.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter27.logLevel = logLevel34;
        restAdapter10.setLogLevel(logLevel34);
        retrofit.RestAdapter.RestHandler restHandler37 = restAdapter10.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter38 = new retrofit.SerializedObjectSupporter();
        java.lang.String str39 = serializedObjectSupporter38.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter40 = serializedObjectSupporter38.deserializeObjectConverter2();
        retrofit.RequestInterceptor requestInterceptor41 = serializedObjectSupporter38.deserializeObjectRequestInterceptor1();
        java.lang.String str42 = serializedObjectSupporter38.deserializeObjectString4();
        restHandler37.serializedObjectSupporter = serializedObjectSupporter38;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GET" + "'", str14, "GET");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4000 + "'", int16 == 4000);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4000 + "'", int29 == 4000);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Retrofit-Idle" + "'", str39, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter40);
        org.junit.Assert.assertNotNull(requestInterceptor41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "http://example.com/" + "'", str42, "http://example.com/");
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0455");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        java.util.List<retrofit.client.Header> headerList4 = request3.getHeaders();
        java.lang.String str5 = request3.getUrl();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(headerList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "http://example.com/" + "'", str5, "http://example.com/");
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0456");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.client.Client.Provider provider15 = restAdapter10.getclientProvider();
        java.lang.String str16 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.Server server17 = null;
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Log log25 = null;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server17, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log25, logLevel26);
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter27.logLevel;
        retrofit.ErrorHandler errorHandler29 = restAdapter27.geterrorHandler();
        java.util.concurrent.Executor executor30 = restAdapter27.getcallbackExecutor();
        retrofit.converter.Converter converter31 = restAdapter27.converter;
        retrofit.Server server32 = restAdapter27.getserver();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter27.getLogLevel();
        restAdapter10.setLogLevel(logLevel33);
        retrofit.RestAdapter.RestHandler restHandler35 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor37 = builder36.getcallbackExecutor();
        retrofit.client.Client.Provider provider38 = null;
        builder36.clientProvider = provider38;
        retrofit.Server server40 = null;
        retrofit.client.Client.Provider provider41 = null;
        java.util.concurrent.Executor executor42 = null;
        java.util.concurrent.Executor executor43 = null;
        retrofit.RequestInterceptor requestInterceptor44 = null;
        retrofit.converter.Converter converter45 = null;
        retrofit.Profiler profiler46 = null;
        retrofit.ErrorHandler errorHandler47 = null;
        retrofit.RestAdapter.Log log48 = null;
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter(server40, provider41, executor42, executor43, requestInterceptor44, converter45, profiler46, errorHandler47, log48, logLevel49);
        builder36.logLevel = logLevel49;
        java.util.concurrent.Executor executor52 = builder36.httpExecutor;
        retrofit.RestAdapter.Log log53 = null;
        builder36.log = log53;
        retrofit.SerializedObjectSupporter serializedObjectSupporter55 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor56 = serializedObjectSupporter55.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter57 = serializedObjectSupporter55.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter58 = serializedObjectSupporter55.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter59 = serializedObjectSupporter55.deserializeObjectConverter8();
        retrofit.mime.TypedString typedString60 = serializedObjectSupporter55.deserializeObjectTypedOutput2();
        java.lang.String str61 = serializedObjectSupporter55.deserializeObjectString2();
        builder36.serializedObjectSupporter = serializedObjectSupporter55;
        restHandler35.serializedObjectSupporter = serializedObjectSupporter55;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Retrofit-Idle" + "'", str16, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNull(converter31);
        org.junit.Assert.assertNull(server32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(executor52);
        org.junit.Assert.assertNotNull(requestInterceptor56);
        org.junit.Assert.assertNotNull(gsonConverter57);
        org.junit.Assert.assertNotNull(gsonConverter58);
        org.junit.Assert.assertNotNull(gsonConverter59);
        org.junit.Assert.assertNotNull(typedString60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Retrofit-Idle" + "'", str61, "Retrofit-Idle");
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0457");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter1 = serializedObjectSupporter0.deserializeObjectConverter2();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest3();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.client.Request request6 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.client.Request request7 = serializedObjectSupporter0.deserializeObjectRequest7();
        java.lang.String str8 = request7.url;
        org.junit.Assert.assertNotNull(gsonConverter1);
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(request6);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://example.com/" + "'", str8, "http://example.com/");
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0458");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.Profiler profiler15 = restAdapter10.profiler;
        retrofit.converter.Converter converter16 = restAdapter10.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter17.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter17.deserializeObjectConverter4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter17;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter10.setLogLevel(logLevel22);
        retrofit.RestAdapter.Log log24 = restAdapter10.log;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(log24);
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0459");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter10.logLevel;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        retrofit.converter.Converter converter14 = restAdapter10.converter;
        retrofit.Server server15 = restAdapter10.getserver();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter10.getLogLevel();
        retrofit.ErrorHandler errorHandler17 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor18 = restAdapter10.gethttpExecutor();
        retrofit.ErrorHandler errorHandler19 = restAdapter10.errorHandler;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor21 = null;
        builder20.sethttpExecutor(executor21);
        retrofit.Profiler profiler23 = null;
        builder20.profiler = profiler23;
        retrofit.Server server25 = builder20.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor27 = serializedObjectSupporter26.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter26.deserializeObjectConverter7();
        retrofit.client.Request request29 = serializedObjectSupporter26.deserializeObjectRequest1();
        builder20.serializedObjectSupporter = serializedObjectSupporter26;
        retrofit.client.Request request31 = serializedObjectSupporter26.deserializeObjectRequest2();
        retrofit.client.Request request32 = serializedObjectSupporter26.deserializeObjectRequest5();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter26;
        retrofit.SerializedObjectSupporter serializedObjectSupporter34 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor35 = serializedObjectSupporter34.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter36 = serializedObjectSupporter34.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter37 = serializedObjectSupporter34.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter38 = serializedObjectSupporter34.deserializeObjectConverter8();
        java.lang.String str39 = serializedObjectSupporter34.deserializeObjectString4();
        java.lang.String str40 = serializedObjectSupporter34.deserializeObjectString3();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter34;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(server25);
        org.junit.Assert.assertNotNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(request29);
        org.junit.Assert.assertNotNull(request31);
        org.junit.Assert.assertNotNull(request32);
        org.junit.Assert.assertNotNull(requestInterceptor35);
        org.junit.Assert.assertNotNull(gsonConverter36);
        org.junit.Assert.assertNotNull(gsonConverter37);
        org.junit.Assert.assertNotNull(gsonConverter38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "http://example.com/" + "'", str39, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "GET" + "'", str40, "GET");
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0460");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler2 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.mime.TypedString typedString3 = serializedObjectSupporter0.deserializeObjectTypedOutput2();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest1();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter5 = serializedObjectSupporter0.deserializeObjectLogLevel1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(errorHandler2);
        org.junit.Assert.assertNotNull(typedString3);
        org.junit.Assert.assertNotNull(request4);
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0461");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = null;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter13;
        java.util.concurrent.Executor executor15 = restAdapter10.callbackExecutor;
        java.util.concurrent.Executor executor16 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter10.logLevel = logLevel17;
        retrofit.ErrorHandler errorHandler19 = restAdapter10.errorHandler;
        retrofit.converter.Converter converter20 = restAdapter10.converter;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(converter20);
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0462");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString3();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter3();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "GET" + "'", str1, "GET");
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(gsonConverter4);
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0463");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server4 = null;
        builder0.server = server4;
        retrofit.Server server6 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter7 = builder0.serializedObjectSupporter;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertNull(serializedObjectSupporter7);
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0464");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler13 = restAdapter10.geterrorHandler();
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter10.getLogLevel();
        java.lang.String str15 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.RestAdapter.Log log16 = restAdapter10.log;
        retrofit.Server server17 = restAdapter10.getserver();
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter10.new RestHandler();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Retrofit-Idle" + "'", str15, "Retrofit-Idle");
        org.junit.Assert.assertNull(log16);
        org.junit.Assert.assertNull(server17);
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0465");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.client.Client.Provider provider15 = restAdapter10.getclientProvider();
        java.util.concurrent.Executor executor16 = restAdapter10.gethttpExecutor();
        java.util.concurrent.Executor executor17 = restAdapter10.gethttpExecutor();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(executor17);
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0466");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.client.Client.Provider provider15 = restAdapter10.getclientProvider();
        java.lang.String str16 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.Profiler profiler17 = restAdapter10.getprofiler();
        java.util.concurrent.Executor executor18 = restAdapter10.httpExecutor;
        retrofit.client.Client.Provider provider19 = restAdapter10.clientProvider;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Retrofit-Idle" + "'", str16, "Retrofit-Idle");
        org.junit.Assert.assertNull(profiler17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(provider19);
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0467");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter10.logLevel;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        retrofit.converter.Converter converter14 = restAdapter10.converter;
        java.util.concurrent.Executor executor15 = restAdapter10.getcallbackExecutor();
        java.util.concurrent.Executor executor16 = restAdapter10.callbackExecutor;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(executor16);
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0468");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter10.getLogLevel();
        retrofit.Server server15 = restAdapter10.getserver();
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request17 = serializedObjectSupporter16.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler18 = serializedObjectSupporter16.deserializeObjectErrorHandler1();
        retrofit.mime.TypedString typedString19 = serializedObjectSupporter16.deserializeObjectTypedOutput2();
        retrofit.client.Request request20 = serializedObjectSupporter16.deserializeObjectRequest6();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter16;
        retrofit.RequestInterceptor requestInterceptor22 = restAdapter10.getrequestInterceptor();
        java.util.concurrent.Executor executor23 = restAdapter10.gethttpExecutor();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertNotNull(errorHandler18);
        org.junit.Assert.assertNotNull(typedString19);
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNull(executor23);
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0469");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server4 = null;
        builder0.server = server4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = null;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        retrofit.ErrorHandler errorHandler17 = restAdapter16.errorHandler;
        java.util.concurrent.Executor executor18 = restAdapter16.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter16.getLogLevel();
        builder0.logLevel = logLevel19;
        java.util.concurrent.Executor executor21 = null;
        builder0.callbackExecutor = executor21;
        retrofit.SerializedObjectSupporter serializedObjectSupporter23 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor24 = serializedObjectSupporter23.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter25 = serializedObjectSupporter23.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter26 = serializedObjectSupporter23.deserializeObjectConverter7();
        retrofit.Server server27 = serializedObjectSupporter23.deserializeObjectServer1();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter23.deserializeObjectConverter7();
        builder0.converter = gsonConverter28;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(requestInterceptor24);
        org.junit.Assert.assertNotNull(gsonConverter25);
        org.junit.Assert.assertNotNull(gsonConverter26);
        org.junit.Assert.assertNotNull(server27);
        org.junit.Assert.assertNotNull(gsonConverter28);
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0470");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        java.lang.String str13 = restAdapter10.getIDLE_THREAD_NAME();
        java.util.concurrent.Executor executor14 = restAdapter10.gethttpExecutor();
        retrofit.converter.Converter converter15 = restAdapter10.converter;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-Idle" + "'", str13, "Retrofit-Idle");
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(converter15);
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0471");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString2();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString1();
        retrofit.RequestInterceptor requestInterceptor3 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest4();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest2();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter6 = serializedObjectSupporter0.deserializeObjectLogLevel1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Retrofit-Idle" + "'", str1, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Retrofit-" + "'", str2, "Retrofit-");
        org.junit.Assert.assertNotNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(request5);
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0472");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.Server server4 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.Server server5 = serializedObjectSupporter0.deserializeObjectServer1();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString3();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter7 = serializedObjectSupporter0.deserializeObjectLogLevel3();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(server4);
        org.junit.Assert.assertNotNull(server5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GET" + "'", str6, "GET");
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0473");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString4();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collections collections5 = serializedObjectSupporter0.deserializeObjectList1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.Collections$UnmodifiableRandomAccessList cannot be cast to java.util.Collections");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "http://example.com/" + "'", str4, "http://example.com/");
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0474");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = null;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter13;
        retrofit.client.Client.Provider provider15 = restAdapter10.getclientProvider();
        retrofit.ErrorHandler errorHandler16 = restAdapter10.geterrorHandler();
        retrofit.RestAdapter.Log log17 = restAdapter10.log;
        java.util.concurrent.Executor executor18 = restAdapter10.gethttpExecutor();
        retrofit.client.Client.Provider provider19 = restAdapter10.getclientProvider();
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter10.setLogLevel(logLevel20);
        retrofit.RestAdapter.RestHandler restHandler22 = restAdapter10.new RestHandler();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNull(log17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(provider19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0475");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.getcallbackExecutor();
        java.lang.String str13 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = null;
        builder14.sethttpExecutor(executor15);
        retrofit.converter.Converter converter17 = builder14.converter;
        java.util.concurrent.Executor executor18 = builder14.getcallbackExecutor();
        retrofit.client.Client.Provider provider19 = builder14.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request21 = serializedObjectSupporter20.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler22 = serializedObjectSupporter20.deserializeObjectErrorHandler1();
        builder14.errorHandler = errorHandler22;
        retrofit.converter.Converter converter24 = builder14.converter;
        java.util.concurrent.Executor executor25 = builder14.callbackExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor27 = serializedObjectSupporter26.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter26.deserializeObjectConverter8();
        java.lang.String str29 = serializedObjectSupporter26.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter30 = serializedObjectSupporter26.deserializeObjectConverter4();
        builder14.serializedObjectSupporter = serializedObjectSupporter26;
        retrofit.client.Request request32 = serializedObjectSupporter26.deserializeObjectRequest2();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request33 = restAdapter10.logAndReplaceRequest(request32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-Idle" + "'", str13, "Retrofit-Idle");
        org.junit.Assert.assertNull(converter17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(provider19);
        org.junit.Assert.assertNotNull(request21);
        org.junit.Assert.assertNotNull(errorHandler22);
        org.junit.Assert.assertNull(converter24);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNotNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Retrofit-Idle" + "'", str29, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter30);
        org.junit.Assert.assertNotNull(request32);
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0476");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider5 = builder0.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request7 = serializedObjectSupporter6.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler8 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        builder0.errorHandler = errorHandler8;
        retrofit.converter.Converter converter10 = builder0.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        java.lang.String str12 = serializedObjectSupporter11.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter13 = serializedObjectSupporter11.deserializeObjectConverter2();
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter11.deserializeObjectConverter7();
        retrofit.RestAdapter.Builder builder15 = builder0.setConverter((retrofit.converter.Converter) gsonConverter14);
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor17 = builder16.getcallbackExecutor();
        retrofit.client.Client.Provider provider18 = null;
        builder16.clientProvider = provider18;
        retrofit.Server server20 = null;
        builder16.server = server20;
        java.util.concurrent.Executor executor22 = builder16.gethttpExecutor();
        java.util.concurrent.Executor executor23 = builder16.gethttpExecutor();
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = builder24.getcallbackExecutor();
        retrofit.client.Client.Provider provider26 = null;
        builder24.clientProvider = provider26;
        retrofit.Server server28 = null;
        builder24.server = server28;
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        builder24.log = log30;
        builder16.log = log30;
        builder15.log = log30;
        java.util.concurrent.Executor executor34 = builder15.gethttpExecutor();
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(errorHandler8);
        org.junit.Assert.assertNull(converter10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter13);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertNull(executor34);
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0477");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RestAdapter.Log log4 = null;
        builder0.log = log4;
        java.util.concurrent.Executor executor6 = builder0.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = builder7.getcallbackExecutor();
        retrofit.client.Client.Provider provider9 = null;
        builder7.clientProvider = provider9;
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor12 = serializedObjectSupporter11.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter13 = serializedObjectSupporter11.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter11.deserializeObjectConverter5();
        retrofit.client.Request request15 = serializedObjectSupporter11.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter11.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter11.deserializeObjectConverter6();
        retrofit.RestAdapter.Builder builder18 = builder7.setConverter((retrofit.converter.Converter) gsonConverter17);
        builder0.converter = gsonConverter17;
        retrofit.ErrorHandler errorHandler20 = builder0.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter21 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter21.deserializeObjectConverter2();
        retrofit.client.Request request23 = serializedObjectSupporter21.deserializeObjectRequest7();
        retrofit.client.Request request24 = serializedObjectSupporter21.deserializeObjectRequest2();
        retrofit.client.Request request25 = serializedObjectSupporter21.deserializeObjectRequest3();
        retrofit.converter.GsonConverter gsonConverter26 = serializedObjectSupporter21.deserializeObjectConverter6();
        retrofit.RequestInterceptor requestInterceptor27 = serializedObjectSupporter21.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder28 = builder0.setRequestInterceptor(requestInterceptor27);
        retrofit.Server server29 = builder0.server;
        retrofit.RestAdapter.Log log30 = builder0.log;
        java.util.concurrent.Executor executor31 = builder0.getcallbackExecutor();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNotNull(requestInterceptor12);
        org.junit.Assert.assertNotNull(gsonConverter13);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(gsonConverter16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertNotNull(request24);
        org.junit.Assert.assertNotNull(request25);
        org.junit.Assert.assertNotNull(gsonConverter26);
        org.junit.Assert.assertNotNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(server29);
        org.junit.Assert.assertNull(log30);
        org.junit.Assert.assertNull(executor31);
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0478");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString3();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString4();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.mime.TypedOutput typedOutput4 = request3.getBody();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "GET" + "'", str1, "GET");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "http://example.com/" + "'", str2, "http://example.com/");
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNull(typedOutput4);
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0479");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.SerializedObjectSupporter serializedObjectSupporter5 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor6 = serializedObjectSupporter5.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder7 = builder2.setRequestInterceptor(requestInterceptor6);
        retrofit.Server server8 = builder7.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter9 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter10 = serializedObjectSupporter9.deserializeObjectConverter2();
        builder7.serializedObjectSupporter = serializedObjectSupporter9;
        retrofit.client.Request request12 = serializedObjectSupporter9.deserializeObjectRequest5();
        retrofit.client.Request request13 = serializedObjectSupporter9.deserializeObjectRequest7();
        java.lang.String str14 = serializedObjectSupporter9.deserializeObjectString2();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(server8);
        org.junit.Assert.assertNotNull(gsonConverter10);
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(request13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Retrofit-Idle" + "'", str14, "Retrofit-Idle");
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0480");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.client.Client.Provider provider15 = restAdapter10.getclientProvider();
        java.lang.Throwable throwable16 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter10.logException(throwable16, "Retrofit-");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(provider15);
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0481");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = null;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter13;
        retrofit.client.Client.Provider provider15 = restAdapter10.getclientProvider();
        retrofit.ErrorHandler errorHandler16 = restAdapter10.geterrorHandler();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter10.logLevel;
        int int18 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.RequestInterceptor requestInterceptor19 = restAdapter10.getrequestInterceptor();
        retrofit.client.Client.Provider provider20 = restAdapter10.getclientProvider();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4000 + "'", int18 == 4000);
        org.junit.Assert.assertNull(requestInterceptor19);
        org.junit.Assert.assertNull(provider20);
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0482");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter3();
        retrofit.client.Request request6 = serializedObjectSupporter0.deserializeObjectRequest4();
        retrofit.client.Request request7 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.client.Request request8 = serializedObjectSupporter0.deserializeObjectRequest7();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter0.deserializeObjectConverter6();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(request6);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(request8);
        org.junit.Assert.assertNotNull(gsonConverter9);
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0483");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor4 = null;
        builder3.sethttpExecutor(executor4);
        retrofit.Profiler profiler6 = null;
        builder3.profiler = profiler6;
        retrofit.RestAdapter.LogLevel logLevel8 = builder3.logLevel;
        java.util.concurrent.Executor executor9 = null;
        builder3.sethttpExecutor(executor9);
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder13 = builder11.setServer("hi!");
        java.util.concurrent.Executor executor14 = null;
        builder13.callbackExecutor = executor14;
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor17 = serializedObjectSupporter16.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder18 = builder13.setRequestInterceptor(requestInterceptor17);
        retrofit.RestAdapter.Builder builder19 = builder3.setRequestInterceptor(requestInterceptor17);
        builder2.requestInterceptor = requestInterceptor17;
        retrofit.client.Client client21 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder22 = builder2.setClient(client21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(requestInterceptor17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0484");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.client.Request request9 = serializedObjectSupporter6.deserializeObjectRequest1();
        builder0.serializedObjectSupporter = serializedObjectSupporter6;
        java.lang.String str11 = serializedObjectSupporter6.deserializeObjectString2();
        retrofit.ErrorHandler errorHandler12 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        retrofit.client.Request request13 = serializedObjectSupporter6.deserializeObjectRequest4();
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-Idle" + "'", str11, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler12);
        org.junit.Assert.assertNotNull(request13);
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0485");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.util.concurrent.Executor executor11 = restAdapter10.getcallbackExecutor();
        retrofit.ErrorHandler errorHandler12 = restAdapter10.geterrorHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        java.lang.String str14 = serializedObjectSupporter13.deserializeObjectString3();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter13;
        int int16 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.client.Client.Provider provider17 = restAdapter10.clientProvider;
        retrofit.Server server18 = restAdapter10.getserver();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GET" + "'", str14, "GET");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4000 + "'", int16 == 4000);
        org.junit.Assert.assertNull(provider17);
        org.junit.Assert.assertNull(server18);
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0486");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.Server server5 = null;
        builder0.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.sethttpExecutor(executor8);
        retrofit.converter.Converter converter10 = builder7.converter;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        retrofit.client.Client.Provider provider12 = builder7.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request14 = serializedObjectSupporter13.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler15 = serializedObjectSupporter13.deserializeObjectErrorHandler1();
        builder7.errorHandler = errorHandler15;
        retrofit.converter.Converter converter17 = builder7.converter;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder20 = builder18.setServer("hi!");
        java.util.concurrent.Executor executor21 = null;
        builder20.callbackExecutor = executor21;
        retrofit.SerializedObjectSupporter serializedObjectSupporter23 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor24 = serializedObjectSupporter23.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder25 = builder20.setRequestInterceptor(requestInterceptor24);
        retrofit.RestAdapter.Builder builder26 = builder7.setRequestInterceptor(requestInterceptor24);
        builder0.requestInterceptor = requestInterceptor24;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor29 = builder28.getcallbackExecutor();
        retrofit.client.Client.Provider provider30 = null;
        builder28.clientProvider = provider30;
        retrofit.Server server32 = null;
        builder28.server = server32;
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        builder28.log = log34;
        retrofit.converter.Converter converter36 = builder28.converter;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor38 = null;
        builder37.sethttpExecutor(executor38);
        retrofit.converter.Converter converter40 = builder37.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter41 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor42 = serializedObjectSupporter41.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter43 = serializedObjectSupporter41.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter44 = serializedObjectSupporter41.deserializeObjectConverter7();
        retrofit.Server server45 = serializedObjectSupporter41.deserializeObjectServer1();
        retrofit.converter.GsonConverter gsonConverter46 = serializedObjectSupporter41.deserializeObjectConverter7();
        retrofit.ErrorHandler errorHandler47 = serializedObjectSupporter41.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder48 = builder37.setErrorHandler(errorHandler47);
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor50 = null;
        builder49.sethttpExecutor(executor50);
        retrofit.converter.Converter converter52 = builder49.converter;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor54 = null;
        builder53.sethttpExecutor(executor54);
        retrofit.converter.Converter converter56 = builder53.converter;
        java.util.concurrent.Executor executor57 = builder53.getcallbackExecutor();
        retrofit.client.Client.Provider provider58 = builder53.getclientProvider();
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder61 = builder59.setServer("hi!");
        java.util.concurrent.Executor executor62 = null;
        builder61.callbackExecutor = executor62;
        retrofit.RestAdapter restAdapter64 = builder61.build();
        retrofit.RestAdapter.Log log65 = restAdapter64.log;
        java.util.concurrent.Executor executor66 = restAdapter64.gethttpExecutor();
        retrofit.client.Client.Provider provider67 = restAdapter64.getclientProvider();
        builder53.setclientProvider(provider67);
        retrofit.RestAdapter.Builder builder69 = builder49.setClient(provider67);
        builder48.clientProvider = provider67;
        retrofit.RestAdapter.Builder builder71 = builder28.setClient(provider67);
        retrofit.RestAdapter.Builder builder72 = builder0.setClient(provider67);
        retrofit.Profiler profiler73 = builder72.profiler;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNull(converter10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertNotNull(request14);
        org.junit.Assert.assertNotNull(errorHandler15);
        org.junit.Assert.assertNull(converter17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(requestInterceptor24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertNull(converter36);
        org.junit.Assert.assertNull(converter40);
        org.junit.Assert.assertNotNull(requestInterceptor42);
        org.junit.Assert.assertNotNull(gsonConverter43);
        org.junit.Assert.assertNotNull(gsonConverter44);
        org.junit.Assert.assertNotNull(server45);
        org.junit.Assert.assertNotNull(gsonConverter46);
        org.junit.Assert.assertNotNull(errorHandler47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(converter52);
        org.junit.Assert.assertNull(converter56);
        org.junit.Assert.assertNull(executor57);
        org.junit.Assert.assertNull(provider58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(restAdapter64);
        org.junit.Assert.assertNotNull(log65);
        org.junit.Assert.assertNotNull(executor66);
        org.junit.Assert.assertNotNull(provider67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNull(profiler73);
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0487");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest4();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter4 = serializedObjectSupporter0.deserializeObjectLogLevel3();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0488");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        java.lang.String str13 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.converter.Converter converter14 = restAdapter10.converter;
        retrofit.ErrorHandler errorHandler15 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor16 = restAdapter10.httpExecutor;
        int int17 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter10.getLogLevel();
        retrofit.Profiler profiler19 = restAdapter10.profiler;
        retrofit.converter.Converter converter20 = restAdapter10.getconverter();
        retrofit.Server server21 = null;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = null;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel30);
        retrofit.ErrorHandler errorHandler32 = restAdapter31.errorHandler;
        java.util.concurrent.Executor executor33 = restAdapter31.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler34 = restAdapter31.new RestHandler();
        retrofit.Server server35 = null;
        retrofit.client.Client.Provider provider36 = null;
        java.util.concurrent.Executor executor37 = null;
        java.util.concurrent.Executor executor38 = null;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        retrofit.converter.Converter converter40 = null;
        retrofit.Profiler profiler41 = null;
        retrofit.ErrorHandler errorHandler42 = null;
        retrofit.RestAdapter.Log log43 = null;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter(server35, provider36, executor37, executor38, requestInterceptor39, converter40, profiler41, errorHandler42, log43, logLevel44);
        retrofit.RestAdapter.LogLevel logLevel46 = restAdapter45.logLevel;
        restAdapter31.logLevel = logLevel46;
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter31.logLevel;
        restAdapter10.setLogLevel(logLevel48);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-Idle" + "'", str13, "Retrofit-Idle");
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4000 + "'", int17 == 4000);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(profiler19);
        org.junit.Assert.assertNull(converter20);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler32);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0489");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.Log log11 = restAdapter10.log;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertNull(executor12);
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0490");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.client.Client.Provider provider15 = restAdapter10.getclientProvider();
        java.lang.String str16 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.Server server17 = null;
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Log log25 = null;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server17, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log25, logLevel26);
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter27.logLevel;
        retrofit.ErrorHandler errorHandler29 = restAdapter27.geterrorHandler();
        java.util.concurrent.Executor executor30 = restAdapter27.getcallbackExecutor();
        retrofit.converter.Converter converter31 = restAdapter27.converter;
        retrofit.Server server32 = restAdapter27.getserver();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter27.getLogLevel();
        restAdapter10.setLogLevel(logLevel33);
        retrofit.RestAdapter.RestHandler restHandler35 = restAdapter10.new RestHandler();
        retrofit.Server server36 = null;
        retrofit.client.Client.Provider provider37 = null;
        java.util.concurrent.Executor executor38 = null;
        java.util.concurrent.Executor executor39 = null;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        retrofit.converter.Converter converter41 = null;
        retrofit.Profiler profiler42 = null;
        retrofit.ErrorHandler errorHandler43 = null;
        retrofit.RestAdapter.Log log44 = null;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter(server36, provider37, executor38, executor39, requestInterceptor40, converter41, profiler42, errorHandler43, log44, logLevel45);
        retrofit.ErrorHandler errorHandler47 = restAdapter46.errorHandler;
        int int48 = restAdapter46.getLOG_CHUNK_SIZE();
        retrofit.Server server49 = restAdapter46.getserver();
        retrofit.Server server50 = null;
        retrofit.client.Client.Provider provider51 = null;
        java.util.concurrent.Executor executor52 = null;
        java.util.concurrent.Executor executor53 = null;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        retrofit.converter.Converter converter55 = null;
        retrofit.Profiler profiler56 = null;
        retrofit.ErrorHandler errorHandler57 = null;
        retrofit.RestAdapter.Log log58 = null;
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter(server50, provider51, executor52, executor53, requestInterceptor54, converter55, profiler56, errorHandler57, log58, logLevel59);
        restAdapter46.logLevel = logLevel59;
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter46.setLogLevel(logLevel62);
        restAdapter10.setLogLevel(logLevel62);
        retrofit.Profiler profiler65 = restAdapter10.profiler;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Retrofit-Idle" + "'", str16, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNull(converter31);
        org.junit.Assert.assertNull(server32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 4000 + "'", int48 == 4000);
        org.junit.Assert.assertNull(server49);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler65);
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0491");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server4 = null;
        builder0.server = server4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = null;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        retrofit.ErrorHandler errorHandler17 = restAdapter16.errorHandler;
        java.util.concurrent.Executor executor18 = restAdapter16.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter16.getLogLevel();
        builder0.logLevel = logLevel19;
        java.util.concurrent.Executor executor21 = null;
        builder0.callbackExecutor = executor21;
        retrofit.SerializedObjectSupporter serializedObjectSupporter23 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor24 = serializedObjectSupporter23.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter25 = serializedObjectSupporter23.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter26 = serializedObjectSupporter23.deserializeObjectConverter7();
        retrofit.Server server27 = serializedObjectSupporter23.deserializeObjectServer1();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter23.deserializeObjectConverter7();
        retrofit.ErrorHandler errorHandler29 = serializedObjectSupporter23.deserializeObjectErrorHandler1();
        builder0.errorHandler = errorHandler29;
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor32 = serializedObjectSupporter31.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter31.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter34 = serializedObjectSupporter31.deserializeObjectConverter5();
        retrofit.client.Request request35 = serializedObjectSupporter31.deserializeObjectRequest4();
        retrofit.ErrorHandler errorHandler36 = serializedObjectSupporter31.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder37 = builder0.setErrorHandler(errorHandler36);
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor39 = null;
        builder38.sethttpExecutor(executor39);
        retrofit.converter.Converter converter41 = builder38.converter;
        java.util.concurrent.Executor executor42 = builder38.getcallbackExecutor();
        retrofit.client.Client.Provider provider43 = builder38.getclientProvider();
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder46 = builder44.setServer("hi!");
        java.util.concurrent.Executor executor47 = null;
        builder46.callbackExecutor = executor47;
        retrofit.RestAdapter restAdapter49 = builder46.build();
        retrofit.RestAdapter.Log log50 = restAdapter49.log;
        java.util.concurrent.Executor executor51 = restAdapter49.gethttpExecutor();
        retrofit.client.Client.Provider provider52 = restAdapter49.getclientProvider();
        builder38.setclientProvider(provider52);
        builder0.setclientProvider(provider52);
        retrofit.SerializedObjectSupporter serializedObjectSupporter55 = new retrofit.SerializedObjectSupporter();
        java.lang.String str56 = serializedObjectSupporter55.deserializeObjectString3();
        java.lang.String str57 = serializedObjectSupporter55.deserializeObjectString3();
        retrofit.Server server58 = serializedObjectSupporter55.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder59 = builder0.setServer(server58);
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(requestInterceptor24);
        org.junit.Assert.assertNotNull(gsonConverter25);
        org.junit.Assert.assertNotNull(gsonConverter26);
        org.junit.Assert.assertNotNull(server27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(errorHandler29);
        org.junit.Assert.assertNotNull(requestInterceptor32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(gsonConverter34);
        org.junit.Assert.assertNotNull(request35);
        org.junit.Assert.assertNotNull(errorHandler36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(converter41);
        org.junit.Assert.assertNull(executor42);
        org.junit.Assert.assertNull(provider43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(restAdapter49);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertNotNull(executor51);
        org.junit.Assert.assertNotNull(provider52);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "GET" + "'", str56, "GET");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "GET" + "'", str57, "GET");
        org.junit.Assert.assertNotNull(server58);
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0492");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        java.util.concurrent.Executor executor6 = null;
        builder0.sethttpExecutor(executor6);
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder10 = builder8.setServer("hi!");
        java.util.concurrent.Executor executor11 = null;
        builder10.callbackExecutor = executor11;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor14 = serializedObjectSupporter13.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder15 = builder10.setRequestInterceptor(requestInterceptor14);
        retrofit.RestAdapter.Builder builder16 = builder0.setRequestInterceptor(requestInterceptor14);
        java.util.concurrent.Executor executor17 = null;
        builder0.setcallbackExecutor(executor17);
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder21 = builder19.setServer("hi!");
        java.util.concurrent.Executor executor22 = null;
        builder21.callbackExecutor = executor22;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor25 = serializedObjectSupporter24.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder26 = builder21.setRequestInterceptor(requestInterceptor25);
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder29 = builder27.setServer("hi!");
        java.util.concurrent.Executor executor30 = null;
        builder29.callbackExecutor = executor30;
        retrofit.SerializedObjectSupporter serializedObjectSupporter32 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor33 = serializedObjectSupporter32.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder34 = builder29.setRequestInterceptor(requestInterceptor33);
        builder26.requestInterceptor = requestInterceptor33;
        retrofit.RestAdapter.Builder builder36 = builder0.setRequestInterceptor(requestInterceptor33);
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder39 = builder37.setServer("hi!");
        java.util.concurrent.Executor executor40 = null;
        builder39.callbackExecutor = executor40;
        retrofit.RestAdapter restAdapter42 = builder39.build();
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder45 = builder43.setServer("hi!");
        retrofit.client.Client.Provider provider46 = builder43.clientProvider;
        retrofit.RequestInterceptor requestInterceptor47 = builder43.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean49 = logLevel48.log();
        retrofit.RestAdapter.Builder builder50 = builder43.setLogLevel(logLevel48);
        builder39.logLevel = logLevel48;
        builder0.logLevel = logLevel48;
        retrofit.SerializedObjectSupporter serializedObjectSupporter53 = new retrofit.SerializedObjectSupporter();
        java.lang.String str54 = serializedObjectSupporter53.deserializeObjectString2();
        java.lang.String str55 = serializedObjectSupporter53.deserializeObjectString1();
        retrofit.RequestInterceptor requestInterceptor56 = serializedObjectSupporter53.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder57 = builder0.setRequestInterceptor(requestInterceptor56);
        retrofit.converter.Converter converter58 = builder57.converter;
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(requestInterceptor33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(restAdapter42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(provider46);
        org.junit.Assert.assertNull(requestInterceptor47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Retrofit-Idle" + "'", str54, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Retrofit-" + "'", str55, "Retrofit-");
        org.junit.Assert.assertNotNull(requestInterceptor56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(converter58);
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0493");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest8();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest6();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collections collections5 = serializedObjectSupporter0.deserializeObjectList1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.Collections$UnmodifiableRandomAccessList cannot be cast to java.util.Collections");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0494");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel12 = restAdapter10.logLevel;
        java.util.concurrent.Executor executor13 = restAdapter10.gethttpExecutor();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(executor13);
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0495");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor5 = null;
        builder4.sethttpExecutor(executor5);
        retrofit.Profiler profiler7 = null;
        builder4.profiler = profiler7;
        retrofit.Server server9 = builder4.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter10 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor11 = serializedObjectSupporter10.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter12 = serializedObjectSupporter10.deserializeObjectConverter7();
        retrofit.client.Request request13 = serializedObjectSupporter10.deserializeObjectRequest1();
        builder4.serializedObjectSupporter = serializedObjectSupporter10;
        java.lang.String str15 = serializedObjectSupporter10.deserializeObjectString2();
        retrofit.ErrorHandler errorHandler16 = serializedObjectSupporter10.deserializeObjectErrorHandler1();
        java.lang.String str17 = serializedObjectSupporter10.deserializeObjectString1();
        retrofit.converter.GsonConverter gsonConverter18 = serializedObjectSupporter10.deserializeObjectConverter7();
        builder0.converter = gsonConverter18;
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Log log28 = null;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log28, logLevel29);
        retrofit.ErrorHandler errorHandler31 = restAdapter30.errorHandler;
        int int32 = restAdapter30.getLOG_CHUNK_SIZE();
        retrofit.RestAdapter.Log log33 = restAdapter30.log;
        retrofit.RestAdapter.LogLevel logLevel34 = restAdapter30.getLogLevel();
        builder0.logLevel = logLevel34;
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(server9);
        org.junit.Assert.assertNotNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(gsonConverter12);
        org.junit.Assert.assertNotNull(request13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Retrofit-Idle" + "'", str15, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-" + "'", str17, "Retrofit-");
        org.junit.Assert.assertNotNull(gsonConverter18);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 4000 + "'", int32 == 4000);
        org.junit.Assert.assertNull(log33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0496");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter3();
        retrofit.client.Request request6 = serializedObjectSupporter0.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.Server server8 = serializedObjectSupporter0.deserializeObjectServer1();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(request6);
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertNotNull(server8);
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0497");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter8();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString1();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest1();
        java.lang.String str5 = request4.getMethod();
        java.util.List<retrofit.client.Header> headerList6 = request4.getHeaders();
        java.lang.String str7 = request4.getUrl();
        java.lang.String str8 = request4.getUrl();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Retrofit-" + "'", str3, "Retrofit-");
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GET" + "'", str5, "GET");
        org.junit.Assert.assertNotNull(headerList6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "http://example.com/" + "'", str7, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://example.com/" + "'", str8, "http://example.com/");
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0498");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = null;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter13;
        retrofit.client.Client.Provider provider15 = restAdapter10.getclientProvider();
        retrofit.ErrorHandler errorHandler16 = restAdapter10.geterrorHandler();
        retrofit.RestAdapter.Log log17 = restAdapter10.log;
        java.util.concurrent.Executor executor18 = restAdapter10.gethttpExecutor();
        retrofit.client.Client.Provider provider19 = restAdapter10.getclientProvider();
        retrofit.RestAdapter.Log log20 = restAdapter10.log;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNull(log17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(provider19);
        org.junit.Assert.assertNull(log20);
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0499");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter10.getLogLevel();
        retrofit.Server server15 = restAdapter10.getserver();
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request17 = serializedObjectSupporter16.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler18 = serializedObjectSupporter16.deserializeObjectErrorHandler1();
        retrofit.mime.TypedString typedString19 = serializedObjectSupporter16.deserializeObjectTypedOutput2();
        retrofit.client.Request request20 = serializedObjectSupporter16.deserializeObjectRequest6();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter16;
        retrofit.RequestInterceptor requestInterceptor22 = restAdapter10.getrequestInterceptor();
        java.util.concurrent.Executor executor23 = restAdapter10.httpExecutor;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertNotNull(errorHandler18);
        org.junit.Assert.assertNotNull(typedString19);
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNull(executor23);
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0500");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler7 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder8 = builder0.setErrorHandler(errorHandler7);
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder11 = builder9.setServer("hi!");
        retrofit.client.Client.Provider provider12 = builder9.clientProvider;
        retrofit.RequestInterceptor requestInterceptor13 = builder9.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean15 = logLevel14.log();
        retrofit.RestAdapter.Builder builder16 = builder9.setLogLevel(logLevel14);
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor18 = builder17.getcallbackExecutor();
        retrofit.client.Client.Provider provider19 = null;
        builder17.clientProvider = provider19;
        retrofit.Server server21 = null;
        builder17.server = server21;
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        builder17.log = log23;
        builder9.log = log23;
        retrofit.RestAdapter.Builder builder26 = builder8.setLog(log23);
        retrofit.RestAdapter.Builder builder28 = builder26.setServer("Retrofit-Idle");
        retrofit.RequestInterceptor requestInterceptor29 = builder28.requestInterceptor;
        retrofit.RestAdapter.Log log30 = builder28.log;
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNotNull(errorHandler7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertNull(requestInterceptor13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(requestInterceptor29);
        org.junit.Assert.assertNotNull(log30);
    }
}

