import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

    public static boolean debug = false;

    @Test
    public void test1501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1501");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.client.Client.Provider provider3 = builder0.getclientProvider();
        retrofit.client.Client.Provider provider4 = builder0.getclientProvider();
        retrofit.Server server5 = builder0.server;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.sethttpExecutor(executor7);
        retrofit.Profiler profiler9 = null;
        builder6.profiler = profiler9;
        retrofit.Server server11 = builder6.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor13 = serializedObjectSupporter12.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter12.deserializeObjectConverter7();
        retrofit.client.Request request15 = serializedObjectSupporter12.deserializeObjectRequest1();
        builder6.serializedObjectSupporter = serializedObjectSupporter12;
        retrofit.client.Request request17 = serializedObjectSupporter12.deserializeObjectRequest2();
        retrofit.mime.TypedString typedString18 = serializedObjectSupporter12.deserializeObjectTypedOutput2();
        builder0.serializedObjectSupporter = serializedObjectSupporter12;
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter12.deserializeObjectConverter7();
        retrofit.ErrorHandler errorHandler21 = serializedObjectSupporter12.deserializeObjectErrorHandler1();
        retrofit.client.Request request22 = serializedObjectSupporter12.deserializeObjectRequest3();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter23 = serializedObjectSupporter12.deserializeObjectLogLevel1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(provider4);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNull(server11);
        org.junit.Assert.assertNotNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertNotNull(typedString18);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNotNull(errorHandler21);
        org.junit.Assert.assertNotNull(request22);
    }

    @Test
    public void test1502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1502");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler13 = restAdapter10.geterrorHandler();
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter10.getLogLevel();
        java.lang.String str15 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.RestAdapter.Log log16 = restAdapter10.log;
        retrofit.Server server17 = restAdapter10.getserver();
        retrofit.RequestInterceptor requestInterceptor18 = restAdapter10.requestInterceptor;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Retrofit-Idle" + "'", str15, "Retrofit-Idle");
        org.junit.Assert.assertNull(log16);
        org.junit.Assert.assertNull(server17);
        org.junit.Assert.assertNull(requestInterceptor18);
    }

    @Test
    public void test1503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1503");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        java.util.concurrent.Executor executor6 = null;
        builder0.sethttpExecutor(executor6);
        retrofit.client.Client.Provider provider8 = builder0.clientProvider;
        java.util.concurrent.Executor executor9 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder12 = builder10.setServer("hi!");
        java.util.concurrent.Executor executor13 = null;
        builder12.callbackExecutor = executor13;
        retrofit.RestAdapter restAdapter15 = builder12.build();
        retrofit.RestAdapter.Log log16 = restAdapter15.log;
        java.util.concurrent.Executor executor17 = restAdapter15.gethttpExecutor();
        retrofit.client.Client.Provider provider18 = restAdapter15.getclientProvider();
        builder0.setclientProvider(provider18);
        retrofit.Server server20 = null;
        builder0.server = server20;
        retrofit.RestAdapter.Builder builder23 = builder0.setServer("http://example.com/");
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder26 = builder24.setServer("hi!");
        retrofit.client.Client.Provider provider27 = builder24.clientProvider;
        java.util.concurrent.Executor executor28 = null;
        builder24.setcallbackExecutor(executor28);
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder31 = builder24.setLog(log30);
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor33 = null;
        builder32.sethttpExecutor(executor33);
        retrofit.Profiler profiler35 = null;
        builder32.profiler = profiler35;
        retrofit.RestAdapter.LogLevel logLevel37 = builder32.logLevel;
        builder24.logLevel = logLevel37;
        builder0.logLevel = logLevel37;
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(restAdapter15);
        org.junit.Assert.assertNotNull(log16);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(provider18);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(provider27);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test1504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1504");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        java.util.concurrent.Executor executor5 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("hi!");
        retrofit.client.Client.Provider provider9 = builder6.clientProvider;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor11 = null;
        builder10.sethttpExecutor(executor11);
        retrofit.Profiler profiler13 = null;
        builder10.profiler = profiler13;
        retrofit.RestAdapter.LogLevel logLevel15 = builder10.logLevel;
        java.util.concurrent.Executor executor16 = null;
        builder10.sethttpExecutor(executor16);
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder20 = builder18.setServer("hi!");
        java.util.concurrent.Executor executor21 = null;
        builder20.callbackExecutor = executor21;
        retrofit.SerializedObjectSupporter serializedObjectSupporter23 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor24 = serializedObjectSupporter23.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder25 = builder20.setRequestInterceptor(requestInterceptor24);
        retrofit.RestAdapter.Builder builder26 = builder10.setRequestInterceptor(requestInterceptor24);
        java.util.concurrent.Executor executor27 = builder26.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter28 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor29 = serializedObjectSupporter28.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter30 = serializedObjectSupporter28.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter31 = serializedObjectSupporter28.deserializeObjectConverter7();
        retrofit.Server server32 = serializedObjectSupporter28.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder33 = builder26.setServer(server32);
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder36 = builder34.setServer("hi!");
        java.util.concurrent.Executor executor37 = null;
        builder36.callbackExecutor = executor37;
        retrofit.RestAdapter restAdapter39 = builder36.build();
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor41 = null;
        builder40.sethttpExecutor(executor41);
        retrofit.Profiler profiler43 = null;
        builder40.profiler = profiler43;
        retrofit.RestAdapter.Log log45 = builder40.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter46 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler47 = serializedObjectSupporter46.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder48 = builder40.setErrorHandler(errorHandler47);
        retrofit.RestAdapter.Builder builder49 = builder36.setErrorHandler(errorHandler47);
        java.util.concurrent.Executor executor50 = builder49.callbackExecutor;
        builder33.sethttpExecutor(executor50);
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder54 = builder52.setServer("hi!");
        retrofit.client.Client.Provider provider55 = builder52.clientProvider;
        retrofit.RequestInterceptor requestInterceptor56 = builder52.requestInterceptor;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder59 = builder57.setServer("hi!");
        retrofit.client.Client.Provider provider60 = builder57.clientProvider;
        java.util.concurrent.Executor executor61 = null;
        builder57.setcallbackExecutor(executor61);
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder64 = builder57.setLog(log63);
        retrofit.RestAdapter.Builder builder65 = builder52.setLog(log63);
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor67 = null;
        builder66.sethttpExecutor(executor67);
        retrofit.Profiler profiler69 = null;
        builder66.profiler = profiler69;
        retrofit.Server server71 = builder66.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter72 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor73 = serializedObjectSupporter72.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter74 = serializedObjectSupporter72.deserializeObjectConverter7();
        retrofit.client.Request request75 = serializedObjectSupporter72.deserializeObjectRequest1();
        builder66.serializedObjectSupporter = serializedObjectSupporter72;
        builder66.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder80 = builder78.setServer("hi!");
        java.util.concurrent.Executor executor81 = null;
        builder80.callbackExecutor = executor81;
        retrofit.RestAdapter restAdapter83 = builder80.build();
        retrofit.RestAdapter.Builder builder84 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor85 = null;
        builder84.sethttpExecutor(executor85);
        retrofit.Profiler profiler87 = null;
        builder84.profiler = profiler87;
        retrofit.RestAdapter.Log log89 = builder84.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter90 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler91 = serializedObjectSupporter90.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder92 = builder84.setErrorHandler(errorHandler91);
        retrofit.RestAdapter.Builder builder93 = builder80.setErrorHandler(errorHandler91);
        java.util.concurrent.Executor executor94 = builder93.callbackExecutor;
        builder66.setcallbackExecutor(executor94);
        builder65.callbackExecutor = executor94;
        retrofit.RestAdapter.Builder builder97 = builder6.setExecutors(executor50, executor94);
        builder0.httpExecutor = executor94;
        builder0.ensureSaneDefaults();
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(provider9);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(requestInterceptor24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNotNull(requestInterceptor29);
        org.junit.Assert.assertNotNull(gsonConverter30);
        org.junit.Assert.assertNotNull(gsonConverter31);
        org.junit.Assert.assertNotNull(server32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(restAdapter39);
        org.junit.Assert.assertNull(log45);
        org.junit.Assert.assertNotNull(errorHandler47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(executor50);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(provider55);
        org.junit.Assert.assertNull(requestInterceptor56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(provider60);
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(server71);
        org.junit.Assert.assertNotNull(requestInterceptor73);
        org.junit.Assert.assertNotNull(gsonConverter74);
        org.junit.Assert.assertNotNull(request75);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(restAdapter83);
        org.junit.Assert.assertNull(log89);
        org.junit.Assert.assertNotNull(errorHandler91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(executor94);
        org.junit.Assert.assertNotNull(builder97);
    }

    @Test
    public void test1505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1505");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter1 = serializedObjectSupporter0.deserializeObjectConverter2();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.mime.TypedString typedString4 = serializedObjectSupporter0.deserializeObjectTypedOutput2();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest5();
        org.junit.Assert.assertNotNull(gsonConverter1);
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(typedString4);
        org.junit.Assert.assertNotNull(request5);
    }

    @Test
    public void test1506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1506");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RestAdapter.Log log4 = null;
        builder0.log = log4;
        java.util.concurrent.Executor executor6 = builder0.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = builder7.getcallbackExecutor();
        retrofit.client.Client.Provider provider9 = null;
        builder7.clientProvider = provider9;
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor12 = serializedObjectSupporter11.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter13 = serializedObjectSupporter11.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter11.deserializeObjectConverter5();
        retrofit.client.Request request15 = serializedObjectSupporter11.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter11.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter11.deserializeObjectConverter6();
        retrofit.RestAdapter.Builder builder18 = builder7.setConverter((retrofit.converter.Converter) gsonConverter17);
        builder0.converter = gsonConverter17;
        retrofit.ErrorHandler errorHandler20 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder23 = builder21.setServer("hi!");
        java.util.concurrent.Executor executor24 = null;
        builder23.callbackExecutor = executor24;
        retrofit.RestAdapter restAdapter26 = builder23.build();
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor28 = null;
        builder27.sethttpExecutor(executor28);
        retrofit.Profiler profiler30 = null;
        builder27.profiler = profiler30;
        retrofit.RestAdapter.Log log32 = builder27.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter33 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler34 = serializedObjectSupporter33.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder35 = builder27.setErrorHandler(errorHandler34);
        retrofit.RestAdapter.Builder builder36 = builder23.setErrorHandler(errorHandler34);
        java.util.concurrent.Executor executor37 = builder36.callbackExecutor;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor39 = null;
        builder38.sethttpExecutor(executor39);
        retrofit.Profiler profiler41 = null;
        builder38.profiler = profiler41;
        retrofit.Server server43 = builder38.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter44 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor45 = serializedObjectSupporter44.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter46 = serializedObjectSupporter44.deserializeObjectConverter7();
        retrofit.client.Request request47 = serializedObjectSupporter44.deserializeObjectRequest1();
        builder38.serializedObjectSupporter = serializedObjectSupporter44;
        java.lang.String str49 = serializedObjectSupporter44.deserializeObjectString2();
        retrofit.ErrorHandler errorHandler50 = serializedObjectSupporter44.deserializeObjectErrorHandler1();
        builder36.errorHandler = errorHandler50;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder54 = builder52.setServer("hi!");
        retrofit.client.Client.Provider provider55 = builder52.clientProvider;
        retrofit.RestAdapter.Log log56 = null;
        builder52.log = log56;
        java.util.concurrent.Executor executor58 = builder52.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor60 = builder59.getcallbackExecutor();
        retrofit.client.Client.Provider provider61 = null;
        builder59.clientProvider = provider61;
        retrofit.SerializedObjectSupporter serializedObjectSupporter63 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor64 = serializedObjectSupporter63.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter65 = serializedObjectSupporter63.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter66 = serializedObjectSupporter63.deserializeObjectConverter5();
        retrofit.client.Request request67 = serializedObjectSupporter63.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter68 = serializedObjectSupporter63.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter69 = serializedObjectSupporter63.deserializeObjectConverter6();
        retrofit.RestAdapter.Builder builder70 = builder59.setConverter((retrofit.converter.Converter) gsonConverter69);
        builder52.converter = gsonConverter69;
        retrofit.ErrorHandler errorHandler72 = builder52.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter73 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler74 = serializedObjectSupporter73.deserializeObjectErrorHandler1();
        retrofit.Server server75 = serializedObjectSupporter73.deserializeObjectServer1();
        builder52.server = server75;
        retrofit.RestAdapter.Builder builder77 = builder36.setServer(server75);
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor79 = builder78.getcallbackExecutor();
        retrofit.client.Client.Provider provider80 = null;
        builder78.clientProvider = provider80;
        retrofit.Server server82 = null;
        builder78.server = server82;
        retrofit.RestAdapter.Log log84 = retrofit.RestAdapter.Log.NONE;
        builder78.log = log84;
        log84.log("hi!");
        builder36.log = log84;
        java.util.concurrent.Executor executor89 = builder36.callbackExecutor;
        builder0.setcallbackExecutor(executor89);
        retrofit.client.Client.Provider provider91 = builder0.getclientProvider();
        java.util.concurrent.Executor executor92 = builder0.gethttpExecutor();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNotNull(requestInterceptor12);
        org.junit.Assert.assertNotNull(gsonConverter13);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(gsonConverter16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(restAdapter26);
        org.junit.Assert.assertNull(log32);
        org.junit.Assert.assertNotNull(errorHandler34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(executor37);
        org.junit.Assert.assertNull(server43);
        org.junit.Assert.assertNotNull(requestInterceptor45);
        org.junit.Assert.assertNotNull(gsonConverter46);
        org.junit.Assert.assertNotNull(request47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Retrofit-Idle" + "'", str49, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler50);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(provider55);
        org.junit.Assert.assertNull(executor58);
        org.junit.Assert.assertNull(executor60);
        org.junit.Assert.assertNotNull(requestInterceptor64);
        org.junit.Assert.assertNotNull(gsonConverter65);
        org.junit.Assert.assertNotNull(gsonConverter66);
        org.junit.Assert.assertNotNull(request67);
        org.junit.Assert.assertNotNull(gsonConverter68);
        org.junit.Assert.assertNotNull(gsonConverter69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(errorHandler72);
        org.junit.Assert.assertNotNull(errorHandler74);
        org.junit.Assert.assertNotNull(server75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNull(executor79);
        org.junit.Assert.assertNotNull(log84);
        org.junit.Assert.assertNotNull(executor89);
        org.junit.Assert.assertNull(provider91);
        org.junit.Assert.assertNull(executor92);
    }

    @Test
    public void test1507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1507");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server4 = null;
        builder0.server = server4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = null;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        retrofit.ErrorHandler errorHandler17 = restAdapter16.errorHandler;
        java.util.concurrent.Executor executor18 = restAdapter16.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter16.getLogLevel();
        builder0.logLevel = logLevel19;
        java.util.concurrent.Executor executor21 = null;
        builder0.callbackExecutor = executor21;
        retrofit.SerializedObjectSupporter serializedObjectSupporter23 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor24 = serializedObjectSupporter23.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter25 = serializedObjectSupporter23.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter26 = serializedObjectSupporter23.deserializeObjectConverter7();
        retrofit.Server server27 = serializedObjectSupporter23.deserializeObjectServer1();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter23.deserializeObjectConverter7();
        retrofit.ErrorHandler errorHandler29 = serializedObjectSupporter23.deserializeObjectErrorHandler1();
        builder0.errorHandler = errorHandler29;
        retrofit.converter.Converter converter31 = builder0.converter;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor33 = null;
        builder32.sethttpExecutor(executor33);
        retrofit.converter.Converter converter35 = builder32.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter36 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor37 = serializedObjectSupporter36.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter38 = serializedObjectSupporter36.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter39 = serializedObjectSupporter36.deserializeObjectConverter7();
        retrofit.Server server40 = serializedObjectSupporter36.deserializeObjectServer1();
        retrofit.converter.GsonConverter gsonConverter41 = serializedObjectSupporter36.deserializeObjectConverter7();
        retrofit.ErrorHandler errorHandler42 = serializedObjectSupporter36.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder43 = builder32.setErrorHandler(errorHandler42);
        retrofit.converter.Converter converter44 = builder32.converter;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor46 = builder45.getcallbackExecutor();
        retrofit.client.Client.Provider provider47 = null;
        builder45.clientProvider = provider47;
        java.util.concurrent.Executor executor49 = builder45.getcallbackExecutor();
        retrofit.Server server50 = null;
        retrofit.client.Client.Provider provider51 = null;
        java.util.concurrent.Executor executor52 = null;
        java.util.concurrent.Executor executor53 = null;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        retrofit.converter.Converter converter55 = null;
        retrofit.Profiler profiler56 = null;
        retrofit.ErrorHandler errorHandler57 = null;
        retrofit.RestAdapter.Log log58 = null;
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter(server50, provider51, executor52, executor53, requestInterceptor54, converter55, profiler56, errorHandler57, log58, logLevel59);
        retrofit.ErrorHandler errorHandler61 = restAdapter60.errorHandler;
        int int62 = restAdapter60.getLOG_CHUNK_SIZE();
        retrofit.Server server63 = restAdapter60.getserver();
        retrofit.client.Client.Provider provider64 = restAdapter60.clientProvider;
        retrofit.client.Client.Provider provider65 = restAdapter60.getclientProvider();
        java.lang.String str66 = restAdapter60.getIDLE_THREAD_NAME();
        retrofit.Server server67 = null;
        retrofit.client.Client.Provider provider68 = null;
        java.util.concurrent.Executor executor69 = null;
        java.util.concurrent.Executor executor70 = null;
        retrofit.RequestInterceptor requestInterceptor71 = null;
        retrofit.converter.Converter converter72 = null;
        retrofit.Profiler profiler73 = null;
        retrofit.ErrorHandler errorHandler74 = null;
        retrofit.RestAdapter.Log log75 = null;
        retrofit.RestAdapter.LogLevel logLevel76 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter77 = new retrofit.RestAdapter(server67, provider68, executor69, executor70, requestInterceptor71, converter72, profiler73, errorHandler74, log75, logLevel76);
        retrofit.RestAdapter.LogLevel logLevel78 = restAdapter77.logLevel;
        retrofit.ErrorHandler errorHandler79 = restAdapter77.geterrorHandler();
        java.util.concurrent.Executor executor80 = restAdapter77.getcallbackExecutor();
        retrofit.converter.Converter converter81 = restAdapter77.converter;
        retrofit.Server server82 = restAdapter77.getserver();
        retrofit.RestAdapter.LogLevel logLevel83 = restAdapter77.getLogLevel();
        restAdapter60.setLogLevel(logLevel83);
        retrofit.RestAdapter.Builder builder85 = builder45.setLogLevel(logLevel83);
        boolean boolean86 = logLevel83.log();
        builder32.logLevel = logLevel83;
        retrofit.RestAdapter.Builder builder88 = builder0.setLogLevel(logLevel83);
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(requestInterceptor24);
        org.junit.Assert.assertNotNull(gsonConverter25);
        org.junit.Assert.assertNotNull(gsonConverter26);
        org.junit.Assert.assertNotNull(server27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(errorHandler29);
        org.junit.Assert.assertNull(converter31);
        org.junit.Assert.assertNull(converter35);
        org.junit.Assert.assertNotNull(requestInterceptor37);
        org.junit.Assert.assertNotNull(gsonConverter38);
        org.junit.Assert.assertNotNull(gsonConverter39);
        org.junit.Assert.assertNotNull(server40);
        org.junit.Assert.assertNotNull(gsonConverter41);
        org.junit.Assert.assertNotNull(errorHandler42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(converter44);
        org.junit.Assert.assertNull(executor46);
        org.junit.Assert.assertNull(executor49);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 4000 + "'", int62 == 4000);
        org.junit.Assert.assertNull(server63);
        org.junit.Assert.assertNull(provider64);
        org.junit.Assert.assertNull(provider65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Retrofit-Idle" + "'", str66, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler79);
        org.junit.Assert.assertNull(executor80);
        org.junit.Assert.assertNull(converter81);
        org.junit.Assert.assertNull(server82);
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(builder88);
    }

    @Test
    public void test1508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1508");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.RestAdapter restAdapter5 = builder2.build();
        retrofit.RestAdapter.Log log6 = restAdapter5.log;
        java.lang.String str7 = restAdapter5.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler8 = restAdapter5.geterrorHandler();
        retrofit.ErrorHandler errorHandler9 = restAdapter5.errorHandler;
        retrofit.ErrorHandler errorHandler10 = restAdapter5.geterrorHandler();
        retrofit.ErrorHandler errorHandler11 = restAdapter5.geterrorHandler();
        retrofit.ErrorHandler errorHandler12 = restAdapter5.errorHandler;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(restAdapter5);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Retrofit-Idle" + "'", str7, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler8);
        org.junit.Assert.assertNotNull(errorHandler9);
        org.junit.Assert.assertNotNull(errorHandler10);
        org.junit.Assert.assertNotNull(errorHandler11);
        org.junit.Assert.assertNotNull(errorHandler12);
    }

    @Test
    public void test1509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1509");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.Profiler profiler15 = restAdapter10.profiler;
        retrofit.converter.Converter converter16 = restAdapter10.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter17.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter17.deserializeObjectConverter4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter17;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter10.setLogLevel(logLevel22);
        int int24 = restAdapter10.getLOG_CHUNK_SIZE();
        java.util.concurrent.Executor executor25 = restAdapter10.getcallbackExecutor();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4000 + "'", int24 == 4000);
        org.junit.Assert.assertNull(executor25);
    }

    @Test
    public void test1510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1510");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString5();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest6();
        java.lang.String str5 = request4.method;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "http://example.com/" + "'", str1, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "POST" + "'", str2, "POST");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GET" + "'", str5, "GET");
    }

    @Test
    public void test1511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1511");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        java.util.concurrent.Executor executor14 = restAdapter10.getcallbackExecutor();
        retrofit.Server server15 = null;
        retrofit.client.Client.Provider provider16 = null;
        java.util.concurrent.Executor executor17 = null;
        java.util.concurrent.Executor executor18 = null;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        retrofit.converter.Converter converter20 = null;
        retrofit.Profiler profiler21 = null;
        retrofit.ErrorHandler errorHandler22 = null;
        retrofit.RestAdapter.Log log23 = null;
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter(server15, provider16, executor17, executor18, requestInterceptor19, converter20, profiler21, errorHandler22, log23, logLevel24);
        retrofit.ErrorHandler errorHandler26 = restAdapter25.errorHandler;
        int int27 = restAdapter25.getLOG_CHUNK_SIZE();
        retrofit.Server server28 = restAdapter25.getserver();
        retrofit.client.Client.Provider provider29 = restAdapter25.clientProvider;
        retrofit.client.Client.Provider provider30 = restAdapter25.getclientProvider();
        java.lang.String str31 = restAdapter25.getIDLE_THREAD_NAME();
        retrofit.Server server32 = null;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Log log40 = null;
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log40, logLevel41);
        retrofit.RestAdapter.LogLevel logLevel43 = restAdapter42.logLevel;
        retrofit.ErrorHandler errorHandler44 = restAdapter42.geterrorHandler();
        java.util.concurrent.Executor executor45 = restAdapter42.getcallbackExecutor();
        retrofit.converter.Converter converter46 = restAdapter42.converter;
        retrofit.Server server47 = restAdapter42.getserver();
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter42.getLogLevel();
        restAdapter25.setLogLevel(logLevel48);
        restAdapter10.logLevel = logLevel48;
        retrofit.client.Client.Provider provider51 = restAdapter10.getclientProvider();
        retrofit.client.Client.Provider provider52 = restAdapter10.clientProvider;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4000 + "'", int27 == 4000);
        org.junit.Assert.assertNull(server28);
        org.junit.Assert.assertNull(provider29);
        org.junit.Assert.assertNull(provider30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Retrofit-Idle" + "'", str31, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler44);
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertNull(converter46);
        org.junit.Assert.assertNull(server47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider51);
        org.junit.Assert.assertNull(provider52);
    }

    @Test
    public void test1512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1512");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.client.Request request9 = serializedObjectSupporter6.deserializeObjectRequest1();
        builder0.serializedObjectSupporter = serializedObjectSupporter6;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder14 = builder12.setServer("hi!");
        java.util.concurrent.Executor executor15 = null;
        builder14.callbackExecutor = executor15;
        retrofit.RestAdapter restAdapter17 = builder14.build();
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor19 = null;
        builder18.sethttpExecutor(executor19);
        retrofit.Profiler profiler21 = null;
        builder18.profiler = profiler21;
        retrofit.RestAdapter.Log log23 = builder18.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder26 = builder18.setErrorHandler(errorHandler25);
        retrofit.RestAdapter.Builder builder27 = builder14.setErrorHandler(errorHandler25);
        java.util.concurrent.Executor executor28 = builder27.callbackExecutor;
        builder0.setcallbackExecutor(executor28);
        retrofit.client.Client.Provider provider30 = builder0.getclientProvider();
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor32 = null;
        builder31.sethttpExecutor(executor32);
        retrofit.converter.Converter converter34 = builder31.converter;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor36 = null;
        builder35.sethttpExecutor(executor36);
        retrofit.converter.Converter converter38 = builder35.converter;
        java.util.concurrent.Executor executor39 = builder35.getcallbackExecutor();
        retrofit.client.Client.Provider provider40 = builder35.getclientProvider();
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder43 = builder41.setServer("hi!");
        java.util.concurrent.Executor executor44 = null;
        builder43.callbackExecutor = executor44;
        retrofit.RestAdapter restAdapter46 = builder43.build();
        retrofit.RestAdapter.Log log47 = restAdapter46.log;
        java.util.concurrent.Executor executor48 = restAdapter46.gethttpExecutor();
        retrofit.client.Client.Provider provider49 = restAdapter46.getclientProvider();
        builder35.setclientProvider(provider49);
        retrofit.RestAdapter.Builder builder51 = builder31.setClient(provider49);
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder54 = builder52.setServer("hi!");
        java.util.concurrent.Executor executor55 = null;
        builder54.callbackExecutor = executor55;
        retrofit.SerializedObjectSupporter serializedObjectSupporter57 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor58 = serializedObjectSupporter57.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder59 = builder54.setRequestInterceptor(requestInterceptor58);
        builder31.requestInterceptor = requestInterceptor58;
        retrofit.RestAdapter.Builder builder61 = builder0.setRequestInterceptor(requestInterceptor58);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(restAdapter17);
        org.junit.Assert.assertNull(log23);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(executor28);
        org.junit.Assert.assertNotNull(provider30);
        org.junit.Assert.assertNull(converter34);
        org.junit.Assert.assertNull(converter38);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNull(provider40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(restAdapter46);
        org.junit.Assert.assertNotNull(log47);
        org.junit.Assert.assertNotNull(executor48);
        org.junit.Assert.assertNotNull(provider49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(requestInterceptor58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test1513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1513");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.RestAdapter restAdapter5 = builder2.build();
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.sethttpExecutor(executor7);
        retrofit.Profiler profiler9 = null;
        builder6.profiler = profiler9;
        retrofit.RestAdapter.Log log11 = builder6.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler13 = serializedObjectSupporter12.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder14 = builder6.setErrorHandler(errorHandler13);
        retrofit.RestAdapter.Builder builder15 = builder2.setErrorHandler(errorHandler13);
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder17 = builder15.setLogLevel(logLevel16);
        java.util.concurrent.Executor executor18 = builder17.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor20 = null;
        builder19.sethttpExecutor(executor20);
        retrofit.Profiler profiler22 = null;
        builder19.profiler = profiler22;
        retrofit.RestAdapter.LogLevel logLevel24 = builder19.logLevel;
        java.util.concurrent.Executor executor25 = null;
        builder19.sethttpExecutor(executor25);
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder29 = builder27.setServer("hi!");
        java.util.concurrent.Executor executor30 = null;
        builder29.callbackExecutor = executor30;
        retrofit.SerializedObjectSupporter serializedObjectSupporter32 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor33 = serializedObjectSupporter32.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder34 = builder29.setRequestInterceptor(requestInterceptor33);
        retrofit.RestAdapter.Builder builder35 = builder19.setRequestInterceptor(requestInterceptor33);
        java.util.concurrent.Executor executor36 = builder35.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter37 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor38 = serializedObjectSupporter37.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter39 = serializedObjectSupporter37.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter40 = serializedObjectSupporter37.deserializeObjectConverter7();
        retrofit.Server server41 = serializedObjectSupporter37.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder42 = builder35.setServer(server41);
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder45 = builder43.setServer("hi!");
        java.util.concurrent.Executor executor46 = null;
        builder45.callbackExecutor = executor46;
        retrofit.RestAdapter restAdapter48 = builder45.build();
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor50 = null;
        builder49.sethttpExecutor(executor50);
        retrofit.Profiler profiler52 = null;
        builder49.profiler = profiler52;
        retrofit.RestAdapter.Log log54 = builder49.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter55 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler56 = serializedObjectSupporter55.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder57 = builder49.setErrorHandler(errorHandler56);
        retrofit.RestAdapter.Builder builder58 = builder45.setErrorHandler(errorHandler56);
        java.util.concurrent.Executor executor59 = builder58.callbackExecutor;
        builder42.sethttpExecutor(executor59);
        builder17.setcallbackExecutor(executor59);
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor63 = null;
        builder62.sethttpExecutor(executor63);
        retrofit.Profiler profiler65 = null;
        builder62.profiler = profiler65;
        retrofit.Server server67 = builder62.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter68 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor69 = serializedObjectSupporter68.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter70 = serializedObjectSupporter68.deserializeObjectConverter7();
        retrofit.client.Request request71 = serializedObjectSupporter68.deserializeObjectRequest1();
        builder62.serializedObjectSupporter = serializedObjectSupporter68;
        builder62.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder76 = builder74.setServer("hi!");
        java.util.concurrent.Executor executor77 = null;
        builder76.callbackExecutor = executor77;
        retrofit.RestAdapter restAdapter79 = builder76.build();
        retrofit.RestAdapter.Log log80 = restAdapter79.log;
        java.util.concurrent.Executor executor81 = restAdapter79.gethttpExecutor();
        retrofit.client.Client.Provider provider82 = restAdapter79.getclientProvider();
        builder62.setclientProvider(provider82);
        builder17.setclientProvider(provider82);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(restAdapter5);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertNotNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(executor18);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(requestInterceptor33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(executor36);
        org.junit.Assert.assertNotNull(requestInterceptor38);
        org.junit.Assert.assertNotNull(gsonConverter39);
        org.junit.Assert.assertNotNull(gsonConverter40);
        org.junit.Assert.assertNotNull(server41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(restAdapter48);
        org.junit.Assert.assertNull(log54);
        org.junit.Assert.assertNotNull(errorHandler56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(executor59);
        org.junit.Assert.assertNull(server67);
        org.junit.Assert.assertNotNull(requestInterceptor69);
        org.junit.Assert.assertNotNull(gsonConverter70);
        org.junit.Assert.assertNotNull(request71);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(restAdapter79);
        org.junit.Assert.assertNotNull(log80);
        org.junit.Assert.assertNotNull(executor81);
        org.junit.Assert.assertNotNull(provider82);
    }

    @Test
    public void test1514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1514");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = null;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter13;
        retrofit.client.Client.Provider provider15 = restAdapter10.getclientProvider();
        retrofit.ErrorHandler errorHandler16 = restAdapter10.geterrorHandler();
        retrofit.RestAdapter.Log log17 = restAdapter10.log;
        java.util.concurrent.Executor executor18 = restAdapter10.gethttpExecutor();
        retrofit.client.Client.Provider provider19 = restAdapter10.getclientProvider();
        retrofit.Profiler profiler20 = restAdapter10.profiler;
        java.util.concurrent.Executor executor21 = restAdapter10.callbackExecutor;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNull(log17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(provider19);
        org.junit.Assert.assertNull(profiler20);
        org.junit.Assert.assertNull(executor21);
    }

    @Test
    public void test1515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1515");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.client.Client.Provider provider3 = builder0.getclientProvider();
        retrofit.client.Client.Provider provider4 = builder0.getclientProvider();
        retrofit.Server server5 = builder0.server;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.sethttpExecutor(executor7);
        retrofit.Profiler profiler9 = null;
        builder6.profiler = profiler9;
        retrofit.Server server11 = builder6.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor13 = serializedObjectSupporter12.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter12.deserializeObjectConverter7();
        retrofit.client.Request request15 = serializedObjectSupporter12.deserializeObjectRequest1();
        builder6.serializedObjectSupporter = serializedObjectSupporter12;
        retrofit.client.Request request17 = serializedObjectSupporter12.deserializeObjectRequest2();
        retrofit.mime.TypedString typedString18 = serializedObjectSupporter12.deserializeObjectTypedOutput2();
        builder0.serializedObjectSupporter = serializedObjectSupporter12;
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter12.deserializeObjectConverter7();
        retrofit.ErrorHandler errorHandler21 = serializedObjectSupporter12.deserializeObjectErrorHandler1();
        retrofit.client.Request request22 = serializedObjectSupporter12.deserializeObjectRequest6();
        java.lang.String str23 = request22.url;
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(provider4);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNull(server11);
        org.junit.Assert.assertNotNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertNotNull(typedString18);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNotNull(errorHandler21);
        org.junit.Assert.assertNotNull(request22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "http://example.com/" + "'", str23, "http://example.com/");
    }

    @Test
    public void test1516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1516");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider5 = builder0.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request7 = serializedObjectSupporter6.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler8 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        builder0.errorHandler = errorHandler8;
        retrofit.RestAdapter.Log log10 = builder0.log;
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Log log19 = null;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log19, logLevel20);
        retrofit.ErrorHandler errorHandler22 = restAdapter21.errorHandler;
        retrofit.ErrorHandler errorHandler23 = restAdapter21.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter21.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request26 = serializedObjectSupporter25.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter27 = serializedObjectSupporter25.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter25.deserializeObjectConverter1();
        restHandler24.serializedObjectSupporter = serializedObjectSupporter25;
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = restHandler24.serializedObjectSupporter;
        java.lang.String str31 = serializedObjectSupporter30.deserializeObjectString5();
        builder0.serializedObjectSupporter = serializedObjectSupporter30;
        retrofit.client.Request request33 = serializedObjectSupporter30.deserializeObjectRequest5();
        java.lang.String str34 = serializedObjectSupporter30.deserializeObjectString5();
        retrofit.client.Request request35 = serializedObjectSupporter30.deserializeObjectRequest1();
        retrofit.converter.GsonConverter gsonConverter36 = serializedObjectSupporter30.deserializeObjectConverter2();
        retrofit.client.Request request37 = serializedObjectSupporter30.deserializeObjectRequest4();
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(errorHandler8);
        org.junit.Assert.assertNull(log10);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNotNull(request26);
        org.junit.Assert.assertNotNull(gsonConverter27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(serializedObjectSupporter30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "POST" + "'", str31, "POST");
        org.junit.Assert.assertNotNull(request33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "POST" + "'", str34, "POST");
        org.junit.Assert.assertNotNull(request35);
        org.junit.Assert.assertNotNull(gsonConverter36);
        org.junit.Assert.assertNotNull(request37);
    }

    @Test
    public void test1517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1517");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean6 = logLevel5.log();
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder9 = builder0.setServer("http://example.com/");
        java.util.concurrent.Executor executor10 = builder0.httpExecutor;
        retrofit.client.Client.Provider provider11 = null;
        builder0.clientProvider = provider11;
        retrofit.Server server13 = builder0.server;
        java.util.concurrent.Executor executor14 = builder0.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor16 = serializedObjectSupporter15.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter15.deserializeObjectConverter8();
        java.lang.String str18 = serializedObjectSupporter15.deserializeObjectString1();
        java.lang.String str19 = serializedObjectSupporter15.deserializeObjectString4();
        retrofit.ErrorHandler errorHandler20 = serializedObjectSupporter15.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder21 = builder0.setErrorHandler(errorHandler20);
        retrofit.client.Client.Provider provider22 = builder21.getclientProvider();
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor24 = builder23.getcallbackExecutor();
        retrofit.client.Client.Provider provider25 = null;
        builder23.clientProvider = provider25;
        retrofit.Server server27 = null;
        builder23.server = server27;
        java.util.concurrent.Executor executor29 = builder23.gethttpExecutor();
        java.util.concurrent.Executor executor30 = builder23.httpExecutor;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor32 = null;
        builder31.sethttpExecutor(executor32);
        retrofit.converter.Converter converter34 = builder31.converter;
        java.util.concurrent.Executor executor35 = builder31.getcallbackExecutor();
        retrofit.client.Client.Provider provider36 = builder31.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter37 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request38 = serializedObjectSupporter37.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler39 = serializedObjectSupporter37.deserializeObjectErrorHandler1();
        builder31.errorHandler = errorHandler39;
        retrofit.Server server41 = builder31.server;
        builder31.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor43 = builder31.requestInterceptor;
        java.util.concurrent.Executor executor44 = builder31.gethttpExecutor();
        builder23.sethttpExecutor(executor44);
        builder21.sethttpExecutor(executor44);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNotNull(requestInterceptor16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Retrofit-" + "'", str18, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(provider22);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNull(converter34);
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertNull(provider36);
        org.junit.Assert.assertNotNull(request38);
        org.junit.Assert.assertNotNull(errorHandler39);
        org.junit.Assert.assertNull(server41);
        org.junit.Assert.assertNotNull(requestInterceptor43);
        org.junit.Assert.assertNotNull(executor44);
    }

    @Test
    public void test1518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1518");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider5 = builder0.getclientProvider();
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("hi!");
        java.util.concurrent.Executor executor9 = null;
        builder8.callbackExecutor = executor9;
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor12 = serializedObjectSupporter11.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder13 = builder8.setRequestInterceptor(requestInterceptor12);
        retrofit.SerializedObjectSupporter serializedObjectSupporter14 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request15 = serializedObjectSupporter14.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter14.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter14.deserializeObjectConverter1();
        builder13.converter = gsonConverter17;
        retrofit.RestAdapter.Builder builder19 = builder0.setConverter((retrofit.converter.Converter) gsonConverter17);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor21 = builder20.getcallbackExecutor();
        retrofit.client.Client.Provider provider22 = null;
        builder20.clientProvider = provider22;
        java.util.concurrent.Executor executor24 = builder20.getcallbackExecutor();
        retrofit.RestAdapter.Log log25 = builder20.log;
        retrofit.ErrorHandler errorHandler26 = builder20.errorHandler;
        retrofit.Profiler profiler27 = builder20.profiler;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor29 = null;
        builder28.sethttpExecutor(executor29);
        retrofit.client.Client.Provider provider31 = builder28.getclientProvider();
        retrofit.client.Client.Provider provider32 = builder28.getclientProvider();
        retrofit.Server server33 = builder28.server;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor35 = null;
        builder34.sethttpExecutor(executor35);
        retrofit.Profiler profiler37 = null;
        builder34.profiler = profiler37;
        retrofit.Server server39 = builder34.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter40 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor41 = serializedObjectSupporter40.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter42 = serializedObjectSupporter40.deserializeObjectConverter7();
        retrofit.client.Request request43 = serializedObjectSupporter40.deserializeObjectRequest1();
        builder34.serializedObjectSupporter = serializedObjectSupporter40;
        retrofit.client.Request request45 = serializedObjectSupporter40.deserializeObjectRequest2();
        retrofit.mime.TypedString typedString46 = serializedObjectSupporter40.deserializeObjectTypedOutput2();
        builder28.serializedObjectSupporter = serializedObjectSupporter40;
        java.util.concurrent.Executor executor48 = builder28.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter49 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request50 = serializedObjectSupporter49.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler51 = serializedObjectSupporter49.deserializeObjectErrorHandler1();
        retrofit.mime.TypedString typedString52 = serializedObjectSupporter49.deserializeObjectTypedOutput2();
        retrofit.ErrorHandler errorHandler53 = serializedObjectSupporter49.deserializeObjectErrorHandler1();
        builder28.errorHandler = errorHandler53;
        retrofit.RestAdapter.Builder builder55 = builder20.setErrorHandler(errorHandler53);
        retrofit.RestAdapter.Builder builder56 = builder0.setErrorHandler(errorHandler53);
        retrofit.client.Client.Provider provider57 = builder56.getclientProvider();
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor59 = builder58.getcallbackExecutor();
        retrofit.client.Client.Provider provider60 = null;
        builder58.clientProvider = provider60;
        retrofit.Server server62 = null;
        builder58.server = server62;
        java.util.concurrent.Executor executor64 = builder58.gethttpExecutor();
        java.util.concurrent.Executor executor65 = builder58.gethttpExecutor();
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor67 = null;
        builder66.sethttpExecutor(executor67);
        retrofit.converter.Converter converter69 = builder66.converter;
        java.util.concurrent.Executor executor70 = builder66.getcallbackExecutor();
        retrofit.client.Client.Provider provider71 = builder66.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter72 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request73 = serializedObjectSupporter72.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler74 = serializedObjectSupporter72.deserializeObjectErrorHandler1();
        builder66.errorHandler = errorHandler74;
        retrofit.Server server76 = builder66.server;
        builder66.ensureSaneDefaults();
        java.util.concurrent.Executor executor78 = builder66.gethttpExecutor();
        builder58.setcallbackExecutor(executor78);
        builder56.callbackExecutor = executor78;
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(requestInterceptor12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(gsonConverter16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(log25);
        org.junit.Assert.assertNull(errorHandler26);
        org.junit.Assert.assertNull(profiler27);
        org.junit.Assert.assertNull(provider31);
        org.junit.Assert.assertNull(provider32);
        org.junit.Assert.assertNull(server33);
        org.junit.Assert.assertNull(server39);
        org.junit.Assert.assertNotNull(requestInterceptor41);
        org.junit.Assert.assertNotNull(gsonConverter42);
        org.junit.Assert.assertNotNull(request43);
        org.junit.Assert.assertNotNull(request45);
        org.junit.Assert.assertNotNull(typedString46);
        org.junit.Assert.assertNull(executor48);
        org.junit.Assert.assertNotNull(request50);
        org.junit.Assert.assertNotNull(errorHandler51);
        org.junit.Assert.assertNotNull(typedString52);
        org.junit.Assert.assertNotNull(errorHandler53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(provider57);
        org.junit.Assert.assertNull(executor59);
        org.junit.Assert.assertNull(executor64);
        org.junit.Assert.assertNull(executor65);
        org.junit.Assert.assertNull(converter69);
        org.junit.Assert.assertNull(executor70);
        org.junit.Assert.assertNull(provider71);
        org.junit.Assert.assertNotNull(request73);
        org.junit.Assert.assertNotNull(errorHandler74);
        org.junit.Assert.assertNull(server76);
        org.junit.Assert.assertNotNull(executor78);
    }

    @Test
    public void test1519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1519");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.RequestInterceptor requestInterceptor4 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter4();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString3();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString3();
        retrofit.client.Request request8 = serializedObjectSupporter0.deserializeObjectRequest8();
        retrofit.Server server9 = serializedObjectSupporter0.deserializeObjectServer1();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(requestInterceptor4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GET" + "'", str6, "GET");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GET" + "'", str7, "GET");
        org.junit.Assert.assertNotNull(request8);
        org.junit.Assert.assertNotNull(server9);
    }

    @Test
    public void test1520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1520");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter8();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest1();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.mime.TypedString typedString7 = serializedObjectSupporter0.deserializeObjectTypedOutput2();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(gsonConverter6);
        org.junit.Assert.assertNotNull(typedString7);
    }

    @Test
    public void test1521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1521");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.client.Client.Provider provider15 = restAdapter10.getclientProvider();
        java.lang.String str16 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.Profiler profiler17 = restAdapter10.getprofiler();
        retrofit.Server server18 = null;
        retrofit.client.Client.Provider provider19 = null;
        java.util.concurrent.Executor executor20 = null;
        java.util.concurrent.Executor executor21 = null;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        retrofit.converter.Converter converter23 = null;
        retrofit.Profiler profiler24 = null;
        retrofit.ErrorHandler errorHandler25 = null;
        retrofit.RestAdapter.Log log26 = null;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server18, provider19, executor20, executor21, requestInterceptor22, converter23, profiler24, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler29 = restAdapter28.errorHandler;
        int int30 = restAdapter28.getLOG_CHUNK_SIZE();
        retrofit.Server server31 = restAdapter28.getserver();
        java.util.concurrent.Executor executor32 = restAdapter28.getcallbackExecutor();
        retrofit.Server server33 = null;
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.RestAdapter.Log log41 = null;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter(server33, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log41, logLevel42);
        retrofit.ErrorHandler errorHandler44 = restAdapter43.errorHandler;
        int int45 = restAdapter43.getLOG_CHUNK_SIZE();
        retrofit.Server server46 = restAdapter43.getserver();
        retrofit.client.Client.Provider provider47 = restAdapter43.clientProvider;
        retrofit.client.Client.Provider provider48 = restAdapter43.getclientProvider();
        java.lang.String str49 = restAdapter43.getIDLE_THREAD_NAME();
        retrofit.Server server50 = null;
        retrofit.client.Client.Provider provider51 = null;
        java.util.concurrent.Executor executor52 = null;
        java.util.concurrent.Executor executor53 = null;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        retrofit.converter.Converter converter55 = null;
        retrofit.Profiler profiler56 = null;
        retrofit.ErrorHandler errorHandler57 = null;
        retrofit.RestAdapter.Log log58 = null;
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter(server50, provider51, executor52, executor53, requestInterceptor54, converter55, profiler56, errorHandler57, log58, logLevel59);
        retrofit.RestAdapter.LogLevel logLevel61 = restAdapter60.logLevel;
        retrofit.ErrorHandler errorHandler62 = restAdapter60.geterrorHandler();
        java.util.concurrent.Executor executor63 = restAdapter60.getcallbackExecutor();
        retrofit.converter.Converter converter64 = restAdapter60.converter;
        retrofit.Server server65 = restAdapter60.getserver();
        retrofit.RestAdapter.LogLevel logLevel66 = restAdapter60.getLogLevel();
        restAdapter43.setLogLevel(logLevel66);
        restAdapter28.logLevel = logLevel66;
        retrofit.client.Client.Provider provider69 = restAdapter28.getclientProvider();
        retrofit.RestAdapter.LogLevel logLevel70 = restAdapter28.getLogLevel();
        restAdapter10.setLogLevel(logLevel70);
        int int72 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.client.Response response74 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response76 = restAdapter10.logAndReplaceResponse("", response74, (long) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Retrofit-Idle" + "'", str16, "Retrofit-Idle");
        org.junit.Assert.assertNull(profiler17);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4000 + "'", int30 == 4000);
        org.junit.Assert.assertNull(server31);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 4000 + "'", int45 == 4000);
        org.junit.Assert.assertNull(server46);
        org.junit.Assert.assertNull(provider47);
        org.junit.Assert.assertNull(provider48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Retrofit-Idle" + "'", str49, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler62);
        org.junit.Assert.assertNull(executor63);
        org.junit.Assert.assertNull(converter64);
        org.junit.Assert.assertNull(server65);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 4000 + "'", int72 == 4000);
    }

    @Test
    public void test1522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1522");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = null;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter13;
        java.util.concurrent.Executor executor15 = restAdapter10.callbackExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor17 = serializedObjectSupporter16.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter18 = serializedObjectSupporter16.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter16.deserializeObjectConverter5();
        retrofit.client.Request request20 = serializedObjectSupporter16.deserializeObjectRequest4();
        retrofit.ErrorHandler errorHandler21 = serializedObjectSupporter16.deserializeObjectErrorHandler1();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter16;
        retrofit.client.Client.Provider provider23 = restAdapter10.getclientProvider();
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = null;
        builder24.sethttpExecutor(executor25);
        retrofit.Profiler profiler27 = null;
        builder24.profiler = profiler27;
        retrofit.RestAdapter.LogLevel logLevel29 = builder24.logLevel;
        java.util.concurrent.Executor executor30 = null;
        builder24.sethttpExecutor(executor30);
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder34 = builder32.setServer("hi!");
        java.util.concurrent.Executor executor35 = null;
        builder34.callbackExecutor = executor35;
        retrofit.SerializedObjectSupporter serializedObjectSupporter37 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor38 = serializedObjectSupporter37.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder39 = builder34.setRequestInterceptor(requestInterceptor38);
        retrofit.RestAdapter.Builder builder40 = builder24.setRequestInterceptor(requestInterceptor38);
        java.util.concurrent.Executor executor41 = null;
        builder24.setcallbackExecutor(executor41);
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder45 = builder43.setServer("hi!");
        java.util.concurrent.Executor executor46 = null;
        builder45.callbackExecutor = executor46;
        retrofit.SerializedObjectSupporter serializedObjectSupporter48 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor49 = serializedObjectSupporter48.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder50 = builder45.setRequestInterceptor(requestInterceptor49);
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder53 = builder51.setServer("hi!");
        java.util.concurrent.Executor executor54 = null;
        builder53.callbackExecutor = executor54;
        retrofit.SerializedObjectSupporter serializedObjectSupporter56 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor57 = serializedObjectSupporter56.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder58 = builder53.setRequestInterceptor(requestInterceptor57);
        builder50.requestInterceptor = requestInterceptor57;
        retrofit.RestAdapter.Builder builder60 = builder24.setRequestInterceptor(requestInterceptor57);
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder63 = builder61.setServer("hi!");
        java.util.concurrent.Executor executor64 = null;
        builder63.callbackExecutor = executor64;
        retrofit.RestAdapter restAdapter66 = builder63.build();
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder69 = builder67.setServer("hi!");
        retrofit.client.Client.Provider provider70 = builder67.clientProvider;
        retrofit.RequestInterceptor requestInterceptor71 = builder67.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel72 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean73 = logLevel72.log();
        retrofit.RestAdapter.Builder builder74 = builder67.setLogLevel(logLevel72);
        builder63.logLevel = logLevel72;
        builder24.logLevel = logLevel72;
        restAdapter10.logLevel = logLevel72;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNotNull(requestInterceptor17);
        org.junit.Assert.assertNotNull(gsonConverter18);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertNotNull(errorHandler21);
        org.junit.Assert.assertNull(provider23);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(requestInterceptor38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(requestInterceptor49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(requestInterceptor57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(restAdapter66);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNull(provider70);
        org.junit.Assert.assertNull(requestInterceptor71);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(builder74);
    }

    @Test
    public void test1523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1523");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString2();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString1();
        retrofit.RequestInterceptor requestInterceptor3 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest5();
        java.lang.String str5 = request4.getUrl();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Retrofit-Idle" + "'", str1, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Retrofit-" + "'", str2, "Retrofit-");
        org.junit.Assert.assertNotNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "http://example.com/" + "'", str5, "http://example.com/");
    }

    @Test
    public void test1524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1524");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler1 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.Server server2 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.Server server3 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.Server server4 = serializedObjectSupporter0.deserializeObjectServer1();
        org.junit.Assert.assertNotNull(errorHandler1);
        org.junit.Assert.assertNotNull(server2);
        org.junit.Assert.assertNotNull(server3);
        org.junit.Assert.assertNotNull(server4);
    }

    @Test
    public void test1525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1525");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.errorHandler;
        retrofit.converter.Converter converter13 = restAdapter10.converter;
        retrofit.Profiler profiler14 = restAdapter10.getprofiler();
        int int15 = restAdapter10.getLOG_CHUNK_SIZE();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertNull(profiler14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4000 + "'", int15 == 4000);
    }

    @Test
    public void test1526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1526");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.Profiler profiler15 = restAdapter10.profiler;
        retrofit.converter.Converter converter16 = restAdapter10.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter17.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter17.deserializeObjectConverter4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter17;
        retrofit.Profiler profiler22 = restAdapter10.profiler;
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.Log log24 = restAdapter10.log;
        retrofit.Server server25 = null;
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Log log33 = null;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server25, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log33, logLevel34);
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter35.logLevel;
        retrofit.ErrorHandler errorHandler37 = restAdapter35.geterrorHandler();
        java.util.concurrent.Executor executor38 = restAdapter35.getcallbackExecutor();
        retrofit.converter.Converter converter39 = restAdapter35.converter;
        retrofit.Server server40 = restAdapter35.getserver();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter35.getLogLevel();
        restAdapter10.logLevel = logLevel41;
        java.util.concurrent.Executor executor43 = restAdapter10.gethttpExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter44 = new retrofit.SerializedObjectSupporter();
        java.lang.String str45 = serializedObjectSupporter44.deserializeObjectString2();
        java.lang.String str46 = serializedObjectSupporter44.deserializeObjectString1();
        retrofit.RequestInterceptor requestInterceptor47 = serializedObjectSupporter44.deserializeObjectRequestInterceptor1();
        retrofit.client.Request request48 = serializedObjectSupporter44.deserializeObjectRequest4();
        retrofit.client.Request request49 = serializedObjectSupporter44.deserializeObjectRequest2();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter44;
        retrofit.ErrorHandler errorHandler51 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor52 = restAdapter10.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor53 = restAdapter10.requestInterceptor;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(log24);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNull(converter39);
        org.junit.Assert.assertNull(server40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(executor43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Retrofit-Idle" + "'", str45, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Retrofit-" + "'", str46, "Retrofit-");
        org.junit.Assert.assertNotNull(requestInterceptor47);
        org.junit.Assert.assertNotNull(request48);
        org.junit.Assert.assertNotNull(request49);
        org.junit.Assert.assertNull(errorHandler51);
        org.junit.Assert.assertNull(executor52);
        org.junit.Assert.assertNull(requestInterceptor53);
    }

    @Test
    public void test1527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1527");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.RestAdapter restAdapter5 = builder2.build();
        retrofit.RestAdapter.Log log6 = restAdapter5.log;
        java.util.concurrent.Executor executor7 = restAdapter5.gethttpExecutor();
        java.lang.String str8 = restAdapter5.getIDLE_THREAD_NAME();
        retrofit.Server server9 = null;
        retrofit.client.Client.Provider provider10 = null;
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        retrofit.converter.Converter converter14 = null;
        retrofit.Profiler profiler15 = null;
        retrofit.ErrorHandler errorHandler16 = null;
        retrofit.RestAdapter.Log log17 = null;
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter(server9, provider10, executor11, executor12, requestInterceptor13, converter14, profiler15, errorHandler16, log17, logLevel18);
        retrofit.ErrorHandler errorHandler20 = restAdapter19.errorHandler;
        java.util.concurrent.Executor executor21 = restAdapter19.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter19.getLogLevel();
        restAdapter5.logLevel = logLevel22;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = restAdapter5.serializedObjectSupporter;
        retrofit.Profiler profiler25 = restAdapter5.profiler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor27 = serializedObjectSupporter26.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter26.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter29 = serializedObjectSupporter26.deserializeObjectConverter7();
        restAdapter5.serializedObjectSupporter = serializedObjectSupporter26;
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter5.getLogLevel();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(restAdapter5);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertNotNull(executor7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Retrofit-Idle" + "'", str8, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(serializedObjectSupporter24);
        org.junit.Assert.assertNull(profiler25);
        org.junit.Assert.assertNotNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(gsonConverter29);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test1528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1528");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = null;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter13;
        retrofit.client.Client.Provider provider15 = restAdapter10.getclientProvider();
        retrofit.ErrorHandler errorHandler16 = restAdapter10.geterrorHandler();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter10.logLevel;
        java.lang.String str18 = restAdapter10.getTHREAD_PREFIX();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter10.getLogLevel();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Retrofit-" + "'", str18, "Retrofit-");
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test1529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1529");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter1 = serializedObjectSupporter0.deserializeObjectConverter2();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest3();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString4();
        retrofit.ErrorHandler errorHandler6 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.mime.TypedString typedString8 = serializedObjectSupporter0.deserializeObjectTypedOutput2();
        retrofit.client.Request request9 = serializedObjectSupporter0.deserializeObjectRequest8();
        java.lang.String str10 = serializedObjectSupporter0.deserializeObjectString5();
        org.junit.Assert.assertNotNull(gsonConverter1);
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "http://example.com/" + "'", str5, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler6);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(typedString8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "POST" + "'", str10, "POST");
    }

    @Test
    public void test1530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1530");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        java.lang.String str13 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.converter.Converter converter14 = restAdapter10.converter;
        retrofit.ErrorHandler errorHandler15 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor16 = restAdapter10.httpExecutor;
        retrofit.client.Client.Provider provider17 = restAdapter10.getclientProvider();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-Idle" + "'", str13, "Retrofit-Idle");
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(provider17);
    }

    @Test
    public void test1531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1531");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler7 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder8 = builder0.setErrorHandler(errorHandler7);
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder11 = builder9.setServer("hi!");
        retrofit.client.Client.Provider provider12 = builder9.clientProvider;
        retrofit.RequestInterceptor requestInterceptor13 = builder9.requestInterceptor;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.client.Client.Provider provider17 = builder14.clientProvider;
        java.util.concurrent.Executor executor18 = null;
        builder14.setcallbackExecutor(executor18);
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder21 = builder14.setLog(log20);
        retrofit.RestAdapter.Builder builder22 = builder9.setLog(log20);
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor24 = null;
        builder23.sethttpExecutor(executor24);
        retrofit.Profiler profiler26 = null;
        builder23.profiler = profiler26;
        retrofit.RestAdapter.LogLevel logLevel28 = builder23.logLevel;
        java.util.concurrent.Executor executor29 = null;
        builder23.sethttpExecutor(executor29);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder33 = builder31.setServer("hi!");
        java.util.concurrent.Executor executor34 = null;
        builder33.callbackExecutor = executor34;
        retrofit.SerializedObjectSupporter serializedObjectSupporter36 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor37 = serializedObjectSupporter36.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder38 = builder33.setRequestInterceptor(requestInterceptor37);
        retrofit.RestAdapter.Builder builder39 = builder23.setRequestInterceptor(requestInterceptor37);
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean41 = logLevel40.log();
        builder23.logLevel = logLevel40;
        retrofit.SerializedObjectSupporter serializedObjectSupporter43 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor44 = serializedObjectSupporter43.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter45 = serializedObjectSupporter43.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter46 = serializedObjectSupporter43.deserializeObjectConverter5();
        retrofit.client.Request request47 = serializedObjectSupporter43.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter48 = serializedObjectSupporter43.deserializeObjectConverter3();
        retrofit.client.Request request49 = serializedObjectSupporter43.deserializeObjectRequest4();
        retrofit.client.Request request50 = serializedObjectSupporter43.deserializeObjectRequest2();
        builder23.serializedObjectSupporter = serializedObjectSupporter43;
        retrofit.converter.GsonConverter gsonConverter52 = serializedObjectSupporter43.deserializeObjectConverter5();
        builder9.serializedObjectSupporter = serializedObjectSupporter43;
        builder9.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor56 = null;
        builder55.sethttpExecutor(executor56);
        retrofit.Profiler profiler58 = null;
        builder55.profiler = profiler58;
        retrofit.RestAdapter.Log log60 = builder55.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter61 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler62 = serializedObjectSupporter61.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder63 = builder55.setErrorHandler(errorHandler62);
        builder9.errorHandler = errorHandler62;
        retrofit.RestAdapter.Builder builder65 = builder8.setErrorHandler(errorHandler62);
        retrofit.ErrorHandler errorHandler66 = builder8.errorHandler;
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNotNull(errorHandler7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(provider17);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(requestInterceptor37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(requestInterceptor44);
        org.junit.Assert.assertNotNull(gsonConverter45);
        org.junit.Assert.assertNotNull(gsonConverter46);
        org.junit.Assert.assertNotNull(request47);
        org.junit.Assert.assertNotNull(gsonConverter48);
        org.junit.Assert.assertNotNull(request49);
        org.junit.Assert.assertNotNull(request50);
        org.junit.Assert.assertNotNull(gsonConverter52);
        org.junit.Assert.assertNull(log60);
        org.junit.Assert.assertNotNull(errorHandler62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(errorHandler66);
    }

    @Test
    public void test1532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1532");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.Profiler profiler15 = restAdapter10.profiler;
        retrofit.converter.Converter converter16 = restAdapter10.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter17.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter17.deserializeObjectConverter4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter17;
        retrofit.Profiler profiler22 = restAdapter10.profiler;
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.Log log24 = restAdapter10.log;
        retrofit.Server server25 = null;
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Log log33 = null;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server25, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log33, logLevel34);
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter35.logLevel;
        retrofit.ErrorHandler errorHandler37 = restAdapter35.geterrorHandler();
        java.util.concurrent.Executor executor38 = restAdapter35.getcallbackExecutor();
        retrofit.converter.Converter converter39 = restAdapter35.converter;
        retrofit.Server server40 = restAdapter35.getserver();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter35.getLogLevel();
        restAdapter10.logLevel = logLevel41;
        java.util.concurrent.Executor executor43 = restAdapter10.gethttpExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter44 = new retrofit.SerializedObjectSupporter();
        java.lang.String str45 = serializedObjectSupporter44.deserializeObjectString2();
        java.lang.String str46 = serializedObjectSupporter44.deserializeObjectString1();
        retrofit.RequestInterceptor requestInterceptor47 = serializedObjectSupporter44.deserializeObjectRequestInterceptor1();
        retrofit.client.Request request48 = serializedObjectSupporter44.deserializeObjectRequest4();
        retrofit.client.Request request49 = serializedObjectSupporter44.deserializeObjectRequest2();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter44;
        retrofit.ErrorHandler errorHandler51 = restAdapter10.geterrorHandler();
        retrofit.Server server52 = restAdapter10.server;
        java.util.concurrent.Executor executor53 = restAdapter10.gethttpExecutor();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(log24);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNull(converter39);
        org.junit.Assert.assertNull(server40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(executor43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Retrofit-Idle" + "'", str45, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Retrofit-" + "'", str46, "Retrofit-");
        org.junit.Assert.assertNotNull(requestInterceptor47);
        org.junit.Assert.assertNotNull(request48);
        org.junit.Assert.assertNotNull(request49);
        org.junit.Assert.assertNull(errorHandler51);
        org.junit.Assert.assertNull(server52);
        org.junit.Assert.assertNull(executor53);
    }

    @Test
    public void test1533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1533");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter10.new RestHandler();
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        retrofit.RestAdapter.LogLevel logLevel25 = restAdapter24.logLevel;
        restAdapter10.logLevel = logLevel25;
        retrofit.RestAdapter.LogLevel logLevel27 = restAdapter10.logLevel;
        boolean boolean28 = logLevel27.log();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test1534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1534");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.RequestInterceptor requestInterceptor4 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.client.Request request6 = serializedObjectSupporter0.deserializeObjectRequest6();
        java.lang.String str7 = request6.getUrl();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(requestInterceptor4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(request6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "http://example.com/" + "'", str7, "http://example.com/");
    }

    @Test
    public void test1535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1535");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        java.util.concurrent.Executor executor5 = builder0.callbackExecutor;
        retrofit.ErrorHandler errorHandler6 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.sethttpExecutor(executor8);
        retrofit.Profiler profiler10 = null;
        builder7.profiler = profiler10;
        retrofit.Server server12 = builder7.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor14 = serializedObjectSupporter13.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter15 = serializedObjectSupporter13.deserializeObjectConverter7();
        retrofit.client.Request request16 = serializedObjectSupporter13.deserializeObjectRequest1();
        builder7.serializedObjectSupporter = serializedObjectSupporter13;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor19 = null;
        builder18.sethttpExecutor(executor19);
        retrofit.Profiler profiler21 = null;
        builder18.profiler = profiler21;
        retrofit.Server server23 = builder18.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor25 = serializedObjectSupporter24.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter26 = serializedObjectSupporter24.deserializeObjectConverter7();
        retrofit.client.Request request27 = serializedObjectSupporter24.deserializeObjectRequest1();
        builder18.serializedObjectSupporter = serializedObjectSupporter24;
        java.lang.String str29 = serializedObjectSupporter24.deserializeObjectString2();
        retrofit.ErrorHandler errorHandler30 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder31 = builder7.setErrorHandler(errorHandler30);
        retrofit.RestAdapter.Builder builder32 = builder0.setErrorHandler(errorHandler30);
        retrofit.client.Client.Provider provider33 = builder32.getclientProvider();
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder36 = builder34.setServer("hi!");
        java.util.concurrent.Executor executor37 = null;
        builder36.callbackExecutor = executor37;
        retrofit.SerializedObjectSupporter serializedObjectSupporter39 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor40 = serializedObjectSupporter39.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder41 = builder36.setRequestInterceptor(requestInterceptor40);
        retrofit.Server server42 = builder41.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter43 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter44 = serializedObjectSupporter43.deserializeObjectConverter2();
        builder41.serializedObjectSupporter = serializedObjectSupporter43;
        retrofit.SerializedObjectSupporter serializedObjectSupporter46 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor47 = serializedObjectSupporter46.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter48 = serializedObjectSupporter46.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter49 = serializedObjectSupporter46.deserializeObjectConverter5();
        retrofit.client.Request request50 = serializedObjectSupporter46.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter51 = serializedObjectSupporter46.deserializeObjectConverter3();
        retrofit.client.Request request52 = serializedObjectSupporter46.deserializeObjectRequest4();
        retrofit.client.Request request53 = serializedObjectSupporter46.deserializeObjectRequest2();
        retrofit.client.Request request54 = serializedObjectSupporter46.deserializeObjectRequest7();
        builder41.serializedObjectSupporter = serializedObjectSupporter46;
        retrofit.client.Request request56 = serializedObjectSupporter46.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter57 = serializedObjectSupporter46.deserializeObjectConverter8();
        builder32.converter = gsonConverter57;
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNotNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(gsonConverter15);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNull(server23);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNotNull(gsonConverter26);
        org.junit.Assert.assertNotNull(request27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Retrofit-Idle" + "'", str29, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(provider33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(requestInterceptor40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(server42);
        org.junit.Assert.assertNotNull(gsonConverter44);
        org.junit.Assert.assertNotNull(requestInterceptor47);
        org.junit.Assert.assertNotNull(gsonConverter48);
        org.junit.Assert.assertNotNull(gsonConverter49);
        org.junit.Assert.assertNotNull(request50);
        org.junit.Assert.assertNotNull(gsonConverter51);
        org.junit.Assert.assertNotNull(request52);
        org.junit.Assert.assertNotNull(request53);
        org.junit.Assert.assertNotNull(request54);
        org.junit.Assert.assertNotNull(request56);
        org.junit.Assert.assertNotNull(gsonConverter57);
    }

    @Test
    public void test1536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1536");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.RestAdapter restAdapter5 = builder2.build();
        retrofit.RestAdapter.Log log6 = restAdapter5.log;
        java.util.concurrent.Executor executor7 = restAdapter5.gethttpExecutor();
        java.lang.String str8 = restAdapter5.getIDLE_THREAD_NAME();
        retrofit.RestAdapter.Log log9 = restAdapter5.log;
        retrofit.Profiler profiler10 = restAdapter5.getprofiler();
        retrofit.ErrorHandler errorHandler11 = restAdapter5.errorHandler;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(restAdapter5);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertNotNull(executor7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Retrofit-Idle" + "'", str8, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(log9);
        org.junit.Assert.assertNull(profiler10);
        org.junit.Assert.assertNotNull(errorHandler11);
    }

    @Test
    public void test1537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1537");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        java.util.concurrent.Executor executor6 = null;
        builder0.sethttpExecutor(executor6);
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder10 = builder8.setServer("hi!");
        java.util.concurrent.Executor executor11 = null;
        builder10.callbackExecutor = executor11;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor14 = serializedObjectSupporter13.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder15 = builder10.setRequestInterceptor(requestInterceptor14);
        retrofit.RestAdapter.Builder builder16 = builder0.setRequestInterceptor(requestInterceptor14);
        java.util.concurrent.Executor executor17 = builder16.httpExecutor;
        retrofit.Profiler profiler18 = builder16.profiler;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor20 = null;
        builder19.sethttpExecutor(executor20);
        retrofit.Profiler profiler22 = null;
        builder19.profiler = profiler22;
        retrofit.Server server24 = builder19.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor26 = serializedObjectSupporter25.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter27 = serializedObjectSupporter25.deserializeObjectConverter7();
        retrofit.client.Request request28 = serializedObjectSupporter25.deserializeObjectRequest1();
        builder19.serializedObjectSupporter = serializedObjectSupporter25;
        java.lang.String str30 = serializedObjectSupporter25.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter31 = serializedObjectSupporter25.deserializeObjectConverter1();
        retrofit.RequestInterceptor requestInterceptor32 = serializedObjectSupporter25.deserializeObjectRequestInterceptor1();
        builder16.serializedObjectSupporter = serializedObjectSupporter25;
        retrofit.Server server34 = null;
        retrofit.client.Client.Provider provider35 = null;
        java.util.concurrent.Executor executor36 = null;
        java.util.concurrent.Executor executor37 = null;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        retrofit.converter.Converter converter39 = null;
        retrofit.Profiler profiler40 = null;
        retrofit.ErrorHandler errorHandler41 = null;
        retrofit.RestAdapter.Log log42 = null;
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter(server34, provider35, executor36, executor37, requestInterceptor38, converter39, profiler40, errorHandler41, log42, logLevel43);
        retrofit.ErrorHandler errorHandler45 = restAdapter44.errorHandler;
        int int46 = restAdapter44.getLOG_CHUNK_SIZE();
        retrofit.Server server47 = restAdapter44.getserver();
        java.lang.String str48 = restAdapter44.getIDLE_THREAD_NAME();
        java.util.concurrent.Executor executor49 = restAdapter44.getcallbackExecutor();
        retrofit.Server server50 = null;
        retrofit.client.Client.Provider provider51 = null;
        java.util.concurrent.Executor executor52 = null;
        java.util.concurrent.Executor executor53 = null;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        retrofit.converter.Converter converter55 = null;
        retrofit.Profiler profiler56 = null;
        retrofit.ErrorHandler errorHandler57 = null;
        retrofit.RestAdapter.Log log58 = null;
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter(server50, provider51, executor52, executor53, requestInterceptor54, converter55, profiler56, errorHandler57, log58, logLevel59);
        retrofit.ErrorHandler errorHandler61 = restAdapter60.errorHandler;
        java.util.concurrent.Executor executor62 = restAdapter60.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel63 = restAdapter60.getLogLevel();
        retrofit.client.Client.Provider provider64 = restAdapter60.clientProvider;
        retrofit.Profiler profiler65 = restAdapter60.profiler;
        retrofit.converter.Converter converter66 = restAdapter60.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter67 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor68 = serializedObjectSupporter67.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter69 = serializedObjectSupporter67.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter70 = serializedObjectSupporter67.deserializeObjectConverter4();
        restAdapter60.serializedObjectSupporter = serializedObjectSupporter67;
        retrofit.RestAdapter.LogLevel logLevel72 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter60.setLogLevel(logLevel72);
        restAdapter44.setLogLevel(logLevel72);
        retrofit.Server server75 = null;
        retrofit.client.Client.Provider provider76 = null;
        java.util.concurrent.Executor executor77 = null;
        java.util.concurrent.Executor executor78 = null;
        retrofit.RequestInterceptor requestInterceptor79 = null;
        retrofit.converter.Converter converter80 = null;
        retrofit.Profiler profiler81 = null;
        retrofit.ErrorHandler errorHandler82 = null;
        retrofit.RestAdapter.Log log83 = null;
        retrofit.RestAdapter.LogLevel logLevel84 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter85 = new retrofit.RestAdapter(server75, provider76, executor77, executor78, requestInterceptor79, converter80, profiler81, errorHandler82, log83, logLevel84);
        retrofit.ErrorHandler errorHandler86 = restAdapter85.errorHandler;
        int int87 = restAdapter85.getLOG_CHUNK_SIZE();
        java.lang.String str88 = restAdapter85.getTHREAD_PREFIX();
        retrofit.RequestInterceptor requestInterceptor89 = restAdapter85.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel90 = restAdapter85.getLogLevel();
        restAdapter44.logLevel = logLevel90;
        retrofit.RestAdapter.Builder builder92 = builder16.setLogLevel(logLevel90);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(profiler18);
        org.junit.Assert.assertNull(server24);
        org.junit.Assert.assertNotNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(gsonConverter27);
        org.junit.Assert.assertNotNull(request28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Retrofit-Idle" + "'", str30, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter31);
        org.junit.Assert.assertNotNull(requestInterceptor32);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 4000 + "'", int46 == 4000);
        org.junit.Assert.assertNull(server47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Retrofit-Idle" + "'", str48, "Retrofit-Idle");
        org.junit.Assert.assertNull(executor49);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler61);
        org.junit.Assert.assertNull(executor62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider64);
        org.junit.Assert.assertNull(profiler65);
        org.junit.Assert.assertNull(converter66);
        org.junit.Assert.assertNotNull(requestInterceptor68);
        org.junit.Assert.assertNotNull(gsonConverter69);
        org.junit.Assert.assertNotNull(gsonConverter70);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel84 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel84.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 4000 + "'", int87 == 4000);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "Retrofit-" + "'", str88, "Retrofit-");
        org.junit.Assert.assertNull(requestInterceptor89);
        org.junit.Assert.assertTrue("'" + logLevel90 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel90.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder92);
    }

    @Test
    public void test1538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1538");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter5 = new retrofit.SerializedObjectSupporter();
        java.lang.String str6 = serializedObjectSupporter5.deserializeObjectString2();
        java.lang.String str7 = serializedObjectSupporter5.deserializeObjectString1();
        retrofit.RequestInterceptor requestInterceptor8 = serializedObjectSupporter5.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder9 = builder0.setRequestInterceptor(requestInterceptor8);
        retrofit.SerializedObjectSupporter serializedObjectSupporter10 = new retrofit.SerializedObjectSupporter();
        java.lang.String str11 = serializedObjectSupporter10.deserializeObjectString3();
        java.lang.String str12 = serializedObjectSupporter10.deserializeObjectString3();
        retrofit.Server server13 = serializedObjectSupporter10.deserializeObjectServer1();
        builder0.server = server13;
        java.util.concurrent.Executor executor15 = builder0.httpExecutor;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass16 = executor15.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Retrofit-Idle" + "'", str6, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Retrofit-" + "'", str7, "Retrofit-");
        org.junit.Assert.assertNotNull(requestInterceptor8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GET" + "'", str11, "GET");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "GET" + "'", str12, "GET");
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNull(executor15);
    }

    @Test
    public void test1539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1539");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter10.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter14 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request15 = serializedObjectSupporter14.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter14.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter14.deserializeObjectConverter1();
        restHandler13.serializedObjectSupporter = serializedObjectSupporter14;
        retrofit.SerializedObjectSupporter serializedObjectSupporter19 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor20 = serializedObjectSupporter19.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter21 = serializedObjectSupporter19.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter19.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter23 = serializedObjectSupporter19.deserializeObjectConverter8();
        restHandler13.serializedObjectSupporter = serializedObjectSupporter19;
        java.lang.String str25 = serializedObjectSupporter19.deserializeObjectString1();
        java.lang.String str26 = serializedObjectSupporter19.deserializeObjectString4();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collections collections27 = serializedObjectSupporter19.deserializeObjectList1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.Collections$UnmodifiableRandomAccessList cannot be cast to java.util.Collections");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(gsonConverter16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertNotNull(requestInterceptor20);
        org.junit.Assert.assertNotNull(gsonConverter21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(gsonConverter23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Retrofit-" + "'", str25, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "http://example.com/" + "'", str26, "http://example.com/");
    }

    @Test
    public void test1540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1540");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter10.logLevel;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        retrofit.converter.Converter converter14 = restAdapter10.converter;
        retrofit.Server server15 = restAdapter10.getserver();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter10.getLogLevel();
        java.lang.String str17 = restAdapter10.getIDLE_THREAD_NAME();
        java.util.concurrent.Executor executor18 = restAdapter10.gethttpExecutor();
        retrofit.Server server19 = restAdapter10.getserver();
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Log log28 = null;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log28, logLevel29);
        retrofit.ErrorHandler errorHandler31 = restAdapter30.errorHandler;
        int int32 = restAdapter30.getLOG_CHUNK_SIZE();
        retrofit.Server server33 = restAdapter30.getserver();
        retrofit.Server server34 = null;
        retrofit.client.Client.Provider provider35 = null;
        java.util.concurrent.Executor executor36 = null;
        java.util.concurrent.Executor executor37 = null;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        retrofit.converter.Converter converter39 = null;
        retrofit.Profiler profiler40 = null;
        retrofit.ErrorHandler errorHandler41 = null;
        retrofit.RestAdapter.Log log42 = null;
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter(server34, provider35, executor36, executor37, requestInterceptor38, converter39, profiler40, errorHandler41, log42, logLevel43);
        restAdapter30.logLevel = logLevel43;
        retrofit.SerializedObjectSupporter serializedObjectSupporter46 = restAdapter30.serializedObjectSupporter;
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean48 = logLevel47.log();
        restAdapter30.setLogLevel(logLevel47);
        retrofit.RestAdapter.LogLevel logLevel50 = restAdapter30.getLogLevel();
        restAdapter10.setLogLevel(logLevel50);
        retrofit.RestAdapter.Log log52 = restAdapter10.log;
        java.util.concurrent.Executor executor53 = restAdapter10.gethttpExecutor();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-Idle" + "'", str17, "Retrofit-Idle");
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 4000 + "'", int32 == 4000);
        org.junit.Assert.assertNull(server33);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(serializedObjectSupporter46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(log52);
        org.junit.Assert.assertNull(executor53);
    }

    @Test
    public void test1541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1541");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        java.util.concurrent.Executor executor6 = null;
        builder0.sethttpExecutor(executor6);
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder10 = builder8.setServer("hi!");
        java.util.concurrent.Executor executor11 = null;
        builder10.callbackExecutor = executor11;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor14 = serializedObjectSupporter13.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder15 = builder10.setRequestInterceptor(requestInterceptor14);
        retrofit.RestAdapter.Builder builder16 = builder0.setRequestInterceptor(requestInterceptor14);
        java.util.concurrent.Executor executor17 = null;
        builder16.callbackExecutor = executor17;
        retrofit.SerializedObjectSupporter serializedObjectSupporter19 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request20 = serializedObjectSupporter19.deserializeObjectRequest1();
        retrofit.client.Request request21 = serializedObjectSupporter19.deserializeObjectRequest2();
        retrofit.RequestInterceptor requestInterceptor22 = serializedObjectSupporter19.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder23 = builder16.setRequestInterceptor(requestInterceptor22);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertNotNull(request21);
        org.junit.Assert.assertNotNull(requestInterceptor22);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test1542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1542");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        java.util.concurrent.Executor executor5 = builder0.callbackExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter6.deserializeObjectConverter5();
        retrofit.RestAdapter.Builder builder10 = builder0.setConverter((retrofit.converter.Converter) gsonConverter9);
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder13 = builder11.setServer("hi!");
        java.util.concurrent.Executor executor14 = null;
        builder13.callbackExecutor = executor14;
        retrofit.RestAdapter restAdapter16 = builder13.build();
        retrofit.RestAdapter.Log log17 = restAdapter16.log;
        java.lang.String str18 = restAdapter16.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler19 = restAdapter16.geterrorHandler();
        retrofit.client.Client.Provider provider20 = restAdapter16.getclientProvider();
        builder0.setclientProvider(provider20);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(gsonConverter9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(restAdapter16);
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Retrofit-Idle" + "'", str18, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler19);
        org.junit.Assert.assertNotNull(provider20);
    }

    @Test
    public void test1543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1543");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        java.util.concurrent.Executor executor6 = null;
        builder0.sethttpExecutor(executor6);
        retrofit.client.Client.Provider provider8 = builder0.clientProvider;
        java.util.concurrent.Executor executor9 = builder0.callbackExecutor;
        java.util.concurrent.Executor executor10 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = builder11.getcallbackExecutor();
        retrofit.client.Client.Provider provider13 = null;
        builder11.clientProvider = provider13;
        retrofit.Server server15 = null;
        builder11.server = server15;
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        builder11.log = log17;
        log17.log("hi!");
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log17);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder24 = builder22.setServer("hi!");
        java.util.concurrent.Executor executor25 = null;
        builder24.callbackExecutor = executor25;
        retrofit.RestAdapter restAdapter27 = builder24.build();
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor29 = null;
        builder28.sethttpExecutor(executor29);
        retrofit.Profiler profiler31 = null;
        builder28.profiler = profiler31;
        retrofit.RestAdapter.Log log33 = builder28.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter34 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler35 = serializedObjectSupporter34.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder36 = builder28.setErrorHandler(errorHandler35);
        retrofit.RestAdapter.Builder builder37 = builder24.setErrorHandler(errorHandler35);
        java.util.concurrent.Executor executor38 = builder37.callbackExecutor;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = null;
        builder39.sethttpExecutor(executor40);
        retrofit.Profiler profiler42 = null;
        builder39.profiler = profiler42;
        retrofit.Server server44 = builder39.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter45 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor46 = serializedObjectSupporter45.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter47 = serializedObjectSupporter45.deserializeObjectConverter7();
        retrofit.client.Request request48 = serializedObjectSupporter45.deserializeObjectRequest1();
        builder39.serializedObjectSupporter = serializedObjectSupporter45;
        java.lang.String str50 = serializedObjectSupporter45.deserializeObjectString2();
        retrofit.ErrorHandler errorHandler51 = serializedObjectSupporter45.deserializeObjectErrorHandler1();
        builder37.errorHandler = errorHandler51;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder55 = builder53.setServer("hi!");
        retrofit.client.Client.Provider provider56 = builder53.clientProvider;
        retrofit.RestAdapter.Log log57 = null;
        builder53.log = log57;
        java.util.concurrent.Executor executor59 = builder53.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor61 = builder60.getcallbackExecutor();
        retrofit.client.Client.Provider provider62 = null;
        builder60.clientProvider = provider62;
        retrofit.SerializedObjectSupporter serializedObjectSupporter64 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor65 = serializedObjectSupporter64.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter66 = serializedObjectSupporter64.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter67 = serializedObjectSupporter64.deserializeObjectConverter5();
        retrofit.client.Request request68 = serializedObjectSupporter64.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter69 = serializedObjectSupporter64.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter70 = serializedObjectSupporter64.deserializeObjectConverter6();
        retrofit.RestAdapter.Builder builder71 = builder60.setConverter((retrofit.converter.Converter) gsonConverter70);
        builder53.converter = gsonConverter70;
        retrofit.ErrorHandler errorHandler73 = builder53.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter74 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler75 = serializedObjectSupporter74.deserializeObjectErrorHandler1();
        retrofit.Server server76 = serializedObjectSupporter74.deserializeObjectServer1();
        builder53.server = server76;
        retrofit.RestAdapter.Builder builder78 = builder37.setServer(server76);
        retrofit.RequestInterceptor requestInterceptor79 = builder37.requestInterceptor;
        retrofit.RestAdapter.Log log80 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder81 = builder37.setLog(log80);
        builder21.log = log80;
        log80.log("Retrofit-");
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(restAdapter27);
        org.junit.Assert.assertNull(log33);
        org.junit.Assert.assertNotNull(errorHandler35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(executor38);
        org.junit.Assert.assertNull(server44);
        org.junit.Assert.assertNotNull(requestInterceptor46);
        org.junit.Assert.assertNotNull(gsonConverter47);
        org.junit.Assert.assertNotNull(request48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Retrofit-Idle" + "'", str50, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler51);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(provider56);
        org.junit.Assert.assertNull(executor59);
        org.junit.Assert.assertNull(executor61);
        org.junit.Assert.assertNotNull(requestInterceptor65);
        org.junit.Assert.assertNotNull(gsonConverter66);
        org.junit.Assert.assertNotNull(gsonConverter67);
        org.junit.Assert.assertNotNull(request68);
        org.junit.Assert.assertNotNull(gsonConverter69);
        org.junit.Assert.assertNotNull(gsonConverter70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNull(errorHandler73);
        org.junit.Assert.assertNotNull(errorHandler75);
        org.junit.Assert.assertNotNull(server76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(requestInterceptor79);
        org.junit.Assert.assertNotNull(log80);
        org.junit.Assert.assertNotNull(builder81);
    }

    @Test
    public void test1544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1544");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler2 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter2();
        retrofit.RequestInterceptor requestInterceptor4 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(errorHandler2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(requestInterceptor4);
    }

    @Test
    public void test1545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1545");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.logLevel = logLevel23;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean27 = logLevel26.log();
        restAdapter10.logLevel = logLevel26;
        retrofit.ErrorHandler errorHandler29 = restAdapter10.geterrorHandler();
        retrofit.Profiler profiler30 = restAdapter10.getprofiler();
        retrofit.Server server31 = null;
        retrofit.client.Client.Provider provider32 = null;
        java.util.concurrent.Executor executor33 = null;
        java.util.concurrent.Executor executor34 = null;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        retrofit.converter.Converter converter36 = null;
        retrofit.Profiler profiler37 = null;
        retrofit.ErrorHandler errorHandler38 = null;
        retrofit.RestAdapter.Log log39 = null;
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter(server31, provider32, executor33, executor34, requestInterceptor35, converter36, profiler37, errorHandler38, log39, logLevel40);
        retrofit.ErrorHandler errorHandler42 = restAdapter41.errorHandler;
        int int43 = restAdapter41.getLOG_CHUNK_SIZE();
        retrofit.Server server44 = restAdapter41.getserver();
        retrofit.Server server45 = null;
        retrofit.client.Client.Provider provider46 = null;
        java.util.concurrent.Executor executor47 = null;
        java.util.concurrent.Executor executor48 = null;
        retrofit.RequestInterceptor requestInterceptor49 = null;
        retrofit.converter.Converter converter50 = null;
        retrofit.Profiler profiler51 = null;
        retrofit.ErrorHandler errorHandler52 = null;
        retrofit.RestAdapter.Log log53 = null;
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter(server45, provider46, executor47, executor48, requestInterceptor49, converter50, profiler51, errorHandler52, log53, logLevel54);
        restAdapter41.logLevel = logLevel54;
        retrofit.SerializedObjectSupporter serializedObjectSupporter57 = restAdapter41.serializedObjectSupporter;
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean59 = logLevel58.log();
        restAdapter41.setLogLevel(logLevel58);
        restAdapter10.logLevel = logLevel58;
        retrofit.converter.Converter converter62 = restAdapter10.converter;
        retrofit.Server server63 = restAdapter10.server;
        java.lang.String str64 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.converter.Converter converter65 = restAdapter10.converter;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNull(profiler30);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 4000 + "'", int43 == 4000);
        org.junit.Assert.assertNull(server44);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(serializedObjectSupporter57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNull(converter62);
        org.junit.Assert.assertNull(server63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Retrofit-Idle" + "'", str64, "Retrofit-Idle");
        org.junit.Assert.assertNull(converter65);
    }

    @Test
    public void test1546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1546");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter1 = serializedObjectSupporter0.deserializeObjectConverter2();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest3();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.RequestInterceptor requestInterceptor6 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.mime.TypedString typedString7 = serializedObjectSupporter0.deserializeObjectTypedOutput2();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter0.deserializeObjectConverter1();
        org.junit.Assert.assertNotNull(gsonConverter1);
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(typedString7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(gsonConverter9);
    }

    @Test
    public void test1547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1547");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider5 = builder0.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request7 = serializedObjectSupporter6.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler8 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        builder0.errorHandler = errorHandler8;
        retrofit.RestAdapter.Log log10 = builder0.log;
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Log log19 = null;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log19, logLevel20);
        retrofit.ErrorHandler errorHandler22 = restAdapter21.errorHandler;
        retrofit.ErrorHandler errorHandler23 = restAdapter21.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter21.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request26 = serializedObjectSupporter25.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter27 = serializedObjectSupporter25.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter25.deserializeObjectConverter1();
        restHandler24.serializedObjectSupporter = serializedObjectSupporter25;
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = restHandler24.serializedObjectSupporter;
        java.lang.String str31 = serializedObjectSupporter30.deserializeObjectString5();
        builder0.serializedObjectSupporter = serializedObjectSupporter30;
        retrofit.Server server33 = null;
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.RestAdapter.Log log41 = null;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter(server33, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log41, logLevel42);
        retrofit.RequestInterceptor requestInterceptor44 = restAdapter43.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel45 = restAdapter43.logLevel;
        retrofit.RestAdapter.Builder builder46 = builder0.setLogLevel(logLevel45);
        retrofit.SerializedObjectSupporter serializedObjectSupporter47 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request48 = serializedObjectSupporter47.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter49 = serializedObjectSupporter47.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter50 = serializedObjectSupporter47.deserializeObjectConverter1();
        retrofit.RestAdapter.Builder builder51 = builder0.setConverter((retrofit.converter.Converter) gsonConverter50);
        retrofit.RestAdapter.LogLevel logLevel52 = builder0.logLevel;
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(errorHandler8);
        org.junit.Assert.assertNull(log10);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNotNull(request26);
        org.junit.Assert.assertNotNull(gsonConverter27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(serializedObjectSupporter30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "POST" + "'", str31, "POST");
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(requestInterceptor44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(request48);
        org.junit.Assert.assertNotNull(gsonConverter49);
        org.junit.Assert.assertNotNull(gsonConverter50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test1548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1548");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter10.logLevel;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter10.getrequestInterceptor();
        retrofit.converter.Converter converter16 = restAdapter10.converter;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNull(converter16);
    }

    @Test
    public void test1549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1549");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider5 = builder0.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request7 = serializedObjectSupporter6.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler8 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        builder0.errorHandler = errorHandler8;
        retrofit.converter.Converter converter10 = builder0.converter;
        java.util.concurrent.Executor executor11 = builder0.callbackExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor13 = serializedObjectSupporter12.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter12.deserializeObjectConverter8();
        java.lang.String str15 = serializedObjectSupporter12.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter12.deserializeObjectConverter4();
        builder0.serializedObjectSupporter = serializedObjectSupporter12;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder20 = builder18.setServer("hi!");
        java.util.concurrent.Executor executor21 = null;
        builder20.callbackExecutor = executor21;
        retrofit.SerializedObjectSupporter serializedObjectSupporter23 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor24 = serializedObjectSupporter23.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder25 = builder20.setRequestInterceptor(requestInterceptor24);
        retrofit.Server server26 = builder25.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter27 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler28 = serializedObjectSupporter27.deserializeObjectErrorHandler1();
        builder25.serializedObjectSupporter = serializedObjectSupporter27;
        retrofit.Profiler profiler30 = null;
        builder25.profiler = profiler30;
        retrofit.SerializedObjectSupporter serializedObjectSupporter32 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor33 = serializedObjectSupporter32.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter34 = serializedObjectSupporter32.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter35 = serializedObjectSupporter32.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter36 = serializedObjectSupporter32.deserializeObjectConverter8();
        java.lang.String str37 = serializedObjectSupporter32.deserializeObjectString4();
        java.lang.String str38 = serializedObjectSupporter32.deserializeObjectString3();
        retrofit.converter.GsonConverter gsonConverter39 = serializedObjectSupporter32.deserializeObjectConverter6();
        retrofit.RestAdapter.Builder builder40 = builder25.setConverter((retrofit.converter.Converter) gsonConverter39);
        retrofit.client.Client.Provider provider41 = builder40.getclientProvider();
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor43 = null;
        builder42.sethttpExecutor(executor43);
        retrofit.Profiler profiler45 = null;
        builder42.profiler = profiler45;
        retrofit.Server server47 = builder42.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter48 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor49 = serializedObjectSupporter48.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter50 = serializedObjectSupporter48.deserializeObjectConverter7();
        retrofit.client.Request request51 = serializedObjectSupporter48.deserializeObjectRequest1();
        builder42.serializedObjectSupporter = serializedObjectSupporter48;
        builder42.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder56 = builder54.setServer("hi!");
        java.util.concurrent.Executor executor57 = null;
        builder56.callbackExecutor = executor57;
        retrofit.RestAdapter restAdapter59 = builder56.build();
        retrofit.RestAdapter.Log log60 = restAdapter59.log;
        java.util.concurrent.Executor executor61 = restAdapter59.gethttpExecutor();
        retrofit.client.Client.Provider provider62 = restAdapter59.getclientProvider();
        builder42.setclientProvider(provider62);
        builder40.setclientProvider(provider62);
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor66 = builder65.getcallbackExecutor();
        retrofit.client.Client.Provider provider67 = null;
        builder65.clientProvider = provider67;
        java.util.concurrent.Executor executor69 = builder65.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter70 = new retrofit.SerializedObjectSupporter();
        java.lang.String str71 = serializedObjectSupporter70.deserializeObjectString2();
        java.lang.String str72 = serializedObjectSupporter70.deserializeObjectString1();
        retrofit.RequestInterceptor requestInterceptor73 = serializedObjectSupporter70.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder74 = builder65.setRequestInterceptor(requestInterceptor73);
        retrofit.ErrorHandler errorHandler75 = builder74.errorHandler;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder78 = builder76.setServer("hi!");
        java.util.concurrent.Executor executor79 = null;
        builder78.callbackExecutor = executor79;
        retrofit.SerializedObjectSupporter serializedObjectSupporter81 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor82 = serializedObjectSupporter81.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder83 = builder78.setRequestInterceptor(requestInterceptor82);
        retrofit.RestAdapter.Builder builder84 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder86 = builder84.setServer("hi!");
        java.util.concurrent.Executor executor87 = null;
        builder86.callbackExecutor = executor87;
        retrofit.RestAdapter restAdapter89 = builder86.build();
        retrofit.RestAdapter.Log log90 = restAdapter89.log;
        java.lang.String str91 = restAdapter89.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler92 = restAdapter89.geterrorHandler();
        retrofit.client.Client.Provider provider93 = restAdapter89.getclientProvider();
        builder78.setclientProvider(provider93);
        builder74.setclientProvider(provider93);
        builder40.clientProvider = provider93;
        builder0.clientProvider = provider93;
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(errorHandler8);
        org.junit.Assert.assertNull(converter10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNotNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Retrofit-Idle" + "'", str15, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(requestInterceptor24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(server26);
        org.junit.Assert.assertNotNull(errorHandler28);
        org.junit.Assert.assertNotNull(requestInterceptor33);
        org.junit.Assert.assertNotNull(gsonConverter34);
        org.junit.Assert.assertNotNull(gsonConverter35);
        org.junit.Assert.assertNotNull(gsonConverter36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "http://example.com/" + "'", str37, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "GET" + "'", str38, "GET");
        org.junit.Assert.assertNotNull(gsonConverter39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(provider41);
        org.junit.Assert.assertNull(server47);
        org.junit.Assert.assertNotNull(requestInterceptor49);
        org.junit.Assert.assertNotNull(gsonConverter50);
        org.junit.Assert.assertNotNull(request51);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(restAdapter59);
        org.junit.Assert.assertNotNull(log60);
        org.junit.Assert.assertNotNull(executor61);
        org.junit.Assert.assertNotNull(provider62);
        org.junit.Assert.assertNull(executor66);
        org.junit.Assert.assertNull(executor69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Retrofit-Idle" + "'", str71, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Retrofit-" + "'", str72, "Retrofit-");
        org.junit.Assert.assertNotNull(requestInterceptor73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNull(errorHandler75);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(requestInterceptor82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(restAdapter89);
        org.junit.Assert.assertNotNull(log90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "Retrofit-Idle" + "'", str91, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler92);
        org.junit.Assert.assertNotNull(provider93);
    }

    @Test
    public void test1550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1550");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter1 = serializedObjectSupporter0.deserializeObjectConverter2();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest3();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter0.deserializeObjectConverter5();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString2();
        org.junit.Assert.assertNotNull(gsonConverter1);
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(gsonConverter6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Retrofit-Idle" + "'", str7, "Retrofit-Idle");
    }

    @Test
    public void test1551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1551");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.Profiler profiler15 = restAdapter10.profiler;
        retrofit.converter.Converter converter16 = restAdapter10.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter17.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter17.deserializeObjectConverter4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter17;
        retrofit.Profiler profiler22 = restAdapter10.profiler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter23 = new retrofit.SerializedObjectSupporter();
        java.lang.String str24 = serializedObjectSupporter23.deserializeObjectString2();
        java.lang.String str25 = serializedObjectSupporter23.deserializeObjectString1();
        retrofit.RequestInterceptor requestInterceptor26 = serializedObjectSupporter23.deserializeObjectRequestInterceptor1();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter23;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Retrofit-Idle" + "'", str24, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Retrofit-" + "'", str25, "Retrofit-");
        org.junit.Assert.assertNotNull(requestInterceptor26);
    }

    @Test
    public void test1552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1552");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter8();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest5();
        retrofit.Server server6 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.client.Request request7 = serializedObjectSupporter0.deserializeObjectRequest6();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(server6);
        org.junit.Assert.assertNotNull(request7);
    }

    @Test
    public void test1553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1553");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.RequestInterceptor requestInterceptor4 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.client.Request request6 = serializedObjectSupporter0.deserializeObjectRequest1();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(requestInterceptor4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(request6);
    }

    @Test
    public void test1554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1554");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString2();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString1();
        retrofit.RequestInterceptor requestInterceptor3 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest5();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest1();
        retrofit.ErrorHandler errorHandler6 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Retrofit-Idle" + "'", str1, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Retrofit-" + "'", str2, "Retrofit-");
        org.junit.Assert.assertNotNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(errorHandler6);
    }

    @Test
    public void test1555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1555");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter8();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString1();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest5();
        java.util.List<retrofit.client.Header> headerList5 = request4.headers;
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Retrofit-" + "'", str3, "Retrofit-");
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(headerList5);
    }

    @Test
    public void test1556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1556");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter3();
        retrofit.client.Request request6 = serializedObjectSupporter0.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter0.deserializeObjectConverter4();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(request6);
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertNotNull(gsonConverter8);
    }

    @Test
    public void test1557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1557");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = restAdapter10.serializedObjectSupporter;
        java.util.concurrent.Executor executor14 = restAdapter10.gethttpExecutor();
        retrofit.Server server15 = restAdapter10.getserver();
        retrofit.Profiler profiler16 = restAdapter10.getprofiler();
        retrofit.ErrorHandler errorHandler17 = restAdapter10.geterrorHandler();
        retrofit.Server server18 = restAdapter10.getserver();
        retrofit.Profiler profiler19 = restAdapter10.getprofiler();
        retrofit.client.Client.Provider provider20 = restAdapter10.clientProvider;
        retrofit.SerializedObjectSupporter serializedObjectSupporter21 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor22 = serializedObjectSupporter21.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter23 = serializedObjectSupporter21.deserializeObjectConverter5();
        retrofit.client.Request request24 = serializedObjectSupporter21.deserializeObjectRequest8();
        retrofit.client.Request request25 = serializedObjectSupporter21.deserializeObjectRequest5();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter21;
        retrofit.RestAdapter.LogLevel logLevel27 = restAdapter10.logLevel;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(serializedObjectSupporter13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertNull(profiler16);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(server18);
        org.junit.Assert.assertNull(profiler19);
        org.junit.Assert.assertNull(provider20);
        org.junit.Assert.assertNotNull(requestInterceptor22);
        org.junit.Assert.assertNotNull(gsonConverter23);
        org.junit.Assert.assertNotNull(request24);
        org.junit.Assert.assertNotNull(request25);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test1558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1558");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter5 = new retrofit.SerializedObjectSupporter();
        java.lang.String str6 = serializedObjectSupporter5.deserializeObjectString2();
        java.lang.String str7 = serializedObjectSupporter5.deserializeObjectString1();
        retrofit.RequestInterceptor requestInterceptor8 = serializedObjectSupporter5.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder9 = builder0.setRequestInterceptor(requestInterceptor8);
        retrofit.ErrorHandler errorHandler10 = builder9.errorHandler;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder13 = builder11.setServer("hi!");
        java.util.concurrent.Executor executor14 = null;
        builder13.callbackExecutor = executor14;
        retrofit.RestAdapter restAdapter16 = builder13.build();
        retrofit.RestAdapter.Log log17 = restAdapter16.log;
        java.util.concurrent.Executor executor18 = restAdapter16.gethttpExecutor();
        java.lang.String str19 = restAdapter16.getIDLE_THREAD_NAME();
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Log log28 = null;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log28, logLevel29);
        retrofit.ErrorHandler errorHandler31 = restAdapter30.errorHandler;
        java.util.concurrent.Executor executor32 = restAdapter30.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter30.getLogLevel();
        restAdapter16.logLevel = logLevel33;
        retrofit.SerializedObjectSupporter serializedObjectSupporter35 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request36 = serializedObjectSupporter35.deserializeObjectRequest6();
        restAdapter16.serializedObjectSupporter = serializedObjectSupporter35;
        builder9.serializedObjectSupporter = serializedObjectSupporter35;
        java.util.concurrent.Executor executor39 = builder9.gethttpExecutor();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Retrofit-Idle" + "'", str6, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Retrofit-" + "'", str7, "Retrofit-");
        org.junit.Assert.assertNotNull(requestInterceptor8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(restAdapter16);
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertNotNull(executor18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Retrofit-Idle" + "'", str19, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler31);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(request36);
        org.junit.Assert.assertNull(executor39);
    }

    @Test
    public void test1559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1559");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString5();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter5();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter6 = serializedObjectSupporter0.deserializeObjectLogLevel1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "http://example.com/" + "'", str1, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "POST" + "'", str2, "POST");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(gsonConverter5);
    }

    @Test
    public void test1560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1560");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider5 = builder0.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request7 = serializedObjectSupporter6.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler8 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        builder0.errorHandler = errorHandler8;
        retrofit.RestAdapter.Log log10 = builder0.log;
        java.util.concurrent.Executor executor11 = builder0.httpExecutor;
        java.util.concurrent.Executor executor12 = builder0.gethttpExecutor();
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder15 = builder13.setServer("hi!");
        retrofit.client.Client.Provider provider16 = builder13.clientProvider;
        retrofit.RequestInterceptor requestInterceptor17 = builder13.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean19 = logLevel18.log();
        retrofit.RestAdapter.Builder builder20 = builder13.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor22 = builder21.getcallbackExecutor();
        retrofit.client.Client.Provider provider23 = null;
        builder21.clientProvider = provider23;
        retrofit.Server server25 = null;
        builder21.server = server25;
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        builder21.log = log27;
        builder13.log = log27;
        builder0.log = log27;
        retrofit.client.Client.Provider provider31 = builder0.getclientProvider();
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(errorHandler8);
        org.junit.Assert.assertNull(log10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(provider16);
        org.junit.Assert.assertNull(requestInterceptor17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNull(provider31);
    }

    @Test
    public void test1561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1561");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder7 = builder5.setServer("hi!");
        java.util.concurrent.Executor executor8 = null;
        builder7.callbackExecutor = executor8;
        retrofit.RestAdapter restAdapter10 = builder7.build();
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = null;
        builder11.sethttpExecutor(executor12);
        retrofit.Profiler profiler14 = null;
        builder11.profiler = profiler14;
        retrofit.RestAdapter.Log log16 = builder11.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler18 = serializedObjectSupporter17.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder19 = builder11.setErrorHandler(errorHandler18);
        retrofit.RestAdapter.Builder builder20 = builder7.setErrorHandler(errorHandler18);
        java.util.concurrent.Executor executor21 = builder20.callbackExecutor;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor23 = null;
        builder22.sethttpExecutor(executor23);
        retrofit.Profiler profiler25 = null;
        builder22.profiler = profiler25;
        retrofit.Server server27 = builder22.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter28 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor29 = serializedObjectSupporter28.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter30 = serializedObjectSupporter28.deserializeObjectConverter7();
        retrofit.client.Request request31 = serializedObjectSupporter28.deserializeObjectRequest1();
        builder22.serializedObjectSupporter = serializedObjectSupporter28;
        java.lang.String str33 = serializedObjectSupporter28.deserializeObjectString2();
        retrofit.ErrorHandler errorHandler34 = serializedObjectSupporter28.deserializeObjectErrorHandler1();
        builder20.errorHandler = errorHandler34;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder38 = builder36.setServer("hi!");
        retrofit.client.Client.Provider provider39 = builder36.clientProvider;
        retrofit.RestAdapter.Log log40 = null;
        builder36.log = log40;
        java.util.concurrent.Executor executor42 = builder36.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor44 = builder43.getcallbackExecutor();
        retrofit.client.Client.Provider provider45 = null;
        builder43.clientProvider = provider45;
        retrofit.SerializedObjectSupporter serializedObjectSupporter47 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor48 = serializedObjectSupporter47.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter49 = serializedObjectSupporter47.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter50 = serializedObjectSupporter47.deserializeObjectConverter5();
        retrofit.client.Request request51 = serializedObjectSupporter47.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter52 = serializedObjectSupporter47.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter53 = serializedObjectSupporter47.deserializeObjectConverter6();
        retrofit.RestAdapter.Builder builder54 = builder43.setConverter((retrofit.converter.Converter) gsonConverter53);
        builder36.converter = gsonConverter53;
        retrofit.ErrorHandler errorHandler56 = builder36.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter57 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler58 = serializedObjectSupporter57.deserializeObjectErrorHandler1();
        retrofit.Server server59 = serializedObjectSupporter57.deserializeObjectServer1();
        builder36.server = server59;
        retrofit.RestAdapter.Builder builder61 = builder20.setServer(server59);
        retrofit.RequestInterceptor requestInterceptor62 = builder20.requestInterceptor;
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder64 = builder20.setLog(log63);
        retrofit.RestAdapter.Builder builder65 = builder0.setLog(log63);
        java.util.concurrent.Executor executor66 = builder0.httpExecutor;
        retrofit.RestAdapter.Log log67 = builder0.log;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(restAdapter10);
        org.junit.Assert.assertNull(log16);
        org.junit.Assert.assertNotNull(errorHandler18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(executor21);
        org.junit.Assert.assertNull(server27);
        org.junit.Assert.assertNotNull(requestInterceptor29);
        org.junit.Assert.assertNotNull(gsonConverter30);
        org.junit.Assert.assertNotNull(request31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Retrofit-Idle" + "'", str33, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler34);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(provider39);
        org.junit.Assert.assertNull(executor42);
        org.junit.Assert.assertNull(executor44);
        org.junit.Assert.assertNotNull(requestInterceptor48);
        org.junit.Assert.assertNotNull(gsonConverter49);
        org.junit.Assert.assertNotNull(gsonConverter50);
        org.junit.Assert.assertNotNull(request51);
        org.junit.Assert.assertNotNull(gsonConverter52);
        org.junit.Assert.assertNotNull(gsonConverter53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(errorHandler56);
        org.junit.Assert.assertNotNull(errorHandler58);
        org.junit.Assert.assertNotNull(server59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(requestInterceptor62);
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(executor66);
        org.junit.Assert.assertNotNull(log67);
    }

    @Test
    public void test1562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1562");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.Server server5 = null;
        retrofit.client.Client.Provider provider6 = null;
        java.util.concurrent.Executor executor7 = null;
        java.util.concurrent.Executor executor8 = null;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        retrofit.converter.Converter converter10 = null;
        retrofit.Profiler profiler11 = null;
        retrofit.ErrorHandler errorHandler12 = null;
        retrofit.RestAdapter.Log log13 = null;
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter(server5, provider6, executor7, executor8, requestInterceptor9, converter10, profiler11, errorHandler12, log13, logLevel14);
        retrofit.ErrorHandler errorHandler16 = restAdapter15.errorHandler;
        int int17 = restAdapter15.getLOG_CHUNK_SIZE();
        retrofit.Server server18 = restAdapter15.getserver();
        retrofit.client.Client.Provider provider19 = restAdapter15.clientProvider;
        retrofit.client.Client.Provider provider20 = restAdapter15.getclientProvider();
        java.lang.String str21 = restAdapter15.getIDLE_THREAD_NAME();
        retrofit.Server server22 = null;
        retrofit.client.Client.Provider provider23 = null;
        java.util.concurrent.Executor executor24 = null;
        java.util.concurrent.Executor executor25 = null;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        retrofit.converter.Converter converter27 = null;
        retrofit.Profiler profiler28 = null;
        retrofit.ErrorHandler errorHandler29 = null;
        retrofit.RestAdapter.Log log30 = null;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server22, provider23, executor24, executor25, requestInterceptor26, converter27, profiler28, errorHandler29, log30, logLevel31);
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter32.logLevel;
        retrofit.ErrorHandler errorHandler34 = restAdapter32.geterrorHandler();
        java.util.concurrent.Executor executor35 = restAdapter32.getcallbackExecutor();
        retrofit.converter.Converter converter36 = restAdapter32.converter;
        retrofit.Server server37 = restAdapter32.getserver();
        retrofit.RestAdapter.LogLevel logLevel38 = restAdapter32.getLogLevel();
        restAdapter15.setLogLevel(logLevel38);
        retrofit.RestAdapter.Builder builder40 = builder0.setLogLevel(logLevel38);
        retrofit.ErrorHandler errorHandler41 = builder0.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter42 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor43 = serializedObjectSupporter42.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter44 = serializedObjectSupporter42.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter45 = serializedObjectSupporter42.deserializeObjectConverter5();
        retrofit.client.Request request46 = serializedObjectSupporter42.deserializeObjectRequest4();
        retrofit.ErrorHandler errorHandler47 = serializedObjectSupporter42.deserializeObjectErrorHandler1();
        builder0.errorHandler = errorHandler47;
        java.util.concurrent.Executor executor49 = builder0.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor51 = null;
        builder50.sethttpExecutor(executor51);
        retrofit.Profiler profiler53 = null;
        builder50.profiler = profiler53;
        retrofit.RestAdapter.LogLevel logLevel55 = builder50.logLevel;
        java.util.concurrent.Executor executor56 = null;
        builder50.sethttpExecutor(executor56);
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder60 = builder58.setServer("hi!");
        java.util.concurrent.Executor executor61 = null;
        builder60.callbackExecutor = executor61;
        retrofit.SerializedObjectSupporter serializedObjectSupporter63 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor64 = serializedObjectSupporter63.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder65 = builder60.setRequestInterceptor(requestInterceptor64);
        retrofit.RestAdapter.Builder builder66 = builder50.setRequestInterceptor(requestInterceptor64);
        java.util.concurrent.Executor executor67 = null;
        builder66.callbackExecutor = executor67;
        java.util.concurrent.Executor executor69 = null;
        builder66.callbackExecutor = executor69;
        retrofit.SerializedObjectSupporter serializedObjectSupporter71 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter72 = serializedObjectSupporter71.deserializeObjectConverter2();
        retrofit.client.Request request73 = serializedObjectSupporter71.deserializeObjectRequest7();
        retrofit.client.Request request74 = serializedObjectSupporter71.deserializeObjectRequest2();
        retrofit.client.Request request75 = serializedObjectSupporter71.deserializeObjectRequest3();
        retrofit.converter.GsonConverter gsonConverter76 = serializedObjectSupporter71.deserializeObjectConverter1();
        retrofit.converter.GsonConverter gsonConverter77 = serializedObjectSupporter71.deserializeObjectConverter5();
        builder66.converter = gsonConverter77;
        retrofit.RestAdapter.LogLevel logLevel79 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder66.logLevel = logLevel79;
        builder0.logLevel = logLevel79;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4000 + "'", int17 == 4000);
        org.junit.Assert.assertNull(server18);
        org.junit.Assert.assertNull(provider19);
        org.junit.Assert.assertNull(provider20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Retrofit-Idle" + "'", str21, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler34);
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertNull(converter36);
        org.junit.Assert.assertNull(server37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(errorHandler41);
        org.junit.Assert.assertNotNull(requestInterceptor43);
        org.junit.Assert.assertNotNull(gsonConverter44);
        org.junit.Assert.assertNotNull(gsonConverter45);
        org.junit.Assert.assertNotNull(request46);
        org.junit.Assert.assertNotNull(errorHandler47);
        org.junit.Assert.assertNull(executor49);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(requestInterceptor64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(gsonConverter72);
        org.junit.Assert.assertNotNull(request73);
        org.junit.Assert.assertNotNull(request74);
        org.junit.Assert.assertNotNull(request75);
        org.junit.Assert.assertNotNull(gsonConverter76);
        org.junit.Assert.assertNotNull(gsonConverter77);
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test1563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1563");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        java.util.concurrent.Executor executor4 = null;
        builder0.setcallbackExecutor(executor4);
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder9 = builder7.setServer("hi!");
        java.util.concurrent.Executor executor10 = null;
        builder9.callbackExecutor = executor10;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor13 = serializedObjectSupporter12.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder14 = builder9.setRequestInterceptor(requestInterceptor13);
        retrofit.RestAdapter.Builder builder15 = builder0.setRequestInterceptor(requestInterceptor13);
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor17 = null;
        builder16.sethttpExecutor(executor17);
        retrofit.converter.Converter converter19 = builder16.converter;
        java.util.concurrent.Executor executor20 = builder16.getcallbackExecutor();
        retrofit.client.Client.Provider provider21 = builder16.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter22 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request23 = serializedObjectSupporter22.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler24 = serializedObjectSupporter22.deserializeObjectErrorHandler1();
        builder16.errorHandler = errorHandler24;
        retrofit.converter.Converter converter26 = builder16.converter;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder29 = builder27.setServer("hi!");
        java.util.concurrent.Executor executor30 = null;
        builder29.callbackExecutor = executor30;
        retrofit.SerializedObjectSupporter serializedObjectSupporter32 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor33 = serializedObjectSupporter32.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder34 = builder29.setRequestInterceptor(requestInterceptor33);
        retrofit.RestAdapter.Builder builder35 = builder16.setRequestInterceptor(requestInterceptor33);
        retrofit.RequestInterceptor requestInterceptor36 = builder35.requestInterceptor;
        builder15.requestInterceptor = requestInterceptor36;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(provider21);
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertNotNull(errorHandler24);
        org.junit.Assert.assertNull(converter26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(requestInterceptor33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(requestInterceptor36);
    }

    @Test
    public void test1564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1564");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter8();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest5();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter0.deserializeObjectConverter8();
        retrofit.ErrorHandler errorHandler8 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(gsonConverter6);
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertNotNull(errorHandler8);
    }

    @Test
    public void test1565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1565");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.converter.Converter converter14 = restAdapter10.getconverter();
        retrofit.converter.Converter converter15 = restAdapter10.converter;
        retrofit.ErrorHandler errorHandler16 = restAdapter10.geterrorHandler();
        retrofit.client.Client.Provider provider17 = restAdapter10.getclientProvider();
        java.util.concurrent.Executor executor18 = restAdapter10.callbackExecutor;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(converter15);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNull(provider17);
        org.junit.Assert.assertNull(executor18);
    }

    @Test
    public void test1566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1566");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter8();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString3();
        retrofit.client.Request request7 = serializedObjectSupporter0.deserializeObjectRequest8();
        retrofit.RequestInterceptor requestInterceptor8 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "http://example.com/" + "'", str5, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GET" + "'", str6, "GET");
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(requestInterceptor8);
    }

    @Test
    public void test1567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1567");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        java.lang.String str13 = restAdapter10.getTHREAD_PREFIX();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.requestInterceptor;
        retrofit.client.Client.Provider provider15 = restAdapter10.clientProvider;
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter10.requestInterceptor;
        retrofit.ErrorHandler errorHandler17 = restAdapter10.errorHandler;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-" + "'", str13, "Retrofit-");
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNull(errorHandler17);
    }

    @Test
    public void test1568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1568");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider5 = builder0.getclientProvider();
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("hi!");
        java.util.concurrent.Executor executor9 = null;
        builder8.callbackExecutor = executor9;
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor12 = serializedObjectSupporter11.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder13 = builder8.setRequestInterceptor(requestInterceptor12);
        retrofit.SerializedObjectSupporter serializedObjectSupporter14 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request15 = serializedObjectSupporter14.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter14.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter14.deserializeObjectConverter1();
        builder13.converter = gsonConverter17;
        retrofit.RestAdapter.Builder builder19 = builder0.setConverter((retrofit.converter.Converter) gsonConverter17);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder22 = builder20.setServer("hi!");
        retrofit.client.Client.Provider provider23 = builder20.clientProvider;
        retrofit.RequestInterceptor requestInterceptor24 = builder20.requestInterceptor;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder27 = builder25.setServer("hi!");
        retrofit.client.Client.Provider provider28 = builder25.clientProvider;
        java.util.concurrent.Executor executor29 = null;
        builder25.setcallbackExecutor(executor29);
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder32 = builder25.setLog(log31);
        retrofit.RestAdapter.Builder builder33 = builder20.setLog(log31);
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor35 = null;
        builder34.sethttpExecutor(executor35);
        retrofit.Profiler profiler37 = null;
        builder34.profiler = profiler37;
        retrofit.Server server39 = builder34.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter40 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor41 = serializedObjectSupporter40.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter42 = serializedObjectSupporter40.deserializeObjectConverter7();
        retrofit.client.Request request43 = serializedObjectSupporter40.deserializeObjectRequest1();
        builder34.serializedObjectSupporter = serializedObjectSupporter40;
        builder34.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder48 = builder46.setServer("hi!");
        java.util.concurrent.Executor executor49 = null;
        builder48.callbackExecutor = executor49;
        retrofit.RestAdapter restAdapter51 = builder48.build();
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor53 = null;
        builder52.sethttpExecutor(executor53);
        retrofit.Profiler profiler55 = null;
        builder52.profiler = profiler55;
        retrofit.RestAdapter.Log log57 = builder52.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter58 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler59 = serializedObjectSupporter58.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder60 = builder52.setErrorHandler(errorHandler59);
        retrofit.RestAdapter.Builder builder61 = builder48.setErrorHandler(errorHandler59);
        java.util.concurrent.Executor executor62 = builder61.callbackExecutor;
        builder34.setcallbackExecutor(executor62);
        builder33.callbackExecutor = executor62;
        builder19.httpExecutor = executor62;
        retrofit.client.Client.Provider provider66 = builder19.clientProvider;
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(requestInterceptor12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(gsonConverter16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(provider23);
        org.junit.Assert.assertNull(requestInterceptor24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(provider28);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(server39);
        org.junit.Assert.assertNotNull(requestInterceptor41);
        org.junit.Assert.assertNotNull(gsonConverter42);
        org.junit.Assert.assertNotNull(request43);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(restAdapter51);
        org.junit.Assert.assertNull(log57);
        org.junit.Assert.assertNotNull(errorHandler59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(executor62);
        org.junit.Assert.assertNull(provider66);
    }

    @Test
    public void test1569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1569");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter10.logLevel;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        retrofit.converter.Converter converter14 = restAdapter10.converter;
        retrofit.Server server15 = restAdapter10.getserver();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter10.getLogLevel();
        retrofit.ErrorHandler errorHandler17 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor18 = restAdapter10.gethttpExecutor();
        retrofit.ErrorHandler errorHandler19 = restAdapter10.errorHandler;
        retrofit.converter.Converter converter20 = restAdapter10.getconverter();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(converter20);
    }

    @Test
    public void test1570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1570");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server4 = null;
        builder0.server = server4;
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        builder0.log = log6;
        retrofit.converter.Converter converter8 = builder0.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter9 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request10 = serializedObjectSupporter9.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler11 = serializedObjectSupporter9.deserializeObjectErrorHandler1();
        retrofit.mime.TypedString typedString12 = serializedObjectSupporter9.deserializeObjectTypedOutput2();
        retrofit.ErrorHandler errorHandler13 = serializedObjectSupporter9.deserializeObjectErrorHandler1();
        builder0.errorHandler = errorHandler13;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder17 = builder15.setServer("hi!");
        java.util.concurrent.Executor executor18 = null;
        builder17.callbackExecutor = executor18;
        retrofit.RestAdapter restAdapter20 = builder17.build();
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor22 = null;
        builder21.sethttpExecutor(executor22);
        retrofit.Profiler profiler24 = null;
        builder21.profiler = profiler24;
        retrofit.RestAdapter.Log log26 = builder21.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter27 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler28 = serializedObjectSupporter27.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder29 = builder21.setErrorHandler(errorHandler28);
        retrofit.RestAdapter.Builder builder30 = builder17.setErrorHandler(errorHandler28);
        java.util.concurrent.Executor executor31 = builder30.callbackExecutor;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor33 = null;
        builder32.sethttpExecutor(executor33);
        retrofit.Profiler profiler35 = null;
        builder32.profiler = profiler35;
        retrofit.Server server37 = builder32.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter38 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor39 = serializedObjectSupporter38.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter40 = serializedObjectSupporter38.deserializeObjectConverter7();
        retrofit.client.Request request41 = serializedObjectSupporter38.deserializeObjectRequest1();
        builder32.serializedObjectSupporter = serializedObjectSupporter38;
        java.lang.String str43 = serializedObjectSupporter38.deserializeObjectString2();
        retrofit.ErrorHandler errorHandler44 = serializedObjectSupporter38.deserializeObjectErrorHandler1();
        builder30.errorHandler = errorHandler44;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder48 = builder46.setServer("hi!");
        retrofit.client.Client.Provider provider49 = builder46.clientProvider;
        retrofit.RestAdapter.Log log50 = null;
        builder46.log = log50;
        java.util.concurrent.Executor executor52 = builder46.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor54 = builder53.getcallbackExecutor();
        retrofit.client.Client.Provider provider55 = null;
        builder53.clientProvider = provider55;
        retrofit.SerializedObjectSupporter serializedObjectSupporter57 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor58 = serializedObjectSupporter57.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter59 = serializedObjectSupporter57.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter60 = serializedObjectSupporter57.deserializeObjectConverter5();
        retrofit.client.Request request61 = serializedObjectSupporter57.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter62 = serializedObjectSupporter57.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter63 = serializedObjectSupporter57.deserializeObjectConverter6();
        retrofit.RestAdapter.Builder builder64 = builder53.setConverter((retrofit.converter.Converter) gsonConverter63);
        builder46.converter = gsonConverter63;
        retrofit.ErrorHandler errorHandler66 = builder46.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter67 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler68 = serializedObjectSupporter67.deserializeObjectErrorHandler1();
        retrofit.Server server69 = serializedObjectSupporter67.deserializeObjectServer1();
        builder46.server = server69;
        retrofit.RestAdapter.Builder builder71 = builder30.setServer(server69);
        retrofit.RequestInterceptor requestInterceptor72 = builder30.requestInterceptor;
        retrofit.RestAdapter.Log log73 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder74 = builder30.setLog(log73);
        java.util.concurrent.Executor executor75 = builder30.httpExecutor;
        builder0.httpExecutor = executor75;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNotNull(request10);
        org.junit.Assert.assertNotNull(errorHandler11);
        org.junit.Assert.assertNotNull(typedString12);
        org.junit.Assert.assertNotNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(restAdapter20);
        org.junit.Assert.assertNull(log26);
        org.junit.Assert.assertNotNull(errorHandler28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(executor31);
        org.junit.Assert.assertNull(server37);
        org.junit.Assert.assertNotNull(requestInterceptor39);
        org.junit.Assert.assertNotNull(gsonConverter40);
        org.junit.Assert.assertNotNull(request41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Retrofit-Idle" + "'", str43, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler44);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(provider49);
        org.junit.Assert.assertNull(executor52);
        org.junit.Assert.assertNull(executor54);
        org.junit.Assert.assertNotNull(requestInterceptor58);
        org.junit.Assert.assertNotNull(gsonConverter59);
        org.junit.Assert.assertNotNull(gsonConverter60);
        org.junit.Assert.assertNotNull(request61);
        org.junit.Assert.assertNotNull(gsonConverter62);
        org.junit.Assert.assertNotNull(gsonConverter63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(errorHandler66);
        org.junit.Assert.assertNotNull(errorHandler68);
        org.junit.Assert.assertNotNull(server69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(requestInterceptor72);
        org.junit.Assert.assertNotNull(log73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(executor75);
    }

    @Test
    public void test1571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1571");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        java.lang.String str13 = restAdapter10.getTHREAD_PREFIX();
        int int14 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.client.Response response16 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response18 = restAdapter10.logAndReplaceResponse("POST", response16, (long) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-" + "'", str13, "Retrofit-");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4000 + "'", int14 == 4000);
    }

    @Test
    public void test1572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1572");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.client.Request request9 = serializedObjectSupporter6.deserializeObjectRequest1();
        builder0.serializedObjectSupporter = serializedObjectSupporter6;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = null;
        builder11.sethttpExecutor(executor12);
        retrofit.Profiler profiler14 = null;
        builder11.profiler = profiler14;
        retrofit.Server server16 = builder11.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter17.deserializeObjectConverter7();
        retrofit.client.Request request20 = serializedObjectSupporter17.deserializeObjectRequest1();
        builder11.serializedObjectSupporter = serializedObjectSupporter17;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor23 = null;
        builder22.sethttpExecutor(executor23);
        retrofit.Profiler profiler25 = null;
        builder22.profiler = profiler25;
        retrofit.Server server27 = builder22.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter28 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor29 = serializedObjectSupporter28.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter30 = serializedObjectSupporter28.deserializeObjectConverter7();
        retrofit.client.Request request31 = serializedObjectSupporter28.deserializeObjectRequest1();
        builder22.serializedObjectSupporter = serializedObjectSupporter28;
        java.lang.String str33 = serializedObjectSupporter28.deserializeObjectString2();
        retrofit.ErrorHandler errorHandler34 = serializedObjectSupporter28.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder35 = builder11.setErrorHandler(errorHandler34);
        retrofit.RestAdapter.Builder builder36 = builder0.setErrorHandler(errorHandler34);
        retrofit.client.Client.Provider provider37 = builder36.clientProvider;
        retrofit.RestAdapter.Builder builder39 = builder36.setServer("http://example.com/");
        retrofit.client.Client.Provider provider40 = null;
        builder36.clientProvider = provider40;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor43 = null;
        builder42.sethttpExecutor(executor43);
        retrofit.converter.Converter converter45 = builder42.converter;
        java.util.concurrent.Executor executor46 = builder42.getcallbackExecutor();
        java.util.concurrent.Executor executor47 = builder42.callbackExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter48 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor49 = serializedObjectSupporter48.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter50 = serializedObjectSupporter48.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter51 = serializedObjectSupporter48.deserializeObjectConverter5();
        retrofit.RestAdapter.Builder builder52 = builder42.setConverter((retrofit.converter.Converter) gsonConverter51);
        retrofit.client.Client.Provider provider53 = builder42.getclientProvider();
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder56 = builder54.setServer("hi!");
        retrofit.client.Client.Provider provider57 = builder54.clientProvider;
        retrofit.RequestInterceptor requestInterceptor58 = builder54.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean60 = logLevel59.log();
        retrofit.RestAdapter.Builder builder61 = builder54.setLogLevel(logLevel59);
        retrofit.RestAdapter.Builder builder63 = builder54.setServer("http://example.com/");
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor65 = null;
        builder64.sethttpExecutor(executor65);
        retrofit.Profiler profiler67 = null;
        builder64.profiler = profiler67;
        retrofit.RestAdapter.LogLevel logLevel69 = builder64.logLevel;
        java.util.concurrent.Executor executor70 = null;
        builder64.sethttpExecutor(executor70);
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder74 = builder72.setServer("hi!");
        java.util.concurrent.Executor executor75 = null;
        builder74.callbackExecutor = executor75;
        retrofit.SerializedObjectSupporter serializedObjectSupporter77 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor78 = serializedObjectSupporter77.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder79 = builder74.setRequestInterceptor(requestInterceptor78);
        retrofit.RestAdapter.Builder builder80 = builder64.setRequestInterceptor(requestInterceptor78);
        retrofit.RestAdapter.Builder builder81 = builder63.setRequestInterceptor(requestInterceptor78);
        retrofit.RestAdapter.Builder builder82 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor83 = null;
        builder82.sethttpExecutor(executor83);
        retrofit.Profiler profiler85 = null;
        builder82.profiler = profiler85;
        retrofit.Server server87 = builder82.server;
        retrofit.RestAdapter.Builder builder89 = builder82.setServer("Retrofit-Idle");
        retrofit.client.Client.Provider provider90 = builder89.clientProvider;
        retrofit.SerializedObjectSupporter serializedObjectSupporter91 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request92 = serializedObjectSupporter91.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter93 = serializedObjectSupporter91.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter94 = serializedObjectSupporter91.deserializeObjectConverter1();
        retrofit.RequestInterceptor requestInterceptor95 = serializedObjectSupporter91.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder96 = builder89.setRequestInterceptor(requestInterceptor95);
        retrofit.RestAdapter.Builder builder97 = builder81.setRequestInterceptor(requestInterceptor95);
        builder42.requestInterceptor = requestInterceptor95;
        retrofit.RestAdapter.Builder builder99 = builder36.setRequestInterceptor(requestInterceptor95);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertNull(server27);
        org.junit.Assert.assertNotNull(requestInterceptor29);
        org.junit.Assert.assertNotNull(gsonConverter30);
        org.junit.Assert.assertNotNull(request31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Retrofit-Idle" + "'", str33, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(provider37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(converter45);
        org.junit.Assert.assertNull(executor46);
        org.junit.Assert.assertNull(executor47);
        org.junit.Assert.assertNotNull(requestInterceptor49);
        org.junit.Assert.assertNotNull(gsonConverter50);
        org.junit.Assert.assertNotNull(gsonConverter51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(provider53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(provider57);
        org.junit.Assert.assertNull(requestInterceptor58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(requestInterceptor78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNull(server87);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNull(provider90);
        org.junit.Assert.assertNotNull(request92);
        org.junit.Assert.assertNotNull(gsonConverter93);
        org.junit.Assert.assertNotNull(gsonConverter94);
        org.junit.Assert.assertNotNull(requestInterceptor95);
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertNotNull(builder99);
    }

    @Test
    public void test1573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1573");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        java.lang.String str13 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        retrofit.ErrorHandler errorHandler25 = restAdapter24.errorHandler;
        int int26 = restAdapter24.getLOG_CHUNK_SIZE();
        retrofit.RestAdapter.Log log27 = restAdapter24.log;
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter24.getLogLevel();
        restAdapter10.logLevel = logLevel28;
        retrofit.ErrorHandler errorHandler30 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler31 = restAdapter10.errorHandler;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder34 = builder32.setServer("hi!");
        java.util.concurrent.Executor executor35 = null;
        builder34.callbackExecutor = executor35;
        retrofit.RestAdapter restAdapter37 = builder34.build();
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor39 = null;
        builder38.sethttpExecutor(executor39);
        retrofit.Profiler profiler41 = null;
        builder38.profiler = profiler41;
        retrofit.RestAdapter.Log log43 = builder38.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter44 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler45 = serializedObjectSupporter44.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder46 = builder38.setErrorHandler(errorHandler45);
        retrofit.RestAdapter.Builder builder47 = builder34.setErrorHandler(errorHandler45);
        retrofit.converter.Converter converter48 = null;
        builder47.converter = converter48;
        retrofit.SerializedObjectSupporter serializedObjectSupporter50 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter51 = serializedObjectSupporter50.deserializeObjectConverter2();
        retrofit.client.Request request52 = serializedObjectSupporter50.deserializeObjectRequest7();
        retrofit.converter.GsonConverter gsonConverter53 = serializedObjectSupporter50.deserializeObjectConverter7();
        retrofit.mime.TypedString typedString54 = serializedObjectSupporter50.deserializeObjectTypedOutput2();
        builder47.serializedObjectSupporter = serializedObjectSupporter50;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter50;
        retrofit.Profiler profiler57 = restAdapter10.profiler;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-Idle" + "'", str13, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4000 + "'", int26 == 4000);
        org.junit.Assert.assertNull(log27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler30);
        org.junit.Assert.assertNull(errorHandler31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(restAdapter37);
        org.junit.Assert.assertNull(log43);
        org.junit.Assert.assertNotNull(errorHandler45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(gsonConverter51);
        org.junit.Assert.assertNotNull(request52);
        org.junit.Assert.assertNotNull(gsonConverter53);
        org.junit.Assert.assertNotNull(typedString54);
        org.junit.Assert.assertNull(profiler57);
    }

    @Test
    public void test1574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1574");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter1 = serializedObjectSupporter0.deserializeObjectConverter2();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest3();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.RequestInterceptor requestInterceptor6 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.ErrorHandler errorHandler7 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter0.deserializeObjectConverter4();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter9 = serializedObjectSupporter0.deserializeObjectLogLevel2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(gsonConverter1);
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(errorHandler7);
        org.junit.Assert.assertNotNull(gsonConverter8);
    }

    @Test
    public void test1575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1575");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.Server server5 = null;
        retrofit.client.Client.Provider provider6 = null;
        java.util.concurrent.Executor executor7 = null;
        java.util.concurrent.Executor executor8 = null;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        retrofit.converter.Converter converter10 = null;
        retrofit.Profiler profiler11 = null;
        retrofit.ErrorHandler errorHandler12 = null;
        retrofit.RestAdapter.Log log13 = null;
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter(server5, provider6, executor7, executor8, requestInterceptor9, converter10, profiler11, errorHandler12, log13, logLevel14);
        retrofit.ErrorHandler errorHandler16 = restAdapter15.errorHandler;
        int int17 = restAdapter15.getLOG_CHUNK_SIZE();
        retrofit.Server server18 = restAdapter15.getserver();
        retrofit.client.Client.Provider provider19 = restAdapter15.clientProvider;
        retrofit.client.Client.Provider provider20 = restAdapter15.getclientProvider();
        java.lang.String str21 = restAdapter15.getIDLE_THREAD_NAME();
        retrofit.Server server22 = null;
        retrofit.client.Client.Provider provider23 = null;
        java.util.concurrent.Executor executor24 = null;
        java.util.concurrent.Executor executor25 = null;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        retrofit.converter.Converter converter27 = null;
        retrofit.Profiler profiler28 = null;
        retrofit.ErrorHandler errorHandler29 = null;
        retrofit.RestAdapter.Log log30 = null;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server22, provider23, executor24, executor25, requestInterceptor26, converter27, profiler28, errorHandler29, log30, logLevel31);
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter32.logLevel;
        retrofit.ErrorHandler errorHandler34 = restAdapter32.geterrorHandler();
        java.util.concurrent.Executor executor35 = restAdapter32.getcallbackExecutor();
        retrofit.converter.Converter converter36 = restAdapter32.converter;
        retrofit.Server server37 = restAdapter32.getserver();
        retrofit.RestAdapter.LogLevel logLevel38 = restAdapter32.getLogLevel();
        restAdapter15.setLogLevel(logLevel38);
        retrofit.RestAdapter.Builder builder40 = builder0.setLogLevel(logLevel38);
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor42 = null;
        builder41.sethttpExecutor(executor42);
        retrofit.Profiler profiler44 = null;
        builder41.profiler = profiler44;
        retrofit.RestAdapter.LogLevel logLevel46 = builder41.logLevel;
        java.util.concurrent.Executor executor47 = null;
        builder41.sethttpExecutor(executor47);
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder51 = builder49.setServer("hi!");
        java.util.concurrent.Executor executor52 = null;
        builder51.callbackExecutor = executor52;
        retrofit.SerializedObjectSupporter serializedObjectSupporter54 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor55 = serializedObjectSupporter54.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder56 = builder51.setRequestInterceptor(requestInterceptor55);
        retrofit.RestAdapter.Builder builder57 = builder41.setRequestInterceptor(requestInterceptor55);
        java.util.concurrent.Executor executor58 = builder57.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter59 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor60 = serializedObjectSupporter59.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter61 = serializedObjectSupporter59.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter62 = serializedObjectSupporter59.deserializeObjectConverter7();
        retrofit.Server server63 = serializedObjectSupporter59.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder64 = builder57.setServer(server63);
        retrofit.RestAdapter.Builder builder65 = builder0.setServer(server63);
        java.util.concurrent.Executor executor66 = builder0.gethttpExecutor();
        java.util.concurrent.Executor executor67 = builder0.getcallbackExecutor();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4000 + "'", int17 == 4000);
        org.junit.Assert.assertNull(server18);
        org.junit.Assert.assertNull(provider19);
        org.junit.Assert.assertNull(provider20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Retrofit-Idle" + "'", str21, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler34);
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertNull(converter36);
        org.junit.Assert.assertNull(server37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(requestInterceptor55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(executor58);
        org.junit.Assert.assertNotNull(requestInterceptor60);
        org.junit.Assert.assertNotNull(gsonConverter61);
        org.junit.Assert.assertNotNull(gsonConverter62);
        org.junit.Assert.assertNotNull(server63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(executor66);
        org.junit.Assert.assertNull(executor67);
    }

    @Test
    public void test1576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1576");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        java.lang.String str13 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.converter.Converter converter14 = restAdapter10.converter;
        java.util.concurrent.Executor executor15 = restAdapter10.httpExecutor;
        retrofit.Profiler profiler16 = restAdapter10.getprofiler();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-Idle" + "'", str13, "Retrofit-Idle");
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(profiler16);
    }

    @Test
    public void test1577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1577");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RestAdapter.Log log4 = null;
        builder0.log = log4;
        java.util.concurrent.Executor executor6 = builder0.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = builder7.getcallbackExecutor();
        retrofit.client.Client.Provider provider9 = null;
        builder7.clientProvider = provider9;
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor12 = serializedObjectSupporter11.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter13 = serializedObjectSupporter11.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter11.deserializeObjectConverter5();
        retrofit.client.Request request15 = serializedObjectSupporter11.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter11.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter11.deserializeObjectConverter6();
        retrofit.RestAdapter.Builder builder18 = builder7.setConverter((retrofit.converter.Converter) gsonConverter17);
        builder0.converter = gsonConverter17;
        retrofit.ErrorHandler errorHandler20 = builder0.errorHandler;
        retrofit.Server server21 = null;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = null;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel30);
        retrofit.RestAdapter.Builder builder32 = builder0.setLogLevel(logLevel30);
        retrofit.client.Client.Provider provider33 = builder0.clientProvider;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNotNull(requestInterceptor12);
        org.junit.Assert.assertNotNull(gsonConverter13);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(gsonConverter16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(provider33);
    }

    @Test
    public void test1578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1578");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        java.lang.String str14 = restAdapter10.getTHREAD_PREFIX();
        retrofit.RestAdapter.Log log15 = restAdapter10.log;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Retrofit-" + "'", str14, "Retrofit-");
        org.junit.Assert.assertNull(log15);
    }

    @Test
    public void test1579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1579");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.Profiler profiler6 = builder0.profiler;
        retrofit.client.Client.Provider provider7 = builder0.getclientProvider();
        retrofit.Profiler profiler8 = null;
        builder0.profiler = profiler8;
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNull(profiler6);
        org.junit.Assert.assertNull(provider7);
    }

    @Test
    public void test1580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1580");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter2();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter7();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString1();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter5 = serializedObjectSupporter0.deserializeObjectLogLevel1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Retrofit-Idle" + "'", str1, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Retrofit-" + "'", str4, "Retrofit-");
    }

    @Test
    public void test1581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1581");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server4 = null;
        builder0.server = server4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = null;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        retrofit.ErrorHandler errorHandler17 = restAdapter16.errorHandler;
        java.util.concurrent.Executor executor18 = restAdapter16.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter16.getLogLevel();
        builder0.logLevel = logLevel19;
        java.util.concurrent.Executor executor21 = null;
        builder0.callbackExecutor = executor21;
        retrofit.client.Client.Provider provider23 = builder0.getclientProvider();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider23);
    }

    @Test
    public void test1582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1582");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest1();
        retrofit.Server server4 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.mime.TypedString typedString6 = serializedObjectSupporter0.deserializeObjectTypedOutput2();
        retrofit.client.Request request7 = serializedObjectSupporter0.deserializeObjectRequest2();
        java.lang.String str8 = request7.getMethod();
        java.lang.String str9 = request7.getUrl();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(server4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(typedString6);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "http://example.com/" + "'", str9, "http://example.com/");
    }

    @Test
    public void test1583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1583");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.client.Client.Provider provider3 = builder0.getclientProvider();
        retrofit.client.Client.Provider provider4 = builder0.getclientProvider();
        retrofit.Server server5 = builder0.server;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.sethttpExecutor(executor7);
        retrofit.Profiler profiler9 = null;
        builder6.profiler = profiler9;
        retrofit.Server server11 = builder6.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor13 = serializedObjectSupporter12.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter12.deserializeObjectConverter7();
        retrofit.client.Request request15 = serializedObjectSupporter12.deserializeObjectRequest1();
        builder6.serializedObjectSupporter = serializedObjectSupporter12;
        retrofit.client.Request request17 = serializedObjectSupporter12.deserializeObjectRequest2();
        retrofit.mime.TypedString typedString18 = serializedObjectSupporter12.deserializeObjectTypedOutput2();
        builder0.serializedObjectSupporter = serializedObjectSupporter12;
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter12.deserializeObjectConverter3();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter21 = serializedObjectSupporter12.deserializeObjectLogLevel1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(provider4);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNull(server11);
        org.junit.Assert.assertNotNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertNotNull(typedString18);
        org.junit.Assert.assertNotNull(gsonConverter20);
    }

    @Test
    public void test1584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1584");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest2();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString1();
        retrofit.client.Request request6 = serializedObjectSupporter0.deserializeObjectRequest3();
        retrofit.mime.TypedOutput typedOutput7 = request6.body;
        java.util.List<retrofit.client.Header> headerList8 = request6.getHeaders();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Retrofit-" + "'", str5, "Retrofit-");
        org.junit.Assert.assertNotNull(request6);
        org.junit.Assert.assertNotNull(typedOutput7);
        org.junit.Assert.assertNotNull(headerList8);
    }

    @Test
    public void test1585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1585");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.converter.Converter converter15 = restAdapter10.getconverter();
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = restAdapter10.serializedObjectSupporter;
        retrofit.Profiler profiler17 = restAdapter10.getprofiler();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(converter15);
        org.junit.Assert.assertNull(serializedObjectSupporter16);
        org.junit.Assert.assertNull(profiler17);
    }

    @Test
    public void test1586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1586");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter6();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest8();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString3();
        retrofit.client.Request request7 = serializedObjectSupporter0.deserializeObjectRequest1();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collections collections8 = serializedObjectSupporter0.deserializeObjectList1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.Collections$UnmodifiableRandomAccessList cannot be cast to java.util.Collections");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GET" + "'", str6, "GET");
        org.junit.Assert.assertNotNull(request7);
    }

    @Test
    public void test1587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1587");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider5 = builder0.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request7 = serializedObjectSupporter6.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler8 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        builder0.errorHandler = errorHandler8;
        retrofit.Server server10 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = builder0.serializedObjectSupporter;
        retrofit.converter.Converter converter12 = builder0.converter;
        retrofit.Profiler profiler13 = null;
        builder0.profiler = profiler13;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor16 = null;
        builder15.sethttpExecutor(executor16);
        retrofit.client.Client.Provider provider18 = builder15.getclientProvider();
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor20 = null;
        builder19.sethttpExecutor(executor20);
        retrofit.Profiler profiler22 = null;
        builder19.profiler = profiler22;
        retrofit.Server server24 = builder19.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor26 = serializedObjectSupporter25.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter27 = serializedObjectSupporter25.deserializeObjectConverter7();
        retrofit.client.Request request28 = serializedObjectSupporter25.deserializeObjectRequest1();
        builder19.serializedObjectSupporter = serializedObjectSupporter25;
        builder19.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder33 = builder31.setServer("hi!");
        java.util.concurrent.Executor executor34 = null;
        builder33.callbackExecutor = executor34;
        retrofit.RestAdapter restAdapter36 = builder33.build();
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor38 = null;
        builder37.sethttpExecutor(executor38);
        retrofit.Profiler profiler40 = null;
        builder37.profiler = profiler40;
        retrofit.RestAdapter.Log log42 = builder37.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter43 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler44 = serializedObjectSupporter43.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder45 = builder37.setErrorHandler(errorHandler44);
        retrofit.RestAdapter.Builder builder46 = builder33.setErrorHandler(errorHandler44);
        java.util.concurrent.Executor executor47 = builder46.callbackExecutor;
        builder19.setcallbackExecutor(executor47);
        builder15.setcallbackExecutor(executor47);
        builder0.sethttpExecutor(executor47);
        retrofit.SerializedObjectSupporter serializedObjectSupporter51 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor52 = serializedObjectSupporter51.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter53 = serializedObjectSupporter51.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter54 = serializedObjectSupporter51.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter55 = serializedObjectSupporter51.deserializeObjectConverter8();
        java.lang.String str56 = serializedObjectSupporter51.deserializeObjectString4();
        retrofit.converter.GsonConverter gsonConverter57 = serializedObjectSupporter51.deserializeObjectConverter8();
        builder0.converter = gsonConverter57;
        retrofit.ErrorHandler errorHandler59 = builder0.errorHandler;
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(errorHandler8);
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertNull(converter12);
        org.junit.Assert.assertNull(provider18);
        org.junit.Assert.assertNull(server24);
        org.junit.Assert.assertNotNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(gsonConverter27);
        org.junit.Assert.assertNotNull(request28);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(restAdapter36);
        org.junit.Assert.assertNull(log42);
        org.junit.Assert.assertNotNull(errorHandler44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(executor47);
        org.junit.Assert.assertNotNull(requestInterceptor52);
        org.junit.Assert.assertNotNull(gsonConverter53);
        org.junit.Assert.assertNotNull(gsonConverter54);
        org.junit.Assert.assertNotNull(gsonConverter55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "http://example.com/" + "'", str56, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter57);
        org.junit.Assert.assertNotNull(errorHandler59);
    }

    @Test
    public void test1588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1588");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        java.lang.String str14 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter10.getrequestInterceptor();
        retrofit.client.Client.Provider provider16 = restAdapter10.clientProvider;
        retrofit.RequestInterceptor requestInterceptor17 = restAdapter10.getrequestInterceptor();
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.Log log19 = restAdapter10.log;
        java.lang.String str20 = restAdapter10.getIDLE_THREAD_NAME();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Retrofit-Idle" + "'", str14, "Retrofit-Idle");
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNull(provider16);
        org.junit.Assert.assertNull(requestInterceptor17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(log19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Retrofit-Idle" + "'", str20, "Retrofit-Idle");
    }

    @Test
    public void test1589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1589");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.RestAdapter.Builder builder7 = builder0.setServer("Retrofit-Idle");
        java.util.concurrent.Executor executor8 = builder0.httpExecutor;
        builder0.ensureSaneDefaults();
        retrofit.Server server10 = null;
        retrofit.client.Client.Provider provider11 = null;
        java.util.concurrent.Executor executor12 = null;
        java.util.concurrent.Executor executor13 = null;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        retrofit.converter.Converter converter15 = null;
        retrofit.Profiler profiler16 = null;
        retrofit.ErrorHandler errorHandler17 = null;
        retrofit.RestAdapter.Log log18 = null;
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter(server10, provider11, executor12, executor13, requestInterceptor14, converter15, profiler16, errorHandler17, log18, logLevel19);
        retrofit.ErrorHandler errorHandler21 = restAdapter20.errorHandler;
        java.util.concurrent.Executor executor22 = restAdapter20.httpExecutor;
        java.lang.String str23 = restAdapter20.getIDLE_THREAD_NAME();
        java.util.concurrent.Executor executor24 = restAdapter20.httpExecutor;
        java.lang.String str25 = restAdapter20.getIDLE_THREAD_NAME();
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = restAdapter20.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter27 = new retrofit.SerializedObjectSupporter();
        java.lang.String str28 = serializedObjectSupporter27.deserializeObjectString3();
        restAdapter20.serializedObjectSupporter = serializedObjectSupporter27;
        retrofit.Server server30 = serializedObjectSupporter27.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder31 = builder0.setServer(server30);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Retrofit-Idle" + "'", str23, "Retrofit-Idle");
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Retrofit-Idle" + "'", str25, "Retrofit-Idle");
        org.junit.Assert.assertNull(serializedObjectSupporter26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "GET" + "'", str28, "GET");
        org.junit.Assert.assertNotNull(server30);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test1590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1590");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        java.util.concurrent.Executor executor5 = builder0.callbackExecutor;
        retrofit.ErrorHandler errorHandler6 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.sethttpExecutor(executor8);
        retrofit.Profiler profiler10 = null;
        builder7.profiler = profiler10;
        retrofit.Server server12 = builder7.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor14 = serializedObjectSupporter13.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter15 = serializedObjectSupporter13.deserializeObjectConverter7();
        retrofit.client.Request request16 = serializedObjectSupporter13.deserializeObjectRequest1();
        builder7.serializedObjectSupporter = serializedObjectSupporter13;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor19 = null;
        builder18.sethttpExecutor(executor19);
        retrofit.Profiler profiler21 = null;
        builder18.profiler = profiler21;
        retrofit.Server server23 = builder18.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor25 = serializedObjectSupporter24.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter26 = serializedObjectSupporter24.deserializeObjectConverter7();
        retrofit.client.Request request27 = serializedObjectSupporter24.deserializeObjectRequest1();
        builder18.serializedObjectSupporter = serializedObjectSupporter24;
        java.lang.String str29 = serializedObjectSupporter24.deserializeObjectString2();
        retrofit.ErrorHandler errorHandler30 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder31 = builder7.setErrorHandler(errorHandler30);
        retrofit.RestAdapter.Builder builder32 = builder0.setErrorHandler(errorHandler30);
        retrofit.SerializedObjectSupporter serializedObjectSupporter33 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor34 = serializedObjectSupporter33.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter35 = serializedObjectSupporter33.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter36 = serializedObjectSupporter33.deserializeObjectConverter4();
        java.lang.String str37 = serializedObjectSupporter33.deserializeObjectString5();
        retrofit.converter.GsonConverter gsonConverter38 = serializedObjectSupporter33.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter39 = serializedObjectSupporter33.deserializeObjectConverter1();
        retrofit.RestAdapter.Builder builder40 = builder0.setConverter((retrofit.converter.Converter) gsonConverter39);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNotNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(gsonConverter15);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNull(server23);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNotNull(gsonConverter26);
        org.junit.Assert.assertNotNull(request27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Retrofit-Idle" + "'", str29, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(requestInterceptor34);
        org.junit.Assert.assertNotNull(gsonConverter35);
        org.junit.Assert.assertNotNull(gsonConverter36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "POST" + "'", str37, "POST");
        org.junit.Assert.assertNotNull(gsonConverter38);
        org.junit.Assert.assertNotNull(gsonConverter39);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test1591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1591");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        java.util.concurrent.Executor executor6 = null;
        builder0.sethttpExecutor(executor6);
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder10 = builder8.setServer("hi!");
        java.util.concurrent.Executor executor11 = null;
        builder10.callbackExecutor = executor11;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor14 = serializedObjectSupporter13.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder15 = builder10.setRequestInterceptor(requestInterceptor14);
        retrofit.RestAdapter.Builder builder16 = builder0.setRequestInterceptor(requestInterceptor14);
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean18 = logLevel17.log();
        builder0.logLevel = logLevel17;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor21 = null;
        builder20.sethttpExecutor(executor21);
        retrofit.Profiler profiler23 = null;
        builder20.profiler = profiler23;
        retrofit.Server server25 = builder20.server;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder28 = builder26.setServer("hi!");
        retrofit.client.Client.Provider provider29 = builder26.clientProvider;
        retrofit.RequestInterceptor requestInterceptor30 = builder26.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean32 = logLevel31.log();
        retrofit.RestAdapter.Builder builder33 = builder26.setLogLevel(logLevel31);
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor35 = builder34.getcallbackExecutor();
        retrofit.client.Client.Provider provider36 = null;
        builder34.clientProvider = provider36;
        retrofit.Server server38 = null;
        builder34.server = server38;
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        builder34.log = log40;
        builder26.log = log40;
        builder20.log = log40;
        retrofit.RestAdapter.Builder builder44 = builder0.setLog(log40);
        retrofit.RestAdapter.LogLevel logLevel45 = builder0.logLevel;
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(server25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(provider29);
        org.junit.Assert.assertNull(requestInterceptor30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test1592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1592");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.logLevel = logLevel23;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter10.setLogLevel(logLevel26);
        retrofit.SerializedObjectSupporter serializedObjectSupporter28 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request29 = serializedObjectSupporter28.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler30 = serializedObjectSupporter28.deserializeObjectErrorHandler1();
        retrofit.mime.TypedString typedString31 = serializedObjectSupporter28.deserializeObjectTypedOutput2();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter28;
        retrofit.Server server33 = null;
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.RestAdapter.Log log41 = null;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter(server33, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log41, logLevel42);
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.logLevel;
        restAdapter10.setLogLevel(logLevel44);
        retrofit.client.Client.Provider provider46 = restAdapter10.getclientProvider();
        int int47 = restAdapter10.getLOG_CHUNK_SIZE();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(request29);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(typedString31);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 4000 + "'", int47 == 4000);
    }

    @Test
    public void test1593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1593");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest3();
        java.lang.String str5 = request4.method;
        java.util.List<retrofit.client.Header> headerList6 = request4.getHeaders();
        retrofit.mime.TypedOutput typedOutput7 = request4.getBody();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "POST" + "'", str5, "POST");
        org.junit.Assert.assertNotNull(headerList6);
        org.junit.Assert.assertNotNull(typedOutput7);
    }

    @Test
    public void test1594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1594");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.converter.Converter converter3 = builder2.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor5 = serializedObjectSupporter4.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter4.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter4.deserializeObjectConverter7();
        builder2.converter = gsonConverter7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = null;
        builder9.sethttpExecutor(executor10);
        retrofit.Profiler profiler12 = null;
        builder9.profiler = profiler12;
        retrofit.RestAdapter.LogLevel logLevel14 = builder9.logLevel;
        java.util.concurrent.Executor executor15 = null;
        builder9.sethttpExecutor(executor15);
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder19 = builder17.setServer("hi!");
        java.util.concurrent.Executor executor20 = null;
        builder19.callbackExecutor = executor20;
        retrofit.SerializedObjectSupporter serializedObjectSupporter22 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor23 = serializedObjectSupporter22.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder24 = builder19.setRequestInterceptor(requestInterceptor23);
        retrofit.RestAdapter.Builder builder25 = builder9.setRequestInterceptor(requestInterceptor23);
        java.util.concurrent.Executor executor26 = null;
        builder25.callbackExecutor = executor26;
        java.util.concurrent.Executor executor28 = null;
        builder25.callbackExecutor = executor28;
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter31 = serializedObjectSupporter30.deserializeObjectConverter2();
        retrofit.client.Request request32 = serializedObjectSupporter30.deserializeObjectRequest7();
        retrofit.client.Request request33 = serializedObjectSupporter30.deserializeObjectRequest2();
        retrofit.client.Request request34 = serializedObjectSupporter30.deserializeObjectRequest3();
        retrofit.converter.GsonConverter gsonConverter35 = serializedObjectSupporter30.deserializeObjectConverter1();
        retrofit.converter.GsonConverter gsonConverter36 = serializedObjectSupporter30.deserializeObjectConverter5();
        builder25.converter = gsonConverter36;
        retrofit.RestAdapter.Builder builder38 = builder2.setConverter((retrofit.converter.Converter) gsonConverter36);
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = null;
        builder39.sethttpExecutor(executor40);
        retrofit.converter.Converter converter42 = builder39.converter;
        java.util.concurrent.Executor executor43 = builder39.getcallbackExecutor();
        retrofit.client.Client.Provider provider44 = builder39.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter45 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request46 = serializedObjectSupporter45.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler47 = serializedObjectSupporter45.deserializeObjectErrorHandler1();
        builder39.errorHandler = errorHandler47;
        retrofit.Server server49 = builder39.server;
        builder39.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor51 = builder39.requestInterceptor;
        retrofit.RestAdapter.Builder builder52 = builder2.setRequestInterceptor(requestInterceptor51);
        retrofit.client.Client.Provider provider53 = builder2.getclientProvider();
        retrofit.Profiler profiler54 = null;
        builder2.profiler = profiler54;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder58 = builder56.setServer("hi!");
        java.util.concurrent.Executor executor59 = null;
        builder58.callbackExecutor = executor59;
        retrofit.RestAdapter restAdapter61 = builder58.build();
        retrofit.RestAdapter.Log log62 = restAdapter61.log;
        java.lang.String str63 = restAdapter61.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler64 = restAdapter61.geterrorHandler();
        retrofit.client.Client.Provider provider65 = restAdapter61.getclientProvider();
        builder2.setclientProvider(provider65);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNotNull(requestInterceptor5);
        org.junit.Assert.assertNotNull(gsonConverter6);
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(gsonConverter31);
        org.junit.Assert.assertNotNull(request32);
        org.junit.Assert.assertNotNull(request33);
        org.junit.Assert.assertNotNull(request34);
        org.junit.Assert.assertNotNull(gsonConverter35);
        org.junit.Assert.assertNotNull(gsonConverter36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(converter42);
        org.junit.Assert.assertNull(executor43);
        org.junit.Assert.assertNull(provider44);
        org.junit.Assert.assertNotNull(request46);
        org.junit.Assert.assertNotNull(errorHandler47);
        org.junit.Assert.assertNull(server49);
        org.junit.Assert.assertNotNull(requestInterceptor51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(provider53);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(restAdapter61);
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Retrofit-Idle" + "'", str63, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler64);
        org.junit.Assert.assertNotNull(provider65);
    }

    @Test
    public void test1595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1595");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest1();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter6();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter8();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString4();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "http://example.com/" + "'", str5, "http://example.com/");
    }

    @Test
    public void test1596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1596");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.SerializedObjectSupporter serializedObjectSupporter5 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor6 = serializedObjectSupporter5.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder7 = builder2.setRequestInterceptor(requestInterceptor6);
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = null;
        builder8.sethttpExecutor(executor9);
        retrofit.Profiler profiler11 = null;
        builder8.profiler = profiler11;
        retrofit.Server server13 = builder8.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter14 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor15 = serializedObjectSupporter14.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter14.deserializeObjectConverter7();
        retrofit.client.Request request17 = serializedObjectSupporter14.deserializeObjectRequest1();
        builder8.serializedObjectSupporter = serializedObjectSupporter14;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor20 = null;
        builder19.sethttpExecutor(executor20);
        retrofit.Profiler profiler22 = null;
        builder19.profiler = profiler22;
        retrofit.Server server24 = builder19.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor26 = serializedObjectSupporter25.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter27 = serializedObjectSupporter25.deserializeObjectConverter7();
        retrofit.client.Request request28 = serializedObjectSupporter25.deserializeObjectRequest1();
        builder19.serializedObjectSupporter = serializedObjectSupporter25;
        java.lang.String str30 = serializedObjectSupporter25.deserializeObjectString2();
        retrofit.ErrorHandler errorHandler31 = serializedObjectSupporter25.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder32 = builder8.setErrorHandler(errorHandler31);
        builder2.errorHandler = errorHandler31;
        retrofit.client.Client.Provider provider34 = builder2.getclientProvider();
        java.util.concurrent.Executor executor35 = builder2.gethttpExecutor();
        retrofit.Profiler profiler36 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder37 = builder2.setProfiler(profiler36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNotNull(requestInterceptor15);
        org.junit.Assert.assertNotNull(gsonConverter16);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertNull(server24);
        org.junit.Assert.assertNotNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(gsonConverter27);
        org.junit.Assert.assertNotNull(request28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Retrofit-Idle" + "'", str30, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(provider34);
        org.junit.Assert.assertNull(executor35);
    }

    @Test
    public void test1597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1597");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.RestAdapter restAdapter5 = builder2.build();
        retrofit.RestAdapter.Log log6 = restAdapter5.log;
        java.util.concurrent.Executor executor7 = restAdapter5.gethttpExecutor();
        java.lang.String str8 = restAdapter5.getIDLE_THREAD_NAME();
        retrofit.Server server9 = null;
        retrofit.client.Client.Provider provider10 = null;
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        retrofit.converter.Converter converter14 = null;
        retrofit.Profiler profiler15 = null;
        retrofit.ErrorHandler errorHandler16 = null;
        retrofit.RestAdapter.Log log17 = null;
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter(server9, provider10, executor11, executor12, requestInterceptor13, converter14, profiler15, errorHandler16, log17, logLevel18);
        retrofit.ErrorHandler errorHandler20 = restAdapter19.errorHandler;
        java.util.concurrent.Executor executor21 = restAdapter19.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter19.getLogLevel();
        restAdapter5.logLevel = logLevel22;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = restAdapter5.serializedObjectSupporter;
        retrofit.RequestInterceptor requestInterceptor25 = restAdapter5.requestInterceptor;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(restAdapter5);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertNotNull(executor7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Retrofit-Idle" + "'", str8, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(serializedObjectSupporter24);
        org.junit.Assert.assertNotNull(requestInterceptor25);
    }

    @Test
    public void test1598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1598");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter10.new RestHandler();
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        retrofit.RestAdapter.LogLevel logLevel25 = restAdapter24.logLevel;
        restAdapter10.logLevel = logLevel25;
        retrofit.RestAdapter.LogLevel logLevel27 = restAdapter10.logLevel;
        java.util.concurrent.Executor executor28 = restAdapter10.gethttpExecutor();
        retrofit.Server server29 = null;
        retrofit.client.Client.Provider provider30 = null;
        java.util.concurrent.Executor executor31 = null;
        java.util.concurrent.Executor executor32 = null;
        retrofit.RequestInterceptor requestInterceptor33 = null;
        retrofit.converter.Converter converter34 = null;
        retrofit.Profiler profiler35 = null;
        retrofit.ErrorHandler errorHandler36 = null;
        retrofit.RestAdapter.Log log37 = null;
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter(server29, provider30, executor31, executor32, requestInterceptor33, converter34, profiler35, errorHandler36, log37, logLevel38);
        retrofit.RestAdapter.LogLevel logLevel40 = restAdapter39.logLevel;
        retrofit.ErrorHandler errorHandler41 = restAdapter39.geterrorHandler();
        java.lang.String str42 = restAdapter39.getIDLE_THREAD_NAME();
        int int43 = restAdapter39.getLOG_CHUNK_SIZE();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter39.getLogLevel();
        restAdapter10.setLogLevel(logLevel44);
        retrofit.RestAdapter.LogLevel logLevel46 = restAdapter10.logLevel;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Retrofit-Idle" + "'", str42, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 4000 + "'", int43 == 4000);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test1599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1599");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        java.util.concurrent.Executor executor6 = null;
        builder0.sethttpExecutor(executor6);
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder10 = builder8.setServer("hi!");
        java.util.concurrent.Executor executor11 = null;
        builder10.callbackExecutor = executor11;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor14 = serializedObjectSupporter13.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder15 = builder10.setRequestInterceptor(requestInterceptor14);
        retrofit.RestAdapter.Builder builder16 = builder0.setRequestInterceptor(requestInterceptor14);
        java.util.concurrent.Executor executor17 = null;
        builder16.callbackExecutor = executor17;
        java.util.concurrent.Executor executor19 = null;
        builder16.callbackExecutor = executor19;
        retrofit.SerializedObjectSupporter serializedObjectSupporter21 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter21.deserializeObjectConverter2();
        retrofit.client.Request request23 = serializedObjectSupporter21.deserializeObjectRequest7();
        retrofit.client.Request request24 = serializedObjectSupporter21.deserializeObjectRequest2();
        retrofit.client.Request request25 = serializedObjectSupporter21.deserializeObjectRequest3();
        retrofit.converter.GsonConverter gsonConverter26 = serializedObjectSupporter21.deserializeObjectConverter1();
        retrofit.converter.GsonConverter gsonConverter27 = serializedObjectSupporter21.deserializeObjectConverter5();
        builder16.converter = gsonConverter27;
        java.util.concurrent.Executor executor29 = null;
        builder16.setcallbackExecutor(executor29);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertNotNull(request24);
        org.junit.Assert.assertNotNull(request25);
        org.junit.Assert.assertNotNull(gsonConverter26);
        org.junit.Assert.assertNotNull(gsonConverter27);
    }

    @Test
    public void test1600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1600");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        java.util.concurrent.Executor executor5 = builder0.callbackExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter6.deserializeObjectConverter5();
        retrofit.RestAdapter.Builder builder10 = builder0.setConverter((retrofit.converter.Converter) gsonConverter9);
        retrofit.ErrorHandler errorHandler11 = builder10.errorHandler;
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = null;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel21);
        retrofit.ErrorHandler errorHandler23 = restAdapter22.errorHandler;
        int int24 = restAdapter22.getLOG_CHUNK_SIZE();
        retrofit.Server server25 = restAdapter22.getserver();
        retrofit.converter.Converter converter26 = restAdapter22.getconverter();
        retrofit.converter.Converter converter27 = restAdapter22.converter;
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter22.logLevel;
        retrofit.RestAdapter.Builder builder29 = builder10.setLogLevel(logLevel28);
        retrofit.RestAdapter.LogLevel logLevel30 = builder10.logLevel;
        retrofit.RestAdapter.Log log31 = builder10.log;
        java.util.concurrent.Executor executor32 = builder10.getcallbackExecutor();
        retrofit.client.Client.Provider provider33 = builder10.clientProvider;
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(gsonConverter9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4000 + "'", int24 == 4000);
        org.junit.Assert.assertNull(server25);
        org.junit.Assert.assertNull(converter26);
        org.junit.Assert.assertNull(converter27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(log31);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(provider33);
    }

    @Test
    public void test1601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1601");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter6();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest2();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString3();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GET" + "'", str6, "GET");
    }

    @Test
    public void test1602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1602");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server4 = null;
        builder0.server = server4;
        java.util.concurrent.Executor executor6 = builder0.gethttpExecutor();
        java.util.concurrent.Executor executor7 = builder0.gethttpExecutor();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder10 = builder8.setServer("hi!");
        retrofit.client.Client.Provider provider11 = builder8.clientProvider;
        retrofit.RequestInterceptor requestInterceptor12 = builder8.requestInterceptor;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder15 = builder13.setServer("hi!");
        retrofit.client.Client.Provider provider16 = builder13.clientProvider;
        java.util.concurrent.Executor executor17 = null;
        builder13.setcallbackExecutor(executor17);
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder20 = builder13.setLog(log19);
        retrofit.RestAdapter.Builder builder21 = builder8.setLog(log19);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor23 = null;
        builder22.sethttpExecutor(executor23);
        retrofit.Profiler profiler25 = null;
        builder22.profiler = profiler25;
        retrofit.Server server27 = builder22.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter28 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor29 = serializedObjectSupporter28.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter30 = serializedObjectSupporter28.deserializeObjectConverter7();
        retrofit.client.Request request31 = serializedObjectSupporter28.deserializeObjectRequest1();
        builder22.serializedObjectSupporter = serializedObjectSupporter28;
        builder22.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder36 = builder34.setServer("hi!");
        java.util.concurrent.Executor executor37 = null;
        builder36.callbackExecutor = executor37;
        retrofit.RestAdapter restAdapter39 = builder36.build();
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor41 = null;
        builder40.sethttpExecutor(executor41);
        retrofit.Profiler profiler43 = null;
        builder40.profiler = profiler43;
        retrofit.RestAdapter.Log log45 = builder40.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter46 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler47 = serializedObjectSupporter46.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder48 = builder40.setErrorHandler(errorHandler47);
        retrofit.RestAdapter.Builder builder49 = builder36.setErrorHandler(errorHandler47);
        java.util.concurrent.Executor executor50 = builder49.callbackExecutor;
        builder22.setcallbackExecutor(executor50);
        builder21.callbackExecutor = executor50;
        builder0.httpExecutor = executor50;
        retrofit.SerializedObjectSupporter serializedObjectSupporter54 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor55 = serializedObjectSupporter54.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter56 = serializedObjectSupporter54.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter57 = serializedObjectSupporter54.deserializeObjectConverter5();
        retrofit.client.Request request58 = serializedObjectSupporter54.deserializeObjectRequest4();
        retrofit.ErrorHandler errorHandler59 = serializedObjectSupporter54.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder60 = builder0.setErrorHandler(errorHandler59);
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertNull(requestInterceptor12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(provider16);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(server27);
        org.junit.Assert.assertNotNull(requestInterceptor29);
        org.junit.Assert.assertNotNull(gsonConverter30);
        org.junit.Assert.assertNotNull(request31);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(restAdapter39);
        org.junit.Assert.assertNull(log45);
        org.junit.Assert.assertNotNull(errorHandler47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(executor50);
        org.junit.Assert.assertNotNull(requestInterceptor55);
        org.junit.Assert.assertNotNull(gsonConverter56);
        org.junit.Assert.assertNotNull(gsonConverter57);
        org.junit.Assert.assertNotNull(request58);
        org.junit.Assert.assertNotNull(errorHandler59);
        org.junit.Assert.assertNotNull(builder60);
    }

    @Test
    public void test1603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1603");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest8();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest5();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString1();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Retrofit-" + "'", str5, "Retrofit-");
    }

    @Test
    public void test1604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1604");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.RestAdapter.Builder builder7 = builder0.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler8 = builder7.errorHandler;
        retrofit.RestAdapter restAdapter9 = builder7.build();
        java.util.concurrent.Executor executor10 = restAdapter9.callbackExecutor;
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNotNull(restAdapter9);
        org.junit.Assert.assertNotNull(executor10);
    }

    @Test
    public void test1605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1605");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        java.util.concurrent.Executor executor5 = builder0.callbackExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter6.deserializeObjectConverter5();
        retrofit.RestAdapter.Builder builder10 = builder0.setConverter((retrofit.converter.Converter) gsonConverter9);
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = null;
        builder11.sethttpExecutor(executor12);
        retrofit.converter.Converter converter14 = builder11.converter;
        java.util.concurrent.Executor executor15 = builder11.getcallbackExecutor();
        java.util.concurrent.Executor executor16 = builder11.callbackExecutor;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor18 = null;
        builder17.sethttpExecutor(executor18);
        retrofit.Profiler profiler20 = null;
        builder17.profiler = profiler20;
        retrofit.Server server22 = builder17.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter23 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor24 = serializedObjectSupporter23.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter25 = serializedObjectSupporter23.deserializeObjectConverter7();
        retrofit.client.Request request26 = serializedObjectSupporter23.deserializeObjectRequest1();
        builder17.serializedObjectSupporter = serializedObjectSupporter23;
        builder17.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder31 = builder29.setServer("hi!");
        java.util.concurrent.Executor executor32 = null;
        builder31.callbackExecutor = executor32;
        retrofit.RestAdapter restAdapter34 = builder31.build();
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor36 = null;
        builder35.sethttpExecutor(executor36);
        retrofit.Profiler profiler38 = null;
        builder35.profiler = profiler38;
        retrofit.RestAdapter.Log log40 = builder35.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter41 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler42 = serializedObjectSupporter41.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder43 = builder35.setErrorHandler(errorHandler42);
        retrofit.RestAdapter.Builder builder44 = builder31.setErrorHandler(errorHandler42);
        java.util.concurrent.Executor executor45 = builder44.callbackExecutor;
        builder17.setcallbackExecutor(executor45);
        builder11.httpExecutor = executor45;
        builder0.sethttpExecutor(executor45);
        java.util.concurrent.Executor executor49 = builder0.getcallbackExecutor();
        java.util.concurrent.Executor executor50 = builder0.callbackExecutor;
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(gsonConverter9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(server22);
        org.junit.Assert.assertNotNull(requestInterceptor24);
        org.junit.Assert.assertNotNull(gsonConverter25);
        org.junit.Assert.assertNotNull(request26);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(restAdapter34);
        org.junit.Assert.assertNull(log40);
        org.junit.Assert.assertNotNull(errorHandler42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(executor45);
        org.junit.Assert.assertNull(executor49);
        org.junit.Assert.assertNull(executor50);
    }

    @Test
    public void test1606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1606");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.logLevel = logLevel23;
        retrofit.Server server26 = restAdapter10.getserver();
        java.util.concurrent.Executor executor27 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel28 = null;
        restAdapter10.setLogLevel(logLevel28);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(server26);
        org.junit.Assert.assertNull(executor27);
    }

    @Test
    public void test1607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1607");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.client.Client.Provider provider15 = restAdapter10.getclientProvider();
        java.lang.String str16 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.Server server17 = null;
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Log log25 = null;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server17, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log25, logLevel26);
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter27.logLevel;
        retrofit.ErrorHandler errorHandler29 = restAdapter27.geterrorHandler();
        java.util.concurrent.Executor executor30 = restAdapter27.getcallbackExecutor();
        retrofit.converter.Converter converter31 = restAdapter27.converter;
        retrofit.Server server32 = restAdapter27.getserver();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter27.getLogLevel();
        restAdapter10.setLogLevel(logLevel33);
        retrofit.RestAdapter.RestHandler restHandler35 = restAdapter10.new RestHandler();
        retrofit.Server server36 = null;
        retrofit.client.Client.Provider provider37 = null;
        java.util.concurrent.Executor executor38 = null;
        java.util.concurrent.Executor executor39 = null;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        retrofit.converter.Converter converter41 = null;
        retrofit.Profiler profiler42 = null;
        retrofit.ErrorHandler errorHandler43 = null;
        retrofit.RestAdapter.Log log44 = null;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter(server36, provider37, executor38, executor39, requestInterceptor40, converter41, profiler42, errorHandler43, log44, logLevel45);
        retrofit.ErrorHandler errorHandler47 = restAdapter46.errorHandler;
        int int48 = restAdapter46.getLOG_CHUNK_SIZE();
        retrofit.Server server49 = restAdapter46.getserver();
        retrofit.Server server50 = null;
        retrofit.client.Client.Provider provider51 = null;
        java.util.concurrent.Executor executor52 = null;
        java.util.concurrent.Executor executor53 = null;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        retrofit.converter.Converter converter55 = null;
        retrofit.Profiler profiler56 = null;
        retrofit.ErrorHandler errorHandler57 = null;
        retrofit.RestAdapter.Log log58 = null;
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter(server50, provider51, executor52, executor53, requestInterceptor54, converter55, profiler56, errorHandler57, log58, logLevel59);
        restAdapter46.logLevel = logLevel59;
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter46.setLogLevel(logLevel62);
        restAdapter10.setLogLevel(logLevel62);
        java.util.concurrent.Executor executor65 = restAdapter10.httpExecutor;
        java.util.concurrent.Executor executor66 = restAdapter10.callbackExecutor;
        retrofit.ErrorHandler errorHandler67 = restAdapter10.geterrorHandler();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Retrofit-Idle" + "'", str16, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNull(converter31);
        org.junit.Assert.assertNull(server32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 4000 + "'", int48 == 4000);
        org.junit.Assert.assertNull(server49);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor65);
        org.junit.Assert.assertNull(executor66);
        org.junit.Assert.assertNull(errorHandler67);
    }

    @Test
    public void test1608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1608");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter1 = serializedObjectSupporter0.deserializeObjectConverter2();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest3();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.RequestInterceptor requestInterceptor6 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.mime.TypedString typedString7 = serializedObjectSupporter0.deserializeObjectTypedOutput2();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter0.deserializeObjectConverter7();
        java.lang.String str9 = serializedObjectSupporter0.deserializeObjectString2();
        retrofit.client.Request request10 = serializedObjectSupporter0.deserializeObjectRequest1();
        java.lang.String str11 = serializedObjectSupporter0.deserializeObjectString2();
        java.lang.String str12 = serializedObjectSupporter0.deserializeObjectString4();
        org.junit.Assert.assertNotNull(gsonConverter1);
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(typedString7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Retrofit-Idle" + "'", str9, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(request10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-Idle" + "'", str11, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "http://example.com/" + "'", str12, "http://example.com/");
    }

    @Test
    public void test1609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1609");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean6 = logLevel5.log();
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel5);
        java.util.concurrent.Executor executor8 = null;
        builder7.setcallbackExecutor(executor8);
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor11 = null;
        builder10.sethttpExecutor(executor11);
        retrofit.Profiler profiler13 = null;
        builder10.profiler = profiler13;
        retrofit.Server server15 = builder10.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor17 = serializedObjectSupporter16.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter18 = serializedObjectSupporter16.deserializeObjectConverter7();
        retrofit.client.Request request19 = serializedObjectSupporter16.deserializeObjectRequest1();
        builder10.serializedObjectSupporter = serializedObjectSupporter16;
        builder10.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder24 = builder22.setServer("hi!");
        java.util.concurrent.Executor executor25 = null;
        builder24.callbackExecutor = executor25;
        retrofit.RestAdapter restAdapter27 = builder24.build();
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor29 = null;
        builder28.sethttpExecutor(executor29);
        retrofit.Profiler profiler31 = null;
        builder28.profiler = profiler31;
        retrofit.RestAdapter.Log log33 = builder28.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter34 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler35 = serializedObjectSupporter34.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder36 = builder28.setErrorHandler(errorHandler35);
        retrofit.RestAdapter.Builder builder37 = builder24.setErrorHandler(errorHandler35);
        java.util.concurrent.Executor executor38 = builder37.callbackExecutor;
        builder10.setcallbackExecutor(executor38);
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor41 = null;
        builder40.sethttpExecutor(executor41);
        retrofit.Profiler profiler43 = null;
        builder40.profiler = profiler43;
        retrofit.Server server45 = builder40.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter46 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor47 = serializedObjectSupporter46.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter48 = serializedObjectSupporter46.deserializeObjectConverter7();
        retrofit.client.Request request49 = serializedObjectSupporter46.deserializeObjectRequest1();
        builder40.serializedObjectSupporter = serializedObjectSupporter46;
        builder40.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder54 = builder52.setServer("hi!");
        java.util.concurrent.Executor executor55 = null;
        builder54.callbackExecutor = executor55;
        retrofit.RestAdapter restAdapter57 = builder54.build();
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor59 = null;
        builder58.sethttpExecutor(executor59);
        retrofit.Profiler profiler61 = null;
        builder58.profiler = profiler61;
        retrofit.RestAdapter.Log log63 = builder58.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter64 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler65 = serializedObjectSupporter64.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder66 = builder58.setErrorHandler(errorHandler65);
        retrofit.RestAdapter.Builder builder67 = builder54.setErrorHandler(errorHandler65);
        java.util.concurrent.Executor executor68 = builder67.callbackExecutor;
        builder40.setcallbackExecutor(executor68);
        retrofit.RestAdapter.Builder builder70 = builder7.setExecutors(executor38, executor68);
        retrofit.RestAdapter.Builder builder72 = builder7.setServer("hi!");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertNotNull(requestInterceptor17);
        org.junit.Assert.assertNotNull(gsonConverter18);
        org.junit.Assert.assertNotNull(request19);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(restAdapter27);
        org.junit.Assert.assertNull(log33);
        org.junit.Assert.assertNotNull(errorHandler35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(executor38);
        org.junit.Assert.assertNull(server45);
        org.junit.Assert.assertNotNull(requestInterceptor47);
        org.junit.Assert.assertNotNull(gsonConverter48);
        org.junit.Assert.assertNotNull(request49);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(restAdapter57);
        org.junit.Assert.assertNull(log63);
        org.junit.Assert.assertNotNull(errorHandler65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(executor68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
    }

    @Test
    public void test1610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1610");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter8();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.ErrorHandler errorHandler5 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter0.deserializeObjectConverter5();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Retrofit-Idle" + "'", str3, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(errorHandler5);
        org.junit.Assert.assertNotNull(gsonConverter6);
    }

    @Test
    public void test1611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1611");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = null;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter13;
        retrofit.client.Client.Provider provider15 = restAdapter10.getclientProvider();
        retrofit.ErrorHandler errorHandler16 = restAdapter10.geterrorHandler();
        retrofit.RequestInterceptor requestInterceptor17 = restAdapter10.requestInterceptor;
        retrofit.client.Client.Provider provider18 = restAdapter10.clientProvider;
        java.util.concurrent.Executor executor19 = restAdapter10.getcallbackExecutor();
        retrofit.client.Client.Provider provider20 = restAdapter10.getclientProvider();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNull(requestInterceptor17);
        org.junit.Assert.assertNull(provider18);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(provider20);
    }

    @Test
    public void test1612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1612");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.client.Client.Provider provider3 = builder0.getclientProvider();
        retrofit.client.Client.Provider provider4 = builder0.getclientProvider();
        retrofit.Server server5 = builder0.server;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.sethttpExecutor(executor7);
        retrofit.Profiler profiler9 = null;
        builder6.profiler = profiler9;
        retrofit.Server server11 = builder6.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor13 = serializedObjectSupporter12.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter12.deserializeObjectConverter7();
        retrofit.client.Request request15 = serializedObjectSupporter12.deserializeObjectRequest1();
        builder6.serializedObjectSupporter = serializedObjectSupporter12;
        retrofit.client.Request request17 = serializedObjectSupporter12.deserializeObjectRequest2();
        retrofit.mime.TypedString typedString18 = serializedObjectSupporter12.deserializeObjectTypedOutput2();
        builder0.serializedObjectSupporter = serializedObjectSupporter12;
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter12.deserializeObjectConverter7();
        retrofit.client.Request request21 = serializedObjectSupporter12.deserializeObjectRequest4();
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(provider4);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNull(server11);
        org.junit.Assert.assertNotNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertNotNull(typedString18);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNotNull(request21);
    }

    @Test
    public void test1613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1613");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler13 = restAdapter10.geterrorHandler();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.getrequestInterceptor();
        retrofit.converter.Converter converter15 = restAdapter10.getconverter();
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter10.getrequestInterceptor();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNull(converter15);
        org.junit.Assert.assertNull(requestInterceptor16);
    }

    @Test
    public void test1614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1614");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider5 = builder0.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request7 = serializedObjectSupporter6.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler8 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        builder0.errorHandler = errorHandler8;
        retrofit.RestAdapter.Log log10 = builder0.log;
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Log log19 = null;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log19, logLevel20);
        retrofit.ErrorHandler errorHandler22 = restAdapter21.errorHandler;
        retrofit.ErrorHandler errorHandler23 = restAdapter21.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter21.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request26 = serializedObjectSupporter25.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter27 = serializedObjectSupporter25.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter25.deserializeObjectConverter1();
        restHandler24.serializedObjectSupporter = serializedObjectSupporter25;
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = restHandler24.serializedObjectSupporter;
        java.lang.String str31 = serializedObjectSupporter30.deserializeObjectString5();
        builder0.serializedObjectSupporter = serializedObjectSupporter30;
        retrofit.client.Request request33 = serializedObjectSupporter30.deserializeObjectRequest5();
        retrofit.converter.GsonConverter gsonConverter34 = serializedObjectSupporter30.deserializeObjectConverter1();
        retrofit.converter.GsonConverter gsonConverter35 = serializedObjectSupporter30.deserializeObjectConverter1();
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(errorHandler8);
        org.junit.Assert.assertNull(log10);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNotNull(request26);
        org.junit.Assert.assertNotNull(gsonConverter27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(serializedObjectSupporter30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "POST" + "'", str31, "POST");
        org.junit.Assert.assertNotNull(request33);
        org.junit.Assert.assertNotNull(gsonConverter34);
        org.junit.Assert.assertNotNull(gsonConverter35);
    }

    @Test
    public void test1615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1615");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.RestAdapter restAdapter5 = builder2.build();
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.sethttpExecutor(executor7);
        retrofit.Profiler profiler9 = null;
        builder6.profiler = profiler9;
        retrofit.RestAdapter.Log log11 = builder6.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler13 = serializedObjectSupporter12.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder14 = builder6.setErrorHandler(errorHandler13);
        retrofit.RestAdapter.Builder builder15 = builder2.setErrorHandler(errorHandler13);
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder17 = builder15.setLogLevel(logLevel16);
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder20 = builder18.setServer("hi!");
        java.util.concurrent.Executor executor21 = null;
        builder20.callbackExecutor = executor21;
        retrofit.RestAdapter restAdapter23 = builder20.build();
        retrofit.RestAdapter.Log log24 = restAdapter23.log;
        java.util.concurrent.Executor executor25 = restAdapter23.gethttpExecutor();
        java.lang.String str26 = restAdapter23.getIDLE_THREAD_NAME();
        retrofit.Server server27 = null;
        retrofit.client.Client.Provider provider28 = null;
        java.util.concurrent.Executor executor29 = null;
        java.util.concurrent.Executor executor30 = null;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        retrofit.converter.Converter converter32 = null;
        retrofit.Profiler profiler33 = null;
        retrofit.ErrorHandler errorHandler34 = null;
        retrofit.RestAdapter.Log log35 = null;
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter(server27, provider28, executor29, executor30, requestInterceptor31, converter32, profiler33, errorHandler34, log35, logLevel36);
        retrofit.ErrorHandler errorHandler38 = restAdapter37.errorHandler;
        java.util.concurrent.Executor executor39 = restAdapter37.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel40 = restAdapter37.getLogLevel();
        restAdapter23.logLevel = logLevel40;
        retrofit.ErrorHandler errorHandler42 = restAdapter23.geterrorHandler();
        retrofit.RestAdapter.Builder builder43 = builder17.setErrorHandler(errorHandler42);
        retrofit.Server server44 = null;
        retrofit.client.Client.Provider provider45 = null;
        java.util.concurrent.Executor executor46 = null;
        java.util.concurrent.Executor executor47 = null;
        retrofit.RequestInterceptor requestInterceptor48 = null;
        retrofit.converter.Converter converter49 = null;
        retrofit.Profiler profiler50 = null;
        retrofit.ErrorHandler errorHandler51 = null;
        retrofit.RestAdapter.Log log52 = null;
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter(server44, provider45, executor46, executor47, requestInterceptor48, converter49, profiler50, errorHandler51, log52, logLevel53);
        retrofit.ErrorHandler errorHandler55 = restAdapter54.errorHandler;
        int int56 = restAdapter54.getLOG_CHUNK_SIZE();
        retrofit.Server server57 = restAdapter54.getserver();
        retrofit.RestAdapter.LogLevel logLevel58 = restAdapter54.logLevel;
        boolean boolean59 = logLevel58.log();
        builder43.logLevel = logLevel58;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(restAdapter5);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertNotNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(restAdapter23);
        org.junit.Assert.assertNotNull(log24);
        org.junit.Assert.assertNotNull(executor25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Retrofit-Idle" + "'", str26, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler38);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(errorHandler42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 4000 + "'", int56 == 4000);
        org.junit.Assert.assertNull(server57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test1616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1616");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        java.util.concurrent.Executor executor4 = null;
        builder0.setcallbackExecutor(executor4);
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder7 = builder0.setLog(log6);
        retrofit.Profiler profiler8 = builder0.profiler;
        retrofit.RestAdapter.Log log9 = builder0.log;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(profiler8);
        org.junit.Assert.assertNotNull(log9);
    }

    @Test
    public void test1617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1617");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.RestAdapter restAdapter5 = builder2.build();
        retrofit.RestAdapter.Log log6 = restAdapter5.log;
        java.util.concurrent.Executor executor7 = restAdapter5.gethttpExecutor();
        java.lang.String str8 = restAdapter5.getIDLE_THREAD_NAME();
        retrofit.RestAdapter.Log log9 = restAdapter5.log;
        retrofit.RestAdapter.Log log10 = restAdapter5.log;
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter5.getrequestInterceptor();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(restAdapter5);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertNotNull(executor7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Retrofit-Idle" + "'", str8, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(log9);
        org.junit.Assert.assertNotNull(log10);
        org.junit.Assert.assertNotNull(requestInterceptor11);
    }

    @Test
    public void test1618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1618");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        java.util.concurrent.Executor executor5 = builder0.callbackExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter6.deserializeObjectConverter5();
        retrofit.RestAdapter.Builder builder10 = builder0.setConverter((retrofit.converter.Converter) gsonConverter9);
        retrofit.client.Client.Provider provider11 = builder0.getclientProvider();
        retrofit.Profiler profiler12 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder13 = builder0.setProfiler(profiler12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(gsonConverter9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(provider11);
    }

    @Test
    public void test1619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1619");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RestAdapter.Log log4 = null;
        builder0.log = log4;
        java.util.concurrent.Executor executor6 = builder0.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = builder7.getcallbackExecutor();
        retrofit.client.Client.Provider provider9 = null;
        builder7.clientProvider = provider9;
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor12 = serializedObjectSupporter11.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter13 = serializedObjectSupporter11.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter11.deserializeObjectConverter5();
        retrofit.client.Request request15 = serializedObjectSupporter11.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter11.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter11.deserializeObjectConverter6();
        retrofit.RestAdapter.Builder builder18 = builder7.setConverter((retrofit.converter.Converter) gsonConverter17);
        builder0.converter = gsonConverter17;
        retrofit.ErrorHandler errorHandler20 = builder0.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter21 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter21.deserializeObjectConverter2();
        retrofit.client.Request request23 = serializedObjectSupporter21.deserializeObjectRequest7();
        retrofit.client.Request request24 = serializedObjectSupporter21.deserializeObjectRequest2();
        retrofit.client.Request request25 = serializedObjectSupporter21.deserializeObjectRequest3();
        retrofit.converter.GsonConverter gsonConverter26 = serializedObjectSupporter21.deserializeObjectConverter6();
        retrofit.RequestInterceptor requestInterceptor27 = serializedObjectSupporter21.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder28 = builder0.setRequestInterceptor(requestInterceptor27);
        java.util.concurrent.Executor executor29 = builder0.gethttpExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = new retrofit.SerializedObjectSupporter();
        java.lang.String str31 = serializedObjectSupporter30.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter32 = serializedObjectSupporter30.deserializeObjectConverter6();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter30.deserializeObjectConverter5();
        builder0.serializedObjectSupporter = serializedObjectSupporter30;
        java.lang.String str35 = serializedObjectSupporter30.deserializeObjectString1();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNotNull(requestInterceptor12);
        org.junit.Assert.assertNotNull(gsonConverter13);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(gsonConverter16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertNotNull(request24);
        org.junit.Assert.assertNotNull(request25);
        org.junit.Assert.assertNotNull(gsonConverter26);
        org.junit.Assert.assertNotNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Retrofit-Idle" + "'", str31, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Retrofit-" + "'", str35, "Retrofit-");
    }

    @Test
    public void test1620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1620");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter10.logLevel;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        retrofit.converter.Converter converter14 = restAdapter10.converter;
        retrofit.Server server15 = restAdapter10.getserver();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter10.getLogLevel();
        retrofit.ErrorHandler errorHandler17 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor18 = restAdapter10.gethttpExecutor();
        retrofit.ErrorHandler errorHandler19 = restAdapter10.errorHandler;
        retrofit.Profiler profiler20 = restAdapter10.getprofiler();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(profiler20);
    }

    @Test
    public void test1621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1621");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.SerializedObjectSupporter serializedObjectSupporter5 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor6 = serializedObjectSupporter5.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder7 = builder2.setRequestInterceptor(requestInterceptor6);
        retrofit.Server server8 = builder7.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter9 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter10 = serializedObjectSupporter9.deserializeObjectConverter2();
        builder7.serializedObjectSupporter = serializedObjectSupporter9;
        retrofit.client.Request request12 = serializedObjectSupporter9.deserializeObjectRequest1();
        java.lang.String str13 = serializedObjectSupporter9.deserializeObjectString2();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(server8);
        org.junit.Assert.assertNotNull(gsonConverter10);
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-Idle" + "'", str13, "Retrofit-Idle");
    }

    @Test
    public void test1622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1622");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.client.Request request9 = serializedObjectSupporter6.deserializeObjectRequest1();
        builder0.serializedObjectSupporter = serializedObjectSupporter6;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = null;
        builder11.sethttpExecutor(executor12);
        retrofit.Profiler profiler14 = null;
        builder11.profiler = profiler14;
        retrofit.Server server16 = builder11.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter17.deserializeObjectConverter7();
        retrofit.client.Request request20 = serializedObjectSupporter17.deserializeObjectRequest1();
        builder11.serializedObjectSupporter = serializedObjectSupporter17;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor23 = null;
        builder22.sethttpExecutor(executor23);
        retrofit.Profiler profiler25 = null;
        builder22.profiler = profiler25;
        retrofit.Server server27 = builder22.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter28 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor29 = serializedObjectSupporter28.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter30 = serializedObjectSupporter28.deserializeObjectConverter7();
        retrofit.client.Request request31 = serializedObjectSupporter28.deserializeObjectRequest1();
        builder22.serializedObjectSupporter = serializedObjectSupporter28;
        java.lang.String str33 = serializedObjectSupporter28.deserializeObjectString2();
        retrofit.ErrorHandler errorHandler34 = serializedObjectSupporter28.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder35 = builder11.setErrorHandler(errorHandler34);
        retrofit.RestAdapter.Builder builder36 = builder0.setErrorHandler(errorHandler34);
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor38 = null;
        builder37.sethttpExecutor(executor38);
        retrofit.Profiler profiler40 = null;
        builder37.profiler = profiler40;
        retrofit.RestAdapter.LogLevel logLevel42 = builder37.logLevel;
        java.util.concurrent.Executor executor43 = null;
        builder37.sethttpExecutor(executor43);
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder47 = builder45.setServer("hi!");
        java.util.concurrent.Executor executor48 = null;
        builder47.callbackExecutor = executor48;
        retrofit.SerializedObjectSupporter serializedObjectSupporter50 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor51 = serializedObjectSupporter50.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder52 = builder47.setRequestInterceptor(requestInterceptor51);
        retrofit.RestAdapter.Builder builder53 = builder37.setRequestInterceptor(requestInterceptor51);
        java.util.concurrent.Executor executor54 = builder53.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter55 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor56 = serializedObjectSupporter55.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter57 = serializedObjectSupporter55.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter58 = serializedObjectSupporter55.deserializeObjectConverter7();
        retrofit.Server server59 = serializedObjectSupporter55.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder60 = builder53.setServer(server59);
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder63 = builder61.setServer("hi!");
        java.util.concurrent.Executor executor64 = null;
        builder63.callbackExecutor = executor64;
        retrofit.RestAdapter restAdapter66 = builder63.build();
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor68 = null;
        builder67.sethttpExecutor(executor68);
        retrofit.Profiler profiler70 = null;
        builder67.profiler = profiler70;
        retrofit.RestAdapter.Log log72 = builder67.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter73 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler74 = serializedObjectSupporter73.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder75 = builder67.setErrorHandler(errorHandler74);
        retrofit.RestAdapter.Builder builder76 = builder63.setErrorHandler(errorHandler74);
        java.util.concurrent.Executor executor77 = builder76.callbackExecutor;
        builder60.sethttpExecutor(executor77);
        builder36.sethttpExecutor(executor77);
        retrofit.SerializedObjectSupporter serializedObjectSupporter80 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor81 = serializedObjectSupporter80.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter82 = serializedObjectSupporter80.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter83 = serializedObjectSupporter80.deserializeObjectConverter5();
        retrofit.client.Request request84 = serializedObjectSupporter80.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter85 = serializedObjectSupporter80.deserializeObjectConverter3();
        retrofit.client.Request request86 = serializedObjectSupporter80.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter87 = serializedObjectSupporter80.deserializeObjectConverter5();
        builder36.converter = gsonConverter87;
        retrofit.Profiler profiler89 = builder36.profiler;
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertNull(server27);
        org.junit.Assert.assertNotNull(requestInterceptor29);
        org.junit.Assert.assertNotNull(gsonConverter30);
        org.junit.Assert.assertNotNull(request31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Retrofit-Idle" + "'", str33, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(requestInterceptor51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(executor54);
        org.junit.Assert.assertNotNull(requestInterceptor56);
        org.junit.Assert.assertNotNull(gsonConverter57);
        org.junit.Assert.assertNotNull(gsonConverter58);
        org.junit.Assert.assertNotNull(server59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(restAdapter66);
        org.junit.Assert.assertNull(log72);
        org.junit.Assert.assertNotNull(errorHandler74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(executor77);
        org.junit.Assert.assertNotNull(requestInterceptor81);
        org.junit.Assert.assertNotNull(gsonConverter82);
        org.junit.Assert.assertNotNull(gsonConverter83);
        org.junit.Assert.assertNotNull(request84);
        org.junit.Assert.assertNotNull(gsonConverter85);
        org.junit.Assert.assertNotNull(request86);
        org.junit.Assert.assertNotNull(gsonConverter87);
        org.junit.Assert.assertNull(profiler89);
    }

    @Test
    public void test1623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1623");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = null;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter13;
        retrofit.client.Client.Provider provider15 = restAdapter10.getclientProvider();
        retrofit.ErrorHandler errorHandler16 = restAdapter10.geterrorHandler();
        retrofit.RestAdapter.Log log17 = restAdapter10.log;
        java.util.concurrent.Executor executor18 = restAdapter10.gethttpExecutor();
        retrofit.client.Client.Provider provider19 = restAdapter10.getclientProvider();
        java.lang.String str20 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.SerializedObjectSupporter serializedObjectSupporter21 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor22 = serializedObjectSupporter21.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter23 = serializedObjectSupporter21.deserializeObjectConverter8();
        java.lang.String str24 = serializedObjectSupporter21.deserializeObjectString2();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter21;
        retrofit.RequestInterceptor requestInterceptor26 = restAdapter10.getrequestInterceptor();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNull(log17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(provider19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Retrofit-Idle" + "'", str20, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(requestInterceptor22);
        org.junit.Assert.assertNotNull(gsonConverter23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Retrofit-Idle" + "'", str24, "Retrofit-Idle");
        org.junit.Assert.assertNull(requestInterceptor26);
    }

    @Test
    public void test1624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1624");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        java.lang.String str13 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.converter.Converter converter14 = restAdapter10.converter;
        retrofit.ErrorHandler errorHandler15 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor16 = restAdapter10.httpExecutor;
        int int17 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter10.getLogLevel();
        java.util.concurrent.Executor executor19 = restAdapter10.httpExecutor;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-Idle" + "'", str13, "Retrofit-Idle");
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4000 + "'", int17 == 4000);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(executor19);
    }

    @Test
    public void test1625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1625");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        java.util.concurrent.Executor executor6 = null;
        builder0.sethttpExecutor(executor6);
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder10 = builder8.setServer("hi!");
        java.util.concurrent.Executor executor11 = null;
        builder10.callbackExecutor = executor11;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor14 = serializedObjectSupporter13.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder15 = builder10.setRequestInterceptor(requestInterceptor14);
        retrofit.RestAdapter.Builder builder16 = builder0.setRequestInterceptor(requestInterceptor14);
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder19 = builder17.setServer("hi!");
        java.util.concurrent.Executor executor20 = null;
        builder19.callbackExecutor = executor20;
        retrofit.RestAdapter restAdapter22 = builder19.build();
        retrofit.RestAdapter.Log log23 = restAdapter22.log;
        java.lang.String str24 = restAdapter22.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler25 = restAdapter22.geterrorHandler();
        retrofit.client.Client.Provider provider26 = restAdapter22.getclientProvider();
        retrofit.RestAdapter.Builder builder27 = builder16.setClient(provider26);
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor29 = null;
        builder28.sethttpExecutor(executor29);
        retrofit.Profiler profiler31 = null;
        builder28.profiler = profiler31;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder35 = builder33.setServer("hi!");
        java.util.concurrent.Executor executor36 = null;
        builder35.callbackExecutor = executor36;
        retrofit.SerializedObjectSupporter serializedObjectSupporter38 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor39 = serializedObjectSupporter38.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder40 = builder35.setRequestInterceptor(requestInterceptor39);
        retrofit.RestAdapter.Builder builder41 = builder28.setRequestInterceptor(requestInterceptor39);
        retrofit.RestAdapter.Builder builder42 = builder27.setRequestInterceptor(requestInterceptor39);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(restAdapter22);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Retrofit-Idle" + "'", str24, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(provider26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(requestInterceptor39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test1626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1626");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server4 = null;
        builder0.server = server4;
        java.util.concurrent.Executor executor6 = builder0.gethttpExecutor();
        java.util.concurrent.Executor executor7 = builder0.httpExecutor;
        retrofit.ErrorHandler errorHandler8 = null;
        builder0.errorHandler = errorHandler8;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
    }

    @Test
    public void test1627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1627");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter6();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest8();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString3();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter0.deserializeObjectConverter4();
        java.lang.String str8 = serializedObjectSupporter0.deserializeObjectString4();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter0.deserializeObjectConverter6();
        retrofit.converter.GsonConverter gsonConverter10 = serializedObjectSupporter0.deserializeObjectConverter4();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GET" + "'", str6, "GET");
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://example.com/" + "'", str8, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter9);
        org.junit.Assert.assertNotNull(gsonConverter10);
    }

    @Test
    public void test1628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1628");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.logLevel = logLevel23;
        retrofit.Server server26 = restAdapter10.getserver();
        java.lang.Throwable throwable27 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter10.logException(throwable27, "Retrofit-");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(server26);
    }

    @Test
    public void test1629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1629");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.ErrorHandler errorHandler6 = builder0.errorHandler;
        retrofit.Profiler profiler7 = builder0.profiler;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = null;
        builder8.sethttpExecutor(executor9);
        retrofit.client.Client.Provider provider11 = builder8.getclientProvider();
        retrofit.client.Client.Provider provider12 = builder8.getclientProvider();
        retrofit.Server server13 = builder8.server;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = null;
        builder14.sethttpExecutor(executor15);
        retrofit.Profiler profiler17 = null;
        builder14.profiler = profiler17;
        retrofit.Server server19 = builder14.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter7();
        retrofit.client.Request request23 = serializedObjectSupporter20.deserializeObjectRequest1();
        builder14.serializedObjectSupporter = serializedObjectSupporter20;
        retrofit.client.Request request25 = serializedObjectSupporter20.deserializeObjectRequest2();
        retrofit.mime.TypedString typedString26 = serializedObjectSupporter20.deserializeObjectTypedOutput2();
        builder8.serializedObjectSupporter = serializedObjectSupporter20;
        java.util.concurrent.Executor executor28 = builder8.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request30 = serializedObjectSupporter29.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler31 = serializedObjectSupporter29.deserializeObjectErrorHandler1();
        retrofit.mime.TypedString typedString32 = serializedObjectSupporter29.deserializeObjectTypedOutput2();
        retrofit.ErrorHandler errorHandler33 = serializedObjectSupporter29.deserializeObjectErrorHandler1();
        builder8.errorHandler = errorHandler33;
        retrofit.RestAdapter.Builder builder35 = builder0.setErrorHandler(errorHandler33);
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor37 = null;
        builder36.sethttpExecutor(executor37);
        retrofit.converter.Converter converter39 = builder36.converter;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor41 = null;
        builder40.sethttpExecutor(executor41);
        retrofit.converter.Converter converter43 = builder40.converter;
        java.util.concurrent.Executor executor44 = builder40.getcallbackExecutor();
        retrofit.client.Client.Provider provider45 = builder40.getclientProvider();
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder48 = builder46.setServer("hi!");
        java.util.concurrent.Executor executor49 = null;
        builder48.callbackExecutor = executor49;
        retrofit.RestAdapter restAdapter51 = builder48.build();
        retrofit.RestAdapter.Log log52 = restAdapter51.log;
        java.util.concurrent.Executor executor53 = restAdapter51.gethttpExecutor();
        retrofit.client.Client.Provider provider54 = restAdapter51.getclientProvider();
        builder40.setclientProvider(provider54);
        retrofit.RestAdapter.Builder builder56 = builder36.setClient(provider54);
        builder35.clientProvider = provider54;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor59 = null;
        builder58.sethttpExecutor(executor59);
        retrofit.client.Client.Provider provider61 = builder58.getclientProvider();
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor63 = null;
        builder62.sethttpExecutor(executor63);
        retrofit.Profiler profiler65 = null;
        builder62.profiler = profiler65;
        retrofit.Server server67 = builder62.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter68 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor69 = serializedObjectSupporter68.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter70 = serializedObjectSupporter68.deserializeObjectConverter7();
        retrofit.client.Request request71 = serializedObjectSupporter68.deserializeObjectRequest1();
        builder62.serializedObjectSupporter = serializedObjectSupporter68;
        builder62.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder76 = builder74.setServer("hi!");
        java.util.concurrent.Executor executor77 = null;
        builder76.callbackExecutor = executor77;
        retrofit.RestAdapter restAdapter79 = builder76.build();
        retrofit.RestAdapter.Builder builder80 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor81 = null;
        builder80.sethttpExecutor(executor81);
        retrofit.Profiler profiler83 = null;
        builder80.profiler = profiler83;
        retrofit.RestAdapter.Log log85 = builder80.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter86 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler87 = serializedObjectSupporter86.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder88 = builder80.setErrorHandler(errorHandler87);
        retrofit.RestAdapter.Builder builder89 = builder76.setErrorHandler(errorHandler87);
        java.util.concurrent.Executor executor90 = builder89.callbackExecutor;
        builder62.setcallbackExecutor(executor90);
        builder58.setcallbackExecutor(executor90);
        builder35.callbackExecutor = executor90;
        retrofit.RestAdapter.Builder builder95 = builder35.setServer("POST");
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertNotNull(request25);
        org.junit.Assert.assertNotNull(typedString26);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNotNull(request30);
        org.junit.Assert.assertNotNull(errorHandler31);
        org.junit.Assert.assertNotNull(typedString32);
        org.junit.Assert.assertNotNull(errorHandler33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(converter39);
        org.junit.Assert.assertNull(converter43);
        org.junit.Assert.assertNull(executor44);
        org.junit.Assert.assertNull(provider45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(restAdapter51);
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNotNull(executor53);
        org.junit.Assert.assertNotNull(provider54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(provider61);
        org.junit.Assert.assertNull(server67);
        org.junit.Assert.assertNotNull(requestInterceptor69);
        org.junit.Assert.assertNotNull(gsonConverter70);
        org.junit.Assert.assertNotNull(request71);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(restAdapter79);
        org.junit.Assert.assertNull(log85);
        org.junit.Assert.assertNotNull(errorHandler87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(executor90);
        org.junit.Assert.assertNotNull(builder95);
    }

    @Test
    public void test1630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1630");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.client.Request request9 = serializedObjectSupporter6.deserializeObjectRequest1();
        builder0.serializedObjectSupporter = serializedObjectSupporter6;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = null;
        builder11.sethttpExecutor(executor12);
        retrofit.Profiler profiler14 = null;
        builder11.profiler = profiler14;
        retrofit.Server server16 = builder11.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter17.deserializeObjectConverter7();
        retrofit.client.Request request20 = serializedObjectSupporter17.deserializeObjectRequest1();
        builder11.serializedObjectSupporter = serializedObjectSupporter17;
        java.lang.String str22 = serializedObjectSupporter17.deserializeObjectString2();
        retrofit.ErrorHandler errorHandler23 = serializedObjectSupporter17.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder24 = builder0.setErrorHandler(errorHandler23);
        retrofit.client.Client.Provider provider25 = builder0.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor27 = serializedObjectSupporter26.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter26.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter29 = serializedObjectSupporter26.deserializeObjectConverter5();
        retrofit.client.Request request30 = serializedObjectSupporter26.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter31 = serializedObjectSupporter26.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter32 = serializedObjectSupporter26.deserializeObjectConverter6();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter26.deserializeObjectConverter2();
        builder0.serializedObjectSupporter = serializedObjectSupporter26;
        retrofit.client.Request request35 = serializedObjectSupporter26.deserializeObjectRequest4();
        java.util.List<retrofit.client.Header> headerList36 = request35.getHeaders();
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Retrofit-Idle" + "'", str22, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(provider25);
        org.junit.Assert.assertNotNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(gsonConverter29);
        org.junit.Assert.assertNotNull(request30);
        org.junit.Assert.assertNotNull(gsonConverter31);
        org.junit.Assert.assertNotNull(gsonConverter32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(request35);
        org.junit.Assert.assertNotNull(headerList36);
    }

    @Test
    public void test1631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1631");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest5();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest7();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter0.deserializeObjectConverter4();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(gsonConverter6);
    }

    @Test
    public void test1632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1632");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter8();
        retrofit.mime.TypedString typedString5 = serializedObjectSupporter0.deserializeObjectTypedOutput2();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter0.deserializeObjectConverter3();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(typedString5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Retrofit-Idle" + "'", str6, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter7);
    }

    @Test
    public void test1633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1633");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        java.util.concurrent.Executor executor3 = builder0.httpExecutor;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter5 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor6 = serializedObjectSupporter5.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter5.deserializeObjectConverter8();
        java.lang.String str8 = serializedObjectSupporter5.deserializeObjectString2();
        builder0.serializedObjectSupporter = serializedObjectSupporter5;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor11 = null;
        builder10.sethttpExecutor(executor11);
        retrofit.Profiler profiler13 = null;
        builder10.profiler = profiler13;
        retrofit.Server server15 = builder10.server;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder18 = builder16.setServer("hi!");
        retrofit.client.Client.Provider provider19 = builder16.clientProvider;
        retrofit.RequestInterceptor requestInterceptor20 = builder16.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean22 = logLevel21.log();
        retrofit.RestAdapter.Builder builder23 = builder16.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = builder24.getcallbackExecutor();
        retrofit.client.Client.Provider provider26 = null;
        builder24.clientProvider = provider26;
        retrofit.Server server28 = null;
        builder24.server = server28;
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        builder24.log = log30;
        builder16.log = log30;
        builder10.log = log30;
        retrofit.RestAdapter.Builder builder34 = builder0.setLog(log30);
        retrofit.RestAdapter.Log log35 = builder34.log;
        retrofit.RequestInterceptor requestInterceptor36 = builder34.requestInterceptor;
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNotNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Retrofit-Idle" + "'", str8, "Retrofit-Idle");
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(provider19);
        org.junit.Assert.assertNull(requestInterceptor20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNull(requestInterceptor36);
    }

    @Test
    public void test1634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1634");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = null;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel13);
        builder0.logLevel = logLevel13;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor17 = builder16.getcallbackExecutor();
        retrofit.client.Client.Provider provider18 = null;
        builder16.clientProvider = provider18;
        retrofit.Server server20 = null;
        builder16.server = server20;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        builder16.log = log22;
        log22.log("hi!");
        builder0.log = log22;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder29 = builder27.setServer("hi!");
        java.util.concurrent.Executor executor30 = null;
        builder29.callbackExecutor = executor30;
        retrofit.RestAdapter restAdapter32 = builder29.build();
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = null;
        builder33.sethttpExecutor(executor34);
        retrofit.Profiler profiler36 = null;
        builder33.profiler = profiler36;
        retrofit.RestAdapter.Log log38 = builder33.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter39 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler40 = serializedObjectSupporter39.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder41 = builder33.setErrorHandler(errorHandler40);
        retrofit.RestAdapter.Builder builder42 = builder29.setErrorHandler(errorHandler40);
        java.util.concurrent.Executor executor43 = builder42.callbackExecutor;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor45 = null;
        builder44.sethttpExecutor(executor45);
        retrofit.Profiler profiler47 = null;
        builder44.profiler = profiler47;
        retrofit.Server server49 = builder44.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter50 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor51 = serializedObjectSupporter50.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter52 = serializedObjectSupporter50.deserializeObjectConverter7();
        retrofit.client.Request request53 = serializedObjectSupporter50.deserializeObjectRequest1();
        builder44.serializedObjectSupporter = serializedObjectSupporter50;
        java.lang.String str55 = serializedObjectSupporter50.deserializeObjectString2();
        retrofit.ErrorHandler errorHandler56 = serializedObjectSupporter50.deserializeObjectErrorHandler1();
        builder42.errorHandler = errorHandler56;
        retrofit.RestAdapter.Builder builder58 = builder0.setErrorHandler(errorHandler56);
        retrofit.SerializedObjectSupporter serializedObjectSupporter59 = builder0.serializedObjectSupporter;
        retrofit.client.Client client60 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder61 = builder0.setClient(client60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(restAdapter32);
        org.junit.Assert.assertNull(log38);
        org.junit.Assert.assertNotNull(errorHandler40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(executor43);
        org.junit.Assert.assertNull(server49);
        org.junit.Assert.assertNotNull(requestInterceptor51);
        org.junit.Assert.assertNotNull(gsonConverter52);
        org.junit.Assert.assertNotNull(request53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Retrofit-Idle" + "'", str55, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(serializedObjectSupporter59);
    }

    @Test
    public void test1635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1635");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest8();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter6();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter0.deserializeObjectConverter2();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter0.deserializeObjectConverter3();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(gsonConverter6);
        org.junit.Assert.assertNotNull(gsonConverter7);
    }

    @Test
    public void test1636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1636");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        java.lang.String str14 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter10.getrequestInterceptor();
        retrofit.client.Client.Provider provider16 = restAdapter10.clientProvider;
        retrofit.RequestInterceptor requestInterceptor17 = restAdapter10.getrequestInterceptor();
        retrofit.Server server18 = null;
        retrofit.client.Client.Provider provider19 = null;
        java.util.concurrent.Executor executor20 = null;
        java.util.concurrent.Executor executor21 = null;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        retrofit.converter.Converter converter23 = null;
        retrofit.Profiler profiler24 = null;
        retrofit.ErrorHandler errorHandler25 = null;
        retrofit.RestAdapter.Log log26 = null;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server18, provider19, executor20, executor21, requestInterceptor22, converter23, profiler24, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler29 = restAdapter28.errorHandler;
        java.util.concurrent.Executor executor30 = restAdapter28.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter28.getLogLevel();
        retrofit.client.Client.Provider provider32 = restAdapter28.clientProvider;
        retrofit.Profiler profiler33 = restAdapter28.profiler;
        retrofit.converter.Converter converter34 = restAdapter28.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter35 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor36 = serializedObjectSupporter35.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter37 = serializedObjectSupporter35.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter38 = serializedObjectSupporter35.deserializeObjectConverter4();
        restAdapter28.serializedObjectSupporter = serializedObjectSupporter35;
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter28.setLogLevel(logLevel40);
        retrofit.RestAdapter.LogLevel logLevel42 = restAdapter28.logLevel;
        java.lang.String str43 = restAdapter28.getIDLE_THREAD_NAME();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter28.getLogLevel();
        restAdapter10.setLogLevel(logLevel44);
        retrofit.RestAdapter.LogLevel logLevel46 = restAdapter10.getLogLevel();
        java.util.concurrent.Executor executor47 = restAdapter10.getcallbackExecutor();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Retrofit-Idle" + "'", str14, "Retrofit-Idle");
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNull(provider16);
        org.junit.Assert.assertNull(requestInterceptor17);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider32);
        org.junit.Assert.assertNull(profiler33);
        org.junit.Assert.assertNull(converter34);
        org.junit.Assert.assertNotNull(requestInterceptor36);
        org.junit.Assert.assertNotNull(gsonConverter37);
        org.junit.Assert.assertNotNull(gsonConverter38);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Retrofit-Idle" + "'", str43, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(executor47);
    }

    @Test
    public void test1637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1637");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.client.Request request9 = serializedObjectSupporter6.deserializeObjectRequest1();
        builder0.serializedObjectSupporter = serializedObjectSupporter6;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder14 = builder12.setServer("hi!");
        java.util.concurrent.Executor executor15 = null;
        builder14.callbackExecutor = executor15;
        retrofit.RestAdapter restAdapter17 = builder14.build();
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor19 = null;
        builder18.sethttpExecutor(executor19);
        retrofit.Profiler profiler21 = null;
        builder18.profiler = profiler21;
        retrofit.RestAdapter.Log log23 = builder18.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder26 = builder18.setErrorHandler(errorHandler25);
        retrofit.RestAdapter.Builder builder27 = builder14.setErrorHandler(errorHandler25);
        java.util.concurrent.Executor executor28 = builder27.callbackExecutor;
        builder0.setcallbackExecutor(executor28);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor31 = builder30.getcallbackExecutor();
        retrofit.client.Client.Provider provider32 = null;
        builder30.clientProvider = provider32;
        retrofit.Server server34 = null;
        builder30.server = server34;
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        builder30.log = log36;
        java.util.concurrent.Executor executor38 = builder30.gethttpExecutor();
        retrofit.converter.Converter converter39 = builder30.converter;
        java.util.concurrent.Executor executor40 = builder30.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter41 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor42 = serializedObjectSupporter41.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter43 = serializedObjectSupporter41.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter44 = serializedObjectSupporter41.deserializeObjectConverter7();
        retrofit.Server server45 = serializedObjectSupporter41.deserializeObjectServer1();
        builder30.server = server45;
        retrofit.RestAdapter.Builder builder47 = builder0.setServer(server45);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(restAdapter17);
        org.junit.Assert.assertNull(log23);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(executor28);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNull(converter39);
        org.junit.Assert.assertNull(executor40);
        org.junit.Assert.assertNotNull(requestInterceptor42);
        org.junit.Assert.assertNotNull(gsonConverter43);
        org.junit.Assert.assertNotNull(gsonConverter44);
        org.junit.Assert.assertNotNull(server45);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test1638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1638");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider5 = builder0.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request7 = serializedObjectSupporter6.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler8 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        builder0.errorHandler = errorHandler8;
        retrofit.RestAdapter.Log log10 = builder0.log;
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Log log19 = null;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log19, logLevel20);
        retrofit.ErrorHandler errorHandler22 = restAdapter21.errorHandler;
        retrofit.ErrorHandler errorHandler23 = restAdapter21.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter21.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request26 = serializedObjectSupporter25.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter27 = serializedObjectSupporter25.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter25.deserializeObjectConverter1();
        restHandler24.serializedObjectSupporter = serializedObjectSupporter25;
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = restHandler24.serializedObjectSupporter;
        java.lang.String str31 = serializedObjectSupporter30.deserializeObjectString5();
        builder0.serializedObjectSupporter = serializedObjectSupporter30;
        retrofit.client.Request request33 = serializedObjectSupporter30.deserializeObjectRequest5();
        retrofit.client.Request request34 = serializedObjectSupporter30.deserializeObjectRequest7();
        retrofit.client.Request request35 = serializedObjectSupporter30.deserializeObjectRequest2();
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(errorHandler8);
        org.junit.Assert.assertNull(log10);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNotNull(request26);
        org.junit.Assert.assertNotNull(gsonConverter27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(serializedObjectSupporter30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "POST" + "'", str31, "POST");
        org.junit.Assert.assertNotNull(request33);
        org.junit.Assert.assertNotNull(request34);
        org.junit.Assert.assertNotNull(request35);
    }

    @Test
    public void test1639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1639");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest2();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString1();
        retrofit.client.Request request6 = serializedObjectSupporter0.deserializeObjectRequest3();
        retrofit.mime.TypedOutput typedOutput7 = request6.body;
        java.lang.String str8 = request6.getMethod();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Retrofit-" + "'", str5, "Retrofit-");
        org.junit.Assert.assertNotNull(request6);
        org.junit.Assert.assertNotNull(typedOutput7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "POST" + "'", str8, "POST");
    }

    @Test
    public void test1640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1640");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter10.logLevel;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        retrofit.converter.Converter converter14 = restAdapter10.converter;
        java.util.concurrent.Executor executor15 = restAdapter10.getcallbackExecutor();
        java.util.concurrent.Executor executor16 = restAdapter10.gethttpExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = restAdapter10.serializedObjectSupporter;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(serializedObjectSupporter17);
    }

    @Test
    public void test1641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1641");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        java.util.concurrent.Executor executor14 = restAdapter10.getcallbackExecutor();
        retrofit.Server server15 = null;
        retrofit.client.Client.Provider provider16 = null;
        java.util.concurrent.Executor executor17 = null;
        java.util.concurrent.Executor executor18 = null;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        retrofit.converter.Converter converter20 = null;
        retrofit.Profiler profiler21 = null;
        retrofit.ErrorHandler errorHandler22 = null;
        retrofit.RestAdapter.Log log23 = null;
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter(server15, provider16, executor17, executor18, requestInterceptor19, converter20, profiler21, errorHandler22, log23, logLevel24);
        retrofit.ErrorHandler errorHandler26 = restAdapter25.errorHandler;
        int int27 = restAdapter25.getLOG_CHUNK_SIZE();
        retrofit.Server server28 = restAdapter25.getserver();
        retrofit.client.Client.Provider provider29 = restAdapter25.clientProvider;
        retrofit.client.Client.Provider provider30 = restAdapter25.getclientProvider();
        java.lang.String str31 = restAdapter25.getIDLE_THREAD_NAME();
        retrofit.Server server32 = null;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Log log40 = null;
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log40, logLevel41);
        retrofit.RestAdapter.LogLevel logLevel43 = restAdapter42.logLevel;
        retrofit.ErrorHandler errorHandler44 = restAdapter42.geterrorHandler();
        java.util.concurrent.Executor executor45 = restAdapter42.getcallbackExecutor();
        retrofit.converter.Converter converter46 = restAdapter42.converter;
        retrofit.Server server47 = restAdapter42.getserver();
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter42.getLogLevel();
        restAdapter25.setLogLevel(logLevel48);
        restAdapter10.logLevel = logLevel48;
        retrofit.client.Client.Provider provider51 = restAdapter10.getclientProvider();
        retrofit.RestAdapter.LogLevel logLevel52 = restAdapter10.logLevel;
        retrofit.client.Client.Provider provider53 = restAdapter10.clientProvider;
        java.util.concurrent.Executor executor54 = restAdapter10.gethttpExecutor();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4000 + "'", int27 == 4000);
        org.junit.Assert.assertNull(server28);
        org.junit.Assert.assertNull(provider29);
        org.junit.Assert.assertNull(provider30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Retrofit-Idle" + "'", str31, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler44);
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertNull(converter46);
        org.junit.Assert.assertNull(server47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider53);
        org.junit.Assert.assertNull(executor54);
    }

    @Test
    public void test1642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1642");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter1 = serializedObjectSupporter0.deserializeObjectConverter2();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest3();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.RequestInterceptor requestInterceptor6 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter0.deserializeObjectConverter3();
        retrofit.client.Request request8 = serializedObjectSupporter0.deserializeObjectRequest3();
        org.junit.Assert.assertNotNull(gsonConverter1);
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertNotNull(request8);
    }

    @Test
    public void test1643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1643");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter10.logLevel;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.geterrorHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = restAdapter10.serializedObjectSupporter;
        int int14 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Profiler profiler15 = restAdapter10.profiler;
        java.lang.Throwable throwable16 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter10.logException(throwable16, "Retrofit-Idle");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(serializedObjectSupporter13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4000 + "'", int14 == 4000);
        org.junit.Assert.assertNull(profiler15);
    }

    @Test
    public void test1644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1644");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server4 = null;
        builder0.server = server4;
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        builder0.log = log6;
        retrofit.converter.Converter converter8 = builder0.converter;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = null;
        builder9.sethttpExecutor(executor10);
        retrofit.converter.Converter converter12 = builder9.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor14 = serializedObjectSupporter13.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter15 = serializedObjectSupporter13.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter13.deserializeObjectConverter7();
        retrofit.Server server17 = serializedObjectSupporter13.deserializeObjectServer1();
        retrofit.converter.GsonConverter gsonConverter18 = serializedObjectSupporter13.deserializeObjectConverter7();
        retrofit.ErrorHandler errorHandler19 = serializedObjectSupporter13.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder20 = builder9.setErrorHandler(errorHandler19);
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor22 = null;
        builder21.sethttpExecutor(executor22);
        retrofit.converter.Converter converter24 = builder21.converter;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = null;
        builder25.sethttpExecutor(executor26);
        retrofit.converter.Converter converter28 = builder25.converter;
        java.util.concurrent.Executor executor29 = builder25.getcallbackExecutor();
        retrofit.client.Client.Provider provider30 = builder25.getclientProvider();
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder33 = builder31.setServer("hi!");
        java.util.concurrent.Executor executor34 = null;
        builder33.callbackExecutor = executor34;
        retrofit.RestAdapter restAdapter36 = builder33.build();
        retrofit.RestAdapter.Log log37 = restAdapter36.log;
        java.util.concurrent.Executor executor38 = restAdapter36.gethttpExecutor();
        retrofit.client.Client.Provider provider39 = restAdapter36.getclientProvider();
        builder25.setclientProvider(provider39);
        retrofit.RestAdapter.Builder builder41 = builder21.setClient(provider39);
        builder20.clientProvider = provider39;
        retrofit.RestAdapter.Builder builder43 = builder0.setClient(provider39);
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor45 = builder44.getcallbackExecutor();
        retrofit.client.Client.Provider provider46 = null;
        builder44.clientProvider = provider46;
        java.util.concurrent.Executor executor48 = builder44.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter49 = new retrofit.SerializedObjectSupporter();
        java.lang.String str50 = serializedObjectSupporter49.deserializeObjectString2();
        java.lang.String str51 = serializedObjectSupporter49.deserializeObjectString1();
        retrofit.RequestInterceptor requestInterceptor52 = serializedObjectSupporter49.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder53 = builder44.setRequestInterceptor(requestInterceptor52);
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder56 = builder54.setServer("hi!");
        retrofit.client.Client.Provider provider57 = builder54.clientProvider;
        retrofit.RequestInterceptor requestInterceptor58 = builder54.requestInterceptor;
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder61 = builder59.setServer("hi!");
        retrofit.client.Client.Provider provider62 = builder59.clientProvider;
        java.util.concurrent.Executor executor63 = null;
        builder59.setcallbackExecutor(executor63);
        retrofit.RestAdapter.Log log65 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder66 = builder59.setLog(log65);
        retrofit.RestAdapter.Builder builder67 = builder54.setLog(log65);
        builder44.log = log65;
        retrofit.RestAdapter.Builder builder69 = builder0.setLog(log65);
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder72 = builder70.setServer("hi!");
        retrofit.client.Client.Provider provider73 = builder70.clientProvider;
        retrofit.RequestInterceptor requestInterceptor74 = builder70.requestInterceptor;
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder77 = builder75.setServer("hi!");
        retrofit.client.Client.Provider provider78 = builder75.clientProvider;
        java.util.concurrent.Executor executor79 = null;
        builder75.setcallbackExecutor(executor79);
        retrofit.RestAdapter.Log log81 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder82 = builder75.setLog(log81);
        retrofit.RestAdapter.Builder builder83 = builder70.setLog(log81);
        builder83.ensureSaneDefaults();
        retrofit.client.Client.Provider provider85 = builder83.getclientProvider();
        builder69.clientProvider = provider85;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNull(converter12);
        org.junit.Assert.assertNotNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(gsonConverter15);
        org.junit.Assert.assertNotNull(gsonConverter16);
        org.junit.Assert.assertNotNull(server17);
        org.junit.Assert.assertNotNull(gsonConverter18);
        org.junit.Assert.assertNotNull(errorHandler19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(converter24);
        org.junit.Assert.assertNull(converter28);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(provider30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(restAdapter36);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNotNull(executor38);
        org.junit.Assert.assertNotNull(provider39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertNull(executor48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Retrofit-Idle" + "'", str50, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Retrofit-" + "'", str51, "Retrofit-");
        org.junit.Assert.assertNotNull(requestInterceptor52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(provider57);
        org.junit.Assert.assertNull(requestInterceptor58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(provider62);
        org.junit.Assert.assertNotNull(log65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNull(provider73);
        org.junit.Assert.assertNull(requestInterceptor74);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNull(provider78);
        org.junit.Assert.assertNotNull(log81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(provider85);
    }

    @Test
    public void test1645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1645");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.converter.Converter converter15 = restAdapter10.getconverter();
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = restAdapter10.serializedObjectSupporter;
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter10.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter18.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter21 = serializedObjectSupporter18.deserializeObjectConverter5();
        retrofit.client.Request request22 = serializedObjectSupporter18.deserializeObjectRequest8();
        java.lang.reflect.Method method23 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] {};
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj25 = restHandler17.invoke((java.lang.Object) serializedObjectSupporter18, method23, objArray24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(converter15);
        org.junit.Assert.assertNull(serializedObjectSupporter16);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNotNull(gsonConverter21);
        org.junit.Assert.assertNotNull(request22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
    }

    @Test
    public void test1646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1646");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.getrequestInterceptor();
        retrofit.RestAdapter.Log log15 = restAdapter10.log;
        retrofit.converter.Converter converter16 = restAdapter10.converter;
        retrofit.RequestInterceptor requestInterceptor17 = restAdapter10.requestInterceptor;
        retrofit.client.Client.Provider provider18 = restAdapter10.getclientProvider();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNull(log15);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(requestInterceptor17);
        org.junit.Assert.assertNull(provider18);
    }

    @Test
    public void test1647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1647");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = restAdapter10.serializedObjectSupporter;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        retrofit.ErrorHandler errorHandler25 = restAdapter24.errorHandler;
        retrofit.ErrorHandler errorHandler26 = restAdapter24.errorHandler;
        retrofit.ErrorHandler errorHandler27 = restAdapter24.geterrorHandler();
        retrofit.RequestInterceptor requestInterceptor28 = restAdapter24.getrequestInterceptor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = restAdapter24.serializedObjectSupporter;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor31 = null;
        builder30.sethttpExecutor(executor31);
        retrofit.Profiler profiler33 = null;
        builder30.profiler = profiler33;
        retrofit.RestAdapter.LogLevel logLevel35 = builder30.logLevel;
        restAdapter24.setLogLevel(logLevel35);
        restAdapter10.setLogLevel(logLevel35);
        retrofit.converter.Converter converter38 = restAdapter10.converter;
        java.util.concurrent.Executor executor39 = restAdapter10.httpExecutor;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(serializedObjectSupporter13);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler25);
        org.junit.Assert.assertNull(errorHandler26);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNull(requestInterceptor28);
        org.junit.Assert.assertNull(serializedObjectSupporter29);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter38);
        org.junit.Assert.assertNull(executor39);
    }

    @Test
    public void test1648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1648");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.Server server5 = null;
        builder0.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.sethttpExecutor(executor8);
        retrofit.converter.Converter converter10 = builder7.converter;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        retrofit.client.Client.Provider provider12 = builder7.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request14 = serializedObjectSupporter13.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler15 = serializedObjectSupporter13.deserializeObjectErrorHandler1();
        builder7.errorHandler = errorHandler15;
        retrofit.converter.Converter converter17 = builder7.converter;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder20 = builder18.setServer("hi!");
        java.util.concurrent.Executor executor21 = null;
        builder20.callbackExecutor = executor21;
        retrofit.SerializedObjectSupporter serializedObjectSupporter23 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor24 = serializedObjectSupporter23.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder25 = builder20.setRequestInterceptor(requestInterceptor24);
        retrofit.RestAdapter.Builder builder26 = builder7.setRequestInterceptor(requestInterceptor24);
        builder0.requestInterceptor = requestInterceptor24;
        retrofit.SerializedObjectSupporter serializedObjectSupporter28 = new retrofit.SerializedObjectSupporter();
        java.lang.String str29 = serializedObjectSupporter28.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter30 = serializedObjectSupporter28.deserializeObjectConverter6();
        retrofit.converter.GsonConverter gsonConverter31 = serializedObjectSupporter28.deserializeObjectConverter5();
        retrofit.RestAdapter.Builder builder32 = builder0.setConverter((retrofit.converter.Converter) gsonConverter31);
        java.util.concurrent.Executor executor33 = builder0.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor34 = builder0.requestInterceptor;
        java.util.concurrent.Executor executor35 = builder0.httpExecutor;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNull(converter10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertNotNull(request14);
        org.junit.Assert.assertNotNull(errorHandler15);
        org.junit.Assert.assertNull(converter17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(requestInterceptor24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Retrofit-Idle" + "'", str29, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter30);
        org.junit.Assert.assertNotNull(gsonConverter31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertNotNull(requestInterceptor34);
        org.junit.Assert.assertNull(executor35);
    }

    @Test
    public void test1649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1649");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        java.lang.String str13 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        retrofit.ErrorHandler errorHandler25 = restAdapter24.errorHandler;
        int int26 = restAdapter24.getLOG_CHUNK_SIZE();
        retrofit.RestAdapter.Log log27 = restAdapter24.log;
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter24.getLogLevel();
        restAdapter10.logLevel = logLevel28;
        retrofit.ErrorHandler errorHandler30 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler31 = restAdapter10.errorHandler;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder34 = builder32.setServer("hi!");
        java.util.concurrent.Executor executor35 = null;
        builder34.callbackExecutor = executor35;
        retrofit.RestAdapter restAdapter37 = builder34.build();
        retrofit.RestAdapter.Log log38 = restAdapter37.log;
        java.util.concurrent.Executor executor39 = restAdapter37.gethttpExecutor();
        java.lang.String str40 = restAdapter37.getIDLE_THREAD_NAME();
        retrofit.Server server41 = null;
        retrofit.client.Client.Provider provider42 = null;
        java.util.concurrent.Executor executor43 = null;
        java.util.concurrent.Executor executor44 = null;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        retrofit.converter.Converter converter46 = null;
        retrofit.Profiler profiler47 = null;
        retrofit.ErrorHandler errorHandler48 = null;
        retrofit.RestAdapter.Log log49 = null;
        retrofit.RestAdapter.LogLevel logLevel50 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter(server41, provider42, executor43, executor44, requestInterceptor45, converter46, profiler47, errorHandler48, log49, logLevel50);
        retrofit.ErrorHandler errorHandler52 = restAdapter51.errorHandler;
        java.util.concurrent.Executor executor53 = restAdapter51.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel54 = restAdapter51.getLogLevel();
        restAdapter37.logLevel = logLevel54;
        retrofit.SerializedObjectSupporter serializedObjectSupporter56 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request57 = serializedObjectSupporter56.deserializeObjectRequest6();
        restAdapter37.serializedObjectSupporter = serializedObjectSupporter56;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter56;
        retrofit.RestAdapter.Log log60 = restAdapter10.log;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-Idle" + "'", str13, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4000 + "'", int26 == 4000);
        org.junit.Assert.assertNull(log27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler30);
        org.junit.Assert.assertNull(errorHandler31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(restAdapter37);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNotNull(executor39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Retrofit-Idle" + "'", str40, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler52);
        org.junit.Assert.assertNull(executor53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(request57);
        org.junit.Assert.assertNull(log60);
    }

    @Test
    public void test1650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1650");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        java.lang.String str14 = restAdapter10.getIDLE_THREAD_NAME();
        java.util.concurrent.Executor executor15 = restAdapter10.getcallbackExecutor();
        retrofit.Server server16 = null;
        retrofit.client.Client.Provider provider17 = null;
        java.util.concurrent.Executor executor18 = null;
        java.util.concurrent.Executor executor19 = null;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        retrofit.converter.Converter converter21 = null;
        retrofit.Profiler profiler22 = null;
        retrofit.ErrorHandler errorHandler23 = null;
        retrofit.RestAdapter.Log log24 = null;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter(server16, provider17, executor18, executor19, requestInterceptor20, converter21, profiler22, errorHandler23, log24, logLevel25);
        retrofit.ErrorHandler errorHandler27 = restAdapter26.errorHandler;
        java.util.concurrent.Executor executor28 = restAdapter26.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel29 = restAdapter26.getLogLevel();
        retrofit.client.Client.Provider provider30 = restAdapter26.clientProvider;
        retrofit.Profiler profiler31 = restAdapter26.profiler;
        retrofit.converter.Converter converter32 = restAdapter26.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter33 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor34 = serializedObjectSupporter33.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter35 = serializedObjectSupporter33.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter36 = serializedObjectSupporter33.deserializeObjectConverter4();
        restAdapter26.serializedObjectSupporter = serializedObjectSupporter33;
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter26.setLogLevel(logLevel38);
        restAdapter10.setLogLevel(logLevel38);
        java.lang.String str41 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor43 = null;
        builder42.sethttpExecutor(executor43);
        retrofit.converter.Converter converter45 = builder42.converter;
        java.util.concurrent.Executor executor46 = builder42.getcallbackExecutor();
        retrofit.client.Client.Provider provider47 = builder42.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter48 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request49 = serializedObjectSupporter48.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler50 = serializedObjectSupporter48.deserializeObjectErrorHandler1();
        builder42.errorHandler = errorHandler50;
        retrofit.RestAdapter.Log log52 = builder42.log;
        retrofit.Server server53 = null;
        retrofit.client.Client.Provider provider54 = null;
        java.util.concurrent.Executor executor55 = null;
        java.util.concurrent.Executor executor56 = null;
        retrofit.RequestInterceptor requestInterceptor57 = null;
        retrofit.converter.Converter converter58 = null;
        retrofit.Profiler profiler59 = null;
        retrofit.ErrorHandler errorHandler60 = null;
        retrofit.RestAdapter.Log log61 = null;
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter(server53, provider54, executor55, executor56, requestInterceptor57, converter58, profiler59, errorHandler60, log61, logLevel62);
        retrofit.ErrorHandler errorHandler64 = restAdapter63.errorHandler;
        retrofit.ErrorHandler errorHandler65 = restAdapter63.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler66 = restAdapter63.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter67 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request68 = serializedObjectSupporter67.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter69 = serializedObjectSupporter67.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter70 = serializedObjectSupporter67.deserializeObjectConverter1();
        restHandler66.serializedObjectSupporter = serializedObjectSupporter67;
        retrofit.SerializedObjectSupporter serializedObjectSupporter72 = restHandler66.serializedObjectSupporter;
        java.lang.String str73 = serializedObjectSupporter72.deserializeObjectString5();
        builder42.serializedObjectSupporter = serializedObjectSupporter72;
        retrofit.client.Request request75 = serializedObjectSupporter72.deserializeObjectRequest5();
        retrofit.converter.GsonConverter gsonConverter76 = serializedObjectSupporter72.deserializeObjectConverter1();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter72;
        retrofit.converter.GsonConverter gsonConverter78 = serializedObjectSupporter72.deserializeObjectConverter2();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Retrofit-Idle" + "'", str14, "Retrofit-Idle");
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider30);
        org.junit.Assert.assertNull(profiler31);
        org.junit.Assert.assertNull(converter32);
        org.junit.Assert.assertNotNull(requestInterceptor34);
        org.junit.Assert.assertNotNull(gsonConverter35);
        org.junit.Assert.assertNotNull(gsonConverter36);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Retrofit-Idle" + "'", str41, "Retrofit-Idle");
        org.junit.Assert.assertNull(converter45);
        org.junit.Assert.assertNull(executor46);
        org.junit.Assert.assertNull(provider47);
        org.junit.Assert.assertNotNull(request49);
        org.junit.Assert.assertNotNull(errorHandler50);
        org.junit.Assert.assertNull(log52);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler64);
        org.junit.Assert.assertNull(errorHandler65);
        org.junit.Assert.assertNotNull(request68);
        org.junit.Assert.assertNotNull(gsonConverter69);
        org.junit.Assert.assertNotNull(gsonConverter70);
        org.junit.Assert.assertNotNull(serializedObjectSupporter72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "POST" + "'", str73, "POST");
        org.junit.Assert.assertNotNull(request75);
        org.junit.Assert.assertNotNull(gsonConverter76);
        org.junit.Assert.assertNotNull(gsonConverter78);
    }

    @Test
    public void test1651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1651");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.converter.Converter converter14 = restAdapter10.getconverter();
        retrofit.converter.Converter converter15 = restAdapter10.converter;
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter10.logLevel;
        retrofit.converter.Converter converter17 = restAdapter10.converter;
        java.lang.String str18 = restAdapter10.getTHREAD_PREFIX();
        java.lang.Class<?> wildcardClass19 = restAdapter10.getClass();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(converter15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(converter17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Retrofit-" + "'", str18, "Retrofit-");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1652");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler2 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest8();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest5();
        java.lang.String str5 = request4.getMethod();
        java.util.List<retrofit.client.Header> headerList6 = request4.getHeaders();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(errorHandler2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GET" + "'", str5, "GET");
        org.junit.Assert.assertNotNull(headerList6);
    }

    @Test
    public void test1653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1653");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = null;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter13;
        java.util.concurrent.Executor executor15 = restAdapter10.callbackExecutor;
        retrofit.Profiler profiler16 = restAdapter10.getprofiler();
        int int17 = restAdapter10.getLOG_CHUNK_SIZE();
        java.lang.String str18 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.Server server19 = restAdapter10.getserver();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(profiler16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4000 + "'", int17 == 4000);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Retrofit-Idle" + "'", str18, "Retrofit-Idle");
        org.junit.Assert.assertNull(server19);
    }

    @Test
    public void test1654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1654");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.client.Client.Provider provider4 = null;
        builder0.clientProvider = provider4;
        retrofit.Profiler profiler6 = builder0.profiler;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder9 = builder7.setServer("hi!");
        retrofit.client.Client.Provider provider10 = builder7.clientProvider;
        retrofit.RestAdapter.Log log11 = null;
        builder7.log = log11;
        java.util.concurrent.Executor executor13 = builder7.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = builder14.getcallbackExecutor();
        retrofit.client.Client.Provider provider16 = null;
        builder14.clientProvider = provider16;
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter18.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter21 = serializedObjectSupporter18.deserializeObjectConverter5();
        retrofit.client.Request request22 = serializedObjectSupporter18.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter23 = serializedObjectSupporter18.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter24 = serializedObjectSupporter18.deserializeObjectConverter6();
        retrofit.RestAdapter.Builder builder25 = builder14.setConverter((retrofit.converter.Converter) gsonConverter24);
        builder7.converter = gsonConverter24;
        retrofit.ErrorHandler errorHandler27 = builder7.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter28 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler29 = serializedObjectSupporter28.deserializeObjectErrorHandler1();
        retrofit.Server server30 = serializedObjectSupporter28.deserializeObjectServer1();
        builder7.server = server30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder34 = builder32.setServer("hi!");
        retrofit.client.Client.Provider provider35 = builder32.clientProvider;
        retrofit.RequestInterceptor requestInterceptor36 = builder32.requestInterceptor;
        retrofit.Server server37 = null;
        builder32.server = server37;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = null;
        builder39.sethttpExecutor(executor40);
        retrofit.converter.Converter converter42 = builder39.converter;
        java.util.concurrent.Executor executor43 = builder39.getcallbackExecutor();
        retrofit.client.Client.Provider provider44 = builder39.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter45 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request46 = serializedObjectSupporter45.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler47 = serializedObjectSupporter45.deserializeObjectErrorHandler1();
        builder39.errorHandler = errorHandler47;
        retrofit.converter.Converter converter49 = builder39.converter;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder52 = builder50.setServer("hi!");
        java.util.concurrent.Executor executor53 = null;
        builder52.callbackExecutor = executor53;
        retrofit.SerializedObjectSupporter serializedObjectSupporter55 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor56 = serializedObjectSupporter55.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder57 = builder52.setRequestInterceptor(requestInterceptor56);
        retrofit.RestAdapter.Builder builder58 = builder39.setRequestInterceptor(requestInterceptor56);
        builder32.requestInterceptor = requestInterceptor56;
        retrofit.RestAdapter.Builder builder60 = builder7.setRequestInterceptor(requestInterceptor56);
        java.util.concurrent.Executor executor61 = builder7.getcallbackExecutor();
        retrofit.RestAdapter restAdapter62 = builder7.build();
        java.util.concurrent.Executor executor63 = builder7.callbackExecutor;
        builder0.sethttpExecutor(executor63);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(profiler6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(provider10);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNotNull(gsonConverter21);
        org.junit.Assert.assertNotNull(request22);
        org.junit.Assert.assertNotNull(gsonConverter23);
        org.junit.Assert.assertNotNull(gsonConverter24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNotNull(errorHandler29);
        org.junit.Assert.assertNotNull(server30);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(provider35);
        org.junit.Assert.assertNull(requestInterceptor36);
        org.junit.Assert.assertNull(converter42);
        org.junit.Assert.assertNull(executor43);
        org.junit.Assert.assertNull(provider44);
        org.junit.Assert.assertNotNull(request46);
        org.junit.Assert.assertNotNull(errorHandler47);
        org.junit.Assert.assertNull(converter49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(requestInterceptor56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(executor61);
        org.junit.Assert.assertNotNull(restAdapter62);
        org.junit.Assert.assertNotNull(executor63);
    }

    @Test
    public void test1655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1655");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.client.Request request9 = serializedObjectSupporter6.deserializeObjectRequest1();
        builder0.serializedObjectSupporter = serializedObjectSupporter6;
        java.lang.String str11 = serializedObjectSupporter6.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter12 = serializedObjectSupporter6.deserializeObjectConverter1();
        java.lang.String str13 = serializedObjectSupporter6.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter6.deserializeObjectConverter2();
        retrofit.client.Request request15 = serializedObjectSupporter6.deserializeObjectRequest6();
        retrofit.client.Request request16 = serializedObjectSupporter6.deserializeObjectRequest6();
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-Idle" + "'", str11, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-Idle" + "'", str13, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(request16);
    }

    @Test
    public void test1656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1656");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider5 = builder0.getclientProvider();
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.sethttpExecutor(executor7);
        retrofit.Profiler profiler9 = null;
        builder6.profiler = profiler9;
        retrofit.RestAdapter.LogLevel logLevel11 = builder6.logLevel;
        java.util.concurrent.Executor executor12 = null;
        builder6.sethttpExecutor(executor12);
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        java.util.concurrent.Executor executor17 = null;
        builder16.callbackExecutor = executor17;
        retrofit.SerializedObjectSupporter serializedObjectSupporter19 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor20 = serializedObjectSupporter19.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder21 = builder16.setRequestInterceptor(requestInterceptor20);
        retrofit.RestAdapter.Builder builder22 = builder6.setRequestInterceptor(requestInterceptor20);
        java.util.concurrent.Executor executor23 = builder22.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor25 = serializedObjectSupporter24.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter26 = serializedObjectSupporter24.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter27 = serializedObjectSupporter24.deserializeObjectConverter7();
        retrofit.Server server28 = serializedObjectSupporter24.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder29 = builder22.setServer(server28);
        java.util.concurrent.Executor executor30 = null;
        builder29.sethttpExecutor(executor30);
        retrofit.Server server32 = builder29.server;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder35 = builder33.setServer("hi!");
        java.util.concurrent.Executor executor36 = null;
        builder35.callbackExecutor = executor36;
        retrofit.RestAdapter restAdapter38 = builder35.build();
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = null;
        builder39.sethttpExecutor(executor40);
        retrofit.Profiler profiler42 = null;
        builder39.profiler = profiler42;
        retrofit.RestAdapter.Log log44 = builder39.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter45 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler46 = serializedObjectSupporter45.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder47 = builder39.setErrorHandler(errorHandler46);
        retrofit.RestAdapter.Builder builder48 = builder35.setErrorHandler(errorHandler46);
        java.util.concurrent.Executor executor49 = builder48.callbackExecutor;
        builder29.callbackExecutor = executor49;
        builder0.sethttpExecutor(executor49);
        retrofit.converter.Converter converter52 = builder0.converter;
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(requestInterceptor20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNotNull(gsonConverter26);
        org.junit.Assert.assertNotNull(gsonConverter27);
        org.junit.Assert.assertNotNull(server28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(server32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(restAdapter38);
        org.junit.Assert.assertNull(log44);
        org.junit.Assert.assertNotNull(errorHandler46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(executor49);
        org.junit.Assert.assertNull(converter52);
    }

    @Test
    public void test1657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1657");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter10.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter14 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request15 = serializedObjectSupporter14.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter14.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter14.deserializeObjectConverter1();
        restHandler13.serializedObjectSupporter = serializedObjectSupporter14;
        retrofit.SerializedObjectSupporter serializedObjectSupporter19 = restHandler13.serializedObjectSupporter;
        java.lang.String str20 = serializedObjectSupporter19.deserializeObjectString5();
        retrofit.mime.TypedString typedString21 = serializedObjectSupporter19.deserializeObjectTypedOutput2();
        java.lang.String str22 = serializedObjectSupporter19.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter23 = serializedObjectSupporter19.deserializeObjectConverter6();
        java.lang.String str24 = serializedObjectSupporter19.deserializeObjectString5();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collections collections25 = serializedObjectSupporter19.deserializeObjectList1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.Collections$UnmodifiableRandomAccessList cannot be cast to java.util.Collections");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(gsonConverter16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertNotNull(serializedObjectSupporter19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "POST" + "'", str20, "POST");
        org.junit.Assert.assertNotNull(typedString21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Retrofit-Idle" + "'", str22, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "POST" + "'", str24, "POST");
    }

    @Test
    public void test1658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1658");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.Server server5 = null;
        builder0.server = server5;
        retrofit.Profiler profiler7 = builder0.profiler;
        retrofit.client.Client client8 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder9 = builder0.setClient(client8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNull(profiler7);
    }

    @Test
    public void test1659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1659");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler7 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder8 = builder0.setErrorHandler(errorHandler7);
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder11 = builder9.setServer("hi!");
        retrofit.client.Client.Provider provider12 = builder9.clientProvider;
        retrofit.RequestInterceptor requestInterceptor13 = builder9.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean15 = logLevel14.log();
        retrofit.RestAdapter.Builder builder16 = builder9.setLogLevel(logLevel14);
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor18 = builder17.getcallbackExecutor();
        retrofit.client.Client.Provider provider19 = null;
        builder17.clientProvider = provider19;
        retrofit.Server server21 = null;
        builder17.server = server21;
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        builder17.log = log23;
        builder9.log = log23;
        retrofit.RestAdapter.Builder builder26 = builder8.setLog(log23);
        retrofit.SerializedObjectSupporter serializedObjectSupporter27 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter27.deserializeObjectConverter2();
        retrofit.client.Request request29 = serializedObjectSupporter27.deserializeObjectRequest7();
        retrofit.converter.GsonConverter gsonConverter30 = serializedObjectSupporter27.deserializeObjectConverter7();
        retrofit.client.Request request31 = serializedObjectSupporter27.deserializeObjectRequest5();
        builder8.serializedObjectSupporter = serializedObjectSupporter27;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = null;
        builder33.sethttpExecutor(executor34);
        retrofit.converter.Converter converter36 = builder33.converter;
        java.util.concurrent.Executor executor37 = builder33.getcallbackExecutor();
        java.util.concurrent.Executor executor38 = builder33.callbackExecutor;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = null;
        builder39.sethttpExecutor(executor40);
        retrofit.Profiler profiler42 = null;
        builder39.profiler = profiler42;
        retrofit.Server server44 = builder39.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter45 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor46 = serializedObjectSupporter45.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter47 = serializedObjectSupporter45.deserializeObjectConverter7();
        retrofit.client.Request request48 = serializedObjectSupporter45.deserializeObjectRequest1();
        builder39.serializedObjectSupporter = serializedObjectSupporter45;
        builder39.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder53 = builder51.setServer("hi!");
        java.util.concurrent.Executor executor54 = null;
        builder53.callbackExecutor = executor54;
        retrofit.RestAdapter restAdapter56 = builder53.build();
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor58 = null;
        builder57.sethttpExecutor(executor58);
        retrofit.Profiler profiler60 = null;
        builder57.profiler = profiler60;
        retrofit.RestAdapter.Log log62 = builder57.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter63 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler64 = serializedObjectSupporter63.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder65 = builder57.setErrorHandler(errorHandler64);
        retrofit.RestAdapter.Builder builder66 = builder53.setErrorHandler(errorHandler64);
        java.util.concurrent.Executor executor67 = builder66.callbackExecutor;
        builder39.setcallbackExecutor(executor67);
        builder33.httpExecutor = executor67;
        java.util.concurrent.Executor executor70 = builder33.gethttpExecutor();
        builder8.sethttpExecutor(executor70);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNotNull(errorHandler7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertNull(requestInterceptor13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(request29);
        org.junit.Assert.assertNotNull(gsonConverter30);
        org.junit.Assert.assertNotNull(request31);
        org.junit.Assert.assertNull(converter36);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNull(server44);
        org.junit.Assert.assertNotNull(requestInterceptor46);
        org.junit.Assert.assertNotNull(gsonConverter47);
        org.junit.Assert.assertNotNull(request48);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(restAdapter56);
        org.junit.Assert.assertNull(log62);
        org.junit.Assert.assertNotNull(errorHandler64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(executor67);
        org.junit.Assert.assertNotNull(executor70);
    }

    @Test
    public void test1660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1660");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.client.Request request9 = serializedObjectSupporter6.deserializeObjectRequest1();
        builder0.serializedObjectSupporter = serializedObjectSupporter6;
        retrofit.client.Request request11 = serializedObjectSupporter6.deserializeObjectRequest2();
        retrofit.mime.TypedString typedString12 = serializedObjectSupporter6.deserializeObjectTypedOutput2();
        java.lang.String str13 = serializedObjectSupporter6.deserializeObjectString5();
        java.lang.String str14 = serializedObjectSupporter6.deserializeObjectString5();
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNotNull(request11);
        org.junit.Assert.assertNotNull(typedString12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "POST" + "'", str13, "POST");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "POST" + "'", str14, "POST");
    }

    @Test
    public void test1661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1661");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder7 = builder5.setServer("hi!");
        retrofit.client.Client.Provider provider8 = builder5.clientProvider;
        java.util.concurrent.Executor executor9 = null;
        builder5.setcallbackExecutor(executor9);
        retrofit.RestAdapter.Log log11 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder12 = builder5.setLog(log11);
        retrofit.RestAdapter.Builder builder13 = builder0.setLog(log11);
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = null;
        builder14.sethttpExecutor(executor15);
        retrofit.Profiler profiler17 = null;
        builder14.profiler = profiler17;
        retrofit.RestAdapter.LogLevel logLevel19 = builder14.logLevel;
        java.util.concurrent.Executor executor20 = null;
        builder14.sethttpExecutor(executor20);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder24 = builder22.setServer("hi!");
        java.util.concurrent.Executor executor25 = null;
        builder24.callbackExecutor = executor25;
        retrofit.SerializedObjectSupporter serializedObjectSupporter27 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor28 = serializedObjectSupporter27.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder29 = builder24.setRequestInterceptor(requestInterceptor28);
        retrofit.RestAdapter.Builder builder30 = builder14.setRequestInterceptor(requestInterceptor28);
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean32 = logLevel31.log();
        builder14.logLevel = logLevel31;
        retrofit.SerializedObjectSupporter serializedObjectSupporter34 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor35 = serializedObjectSupporter34.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter36 = serializedObjectSupporter34.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter37 = serializedObjectSupporter34.deserializeObjectConverter5();
        retrofit.client.Request request38 = serializedObjectSupporter34.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter39 = serializedObjectSupporter34.deserializeObjectConverter3();
        retrofit.client.Request request40 = serializedObjectSupporter34.deserializeObjectRequest4();
        retrofit.client.Request request41 = serializedObjectSupporter34.deserializeObjectRequest2();
        builder14.serializedObjectSupporter = serializedObjectSupporter34;
        retrofit.converter.GsonConverter gsonConverter43 = serializedObjectSupporter34.deserializeObjectConverter5();
        builder0.serializedObjectSupporter = serializedObjectSupporter34;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder47 = builder45.setServer("hi!");
        retrofit.client.Client.Provider provider48 = builder45.clientProvider;
        retrofit.RequestInterceptor requestInterceptor49 = builder45.requestInterceptor;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder52 = builder50.setServer("hi!");
        retrofit.client.Client.Provider provider53 = builder50.clientProvider;
        java.util.concurrent.Executor executor54 = null;
        builder50.setcallbackExecutor(executor54);
        retrofit.RestAdapter.Log log56 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder57 = builder50.setLog(log56);
        retrofit.RestAdapter.Builder builder58 = builder45.setLog(log56);
        builder58.ensureSaneDefaults();
        retrofit.client.Client.Provider provider60 = builder58.getclientProvider();
        builder0.setclientProvider(provider60);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNotNull(log11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(requestInterceptor28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(requestInterceptor35);
        org.junit.Assert.assertNotNull(gsonConverter36);
        org.junit.Assert.assertNotNull(gsonConverter37);
        org.junit.Assert.assertNotNull(request38);
        org.junit.Assert.assertNotNull(gsonConverter39);
        org.junit.Assert.assertNotNull(request40);
        org.junit.Assert.assertNotNull(request41);
        org.junit.Assert.assertNotNull(gsonConverter43);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(provider48);
        org.junit.Assert.assertNull(requestInterceptor49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(provider53);
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(provider60);
    }

    @Test
    public void test1662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1662");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RestAdapter.Log log4 = null;
        builder0.log = log4;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter6.deserializeObjectConverter5();
        retrofit.client.Request request10 = serializedObjectSupporter6.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter11 = serializedObjectSupporter6.deserializeObjectConverter3();
        retrofit.client.Request request12 = serializedObjectSupporter6.deserializeObjectRequest4();
        retrofit.client.Request request13 = serializedObjectSupporter6.deserializeObjectRequest2();
        retrofit.client.Request request14 = serializedObjectSupporter6.deserializeObjectRequest7();
        java.lang.String str15 = serializedObjectSupporter6.deserializeObjectString5();
        builder0.serializedObjectSupporter = serializedObjectSupporter6;
        retrofit.client.Request request17 = serializedObjectSupporter6.deserializeObjectRequest2();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(gsonConverter9);
        org.junit.Assert.assertNotNull(request10);
        org.junit.Assert.assertNotNull(gsonConverter11);
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(request13);
        org.junit.Assert.assertNotNull(request14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "POST" + "'", str15, "POST");
        org.junit.Assert.assertNotNull(request17);
    }

    @Test
    public void test1663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1663");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.client.Request request9 = serializedObjectSupporter6.deserializeObjectRequest1();
        builder0.serializedObjectSupporter = serializedObjectSupporter6;
        java.lang.String str11 = serializedObjectSupporter6.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter12 = serializedObjectSupporter6.deserializeObjectConverter1();
        retrofit.RequestInterceptor requestInterceptor13 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.client.Request request14 = serializedObjectSupporter6.deserializeObjectRequest2();
        retrofit.converter.GsonConverter gsonConverter15 = serializedObjectSupporter6.deserializeObjectConverter7();
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-Idle" + "'", str11, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter12);
        org.junit.Assert.assertNotNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(request14);
        org.junit.Assert.assertNotNull(gsonConverter15);
    }

    @Test
    public void test1664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1664");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = null;
        builder0.serializedObjectSupporter = serializedObjectSupporter1;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor4 = null;
        builder3.sethttpExecutor(executor4);
        retrofit.Profiler profiler6 = null;
        builder3.profiler = profiler6;
        retrofit.RestAdapter.LogLevel logLevel8 = builder3.logLevel;
        java.util.concurrent.Executor executor9 = null;
        builder3.sethttpExecutor(executor9);
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder13 = builder11.setServer("hi!");
        java.util.concurrent.Executor executor14 = null;
        builder13.callbackExecutor = executor14;
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor17 = serializedObjectSupporter16.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder18 = builder13.setRequestInterceptor(requestInterceptor17);
        retrofit.RestAdapter.Builder builder19 = builder3.setRequestInterceptor(requestInterceptor17);
        retrofit.RestAdapter.Builder builder20 = builder0.setRequestInterceptor(requestInterceptor17);
        retrofit.SerializedObjectSupporter serializedObjectSupporter21 = builder0.serializedObjectSupporter;
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(requestInterceptor17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(serializedObjectSupporter21);
    }

    @Test
    public void test1665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1665");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.logLevel = logLevel23;
        retrofit.Server server26 = restAdapter10.getserver();
        retrofit.RestAdapter.RestHandler restHandler27 = restAdapter10.new RestHandler();
        retrofit.client.Client.Provider provider28 = restAdapter10.getclientProvider();
        java.util.concurrent.Executor executor29 = restAdapter10.gethttpExecutor();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(server26);
        org.junit.Assert.assertNull(provider28);
        org.junit.Assert.assertNull(executor29);
    }

    @Test
    public void test1666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1666");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        java.util.concurrent.Executor executor5 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.sethttpExecutor(executor7);
        retrofit.Profiler profiler9 = null;
        builder6.profiler = profiler9;
        retrofit.RestAdapter.LogLevel logLevel11 = builder6.logLevel;
        java.util.concurrent.Executor executor12 = null;
        builder6.sethttpExecutor(executor12);
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        java.util.concurrent.Executor executor17 = null;
        builder16.callbackExecutor = executor17;
        retrofit.SerializedObjectSupporter serializedObjectSupporter19 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor20 = serializedObjectSupporter19.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder21 = builder16.setRequestInterceptor(requestInterceptor20);
        retrofit.RestAdapter.Builder builder22 = builder6.setRequestInterceptor(requestInterceptor20);
        java.util.concurrent.Executor executor23 = builder22.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor25 = serializedObjectSupporter24.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter26 = serializedObjectSupporter24.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter27 = serializedObjectSupporter24.deserializeObjectConverter7();
        retrofit.Server server28 = serializedObjectSupporter24.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder29 = builder22.setServer(server28);
        java.util.concurrent.Executor executor30 = null;
        builder29.sethttpExecutor(executor30);
        retrofit.Server server32 = builder29.server;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder35 = builder33.setServer("hi!");
        java.util.concurrent.Executor executor36 = null;
        builder35.callbackExecutor = executor36;
        retrofit.RestAdapter restAdapter38 = builder35.build();
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = null;
        builder39.sethttpExecutor(executor40);
        retrofit.Profiler profiler42 = null;
        builder39.profiler = profiler42;
        retrofit.RestAdapter.Log log44 = builder39.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter45 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler46 = serializedObjectSupporter45.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder47 = builder39.setErrorHandler(errorHandler46);
        retrofit.RestAdapter.Builder builder48 = builder35.setErrorHandler(errorHandler46);
        java.util.concurrent.Executor executor49 = builder48.callbackExecutor;
        builder29.callbackExecutor = executor49;
        java.util.concurrent.Executor executor51 = null;
        retrofit.RestAdapter.Builder builder52 = builder0.setExecutors(executor49, executor51);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter53 = builder52.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(requestInterceptor20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNotNull(gsonConverter26);
        org.junit.Assert.assertNotNull(gsonConverter27);
        org.junit.Assert.assertNotNull(server28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(server32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(restAdapter38);
        org.junit.Assert.assertNull(log44);
        org.junit.Assert.assertNotNull(errorHandler46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(executor49);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test1667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1667");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.errorHandler;
        retrofit.converter.Converter converter13 = restAdapter10.converter;
        retrofit.Profiler profiler14 = restAdapter10.getprofiler();
        java.util.concurrent.Executor executor15 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter10.logLevel;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertNull(profiler14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test1668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1668");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider5 = builder0.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request7 = serializedObjectSupporter6.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler8 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        builder0.errorHandler = errorHandler8;
        retrofit.RestAdapter.Log log10 = builder0.log;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder13 = builder11.setServer("hi!");
        retrofit.client.Client.Provider provider14 = builder11.clientProvider;
        retrofit.RequestInterceptor requestInterceptor15 = builder11.requestInterceptor;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder18 = builder16.setServer("hi!");
        retrofit.client.Client.Provider provider19 = builder16.clientProvider;
        java.util.concurrent.Executor executor20 = null;
        builder16.setcallbackExecutor(executor20);
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder23 = builder16.setLog(log22);
        retrofit.RestAdapter.Builder builder24 = builder11.setLog(log22);
        builder0.log = log22;
        log22.log("Retrofit-Idle");
        log22.log("Retrofit-");
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(errorHandler8);
        org.junit.Assert.assertNull(log10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(provider19);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test1669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1669");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RestAdapter.Log log4 = null;
        builder0.log = log4;
        java.util.concurrent.Executor executor6 = builder0.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = builder7.getcallbackExecutor();
        retrofit.client.Client.Provider provider9 = null;
        builder7.clientProvider = provider9;
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor12 = serializedObjectSupporter11.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter13 = serializedObjectSupporter11.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter11.deserializeObjectConverter5();
        retrofit.client.Request request15 = serializedObjectSupporter11.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter11.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter11.deserializeObjectConverter6();
        retrofit.RestAdapter.Builder builder18 = builder7.setConverter((retrofit.converter.Converter) gsonConverter17);
        builder0.converter = gsonConverter17;
        retrofit.ErrorHandler errorHandler20 = builder0.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter21 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter21.deserializeObjectConverter2();
        retrofit.client.Request request23 = serializedObjectSupporter21.deserializeObjectRequest7();
        retrofit.client.Request request24 = serializedObjectSupporter21.deserializeObjectRequest2();
        retrofit.client.Request request25 = serializedObjectSupporter21.deserializeObjectRequest3();
        retrofit.converter.GsonConverter gsonConverter26 = serializedObjectSupporter21.deserializeObjectConverter6();
        retrofit.RequestInterceptor requestInterceptor27 = serializedObjectSupporter21.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder28 = builder0.setRequestInterceptor(requestInterceptor27);
        java.util.concurrent.Executor executor29 = builder0.gethttpExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = new retrofit.SerializedObjectSupporter();
        java.lang.String str31 = serializedObjectSupporter30.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter32 = serializedObjectSupporter30.deserializeObjectConverter6();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter30.deserializeObjectConverter5();
        builder0.serializedObjectSupporter = serializedObjectSupporter30;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor36 = builder35.getcallbackExecutor();
        retrofit.client.Client.Provider provider37 = null;
        builder35.clientProvider = provider37;
        java.util.concurrent.Executor executor39 = builder35.getcallbackExecutor();
        retrofit.Server server40 = null;
        retrofit.client.Client.Provider provider41 = null;
        java.util.concurrent.Executor executor42 = null;
        java.util.concurrent.Executor executor43 = null;
        retrofit.RequestInterceptor requestInterceptor44 = null;
        retrofit.converter.Converter converter45 = null;
        retrofit.Profiler profiler46 = null;
        retrofit.ErrorHandler errorHandler47 = null;
        retrofit.RestAdapter.Log log48 = null;
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter(server40, provider41, executor42, executor43, requestInterceptor44, converter45, profiler46, errorHandler47, log48, logLevel49);
        retrofit.ErrorHandler errorHandler51 = restAdapter50.errorHandler;
        int int52 = restAdapter50.getLOG_CHUNK_SIZE();
        retrofit.Server server53 = restAdapter50.getserver();
        retrofit.client.Client.Provider provider54 = restAdapter50.clientProvider;
        retrofit.client.Client.Provider provider55 = restAdapter50.getclientProvider();
        java.lang.String str56 = restAdapter50.getIDLE_THREAD_NAME();
        retrofit.Server server57 = null;
        retrofit.client.Client.Provider provider58 = null;
        java.util.concurrent.Executor executor59 = null;
        java.util.concurrent.Executor executor60 = null;
        retrofit.RequestInterceptor requestInterceptor61 = null;
        retrofit.converter.Converter converter62 = null;
        retrofit.Profiler profiler63 = null;
        retrofit.ErrorHandler errorHandler64 = null;
        retrofit.RestAdapter.Log log65 = null;
        retrofit.RestAdapter.LogLevel logLevel66 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter(server57, provider58, executor59, executor60, requestInterceptor61, converter62, profiler63, errorHandler64, log65, logLevel66);
        retrofit.RestAdapter.LogLevel logLevel68 = restAdapter67.logLevel;
        retrofit.ErrorHandler errorHandler69 = restAdapter67.geterrorHandler();
        java.util.concurrent.Executor executor70 = restAdapter67.getcallbackExecutor();
        retrofit.converter.Converter converter71 = restAdapter67.converter;
        retrofit.Server server72 = restAdapter67.getserver();
        retrofit.RestAdapter.LogLevel logLevel73 = restAdapter67.getLogLevel();
        restAdapter50.setLogLevel(logLevel73);
        retrofit.RestAdapter.Builder builder75 = builder35.setLogLevel(logLevel73);
        retrofit.SerializedObjectSupporter serializedObjectSupporter76 = new retrofit.SerializedObjectSupporter();
        java.lang.String str77 = serializedObjectSupporter76.deserializeObjectString4();
        retrofit.converter.GsonConverter gsonConverter78 = serializedObjectSupporter76.deserializeObjectConverter8();
        builder75.converter = gsonConverter78;
        retrofit.converter.Converter converter80 = builder75.converter;
        builder0.converter = converter80;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNotNull(requestInterceptor12);
        org.junit.Assert.assertNotNull(gsonConverter13);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(gsonConverter16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertNotNull(request24);
        org.junit.Assert.assertNotNull(request25);
        org.junit.Assert.assertNotNull(gsonConverter26);
        org.junit.Assert.assertNotNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Retrofit-Idle" + "'", str31, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNull(executor36);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 4000 + "'", int52 == 4000);
        org.junit.Assert.assertNull(server53);
        org.junit.Assert.assertNull(provider54);
        org.junit.Assert.assertNull(provider55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Retrofit-Idle" + "'", str56, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler69);
        org.junit.Assert.assertNull(executor70);
        org.junit.Assert.assertNull(converter71);
        org.junit.Assert.assertNull(server72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "http://example.com/" + "'", str77, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter78);
        org.junit.Assert.assertNotNull(converter80);
    }

    @Test
    public void test1670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1670");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        java.util.concurrent.Executor executor4 = null;
        builder0.setcallbackExecutor(executor4);
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder9 = builder7.setServer("hi!");
        java.util.concurrent.Executor executor10 = null;
        builder9.callbackExecutor = executor10;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor13 = serializedObjectSupporter12.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder14 = builder9.setRequestInterceptor(requestInterceptor13);
        retrofit.RestAdapter.Builder builder15 = builder0.setRequestInterceptor(requestInterceptor13);
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor17 = null;
        builder16.sethttpExecutor(executor17);
        retrofit.Profiler profiler19 = null;
        builder16.profiler = profiler19;
        retrofit.RestAdapter.LogLevel logLevel21 = builder16.logLevel;
        java.util.concurrent.Executor executor22 = null;
        builder16.sethttpExecutor(executor22);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder26 = builder24.setServer("hi!");
        java.util.concurrent.Executor executor27 = null;
        builder26.callbackExecutor = executor27;
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor30 = serializedObjectSupporter29.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder31 = builder26.setRequestInterceptor(requestInterceptor30);
        retrofit.RestAdapter.Builder builder32 = builder16.setRequestInterceptor(requestInterceptor30);
        java.util.concurrent.Executor executor33 = null;
        builder16.setcallbackExecutor(executor33);
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder37 = builder35.setServer("hi!");
        java.util.concurrent.Executor executor38 = null;
        builder37.callbackExecutor = executor38;
        retrofit.SerializedObjectSupporter serializedObjectSupporter40 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor41 = serializedObjectSupporter40.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder42 = builder37.setRequestInterceptor(requestInterceptor41);
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder45 = builder43.setServer("hi!");
        java.util.concurrent.Executor executor46 = null;
        builder45.callbackExecutor = executor46;
        retrofit.SerializedObjectSupporter serializedObjectSupporter48 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor49 = serializedObjectSupporter48.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder50 = builder45.setRequestInterceptor(requestInterceptor49);
        builder42.requestInterceptor = requestInterceptor49;
        retrofit.RestAdapter.Builder builder52 = builder16.setRequestInterceptor(requestInterceptor49);
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder55 = builder53.setServer("hi!");
        java.util.concurrent.Executor executor56 = null;
        builder55.callbackExecutor = executor56;
        retrofit.RestAdapter restAdapter58 = builder55.build();
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder61 = builder59.setServer("hi!");
        retrofit.client.Client.Provider provider62 = builder59.clientProvider;
        retrofit.RequestInterceptor requestInterceptor63 = builder59.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel64 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean65 = logLevel64.log();
        retrofit.RestAdapter.Builder builder66 = builder59.setLogLevel(logLevel64);
        builder55.logLevel = logLevel64;
        builder16.logLevel = logLevel64;
        retrofit.SerializedObjectSupporter serializedObjectSupporter69 = new retrofit.SerializedObjectSupporter();
        java.lang.String str70 = serializedObjectSupporter69.deserializeObjectString2();
        java.lang.String str71 = serializedObjectSupporter69.deserializeObjectString1();
        retrofit.RequestInterceptor requestInterceptor72 = serializedObjectSupporter69.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder73 = builder16.setRequestInterceptor(requestInterceptor72);
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder76 = builder74.setServer("hi!");
        java.util.concurrent.Executor executor77 = null;
        builder76.callbackExecutor = executor77;
        retrofit.RestAdapter restAdapter79 = builder76.build();
        retrofit.RestAdapter.Log log80 = restAdapter79.log;
        java.util.concurrent.Executor executor81 = restAdapter79.gethttpExecutor();
        retrofit.client.Client.Provider provider82 = restAdapter79.getclientProvider();
        builder16.clientProvider = provider82;
        retrofit.RestAdapter.Builder builder84 = builder15.setClient(provider82);
        retrofit.RestAdapter.LogLevel logLevel85 = builder84.logLevel;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(requestInterceptor41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(requestInterceptor49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(restAdapter58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(provider62);
        org.junit.Assert.assertNull(requestInterceptor63);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Retrofit-Idle" + "'", str70, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Retrofit-" + "'", str71, "Retrofit-");
        org.junit.Assert.assertNotNull(requestInterceptor72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(restAdapter79);
        org.junit.Assert.assertNotNull(log80);
        org.junit.Assert.assertNotNull(executor81);
        org.junit.Assert.assertNotNull(provider82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertTrue("'" + logLevel85 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel85.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test1671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1671");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.util.concurrent.Executor executor11 = restAdapter10.getcallbackExecutor();
        retrofit.ErrorHandler errorHandler12 = restAdapter10.geterrorHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor14 = serializedObjectSupporter13.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter15 = serializedObjectSupporter13.deserializeObjectConverter7();
        retrofit.client.Request request16 = serializedObjectSupporter13.deserializeObjectRequest2();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter13.deserializeObjectConverter6();
        retrofit.client.Request request18 = serializedObjectSupporter13.deserializeObjectRequest8();
        java.lang.String str19 = serializedObjectSupporter13.deserializeObjectString3();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter13;
        retrofit.SerializedObjectSupporter serializedObjectSupporter21 = restAdapter10.serializedObjectSupporter;
        retrofit.client.Client.Provider provider22 = restAdapter10.getclientProvider();
        retrofit.client.Response response24 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response26 = restAdapter10.logAndReplaceResponse("", response24, (long) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNotNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(gsonConverter15);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertNotNull(request18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "GET" + "'", str19, "GET");
        org.junit.Assert.assertNotNull(serializedObjectSupporter21);
        org.junit.Assert.assertNull(provider22);
    }

    @Test
    public void test1672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1672");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.client.Request request9 = serializedObjectSupporter6.deserializeObjectRequest1();
        builder0.serializedObjectSupporter = serializedObjectSupporter6;
        java.lang.String str11 = serializedObjectSupporter6.deserializeObjectString2();
        retrofit.ErrorHandler errorHandler12 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        retrofit.client.Request request13 = serializedObjectSupporter6.deserializeObjectRequest8();
        java.lang.String str14 = serializedObjectSupporter6.deserializeObjectString2();
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-Idle" + "'", str11, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler12);
        org.junit.Assert.assertNotNull(request13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Retrofit-Idle" + "'", str14, "Retrofit-Idle");
    }

    @Test
    public void test1673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1673");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter10.logLevel;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter14 = restAdapter10.serializedObjectSupporter;
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter10.requestInterceptor;
        retrofit.Server server16 = restAdapter10.getserver();
        retrofit.Server server17 = restAdapter10.getserver();
        retrofit.converter.Converter converter18 = restAdapter10.getconverter();
        retrofit.client.Response response20 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response22 = restAdapter10.logAndReplaceResponse("http://example.com/", response20, (long) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(serializedObjectSupporter14);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertNull(server17);
        org.junit.Assert.assertNull(converter18);
    }

    @Test
    public void test1674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1674");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest4();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString1();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString4();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Retrofit-" + "'", str5, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://example.com/" + "'", str6, "http://example.com/");
    }

    @Test
    public void test1675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1675");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server4 = null;
        builder0.server = server4;
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        builder0.log = log6;
        java.util.concurrent.Executor executor8 = builder0.gethttpExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter9 = builder0.serializedObjectSupporter;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(serializedObjectSupporter9);
    }

    @Test
    public void test1676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1676");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = null;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel13);
        builder0.logLevel = logLevel13;
        java.util.concurrent.Executor executor16 = builder0.httpExecutor;
        retrofit.RestAdapter.Log log17 = null;
        builder0.log = log17;
        retrofit.SerializedObjectSupporter serializedObjectSupporter19 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor20 = serializedObjectSupporter19.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter21 = serializedObjectSupporter19.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter19.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter23 = serializedObjectSupporter19.deserializeObjectConverter8();
        retrofit.mime.TypedString typedString24 = serializedObjectSupporter19.deserializeObjectTypedOutput2();
        java.lang.String str25 = serializedObjectSupporter19.deserializeObjectString2();
        builder0.serializedObjectSupporter = serializedObjectSupporter19;
        retrofit.client.Request request27 = serializedObjectSupporter19.deserializeObjectRequest5();
        java.lang.String str28 = serializedObjectSupporter19.deserializeObjectString2();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter29 = serializedObjectSupporter19.deserializeObjectLogLevel3();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNotNull(requestInterceptor20);
        org.junit.Assert.assertNotNull(gsonConverter21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(gsonConverter23);
        org.junit.Assert.assertNotNull(typedString24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Retrofit-Idle" + "'", str25, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(request27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Retrofit-Idle" + "'", str28, "Retrofit-Idle");
    }

    @Test
    public void test1677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1677");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        java.lang.String str14 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter10.getrequestInterceptor();
        retrofit.client.Client.Provider provider16 = restAdapter10.clientProvider;
        retrofit.RequestInterceptor requestInterceptor17 = restAdapter10.getrequestInterceptor();
        retrofit.converter.Converter converter18 = restAdapter10.converter;
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter10.getLogLevel();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Retrofit-Idle" + "'", str14, "Retrofit-Idle");
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNull(provider16);
        org.junit.Assert.assertNull(requestInterceptor17);
        org.junit.Assert.assertNull(converter18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test1678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1678");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = builder0.profiler;
        retrofit.client.Client.Provider provider4 = builder0.clientProvider;
        java.util.concurrent.Executor executor5 = null;
        builder0.httpExecutor = executor5;
        retrofit.Server server7 = builder0.server;
        java.util.concurrent.Executor executor8 = builder0.callbackExecutor;
        retrofit.Server server9 = builder0.server;
        java.util.concurrent.Executor executor10 = builder0.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor11 = builder0.requestInterceptor;
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(provider4);
        org.junit.Assert.assertNull(server7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(server9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(requestInterceptor11);
    }

    @Test
    public void test1679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1679");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        java.util.concurrent.Executor executor5 = builder0.callbackExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter6.deserializeObjectConverter5();
        retrofit.RestAdapter.Builder builder10 = builder0.setConverter((retrofit.converter.Converter) gsonConverter9);
        retrofit.converter.Converter converter11 = builder10.converter;
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(gsonConverter9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(converter11);
    }

    @Test
    public void test1680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1680");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.client.Request request9 = serializedObjectSupporter6.deserializeObjectRequest1();
        builder0.serializedObjectSupporter = serializedObjectSupporter6;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = null;
        builder11.sethttpExecutor(executor12);
        retrofit.Profiler profiler14 = null;
        builder11.profiler = profiler14;
        retrofit.Server server16 = builder11.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter17.deserializeObjectConverter7();
        retrofit.client.Request request20 = serializedObjectSupporter17.deserializeObjectRequest1();
        builder11.serializedObjectSupporter = serializedObjectSupporter17;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor23 = null;
        builder22.sethttpExecutor(executor23);
        retrofit.Profiler profiler25 = null;
        builder22.profiler = profiler25;
        retrofit.Server server27 = builder22.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter28 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor29 = serializedObjectSupporter28.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter30 = serializedObjectSupporter28.deserializeObjectConverter7();
        retrofit.client.Request request31 = serializedObjectSupporter28.deserializeObjectRequest1();
        builder22.serializedObjectSupporter = serializedObjectSupporter28;
        java.lang.String str33 = serializedObjectSupporter28.deserializeObjectString2();
        retrofit.ErrorHandler errorHandler34 = serializedObjectSupporter28.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder35 = builder11.setErrorHandler(errorHandler34);
        retrofit.RestAdapter.Builder builder36 = builder0.setErrorHandler(errorHandler34);
        retrofit.client.Client.Provider provider37 = builder36.clientProvider;
        retrofit.RestAdapter.Builder builder39 = builder36.setServer("http://example.com/");
        builder39.ensureSaneDefaults();
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertNull(server27);
        org.junit.Assert.assertNotNull(requestInterceptor29);
        org.junit.Assert.assertNotNull(gsonConverter30);
        org.junit.Assert.assertNotNull(request31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Retrofit-Idle" + "'", str33, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(provider37);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test1681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1681");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.SerializedObjectSupporter serializedObjectSupporter5 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor6 = serializedObjectSupporter5.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder7 = builder2.setRequestInterceptor(requestInterceptor6);
        retrofit.client.Client.Provider provider8 = null;
        builder2.clientProvider = provider8;
        retrofit.SerializedObjectSupporter serializedObjectSupporter10 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor11 = serializedObjectSupporter10.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter12 = serializedObjectSupporter10.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter13 = serializedObjectSupporter10.deserializeObjectConverter5();
        retrofit.client.Request request14 = serializedObjectSupporter10.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter15 = serializedObjectSupporter10.deserializeObjectConverter3();
        retrofit.client.Request request16 = serializedObjectSupporter10.deserializeObjectRequest4();
        retrofit.client.Request request17 = serializedObjectSupporter10.deserializeObjectRequest2();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter10.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder19 = builder2.setRequestInterceptor(requestInterceptor18);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(gsonConverter12);
        org.junit.Assert.assertNotNull(gsonConverter13);
        org.junit.Assert.assertNotNull(request14);
        org.junit.Assert.assertNotNull(gsonConverter15);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test1682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1682");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.converter.Converter converter3 = builder2.converter;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor5 = null;
        builder4.sethttpExecutor(executor5);
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = null;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel16);
        retrofit.ErrorHandler errorHandler18 = restAdapter17.errorHandler;
        int int19 = restAdapter17.getLOG_CHUNK_SIZE();
        retrofit.Server server20 = restAdapter17.getserver();
        retrofit.Server server21 = null;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = null;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel30);
        restAdapter17.logLevel = logLevel30;
        builder4.logLevel = logLevel30;
        retrofit.RestAdapter.Builder builder34 = builder2.setLogLevel(logLevel30);
        builder34.ensureSaneDefaults();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4000 + "'", int19 == 4000);
        org.junit.Assert.assertNull(server20);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test1683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1683");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter10.logLevel;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter14 = restAdapter10.serializedObjectSupporter;
        retrofit.RestAdapter.LogLevel logLevel15 = restAdapter10.getLogLevel();
        java.util.concurrent.Executor executor16 = restAdapter10.callbackExecutor;
        retrofit.client.Response response18 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response20 = restAdapter10.logAndReplaceResponse("POST", response18, (long) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(serializedObjectSupporter14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(executor16);
    }

    @Test
    public void test1684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1684");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder7 = builder5.setServer("hi!");
        retrofit.client.Client.Provider provider8 = builder5.clientProvider;
        java.util.concurrent.Executor executor9 = null;
        builder5.setcallbackExecutor(executor9);
        retrofit.RestAdapter.Log log11 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder12 = builder5.setLog(log11);
        retrofit.RestAdapter.Builder builder13 = builder0.setLog(log11);
        java.util.concurrent.Executor executor14 = builder13.gethttpExecutor();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNotNull(log11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(executor14);
    }

    @Test
    public void test1685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1685");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest8();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter6();
        retrofit.client.Request request6 = serializedObjectSupporter0.deserializeObjectRequest8();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(request6);
        org.junit.Assert.assertNotNull(requestInterceptor7);
    }

    @Test
    public void test1686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1686");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler2 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest8();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest2();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(errorHandler2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(request5);
    }

    @Test
    public void test1687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1687");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = builder0.profiler;
        retrofit.client.Client.Provider provider4 = builder0.clientProvider;
        retrofit.SerializedObjectSupporter serializedObjectSupporter5 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter5.deserializeObjectConverter2();
        retrofit.client.Request request7 = serializedObjectSupporter5.deserializeObjectRequest7();
        retrofit.client.Request request8 = serializedObjectSupporter5.deserializeObjectRequest2();
        retrofit.client.Request request9 = serializedObjectSupporter5.deserializeObjectRequest3();
        java.lang.String str10 = serializedObjectSupporter5.deserializeObjectString4();
        builder0.serializedObjectSupporter = serializedObjectSupporter5;
        retrofit.Server server12 = serializedObjectSupporter5.deserializeObjectServer1();
        retrofit.converter.GsonConverter gsonConverter13 = serializedObjectSupporter5.deserializeObjectConverter2();
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter5.deserializeObjectConverter8();
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(provider4);
        org.junit.Assert.assertNotNull(gsonConverter6);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(request8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "http://example.com/" + "'", str10, "http://example.com/");
        org.junit.Assert.assertNotNull(server12);
        org.junit.Assert.assertNotNull(gsonConverter13);
        org.junit.Assert.assertNotNull(gsonConverter14);
    }

    @Test
    public void test1688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1688");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.RestAdapter restAdapter5 = builder2.build();
        retrofit.RestAdapter.Log log6 = restAdapter5.log;
        java.lang.String str7 = restAdapter5.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler8 = restAdapter5.geterrorHandler();
        retrofit.RequestInterceptor requestInterceptor9 = restAdapter5.getrequestInterceptor();
        retrofit.client.Client.Provider provider10 = restAdapter5.getclientProvider();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(restAdapter5);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Retrofit-Idle" + "'", str7, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler8);
        org.junit.Assert.assertNotNull(requestInterceptor9);
        org.junit.Assert.assertNotNull(provider10);
    }

    @Test
    public void test1689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1689");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        java.util.concurrent.Executor executor5 = builder0.callbackExecutor;
        retrofit.ErrorHandler errorHandler6 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.sethttpExecutor(executor8);
        retrofit.Profiler profiler10 = null;
        builder7.profiler = profiler10;
        retrofit.Server server12 = builder7.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor14 = serializedObjectSupporter13.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter15 = serializedObjectSupporter13.deserializeObjectConverter7();
        retrofit.client.Request request16 = serializedObjectSupporter13.deserializeObjectRequest1();
        builder7.serializedObjectSupporter = serializedObjectSupporter13;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor19 = null;
        builder18.sethttpExecutor(executor19);
        retrofit.Profiler profiler21 = null;
        builder18.profiler = profiler21;
        retrofit.Server server23 = builder18.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor25 = serializedObjectSupporter24.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter26 = serializedObjectSupporter24.deserializeObjectConverter7();
        retrofit.client.Request request27 = serializedObjectSupporter24.deserializeObjectRequest1();
        builder18.serializedObjectSupporter = serializedObjectSupporter24;
        java.lang.String str29 = serializedObjectSupporter24.deserializeObjectString2();
        retrofit.ErrorHandler errorHandler30 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder31 = builder7.setErrorHandler(errorHandler30);
        retrofit.RestAdapter.Builder builder32 = builder0.setErrorHandler(errorHandler30);
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder35 = builder33.setServer("hi!");
        retrofit.client.Client.Provider provider36 = builder33.clientProvider;
        java.util.concurrent.Executor executor37 = null;
        builder33.setcallbackExecutor(executor37);
        retrofit.RestAdapter.Log log39 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder40 = builder33.setLog(log39);
        log39.log("hi!");
        retrofit.RestAdapter.Builder builder43 = builder0.setLog(log39);
        retrofit.client.Client client44 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder45 = builder0.setClient(client44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNotNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(gsonConverter15);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNull(server23);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNotNull(gsonConverter26);
        org.junit.Assert.assertNotNull(request27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Retrofit-Idle" + "'", str29, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(provider36);
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test1690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1690");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter6();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest8();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter6 = serializedObjectSupporter0.deserializeObjectLogLevel2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(request5);
    }

    @Test
    public void test1691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1691");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        java.util.concurrent.Executor executor5 = builder0.callbackExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter6.deserializeObjectConverter5();
        retrofit.RestAdapter.Builder builder10 = builder0.setConverter((retrofit.converter.Converter) gsonConverter9);
        retrofit.ErrorHandler errorHandler11 = builder10.errorHandler;
        retrofit.client.Client.Provider provider12 = builder10.getclientProvider();
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = null;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel22);
        retrofit.ErrorHandler errorHandler24 = restAdapter23.errorHandler;
        int int25 = restAdapter23.getLOG_CHUNK_SIZE();
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = null;
        restAdapter23.serializedObjectSupporter = serializedObjectSupporter26;
        retrofit.client.Client.Provider provider28 = restAdapter23.getclientProvider();
        retrofit.ErrorHandler errorHandler29 = restAdapter23.geterrorHandler();
        retrofit.RestAdapter.Log log30 = restAdapter23.log;
        java.util.concurrent.Executor executor31 = restAdapter23.gethttpExecutor();
        retrofit.client.Client.Provider provider32 = restAdapter23.getclientProvider();
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter23.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder35 = builder10.setLogLevel(logLevel33);
        boolean boolean36 = logLevel33.log();
        boolean boolean37 = logLevel33.log();
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(gsonConverter9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4000 + "'", int25 == 4000);
        org.junit.Assert.assertNull(provider28);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNull(log30);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNull(provider32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test1692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1692");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        java.lang.String str13 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        retrofit.ErrorHandler errorHandler25 = restAdapter24.errorHandler;
        int int26 = restAdapter24.getLOG_CHUNK_SIZE();
        retrofit.RestAdapter.Log log27 = restAdapter24.log;
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter24.getLogLevel();
        restAdapter10.logLevel = logLevel28;
        retrofit.ErrorHandler errorHandler30 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler31 = restAdapter10.errorHandler;
        java.lang.String str32 = restAdapter10.getIDLE_THREAD_NAME();
        java.lang.String str33 = restAdapter10.getTHREAD_PREFIX();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-Idle" + "'", str13, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4000 + "'", int26 == 4000);
        org.junit.Assert.assertNull(log27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler30);
        org.junit.Assert.assertNull(errorHandler31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Retrofit-Idle" + "'", str32, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Retrofit-" + "'", str33, "Retrofit-");
    }

    @Test
    public void test1693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1693");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = null;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter13;
        retrofit.client.Client.Provider provider15 = restAdapter10.getclientProvider();
        retrofit.ErrorHandler errorHandler16 = restAdapter10.geterrorHandler();
        retrofit.RestAdapter.Log log17 = restAdapter10.log;
        java.util.concurrent.Executor executor18 = restAdapter10.gethttpExecutor();
        retrofit.client.Client.Provider provider19 = restAdapter10.getclientProvider();
        retrofit.client.Client.Provider provider20 = restAdapter10.clientProvider;
        retrofit.converter.Converter converter21 = restAdapter10.getconverter();
        java.util.concurrent.Executor executor22 = restAdapter10.httpExecutor;
        retrofit.converter.Converter converter23 = restAdapter10.getconverter();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNull(log17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(provider19);
        org.junit.Assert.assertNull(provider20);
        org.junit.Assert.assertNull(converter21);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(converter23);
    }

    @Test
    public void test1694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1694");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.Profiler profiler15 = restAdapter10.profiler;
        retrofit.converter.Converter converter16 = restAdapter10.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter17.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter17.deserializeObjectConverter4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter17;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter10.setLogLevel(logLevel22);
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter10.logLevel;
        retrofit.converter.Converter converter25 = restAdapter10.getconverter();
        java.util.concurrent.Executor executor26 = restAdapter10.httpExecutor;
        java.lang.Throwable throwable27 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter10.logException(throwable27, "http://example.com/");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(converter25);
        org.junit.Assert.assertNull(executor26);
    }

    @Test
    public void test1695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1695");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RestAdapter.Log log4 = null;
        builder0.log = log4;
        java.util.concurrent.Executor executor6 = builder0.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = builder7.getcallbackExecutor();
        retrofit.client.Client.Provider provider9 = null;
        builder7.clientProvider = provider9;
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor12 = serializedObjectSupporter11.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter13 = serializedObjectSupporter11.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter11.deserializeObjectConverter5();
        retrofit.client.Request request15 = serializedObjectSupporter11.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter11.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter11.deserializeObjectConverter6();
        retrofit.RestAdapter.Builder builder18 = builder7.setConverter((retrofit.converter.Converter) gsonConverter17);
        builder0.converter = gsonConverter17;
        retrofit.ErrorHandler errorHandler20 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder23 = builder21.setServer("hi!");
        java.util.concurrent.Executor executor24 = null;
        builder23.callbackExecutor = executor24;
        retrofit.RestAdapter restAdapter26 = builder23.build();
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor28 = null;
        builder27.sethttpExecutor(executor28);
        retrofit.Profiler profiler30 = null;
        builder27.profiler = profiler30;
        retrofit.RestAdapter.Log log32 = builder27.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter33 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler34 = serializedObjectSupporter33.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder35 = builder27.setErrorHandler(errorHandler34);
        retrofit.RestAdapter.Builder builder36 = builder23.setErrorHandler(errorHandler34);
        java.util.concurrent.Executor executor37 = builder36.callbackExecutor;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor39 = null;
        builder38.sethttpExecutor(executor39);
        retrofit.Profiler profiler41 = null;
        builder38.profiler = profiler41;
        retrofit.Server server43 = builder38.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter44 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor45 = serializedObjectSupporter44.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter46 = serializedObjectSupporter44.deserializeObjectConverter7();
        retrofit.client.Request request47 = serializedObjectSupporter44.deserializeObjectRequest1();
        builder38.serializedObjectSupporter = serializedObjectSupporter44;
        java.lang.String str49 = serializedObjectSupporter44.deserializeObjectString2();
        retrofit.ErrorHandler errorHandler50 = serializedObjectSupporter44.deserializeObjectErrorHandler1();
        builder36.errorHandler = errorHandler50;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder54 = builder52.setServer("hi!");
        retrofit.client.Client.Provider provider55 = builder52.clientProvider;
        retrofit.RestAdapter.Log log56 = null;
        builder52.log = log56;
        java.util.concurrent.Executor executor58 = builder52.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor60 = builder59.getcallbackExecutor();
        retrofit.client.Client.Provider provider61 = null;
        builder59.clientProvider = provider61;
        retrofit.SerializedObjectSupporter serializedObjectSupporter63 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor64 = serializedObjectSupporter63.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter65 = serializedObjectSupporter63.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter66 = serializedObjectSupporter63.deserializeObjectConverter5();
        retrofit.client.Request request67 = serializedObjectSupporter63.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter68 = serializedObjectSupporter63.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter69 = serializedObjectSupporter63.deserializeObjectConverter6();
        retrofit.RestAdapter.Builder builder70 = builder59.setConverter((retrofit.converter.Converter) gsonConverter69);
        builder52.converter = gsonConverter69;
        retrofit.ErrorHandler errorHandler72 = builder52.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter73 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler74 = serializedObjectSupporter73.deserializeObjectErrorHandler1();
        retrofit.Server server75 = serializedObjectSupporter73.deserializeObjectServer1();
        builder52.server = server75;
        retrofit.RestAdapter.Builder builder77 = builder36.setServer(server75);
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor79 = builder78.getcallbackExecutor();
        retrofit.client.Client.Provider provider80 = null;
        builder78.clientProvider = provider80;
        retrofit.Server server82 = null;
        builder78.server = server82;
        retrofit.RestAdapter.Log log84 = retrofit.RestAdapter.Log.NONE;
        builder78.log = log84;
        log84.log("hi!");
        builder36.log = log84;
        java.util.concurrent.Executor executor89 = builder36.callbackExecutor;
        builder0.setcallbackExecutor(executor89);
        retrofit.Server server91 = builder0.server;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNotNull(requestInterceptor12);
        org.junit.Assert.assertNotNull(gsonConverter13);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(gsonConverter16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(restAdapter26);
        org.junit.Assert.assertNull(log32);
        org.junit.Assert.assertNotNull(errorHandler34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(executor37);
        org.junit.Assert.assertNull(server43);
        org.junit.Assert.assertNotNull(requestInterceptor45);
        org.junit.Assert.assertNotNull(gsonConverter46);
        org.junit.Assert.assertNotNull(request47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Retrofit-Idle" + "'", str49, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler50);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(provider55);
        org.junit.Assert.assertNull(executor58);
        org.junit.Assert.assertNull(executor60);
        org.junit.Assert.assertNotNull(requestInterceptor64);
        org.junit.Assert.assertNotNull(gsonConverter65);
        org.junit.Assert.assertNotNull(gsonConverter66);
        org.junit.Assert.assertNotNull(request67);
        org.junit.Assert.assertNotNull(gsonConverter68);
        org.junit.Assert.assertNotNull(gsonConverter69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(errorHandler72);
        org.junit.Assert.assertNotNull(errorHandler74);
        org.junit.Assert.assertNotNull(server75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNull(executor79);
        org.junit.Assert.assertNotNull(log84);
        org.junit.Assert.assertNotNull(executor89);
        org.junit.Assert.assertNotNull(server91);
    }

    @Test
    public void test1696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1696");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.util.concurrent.Executor executor11 = restAdapter10.getcallbackExecutor();
        retrofit.ErrorHandler errorHandler12 = restAdapter10.geterrorHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor14 = serializedObjectSupporter13.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter15 = serializedObjectSupporter13.deserializeObjectConverter7();
        retrofit.client.Request request16 = serializedObjectSupporter13.deserializeObjectRequest2();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter13.deserializeObjectConverter6();
        retrofit.client.Request request18 = serializedObjectSupporter13.deserializeObjectRequest8();
        java.lang.String str19 = serializedObjectSupporter13.deserializeObjectString3();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter13;
        retrofit.SerializedObjectSupporter serializedObjectSupporter21 = restAdapter10.serializedObjectSupporter;
        retrofit.Server server22 = restAdapter10.server;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNotNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(gsonConverter15);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertNotNull(request18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "GET" + "'", str19, "GET");
        org.junit.Assert.assertNotNull(serializedObjectSupporter21);
        org.junit.Assert.assertNull(server22);
    }

    @Test
    public void test1697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1697");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder7 = builder5.setServer("hi!");
        java.util.concurrent.Executor executor8 = null;
        builder7.callbackExecutor = executor8;
        retrofit.RestAdapter restAdapter10 = builder7.build();
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = null;
        builder11.sethttpExecutor(executor12);
        retrofit.Profiler profiler14 = null;
        builder11.profiler = profiler14;
        retrofit.RestAdapter.Log log16 = builder11.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler18 = serializedObjectSupporter17.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder19 = builder11.setErrorHandler(errorHandler18);
        retrofit.RestAdapter.Builder builder20 = builder7.setErrorHandler(errorHandler18);
        java.util.concurrent.Executor executor21 = builder20.callbackExecutor;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor23 = null;
        builder22.sethttpExecutor(executor23);
        retrofit.Profiler profiler25 = null;
        builder22.profiler = profiler25;
        retrofit.Server server27 = builder22.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter28 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor29 = serializedObjectSupporter28.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter30 = serializedObjectSupporter28.deserializeObjectConverter7();
        retrofit.client.Request request31 = serializedObjectSupporter28.deserializeObjectRequest1();
        builder22.serializedObjectSupporter = serializedObjectSupporter28;
        java.lang.String str33 = serializedObjectSupporter28.deserializeObjectString2();
        retrofit.ErrorHandler errorHandler34 = serializedObjectSupporter28.deserializeObjectErrorHandler1();
        builder20.errorHandler = errorHandler34;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder38 = builder36.setServer("hi!");
        retrofit.client.Client.Provider provider39 = builder36.clientProvider;
        retrofit.RestAdapter.Log log40 = null;
        builder36.log = log40;
        java.util.concurrent.Executor executor42 = builder36.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor44 = builder43.getcallbackExecutor();
        retrofit.client.Client.Provider provider45 = null;
        builder43.clientProvider = provider45;
        retrofit.SerializedObjectSupporter serializedObjectSupporter47 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor48 = serializedObjectSupporter47.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter49 = serializedObjectSupporter47.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter50 = serializedObjectSupporter47.deserializeObjectConverter5();
        retrofit.client.Request request51 = serializedObjectSupporter47.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter52 = serializedObjectSupporter47.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter53 = serializedObjectSupporter47.deserializeObjectConverter6();
        retrofit.RestAdapter.Builder builder54 = builder43.setConverter((retrofit.converter.Converter) gsonConverter53);
        builder36.converter = gsonConverter53;
        retrofit.ErrorHandler errorHandler56 = builder36.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter57 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler58 = serializedObjectSupporter57.deserializeObjectErrorHandler1();
        retrofit.Server server59 = serializedObjectSupporter57.deserializeObjectServer1();
        builder36.server = server59;
        retrofit.RestAdapter.Builder builder61 = builder20.setServer(server59);
        retrofit.RequestInterceptor requestInterceptor62 = builder20.requestInterceptor;
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder64 = builder20.setLog(log63);
        retrofit.RestAdapter.Builder builder65 = builder0.setLog(log63);
        java.util.concurrent.Executor executor66 = builder0.callbackExecutor;
        java.util.concurrent.Executor executor67 = builder0.getcallbackExecutor();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(restAdapter10);
        org.junit.Assert.assertNull(log16);
        org.junit.Assert.assertNotNull(errorHandler18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(executor21);
        org.junit.Assert.assertNull(server27);
        org.junit.Assert.assertNotNull(requestInterceptor29);
        org.junit.Assert.assertNotNull(gsonConverter30);
        org.junit.Assert.assertNotNull(request31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Retrofit-Idle" + "'", str33, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler34);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(provider39);
        org.junit.Assert.assertNull(executor42);
        org.junit.Assert.assertNull(executor44);
        org.junit.Assert.assertNotNull(requestInterceptor48);
        org.junit.Assert.assertNotNull(gsonConverter49);
        org.junit.Assert.assertNotNull(gsonConverter50);
        org.junit.Assert.assertNotNull(request51);
        org.junit.Assert.assertNotNull(gsonConverter52);
        org.junit.Assert.assertNotNull(gsonConverter53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(errorHandler56);
        org.junit.Assert.assertNotNull(errorHandler58);
        org.junit.Assert.assertNotNull(server59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(requestInterceptor62);
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(executor66);
        org.junit.Assert.assertNull(executor67);
    }

    @Test
    public void test1698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1698");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = null;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter13;
        retrofit.client.Client.Provider provider15 = restAdapter10.getclientProvider();
        retrofit.ErrorHandler errorHandler16 = restAdapter10.geterrorHandler();
        retrofit.client.Client.Provider provider17 = restAdapter10.getclientProvider();
        java.lang.String str18 = restAdapter10.getTHREAD_PREFIX();
        java.util.concurrent.Executor executor19 = restAdapter10.getcallbackExecutor();
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter10.getLogLevel();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNull(provider17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Retrofit-" + "'", str18, "Retrofit-");
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test1699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1699");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter10.logLevel;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        retrofit.converter.Converter converter14 = restAdapter10.converter;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor16 = null;
        builder15.sethttpExecutor(executor16);
        retrofit.converter.Converter converter18 = builder15.converter;
        java.util.concurrent.Executor executor19 = builder15.getcallbackExecutor();
        retrofit.client.Client.Provider provider20 = builder15.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter21 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request22 = serializedObjectSupporter21.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler23 = serializedObjectSupporter21.deserializeObjectErrorHandler1();
        builder15.errorHandler = errorHandler23;
        retrofit.converter.Converter converter25 = builder15.converter;
        java.util.concurrent.Executor executor26 = builder15.callbackExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter27 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor28 = serializedObjectSupporter27.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter29 = serializedObjectSupporter27.deserializeObjectConverter8();
        java.lang.String str30 = serializedObjectSupporter27.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter31 = serializedObjectSupporter27.deserializeObjectConverter4();
        builder15.serializedObjectSupporter = serializedObjectSupporter27;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter27;
        java.lang.String str34 = restAdapter10.getIDLE_THREAD_NAME();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(converter18);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(provider20);
        org.junit.Assert.assertNotNull(request22);
        org.junit.Assert.assertNotNull(errorHandler23);
        org.junit.Assert.assertNull(converter25);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNotNull(requestInterceptor28);
        org.junit.Assert.assertNotNull(gsonConverter29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Retrofit-Idle" + "'", str30, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Retrofit-Idle" + "'", str34, "Retrofit-Idle");
    }

    @Test
    public void test1700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1700");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter2();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter4();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Retrofit-Idle" + "'", str1, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(gsonConverter4);
    }

    @Test
    public void test1701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1701");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.RestAdapter restAdapter5 = builder2.build();
        retrofit.RestAdapter.Log log6 = restAdapter5.log;
        retrofit.converter.Converter converter7 = restAdapter5.getconverter();
        retrofit.RestAdapter.RestHandler restHandler8 = restAdapter5.new RestHandler();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(restAdapter5);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertNotNull(converter7);
    }

    @Test
    public void test1702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1702");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider5 = builder0.getclientProvider();
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("hi!");
        java.util.concurrent.Executor executor9 = null;
        builder8.callbackExecutor = executor9;
        retrofit.RestAdapter restAdapter11 = builder8.build();
        retrofit.RestAdapter.Log log12 = restAdapter11.log;
        java.util.concurrent.Executor executor13 = restAdapter11.gethttpExecutor();
        retrofit.client.Client.Provider provider14 = restAdapter11.getclientProvider();
        builder0.setclientProvider(provider14);
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor17 = null;
        builder16.sethttpExecutor(executor17);
        retrofit.converter.Converter converter19 = builder16.converter;
        java.util.concurrent.Executor executor20 = builder16.getcallbackExecutor();
        retrofit.client.Client.Provider provider21 = builder16.getclientProvider();
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor23 = null;
        builder22.sethttpExecutor(executor23);
        retrofit.Profiler profiler25 = null;
        builder22.profiler = profiler25;
        retrofit.RestAdapter.LogLevel logLevel27 = builder22.logLevel;
        java.util.concurrent.Executor executor28 = null;
        builder22.sethttpExecutor(executor28);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder32 = builder30.setServer("hi!");
        java.util.concurrent.Executor executor33 = null;
        builder32.callbackExecutor = executor33;
        retrofit.SerializedObjectSupporter serializedObjectSupporter35 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor36 = serializedObjectSupporter35.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder37 = builder32.setRequestInterceptor(requestInterceptor36);
        retrofit.RestAdapter.Builder builder38 = builder22.setRequestInterceptor(requestInterceptor36);
        java.util.concurrent.Executor executor39 = builder38.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter40 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor41 = serializedObjectSupporter40.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter42 = serializedObjectSupporter40.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter43 = serializedObjectSupporter40.deserializeObjectConverter7();
        retrofit.Server server44 = serializedObjectSupporter40.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder45 = builder38.setServer(server44);
        java.util.concurrent.Executor executor46 = null;
        builder45.sethttpExecutor(executor46);
        retrofit.Server server48 = builder45.server;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder51 = builder49.setServer("hi!");
        java.util.concurrent.Executor executor52 = null;
        builder51.callbackExecutor = executor52;
        retrofit.RestAdapter restAdapter54 = builder51.build();
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor56 = null;
        builder55.sethttpExecutor(executor56);
        retrofit.Profiler profiler58 = null;
        builder55.profiler = profiler58;
        retrofit.RestAdapter.Log log60 = builder55.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter61 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler62 = serializedObjectSupporter61.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder63 = builder55.setErrorHandler(errorHandler62);
        retrofit.RestAdapter.Builder builder64 = builder51.setErrorHandler(errorHandler62);
        java.util.concurrent.Executor executor65 = builder64.callbackExecutor;
        builder45.callbackExecutor = executor65;
        builder16.sethttpExecutor(executor65);
        builder0.httpExecutor = executor65;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor70 = builder69.getcallbackExecutor();
        retrofit.client.Client.Provider provider71 = null;
        builder69.clientProvider = provider71;
        retrofit.Server server73 = null;
        retrofit.client.Client.Provider provider74 = null;
        java.util.concurrent.Executor executor75 = null;
        java.util.concurrent.Executor executor76 = null;
        retrofit.RequestInterceptor requestInterceptor77 = null;
        retrofit.converter.Converter converter78 = null;
        retrofit.Profiler profiler79 = null;
        retrofit.ErrorHandler errorHandler80 = null;
        retrofit.RestAdapter.Log log81 = null;
        retrofit.RestAdapter.LogLevel logLevel82 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter83 = new retrofit.RestAdapter(server73, provider74, executor75, executor76, requestInterceptor77, converter78, profiler79, errorHandler80, log81, logLevel82);
        builder69.logLevel = logLevel82;
        java.util.concurrent.Executor executor85 = builder69.httpExecutor;
        retrofit.RestAdapter.Log log86 = null;
        builder69.log = log86;
        retrofit.SerializedObjectSupporter serializedObjectSupporter88 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor89 = serializedObjectSupporter88.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter90 = serializedObjectSupporter88.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter91 = serializedObjectSupporter88.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter92 = serializedObjectSupporter88.deserializeObjectConverter8();
        retrofit.mime.TypedString typedString93 = serializedObjectSupporter88.deserializeObjectTypedOutput2();
        java.lang.String str94 = serializedObjectSupporter88.deserializeObjectString2();
        builder69.serializedObjectSupporter = serializedObjectSupporter88;
        retrofit.client.Request request96 = serializedObjectSupporter88.deserializeObjectRequest5();
        retrofit.RequestInterceptor requestInterceptor97 = serializedObjectSupporter88.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder98 = builder0.setRequestInterceptor(requestInterceptor97);
        retrofit.RequestInterceptor requestInterceptor99 = builder98.requestInterceptor;
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(restAdapter11);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNotNull(executor13);
        org.junit.Assert.assertNotNull(provider14);
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(provider21);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(requestInterceptor36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNotNull(requestInterceptor41);
        org.junit.Assert.assertNotNull(gsonConverter42);
        org.junit.Assert.assertNotNull(gsonConverter43);
        org.junit.Assert.assertNotNull(server44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(server48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(restAdapter54);
        org.junit.Assert.assertNull(log60);
        org.junit.Assert.assertNotNull(errorHandler62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(executor65);
        org.junit.Assert.assertNull(executor70);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(executor85);
        org.junit.Assert.assertNotNull(requestInterceptor89);
        org.junit.Assert.assertNotNull(gsonConverter90);
        org.junit.Assert.assertNotNull(gsonConverter91);
        org.junit.Assert.assertNotNull(gsonConverter92);
        org.junit.Assert.assertNotNull(typedString93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "Retrofit-Idle" + "'", str94, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(request96);
        org.junit.Assert.assertNotNull(requestInterceptor97);
        org.junit.Assert.assertNotNull(builder98);
        org.junit.Assert.assertNotNull(requestInterceptor99);
    }

    @Test
    public void test1703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1703");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.RestAdapter.Builder builder7 = builder0.setServer("Retrofit-Idle");
        retrofit.client.Client.Provider provider8 = builder7.clientProvider;
        retrofit.RequestInterceptor requestInterceptor9 = builder7.requestInterceptor;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder12 = builder10.setServer("hi!");
        java.util.concurrent.Executor executor13 = null;
        builder12.callbackExecutor = executor13;
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor16 = serializedObjectSupporter15.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder17 = builder12.setRequestInterceptor(requestInterceptor16);
        retrofit.Server server18 = builder17.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter19 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler20 = serializedObjectSupporter19.deserializeObjectErrorHandler1();
        builder17.serializedObjectSupporter = serializedObjectSupporter19;
        retrofit.Profiler profiler22 = null;
        builder17.profiler = profiler22;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor25 = serializedObjectSupporter24.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter26 = serializedObjectSupporter24.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter27 = serializedObjectSupporter24.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter24.deserializeObjectConverter8();
        java.lang.String str29 = serializedObjectSupporter24.deserializeObjectString4();
        java.lang.String str30 = serializedObjectSupporter24.deserializeObjectString3();
        retrofit.converter.GsonConverter gsonConverter31 = serializedObjectSupporter24.deserializeObjectConverter6();
        retrofit.RestAdapter.Builder builder32 = builder17.setConverter((retrofit.converter.Converter) gsonConverter31);
        retrofit.client.Client.Provider provider33 = builder32.getclientProvider();
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor35 = null;
        builder34.sethttpExecutor(executor35);
        retrofit.Profiler profiler37 = null;
        builder34.profiler = profiler37;
        retrofit.Server server39 = builder34.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter40 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor41 = serializedObjectSupporter40.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter42 = serializedObjectSupporter40.deserializeObjectConverter7();
        retrofit.client.Request request43 = serializedObjectSupporter40.deserializeObjectRequest1();
        builder34.serializedObjectSupporter = serializedObjectSupporter40;
        builder34.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder48 = builder46.setServer("hi!");
        java.util.concurrent.Executor executor49 = null;
        builder48.callbackExecutor = executor49;
        retrofit.RestAdapter restAdapter51 = builder48.build();
        retrofit.RestAdapter.Log log52 = restAdapter51.log;
        java.util.concurrent.Executor executor53 = restAdapter51.gethttpExecutor();
        retrofit.client.Client.Provider provider54 = restAdapter51.getclientProvider();
        builder34.setclientProvider(provider54);
        builder32.setclientProvider(provider54);
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor58 = builder57.getcallbackExecutor();
        retrofit.client.Client.Provider provider59 = null;
        builder57.clientProvider = provider59;
        java.util.concurrent.Executor executor61 = builder57.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter62 = new retrofit.SerializedObjectSupporter();
        java.lang.String str63 = serializedObjectSupporter62.deserializeObjectString2();
        java.lang.String str64 = serializedObjectSupporter62.deserializeObjectString1();
        retrofit.RequestInterceptor requestInterceptor65 = serializedObjectSupporter62.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder66 = builder57.setRequestInterceptor(requestInterceptor65);
        retrofit.ErrorHandler errorHandler67 = builder66.errorHandler;
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder70 = builder68.setServer("hi!");
        java.util.concurrent.Executor executor71 = null;
        builder70.callbackExecutor = executor71;
        retrofit.SerializedObjectSupporter serializedObjectSupporter73 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor74 = serializedObjectSupporter73.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder75 = builder70.setRequestInterceptor(requestInterceptor74);
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder78 = builder76.setServer("hi!");
        java.util.concurrent.Executor executor79 = null;
        builder78.callbackExecutor = executor79;
        retrofit.RestAdapter restAdapter81 = builder78.build();
        retrofit.RestAdapter.Log log82 = restAdapter81.log;
        java.lang.String str83 = restAdapter81.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler84 = restAdapter81.geterrorHandler();
        retrofit.client.Client.Provider provider85 = restAdapter81.getclientProvider();
        builder70.setclientProvider(provider85);
        builder66.setclientProvider(provider85);
        builder32.clientProvider = provider85;
        retrofit.RestAdapter.Builder builder89 = builder7.setClient(provider85);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNull(requestInterceptor9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(requestInterceptor16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(server18);
        org.junit.Assert.assertNotNull(errorHandler20);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNotNull(gsonConverter26);
        org.junit.Assert.assertNotNull(gsonConverter27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "http://example.com/" + "'", str29, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "GET" + "'", str30, "GET");
        org.junit.Assert.assertNotNull(gsonConverter31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(provider33);
        org.junit.Assert.assertNull(server39);
        org.junit.Assert.assertNotNull(requestInterceptor41);
        org.junit.Assert.assertNotNull(gsonConverter42);
        org.junit.Assert.assertNotNull(request43);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(restAdapter51);
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNotNull(executor53);
        org.junit.Assert.assertNotNull(provider54);
        org.junit.Assert.assertNull(executor58);
        org.junit.Assert.assertNull(executor61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Retrofit-Idle" + "'", str63, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Retrofit-" + "'", str64, "Retrofit-");
        org.junit.Assert.assertNotNull(requestInterceptor65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(errorHandler67);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(requestInterceptor74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(restAdapter81);
        org.junit.Assert.assertNotNull(log82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Retrofit-Idle" + "'", str83, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler84);
        org.junit.Assert.assertNotNull(provider85);
        org.junit.Assert.assertNotNull(builder89);
    }

    @Test
    public void test1704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1704");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.Server server5 = null;
        builder0.server = server5;
        retrofit.SerializedObjectSupporter serializedObjectSupporter7 = new retrofit.SerializedObjectSupporter();
        java.lang.String str8 = serializedObjectSupporter7.deserializeObjectString4();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter7.deserializeObjectConverter8();
        builder0.converter = gsonConverter9;
        java.util.concurrent.Executor executor11 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder14 = builder12.setServer("hi!");
        retrofit.client.Client.Provider provider15 = builder12.clientProvider;
        retrofit.client.Client.Provider provider16 = null;
        builder12.clientProvider = provider16;
        retrofit.Profiler profiler18 = builder12.profiler;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor20 = builder19.getcallbackExecutor();
        retrofit.client.Client.Provider provider21 = null;
        builder19.clientProvider = provider21;
        retrofit.Server server23 = null;
        builder19.server = server23;
        java.util.concurrent.Executor executor25 = builder19.gethttpExecutor();
        java.util.concurrent.Executor executor26 = builder19.gethttpExecutor();
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor28 = null;
        builder27.sethttpExecutor(executor28);
        retrofit.converter.Converter converter30 = builder27.converter;
        java.util.concurrent.Executor executor31 = builder27.getcallbackExecutor();
        retrofit.client.Client.Provider provider32 = builder27.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter33 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request34 = serializedObjectSupporter33.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler35 = serializedObjectSupporter33.deserializeObjectErrorHandler1();
        builder27.errorHandler = errorHandler35;
        retrofit.Server server37 = builder27.server;
        builder27.ensureSaneDefaults();
        java.util.concurrent.Executor executor39 = builder27.gethttpExecutor();
        builder19.setcallbackExecutor(executor39);
        builder12.callbackExecutor = executor39;
        builder0.setcallbackExecutor(executor39);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://example.com/" + "'", str8, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter9);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertNull(profiler18);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(converter30);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNull(provider32);
        org.junit.Assert.assertNotNull(request34);
        org.junit.Assert.assertNotNull(errorHandler35);
        org.junit.Assert.assertNull(server37);
        org.junit.Assert.assertNotNull(executor39);
    }

    @Test
    public void test1705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1705");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString3();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString4();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter2();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest5();
        retrofit.client.Request request6 = serializedObjectSupporter0.deserializeObjectRequest1();
        retrofit.client.Request request7 = serializedObjectSupporter0.deserializeObjectRequest8();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "GET" + "'", str1, "GET");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "http://example.com/" + "'", str2, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(request6);
        org.junit.Assert.assertNotNull(request7);
    }

    @Test
    public void test1706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1706");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler7 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder8 = builder0.setErrorHandler(errorHandler7);
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder11 = builder9.setServer("hi!");
        retrofit.client.Client.Provider provider12 = builder9.clientProvider;
        retrofit.RequestInterceptor requestInterceptor13 = builder9.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean15 = logLevel14.log();
        retrofit.RestAdapter.Builder builder16 = builder9.setLogLevel(logLevel14);
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor18 = builder17.getcallbackExecutor();
        retrofit.client.Client.Provider provider19 = null;
        builder17.clientProvider = provider19;
        retrofit.Server server21 = null;
        builder17.server = server21;
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        builder17.log = log23;
        builder9.log = log23;
        retrofit.RestAdapter.Builder builder26 = builder8.setLog(log23);
        retrofit.Server server27 = builder8.server;
        retrofit.client.Client.Provider provider28 = builder8.getclientProvider();
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNotNull(errorHandler7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertNull(requestInterceptor13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(server27);
        org.junit.Assert.assertNull(provider28);
    }

    @Test
    public void test1707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1707");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = builder0.profiler;
        retrofit.client.Client.Provider provider4 = builder0.clientProvider;
        java.util.concurrent.Executor executor5 = null;
        builder0.httpExecutor = executor5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder9 = builder7.setServer("hi!");
        java.util.concurrent.Executor executor10 = null;
        builder9.callbackExecutor = executor10;
        retrofit.RestAdapter restAdapter12 = builder9.build();
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor14 = null;
        builder13.sethttpExecutor(executor14);
        retrofit.Profiler profiler16 = null;
        builder13.profiler = profiler16;
        retrofit.RestAdapter.Log log18 = builder13.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter19 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler20 = serializedObjectSupporter19.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder21 = builder13.setErrorHandler(errorHandler20);
        retrofit.RestAdapter.Builder builder22 = builder9.setErrorHandler(errorHandler20);
        java.util.concurrent.Executor executor23 = builder22.callbackExecutor;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = null;
        builder24.sethttpExecutor(executor25);
        retrofit.Profiler profiler27 = null;
        builder24.profiler = profiler27;
        retrofit.Server server29 = builder24.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor31 = serializedObjectSupporter30.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter32 = serializedObjectSupporter30.deserializeObjectConverter7();
        retrofit.client.Request request33 = serializedObjectSupporter30.deserializeObjectRequest1();
        builder24.serializedObjectSupporter = serializedObjectSupporter30;
        java.lang.String str35 = serializedObjectSupporter30.deserializeObjectString2();
        retrofit.ErrorHandler errorHandler36 = serializedObjectSupporter30.deserializeObjectErrorHandler1();
        builder22.errorHandler = errorHandler36;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder40 = builder38.setServer("hi!");
        retrofit.client.Client.Provider provider41 = builder38.clientProvider;
        retrofit.RestAdapter.Log log42 = null;
        builder38.log = log42;
        java.util.concurrent.Executor executor44 = builder38.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor46 = builder45.getcallbackExecutor();
        retrofit.client.Client.Provider provider47 = null;
        builder45.clientProvider = provider47;
        retrofit.SerializedObjectSupporter serializedObjectSupporter49 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor50 = serializedObjectSupporter49.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter51 = serializedObjectSupporter49.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter52 = serializedObjectSupporter49.deserializeObjectConverter5();
        retrofit.client.Request request53 = serializedObjectSupporter49.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter54 = serializedObjectSupporter49.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter55 = serializedObjectSupporter49.deserializeObjectConverter6();
        retrofit.RestAdapter.Builder builder56 = builder45.setConverter((retrofit.converter.Converter) gsonConverter55);
        builder38.converter = gsonConverter55;
        retrofit.ErrorHandler errorHandler58 = builder38.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter59 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler60 = serializedObjectSupporter59.deserializeObjectErrorHandler1();
        retrofit.Server server61 = serializedObjectSupporter59.deserializeObjectServer1();
        builder38.server = server61;
        retrofit.RestAdapter.Builder builder63 = builder22.setServer(server61);
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor65 = builder64.getcallbackExecutor();
        retrofit.client.Client.Provider provider66 = null;
        builder64.clientProvider = provider66;
        retrofit.Server server68 = null;
        builder64.server = server68;
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        builder64.log = log70;
        log70.log("hi!");
        builder22.log = log70;
        builder0.log = log70;
        retrofit.RestAdapter.Builder builder77 = builder0.setServer("hi!");
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(provider4);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(restAdapter12);
        org.junit.Assert.assertNull(log18);
        org.junit.Assert.assertNotNull(errorHandler20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(executor23);
        org.junit.Assert.assertNull(server29);
        org.junit.Assert.assertNotNull(requestInterceptor31);
        org.junit.Assert.assertNotNull(gsonConverter32);
        org.junit.Assert.assertNotNull(request33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Retrofit-Idle" + "'", str35, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler36);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(provider41);
        org.junit.Assert.assertNull(executor44);
        org.junit.Assert.assertNull(executor46);
        org.junit.Assert.assertNotNull(requestInterceptor50);
        org.junit.Assert.assertNotNull(gsonConverter51);
        org.junit.Assert.assertNotNull(gsonConverter52);
        org.junit.Assert.assertNotNull(request53);
        org.junit.Assert.assertNotNull(gsonConverter54);
        org.junit.Assert.assertNotNull(gsonConverter55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(errorHandler58);
        org.junit.Assert.assertNotNull(errorHandler60);
        org.junit.Assert.assertNotNull(server61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(executor65);
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertNotNull(builder77);
    }

    @Test
    public void test1708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1708");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.Server server4 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.Server server5 = serializedObjectSupporter0.deserializeObjectServer1();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString3();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter7 = serializedObjectSupporter0.deserializeObjectLogLevel1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(server4);
        org.junit.Assert.assertNotNull(server5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GET" + "'", str6, "GET");
    }

    @Test
    public void test1709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1709");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest1();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest6();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter7();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Retrofit-Idle" + "'", str3, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter4);
    }

    @Test
    public void test1710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1710");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter6();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest8();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString3();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.client.Request request8 = serializedObjectSupporter0.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter10 = serializedObjectSupporter0.deserializeObjectConverter5();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GET" + "'", str6, "GET");
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertNotNull(request8);
        org.junit.Assert.assertNotNull(gsonConverter9);
        org.junit.Assert.assertNotNull(gsonConverter10);
    }

    @Test
    public void test1711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1711");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider5 = builder0.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request7 = serializedObjectSupporter6.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler8 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        builder0.errorHandler = errorHandler8;
        retrofit.converter.Converter converter10 = builder0.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        java.lang.String str12 = serializedObjectSupporter11.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter13 = serializedObjectSupporter11.deserializeObjectConverter2();
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter11.deserializeObjectConverter7();
        retrofit.RestAdapter.Builder builder15 = builder0.setConverter((retrofit.converter.Converter) gsonConverter14);
        java.util.concurrent.Executor executor16 = builder15.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter17.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter17.deserializeObjectConverter5();
        retrofit.client.Request request21 = serializedObjectSupporter17.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter17.deserializeObjectConverter3();
        retrofit.client.Request request23 = serializedObjectSupporter17.deserializeObjectRequest4();
        retrofit.client.Request request24 = serializedObjectSupporter17.deserializeObjectRequest2();
        java.lang.String str25 = serializedObjectSupporter17.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter26 = serializedObjectSupporter17.deserializeObjectConverter2();
        retrofit.converter.GsonConverter gsonConverter27 = serializedObjectSupporter17.deserializeObjectConverter6();
        retrofit.RestAdapter.Builder builder28 = builder15.setConverter((retrofit.converter.Converter) gsonConverter27);
        retrofit.RestAdapter.Log log29 = builder15.log;
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(errorHandler8);
        org.junit.Assert.assertNull(converter10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter13);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNotNull(request21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertNotNull(request24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Retrofit-Idle" + "'", str25, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter26);
        org.junit.Assert.assertNotNull(gsonConverter27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(log29);
    }

    @Test
    public void test1712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1712");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter10.logLevel;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        retrofit.converter.Converter converter14 = restAdapter10.converter;
        retrofit.Server server15 = restAdapter10.getserver();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter10.getLogLevel();
        retrofit.ErrorHandler errorHandler17 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor18 = restAdapter10.gethttpExecutor();
        retrofit.ErrorHandler errorHandler19 = restAdapter10.errorHandler;
        retrofit.client.Client.Provider provider20 = restAdapter10.getclientProvider();
        retrofit.RestAdapter.LogLevel logLevel21 = restAdapter10.getLogLevel();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(provider20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test1713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1713");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = builder0.profiler;
        retrofit.client.Client.Provider provider4 = builder0.clientProvider;
        retrofit.SerializedObjectSupporter serializedObjectSupporter5 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter5.deserializeObjectConverter2();
        retrofit.client.Request request7 = serializedObjectSupporter5.deserializeObjectRequest7();
        retrofit.client.Request request8 = serializedObjectSupporter5.deserializeObjectRequest2();
        retrofit.client.Request request9 = serializedObjectSupporter5.deserializeObjectRequest3();
        java.lang.String str10 = serializedObjectSupporter5.deserializeObjectString4();
        builder0.serializedObjectSupporter = serializedObjectSupporter5;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter13 = serializedObjectSupporter12.deserializeObjectConverter2();
        retrofit.client.Request request14 = serializedObjectSupporter12.deserializeObjectRequest7();
        retrofit.client.Request request15 = serializedObjectSupporter12.deserializeObjectRequest2();
        retrofit.client.Request request16 = serializedObjectSupporter12.deserializeObjectRequest3();
        java.lang.String str17 = serializedObjectSupporter12.deserializeObjectString4();
        retrofit.ErrorHandler errorHandler18 = serializedObjectSupporter12.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder19 = builder0.setErrorHandler(errorHandler18);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder22 = builder20.setServer("hi!");
        retrofit.client.Client.Provider provider23 = builder20.clientProvider;
        retrofit.RequestInterceptor requestInterceptor24 = builder20.requestInterceptor;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder27 = builder25.setServer("hi!");
        java.util.concurrent.Executor executor28 = null;
        builder27.callbackExecutor = executor28;
        retrofit.RestAdapter restAdapter30 = builder27.build();
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor32 = null;
        builder31.sethttpExecutor(executor32);
        retrofit.Profiler profiler34 = null;
        builder31.profiler = profiler34;
        retrofit.RestAdapter.Log log36 = builder31.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter37 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler38 = serializedObjectSupporter37.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder39 = builder31.setErrorHandler(errorHandler38);
        retrofit.RestAdapter.Builder builder40 = builder27.setErrorHandler(errorHandler38);
        java.util.concurrent.Executor executor41 = builder40.callbackExecutor;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor43 = null;
        builder42.sethttpExecutor(executor43);
        retrofit.Profiler profiler45 = null;
        builder42.profiler = profiler45;
        retrofit.Server server47 = builder42.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter48 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor49 = serializedObjectSupporter48.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter50 = serializedObjectSupporter48.deserializeObjectConverter7();
        retrofit.client.Request request51 = serializedObjectSupporter48.deserializeObjectRequest1();
        builder42.serializedObjectSupporter = serializedObjectSupporter48;
        java.lang.String str53 = serializedObjectSupporter48.deserializeObjectString2();
        retrofit.ErrorHandler errorHandler54 = serializedObjectSupporter48.deserializeObjectErrorHandler1();
        builder40.errorHandler = errorHandler54;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder58 = builder56.setServer("hi!");
        retrofit.client.Client.Provider provider59 = builder56.clientProvider;
        retrofit.RestAdapter.Log log60 = null;
        builder56.log = log60;
        java.util.concurrent.Executor executor62 = builder56.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor64 = builder63.getcallbackExecutor();
        retrofit.client.Client.Provider provider65 = null;
        builder63.clientProvider = provider65;
        retrofit.SerializedObjectSupporter serializedObjectSupporter67 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor68 = serializedObjectSupporter67.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter69 = serializedObjectSupporter67.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter70 = serializedObjectSupporter67.deserializeObjectConverter5();
        retrofit.client.Request request71 = serializedObjectSupporter67.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter72 = serializedObjectSupporter67.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter73 = serializedObjectSupporter67.deserializeObjectConverter6();
        retrofit.RestAdapter.Builder builder74 = builder63.setConverter((retrofit.converter.Converter) gsonConverter73);
        builder56.converter = gsonConverter73;
        retrofit.ErrorHandler errorHandler76 = builder56.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter77 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler78 = serializedObjectSupporter77.deserializeObjectErrorHandler1();
        retrofit.Server server79 = serializedObjectSupporter77.deserializeObjectServer1();
        builder56.server = server79;
        retrofit.RestAdapter.Builder builder81 = builder40.setServer(server79);
        retrofit.RequestInterceptor requestInterceptor82 = builder40.requestInterceptor;
        retrofit.RestAdapter.Log log83 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder84 = builder40.setLog(log83);
        retrofit.RestAdapter.Builder builder85 = builder20.setLog(log83);
        builder19.log = log83;
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(provider4);
        org.junit.Assert.assertNotNull(gsonConverter6);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(request8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "http://example.com/" + "'", str10, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter13);
        org.junit.Assert.assertNotNull(request14);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "http://example.com/" + "'", str17, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(provider23);
        org.junit.Assert.assertNull(requestInterceptor24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(restAdapter30);
        org.junit.Assert.assertNull(log36);
        org.junit.Assert.assertNotNull(errorHandler38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(executor41);
        org.junit.Assert.assertNull(server47);
        org.junit.Assert.assertNotNull(requestInterceptor49);
        org.junit.Assert.assertNotNull(gsonConverter50);
        org.junit.Assert.assertNotNull(request51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Retrofit-Idle" + "'", str53, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler54);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(provider59);
        org.junit.Assert.assertNull(executor62);
        org.junit.Assert.assertNull(executor64);
        org.junit.Assert.assertNotNull(requestInterceptor68);
        org.junit.Assert.assertNotNull(gsonConverter69);
        org.junit.Assert.assertNotNull(gsonConverter70);
        org.junit.Assert.assertNotNull(request71);
        org.junit.Assert.assertNotNull(gsonConverter72);
        org.junit.Assert.assertNotNull(gsonConverter73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNull(errorHandler76);
        org.junit.Assert.assertNotNull(errorHandler78);
        org.junit.Assert.assertNotNull(server79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(requestInterceptor82);
        org.junit.Assert.assertNotNull(log83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
    }

    @Test
    public void test1714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1714");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean6 = logLevel5.log();
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder9 = builder0.setServer("http://example.com/");
        retrofit.client.Client.Provider provider10 = builder9.getclientProvider();
        java.util.concurrent.Executor executor11 = builder9.gethttpExecutor();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(provider10);
        org.junit.Assert.assertNull(executor11);
    }

    @Test
    public void test1715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1715");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.Server server5 = null;
        builder0.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.sethttpExecutor(executor8);
        retrofit.converter.Converter converter10 = builder7.converter;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        retrofit.client.Client.Provider provider12 = builder7.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request14 = serializedObjectSupporter13.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler15 = serializedObjectSupporter13.deserializeObjectErrorHandler1();
        builder7.errorHandler = errorHandler15;
        retrofit.converter.Converter converter17 = builder7.converter;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder20 = builder18.setServer("hi!");
        java.util.concurrent.Executor executor21 = null;
        builder20.callbackExecutor = executor21;
        retrofit.SerializedObjectSupporter serializedObjectSupporter23 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor24 = serializedObjectSupporter23.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder25 = builder20.setRequestInterceptor(requestInterceptor24);
        retrofit.RestAdapter.Builder builder26 = builder7.setRequestInterceptor(requestInterceptor24);
        builder0.requestInterceptor = requestInterceptor24;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor29 = builder28.getcallbackExecutor();
        retrofit.client.Client.Provider provider30 = null;
        builder28.clientProvider = provider30;
        retrofit.Server server32 = null;
        builder28.server = server32;
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        builder28.log = log34;
        retrofit.converter.Converter converter36 = builder28.converter;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor38 = null;
        builder37.sethttpExecutor(executor38);
        retrofit.converter.Converter converter40 = builder37.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter41 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor42 = serializedObjectSupporter41.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter43 = serializedObjectSupporter41.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter44 = serializedObjectSupporter41.deserializeObjectConverter7();
        retrofit.Server server45 = serializedObjectSupporter41.deserializeObjectServer1();
        retrofit.converter.GsonConverter gsonConverter46 = serializedObjectSupporter41.deserializeObjectConverter7();
        retrofit.ErrorHandler errorHandler47 = serializedObjectSupporter41.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder48 = builder37.setErrorHandler(errorHandler47);
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor50 = null;
        builder49.sethttpExecutor(executor50);
        retrofit.converter.Converter converter52 = builder49.converter;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor54 = null;
        builder53.sethttpExecutor(executor54);
        retrofit.converter.Converter converter56 = builder53.converter;
        java.util.concurrent.Executor executor57 = builder53.getcallbackExecutor();
        retrofit.client.Client.Provider provider58 = builder53.getclientProvider();
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder61 = builder59.setServer("hi!");
        java.util.concurrent.Executor executor62 = null;
        builder61.callbackExecutor = executor62;
        retrofit.RestAdapter restAdapter64 = builder61.build();
        retrofit.RestAdapter.Log log65 = restAdapter64.log;
        java.util.concurrent.Executor executor66 = restAdapter64.gethttpExecutor();
        retrofit.client.Client.Provider provider67 = restAdapter64.getclientProvider();
        builder53.setclientProvider(provider67);
        retrofit.RestAdapter.Builder builder69 = builder49.setClient(provider67);
        builder48.clientProvider = provider67;
        retrofit.RestAdapter.Builder builder71 = builder28.setClient(provider67);
        retrofit.RestAdapter.Builder builder72 = builder0.setClient(provider67);
        retrofit.RequestInterceptor requestInterceptor73 = builder0.requestInterceptor;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNull(converter10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertNotNull(request14);
        org.junit.Assert.assertNotNull(errorHandler15);
        org.junit.Assert.assertNull(converter17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(requestInterceptor24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertNull(converter36);
        org.junit.Assert.assertNull(converter40);
        org.junit.Assert.assertNotNull(requestInterceptor42);
        org.junit.Assert.assertNotNull(gsonConverter43);
        org.junit.Assert.assertNotNull(gsonConverter44);
        org.junit.Assert.assertNotNull(server45);
        org.junit.Assert.assertNotNull(gsonConverter46);
        org.junit.Assert.assertNotNull(errorHandler47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(converter52);
        org.junit.Assert.assertNull(converter56);
        org.junit.Assert.assertNull(executor57);
        org.junit.Assert.assertNull(provider58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(restAdapter64);
        org.junit.Assert.assertNotNull(log65);
        org.junit.Assert.assertNotNull(executor66);
        org.junit.Assert.assertNotNull(provider67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(requestInterceptor73);
    }

    @Test
    public void test1716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1716");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RestAdapter.Log log4 = null;
        builder0.log = log4;
        java.util.concurrent.Executor executor6 = builder0.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.sethttpExecutor(executor8);
        retrofit.client.Client.Provider provider10 = builder7.getclientProvider();
        retrofit.client.Client.Provider provider11 = builder7.getclientProvider();
        retrofit.Server server12 = builder7.server;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor14 = null;
        builder13.sethttpExecutor(executor14);
        retrofit.Profiler profiler16 = null;
        builder13.profiler = profiler16;
        retrofit.Server server18 = builder13.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter19 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor20 = serializedObjectSupporter19.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter21 = serializedObjectSupporter19.deserializeObjectConverter7();
        retrofit.client.Request request22 = serializedObjectSupporter19.deserializeObjectRequest1();
        builder13.serializedObjectSupporter = serializedObjectSupporter19;
        retrofit.client.Request request24 = serializedObjectSupporter19.deserializeObjectRequest2();
        retrofit.mime.TypedString typedString25 = serializedObjectSupporter19.deserializeObjectTypedOutput2();
        builder7.serializedObjectSupporter = serializedObjectSupporter19;
        java.util.concurrent.Executor executor27 = builder7.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter28 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request29 = serializedObjectSupporter28.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler30 = serializedObjectSupporter28.deserializeObjectErrorHandler1();
        retrofit.mime.TypedString typedString31 = serializedObjectSupporter28.deserializeObjectTypedOutput2();
        retrofit.ErrorHandler errorHandler32 = serializedObjectSupporter28.deserializeObjectErrorHandler1();
        builder7.errorHandler = errorHandler32;
        builder0.errorHandler = errorHandler32;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor36 = null;
        builder35.sethttpExecutor(executor36);
        retrofit.Profiler profiler38 = null;
        builder35.profiler = profiler38;
        retrofit.RestAdapter.Log log40 = builder35.log;
        retrofit.client.Client.Provider provider41 = null;
        builder35.setclientProvider(provider41);
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder45 = builder43.setServer("hi!");
        java.util.concurrent.Executor executor46 = null;
        builder45.callbackExecutor = executor46;
        retrofit.SerializedObjectSupporter serializedObjectSupporter48 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor49 = serializedObjectSupporter48.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder50 = builder45.setRequestInterceptor(requestInterceptor49);
        retrofit.Server server51 = builder50.server;
        builder35.server = server51;
        retrofit.RestAdapter.Builder builder53 = builder0.setServer(server51);
        retrofit.RestAdapter restAdapter54 = builder53.build();
        java.util.concurrent.Executor executor55 = builder53.httpExecutor;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(provider10);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(server18);
        org.junit.Assert.assertNotNull(requestInterceptor20);
        org.junit.Assert.assertNotNull(gsonConverter21);
        org.junit.Assert.assertNotNull(request22);
        org.junit.Assert.assertNotNull(request24);
        org.junit.Assert.assertNotNull(typedString25);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNotNull(request29);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(typedString31);
        org.junit.Assert.assertNotNull(errorHandler32);
        org.junit.Assert.assertNull(log40);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(requestInterceptor49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(server51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(restAdapter54);
        org.junit.Assert.assertNotNull(executor55);
    }

    @Test
    public void test1717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1717");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter8();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest5();
        java.lang.String str6 = request5.getUrl();
        java.util.List<retrofit.client.Header> headerList7 = request5.headers;
        java.lang.String str8 = request5.getMethod();
        java.util.List<retrofit.client.Header> headerList9 = request5.headers;
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://example.com/" + "'", str6, "http://example.com/");
        org.junit.Assert.assertNotNull(headerList7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(headerList9);
    }

    @Test
    public void test1718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1718");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider5 = builder0.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request7 = serializedObjectSupporter6.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler8 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        builder0.errorHandler = errorHandler8;
        retrofit.RestAdapter.Log log10 = builder0.log;
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Log log19 = null;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log19, logLevel20);
        retrofit.ErrorHandler errorHandler22 = restAdapter21.errorHandler;
        retrofit.ErrorHandler errorHandler23 = restAdapter21.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter21.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request26 = serializedObjectSupporter25.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter27 = serializedObjectSupporter25.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter25.deserializeObjectConverter1();
        restHandler24.serializedObjectSupporter = serializedObjectSupporter25;
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = restHandler24.serializedObjectSupporter;
        java.lang.String str31 = serializedObjectSupporter30.deserializeObjectString5();
        builder0.serializedObjectSupporter = serializedObjectSupporter30;
        retrofit.client.Request request33 = serializedObjectSupporter30.deserializeObjectRequest5();
        java.lang.String str34 = serializedObjectSupporter30.deserializeObjectString5();
        retrofit.converter.GsonConverter gsonConverter35 = serializedObjectSupporter30.deserializeObjectConverter2();
        retrofit.client.Request request36 = serializedObjectSupporter30.deserializeObjectRequest1();
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(errorHandler8);
        org.junit.Assert.assertNull(log10);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNotNull(request26);
        org.junit.Assert.assertNotNull(gsonConverter27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(serializedObjectSupporter30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "POST" + "'", str31, "POST");
        org.junit.Assert.assertNotNull(request33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "POST" + "'", str34, "POST");
        org.junit.Assert.assertNotNull(gsonConverter35);
        org.junit.Assert.assertNotNull(request36);
    }

    @Test
    public void test1719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1719");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest1();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest7();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter3();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString2();
        retrofit.client.Request request7 = serializedObjectSupporter0.deserializeObjectRequest2();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Retrofit-Idle" + "'", str6, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(request7);
    }

    @Test
    public void test1720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1720");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.client.Request request9 = serializedObjectSupporter6.deserializeObjectRequest1();
        builder0.serializedObjectSupporter = serializedObjectSupporter6;
        retrofit.client.Request request11 = serializedObjectSupporter6.deserializeObjectRequest2();
        java.lang.String str12 = serializedObjectSupporter6.deserializeObjectString4();
        retrofit.Server server13 = serializedObjectSupporter6.deserializeObjectServer1();
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNotNull(request11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "http://example.com/" + "'", str12, "http://example.com/");
        org.junit.Assert.assertNotNull(server13);
    }

    @Test
    public void test1721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1721");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server4 = null;
        builder0.server = server4;
        java.util.concurrent.Executor executor6 = builder0.gethttpExecutor();
        retrofit.Profiler profiler7 = builder0.profiler;
        retrofit.RequestInterceptor requestInterceptor8 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder10 = builder0.setServer("GET");
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test1722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1722");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString3();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString4();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter1();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString5();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "GET" + "'", str1, "GET");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "http://example.com/" + "'", str2, "http://example.com/");
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "POST" + "'", str5, "POST");
    }

    @Test
    public void test1723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1723");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = null;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter13;
        java.util.concurrent.Executor executor15 = restAdapter10.callbackExecutor;
        retrofit.Profiler profiler16 = restAdapter10.getprofiler();
        retrofit.Profiler profiler17 = restAdapter10.getprofiler();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(profiler16);
        org.junit.Assert.assertNull(profiler17);
    }

    @Test
    public void test1724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1724");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest8();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString4();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.client.Request request6 = serializedObjectSupporter0.deserializeObjectRequest3();
        retrofit.client.Request request7 = serializedObjectSupporter0.deserializeObjectRequest4();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "http://example.com/" + "'", str4, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(request6);
        org.junit.Assert.assertNotNull(request7);
    }

    @Test
    public void test1725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1725");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler2 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter2();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter1();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(errorHandler2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(gsonConverter4);
    }

    @Test
    public void test1726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1726");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest2();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString1();
        retrofit.RequestInterceptor requestInterceptor6 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Retrofit-" + "'", str5, "Retrofit-");
        org.junit.Assert.assertNotNull(requestInterceptor6);
    }

    @Test
    public void test1727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1727");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest4();
        java.util.List<retrofit.client.Header> headerList5 = request4.headers;
        java.lang.String str6 = request4.getUrl();
        java.lang.String str7 = request4.getMethod();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(headerList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://example.com/" + "'", str6, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GET" + "'", str7, "GET");
    }

    @Test
    public void test1728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1728");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler2 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter3();
        retrofit.mime.TypedString typedString4 = serializedObjectSupporter0.deserializeObjectTypedOutput2();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(errorHandler2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(typedString4);
    }

    @Test
    public void test1729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1729");
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor5 = serializedObjectSupporter4.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter4.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter4.deserializeObjectConverter5();
        retrofit.client.Request request8 = serializedObjectSupporter4.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter4.deserializeObjectConverter3();
        retrofit.client.Request request10 = serializedObjectSupporter4.deserializeObjectRequest4();
        retrofit.client.Request request11 = serializedObjectSupporter4.deserializeObjectRequest2();
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request14 = serializedObjectSupporter13.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter15 = serializedObjectSupporter13.deserializeObjectConverter8();
        retrofit.client.Request request16 = serializedObjectSupporter13.deserializeObjectRequest1();
        retrofit.mime.TypedString typedString17 = serializedObjectSupporter13.deserializeObjectTypedOutput2();
        retrofit.client.Request request18 = new retrofit.client.Request("hi!", "POST", headerList12, (retrofit.mime.TypedOutput) typedString17);
        retrofit.SerializedObjectSupporter serializedObjectSupporter21 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor22 = serializedObjectSupporter21.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter23 = serializedObjectSupporter21.deserializeObjectConverter8();
        java.lang.String str24 = serializedObjectSupporter21.deserializeObjectString1();
        retrofit.client.Request request25 = serializedObjectSupporter21.deserializeObjectRequest1();
        java.lang.String str26 = request25.getMethod();
        java.util.List<retrofit.client.Header> headerList27 = request25.getHeaders();
        java.util.List<retrofit.client.Header> headerList28 = request25.headers;
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter30 = serializedObjectSupporter29.deserializeObjectConverter2();
        retrofit.client.Request request31 = serializedObjectSupporter29.deserializeObjectRequest7();
        retrofit.client.Request request32 = serializedObjectSupporter29.deserializeObjectRequest2();
        retrofit.client.Request request33 = serializedObjectSupporter29.deserializeObjectRequest3();
        retrofit.converter.GsonConverter gsonConverter34 = serializedObjectSupporter29.deserializeObjectConverter1();
        retrofit.RequestInterceptor requestInterceptor35 = serializedObjectSupporter29.deserializeObjectRequestInterceptor1();
        retrofit.mime.TypedString typedString36 = serializedObjectSupporter29.deserializeObjectTypedOutput2();
        retrofit.client.Request request37 = new retrofit.client.Request("Retrofit-Idle", "http://example.com/", headerList28, (retrofit.mime.TypedOutput) typedString36);
        retrofit.client.Request request38 = new retrofit.client.Request("Retrofit-", "POST", headerList12, (retrofit.mime.TypedOutput) typedString36);
        org.junit.Assert.assertNotNull(requestInterceptor5);
        org.junit.Assert.assertNotNull(gsonConverter6);
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertNotNull(request8);
        org.junit.Assert.assertNotNull(gsonConverter9);
        org.junit.Assert.assertNotNull(request10);
        org.junit.Assert.assertNotNull(request11);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(request14);
        org.junit.Assert.assertNotNull(gsonConverter15);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(typedString17);
        org.junit.Assert.assertNotNull(requestInterceptor22);
        org.junit.Assert.assertNotNull(gsonConverter23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Retrofit-" + "'", str24, "Retrofit-");
        org.junit.Assert.assertNotNull(request25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "GET" + "'", str26, "GET");
        org.junit.Assert.assertNotNull(headerList27);
        org.junit.Assert.assertNotNull(headerList28);
        org.junit.Assert.assertNotNull(gsonConverter30);
        org.junit.Assert.assertNotNull(request31);
        org.junit.Assert.assertNotNull(request32);
        org.junit.Assert.assertNotNull(request33);
        org.junit.Assert.assertNotNull(gsonConverter34);
        org.junit.Assert.assertNotNull(requestInterceptor35);
        org.junit.Assert.assertNotNull(typedString36);
    }

    @Test
    public void test1730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1730");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.ErrorHandler errorHandler6 = builder0.errorHandler;
        retrofit.Profiler profiler7 = builder0.profiler;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = null;
        builder8.sethttpExecutor(executor9);
        retrofit.client.Client.Provider provider11 = builder8.getclientProvider();
        retrofit.client.Client.Provider provider12 = builder8.getclientProvider();
        retrofit.Server server13 = builder8.server;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = null;
        builder14.sethttpExecutor(executor15);
        retrofit.Profiler profiler17 = null;
        builder14.profiler = profiler17;
        retrofit.Server server19 = builder14.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter7();
        retrofit.client.Request request23 = serializedObjectSupporter20.deserializeObjectRequest1();
        builder14.serializedObjectSupporter = serializedObjectSupporter20;
        retrofit.client.Request request25 = serializedObjectSupporter20.deserializeObjectRequest2();
        retrofit.mime.TypedString typedString26 = serializedObjectSupporter20.deserializeObjectTypedOutput2();
        builder8.serializedObjectSupporter = serializedObjectSupporter20;
        java.util.concurrent.Executor executor28 = builder8.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request30 = serializedObjectSupporter29.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler31 = serializedObjectSupporter29.deserializeObjectErrorHandler1();
        retrofit.mime.TypedString typedString32 = serializedObjectSupporter29.deserializeObjectTypedOutput2();
        retrofit.ErrorHandler errorHandler33 = serializedObjectSupporter29.deserializeObjectErrorHandler1();
        builder8.errorHandler = errorHandler33;
        retrofit.RestAdapter.Builder builder35 = builder0.setErrorHandler(errorHandler33);
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor37 = null;
        builder36.sethttpExecutor(executor37);
        retrofit.converter.Converter converter39 = builder36.converter;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor41 = null;
        builder40.sethttpExecutor(executor41);
        retrofit.converter.Converter converter43 = builder40.converter;
        java.util.concurrent.Executor executor44 = builder40.getcallbackExecutor();
        retrofit.client.Client.Provider provider45 = builder40.getclientProvider();
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder48 = builder46.setServer("hi!");
        java.util.concurrent.Executor executor49 = null;
        builder48.callbackExecutor = executor49;
        retrofit.RestAdapter restAdapter51 = builder48.build();
        retrofit.RestAdapter.Log log52 = restAdapter51.log;
        java.util.concurrent.Executor executor53 = restAdapter51.gethttpExecutor();
        retrofit.client.Client.Provider provider54 = restAdapter51.getclientProvider();
        builder40.setclientProvider(provider54);
        retrofit.RestAdapter.Builder builder56 = builder36.setClient(provider54);
        builder35.clientProvider = provider54;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor59 = null;
        builder58.sethttpExecutor(executor59);
        retrofit.client.Client.Provider provider61 = builder58.getclientProvider();
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor63 = null;
        builder62.sethttpExecutor(executor63);
        retrofit.Profiler profiler65 = null;
        builder62.profiler = profiler65;
        retrofit.Server server67 = builder62.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter68 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor69 = serializedObjectSupporter68.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter70 = serializedObjectSupporter68.deserializeObjectConverter7();
        retrofit.client.Request request71 = serializedObjectSupporter68.deserializeObjectRequest1();
        builder62.serializedObjectSupporter = serializedObjectSupporter68;
        builder62.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder76 = builder74.setServer("hi!");
        java.util.concurrent.Executor executor77 = null;
        builder76.callbackExecutor = executor77;
        retrofit.RestAdapter restAdapter79 = builder76.build();
        retrofit.RestAdapter.Builder builder80 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor81 = null;
        builder80.sethttpExecutor(executor81);
        retrofit.Profiler profiler83 = null;
        builder80.profiler = profiler83;
        retrofit.RestAdapter.Log log85 = builder80.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter86 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler87 = serializedObjectSupporter86.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder88 = builder80.setErrorHandler(errorHandler87);
        retrofit.RestAdapter.Builder builder89 = builder76.setErrorHandler(errorHandler87);
        java.util.concurrent.Executor executor90 = builder89.callbackExecutor;
        builder62.setcallbackExecutor(executor90);
        builder58.setcallbackExecutor(executor90);
        builder35.callbackExecutor = executor90;
        retrofit.SerializedObjectSupporter serializedObjectSupporter94 = builder35.serializedObjectSupporter;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertNotNull(request25);
        org.junit.Assert.assertNotNull(typedString26);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNotNull(request30);
        org.junit.Assert.assertNotNull(errorHandler31);
        org.junit.Assert.assertNotNull(typedString32);
        org.junit.Assert.assertNotNull(errorHandler33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(converter39);
        org.junit.Assert.assertNull(converter43);
        org.junit.Assert.assertNull(executor44);
        org.junit.Assert.assertNull(provider45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(restAdapter51);
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNotNull(executor53);
        org.junit.Assert.assertNotNull(provider54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(provider61);
        org.junit.Assert.assertNull(server67);
        org.junit.Assert.assertNotNull(requestInterceptor69);
        org.junit.Assert.assertNotNull(gsonConverter70);
        org.junit.Assert.assertNotNull(request71);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(restAdapter79);
        org.junit.Assert.assertNull(log85);
        org.junit.Assert.assertNotNull(errorHandler87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(executor90);
        org.junit.Assert.assertNull(serializedObjectSupporter94);
    }

    @Test
    public void test1731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1731");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        java.lang.String str13 = restAdapter10.getTHREAD_PREFIX();
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter10.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = restHandler14.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = restHandler14.serializedObjectSupporter;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder19 = builder17.setServer("hi!");
        retrofit.client.Client.Provider provider20 = builder17.clientProvider;
        java.util.concurrent.Executor executor21 = null;
        builder17.setcallbackExecutor(executor21);
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder24 = builder17.setLog(log23);
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = null;
        builder25.sethttpExecutor(executor26);
        retrofit.Profiler profiler28 = null;
        builder25.profiler = profiler28;
        retrofit.RestAdapter.LogLevel logLevel30 = builder25.logLevel;
        builder17.logLevel = logLevel30;
        java.lang.reflect.Method method32 = null;
        retrofit.Server server33 = null;
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.RestAdapter.Log log41 = null;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter(server33, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log41, logLevel42);
        retrofit.ErrorHandler errorHandler44 = restAdapter43.errorHandler;
        java.util.concurrent.Executor executor45 = restAdapter43.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel46 = restAdapter43.getLogLevel();
        retrofit.client.Client.Provider provider47 = restAdapter43.clientProvider;
        retrofit.Profiler profiler48 = restAdapter43.profiler;
        retrofit.converter.Converter converter49 = restAdapter43.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter50 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor51 = serializedObjectSupporter50.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter52 = serializedObjectSupporter50.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter53 = serializedObjectSupporter50.deserializeObjectConverter4();
        restAdapter43.serializedObjectSupporter = serializedObjectSupporter50;
        retrofit.Profiler profiler55 = restAdapter43.profiler;
        retrofit.client.Client.Provider provider56 = restAdapter43.clientProvider;
        retrofit.converter.Converter converter57 = restAdapter43.getconverter();
        retrofit.RequestInterceptor requestInterceptor58 = restAdapter43.getrequestInterceptor();
        retrofit.client.Client.Provider provider59 = restAdapter43.clientProvider;
        retrofit.RequestInterceptor requestInterceptor60 = restAdapter43.requestInterceptor;
        retrofit.Server server61 = null;
        retrofit.client.Client.Provider provider62 = null;
        java.util.concurrent.Executor executor63 = null;
        java.util.concurrent.Executor executor64 = null;
        retrofit.RequestInterceptor requestInterceptor65 = null;
        retrofit.converter.Converter converter66 = null;
        retrofit.Profiler profiler67 = null;
        retrofit.ErrorHandler errorHandler68 = null;
        retrofit.RestAdapter.Log log69 = null;
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter(server61, provider62, executor63, executor64, requestInterceptor65, converter66, profiler67, errorHandler68, log69, logLevel70);
        retrofit.ErrorHandler errorHandler72 = restAdapter71.errorHandler;
        int int73 = restAdapter71.getLOG_CHUNK_SIZE();
        retrofit.SerializedObjectSupporter serializedObjectSupporter74 = null;
        restAdapter71.serializedObjectSupporter = serializedObjectSupporter74;
        retrofit.client.Client.Provider provider76 = restAdapter71.getclientProvider();
        retrofit.ErrorHandler errorHandler77 = restAdapter71.geterrorHandler();
        retrofit.RequestInterceptor requestInterceptor78 = restAdapter71.requestInterceptor;
        retrofit.client.Client.Provider provider79 = restAdapter71.clientProvider;
        retrofit.RestAdapter.Log log80 = restAdapter71.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter81 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request82 = serializedObjectSupporter81.deserializeObjectRequest1();
        restAdapter71.serializedObjectSupporter = serializedObjectSupporter81;
        retrofit.SerializedObjectSupporter serializedObjectSupporter84 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request85 = serializedObjectSupporter84.deserializeObjectRequest1();
        retrofit.client.Request request86 = serializedObjectSupporter84.deserializeObjectRequest2();
        retrofit.converter.GsonConverter gsonConverter87 = serializedObjectSupporter84.deserializeObjectConverter6();
        retrofit.SerializedObjectSupporter serializedObjectSupporter88 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request89 = serializedObjectSupporter88.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter90 = serializedObjectSupporter88.deserializeObjectConverter8();
        retrofit.client.Request request91 = serializedObjectSupporter88.deserializeObjectRequest1();
        retrofit.converter.GsonConverter gsonConverter92 = serializedObjectSupporter88.deserializeObjectConverter1();
        java.lang.Object[] objArray93 = new java.lang.Object[] { restAdapter43, serializedObjectSupporter81, serializedObjectSupporter84, gsonConverter92 };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj94 = restHandler14.invoke((java.lang.Object) builder17, method32, objArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-" + "'", str13, "Retrofit-");
        org.junit.Assert.assertNull(serializedObjectSupporter15);
        org.junit.Assert.assertNull(serializedObjectSupporter16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(provider20);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler44);
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider47);
        org.junit.Assert.assertNull(profiler48);
        org.junit.Assert.assertNull(converter49);
        org.junit.Assert.assertNotNull(requestInterceptor51);
        org.junit.Assert.assertNotNull(gsonConverter52);
        org.junit.Assert.assertNotNull(gsonConverter53);
        org.junit.Assert.assertNull(profiler55);
        org.junit.Assert.assertNull(provider56);
        org.junit.Assert.assertNull(converter57);
        org.junit.Assert.assertNull(requestInterceptor58);
        org.junit.Assert.assertNull(provider59);
        org.junit.Assert.assertNull(requestInterceptor60);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 4000 + "'", int73 == 4000);
        org.junit.Assert.assertNull(provider76);
        org.junit.Assert.assertNull(errorHandler77);
        org.junit.Assert.assertNull(requestInterceptor78);
        org.junit.Assert.assertNull(provider79);
        org.junit.Assert.assertNull(log80);
        org.junit.Assert.assertNotNull(request82);
        org.junit.Assert.assertNotNull(request85);
        org.junit.Assert.assertNotNull(request86);
        org.junit.Assert.assertNotNull(gsonConverter87);
        org.junit.Assert.assertNotNull(request89);
        org.junit.Assert.assertNotNull(gsonConverter90);
        org.junit.Assert.assertNotNull(request91);
        org.junit.Assert.assertNotNull(gsonConverter92);
        org.junit.Assert.assertNotNull(objArray93);
    }

    @Test
    public void test1732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1732");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.SerializedObjectSupporter serializedObjectSupporter5 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor6 = serializedObjectSupporter5.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder7 = builder2.setRequestInterceptor(requestInterceptor6);
        retrofit.Server server8 = builder7.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter9 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler10 = serializedObjectSupporter9.deserializeObjectErrorHandler1();
        builder7.serializedObjectSupporter = serializedObjectSupporter9;
        retrofit.Profiler profiler12 = null;
        builder7.profiler = profiler12;
        retrofit.SerializedObjectSupporter serializedObjectSupporter14 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor15 = serializedObjectSupporter14.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter14.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter14.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter18 = serializedObjectSupporter14.deserializeObjectConverter8();
        java.lang.String str19 = serializedObjectSupporter14.deserializeObjectString4();
        java.lang.String str20 = serializedObjectSupporter14.deserializeObjectString3();
        retrofit.converter.GsonConverter gsonConverter21 = serializedObjectSupporter14.deserializeObjectConverter6();
        retrofit.RestAdapter.Builder builder22 = builder7.setConverter((retrofit.converter.Converter) gsonConverter21);
        retrofit.SerializedObjectSupporter serializedObjectSupporter23 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter24 = serializedObjectSupporter23.deserializeObjectConverter5();
        retrofit.RestAdapter.Builder builder25 = builder7.setConverter((retrofit.converter.Converter) gsonConverter24);
        retrofit.RestAdapter.LogLevel logLevel26 = builder7.logLevel;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(server8);
        org.junit.Assert.assertNotNull(errorHandler10);
        org.junit.Assert.assertNotNull(requestInterceptor15);
        org.junit.Assert.assertNotNull(gsonConverter16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertNotNull(gsonConverter18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "GET" + "'", str20, "GET");
        org.junit.Assert.assertNotNull(gsonConverter21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(gsonConverter24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test1733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1733");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider5 = builder0.getclientProvider();
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("hi!");
        java.util.concurrent.Executor executor9 = null;
        builder8.callbackExecutor = executor9;
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor12 = serializedObjectSupporter11.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder13 = builder8.setRequestInterceptor(requestInterceptor12);
        retrofit.SerializedObjectSupporter serializedObjectSupporter14 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request15 = serializedObjectSupporter14.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter14.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter14.deserializeObjectConverter1();
        builder13.converter = gsonConverter17;
        retrofit.RestAdapter.Builder builder19 = builder0.setConverter((retrofit.converter.Converter) gsonConverter17);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder22 = builder20.setServer("hi!");
        retrofit.client.Client.Provider provider23 = builder20.clientProvider;
        retrofit.RequestInterceptor requestInterceptor24 = builder20.requestInterceptor;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder27 = builder25.setServer("hi!");
        retrofit.client.Client.Provider provider28 = builder25.clientProvider;
        java.util.concurrent.Executor executor29 = null;
        builder25.setcallbackExecutor(executor29);
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder32 = builder25.setLog(log31);
        retrofit.RestAdapter.Builder builder33 = builder20.setLog(log31);
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor35 = null;
        builder34.sethttpExecutor(executor35);
        retrofit.Profiler profiler37 = null;
        builder34.profiler = profiler37;
        retrofit.Server server39 = builder34.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter40 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor41 = serializedObjectSupporter40.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter42 = serializedObjectSupporter40.deserializeObjectConverter7();
        retrofit.client.Request request43 = serializedObjectSupporter40.deserializeObjectRequest1();
        builder34.serializedObjectSupporter = serializedObjectSupporter40;
        builder34.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder48 = builder46.setServer("hi!");
        java.util.concurrent.Executor executor49 = null;
        builder48.callbackExecutor = executor49;
        retrofit.RestAdapter restAdapter51 = builder48.build();
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor53 = null;
        builder52.sethttpExecutor(executor53);
        retrofit.Profiler profiler55 = null;
        builder52.profiler = profiler55;
        retrofit.RestAdapter.Log log57 = builder52.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter58 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler59 = serializedObjectSupporter58.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder60 = builder52.setErrorHandler(errorHandler59);
        retrofit.RestAdapter.Builder builder61 = builder48.setErrorHandler(errorHandler59);
        java.util.concurrent.Executor executor62 = builder61.callbackExecutor;
        builder34.setcallbackExecutor(executor62);
        builder33.callbackExecutor = executor62;
        builder19.httpExecutor = executor62;
        java.util.concurrent.Executor executor66 = builder19.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter67 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor68 = serializedObjectSupporter67.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter69 = serializedObjectSupporter67.deserializeObjectConverter5();
        retrofit.client.Request request70 = serializedObjectSupporter67.deserializeObjectRequest8();
        retrofit.converter.GsonConverter gsonConverter71 = serializedObjectSupporter67.deserializeObjectConverter1();
        retrofit.converter.GsonConverter gsonConverter72 = serializedObjectSupporter67.deserializeObjectConverter6();
        retrofit.converter.GsonConverter gsonConverter73 = serializedObjectSupporter67.deserializeObjectConverter2();
        retrofit.RestAdapter.Builder builder74 = builder19.setConverter((retrofit.converter.Converter) gsonConverter73);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(requestInterceptor12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(gsonConverter16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(provider23);
        org.junit.Assert.assertNull(requestInterceptor24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(provider28);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(server39);
        org.junit.Assert.assertNotNull(requestInterceptor41);
        org.junit.Assert.assertNotNull(gsonConverter42);
        org.junit.Assert.assertNotNull(request43);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(restAdapter51);
        org.junit.Assert.assertNull(log57);
        org.junit.Assert.assertNotNull(errorHandler59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(executor62);
        org.junit.Assert.assertNotNull(executor66);
        org.junit.Assert.assertNotNull(requestInterceptor68);
        org.junit.Assert.assertNotNull(gsonConverter69);
        org.junit.Assert.assertNotNull(request70);
        org.junit.Assert.assertNotNull(gsonConverter71);
        org.junit.Assert.assertNotNull(gsonConverter72);
        org.junit.Assert.assertNotNull(gsonConverter73);
        org.junit.Assert.assertNotNull(builder74);
    }

    @Test
    public void test1734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1734");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        retrofit.converter.Converter converter12 = restAdapter10.converter;
        java.lang.Throwable throwable13 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter10.logException(throwable13, "http://example.com/");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNull(converter12);
    }

    @Test
    public void test1735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1735");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler2 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.mime.TypedString typedString3 = serializedObjectSupporter0.deserializeObjectTypedOutput2();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest4();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(errorHandler2);
        org.junit.Assert.assertNotNull(typedString3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(request5);
    }

    @Test
    public void test1736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1736");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.getrequestInterceptor();
        retrofit.RestAdapter.Log log15 = restAdapter10.log;
        retrofit.RestAdapter.Log log16 = restAdapter10.log;
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter10.logLevel;
        java.util.concurrent.Executor executor18 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor20 = null;
        builder19.sethttpExecutor(executor20);
        retrofit.converter.Converter converter22 = builder19.converter;
        java.util.concurrent.Executor executor23 = builder19.getcallbackExecutor();
        java.util.concurrent.Executor executor24 = builder19.callbackExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor26 = serializedObjectSupporter25.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter27 = serializedObjectSupporter25.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter25.deserializeObjectConverter5();
        retrofit.RestAdapter.Builder builder29 = builder19.setConverter((retrofit.converter.Converter) gsonConverter28);
        retrofit.ErrorHandler errorHandler30 = builder29.errorHandler;
        retrofit.Server server31 = null;
        retrofit.client.Client.Provider provider32 = null;
        java.util.concurrent.Executor executor33 = null;
        java.util.concurrent.Executor executor34 = null;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        retrofit.converter.Converter converter36 = null;
        retrofit.Profiler profiler37 = null;
        retrofit.ErrorHandler errorHandler38 = null;
        retrofit.RestAdapter.Log log39 = null;
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter(server31, provider32, executor33, executor34, requestInterceptor35, converter36, profiler37, errorHandler38, log39, logLevel40);
        retrofit.ErrorHandler errorHandler42 = restAdapter41.errorHandler;
        int int43 = restAdapter41.getLOG_CHUNK_SIZE();
        retrofit.Server server44 = restAdapter41.getserver();
        retrofit.converter.Converter converter45 = restAdapter41.getconverter();
        retrofit.converter.Converter converter46 = restAdapter41.converter;
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter41.logLevel;
        retrofit.RestAdapter.Builder builder48 = builder29.setLogLevel(logLevel47);
        retrofit.RestAdapter.LogLevel logLevel49 = builder29.logLevel;
        retrofit.Profiler profiler50 = null;
        builder29.profiler = profiler50;
        retrofit.RestAdapter.LogLevel logLevel52 = builder29.logLevel;
        restAdapter10.logLevel = logLevel52;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNull(log15);
        org.junit.Assert.assertNull(log16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(converter22);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNotNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(gsonConverter27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(errorHandler30);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 4000 + "'", int43 == 4000);
        org.junit.Assert.assertNull(server44);
        org.junit.Assert.assertNull(converter45);
        org.junit.Assert.assertNull(converter46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test1737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1737");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        java.util.concurrent.Executor executor5 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.sethttpExecutor(executor7);
        retrofit.Profiler profiler9 = null;
        builder6.profiler = profiler9;
        retrofit.Server server11 = builder6.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor13 = serializedObjectSupporter12.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter12.deserializeObjectConverter7();
        retrofit.client.Request request15 = serializedObjectSupporter12.deserializeObjectRequest1();
        builder6.serializedObjectSupporter = serializedObjectSupporter12;
        builder6.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder20 = builder18.setServer("hi!");
        java.util.concurrent.Executor executor21 = null;
        builder20.callbackExecutor = executor21;
        retrofit.RestAdapter restAdapter23 = builder20.build();
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = null;
        builder24.sethttpExecutor(executor25);
        retrofit.Profiler profiler27 = null;
        builder24.profiler = profiler27;
        retrofit.RestAdapter.Log log29 = builder24.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler31 = serializedObjectSupporter30.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder32 = builder24.setErrorHandler(errorHandler31);
        retrofit.RestAdapter.Builder builder33 = builder20.setErrorHandler(errorHandler31);
        java.util.concurrent.Executor executor34 = builder33.callbackExecutor;
        builder6.setcallbackExecutor(executor34);
        builder0.httpExecutor = executor34;
        retrofit.client.Client.Provider provider37 = builder0.getclientProvider();
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(server11);
        org.junit.Assert.assertNotNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(restAdapter23);
        org.junit.Assert.assertNull(log29);
        org.junit.Assert.assertNotNull(errorHandler31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(executor34);
        org.junit.Assert.assertNull(provider37);
    }

    @Test
    public void test1738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1738");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.Profiler profiler6 = builder0.profiler;
        retrofit.client.Client.Provider provider7 = builder0.getclientProvider();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = null;
        builder8.sethttpExecutor(executor9);
        retrofit.Profiler profiler11 = null;
        builder8.profiler = profiler11;
        retrofit.RestAdapter.LogLevel logLevel13 = builder8.logLevel;
        java.util.concurrent.Executor executor14 = null;
        builder8.sethttpExecutor(executor14);
        retrofit.client.Client.Provider provider16 = builder8.clientProvider;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor18 = null;
        builder17.sethttpExecutor(executor18);
        retrofit.converter.Converter converter20 = builder17.converter;
        java.util.concurrent.Executor executor21 = builder17.getcallbackExecutor();
        retrofit.client.Client.Provider provider22 = builder17.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter23 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request24 = serializedObjectSupporter23.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter23.deserializeObjectErrorHandler1();
        builder17.errorHandler = errorHandler25;
        retrofit.converter.Converter converter27 = builder17.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter28 = new retrofit.SerializedObjectSupporter();
        java.lang.String str29 = serializedObjectSupporter28.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter30 = serializedObjectSupporter28.deserializeObjectConverter2();
        retrofit.converter.GsonConverter gsonConverter31 = serializedObjectSupporter28.deserializeObjectConverter7();
        retrofit.RestAdapter.Builder builder32 = builder17.setConverter((retrofit.converter.Converter) gsonConverter31);
        retrofit.SerializedObjectSupporter serializedObjectSupporter33 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter34 = serializedObjectSupporter33.deserializeObjectConverter2();
        retrofit.client.Request request35 = serializedObjectSupporter33.deserializeObjectRequest7();
        retrofit.client.Request request36 = serializedObjectSupporter33.deserializeObjectRequest2();
        retrofit.client.Request request37 = serializedObjectSupporter33.deserializeObjectRequest3();
        retrofit.client.Request request38 = serializedObjectSupporter33.deserializeObjectRequest6();
        retrofit.RequestInterceptor requestInterceptor39 = serializedObjectSupporter33.deserializeObjectRequestInterceptor1();
        retrofit.mime.TypedString typedString40 = serializedObjectSupporter33.deserializeObjectTypedOutput2();
        retrofit.RequestInterceptor requestInterceptor41 = serializedObjectSupporter33.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder42 = builder32.setRequestInterceptor(requestInterceptor41);
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder45 = builder43.setServer("hi!");
        retrofit.client.Client.Provider provider46 = builder43.clientProvider;
        java.util.concurrent.Executor executor47 = null;
        builder43.setcallbackExecutor(executor47);
        builder43.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor51 = null;
        builder50.sethttpExecutor(executor51);
        retrofit.converter.Converter converter53 = builder50.converter;
        java.util.concurrent.Executor executor54 = builder50.getcallbackExecutor();
        retrofit.client.Client.Provider provider55 = builder50.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter56 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request57 = serializedObjectSupporter56.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler58 = serializedObjectSupporter56.deserializeObjectErrorHandler1();
        builder50.errorHandler = errorHandler58;
        retrofit.Server server60 = builder50.server;
        builder50.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor62 = builder50.requestInterceptor;
        java.util.concurrent.Executor executor63 = builder50.gethttpExecutor();
        builder43.callbackExecutor = executor63;
        builder42.httpExecutor = executor63;
        builder8.sethttpExecutor(executor63);
        builder0.setcallbackExecutor(executor63);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNull(profiler6);
        org.junit.Assert.assertNull(provider7);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(provider16);
        org.junit.Assert.assertNull(converter20);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(provider22);
        org.junit.Assert.assertNotNull(request24);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNull(converter27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Retrofit-Idle" + "'", str29, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter30);
        org.junit.Assert.assertNotNull(gsonConverter31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(gsonConverter34);
        org.junit.Assert.assertNotNull(request35);
        org.junit.Assert.assertNotNull(request36);
        org.junit.Assert.assertNotNull(request37);
        org.junit.Assert.assertNotNull(request38);
        org.junit.Assert.assertNotNull(requestInterceptor39);
        org.junit.Assert.assertNotNull(typedString40);
        org.junit.Assert.assertNotNull(requestInterceptor41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(provider46);
        org.junit.Assert.assertNull(converter53);
        org.junit.Assert.assertNull(executor54);
        org.junit.Assert.assertNull(provider55);
        org.junit.Assert.assertNotNull(request57);
        org.junit.Assert.assertNotNull(errorHandler58);
        org.junit.Assert.assertNull(server60);
        org.junit.Assert.assertNotNull(requestInterceptor62);
        org.junit.Assert.assertNotNull(executor63);
    }

    @Test
    public void test1739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1739");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter8();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString3();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString4();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter0.deserializeObjectConverter6();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter0.deserializeObjectConverter1();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "http://example.com/" + "'", str5, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GET" + "'", str6, "GET");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "http://example.com/" + "'", str7, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(gsonConverter9);
    }

    @Test
    public void test1740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1740");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.converter.Converter converter14 = restAdapter10.getconverter();
        retrofit.converter.Converter converter15 = restAdapter10.converter;
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter10.logLevel;
        retrofit.client.Client.Provider provider17 = restAdapter10.clientProvider;
        retrofit.client.Client.Provider provider18 = restAdapter10.getclientProvider();
        java.lang.Throwable throwable19 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter10.logException(throwable19, "POST");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(converter15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider17);
        org.junit.Assert.assertNull(provider18);
    }

    @Test
    public void test1741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1741");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest8();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter0.deserializeObjectConverter7();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Retrofit-Idle" + "'", str4, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(gsonConverter6);
    }

    @Test
    public void test1742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1742");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.converter.Converter converter14 = restAdapter10.getconverter();
        retrofit.converter.Converter converter15 = restAdapter10.converter;
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter10.logLevel;
        retrofit.client.Client.Provider provider17 = restAdapter10.clientProvider;
        retrofit.client.Client.Provider provider18 = restAdapter10.getclientProvider();
        retrofit.RequestInterceptor requestInterceptor19 = restAdapter10.requestInterceptor;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(converter15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider17);
        org.junit.Assert.assertNull(provider18);
        org.junit.Assert.assertNull(requestInterceptor19);
    }

    @Test
    public void test1743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1743");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        java.lang.String str13 = restAdapter10.getIDLE_THREAD_NAME();
        java.util.concurrent.Executor executor14 = restAdapter10.httpExecutor;
        java.lang.String str15 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = restAdapter10.serializedObjectSupporter;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler18 = builder17.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter19 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request20 = serializedObjectSupporter19.deserializeObjectRequest6();
        builder17.serializedObjectSupporter = serializedObjectSupporter19;
        java.lang.String str22 = serializedObjectSupporter19.deserializeObjectString2();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter19;
        retrofit.ErrorHandler errorHandler24 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor25 = restAdapter10.httpExecutor;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-Idle" + "'", str13, "Retrofit-Idle");
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Retrofit-Idle" + "'", str15, "Retrofit-Idle");
        org.junit.Assert.assertNull(serializedObjectSupporter16);
        org.junit.Assert.assertNull(errorHandler18);
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Retrofit-Idle" + "'", str22, "Retrofit-Idle");
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNull(executor25);
    }

    @Test
    public void test1744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1744");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler1 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString1();
        retrofit.mime.TypedString typedString4 = serializedObjectSupporter0.deserializeObjectTypedOutput2();
        org.junit.Assert.assertNotNull(errorHandler1);
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Retrofit-" + "'", str3, "Retrofit-");
        org.junit.Assert.assertNotNull(typedString4);
    }

    @Test
    public void test1745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1745");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter8();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString4();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter0.deserializeObjectConverter8();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter7 = serializedObjectSupporter0.deserializeObjectLogLevel2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "http://example.com/" + "'", str5, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter6);
    }

    @Test
    public void test1746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1746");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter10.new RestHandler();
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        retrofit.RestAdapter.LogLevel logLevel25 = restAdapter24.logLevel;
        restAdapter10.logLevel = logLevel25;
        retrofit.RestAdapter.LogLevel logLevel27 = restAdapter10.logLevel;
        int int28 = restAdapter10.getLOG_CHUNK_SIZE();
        java.util.concurrent.Executor executor29 = restAdapter10.getcallbackExecutor();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4000 + "'", int28 == 4000);
        org.junit.Assert.assertNull(executor29);
    }

    @Test
    public void test1747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1747");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString4();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter8();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest7();
        java.util.List<retrofit.client.Header> headerList4 = request3.headers;
        java.lang.String str5 = request3.getUrl();
        java.lang.String str6 = request3.getMethod();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "http://example.com/" + "'", str1, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(headerList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "http://example.com/" + "'", str5, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GET" + "'", str6, "GET");
    }

    @Test
    public void test1748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1748");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.converter.Converter converter15 = restAdapter10.getconverter();
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = restAdapter10.serializedObjectSupporter;
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter10.new RestHandler();
        retrofit.Server server18 = restAdapter10.getserver();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(converter15);
        org.junit.Assert.assertNull(serializedObjectSupporter16);
        org.junit.Assert.assertNull(server18);
    }

    @Test
    public void test1749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1749");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler2 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.mime.TypedString typedString3 = serializedObjectSupporter0.deserializeObjectTypedOutput2();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest8();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter0.deserializeObjectConverter1();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(errorHandler2);
        org.junit.Assert.assertNotNull(typedString3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(gsonConverter6);
        org.junit.Assert.assertNotNull(gsonConverter7);
    }

    @Test
    public void test1750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1750");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.client.Client.Provider provider15 = restAdapter10.getclientProvider();
        java.util.concurrent.Executor executor16 = restAdapter10.gethttpExecutor();
        retrofit.Server server17 = restAdapter10.server;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(server17);
    }

    @Test
    public void test1751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1751");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter1 = serializedObjectSupporter0.deserializeObjectConverter2();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest3();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString4();
        retrofit.ErrorHandler errorHandler6 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter0.deserializeObjectConverter8();
        org.junit.Assert.assertNotNull(gsonConverter1);
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "http://example.com/" + "'", str5, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler6);
        org.junit.Assert.assertNotNull(gsonConverter7);
    }

    @Test
    public void test1752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1752");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean6 = logLevel5.log();
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder9 = builder0.setServer("http://example.com/");
        java.util.concurrent.Executor executor10 = builder0.httpExecutor;
        retrofit.client.Client.Provider provider11 = null;
        builder0.clientProvider = provider11;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = null;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel22);
        retrofit.ErrorHandler errorHandler24 = restAdapter23.errorHandler;
        java.util.concurrent.Executor executor25 = restAdapter23.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = restAdapter23.serializedObjectSupporter;
        retrofit.Server server27 = null;
        retrofit.client.Client.Provider provider28 = null;
        java.util.concurrent.Executor executor29 = null;
        java.util.concurrent.Executor executor30 = null;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        retrofit.converter.Converter converter32 = null;
        retrofit.Profiler profiler33 = null;
        retrofit.ErrorHandler errorHandler34 = null;
        retrofit.RestAdapter.Log log35 = null;
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter(server27, provider28, executor29, executor30, requestInterceptor31, converter32, profiler33, errorHandler34, log35, logLevel36);
        retrofit.ErrorHandler errorHandler38 = restAdapter37.errorHandler;
        retrofit.ErrorHandler errorHandler39 = restAdapter37.errorHandler;
        retrofit.ErrorHandler errorHandler40 = restAdapter37.geterrorHandler();
        retrofit.RequestInterceptor requestInterceptor41 = restAdapter37.getrequestInterceptor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter42 = restAdapter37.serializedObjectSupporter;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor44 = null;
        builder43.sethttpExecutor(executor44);
        retrofit.Profiler profiler46 = null;
        builder43.profiler = profiler46;
        retrofit.RestAdapter.LogLevel logLevel48 = builder43.logLevel;
        restAdapter37.setLogLevel(logLevel48);
        restAdapter23.setLogLevel(logLevel48);
        boolean boolean51 = logLevel48.log();
        retrofit.RestAdapter.Builder builder52 = builder0.setLogLevel(logLevel48);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(serializedObjectSupporter26);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler38);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNull(requestInterceptor41);
        org.junit.Assert.assertNull(serializedObjectSupporter42);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test1753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1753");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.Profiler profiler15 = restAdapter10.profiler;
        java.lang.String str16 = restAdapter10.getTHREAD_PREFIX();
        java.util.concurrent.Executor executor17 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log18 = restAdapter10.log;
        retrofit.ErrorHandler errorHandler19 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor20 = restAdapter10.gethttpExecutor();
        retrofit.client.Response response22 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response24 = restAdapter10.logAndReplaceResponse("", response22, (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Retrofit-" + "'", str16, "Retrofit-");
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(log18);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(executor20);
    }

    @Test
    public void test1754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1754");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter10.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter14 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request15 = serializedObjectSupporter14.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter14.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter14.deserializeObjectConverter1();
        restHandler13.serializedObjectSupporter = serializedObjectSupporter14;
        retrofit.SerializedObjectSupporter serializedObjectSupporter19 = restHandler13.serializedObjectSupporter;
        java.lang.String str20 = serializedObjectSupporter19.deserializeObjectString5();
        java.lang.String str21 = serializedObjectSupporter19.deserializeObjectString2();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(gsonConverter16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertNotNull(serializedObjectSupporter19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "POST" + "'", str20, "POST");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Retrofit-Idle" + "'", str21, "Retrofit-Idle");
    }

    @Test
    public void test1755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1755");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        java.util.concurrent.Executor executor4 = null;
        builder0.setcallbackExecutor(executor4);
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder9 = builder7.setServer("hi!");
        java.util.concurrent.Executor executor10 = null;
        builder9.callbackExecutor = executor10;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor13 = serializedObjectSupporter12.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder14 = builder9.setRequestInterceptor(requestInterceptor13);
        retrofit.RestAdapter.Builder builder15 = builder0.setRequestInterceptor(requestInterceptor13);
        builder0.ensureSaneDefaults();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test1756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1756");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.SerializedObjectSupporter serializedObjectSupporter5 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor6 = serializedObjectSupporter5.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder7 = builder2.setRequestInterceptor(requestInterceptor6);
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = null;
        builder8.sethttpExecutor(executor9);
        retrofit.Profiler profiler11 = null;
        builder8.profiler = profiler11;
        retrofit.Server server13 = builder8.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter14 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor15 = serializedObjectSupporter14.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter14.deserializeObjectConverter7();
        retrofit.client.Request request17 = serializedObjectSupporter14.deserializeObjectRequest1();
        builder8.serializedObjectSupporter = serializedObjectSupporter14;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor20 = null;
        builder19.sethttpExecutor(executor20);
        retrofit.Profiler profiler22 = null;
        builder19.profiler = profiler22;
        retrofit.Server server24 = builder19.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor26 = serializedObjectSupporter25.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter27 = serializedObjectSupporter25.deserializeObjectConverter7();
        retrofit.client.Request request28 = serializedObjectSupporter25.deserializeObjectRequest1();
        builder19.serializedObjectSupporter = serializedObjectSupporter25;
        java.lang.String str30 = serializedObjectSupporter25.deserializeObjectString2();
        retrofit.ErrorHandler errorHandler31 = serializedObjectSupporter25.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder32 = builder8.setErrorHandler(errorHandler31);
        builder2.errorHandler = errorHandler31;
        retrofit.client.Client.Provider provider34 = builder2.getclientProvider();
        java.util.concurrent.Executor executor35 = builder2.gethttpExecutor();
        retrofit.client.Client.Provider provider36 = builder2.clientProvider;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNotNull(requestInterceptor15);
        org.junit.Assert.assertNotNull(gsonConverter16);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertNull(server24);
        org.junit.Assert.assertNotNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(gsonConverter27);
        org.junit.Assert.assertNotNull(request28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Retrofit-Idle" + "'", str30, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(provider34);
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertNull(provider36);
    }

    @Test
    public void test1757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1757");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.errorHandler;
        retrofit.RequestInterceptor requestInterceptor13 = restAdapter10.getrequestInterceptor();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(requestInterceptor13);
    }

    @Test
    public void test1758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1758");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server4 = null;
        builder0.server = server4;
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        builder0.log = log6;
        java.util.concurrent.Executor executor8 = builder0.gethttpExecutor();
        retrofit.converter.Converter converter9 = builder0.converter;
        retrofit.client.Client.Provider provider10 = builder0.getclientProvider();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(converter9);
        org.junit.Assert.assertNull(provider10);
    }

    @Test
    public void test1759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1759");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.RestAdapter restAdapter5 = builder2.build();
        retrofit.RestAdapter.Log log6 = restAdapter5.log;
        java.util.concurrent.Executor executor7 = restAdapter5.gethttpExecutor();
        java.lang.String str8 = restAdapter5.getIDLE_THREAD_NAME();
        retrofit.Server server9 = null;
        retrofit.client.Client.Provider provider10 = null;
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        retrofit.converter.Converter converter14 = null;
        retrofit.Profiler profiler15 = null;
        retrofit.ErrorHandler errorHandler16 = null;
        retrofit.RestAdapter.Log log17 = null;
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter(server9, provider10, executor11, executor12, requestInterceptor13, converter14, profiler15, errorHandler16, log17, logLevel18);
        retrofit.ErrorHandler errorHandler20 = restAdapter19.errorHandler;
        java.util.concurrent.Executor executor21 = restAdapter19.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter19.getLogLevel();
        restAdapter5.logLevel = logLevel22;
        java.util.concurrent.Executor executor24 = restAdapter5.httpExecutor;
        java.util.concurrent.Executor executor25 = restAdapter5.gethttpExecutor();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(restAdapter5);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertNotNull(executor7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Retrofit-Idle" + "'", str8, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(executor24);
        org.junit.Assert.assertNotNull(executor25);
    }

    @Test
    public void test1760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1760");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter2 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request3 = serializedObjectSupporter2.deserializeObjectRequest6();
        builder0.serializedObjectSupporter = serializedObjectSupporter2;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter5 = serializedObjectSupporter2.deserializeObjectLogLevel2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(request3);
    }

    @Test
    public void test1761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1761");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.converter.Converter converter14 = restAdapter10.getconverter();
        retrofit.converter.Converter converter15 = restAdapter10.converter;
        retrofit.Server server16 = restAdapter10.getserver();
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter10.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = restAdapter10.serializedObjectSupporter;
        retrofit.ErrorHandler errorHandler19 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor20 = restAdapter10.callbackExecutor;
        retrofit.converter.Converter converter21 = restAdapter10.converter;
        retrofit.converter.Converter converter22 = restAdapter10.getconverter();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(converter15);
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertNull(serializedObjectSupporter18);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(converter21);
        org.junit.Assert.assertNull(converter22);
    }

    @Test
    public void test1762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1762");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.client.Client.Provider provider15 = restAdapter10.getclientProvider();
        java.util.concurrent.Executor executor16 = restAdapter10.gethttpExecutor();
        retrofit.converter.Converter converter17 = restAdapter10.getconverter();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(converter17);
    }

    @Test
    public void test1763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1763");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler7 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder8 = builder0.setErrorHandler(errorHandler7);
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder11 = builder9.setServer("hi!");
        retrofit.client.Client.Provider provider12 = builder9.clientProvider;
        retrofit.RequestInterceptor requestInterceptor13 = builder9.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean15 = logLevel14.log();
        retrofit.RestAdapter.Builder builder16 = builder9.setLogLevel(logLevel14);
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor18 = builder17.getcallbackExecutor();
        retrofit.client.Client.Provider provider19 = null;
        builder17.clientProvider = provider19;
        retrofit.Server server21 = null;
        builder17.server = server21;
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        builder17.log = log23;
        builder9.log = log23;
        retrofit.RestAdapter.Builder builder26 = builder8.setLog(log23);
        retrofit.RestAdapter.Builder builder28 = builder26.setServer("Retrofit-Idle");
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor30 = serializedObjectSupporter29.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter31 = serializedObjectSupporter29.deserializeObjectConverter5();
        retrofit.client.Request request32 = serializedObjectSupporter29.deserializeObjectRequest8();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter29.deserializeObjectConverter2();
        retrofit.RestAdapter.Builder builder34 = builder28.setConverter((retrofit.converter.Converter) gsonConverter33);
        builder28.ensureSaneDefaults();
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNotNull(errorHandler7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertNull(requestInterceptor13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(gsonConverter31);
        org.junit.Assert.assertNotNull(request32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test1764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1764");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter1 = serializedObjectSupporter0.deserializeObjectConverter2();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest3();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString4();
        retrofit.ErrorHandler errorHandler6 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.mime.TypedString typedString8 = serializedObjectSupporter0.deserializeObjectTypedOutput2();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter0.deserializeObjectConverter8();
        org.junit.Assert.assertNotNull(gsonConverter1);
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "http://example.com/" + "'", str5, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler6);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(typedString8);
        org.junit.Assert.assertNotNull(gsonConverter9);
    }

    @Test
    public void test1765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1765");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider5 = builder0.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request7 = serializedObjectSupporter6.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler8 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        builder0.errorHandler = errorHandler8;
        retrofit.converter.Converter converter10 = builder0.converter;
        java.util.concurrent.Executor executor11 = builder0.callbackExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor13 = serializedObjectSupporter12.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter12.deserializeObjectConverter8();
        java.lang.String str15 = serializedObjectSupporter12.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter12.deserializeObjectConverter4();
        builder0.serializedObjectSupporter = serializedObjectSupporter12;
        retrofit.converter.GsonConverter gsonConverter18 = serializedObjectSupporter12.deserializeObjectConverter4();
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(errorHandler8);
        org.junit.Assert.assertNull(converter10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNotNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Retrofit-Idle" + "'", str15, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter16);
        org.junit.Assert.assertNotNull(gsonConverter18);
    }

    @Test
    public void test1766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1766");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter10.logLevel;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter14 = restAdapter10.serializedObjectSupporter;
        retrofit.client.Client.Provider provider15 = restAdapter10.getclientProvider();
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor17 = null;
        builder16.sethttpExecutor(executor17);
        retrofit.Profiler profiler19 = null;
        builder16.profiler = profiler19;
        retrofit.RestAdapter.LogLevel logLevel21 = builder16.logLevel;
        java.util.concurrent.Executor executor22 = null;
        builder16.sethttpExecutor(executor22);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder26 = builder24.setServer("hi!");
        java.util.concurrent.Executor executor27 = null;
        builder26.callbackExecutor = executor27;
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor30 = serializedObjectSupporter29.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder31 = builder26.setRequestInterceptor(requestInterceptor30);
        retrofit.RestAdapter.Builder builder32 = builder16.setRequestInterceptor(requestInterceptor30);
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean34 = logLevel33.log();
        builder16.logLevel = logLevel33;
        retrofit.SerializedObjectSupporter serializedObjectSupporter36 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor37 = serializedObjectSupporter36.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter38 = serializedObjectSupporter36.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter39 = serializedObjectSupporter36.deserializeObjectConverter5();
        retrofit.client.Request request40 = serializedObjectSupporter36.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter41 = serializedObjectSupporter36.deserializeObjectConverter3();
        retrofit.client.Request request42 = serializedObjectSupporter36.deserializeObjectRequest4();
        retrofit.client.Request request43 = serializedObjectSupporter36.deserializeObjectRequest2();
        builder16.serializedObjectSupporter = serializedObjectSupporter36;
        retrofit.converter.GsonConverter gsonConverter45 = serializedObjectSupporter36.deserializeObjectConverter5();
        retrofit.client.Request request46 = serializedObjectSupporter36.deserializeObjectRequest1();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter36;
        retrofit.converter.GsonConverter gsonConverter48 = serializedObjectSupporter36.deserializeObjectConverter2();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(serializedObjectSupporter14);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(requestInterceptor37);
        org.junit.Assert.assertNotNull(gsonConverter38);
        org.junit.Assert.assertNotNull(gsonConverter39);
        org.junit.Assert.assertNotNull(request40);
        org.junit.Assert.assertNotNull(gsonConverter41);
        org.junit.Assert.assertNotNull(request42);
        org.junit.Assert.assertNotNull(request43);
        org.junit.Assert.assertNotNull(gsonConverter45);
        org.junit.Assert.assertNotNull(request46);
        org.junit.Assert.assertNotNull(gsonConverter48);
    }

    @Test
    public void test1767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1767");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        java.util.concurrent.Executor executor5 = builder0.callbackExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter6.deserializeObjectConverter5();
        retrofit.RestAdapter.Builder builder10 = builder0.setConverter((retrofit.converter.Converter) gsonConverter9);
        retrofit.Server server11 = builder0.server;
        retrofit.Profiler profiler12 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder13 = builder0.setProfiler(profiler12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(gsonConverter9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(server11);
    }

    @Test
    public void test1768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1768");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.SerializedObjectSupporter serializedObjectSupporter14 = new retrofit.SerializedObjectSupporter();
        java.lang.String str15 = serializedObjectSupporter14.deserializeObjectString4();
        java.lang.String str16 = serializedObjectSupporter14.deserializeObjectString5();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter14.deserializeObjectConverter1();
        retrofit.converter.GsonConverter gsonConverter18 = serializedObjectSupporter14.deserializeObjectConverter1();
        retrofit.Server server19 = serializedObjectSupporter14.deserializeObjectServer1();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter14;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "http://example.com/" + "'", str15, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "POST" + "'", str16, "POST");
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertNotNull(gsonConverter18);
        org.junit.Assert.assertNotNull(server19);
    }

    @Test
    public void test1769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1769");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        java.util.concurrent.Executor executor6 = null;
        builder0.sethttpExecutor(executor6);
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder10 = builder8.setServer("hi!");
        java.util.concurrent.Executor executor11 = null;
        builder10.callbackExecutor = executor11;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor14 = serializedObjectSupporter13.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder15 = builder10.setRequestInterceptor(requestInterceptor14);
        retrofit.RestAdapter.Builder builder16 = builder0.setRequestInterceptor(requestInterceptor14);
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean18 = logLevel17.log();
        builder0.logLevel = logLevel17;
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter23 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.client.Request request24 = serializedObjectSupporter20.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter25 = serializedObjectSupporter20.deserializeObjectConverter3();
        retrofit.client.Request request26 = serializedObjectSupporter20.deserializeObjectRequest4();
        retrofit.client.Request request27 = serializedObjectSupporter20.deserializeObjectRequest2();
        builder0.serializedObjectSupporter = serializedObjectSupporter20;
        retrofit.converter.GsonConverter gsonConverter29 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Server server30 = serializedObjectSupporter20.deserializeObjectServer1();
        retrofit.client.Request request31 = serializedObjectSupporter20.deserializeObjectRequest8();
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(gsonConverter23);
        org.junit.Assert.assertNotNull(request24);
        org.junit.Assert.assertNotNull(gsonConverter25);
        org.junit.Assert.assertNotNull(request26);
        org.junit.Assert.assertNotNull(request27);
        org.junit.Assert.assertNotNull(gsonConverter29);
        org.junit.Assert.assertNotNull(server30);
        org.junit.Assert.assertNotNull(request31);
    }

    @Test
    public void test1770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1770");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean6 = logLevel5.log();
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder9 = builder0.setServer("http://example.com/");
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor11 = null;
        builder10.sethttpExecutor(executor11);
        retrofit.Profiler profiler13 = null;
        builder10.profiler = profiler13;
        retrofit.RestAdapter.LogLevel logLevel15 = builder10.logLevel;
        java.util.concurrent.Executor executor16 = null;
        builder10.sethttpExecutor(executor16);
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder20 = builder18.setServer("hi!");
        java.util.concurrent.Executor executor21 = null;
        builder20.callbackExecutor = executor21;
        retrofit.SerializedObjectSupporter serializedObjectSupporter23 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor24 = serializedObjectSupporter23.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder25 = builder20.setRequestInterceptor(requestInterceptor24);
        retrofit.RestAdapter.Builder builder26 = builder10.setRequestInterceptor(requestInterceptor24);
        retrofit.RestAdapter.Builder builder27 = builder9.setRequestInterceptor(requestInterceptor24);
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor29 = null;
        builder28.sethttpExecutor(executor29);
        retrofit.Profiler profiler31 = null;
        builder28.profiler = profiler31;
        retrofit.Server server33 = builder28.server;
        retrofit.RestAdapter.Builder builder35 = builder28.setServer("Retrofit-Idle");
        retrofit.client.Client.Provider provider36 = builder35.clientProvider;
        retrofit.SerializedObjectSupporter serializedObjectSupporter37 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request38 = serializedObjectSupporter37.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter39 = serializedObjectSupporter37.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter40 = serializedObjectSupporter37.deserializeObjectConverter1();
        retrofit.RequestInterceptor requestInterceptor41 = serializedObjectSupporter37.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder42 = builder35.setRequestInterceptor(requestInterceptor41);
        retrofit.RestAdapter.Builder builder43 = builder27.setRequestInterceptor(requestInterceptor41);
        retrofit.converter.Converter converter44 = builder27.converter;
        retrofit.Server server45 = builder27.server;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(requestInterceptor24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(server33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(provider36);
        org.junit.Assert.assertNotNull(request38);
        org.junit.Assert.assertNotNull(gsonConverter39);
        org.junit.Assert.assertNotNull(gsonConverter40);
        org.junit.Assert.assertNotNull(requestInterceptor41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(converter44);
        org.junit.Assert.assertNotNull(server45);
    }

    @Test
    public void test1771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1771");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider5 = builder0.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request7 = serializedObjectSupporter6.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler8 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        builder0.errorHandler = errorHandler8;
        retrofit.converter.Converter converter10 = builder0.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        java.lang.String str12 = serializedObjectSupporter11.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter13 = serializedObjectSupporter11.deserializeObjectConverter2();
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter11.deserializeObjectConverter7();
        retrofit.RestAdapter.Builder builder15 = builder0.setConverter((retrofit.converter.Converter) gsonConverter14);
        java.util.concurrent.Executor executor16 = builder15.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter17.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter17.deserializeObjectConverter5();
        retrofit.client.Request request21 = serializedObjectSupporter17.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter17.deserializeObjectConverter3();
        retrofit.client.Request request23 = serializedObjectSupporter17.deserializeObjectRequest4();
        retrofit.client.Request request24 = serializedObjectSupporter17.deserializeObjectRequest2();
        java.lang.String str25 = serializedObjectSupporter17.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter26 = serializedObjectSupporter17.deserializeObjectConverter2();
        retrofit.converter.GsonConverter gsonConverter27 = serializedObjectSupporter17.deserializeObjectConverter6();
        retrofit.RestAdapter.Builder builder28 = builder15.setConverter((retrofit.converter.Converter) gsonConverter27);
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor30 = serializedObjectSupporter29.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter31 = serializedObjectSupporter29.deserializeObjectConverter8();
        java.lang.String str32 = serializedObjectSupporter29.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter29.deserializeObjectConverter4();
        retrofit.ErrorHandler errorHandler34 = serializedObjectSupporter29.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder35 = builder28.setErrorHandler(errorHandler34);
        java.util.concurrent.Executor executor36 = builder28.callbackExecutor;
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(errorHandler8);
        org.junit.Assert.assertNull(converter10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter13);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNotNull(request21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertNotNull(request24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Retrofit-Idle" + "'", str25, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter26);
        org.junit.Assert.assertNotNull(gsonConverter27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(gsonConverter31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Retrofit-Idle" + "'", str32, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(errorHandler34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(executor36);
    }

    @Test
    public void test1772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1772");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString3();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString4();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter2();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString1();
        retrofit.client.Request request7 = serializedObjectSupporter0.deserializeObjectRequest6();
        java.lang.String str8 = request7.getMethod();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "GET" + "'", str1, "GET");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "http://example.com/" + "'", str2, "http://example.com/");
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Retrofit-" + "'", str6, "Retrofit-");
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
    }

    @Test
    public void test1773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1773");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter10.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter14 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request15 = serializedObjectSupporter14.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter14.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter14.deserializeObjectConverter1();
        restHandler13.serializedObjectSupporter = serializedObjectSupporter14;
        retrofit.SerializedObjectSupporter serializedObjectSupporter19 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor20 = serializedObjectSupporter19.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter21 = serializedObjectSupporter19.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter19.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter23 = serializedObjectSupporter19.deserializeObjectConverter8();
        restHandler13.serializedObjectSupporter = serializedObjectSupporter19;
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor26 = serializedObjectSupporter25.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter27 = serializedObjectSupporter25.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter25.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter29 = serializedObjectSupporter25.deserializeObjectConverter8();
        restHandler13.serializedObjectSupporter = serializedObjectSupporter25;
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter32 = serializedObjectSupporter31.deserializeObjectConverter2();
        retrofit.client.Request request33 = serializedObjectSupporter31.deserializeObjectRequest7();
        retrofit.client.Request request34 = serializedObjectSupporter31.deserializeObjectRequest2();
        retrofit.client.Request request35 = serializedObjectSupporter31.deserializeObjectRequest3();
        retrofit.converter.GsonConverter gsonConverter36 = serializedObjectSupporter31.deserializeObjectConverter1();
        retrofit.RequestInterceptor requestInterceptor37 = serializedObjectSupporter31.deserializeObjectRequestInterceptor1();
        retrofit.mime.TypedString typedString38 = serializedObjectSupporter31.deserializeObjectTypedOutput2();
        retrofit.converter.GsonConverter gsonConverter39 = serializedObjectSupporter31.deserializeObjectConverter7();
        java.lang.String str40 = serializedObjectSupporter31.deserializeObjectString2();
        retrofit.client.Request request41 = serializedObjectSupporter31.deserializeObjectRequest1();
        java.lang.String str42 = serializedObjectSupporter31.deserializeObjectString2();
        restHandler13.serializedObjectSupporter = serializedObjectSupporter31;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(gsonConverter16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertNotNull(requestInterceptor20);
        org.junit.Assert.assertNotNull(gsonConverter21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(gsonConverter23);
        org.junit.Assert.assertNotNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(gsonConverter27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(gsonConverter29);
        org.junit.Assert.assertNotNull(gsonConverter32);
        org.junit.Assert.assertNotNull(request33);
        org.junit.Assert.assertNotNull(request34);
        org.junit.Assert.assertNotNull(request35);
        org.junit.Assert.assertNotNull(gsonConverter36);
        org.junit.Assert.assertNotNull(requestInterceptor37);
        org.junit.Assert.assertNotNull(typedString38);
        org.junit.Assert.assertNotNull(gsonConverter39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Retrofit-Idle" + "'", str40, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(request41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Retrofit-Idle" + "'", str42, "Retrofit-Idle");
    }

    @Test
    public void test1774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1774");
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor3 = null;
        builder2.sethttpExecutor(executor3);
        retrofit.Profiler profiler5 = null;
        builder2.profiler = profiler5;
        retrofit.Server server7 = builder2.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter8 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor9 = serializedObjectSupporter8.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter10 = serializedObjectSupporter8.deserializeObjectConverter7();
        retrofit.client.Request request11 = serializedObjectSupporter8.deserializeObjectRequest1();
        builder2.serializedObjectSupporter = serializedObjectSupporter8;
        java.lang.String str13 = serializedObjectSupporter8.deserializeObjectString2();
        retrofit.ErrorHandler errorHandler14 = serializedObjectSupporter8.deserializeObjectErrorHandler1();
        retrofit.client.Request request15 = serializedObjectSupporter8.deserializeObjectRequest3();
        java.util.List<retrofit.client.Header> headerList16 = request15.headers;
        retrofit.Server server17 = null;
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Log log25 = null;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server17, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log25, logLevel26);
        retrofit.ErrorHandler errorHandler28 = restAdapter27.errorHandler;
        int int29 = restAdapter27.getLOG_CHUNK_SIZE();
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = null;
        restAdapter27.serializedObjectSupporter = serializedObjectSupporter30;
        java.util.concurrent.Executor executor32 = restAdapter27.callbackExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter33 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor34 = serializedObjectSupporter33.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter35 = serializedObjectSupporter33.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter36 = serializedObjectSupporter33.deserializeObjectConverter5();
        retrofit.client.Request request37 = serializedObjectSupporter33.deserializeObjectRequest4();
        retrofit.ErrorHandler errorHandler38 = serializedObjectSupporter33.deserializeObjectErrorHandler1();
        restAdapter27.serializedObjectSupporter = serializedObjectSupporter33;
        retrofit.mime.TypedString typedString40 = serializedObjectSupporter33.deserializeObjectTypedOutput2();
        retrofit.client.Request request41 = new retrofit.client.Request("POST", "http://example.com/", headerList16, (retrofit.mime.TypedOutput) typedString40);
        java.util.List<retrofit.client.Header> headerList42 = request41.headers;
        org.junit.Assert.assertNull(server7);
        org.junit.Assert.assertNotNull(requestInterceptor9);
        org.junit.Assert.assertNotNull(gsonConverter10);
        org.junit.Assert.assertNotNull(request11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-Idle" + "'", str13, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler14);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(headerList16);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4000 + "'", int29 == 4000);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNotNull(requestInterceptor34);
        org.junit.Assert.assertNotNull(gsonConverter35);
        org.junit.Assert.assertNotNull(gsonConverter36);
        org.junit.Assert.assertNotNull(request37);
        org.junit.Assert.assertNotNull(errorHandler38);
        org.junit.Assert.assertNotNull(typedString40);
        org.junit.Assert.assertNotNull(headerList42);
    }

    @Test
    public void test1775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1775");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        java.util.concurrent.Executor executor6 = null;
        builder0.sethttpExecutor(executor6);
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder10 = builder8.setServer("hi!");
        java.util.concurrent.Executor executor11 = null;
        builder10.callbackExecutor = executor11;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor14 = serializedObjectSupporter13.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder15 = builder10.setRequestInterceptor(requestInterceptor14);
        retrofit.RestAdapter.Builder builder16 = builder0.setRequestInterceptor(requestInterceptor14);
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder19 = builder17.setServer("hi!");
        java.util.concurrent.Executor executor20 = null;
        builder19.callbackExecutor = executor20;
        retrofit.RestAdapter restAdapter22 = builder19.build();
        retrofit.RestAdapter.Log log23 = restAdapter22.log;
        java.lang.String str24 = restAdapter22.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler25 = restAdapter22.geterrorHandler();
        retrofit.client.Client.Provider provider26 = restAdapter22.getclientProvider();
        retrofit.RestAdapter.Builder builder27 = builder16.setClient(provider26);
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor29 = null;
        builder28.sethttpExecutor(executor29);
        retrofit.Profiler profiler31 = null;
        builder28.profiler = profiler31;
        retrofit.RestAdapter.LogLevel logLevel33 = builder28.logLevel;
        java.util.concurrent.Executor executor34 = null;
        builder28.sethttpExecutor(executor34);
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder38 = builder36.setServer("hi!");
        java.util.concurrent.Executor executor39 = null;
        builder38.callbackExecutor = executor39;
        retrofit.SerializedObjectSupporter serializedObjectSupporter41 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor42 = serializedObjectSupporter41.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder43 = builder38.setRequestInterceptor(requestInterceptor42);
        retrofit.RestAdapter.Builder builder44 = builder28.setRequestInterceptor(requestInterceptor42);
        retrofit.RestAdapter.Builder builder45 = builder27.setRequestInterceptor(requestInterceptor42);
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor47 = null;
        builder46.sethttpExecutor(executor47);
        retrofit.converter.Converter converter49 = builder46.converter;
        java.util.concurrent.Executor executor50 = builder46.getcallbackExecutor();
        retrofit.client.Client.Provider provider51 = builder46.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter52 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request53 = serializedObjectSupporter52.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler54 = serializedObjectSupporter52.deserializeObjectErrorHandler1();
        builder46.errorHandler = errorHandler54;
        retrofit.Server server56 = builder46.server;
        builder46.ensureSaneDefaults();
        java.util.concurrent.Executor executor58 = builder46.gethttpExecutor();
        retrofit.client.Client.Provider provider59 = builder46.clientProvider;
        retrofit.RestAdapter.Builder builder60 = builder27.setClient(provider59);
        retrofit.RestAdapter.LogLevel logLevel61 = builder27.logLevel;
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(restAdapter22);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Retrofit-Idle" + "'", str24, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(provider26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(requestInterceptor42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(converter49);
        org.junit.Assert.assertNull(executor50);
        org.junit.Assert.assertNull(provider51);
        org.junit.Assert.assertNotNull(request53);
        org.junit.Assert.assertNotNull(errorHandler54);
        org.junit.Assert.assertNull(server56);
        org.junit.Assert.assertNotNull(executor58);
        org.junit.Assert.assertNotNull(provider59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test1776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1776");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest4();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest7();
        java.lang.String str5 = request4.getUrl();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "http://example.com/" + "'", str5, "http://example.com/");
    }

    @Test
    public void test1777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1777");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest1();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest7();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter0.deserializeObjectConverter2();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.client.Request request8 = serializedObjectSupporter0.deserializeObjectRequest1();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(gsonConverter6);
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertNotNull(request8);
    }

    @Test
    public void test1778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1778");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter1 = serializedObjectSupporter0.deserializeObjectConverter2();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest3();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.client.Request request6 = serializedObjectSupporter0.deserializeObjectRequest5();
        retrofit.mime.TypedString typedString7 = serializedObjectSupporter0.deserializeObjectTypedOutput2();
        retrofit.client.Request request8 = serializedObjectSupporter0.deserializeObjectRequest8();
        org.junit.Assert.assertNotNull(gsonConverter1);
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(request6);
        org.junit.Assert.assertNotNull(typedString7);
        org.junit.Assert.assertNotNull(request8);
    }

    @Test
    public void test1779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1779");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.RestAdapter restAdapter5 = builder2.build();
        retrofit.RestAdapter.Log log6 = restAdapter5.log;
        java.util.concurrent.Executor executor7 = restAdapter5.gethttpExecutor();
        retrofit.Server server8 = null;
        retrofit.client.Client.Provider provider9 = null;
        java.util.concurrent.Executor executor10 = null;
        java.util.concurrent.Executor executor11 = null;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        retrofit.converter.Converter converter13 = null;
        retrofit.Profiler profiler14 = null;
        retrofit.ErrorHandler errorHandler15 = null;
        retrofit.RestAdapter.Log log16 = null;
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter(server8, provider9, executor10, executor11, requestInterceptor12, converter13, profiler14, errorHandler15, log16, logLevel17);
        retrofit.ErrorHandler errorHandler19 = restAdapter18.errorHandler;
        java.util.concurrent.Executor executor20 = restAdapter18.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel21 = restAdapter18.getLogLevel();
        retrofit.client.Client.Provider provider22 = restAdapter18.clientProvider;
        retrofit.Profiler profiler23 = restAdapter18.profiler;
        retrofit.converter.Converter converter24 = restAdapter18.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor26 = serializedObjectSupporter25.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter27 = serializedObjectSupporter25.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter25.deserializeObjectConverter4();
        restAdapter18.serializedObjectSupporter = serializedObjectSupporter25;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter18.setLogLevel(logLevel30);
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter18.logLevel;
        restAdapter5.logLevel = logLevel32;
        boolean boolean34 = logLevel32.log();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(restAdapter5);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertNotNull(executor7);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider22);
        org.junit.Assert.assertNull(profiler23);
        org.junit.Assert.assertNull(converter24);
        org.junit.Assert.assertNotNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(gsonConverter27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test1780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1780");
        java.util.List<retrofit.client.Header> headerList2 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter3 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter3.deserializeObjectConverter2();
        retrofit.client.Request request5 = serializedObjectSupporter3.deserializeObjectRequest7();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter3.deserializeObjectConverter7();
        retrofit.mime.TypedString typedString7 = serializedObjectSupporter3.deserializeObjectTypedOutput2();
        retrofit.client.Request request8 = new retrofit.client.Request("", "", headerList2, (retrofit.mime.TypedOutput) typedString7);
        retrofit.mime.TypedOutput typedOutput9 = request8.body;
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(gsonConverter6);
        org.junit.Assert.assertNotNull(typedString7);
        org.junit.Assert.assertNotNull(typedOutput9);
    }

    @Test
    public void test1781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1781");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler13 = restAdapter10.geterrorHandler();
        retrofit.ErrorHandler errorHandler14 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler15 = restAdapter10.errorHandler;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(errorHandler15);
    }

    @Test
    public void test1782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1782");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.RestAdapter restAdapter5 = builder2.build();
        retrofit.RestAdapter.Log log6 = restAdapter5.log;
        java.util.concurrent.Executor executor7 = restAdapter5.gethttpExecutor();
        java.lang.String str8 = restAdapter5.getIDLE_THREAD_NAME();
        retrofit.Server server9 = null;
        retrofit.client.Client.Provider provider10 = null;
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        retrofit.converter.Converter converter14 = null;
        retrofit.Profiler profiler15 = null;
        retrofit.ErrorHandler errorHandler16 = null;
        retrofit.RestAdapter.Log log17 = null;
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter(server9, provider10, executor11, executor12, requestInterceptor13, converter14, profiler15, errorHandler16, log17, logLevel18);
        retrofit.ErrorHandler errorHandler20 = restAdapter19.errorHandler;
        java.util.concurrent.Executor executor21 = restAdapter19.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter19.getLogLevel();
        restAdapter5.logLevel = logLevel22;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request25 = serializedObjectSupporter24.deserializeObjectRequest6();
        restAdapter5.serializedObjectSupporter = serializedObjectSupporter24;
        retrofit.converter.GsonConverter gsonConverter27 = serializedObjectSupporter24.deserializeObjectConverter3();
        java.lang.String str28 = serializedObjectSupporter24.deserializeObjectString2();
        retrofit.client.Request request29 = serializedObjectSupporter24.deserializeObjectRequest6();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(restAdapter5);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertNotNull(executor7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Retrofit-Idle" + "'", str8, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(request25);
        org.junit.Assert.assertNotNull(gsonConverter27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Retrofit-Idle" + "'", str28, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(request29);
    }

    @Test
    public void test1783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1783");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter10.new RestHandler();
        java.util.concurrent.Executor executor14 = restAdapter10.getcallbackExecutor();
        retrofit.converter.Converter converter15 = restAdapter10.converter;
        java.lang.String str16 = restAdapter10.getIDLE_THREAD_NAME();
        java.util.concurrent.Executor executor17 = restAdapter10.callbackExecutor;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(converter15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Retrofit-Idle" + "'", str16, "Retrofit-Idle");
        org.junit.Assert.assertNull(executor17);
    }

    @Test
    public void test1784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1784");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.RestAdapter restAdapter5 = builder2.build();
        retrofit.RestAdapter.Log log6 = restAdapter5.log;
        java.lang.String str7 = restAdapter5.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler8 = restAdapter5.geterrorHandler();
        retrofit.client.Client.Provider provider9 = restAdapter5.getclientProvider();
        java.lang.Throwable throwable10 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter5.logException(throwable10, "Retrofit-Idle");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(restAdapter5);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Retrofit-Idle" + "'", str7, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler8);
        org.junit.Assert.assertNotNull(provider9);
    }

    @Test
    public void test1785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1785");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter8();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest1();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.mime.TypedString typedString5 = serializedObjectSupporter0.deserializeObjectTypedOutput2();
        retrofit.client.Request request6 = serializedObjectSupporter0.deserializeObjectRequest7();
        retrofit.client.Request request7 = serializedObjectSupporter0.deserializeObjectRequest7();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(typedString5);
        org.junit.Assert.assertNotNull(request6);
        org.junit.Assert.assertNotNull(request7);
    }

    @Test
    public void test1786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1786");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = null;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter13;
        retrofit.client.Client.Provider provider15 = restAdapter10.getclientProvider();
        retrofit.ErrorHandler errorHandler16 = restAdapter10.geterrorHandler();
        retrofit.RestAdapter.Log log17 = restAdapter10.log;
        java.util.concurrent.Executor executor18 = restAdapter10.gethttpExecutor();
        retrofit.client.Client.Provider provider19 = restAdapter10.getclientProvider();
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter10.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter21 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter21.deserializeObjectConverter2();
        retrofit.client.Request request23 = serializedObjectSupporter21.deserializeObjectRequest7();
        retrofit.client.Request request24 = serializedObjectSupporter21.deserializeObjectRequest2();
        retrofit.client.Request request25 = serializedObjectSupporter21.deserializeObjectRequest3();
        retrofit.converter.GsonConverter gsonConverter26 = serializedObjectSupporter21.deserializeObjectConverter6();
        retrofit.RequestInterceptor requestInterceptor27 = serializedObjectSupporter21.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter21.deserializeObjectConverter7();
        restHandler20.serializedObjectSupporter = serializedObjectSupporter21;
        retrofit.converter.GsonConverter gsonConverter30 = serializedObjectSupporter21.deserializeObjectConverter4();
        retrofit.client.Request request31 = serializedObjectSupporter21.deserializeObjectRequest4();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNull(log17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(provider19);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertNotNull(request24);
        org.junit.Assert.assertNotNull(request25);
        org.junit.Assert.assertNotNull(gsonConverter26);
        org.junit.Assert.assertNotNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(gsonConverter30);
        org.junit.Assert.assertNotNull(request31);
    }

    @Test
    public void test1787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1787");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        java.util.concurrent.Executor executor4 = builder0.gethttpExecutor();
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder7 = builder5.setServer("hi!");
        java.util.concurrent.Executor executor8 = null;
        builder7.callbackExecutor = executor8;
        retrofit.SerializedObjectSupporter serializedObjectSupporter10 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor11 = serializedObjectSupporter10.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder12 = builder7.setRequestInterceptor(requestInterceptor11);
        retrofit.RestAdapter.Builder builder13 = builder0.setRequestInterceptor(requestInterceptor11);
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = null;
        builder14.sethttpExecutor(executor15);
        retrofit.converter.Converter converter17 = builder14.converter;
        java.util.concurrent.Executor executor18 = builder14.getcallbackExecutor();
        retrofit.client.Client.Provider provider19 = builder14.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request21 = serializedObjectSupporter20.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler22 = serializedObjectSupporter20.deserializeObjectErrorHandler1();
        builder14.errorHandler = errorHandler22;
        retrofit.Server server24 = builder14.server;
        builder14.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor26 = builder14.requestInterceptor;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder29 = builder27.setServer("hi!");
        java.util.concurrent.Executor executor30 = null;
        builder29.callbackExecutor = executor30;
        retrofit.RestAdapter restAdapter32 = builder29.build();
        retrofit.RestAdapter.Log log33 = restAdapter32.log;
        builder14.log = log33;
        log33.log("Retrofit-");
        builder13.log = log33;
        retrofit.RequestInterceptor requestInterceptor38 = builder13.requestInterceptor;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(converter17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(provider19);
        org.junit.Assert.assertNotNull(request21);
        org.junit.Assert.assertNotNull(errorHandler22);
        org.junit.Assert.assertNull(server24);
        org.junit.Assert.assertNotNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(restAdapter32);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(requestInterceptor38);
    }

    @Test
    public void test1788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1788");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        java.util.concurrent.Executor executor14 = restAdapter10.getcallbackExecutor();
        retrofit.Server server15 = null;
        retrofit.client.Client.Provider provider16 = null;
        java.util.concurrent.Executor executor17 = null;
        java.util.concurrent.Executor executor18 = null;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        retrofit.converter.Converter converter20 = null;
        retrofit.Profiler profiler21 = null;
        retrofit.ErrorHandler errorHandler22 = null;
        retrofit.RestAdapter.Log log23 = null;
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter(server15, provider16, executor17, executor18, requestInterceptor19, converter20, profiler21, errorHandler22, log23, logLevel24);
        retrofit.ErrorHandler errorHandler26 = restAdapter25.errorHandler;
        int int27 = restAdapter25.getLOG_CHUNK_SIZE();
        retrofit.Server server28 = restAdapter25.getserver();
        retrofit.client.Client.Provider provider29 = restAdapter25.clientProvider;
        retrofit.client.Client.Provider provider30 = restAdapter25.getclientProvider();
        java.lang.String str31 = restAdapter25.getIDLE_THREAD_NAME();
        retrofit.Server server32 = null;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Log log40 = null;
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log40, logLevel41);
        retrofit.RestAdapter.LogLevel logLevel43 = restAdapter42.logLevel;
        retrofit.ErrorHandler errorHandler44 = restAdapter42.geterrorHandler();
        java.util.concurrent.Executor executor45 = restAdapter42.getcallbackExecutor();
        retrofit.converter.Converter converter46 = restAdapter42.converter;
        retrofit.Server server47 = restAdapter42.getserver();
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter42.getLogLevel();
        restAdapter25.setLogLevel(logLevel48);
        restAdapter10.logLevel = logLevel48;
        retrofit.client.Client.Provider provider51 = restAdapter10.getclientProvider();
        retrofit.RestAdapter.LogLevel logLevel52 = restAdapter10.getLogLevel();
        retrofit.ErrorHandler errorHandler53 = restAdapter10.errorHandler;
        retrofit.client.Response response55 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response57 = restAdapter10.logAndReplaceResponse("POST", response55, (long) 4000);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4000 + "'", int27 == 4000);
        org.junit.Assert.assertNull(server28);
        org.junit.Assert.assertNull(provider29);
        org.junit.Assert.assertNull(provider30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Retrofit-Idle" + "'", str31, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler44);
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertNull(converter46);
        org.junit.Assert.assertNull(server47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler53);
    }

    @Test
    public void test1789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1789");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter6();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest8();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString3();
        retrofit.client.Request request7 = serializedObjectSupporter0.deserializeObjectRequest2();
        java.lang.String str8 = serializedObjectSupporter0.deserializeObjectString3();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GET" + "'", str6, "GET");
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
    }

    @Test
    public void test1790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1790");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter3();
        retrofit.client.Request request6 = serializedObjectSupporter0.deserializeObjectRequest4();
        retrofit.client.Request request7 = serializedObjectSupporter0.deserializeObjectRequest2();
        java.lang.String str8 = serializedObjectSupporter0.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter0.deserializeObjectConverter2();
        retrofit.ErrorHandler errorHandler10 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(request6);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Retrofit-Idle" + "'", str8, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter9);
        org.junit.Assert.assertNotNull(errorHandler10);
    }

    @Test
    public void test1791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1791");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.RestAdapter restAdapter5 = builder2.build();
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.sethttpExecutor(executor7);
        retrofit.Profiler profiler9 = null;
        builder6.profiler = profiler9;
        retrofit.RestAdapter.Log log11 = builder6.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler13 = serializedObjectSupporter12.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder14 = builder6.setErrorHandler(errorHandler13);
        retrofit.RestAdapter.Builder builder15 = builder2.setErrorHandler(errorHandler13);
        java.util.concurrent.Executor executor16 = builder15.callbackExecutor;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor18 = null;
        builder17.sethttpExecutor(executor18);
        retrofit.Profiler profiler20 = null;
        builder17.profiler = profiler20;
        retrofit.Server server22 = builder17.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter23 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor24 = serializedObjectSupporter23.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter25 = serializedObjectSupporter23.deserializeObjectConverter7();
        retrofit.client.Request request26 = serializedObjectSupporter23.deserializeObjectRequest1();
        builder17.serializedObjectSupporter = serializedObjectSupporter23;
        java.lang.String str28 = serializedObjectSupporter23.deserializeObjectString2();
        retrofit.ErrorHandler errorHandler29 = serializedObjectSupporter23.deserializeObjectErrorHandler1();
        builder15.errorHandler = errorHandler29;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder33 = builder31.setServer("hi!");
        retrofit.client.Client.Provider provider34 = builder31.clientProvider;
        retrofit.RestAdapter.Log log35 = null;
        builder31.log = log35;
        java.util.concurrent.Executor executor37 = builder31.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor39 = builder38.getcallbackExecutor();
        retrofit.client.Client.Provider provider40 = null;
        builder38.clientProvider = provider40;
        retrofit.SerializedObjectSupporter serializedObjectSupporter42 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor43 = serializedObjectSupporter42.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter44 = serializedObjectSupporter42.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter45 = serializedObjectSupporter42.deserializeObjectConverter5();
        retrofit.client.Request request46 = serializedObjectSupporter42.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter47 = serializedObjectSupporter42.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter48 = serializedObjectSupporter42.deserializeObjectConverter6();
        retrofit.RestAdapter.Builder builder49 = builder38.setConverter((retrofit.converter.Converter) gsonConverter48);
        builder31.converter = gsonConverter48;
        retrofit.ErrorHandler errorHandler51 = builder31.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter52 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler53 = serializedObjectSupporter52.deserializeObjectErrorHandler1();
        retrofit.Server server54 = serializedObjectSupporter52.deserializeObjectServer1();
        builder31.server = server54;
        retrofit.RestAdapter.Builder builder56 = builder15.setServer(server54);
        retrofit.RequestInterceptor requestInterceptor57 = builder15.requestInterceptor;
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder59 = builder15.setLog(log58);
        java.util.concurrent.Executor executor60 = builder15.httpExecutor;
        retrofit.Server server61 = null;
        retrofit.client.Client.Provider provider62 = null;
        java.util.concurrent.Executor executor63 = null;
        java.util.concurrent.Executor executor64 = null;
        retrofit.RequestInterceptor requestInterceptor65 = null;
        retrofit.converter.Converter converter66 = null;
        retrofit.Profiler profiler67 = null;
        retrofit.ErrorHandler errorHandler68 = null;
        retrofit.RestAdapter.Log log69 = null;
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter(server61, provider62, executor63, executor64, requestInterceptor65, converter66, profiler67, errorHandler68, log69, logLevel70);
        retrofit.ErrorHandler errorHandler72 = restAdapter71.errorHandler;
        java.util.concurrent.Executor executor73 = restAdapter71.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel74 = restAdapter71.getLogLevel();
        retrofit.client.Client.Provider provider75 = restAdapter71.clientProvider;
        retrofit.Profiler profiler76 = restAdapter71.profiler;
        retrofit.converter.Converter converter77 = restAdapter71.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter78 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor79 = serializedObjectSupporter78.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter80 = serializedObjectSupporter78.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter81 = serializedObjectSupporter78.deserializeObjectConverter4();
        restAdapter71.serializedObjectSupporter = serializedObjectSupporter78;
        retrofit.RestAdapter.LogLevel logLevel83 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter71.setLogLevel(logLevel83);
        retrofit.RestAdapter.LogLevel logLevel85 = restAdapter71.logLevel;
        boolean boolean86 = logLevel85.log();
        retrofit.RestAdapter.Builder builder87 = builder15.setLogLevel(logLevel85);
        retrofit.RequestInterceptor requestInterceptor88 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder89 = builder15.setRequestInterceptor(requestInterceptor88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Request interceptor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(restAdapter5);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertNotNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(executor16);
        org.junit.Assert.assertNull(server22);
        org.junit.Assert.assertNotNull(requestInterceptor24);
        org.junit.Assert.assertNotNull(gsonConverter25);
        org.junit.Assert.assertNotNull(request26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Retrofit-Idle" + "'", str28, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(provider34);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNotNull(requestInterceptor43);
        org.junit.Assert.assertNotNull(gsonConverter44);
        org.junit.Assert.assertNotNull(gsonConverter45);
        org.junit.Assert.assertNotNull(request46);
        org.junit.Assert.assertNotNull(gsonConverter47);
        org.junit.Assert.assertNotNull(gsonConverter48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(errorHandler51);
        org.junit.Assert.assertNotNull(errorHandler53);
        org.junit.Assert.assertNotNull(server54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(requestInterceptor57);
        org.junit.Assert.assertNotNull(log58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(executor60);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler72);
        org.junit.Assert.assertNull(executor73);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider75);
        org.junit.Assert.assertNull(profiler76);
        org.junit.Assert.assertNull(converter77);
        org.junit.Assert.assertNotNull(requestInterceptor79);
        org.junit.Assert.assertNotNull(gsonConverter80);
        org.junit.Assert.assertNotNull(gsonConverter81);
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel85 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel85.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(builder87);
    }

    @Test
    public void test1792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1792");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.converter.Converter converter14 = restAdapter10.getconverter();
        retrofit.converter.Converter converter15 = restAdapter10.converter;
        retrofit.Server server16 = restAdapter10.getserver();
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter10.logLevel;
        retrofit.Profiler profiler19 = restAdapter10.getprofiler();
        retrofit.converter.Converter converter20 = restAdapter10.converter;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(converter15);
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(profiler19);
        org.junit.Assert.assertNull(converter20);
    }

    @Test
    public void test1793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1793");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.logLevel = logLevel23;
        retrofit.Server server26 = restAdapter10.getserver();
        retrofit.RestAdapter.RestHandler restHandler27 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter10.logLevel;
        retrofit.converter.Converter converter29 = restAdapter10.getconverter();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(server26);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(converter29);
    }

    @Test
    public void test1794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1794");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter1 = serializedObjectSupporter0.deserializeObjectConverter2();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest3();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter6();
        retrofit.RequestInterceptor requestInterceptor6 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.client.Request request9 = serializedObjectSupporter0.deserializeObjectRequest7();
        retrofit.client.Request request10 = serializedObjectSupporter0.deserializeObjectRequest8();
        org.junit.Assert.assertNotNull(gsonConverter1);
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNotNull(request10);
    }

    @Test
    public void test1795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1795");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler7 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder8 = builder0.setErrorHandler(errorHandler7);
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder11 = builder9.setServer("hi!");
        retrofit.client.Client.Provider provider12 = builder9.clientProvider;
        retrofit.RequestInterceptor requestInterceptor13 = builder9.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean15 = logLevel14.log();
        retrofit.RestAdapter.Builder builder16 = builder9.setLogLevel(logLevel14);
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor18 = builder17.getcallbackExecutor();
        retrofit.client.Client.Provider provider19 = null;
        builder17.clientProvider = provider19;
        retrofit.Server server21 = null;
        builder17.server = server21;
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        builder17.log = log23;
        builder9.log = log23;
        retrofit.RestAdapter.Builder builder26 = builder8.setLog(log23);
        retrofit.RestAdapter.Builder builder28 = builder26.setServer("Retrofit-Idle");
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor30 = serializedObjectSupporter29.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter31 = serializedObjectSupporter29.deserializeObjectConverter5();
        retrofit.client.Request request32 = serializedObjectSupporter29.deserializeObjectRequest8();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter29.deserializeObjectConverter2();
        retrofit.RestAdapter.Builder builder34 = builder28.setConverter((retrofit.converter.Converter) gsonConverter33);
        retrofit.SerializedObjectSupporter serializedObjectSupporter35 = builder28.serializedObjectSupporter;
        java.util.concurrent.Executor executor36 = builder28.gethttpExecutor();
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNotNull(errorHandler7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertNull(requestInterceptor13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(gsonConverter31);
        org.junit.Assert.assertNotNull(request32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(serializedObjectSupporter35);
        org.junit.Assert.assertNull(executor36);
    }

    @Test
    public void test1796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1796");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.util.concurrent.Executor executor11 = restAdapter10.getcallbackExecutor();
        retrofit.ErrorHandler errorHandler12 = restAdapter10.geterrorHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        java.lang.String str14 = serializedObjectSupporter13.deserializeObjectString3();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter13;
        int int16 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server17 = null;
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Log log25 = null;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server17, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log25, logLevel26);
        retrofit.ErrorHandler errorHandler28 = restAdapter27.errorHandler;
        int int29 = restAdapter27.getLOG_CHUNK_SIZE();
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = null;
        restAdapter27.serializedObjectSupporter = serializedObjectSupporter30;
        java.util.concurrent.Executor executor32 = restAdapter27.callbackExecutor;
        java.util.concurrent.Executor executor33 = restAdapter27.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter27.logLevel = logLevel34;
        restAdapter10.setLogLevel(logLevel34);
        retrofit.RestAdapter.RestHandler restHandler37 = restAdapter10.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter38 = new retrofit.SerializedObjectSupporter();
        java.lang.String str39 = serializedObjectSupporter38.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter40 = serializedObjectSupporter38.deserializeObjectConverter2();
        retrofit.converter.GsonConverter gsonConverter41 = serializedObjectSupporter38.deserializeObjectConverter7();
        restHandler37.serializedObjectSupporter = serializedObjectSupporter38;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GET" + "'", str14, "GET");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4000 + "'", int16 == 4000);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4000 + "'", int29 == 4000);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Retrofit-Idle" + "'", str39, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter40);
        org.junit.Assert.assertNotNull(gsonConverter41);
    }

    @Test
    public void test1797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1797");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.converter.Converter converter15 = restAdapter10.getconverter();
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter10.requestInterceptor;
        retrofit.Profiler profiler17 = restAdapter10.profiler;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(converter15);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNull(profiler17);
    }

    @Test
    public void test1798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1798");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.RestAdapter.Builder builder7 = builder0.setServer("Retrofit-Idle");
        retrofit.SerializedObjectSupporter serializedObjectSupporter8 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter8.deserializeObjectConverter2();
        retrofit.client.Request request10 = serializedObjectSupporter8.deserializeObjectRequest7();
        retrofit.client.Request request11 = serializedObjectSupporter8.deserializeObjectRequest2();
        retrofit.client.Request request12 = serializedObjectSupporter8.deserializeObjectRequest3();
        retrofit.converter.GsonConverter gsonConverter13 = serializedObjectSupporter8.deserializeObjectConverter1();
        retrofit.RequestInterceptor requestInterceptor14 = serializedObjectSupporter8.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter15 = serializedObjectSupporter8.deserializeObjectConverter3();
        builder0.converter = gsonConverter15;
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(gsonConverter9);
        org.junit.Assert.assertNotNull(request10);
        org.junit.Assert.assertNotNull(request11);
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(gsonConverter13);
        org.junit.Assert.assertNotNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(gsonConverter15);
    }

    @Test
    public void test1799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1799");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = null;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel13);
        builder0.logLevel = logLevel13;
        java.util.concurrent.Executor executor16 = builder0.httpExecutor;
        retrofit.RestAdapter.Log log17 = null;
        builder0.log = log17;
        retrofit.SerializedObjectSupporter serializedObjectSupporter19 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor20 = serializedObjectSupporter19.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter21 = serializedObjectSupporter19.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter19.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter23 = serializedObjectSupporter19.deserializeObjectConverter8();
        retrofit.mime.TypedString typedString24 = serializedObjectSupporter19.deserializeObjectTypedOutput2();
        java.lang.String str25 = serializedObjectSupporter19.deserializeObjectString2();
        builder0.serializedObjectSupporter = serializedObjectSupporter19;
        retrofit.client.Request request27 = serializedObjectSupporter19.deserializeObjectRequest5();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter19.deserializeObjectConverter1();
        retrofit.client.Request request29 = serializedObjectSupporter19.deserializeObjectRequest4();
        java.lang.String str30 = serializedObjectSupporter19.deserializeObjectString3();
        retrofit.converter.GsonConverter gsonConverter31 = serializedObjectSupporter19.deserializeObjectConverter7();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNotNull(requestInterceptor20);
        org.junit.Assert.assertNotNull(gsonConverter21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(gsonConverter23);
        org.junit.Assert.assertNotNull(typedString24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Retrofit-Idle" + "'", str25, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(request27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(request29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "GET" + "'", str30, "GET");
        org.junit.Assert.assertNotNull(gsonConverter31);
    }

    @Test
    public void test1800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1800");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server4 = null;
        builder0.server = server4;
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        builder0.log = log6;
        retrofit.Profiler profiler8 = builder0.profiler;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        builder0.logLevel = logLevel9;
        retrofit.client.Client.Provider provider11 = builder0.getclientProvider();
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor13 = builder12.getcallbackExecutor();
        retrofit.client.Client.Provider provider14 = null;
        builder12.clientProvider = provider14;
        retrofit.Server server16 = null;
        retrofit.client.Client.Provider provider17 = null;
        java.util.concurrent.Executor executor18 = null;
        java.util.concurrent.Executor executor19 = null;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        retrofit.converter.Converter converter21 = null;
        retrofit.Profiler profiler22 = null;
        retrofit.ErrorHandler errorHandler23 = null;
        retrofit.RestAdapter.Log log24 = null;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter(server16, provider17, executor18, executor19, requestInterceptor20, converter21, profiler22, errorHandler23, log24, logLevel25);
        builder12.logLevel = logLevel25;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor29 = builder28.getcallbackExecutor();
        retrofit.client.Client.Provider provider30 = null;
        builder28.clientProvider = provider30;
        retrofit.Server server32 = null;
        builder28.server = server32;
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        builder28.log = log34;
        log34.log("hi!");
        builder12.log = log34;
        retrofit.RestAdapter.Builder builder39 = builder0.setLog(log34);
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder42 = builder40.setServer("hi!");
        retrofit.client.Client.Provider provider43 = builder40.clientProvider;
        retrofit.RequestInterceptor requestInterceptor44 = builder40.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean46 = logLevel45.log();
        retrofit.RestAdapter.Builder builder47 = builder40.setLogLevel(logLevel45);
        retrofit.SerializedObjectSupporter serializedObjectSupporter48 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor49 = serializedObjectSupporter48.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter50 = serializedObjectSupporter48.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter51 = serializedObjectSupporter48.deserializeObjectConverter7();
        retrofit.Server server52 = serializedObjectSupporter48.deserializeObjectServer1();
        builder40.server = server52;
        builder39.server = server52;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertNull(profiler8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(provider43);
        org.junit.Assert.assertNull(requestInterceptor44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(requestInterceptor49);
        org.junit.Assert.assertNotNull(gsonConverter50);
        org.junit.Assert.assertNotNull(gsonConverter51);
        org.junit.Assert.assertNotNull(server52);
    }

    @Test
    public void test1801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1801");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString5();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.mime.TypedOutput typedOutput5 = request4.getBody();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "http://example.com/" + "'", str1, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "POST" + "'", str2, "POST");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNull(typedOutput5);
    }

    @Test
    public void test1802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1802");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler2 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest8();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest5();
        retrofit.mime.TypedOutput typedOutput5 = request4.getBody();
        java.lang.String str6 = request4.method;
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(errorHandler2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNull(typedOutput5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GET" + "'", str6, "GET");
    }

    @Test
    public void test1803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1803");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest1();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(request5);
    }

    @Test
    public void test1804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1804");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.RestAdapter restAdapter5 = builder2.build();
        retrofit.RestAdapter.Log log6 = restAdapter5.log;
        java.util.concurrent.Executor executor7 = restAdapter5.gethttpExecutor();
        java.lang.String str8 = restAdapter5.getIDLE_THREAD_NAME();
        retrofit.Server server9 = null;
        retrofit.client.Client.Provider provider10 = null;
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        retrofit.converter.Converter converter14 = null;
        retrofit.Profiler profiler15 = null;
        retrofit.ErrorHandler errorHandler16 = null;
        retrofit.RestAdapter.Log log17 = null;
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter(server9, provider10, executor11, executor12, requestInterceptor13, converter14, profiler15, errorHandler16, log17, logLevel18);
        retrofit.ErrorHandler errorHandler20 = restAdapter19.errorHandler;
        java.util.concurrent.Executor executor21 = restAdapter19.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter19.getLogLevel();
        restAdapter5.logLevel = logLevel22;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request25 = serializedObjectSupporter24.deserializeObjectRequest6();
        restAdapter5.serializedObjectSupporter = serializedObjectSupporter24;
        retrofit.Server server27 = restAdapter5.getserver();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(restAdapter5);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertNotNull(executor7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Retrofit-Idle" + "'", str8, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(request25);
        org.junit.Assert.assertNotNull(server27);
    }

    @Test
    public void test1805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1805");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter8();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest3();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest2();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter5 = serializedObjectSupporter0.deserializeObjectLogLevel1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Retrofit-Idle" + "'", str1, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
    }

    @Test
    public void test1806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1806");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        java.util.concurrent.Executor executor6 = null;
        builder0.sethttpExecutor(executor6);
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder10 = builder8.setServer("hi!");
        java.util.concurrent.Executor executor11 = null;
        builder10.callbackExecutor = executor11;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor14 = serializedObjectSupporter13.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder15 = builder10.setRequestInterceptor(requestInterceptor14);
        retrofit.RestAdapter.Builder builder16 = builder0.setRequestInterceptor(requestInterceptor14);
        java.util.concurrent.Executor executor17 = null;
        builder16.callbackExecutor = executor17;
        java.util.concurrent.Executor executor19 = null;
        builder16.callbackExecutor = executor19;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder23 = builder21.setServer("hi!");
        java.util.concurrent.Executor executor24 = null;
        builder23.callbackExecutor = executor24;
        retrofit.RestAdapter restAdapter26 = builder23.build();
        retrofit.RestAdapter.Log log27 = restAdapter26.log;
        java.util.concurrent.Executor executor28 = restAdapter26.gethttpExecutor();
        java.lang.String str29 = restAdapter26.getIDLE_THREAD_NAME();
        retrofit.RestAdapter.Log log30 = restAdapter26.log;
        retrofit.RestAdapter.Log log31 = restAdapter26.log;
        builder16.log = log31;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = null;
        builder33.sethttpExecutor(executor34);
        retrofit.converter.Converter converter36 = builder33.converter;
        java.util.concurrent.Executor executor37 = builder33.getcallbackExecutor();
        retrofit.client.Client.Provider provider38 = builder33.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter39 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request40 = serializedObjectSupporter39.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler41 = serializedObjectSupporter39.deserializeObjectErrorHandler1();
        builder33.errorHandler = errorHandler41;
        retrofit.Server server43 = builder33.server;
        builder33.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor45 = builder33.requestInterceptor;
        java.util.concurrent.Executor executor46 = builder33.getcallbackExecutor();
        builder16.callbackExecutor = executor46;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter48 = builder16.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(restAdapter26);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNotNull(executor28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Retrofit-Idle" + "'", str29, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNull(converter36);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNull(provider38);
        org.junit.Assert.assertNotNull(request40);
        org.junit.Assert.assertNotNull(errorHandler41);
        org.junit.Assert.assertNull(server43);
        org.junit.Assert.assertNotNull(requestInterceptor45);
        org.junit.Assert.assertNotNull(executor46);
    }

    @Test
    public void test1807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1807");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.converter.Converter converter3 = builder2.converter;
        java.util.concurrent.Executor executor4 = builder2.httpExecutor;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
    }

    @Test
    public void test1808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1808");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = null;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter13;
        retrofit.client.Client.Provider provider15 = restAdapter10.getclientProvider();
        retrofit.ErrorHandler errorHandler16 = restAdapter10.geterrorHandler();
        retrofit.RestAdapter.Log log17 = restAdapter10.log;
        java.util.concurrent.Executor executor18 = restAdapter10.gethttpExecutor();
        retrofit.client.Client.Provider provider19 = restAdapter10.getclientProvider();
        java.util.concurrent.Executor executor20 = restAdapter10.gethttpExecutor();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNull(log17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(provider19);
        org.junit.Assert.assertNull(executor20);
    }

    @Test
    public void test1809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1809");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString3();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString4();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        java.util.List<retrofit.client.Header> headerList4 = request3.headers;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "GET" + "'", str1, "GET");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "http://example.com/" + "'", str2, "http://example.com/");
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(headerList4);
    }

    @Test
    public void test1810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1810");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter10.getLogLevel();
        retrofit.Server server15 = restAdapter10.getserver();
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request17 = serializedObjectSupporter16.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler18 = serializedObjectSupporter16.deserializeObjectErrorHandler1();
        retrofit.mime.TypedString typedString19 = serializedObjectSupporter16.deserializeObjectTypedOutput2();
        retrofit.client.Request request20 = serializedObjectSupporter16.deserializeObjectRequest6();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter16;
        retrofit.RequestInterceptor requestInterceptor22 = restAdapter10.getrequestInterceptor();
        int int23 = restAdapter10.getLOG_CHUNK_SIZE();
        java.util.concurrent.Executor executor24 = restAdapter10.getcallbackExecutor();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertNotNull(errorHandler18);
        org.junit.Assert.assertNotNull(typedString19);
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4000 + "'", int23 == 4000);
        org.junit.Assert.assertNull(executor24);
    }

    @Test
    public void test1811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1811");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.client.Client.Provider provider15 = restAdapter10.getclientProvider();
        java.lang.String str16 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.Profiler profiler17 = restAdapter10.getprofiler();
        java.util.concurrent.Executor executor18 = restAdapter10.httpExecutor;
        java.util.concurrent.Executor executor19 = restAdapter10.getcallbackExecutor();
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Log log28 = null;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log28, logLevel29);
        retrofit.ErrorHandler errorHandler31 = restAdapter30.errorHandler;
        int int32 = restAdapter30.getLOG_CHUNK_SIZE();
        retrofit.Server server33 = restAdapter30.getserver();
        java.lang.String str34 = restAdapter30.getIDLE_THREAD_NAME();
        java.util.concurrent.Executor executor35 = restAdapter30.getcallbackExecutor();
        retrofit.Server server36 = null;
        retrofit.client.Client.Provider provider37 = null;
        java.util.concurrent.Executor executor38 = null;
        java.util.concurrent.Executor executor39 = null;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        retrofit.converter.Converter converter41 = null;
        retrofit.Profiler profiler42 = null;
        retrofit.ErrorHandler errorHandler43 = null;
        retrofit.RestAdapter.Log log44 = null;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter(server36, provider37, executor38, executor39, requestInterceptor40, converter41, profiler42, errorHandler43, log44, logLevel45);
        retrofit.ErrorHandler errorHandler47 = restAdapter46.errorHandler;
        java.util.concurrent.Executor executor48 = restAdapter46.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel49 = restAdapter46.getLogLevel();
        retrofit.client.Client.Provider provider50 = restAdapter46.clientProvider;
        retrofit.Profiler profiler51 = restAdapter46.profiler;
        retrofit.converter.Converter converter52 = restAdapter46.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter53 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor54 = serializedObjectSupporter53.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter55 = serializedObjectSupporter53.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter56 = serializedObjectSupporter53.deserializeObjectConverter4();
        restAdapter46.serializedObjectSupporter = serializedObjectSupporter53;
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter46.setLogLevel(logLevel58);
        restAdapter30.setLogLevel(logLevel58);
        retrofit.Server server61 = null;
        retrofit.client.Client.Provider provider62 = null;
        java.util.concurrent.Executor executor63 = null;
        java.util.concurrent.Executor executor64 = null;
        retrofit.RequestInterceptor requestInterceptor65 = null;
        retrofit.converter.Converter converter66 = null;
        retrofit.Profiler profiler67 = null;
        retrofit.ErrorHandler errorHandler68 = null;
        retrofit.RestAdapter.Log log69 = null;
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter(server61, provider62, executor63, executor64, requestInterceptor65, converter66, profiler67, errorHandler68, log69, logLevel70);
        retrofit.ErrorHandler errorHandler72 = restAdapter71.errorHandler;
        int int73 = restAdapter71.getLOG_CHUNK_SIZE();
        java.lang.String str74 = restAdapter71.getTHREAD_PREFIX();
        retrofit.RequestInterceptor requestInterceptor75 = restAdapter71.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel76 = restAdapter71.getLogLevel();
        restAdapter30.logLevel = logLevel76;
        restAdapter10.setLogLevel(logLevel76);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Retrofit-Idle" + "'", str16, "Retrofit-Idle");
        org.junit.Assert.assertNull(profiler17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 4000 + "'", int32 == 4000);
        org.junit.Assert.assertNull(server33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Retrofit-Idle" + "'", str34, "Retrofit-Idle");
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler47);
        org.junit.Assert.assertNull(executor48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider50);
        org.junit.Assert.assertNull(profiler51);
        org.junit.Assert.assertNull(converter52);
        org.junit.Assert.assertNotNull(requestInterceptor54);
        org.junit.Assert.assertNotNull(gsonConverter55);
        org.junit.Assert.assertNotNull(gsonConverter56);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 4000 + "'", int73 == 4000);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Retrofit-" + "'", str74, "Retrofit-");
        org.junit.Assert.assertNull(requestInterceptor75);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test1812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1812");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.Server server5 = null;
        builder0.server = server5;
        retrofit.SerializedObjectSupporter serializedObjectSupporter7 = new retrofit.SerializedObjectSupporter();
        java.lang.String str8 = serializedObjectSupporter7.deserializeObjectString4();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter7.deserializeObjectConverter8();
        builder0.converter = gsonConverter9;
        retrofit.RestAdapter.Log log11 = builder0.log;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder14 = builder12.setServer("hi!");
        java.util.concurrent.Executor executor15 = null;
        builder14.callbackExecutor = executor15;
        retrofit.RestAdapter restAdapter17 = builder14.build();
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor19 = null;
        builder18.sethttpExecutor(executor19);
        retrofit.Profiler profiler21 = null;
        builder18.profiler = profiler21;
        retrofit.RestAdapter.Log log23 = builder18.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder26 = builder18.setErrorHandler(errorHandler25);
        retrofit.RestAdapter.Builder builder27 = builder14.setErrorHandler(errorHandler25);
        java.util.concurrent.Executor executor28 = builder27.callbackExecutor;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor30 = null;
        builder29.sethttpExecutor(executor30);
        retrofit.Profiler profiler32 = null;
        builder29.profiler = profiler32;
        retrofit.Server server34 = builder29.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter35 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor36 = serializedObjectSupporter35.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter37 = serializedObjectSupporter35.deserializeObjectConverter7();
        retrofit.client.Request request38 = serializedObjectSupporter35.deserializeObjectRequest1();
        builder29.serializedObjectSupporter = serializedObjectSupporter35;
        java.lang.String str40 = serializedObjectSupporter35.deserializeObjectString2();
        retrofit.ErrorHandler errorHandler41 = serializedObjectSupporter35.deserializeObjectErrorHandler1();
        builder27.errorHandler = errorHandler41;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder45 = builder43.setServer("hi!");
        retrofit.client.Client.Provider provider46 = builder43.clientProvider;
        retrofit.RestAdapter.Log log47 = null;
        builder43.log = log47;
        java.util.concurrent.Executor executor49 = builder43.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor51 = builder50.getcallbackExecutor();
        retrofit.client.Client.Provider provider52 = null;
        builder50.clientProvider = provider52;
        retrofit.SerializedObjectSupporter serializedObjectSupporter54 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor55 = serializedObjectSupporter54.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter56 = serializedObjectSupporter54.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter57 = serializedObjectSupporter54.deserializeObjectConverter5();
        retrofit.client.Request request58 = serializedObjectSupporter54.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter59 = serializedObjectSupporter54.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter60 = serializedObjectSupporter54.deserializeObjectConverter6();
        retrofit.RestAdapter.Builder builder61 = builder50.setConverter((retrofit.converter.Converter) gsonConverter60);
        builder43.converter = gsonConverter60;
        retrofit.ErrorHandler errorHandler63 = builder43.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter64 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler65 = serializedObjectSupporter64.deserializeObjectErrorHandler1();
        retrofit.Server server66 = serializedObjectSupporter64.deserializeObjectServer1();
        builder43.server = server66;
        retrofit.RestAdapter.Builder builder68 = builder27.setServer(server66);
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor70 = builder69.getcallbackExecutor();
        retrofit.client.Client.Provider provider71 = null;
        builder69.clientProvider = provider71;
        retrofit.Server server73 = null;
        builder69.server = server73;
        retrofit.RestAdapter.Log log75 = retrofit.RestAdapter.Log.NONE;
        builder69.log = log75;
        log75.log("hi!");
        builder27.log = log75;
        java.util.concurrent.Executor executor80 = builder27.callbackExecutor;
        builder0.httpExecutor = executor80;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://example.com/" + "'", str8, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter9);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(restAdapter17);
        org.junit.Assert.assertNull(log23);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(executor28);
        org.junit.Assert.assertNull(server34);
        org.junit.Assert.assertNotNull(requestInterceptor36);
        org.junit.Assert.assertNotNull(gsonConverter37);
        org.junit.Assert.assertNotNull(request38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Retrofit-Idle" + "'", str40, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler41);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(provider46);
        org.junit.Assert.assertNull(executor49);
        org.junit.Assert.assertNull(executor51);
        org.junit.Assert.assertNotNull(requestInterceptor55);
        org.junit.Assert.assertNotNull(gsonConverter56);
        org.junit.Assert.assertNotNull(gsonConverter57);
        org.junit.Assert.assertNotNull(request58);
        org.junit.Assert.assertNotNull(gsonConverter59);
        org.junit.Assert.assertNotNull(gsonConverter60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(errorHandler63);
        org.junit.Assert.assertNotNull(errorHandler65);
        org.junit.Assert.assertNotNull(server66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNull(executor70);
        org.junit.Assert.assertNotNull(log75);
        org.junit.Assert.assertNotNull(executor80);
    }

    @Test
    public void test1813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1813");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter6();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest8();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString3();
        retrofit.ErrorHandler errorHandler7 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter0.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter0.deserializeObjectConverter1();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GET" + "'", str6, "GET");
        org.junit.Assert.assertNotNull(errorHandler7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(gsonConverter9);
    }

    @Test
    public void test1814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1814");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler13 = restAdapter10.geterrorHandler();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter10.requestInterceptor;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNull(requestInterceptor15);
    }

    @Test
    public void test1815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1815");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.Profiler profiler15 = restAdapter10.profiler;
        retrofit.converter.Converter converter16 = restAdapter10.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter17.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter17.deserializeObjectConverter4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter17;
        retrofit.RequestInterceptor requestInterceptor22 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter23 = serializedObjectSupporter17.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter24 = serializedObjectSupporter17.deserializeObjectConverter6();
        retrofit.client.Request request25 = serializedObjectSupporter17.deserializeObjectRequest6();
        retrofit.mime.TypedOutput typedOutput26 = request25.getBody();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNotNull(requestInterceptor22);
        org.junit.Assert.assertNotNull(gsonConverter23);
        org.junit.Assert.assertNotNull(gsonConverter24);
        org.junit.Assert.assertNotNull(request25);
        org.junit.Assert.assertNull(typedOutput26);
    }

    @Test
    public void test1816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1816");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.RestAdapter restAdapter5 = builder2.build();
        retrofit.RestAdapter.Log log6 = restAdapter5.log;
        java.util.concurrent.Executor executor7 = restAdapter5.gethttpExecutor();
        java.lang.String str8 = restAdapter5.getIDLE_THREAD_NAME();
        retrofit.converter.Converter converter9 = restAdapter5.getconverter();
        retrofit.converter.Converter converter10 = restAdapter5.converter;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(restAdapter5);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertNotNull(executor7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Retrofit-Idle" + "'", str8, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(converter9);
        org.junit.Assert.assertNotNull(converter10);
    }

    @Test
    public void test1817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1817");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.SerializedObjectSupporter serializedObjectSupporter5 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor6 = serializedObjectSupporter5.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder7 = builder2.setRequestInterceptor(requestInterceptor6);
        retrofit.Server server8 = builder7.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter9 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter10 = serializedObjectSupporter9.deserializeObjectConverter2();
        builder7.serializedObjectSupporter = serializedObjectSupporter9;
        retrofit.client.Request request12 = serializedObjectSupporter9.deserializeObjectRequest5();
        retrofit.client.Request request13 = serializedObjectSupporter9.deserializeObjectRequest3();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(server8);
        org.junit.Assert.assertNotNull(gsonConverter10);
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(request13);
    }

    @Test
    public void test1818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1818");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel3 = builder2.logLevel;
        java.util.concurrent.Executor executor4 = builder2.getcallbackExecutor();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor4);
    }

    @Test
    public void test1819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1819");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.RestAdapter restAdapter5 = builder2.build();
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.sethttpExecutor(executor7);
        retrofit.Profiler profiler9 = null;
        builder6.profiler = profiler9;
        retrofit.RestAdapter.Log log11 = builder6.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler13 = serializedObjectSupporter12.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder14 = builder6.setErrorHandler(errorHandler13);
        retrofit.RestAdapter.Builder builder15 = builder2.setErrorHandler(errorHandler13);
        java.util.concurrent.Executor executor16 = builder15.callbackExecutor;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor18 = null;
        builder17.sethttpExecutor(executor18);
        retrofit.Profiler profiler20 = null;
        builder17.profiler = profiler20;
        retrofit.Server server22 = builder17.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter23 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor24 = serializedObjectSupporter23.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter25 = serializedObjectSupporter23.deserializeObjectConverter7();
        retrofit.client.Request request26 = serializedObjectSupporter23.deserializeObjectRequest1();
        builder17.serializedObjectSupporter = serializedObjectSupporter23;
        java.lang.String str28 = serializedObjectSupporter23.deserializeObjectString2();
        retrofit.ErrorHandler errorHandler29 = serializedObjectSupporter23.deserializeObjectErrorHandler1();
        builder15.errorHandler = errorHandler29;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder33 = builder31.setServer("hi!");
        retrofit.client.Client.Provider provider34 = builder31.clientProvider;
        retrofit.RestAdapter.Log log35 = null;
        builder31.log = log35;
        java.util.concurrent.Executor executor37 = builder31.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor39 = builder38.getcallbackExecutor();
        retrofit.client.Client.Provider provider40 = null;
        builder38.clientProvider = provider40;
        retrofit.SerializedObjectSupporter serializedObjectSupporter42 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor43 = serializedObjectSupporter42.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter44 = serializedObjectSupporter42.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter45 = serializedObjectSupporter42.deserializeObjectConverter5();
        retrofit.client.Request request46 = serializedObjectSupporter42.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter47 = serializedObjectSupporter42.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter48 = serializedObjectSupporter42.deserializeObjectConverter6();
        retrofit.RestAdapter.Builder builder49 = builder38.setConverter((retrofit.converter.Converter) gsonConverter48);
        builder31.converter = gsonConverter48;
        retrofit.ErrorHandler errorHandler51 = builder31.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter52 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler53 = serializedObjectSupporter52.deserializeObjectErrorHandler1();
        retrofit.Server server54 = serializedObjectSupporter52.deserializeObjectServer1();
        builder31.server = server54;
        retrofit.RestAdapter.Builder builder56 = builder15.setServer(server54);
        retrofit.SerializedObjectSupporter serializedObjectSupporter57 = builder15.serializedObjectSupporter;
        retrofit.Profiler profiler58 = null;
        builder15.profiler = profiler58;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(restAdapter5);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertNotNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(executor16);
        org.junit.Assert.assertNull(server22);
        org.junit.Assert.assertNotNull(requestInterceptor24);
        org.junit.Assert.assertNotNull(gsonConverter25);
        org.junit.Assert.assertNotNull(request26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Retrofit-Idle" + "'", str28, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(provider34);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNotNull(requestInterceptor43);
        org.junit.Assert.assertNotNull(gsonConverter44);
        org.junit.Assert.assertNotNull(gsonConverter45);
        org.junit.Assert.assertNotNull(request46);
        org.junit.Assert.assertNotNull(gsonConverter47);
        org.junit.Assert.assertNotNull(gsonConverter48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(errorHandler51);
        org.junit.Assert.assertNotNull(errorHandler53);
        org.junit.Assert.assertNotNull(server54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(serializedObjectSupporter57);
    }

    @Test
    public void test1820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1820");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server4 = null;
        builder0.server = server4;
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        builder0.log = log6;
        retrofit.converter.Converter converter8 = builder0.converter;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = null;
        builder9.sethttpExecutor(executor10);
        retrofit.converter.Converter converter12 = builder9.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor14 = serializedObjectSupporter13.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter15 = serializedObjectSupporter13.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter13.deserializeObjectConverter7();
        retrofit.Server server17 = serializedObjectSupporter13.deserializeObjectServer1();
        retrofit.converter.GsonConverter gsonConverter18 = serializedObjectSupporter13.deserializeObjectConverter7();
        retrofit.ErrorHandler errorHandler19 = serializedObjectSupporter13.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder20 = builder9.setErrorHandler(errorHandler19);
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor22 = null;
        builder21.sethttpExecutor(executor22);
        retrofit.converter.Converter converter24 = builder21.converter;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = null;
        builder25.sethttpExecutor(executor26);
        retrofit.converter.Converter converter28 = builder25.converter;
        java.util.concurrent.Executor executor29 = builder25.getcallbackExecutor();
        retrofit.client.Client.Provider provider30 = builder25.getclientProvider();
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder33 = builder31.setServer("hi!");
        java.util.concurrent.Executor executor34 = null;
        builder33.callbackExecutor = executor34;
        retrofit.RestAdapter restAdapter36 = builder33.build();
        retrofit.RestAdapter.Log log37 = restAdapter36.log;
        java.util.concurrent.Executor executor38 = restAdapter36.gethttpExecutor();
        retrofit.client.Client.Provider provider39 = restAdapter36.getclientProvider();
        builder25.setclientProvider(provider39);
        retrofit.RestAdapter.Builder builder41 = builder21.setClient(provider39);
        builder20.clientProvider = provider39;
        retrofit.RestAdapter.Builder builder43 = builder0.setClient(provider39);
        retrofit.RestAdapter.Builder builder45 = builder43.setServer("hi!");
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder48 = builder46.setServer("hi!");
        java.util.concurrent.Executor executor49 = null;
        builder48.callbackExecutor = executor49;
        retrofit.RestAdapter restAdapter51 = builder48.build();
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor53 = null;
        builder52.sethttpExecutor(executor53);
        retrofit.Profiler profiler55 = null;
        builder52.profiler = profiler55;
        retrofit.RestAdapter.Log log57 = builder52.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter58 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler59 = serializedObjectSupporter58.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder60 = builder52.setErrorHandler(errorHandler59);
        retrofit.RestAdapter.Builder builder61 = builder48.setErrorHandler(errorHandler59);
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder63 = builder61.setLogLevel(logLevel62);
        java.util.concurrent.Executor executor64 = builder63.getcallbackExecutor();
        builder43.sethttpExecutor(executor64);
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNull(converter12);
        org.junit.Assert.assertNotNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(gsonConverter15);
        org.junit.Assert.assertNotNull(gsonConverter16);
        org.junit.Assert.assertNotNull(server17);
        org.junit.Assert.assertNotNull(gsonConverter18);
        org.junit.Assert.assertNotNull(errorHandler19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(converter24);
        org.junit.Assert.assertNull(converter28);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(provider30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(restAdapter36);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNotNull(executor38);
        org.junit.Assert.assertNotNull(provider39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(restAdapter51);
        org.junit.Assert.assertNull(log57);
        org.junit.Assert.assertNotNull(errorHandler59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(executor64);
    }

    @Test
    public void test1821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1821");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RestAdapter.Log log4 = null;
        builder0.log = log4;
        java.util.concurrent.Executor executor6 = builder0.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = builder7.getcallbackExecutor();
        retrofit.client.Client.Provider provider9 = null;
        builder7.clientProvider = provider9;
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor12 = serializedObjectSupporter11.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter13 = serializedObjectSupporter11.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter11.deserializeObjectConverter5();
        retrofit.client.Request request15 = serializedObjectSupporter11.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter11.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter11.deserializeObjectConverter6();
        retrofit.RestAdapter.Builder builder18 = builder7.setConverter((retrofit.converter.Converter) gsonConverter17);
        builder0.converter = gsonConverter17;
        retrofit.ErrorHandler errorHandler20 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder23 = builder21.setServer("hi!");
        java.util.concurrent.Executor executor24 = null;
        builder23.callbackExecutor = executor24;
        retrofit.RestAdapter restAdapter26 = builder23.build();
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor28 = null;
        builder27.sethttpExecutor(executor28);
        retrofit.Profiler profiler30 = null;
        builder27.profiler = profiler30;
        retrofit.RestAdapter.Log log32 = builder27.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter33 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler34 = serializedObjectSupporter33.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder35 = builder27.setErrorHandler(errorHandler34);
        retrofit.RestAdapter.Builder builder36 = builder23.setErrorHandler(errorHandler34);
        java.util.concurrent.Executor executor37 = builder36.callbackExecutor;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor39 = null;
        builder38.sethttpExecutor(executor39);
        retrofit.Profiler profiler41 = null;
        builder38.profiler = profiler41;
        retrofit.Server server43 = builder38.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter44 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor45 = serializedObjectSupporter44.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter46 = serializedObjectSupporter44.deserializeObjectConverter7();
        retrofit.client.Request request47 = serializedObjectSupporter44.deserializeObjectRequest1();
        builder38.serializedObjectSupporter = serializedObjectSupporter44;
        java.lang.String str49 = serializedObjectSupporter44.deserializeObjectString2();
        retrofit.ErrorHandler errorHandler50 = serializedObjectSupporter44.deserializeObjectErrorHandler1();
        builder36.errorHandler = errorHandler50;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder54 = builder52.setServer("hi!");
        retrofit.client.Client.Provider provider55 = builder52.clientProvider;
        retrofit.RestAdapter.Log log56 = null;
        builder52.log = log56;
        java.util.concurrent.Executor executor58 = builder52.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor60 = builder59.getcallbackExecutor();
        retrofit.client.Client.Provider provider61 = null;
        builder59.clientProvider = provider61;
        retrofit.SerializedObjectSupporter serializedObjectSupporter63 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor64 = serializedObjectSupporter63.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter65 = serializedObjectSupporter63.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter66 = serializedObjectSupporter63.deserializeObjectConverter5();
        retrofit.client.Request request67 = serializedObjectSupporter63.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter68 = serializedObjectSupporter63.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter69 = serializedObjectSupporter63.deserializeObjectConverter6();
        retrofit.RestAdapter.Builder builder70 = builder59.setConverter((retrofit.converter.Converter) gsonConverter69);
        builder52.converter = gsonConverter69;
        retrofit.ErrorHandler errorHandler72 = builder52.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter73 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler74 = serializedObjectSupporter73.deserializeObjectErrorHandler1();
        retrofit.Server server75 = serializedObjectSupporter73.deserializeObjectServer1();
        builder52.server = server75;
        retrofit.RestAdapter.Builder builder77 = builder36.setServer(server75);
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor79 = builder78.getcallbackExecutor();
        retrofit.client.Client.Provider provider80 = null;
        builder78.clientProvider = provider80;
        retrofit.Server server82 = null;
        builder78.server = server82;
        retrofit.RestAdapter.Log log84 = retrofit.RestAdapter.Log.NONE;
        builder78.log = log84;
        log84.log("hi!");
        builder36.log = log84;
        java.util.concurrent.Executor executor89 = builder36.callbackExecutor;
        builder0.setcallbackExecutor(executor89);
        retrofit.client.Client.Provider provider91 = builder0.getclientProvider();
        retrofit.Profiler profiler92 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder93 = builder0.setProfiler(profiler92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNotNull(requestInterceptor12);
        org.junit.Assert.assertNotNull(gsonConverter13);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(gsonConverter16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(restAdapter26);
        org.junit.Assert.assertNull(log32);
        org.junit.Assert.assertNotNull(errorHandler34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(executor37);
        org.junit.Assert.assertNull(server43);
        org.junit.Assert.assertNotNull(requestInterceptor45);
        org.junit.Assert.assertNotNull(gsonConverter46);
        org.junit.Assert.assertNotNull(request47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Retrofit-Idle" + "'", str49, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler50);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(provider55);
        org.junit.Assert.assertNull(executor58);
        org.junit.Assert.assertNull(executor60);
        org.junit.Assert.assertNotNull(requestInterceptor64);
        org.junit.Assert.assertNotNull(gsonConverter65);
        org.junit.Assert.assertNotNull(gsonConverter66);
        org.junit.Assert.assertNotNull(request67);
        org.junit.Assert.assertNotNull(gsonConverter68);
        org.junit.Assert.assertNotNull(gsonConverter69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(errorHandler72);
        org.junit.Assert.assertNotNull(errorHandler74);
        org.junit.Assert.assertNotNull(server75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNull(executor79);
        org.junit.Assert.assertNotNull(log84);
        org.junit.Assert.assertNotNull(executor89);
        org.junit.Assert.assertNull(provider91);
    }

    @Test
    public void test1822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1822");
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request5 = serializedObjectSupporter4.deserializeObjectRequest6();
        java.util.List<retrofit.client.Header> headerList6 = request5.headers;
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", headerList6, typedOutput7);
        retrofit.SerializedObjectSupporter serializedObjectSupporter9 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request10 = serializedObjectSupporter9.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler11 = serializedObjectSupporter9.deserializeObjectErrorHandler1();
        retrofit.mime.TypedString typedString12 = serializedObjectSupporter9.deserializeObjectTypedOutput2();
        retrofit.client.Request request13 = new retrofit.client.Request("http://example.com/", "", headerList6, (retrofit.mime.TypedOutput) typedString12);
        java.util.List<retrofit.client.Header> headerList14 = request13.headers;
        retrofit.mime.TypedOutput typedOutput15 = request13.getBody();
        retrofit.mime.TypedOutput typedOutput16 = request13.getBody();
        java.lang.String str17 = request13.getMethod();
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(headerList6);
        org.junit.Assert.assertNotNull(request10);
        org.junit.Assert.assertNotNull(errorHandler11);
        org.junit.Assert.assertNotNull(typedString12);
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNotNull(typedOutput15);
        org.junit.Assert.assertNotNull(typedOutput16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "http://example.com/" + "'", str17, "http://example.com/");
    }

    @Test
    public void test1823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1823");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        java.util.concurrent.Executor executor4 = null;
        builder0.setcallbackExecutor(executor4);
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder7 = builder0.setLog(log6);
        retrofit.client.Client.Provider provider8 = builder0.clientProvider;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler10 = builder9.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request12 = serializedObjectSupporter11.deserializeObjectRequest6();
        builder9.serializedObjectSupporter = serializedObjectSupporter11;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = null;
        builder14.sethttpExecutor(executor15);
        retrofit.Profiler profiler17 = null;
        builder14.profiler = profiler17;
        retrofit.RestAdapter.Log log19 = builder14.log;
        retrofit.client.Client.Provider provider20 = null;
        builder14.setclientProvider(provider20);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder24 = builder22.setServer("hi!");
        java.util.concurrent.Executor executor25 = null;
        builder24.callbackExecutor = executor25;
        retrofit.SerializedObjectSupporter serializedObjectSupporter27 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor28 = serializedObjectSupporter27.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder29 = builder24.setRequestInterceptor(requestInterceptor28);
        retrofit.Server server30 = builder29.server;
        builder14.server = server30;
        builder9.server = server30;
        builder0.server = server30;
        retrofit.Server server34 = null;
        retrofit.client.Client.Provider provider35 = null;
        java.util.concurrent.Executor executor36 = null;
        java.util.concurrent.Executor executor37 = null;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        retrofit.converter.Converter converter39 = null;
        retrofit.Profiler profiler40 = null;
        retrofit.ErrorHandler errorHandler41 = null;
        retrofit.RestAdapter.Log log42 = null;
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter(server34, provider35, executor36, executor37, requestInterceptor38, converter39, profiler40, errorHandler41, log42, logLevel43);
        retrofit.ErrorHandler errorHandler45 = restAdapter44.errorHandler;
        retrofit.ErrorHandler errorHandler46 = restAdapter44.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler47 = restAdapter44.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter48 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request49 = serializedObjectSupporter48.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter50 = serializedObjectSupporter48.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter51 = serializedObjectSupporter48.deserializeObjectConverter1();
        restHandler47.serializedObjectSupporter = serializedObjectSupporter48;
        retrofit.SerializedObjectSupporter serializedObjectSupporter53 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor54 = serializedObjectSupporter53.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter55 = serializedObjectSupporter53.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter56 = serializedObjectSupporter53.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter57 = serializedObjectSupporter53.deserializeObjectConverter8();
        restHandler47.serializedObjectSupporter = serializedObjectSupporter53;
        retrofit.SerializedObjectSupporter serializedObjectSupporter59 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor60 = serializedObjectSupporter59.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter61 = serializedObjectSupporter59.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter62 = serializedObjectSupporter59.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter63 = serializedObjectSupporter59.deserializeObjectConverter8();
        restHandler47.serializedObjectSupporter = serializedObjectSupporter59;
        retrofit.client.Request request65 = serializedObjectSupporter59.deserializeObjectRequest8();
        retrofit.Server server66 = serializedObjectSupporter59.deserializeObjectServer1();
        builder0.server = server66;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNull(log19);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(requestInterceptor28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(server30);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler45);
        org.junit.Assert.assertNull(errorHandler46);
        org.junit.Assert.assertNotNull(request49);
        org.junit.Assert.assertNotNull(gsonConverter50);
        org.junit.Assert.assertNotNull(gsonConverter51);
        org.junit.Assert.assertNotNull(requestInterceptor54);
        org.junit.Assert.assertNotNull(gsonConverter55);
        org.junit.Assert.assertNotNull(gsonConverter56);
        org.junit.Assert.assertNotNull(gsonConverter57);
        org.junit.Assert.assertNotNull(requestInterceptor60);
        org.junit.Assert.assertNotNull(gsonConverter61);
        org.junit.Assert.assertNotNull(gsonConverter62);
        org.junit.Assert.assertNotNull(gsonConverter63);
        org.junit.Assert.assertNotNull(request65);
        org.junit.Assert.assertNotNull(server66);
    }

    @Test
    public void test1824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1824");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        java.lang.String str13 = restAdapter10.getTHREAD_PREFIX();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.requestInterceptor;
        retrofit.client.Client.Provider provider15 = restAdapter10.clientProvider;
        int int16 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter10.getLogLevel();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-" + "'", str13, "Retrofit-");
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4000 + "'", int16 == 4000);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test1825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1825");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter8();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest1();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter7();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString1();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Retrofit-" + "'", str6, "Retrofit-");
    }

    @Test
    public void test1826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1826");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.RestAdapter restAdapter5 = builder2.build();
        retrofit.RestAdapter.Log log6 = restAdapter5.log;
        java.util.concurrent.Executor executor7 = restAdapter5.gethttpExecutor();
        java.lang.String str8 = restAdapter5.getIDLE_THREAD_NAME();
        retrofit.Server server9 = null;
        retrofit.client.Client.Provider provider10 = null;
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        retrofit.converter.Converter converter14 = null;
        retrofit.Profiler profiler15 = null;
        retrofit.ErrorHandler errorHandler16 = null;
        retrofit.RestAdapter.Log log17 = null;
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter(server9, provider10, executor11, executor12, requestInterceptor13, converter14, profiler15, errorHandler16, log17, logLevel18);
        retrofit.ErrorHandler errorHandler20 = restAdapter19.errorHandler;
        java.util.concurrent.Executor executor21 = restAdapter19.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter19.getLogLevel();
        restAdapter5.logLevel = logLevel22;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request25 = serializedObjectSupporter24.deserializeObjectRequest6();
        restAdapter5.serializedObjectSupporter = serializedObjectSupporter24;
        retrofit.converter.GsonConverter gsonConverter27 = serializedObjectSupporter24.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter24.deserializeObjectConverter1();
        retrofit.client.Request request29 = serializedObjectSupporter24.deserializeObjectRequest1();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(restAdapter5);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertNotNull(executor7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Retrofit-Idle" + "'", str8, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(request25);
        org.junit.Assert.assertNotNull(gsonConverter27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(request29);
    }

    @Test
    public void test1827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1827");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter10.getLogLevel();
        retrofit.Server server15 = restAdapter10.getserver();
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        java.lang.String str17 = serializedObjectSupporter16.deserializeObjectString3();
        java.lang.String str18 = serializedObjectSupporter16.deserializeObjectString4();
        retrofit.client.Request request19 = serializedObjectSupporter16.deserializeObjectRequest2();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter16.deserializeObjectConverter1();
        retrofit.converter.GsonConverter gsonConverter21 = serializedObjectSupporter16.deserializeObjectConverter5();
        retrofit.client.Request request22 = serializedObjectSupporter16.deserializeObjectRequest5();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter16;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GET" + "'", str17, "GET");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
        org.junit.Assert.assertNotNull(request19);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNotNull(gsonConverter21);
        org.junit.Assert.assertNotNull(request22);
    }

    @Test
    public void test1828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1828");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        java.util.concurrent.Executor executor6 = null;
        builder0.sethttpExecutor(executor6);
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder10 = builder8.setServer("hi!");
        java.util.concurrent.Executor executor11 = null;
        builder10.callbackExecutor = executor11;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor14 = serializedObjectSupporter13.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder15 = builder10.setRequestInterceptor(requestInterceptor14);
        retrofit.RestAdapter.Builder builder16 = builder0.setRequestInterceptor(requestInterceptor14);
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean18 = logLevel17.log();
        builder0.logLevel = logLevel17;
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter23 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.client.Request request24 = serializedObjectSupporter20.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter25 = serializedObjectSupporter20.deserializeObjectConverter3();
        retrofit.client.Request request26 = serializedObjectSupporter20.deserializeObjectRequest4();
        retrofit.client.Request request27 = serializedObjectSupporter20.deserializeObjectRequest2();
        builder0.serializedObjectSupporter = serializedObjectSupporter20;
        retrofit.converter.GsonConverter gsonConverter29 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.client.Request request30 = serializedObjectSupporter20.deserializeObjectRequest1();
        retrofit.client.Request request31 = serializedObjectSupporter20.deserializeObjectRequest7();
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(gsonConverter23);
        org.junit.Assert.assertNotNull(request24);
        org.junit.Assert.assertNotNull(gsonConverter25);
        org.junit.Assert.assertNotNull(request26);
        org.junit.Assert.assertNotNull(request27);
        org.junit.Assert.assertNotNull(gsonConverter29);
        org.junit.Assert.assertNotNull(request30);
        org.junit.Assert.assertNotNull(request31);
    }

    @Test
    public void test1829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1829");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler7 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder8 = builder0.setErrorHandler(errorHandler7);
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder11 = builder9.setServer("hi!");
        retrofit.client.Client.Provider provider12 = builder9.clientProvider;
        retrofit.RequestInterceptor requestInterceptor13 = builder9.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean15 = logLevel14.log();
        retrofit.RestAdapter.Builder builder16 = builder9.setLogLevel(logLevel14);
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor18 = builder17.getcallbackExecutor();
        retrofit.client.Client.Provider provider19 = null;
        builder17.clientProvider = provider19;
        retrofit.Server server21 = null;
        builder17.server = server21;
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        builder17.log = log23;
        builder9.log = log23;
        retrofit.RestAdapter.Builder builder26 = builder8.setLog(log23);
        java.util.concurrent.Executor executor27 = builder8.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor28 = builder8.requestInterceptor;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler30 = builder29.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request32 = serializedObjectSupporter31.deserializeObjectRequest6();
        builder29.serializedObjectSupporter = serializedObjectSupporter31;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor35 = null;
        builder34.sethttpExecutor(executor35);
        retrofit.Profiler profiler37 = null;
        builder34.profiler = profiler37;
        retrofit.RestAdapter.Log log39 = builder34.log;
        retrofit.client.Client.Provider provider40 = null;
        builder34.setclientProvider(provider40);
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder44 = builder42.setServer("hi!");
        java.util.concurrent.Executor executor45 = null;
        builder44.callbackExecutor = executor45;
        retrofit.SerializedObjectSupporter serializedObjectSupporter47 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor48 = serializedObjectSupporter47.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder49 = builder44.setRequestInterceptor(requestInterceptor48);
        retrofit.Server server50 = builder49.server;
        builder34.server = server50;
        builder29.server = server50;
        builder8.server = server50;
        retrofit.RequestInterceptor requestInterceptor54 = builder8.requestInterceptor;
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNotNull(errorHandler7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertNull(requestInterceptor13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(requestInterceptor28);
        org.junit.Assert.assertNull(errorHandler30);
        org.junit.Assert.assertNotNull(request32);
        org.junit.Assert.assertNull(log39);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(requestInterceptor48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(server50);
        org.junit.Assert.assertNull(requestInterceptor54);
    }

    @Test
    public void test1830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1830");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider5 = builder0.getclientProvider();
        retrofit.Profiler profiler6 = null;
        builder0.profiler = profiler6;
        retrofit.client.Client.Provider provider8 = builder0.clientProvider;
        retrofit.SerializedObjectSupporter serializedObjectSupporter9 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor10 = serializedObjectSupporter9.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter11 = serializedObjectSupporter9.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter12 = serializedObjectSupporter9.deserializeObjectConverter7();
        retrofit.client.Request request13 = serializedObjectSupporter9.deserializeObjectRequest2();
        builder0.serializedObjectSupporter = serializedObjectSupporter9;
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNotNull(requestInterceptor10);
        org.junit.Assert.assertNotNull(gsonConverter11);
        org.junit.Assert.assertNotNull(gsonConverter12);
        org.junit.Assert.assertNotNull(request13);
    }

    @Test
    public void test1831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1831");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.client.Request request9 = serializedObjectSupporter6.deserializeObjectRequest1();
        builder0.serializedObjectSupporter = serializedObjectSupporter6;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = null;
        builder11.sethttpExecutor(executor12);
        retrofit.Profiler profiler14 = null;
        builder11.profiler = profiler14;
        retrofit.Server server16 = builder11.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter17.deserializeObjectConverter7();
        retrofit.client.Request request20 = serializedObjectSupporter17.deserializeObjectRequest1();
        builder11.serializedObjectSupporter = serializedObjectSupporter17;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor23 = null;
        builder22.sethttpExecutor(executor23);
        retrofit.Profiler profiler25 = null;
        builder22.profiler = profiler25;
        retrofit.Server server27 = builder22.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter28 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor29 = serializedObjectSupporter28.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter30 = serializedObjectSupporter28.deserializeObjectConverter7();
        retrofit.client.Request request31 = serializedObjectSupporter28.deserializeObjectRequest1();
        builder22.serializedObjectSupporter = serializedObjectSupporter28;
        java.lang.String str33 = serializedObjectSupporter28.deserializeObjectString2();
        retrofit.ErrorHandler errorHandler34 = serializedObjectSupporter28.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder35 = builder11.setErrorHandler(errorHandler34);
        retrofit.RestAdapter.Builder builder36 = builder0.setErrorHandler(errorHandler34);
        retrofit.client.Client.Provider provider37 = builder36.clientProvider;
        retrofit.RestAdapter.Builder builder39 = builder36.setServer("http://example.com/");
        retrofit.client.Client.Provider provider40 = null;
        builder36.clientProvider = provider40;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder44 = builder42.setServer("hi!");
        java.util.concurrent.Executor executor45 = null;
        builder44.callbackExecutor = executor45;
        retrofit.SerializedObjectSupporter serializedObjectSupporter47 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor48 = serializedObjectSupporter47.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder49 = builder44.setRequestInterceptor(requestInterceptor48);
        retrofit.Server server50 = builder49.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter51 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler52 = serializedObjectSupporter51.deserializeObjectErrorHandler1();
        builder49.serializedObjectSupporter = serializedObjectSupporter51;
        retrofit.RestAdapter.Log log54 = builder49.log;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor56 = null;
        builder55.sethttpExecutor(executor56);
        retrofit.Profiler profiler58 = null;
        builder55.profiler = profiler58;
        retrofit.RestAdapter.LogLevel logLevel60 = builder55.logLevel;
        java.util.concurrent.Executor executor61 = null;
        builder55.sethttpExecutor(executor61);
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder65 = builder63.setServer("hi!");
        java.util.concurrent.Executor executor66 = null;
        builder65.callbackExecutor = executor66;
        retrofit.SerializedObjectSupporter serializedObjectSupporter68 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor69 = serializedObjectSupporter68.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder70 = builder65.setRequestInterceptor(requestInterceptor69);
        retrofit.RestAdapter.Builder builder71 = builder55.setRequestInterceptor(requestInterceptor69);
        java.util.concurrent.Executor executor72 = builder71.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter73 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor74 = serializedObjectSupporter73.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter75 = serializedObjectSupporter73.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter76 = serializedObjectSupporter73.deserializeObjectConverter7();
        retrofit.Server server77 = serializedObjectSupporter73.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder78 = builder71.setServer(server77);
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder81 = builder79.setServer("hi!");
        java.util.concurrent.Executor executor82 = null;
        builder81.callbackExecutor = executor82;
        retrofit.RestAdapter restAdapter84 = builder81.build();
        retrofit.RestAdapter.Builder builder85 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor86 = null;
        builder85.sethttpExecutor(executor86);
        retrofit.Profiler profiler88 = null;
        builder85.profiler = profiler88;
        retrofit.RestAdapter.Log log90 = builder85.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter91 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler92 = serializedObjectSupporter91.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder93 = builder85.setErrorHandler(errorHandler92);
        retrofit.RestAdapter.Builder builder94 = builder81.setErrorHandler(errorHandler92);
        java.util.concurrent.Executor executor95 = builder94.callbackExecutor;
        builder78.sethttpExecutor(executor95);
        builder49.setcallbackExecutor(executor95);
        builder36.httpExecutor = executor95;
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertNull(server27);
        org.junit.Assert.assertNotNull(requestInterceptor29);
        org.junit.Assert.assertNotNull(gsonConverter30);
        org.junit.Assert.assertNotNull(request31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Retrofit-Idle" + "'", str33, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(provider37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(requestInterceptor48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(server50);
        org.junit.Assert.assertNotNull(errorHandler52);
        org.junit.Assert.assertNull(log54);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(requestInterceptor69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNull(executor72);
        org.junit.Assert.assertNotNull(requestInterceptor74);
        org.junit.Assert.assertNotNull(gsonConverter75);
        org.junit.Assert.assertNotNull(gsonConverter76);
        org.junit.Assert.assertNotNull(server77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(restAdapter84);
        org.junit.Assert.assertNull(log90);
        org.junit.Assert.assertNotNull(errorHandler92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(executor95);
    }

    @Test
    public void test1832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1832");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.Server server5 = null;
        builder0.server = server5;
        retrofit.SerializedObjectSupporter serializedObjectSupporter7 = new retrofit.SerializedObjectSupporter();
        java.lang.String str8 = serializedObjectSupporter7.deserializeObjectString4();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter7.deserializeObjectConverter8();
        builder0.converter = gsonConverter9;
        retrofit.RestAdapter.Log log11 = builder0.log;
        retrofit.client.Client.Provider provider12 = builder0.clientProvider;
        retrofit.ErrorHandler errorHandler13 = builder0.errorHandler;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://example.com/" + "'", str8, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter9);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertNull(errorHandler13);
    }

    @Test
    public void test1833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1833");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server4 = null;
        builder0.server = server4;
        java.util.concurrent.Executor executor6 = builder0.gethttpExecutor();
        retrofit.RestAdapter.LogLevel logLevel7 = builder0.logLevel;
        retrofit.SerializedObjectSupporter serializedObjectSupporter8 = new retrofit.SerializedObjectSupporter();
        java.lang.String str9 = serializedObjectSupporter8.deserializeObjectString3();
        java.lang.String str10 = serializedObjectSupporter8.deserializeObjectString4();
        retrofit.converter.GsonConverter gsonConverter11 = serializedObjectSupporter8.deserializeObjectConverter2();
        builder0.serializedObjectSupporter = serializedObjectSupporter8;
        retrofit.RequestInterceptor requestInterceptor13 = serializedObjectSupporter8.deserializeObjectRequestInterceptor1();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertTrue("'" + logLevel7 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel7.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "GET" + "'", str9, "GET");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "http://example.com/" + "'", str10, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter11);
        org.junit.Assert.assertNotNull(requestInterceptor13);
    }

    @Test
    public void test1834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1834");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.getrequestInterceptor();
        retrofit.RestAdapter.Log log15 = restAdapter10.log;
        retrofit.RestAdapter.Log log16 = restAdapter10.log;
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter10.logLevel;
        java.util.concurrent.Executor executor18 = restAdapter10.httpExecutor;
        retrofit.Server server19 = null;
        retrofit.client.Client.Provider provider20 = null;
        java.util.concurrent.Executor executor21 = null;
        java.util.concurrent.Executor executor22 = null;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        retrofit.converter.Converter converter24 = null;
        retrofit.Profiler profiler25 = null;
        retrofit.ErrorHandler errorHandler26 = null;
        retrofit.RestAdapter.Log log27 = null;
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server19, provider20, executor21, executor22, requestInterceptor23, converter24, profiler25, errorHandler26, log27, logLevel28);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        int int31 = restAdapter29.getLOG_CHUNK_SIZE();
        retrofit.Server server32 = restAdapter29.getserver();
        java.lang.String str33 = restAdapter29.getIDLE_THREAD_NAME();
        java.util.concurrent.Executor executor34 = restAdapter29.getcallbackExecutor();
        retrofit.Server server35 = null;
        retrofit.client.Client.Provider provider36 = null;
        java.util.concurrent.Executor executor37 = null;
        java.util.concurrent.Executor executor38 = null;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        retrofit.converter.Converter converter40 = null;
        retrofit.Profiler profiler41 = null;
        retrofit.ErrorHandler errorHandler42 = null;
        retrofit.RestAdapter.Log log43 = null;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter(server35, provider36, executor37, executor38, requestInterceptor39, converter40, profiler41, errorHandler42, log43, logLevel44);
        retrofit.ErrorHandler errorHandler46 = restAdapter45.errorHandler;
        java.util.concurrent.Executor executor47 = restAdapter45.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter45.getLogLevel();
        retrofit.client.Client.Provider provider49 = restAdapter45.clientProvider;
        retrofit.Profiler profiler50 = restAdapter45.profiler;
        retrofit.converter.Converter converter51 = restAdapter45.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter52 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor53 = serializedObjectSupporter52.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter54 = serializedObjectSupporter52.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter55 = serializedObjectSupporter52.deserializeObjectConverter4();
        restAdapter45.serializedObjectSupporter = serializedObjectSupporter52;
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter45.setLogLevel(logLevel57);
        restAdapter29.setLogLevel(logLevel57);
        retrofit.Server server60 = null;
        retrofit.client.Client.Provider provider61 = null;
        java.util.concurrent.Executor executor62 = null;
        java.util.concurrent.Executor executor63 = null;
        retrofit.RequestInterceptor requestInterceptor64 = null;
        retrofit.converter.Converter converter65 = null;
        retrofit.Profiler profiler66 = null;
        retrofit.ErrorHandler errorHandler67 = null;
        retrofit.RestAdapter.Log log68 = null;
        retrofit.RestAdapter.LogLevel logLevel69 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter(server60, provider61, executor62, executor63, requestInterceptor64, converter65, profiler66, errorHandler67, log68, logLevel69);
        retrofit.ErrorHandler errorHandler71 = restAdapter70.errorHandler;
        int int72 = restAdapter70.getLOG_CHUNK_SIZE();
        java.lang.String str73 = restAdapter70.getTHREAD_PREFIX();
        retrofit.RequestInterceptor requestInterceptor74 = restAdapter70.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel75 = restAdapter70.getLogLevel();
        restAdapter29.logLevel = logLevel75;
        restAdapter10.setLogLevel(logLevel75);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNull(log15);
        org.junit.Assert.assertNull(log16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4000 + "'", int31 == 4000);
        org.junit.Assert.assertNull(server32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Retrofit-Idle" + "'", str33, "Retrofit-Idle");
        org.junit.Assert.assertNull(executor34);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler46);
        org.junit.Assert.assertNull(executor47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider49);
        org.junit.Assert.assertNull(profiler50);
        org.junit.Assert.assertNull(converter51);
        org.junit.Assert.assertNotNull(requestInterceptor53);
        org.junit.Assert.assertNotNull(gsonConverter54);
        org.junit.Assert.assertNotNull(gsonConverter55);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 4000 + "'", int72 == 4000);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Retrofit-" + "'", str73, "Retrofit-");
        org.junit.Assert.assertNull(requestInterceptor74);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test1835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1835");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.Profiler profiler15 = restAdapter10.profiler;
        retrofit.converter.Converter converter16 = restAdapter10.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter17.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter17.deserializeObjectConverter4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter17;
        retrofit.RequestInterceptor requestInterceptor22 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter23 = serializedObjectSupporter17.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter24 = serializedObjectSupporter17.deserializeObjectConverter6();
        retrofit.client.Request request25 = serializedObjectSupporter17.deserializeObjectRequest6();
        retrofit.RequestInterceptor requestInterceptor26 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNotNull(requestInterceptor22);
        org.junit.Assert.assertNotNull(gsonConverter23);
        org.junit.Assert.assertNotNull(gsonConverter24);
        org.junit.Assert.assertNotNull(request25);
        org.junit.Assert.assertNotNull(requestInterceptor26);
    }

    @Test
    public void test1836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1836");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean6 = logLevel5.log();
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel5);
        retrofit.SerializedObjectSupporter serializedObjectSupporter8 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor9 = serializedObjectSupporter8.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter10 = serializedObjectSupporter8.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter11 = serializedObjectSupporter8.deserializeObjectConverter7();
        retrofit.Server server12 = serializedObjectSupporter8.deserializeObjectServer1();
        builder0.server = server12;
        java.util.concurrent.Executor executor14 = builder0.httpExecutor;
        retrofit.RestAdapter restAdapter15 = builder0.build();
        retrofit.RestAdapter.Log log16 = restAdapter15.log;
        java.lang.String str17 = restAdapter15.getIDLE_THREAD_NAME();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(requestInterceptor9);
        org.junit.Assert.assertNotNull(gsonConverter10);
        org.junit.Assert.assertNotNull(gsonConverter11);
        org.junit.Assert.assertNotNull(server12);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNotNull(restAdapter15);
        org.junit.Assert.assertNotNull(log16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-Idle" + "'", str17, "Retrofit-Idle");
    }

    @Test
    public void test1837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1837");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = null;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel13);
        builder0.logLevel = logLevel13;
        java.util.concurrent.Executor executor16 = builder0.httpExecutor;
        retrofit.RestAdapter.Log log17 = null;
        builder0.log = log17;
        retrofit.SerializedObjectSupporter serializedObjectSupporter19 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor20 = serializedObjectSupporter19.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter21 = serializedObjectSupporter19.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter19.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter23 = serializedObjectSupporter19.deserializeObjectConverter8();
        retrofit.mime.TypedString typedString24 = serializedObjectSupporter19.deserializeObjectTypedOutput2();
        java.lang.String str25 = serializedObjectSupporter19.deserializeObjectString2();
        builder0.serializedObjectSupporter = serializedObjectSupporter19;
        retrofit.client.Request request27 = serializedObjectSupporter19.deserializeObjectRequest5();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter19.deserializeObjectConverter7();
        retrofit.client.Request request29 = serializedObjectSupporter19.deserializeObjectRequest1();
        retrofit.mime.TypedOutput typedOutput30 = request29.body;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNotNull(requestInterceptor20);
        org.junit.Assert.assertNotNull(gsonConverter21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(gsonConverter23);
        org.junit.Assert.assertNotNull(typedString24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Retrofit-Idle" + "'", str25, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(request27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(request29);
        org.junit.Assert.assertNull(typedOutput30);
    }

    @Test
    public void test1838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1838");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.ErrorHandler errorHandler6 = builder0.errorHandler;
        retrofit.Profiler profiler7 = builder0.profiler;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = null;
        builder8.sethttpExecutor(executor9);
        retrofit.client.Client.Provider provider11 = builder8.getclientProvider();
        retrofit.client.Client.Provider provider12 = builder8.getclientProvider();
        retrofit.Server server13 = builder8.server;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = null;
        builder14.sethttpExecutor(executor15);
        retrofit.Profiler profiler17 = null;
        builder14.profiler = profiler17;
        retrofit.Server server19 = builder14.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter7();
        retrofit.client.Request request23 = serializedObjectSupporter20.deserializeObjectRequest1();
        builder14.serializedObjectSupporter = serializedObjectSupporter20;
        retrofit.client.Request request25 = serializedObjectSupporter20.deserializeObjectRequest2();
        retrofit.mime.TypedString typedString26 = serializedObjectSupporter20.deserializeObjectTypedOutput2();
        builder8.serializedObjectSupporter = serializedObjectSupporter20;
        java.util.concurrent.Executor executor28 = builder8.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request30 = serializedObjectSupporter29.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler31 = serializedObjectSupporter29.deserializeObjectErrorHandler1();
        retrofit.mime.TypedString typedString32 = serializedObjectSupporter29.deserializeObjectTypedOutput2();
        retrofit.ErrorHandler errorHandler33 = serializedObjectSupporter29.deserializeObjectErrorHandler1();
        builder8.errorHandler = errorHandler33;
        retrofit.RestAdapter.Builder builder35 = builder0.setErrorHandler(errorHandler33);
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor37 = null;
        builder36.sethttpExecutor(executor37);
        retrofit.converter.Converter converter39 = builder36.converter;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor41 = null;
        builder40.sethttpExecutor(executor41);
        retrofit.converter.Converter converter43 = builder40.converter;
        java.util.concurrent.Executor executor44 = builder40.getcallbackExecutor();
        retrofit.client.Client.Provider provider45 = builder40.getclientProvider();
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder48 = builder46.setServer("hi!");
        java.util.concurrent.Executor executor49 = null;
        builder48.callbackExecutor = executor49;
        retrofit.RestAdapter restAdapter51 = builder48.build();
        retrofit.RestAdapter.Log log52 = restAdapter51.log;
        java.util.concurrent.Executor executor53 = restAdapter51.gethttpExecutor();
        retrofit.client.Client.Provider provider54 = restAdapter51.getclientProvider();
        builder40.setclientProvider(provider54);
        retrofit.RestAdapter.Builder builder56 = builder36.setClient(provider54);
        builder35.clientProvider = provider54;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor59 = null;
        builder58.sethttpExecutor(executor59);
        retrofit.client.Client.Provider provider61 = builder58.getclientProvider();
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor63 = null;
        builder62.sethttpExecutor(executor63);
        retrofit.Profiler profiler65 = null;
        builder62.profiler = profiler65;
        retrofit.Server server67 = builder62.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter68 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor69 = serializedObjectSupporter68.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter70 = serializedObjectSupporter68.deserializeObjectConverter7();
        retrofit.client.Request request71 = serializedObjectSupporter68.deserializeObjectRequest1();
        builder62.serializedObjectSupporter = serializedObjectSupporter68;
        builder62.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder76 = builder74.setServer("hi!");
        java.util.concurrent.Executor executor77 = null;
        builder76.callbackExecutor = executor77;
        retrofit.RestAdapter restAdapter79 = builder76.build();
        retrofit.RestAdapter.Builder builder80 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor81 = null;
        builder80.sethttpExecutor(executor81);
        retrofit.Profiler profiler83 = null;
        builder80.profiler = profiler83;
        retrofit.RestAdapter.Log log85 = builder80.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter86 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler87 = serializedObjectSupporter86.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder88 = builder80.setErrorHandler(errorHandler87);
        retrofit.RestAdapter.Builder builder89 = builder76.setErrorHandler(errorHandler87);
        java.util.concurrent.Executor executor90 = builder89.callbackExecutor;
        builder62.setcallbackExecutor(executor90);
        builder58.setcallbackExecutor(executor90);
        builder35.callbackExecutor = executor90;
        java.util.concurrent.Executor executor94 = builder35.httpExecutor;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertNotNull(request25);
        org.junit.Assert.assertNotNull(typedString26);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNotNull(request30);
        org.junit.Assert.assertNotNull(errorHandler31);
        org.junit.Assert.assertNotNull(typedString32);
        org.junit.Assert.assertNotNull(errorHandler33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(converter39);
        org.junit.Assert.assertNull(converter43);
        org.junit.Assert.assertNull(executor44);
        org.junit.Assert.assertNull(provider45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(restAdapter51);
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNotNull(executor53);
        org.junit.Assert.assertNotNull(provider54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(provider61);
        org.junit.Assert.assertNull(server67);
        org.junit.Assert.assertNotNull(requestInterceptor69);
        org.junit.Assert.assertNotNull(gsonConverter70);
        org.junit.Assert.assertNotNull(request71);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(restAdapter79);
        org.junit.Assert.assertNull(log85);
        org.junit.Assert.assertNotNull(errorHandler87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(executor90);
        org.junit.Assert.assertNull(executor94);
    }

    @Test
    public void test1839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1839");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest3();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString5();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter5();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "POST" + "'", str3, "POST");
        org.junit.Assert.assertNotNull(gsonConverter4);
    }

    @Test
    public void test1840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1840");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler7 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder8 = builder0.setErrorHandler(errorHandler7);
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = null;
        builder9.sethttpExecutor(executor10);
        retrofit.Profiler profiler12 = builder9.profiler;
        retrofit.client.Client.Provider provider13 = builder9.clientProvider;
        retrofit.SerializedObjectSupporter serializedObjectSupporter14 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter15 = serializedObjectSupporter14.deserializeObjectConverter2();
        retrofit.client.Request request16 = serializedObjectSupporter14.deserializeObjectRequest7();
        retrofit.client.Request request17 = serializedObjectSupporter14.deserializeObjectRequest2();
        retrofit.client.Request request18 = serializedObjectSupporter14.deserializeObjectRequest3();
        java.lang.String str19 = serializedObjectSupporter14.deserializeObjectString4();
        builder9.serializedObjectSupporter = serializedObjectSupporter14;
        retrofit.Server server21 = serializedObjectSupporter14.deserializeObjectServer1();
        builder0.server = server21;
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNotNull(errorHandler7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(profiler12);
        org.junit.Assert.assertNull(provider13);
        org.junit.Assert.assertNotNull(gsonConverter15);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertNotNull(request18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertNotNull(server21);
    }

    @Test
    public void test1841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1841");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server4 = null;
        builder0.server = server4;
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        builder0.log = log6;
        java.util.concurrent.Executor executor8 = builder0.gethttpExecutor();
        retrofit.converter.Converter converter9 = builder0.converter;
        java.util.concurrent.Executor executor10 = builder0.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor11 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor13 = null;
        builder12.sethttpExecutor(executor13);
        retrofit.client.Client.Provider provider15 = builder12.getclientProvider();
        retrofit.client.Client.Provider provider16 = builder12.getclientProvider();
        retrofit.Server server17 = builder12.server;
        retrofit.client.Client.Provider provider18 = builder12.clientProvider;
        builder12.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor21 = builder20.getcallbackExecutor();
        retrofit.client.Client.Provider provider22 = null;
        builder20.clientProvider = provider22;
        java.util.concurrent.Executor executor24 = builder20.getcallbackExecutor();
        retrofit.RestAdapter.Log log25 = builder20.log;
        retrofit.ErrorHandler errorHandler26 = builder20.errorHandler;
        retrofit.Profiler profiler27 = builder20.profiler;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor29 = null;
        builder28.sethttpExecutor(executor29);
        retrofit.client.Client.Provider provider31 = builder28.getclientProvider();
        retrofit.client.Client.Provider provider32 = builder28.getclientProvider();
        retrofit.Server server33 = builder28.server;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor35 = null;
        builder34.sethttpExecutor(executor35);
        retrofit.Profiler profiler37 = null;
        builder34.profiler = profiler37;
        retrofit.Server server39 = builder34.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter40 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor41 = serializedObjectSupporter40.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter42 = serializedObjectSupporter40.deserializeObjectConverter7();
        retrofit.client.Request request43 = serializedObjectSupporter40.deserializeObjectRequest1();
        builder34.serializedObjectSupporter = serializedObjectSupporter40;
        retrofit.client.Request request45 = serializedObjectSupporter40.deserializeObjectRequest2();
        retrofit.mime.TypedString typedString46 = serializedObjectSupporter40.deserializeObjectTypedOutput2();
        builder28.serializedObjectSupporter = serializedObjectSupporter40;
        java.util.concurrent.Executor executor48 = builder28.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter49 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request50 = serializedObjectSupporter49.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler51 = serializedObjectSupporter49.deserializeObjectErrorHandler1();
        retrofit.mime.TypedString typedString52 = serializedObjectSupporter49.deserializeObjectTypedOutput2();
        retrofit.ErrorHandler errorHandler53 = serializedObjectSupporter49.deserializeObjectErrorHandler1();
        builder28.errorHandler = errorHandler53;
        retrofit.RestAdapter.Builder builder55 = builder20.setErrorHandler(errorHandler53);
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor57 = null;
        builder56.sethttpExecutor(executor57);
        retrofit.converter.Converter converter59 = builder56.converter;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor61 = null;
        builder60.sethttpExecutor(executor61);
        retrofit.converter.Converter converter63 = builder60.converter;
        java.util.concurrent.Executor executor64 = builder60.getcallbackExecutor();
        retrofit.client.Client.Provider provider65 = builder60.getclientProvider();
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder68 = builder66.setServer("hi!");
        java.util.concurrent.Executor executor69 = null;
        builder68.callbackExecutor = executor69;
        retrofit.RestAdapter restAdapter71 = builder68.build();
        retrofit.RestAdapter.Log log72 = restAdapter71.log;
        java.util.concurrent.Executor executor73 = restAdapter71.gethttpExecutor();
        retrofit.client.Client.Provider provider74 = restAdapter71.getclientProvider();
        builder60.setclientProvider(provider74);
        retrofit.RestAdapter.Builder builder76 = builder56.setClient(provider74);
        builder55.clientProvider = provider74;
        builder12.setclientProvider(provider74);
        retrofit.RestAdapter.Builder builder79 = builder0.setClient(provider74);
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(converter9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertNull(provider16);
        org.junit.Assert.assertNull(server17);
        org.junit.Assert.assertNull(provider18);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(log25);
        org.junit.Assert.assertNull(errorHandler26);
        org.junit.Assert.assertNull(profiler27);
        org.junit.Assert.assertNull(provider31);
        org.junit.Assert.assertNull(provider32);
        org.junit.Assert.assertNull(server33);
        org.junit.Assert.assertNull(server39);
        org.junit.Assert.assertNotNull(requestInterceptor41);
        org.junit.Assert.assertNotNull(gsonConverter42);
        org.junit.Assert.assertNotNull(request43);
        org.junit.Assert.assertNotNull(request45);
        org.junit.Assert.assertNotNull(typedString46);
        org.junit.Assert.assertNull(executor48);
        org.junit.Assert.assertNotNull(request50);
        org.junit.Assert.assertNotNull(errorHandler51);
        org.junit.Assert.assertNotNull(typedString52);
        org.junit.Assert.assertNotNull(errorHandler53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(converter59);
        org.junit.Assert.assertNull(converter63);
        org.junit.Assert.assertNull(executor64);
        org.junit.Assert.assertNull(provider65);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(restAdapter71);
        org.junit.Assert.assertNotNull(log72);
        org.junit.Assert.assertNotNull(executor73);
        org.junit.Assert.assertNotNull(provider74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test1842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1842");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider5 = builder0.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request7 = serializedObjectSupporter6.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler8 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        builder0.errorHandler = errorHandler8;
        retrofit.RestAdapter.Log log10 = builder0.log;
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Log log19 = null;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log19, logLevel20);
        retrofit.ErrorHandler errorHandler22 = restAdapter21.errorHandler;
        retrofit.ErrorHandler errorHandler23 = restAdapter21.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter21.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request26 = serializedObjectSupporter25.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter27 = serializedObjectSupporter25.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter25.deserializeObjectConverter1();
        restHandler24.serializedObjectSupporter = serializedObjectSupporter25;
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = restHandler24.serializedObjectSupporter;
        java.lang.String str31 = serializedObjectSupporter30.deserializeObjectString5();
        builder0.serializedObjectSupporter = serializedObjectSupporter30;
        retrofit.client.Request request33 = serializedObjectSupporter30.deserializeObjectRequest5();
        java.lang.String str34 = serializedObjectSupporter30.deserializeObjectString5();
        retrofit.client.Request request35 = serializedObjectSupporter30.deserializeObjectRequest1();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collections collections36 = serializedObjectSupporter30.deserializeObjectList1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.Collections$UnmodifiableRandomAccessList cannot be cast to java.util.Collections");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(errorHandler8);
        org.junit.Assert.assertNull(log10);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNotNull(request26);
        org.junit.Assert.assertNotNull(gsonConverter27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(serializedObjectSupporter30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "POST" + "'", str31, "POST");
        org.junit.Assert.assertNotNull(request33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "POST" + "'", str34, "POST");
        org.junit.Assert.assertNotNull(request35);
    }

    @Test
    public void test1843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1843");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.Server server5 = null;
        retrofit.client.Client.Provider provider6 = null;
        java.util.concurrent.Executor executor7 = null;
        java.util.concurrent.Executor executor8 = null;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        retrofit.converter.Converter converter10 = null;
        retrofit.Profiler profiler11 = null;
        retrofit.ErrorHandler errorHandler12 = null;
        retrofit.RestAdapter.Log log13 = null;
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter(server5, provider6, executor7, executor8, requestInterceptor9, converter10, profiler11, errorHandler12, log13, logLevel14);
        retrofit.ErrorHandler errorHandler16 = restAdapter15.errorHandler;
        int int17 = restAdapter15.getLOG_CHUNK_SIZE();
        retrofit.Server server18 = restAdapter15.getserver();
        retrofit.client.Client.Provider provider19 = restAdapter15.clientProvider;
        retrofit.client.Client.Provider provider20 = restAdapter15.getclientProvider();
        java.lang.String str21 = restAdapter15.getIDLE_THREAD_NAME();
        retrofit.Server server22 = null;
        retrofit.client.Client.Provider provider23 = null;
        java.util.concurrent.Executor executor24 = null;
        java.util.concurrent.Executor executor25 = null;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        retrofit.converter.Converter converter27 = null;
        retrofit.Profiler profiler28 = null;
        retrofit.ErrorHandler errorHandler29 = null;
        retrofit.RestAdapter.Log log30 = null;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server22, provider23, executor24, executor25, requestInterceptor26, converter27, profiler28, errorHandler29, log30, logLevel31);
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter32.logLevel;
        retrofit.ErrorHandler errorHandler34 = restAdapter32.geterrorHandler();
        java.util.concurrent.Executor executor35 = restAdapter32.getcallbackExecutor();
        retrofit.converter.Converter converter36 = restAdapter32.converter;
        retrofit.Server server37 = restAdapter32.getserver();
        retrofit.RestAdapter.LogLevel logLevel38 = restAdapter32.getLogLevel();
        restAdapter15.setLogLevel(logLevel38);
        retrofit.RestAdapter.Builder builder40 = builder0.setLogLevel(logLevel38);
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder43 = builder41.setServer("hi!");
        java.util.concurrent.Executor executor44 = null;
        builder43.callbackExecutor = executor44;
        retrofit.SerializedObjectSupporter serializedObjectSupporter46 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor47 = serializedObjectSupporter46.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder48 = builder43.setRequestInterceptor(requestInterceptor47);
        retrofit.RestAdapter.LogLevel logLevel49 = builder43.logLevel;
        retrofit.RestAdapter.Builder builder50 = builder0.setLogLevel(logLevel49);
        retrofit.SerializedObjectSupporter serializedObjectSupporter51 = new retrofit.SerializedObjectSupporter();
        java.lang.String str52 = serializedObjectSupporter51.deserializeObjectString3();
        java.lang.String str53 = serializedObjectSupporter51.deserializeObjectString3();
        retrofit.Server server54 = serializedObjectSupporter51.deserializeObjectServer1();
        builder50.serializedObjectSupporter = serializedObjectSupporter51;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4000 + "'", int17 == 4000);
        org.junit.Assert.assertNull(server18);
        org.junit.Assert.assertNull(provider19);
        org.junit.Assert.assertNull(provider20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Retrofit-Idle" + "'", str21, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler34);
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertNull(converter36);
        org.junit.Assert.assertNull(server37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(requestInterceptor47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "GET" + "'", str52, "GET");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "GET" + "'", str53, "GET");
        org.junit.Assert.assertNotNull(server54);
    }

    @Test
    public void test1844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1844");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.converter.Converter converter5 = builder0.converter;
        retrofit.ErrorHandler errorHandler6 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler7 = builder0.errorHandler;
        builder0.ensureSaneDefaults();
        retrofit.Profiler profiler9 = builder0.profiler;
        org.junit.Assert.assertNull(converter5);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(profiler9);
    }

    @Test
    public void test1845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1845");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter10.logLevel;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter14 = restAdapter10.serializedObjectSupporter;
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter10.requestInterceptor;
        java.util.concurrent.Executor executor17 = restAdapter10.httpExecutor;
        java.util.concurrent.Executor executor18 = restAdapter10.getcallbackExecutor();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(serializedObjectSupporter14);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(executor18);
    }

    @Test
    public void test1846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1846");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.logLevel = logLevel23;
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = restAdapter10.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter27 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter27.deserializeObjectConverter2();
        retrofit.client.Request request29 = serializedObjectSupporter27.deserializeObjectRequest7();
        retrofit.client.Request request30 = serializedObjectSupporter27.deserializeObjectRequest2();
        retrofit.client.Request request31 = serializedObjectSupporter27.deserializeObjectRequest3();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter27;
        retrofit.Server server33 = serializedObjectSupporter27.deserializeObjectServer1();
        retrofit.converter.GsonConverter gsonConverter34 = serializedObjectSupporter27.deserializeObjectConverter2();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter35 = serializedObjectSupporter27.deserializeObjectLogLevel2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(serializedObjectSupporter26);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(request29);
        org.junit.Assert.assertNotNull(request30);
        org.junit.Assert.assertNotNull(request31);
        org.junit.Assert.assertNotNull(server33);
        org.junit.Assert.assertNotNull(gsonConverter34);
    }

    @Test
    public void test1847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1847");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        java.util.concurrent.Executor executor4 = builder0.gethttpExecutor();
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor6 = builder5.getcallbackExecutor();
        retrofit.client.Client.Provider provider7 = null;
        builder5.clientProvider = provider7;
        retrofit.Server server9 = null;
        builder5.server = server9;
        retrofit.RestAdapter.Log log11 = retrofit.RestAdapter.Log.NONE;
        builder5.log = log11;
        retrofit.converter.Converter converter13 = builder5.converter;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = null;
        builder14.sethttpExecutor(executor15);
        retrofit.converter.Converter converter17 = builder14.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter18.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter21 = serializedObjectSupporter18.deserializeObjectConverter7();
        retrofit.Server server22 = serializedObjectSupporter18.deserializeObjectServer1();
        retrofit.converter.GsonConverter gsonConverter23 = serializedObjectSupporter18.deserializeObjectConverter7();
        retrofit.ErrorHandler errorHandler24 = serializedObjectSupporter18.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder25 = builder14.setErrorHandler(errorHandler24);
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor27 = null;
        builder26.sethttpExecutor(executor27);
        retrofit.converter.Converter converter29 = builder26.converter;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor31 = null;
        builder30.sethttpExecutor(executor31);
        retrofit.converter.Converter converter33 = builder30.converter;
        java.util.concurrent.Executor executor34 = builder30.getcallbackExecutor();
        retrofit.client.Client.Provider provider35 = builder30.getclientProvider();
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder38 = builder36.setServer("hi!");
        java.util.concurrent.Executor executor39 = null;
        builder38.callbackExecutor = executor39;
        retrofit.RestAdapter restAdapter41 = builder38.build();
        retrofit.RestAdapter.Log log42 = restAdapter41.log;
        java.util.concurrent.Executor executor43 = restAdapter41.gethttpExecutor();
        retrofit.client.Client.Provider provider44 = restAdapter41.getclientProvider();
        builder30.setclientProvider(provider44);
        retrofit.RestAdapter.Builder builder46 = builder26.setClient(provider44);
        builder25.clientProvider = provider44;
        retrofit.RestAdapter.Builder builder48 = builder5.setClient(provider44);
        retrofit.RestAdapter.Builder builder49 = builder0.setClient(provider44);
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNotNull(log11);
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertNull(converter17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNotNull(gsonConverter21);
        org.junit.Assert.assertNotNull(server22);
        org.junit.Assert.assertNotNull(gsonConverter23);
        org.junit.Assert.assertNotNull(errorHandler24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(converter29);
        org.junit.Assert.assertNull(converter33);
        org.junit.Assert.assertNull(executor34);
        org.junit.Assert.assertNull(provider35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(restAdapter41);
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertNotNull(executor43);
        org.junit.Assert.assertNotNull(provider44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test1848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1848");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = builder0.profiler;
        retrofit.client.Client.Provider provider4 = builder0.clientProvider;
        java.util.concurrent.Executor executor5 = null;
        builder0.httpExecutor = executor5;
        java.util.concurrent.Executor executor7 = builder0.httpExecutor;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder10 = builder8.setServer("hi!");
        java.util.concurrent.Executor executor11 = null;
        builder10.callbackExecutor = executor11;
        retrofit.RestAdapter restAdapter13 = builder10.build();
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = null;
        builder14.sethttpExecutor(executor15);
        retrofit.Profiler profiler17 = null;
        builder14.profiler = profiler17;
        retrofit.RestAdapter.Log log19 = builder14.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler21 = serializedObjectSupporter20.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder22 = builder14.setErrorHandler(errorHandler21);
        retrofit.RestAdapter.Builder builder23 = builder10.setErrorHandler(errorHandler21);
        java.util.concurrent.Executor executor24 = builder23.callbackExecutor;
        builder0.setcallbackExecutor(executor24);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(provider4);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(restAdapter13);
        org.junit.Assert.assertNull(log19);
        org.junit.Assert.assertNotNull(errorHandler21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(executor24);
    }

    @Test
    public void test1849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1849");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest4();
        java.util.List<retrofit.client.Header> headerList5 = request4.getHeaders();
        retrofit.mime.TypedOutput typedOutput6 = request4.getBody();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(headerList5);
        org.junit.Assert.assertNull(typedOutput6);
    }

    @Test
    public void test1850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1850");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        java.util.concurrent.Executor executor5 = builder0.callbackExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter6.deserializeObjectConverter5();
        retrofit.RestAdapter.Builder builder10 = builder0.setConverter((retrofit.converter.Converter) gsonConverter9);
        retrofit.ErrorHandler errorHandler11 = builder10.errorHandler;
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = null;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel21);
        retrofit.ErrorHandler errorHandler23 = restAdapter22.errorHandler;
        int int24 = restAdapter22.getLOG_CHUNK_SIZE();
        retrofit.Server server25 = restAdapter22.getserver();
        retrofit.converter.Converter converter26 = restAdapter22.getconverter();
        retrofit.converter.Converter converter27 = restAdapter22.converter;
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter22.logLevel;
        retrofit.RestAdapter.Builder builder29 = builder10.setLogLevel(logLevel28);
        retrofit.RestAdapter.Builder builder31 = builder10.setServer("Retrofit-");
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor33 = null;
        builder32.sethttpExecutor(executor33);
        retrofit.Profiler profiler35 = null;
        builder32.profiler = profiler35;
        retrofit.RestAdapter.LogLevel logLevel37 = builder32.logLevel;
        java.util.concurrent.Executor executor38 = null;
        builder32.sethttpExecutor(executor38);
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder42 = builder40.setServer("hi!");
        java.util.concurrent.Executor executor43 = null;
        builder42.callbackExecutor = executor43;
        retrofit.SerializedObjectSupporter serializedObjectSupporter45 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor46 = serializedObjectSupporter45.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder47 = builder42.setRequestInterceptor(requestInterceptor46);
        retrofit.RestAdapter.Builder builder48 = builder32.setRequestInterceptor(requestInterceptor46);
        java.util.concurrent.Executor executor49 = null;
        builder32.setcallbackExecutor(executor49);
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder53 = builder51.setServer("hi!");
        java.util.concurrent.Executor executor54 = null;
        builder53.callbackExecutor = executor54;
        retrofit.SerializedObjectSupporter serializedObjectSupporter56 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor57 = serializedObjectSupporter56.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder58 = builder53.setRequestInterceptor(requestInterceptor57);
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder61 = builder59.setServer("hi!");
        java.util.concurrent.Executor executor62 = null;
        builder61.callbackExecutor = executor62;
        retrofit.SerializedObjectSupporter serializedObjectSupporter64 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor65 = serializedObjectSupporter64.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder66 = builder61.setRequestInterceptor(requestInterceptor65);
        builder58.requestInterceptor = requestInterceptor65;
        retrofit.RestAdapter.Builder builder68 = builder32.setRequestInterceptor(requestInterceptor65);
        retrofit.RestAdapter.Builder builder69 = builder10.setRequestInterceptor(requestInterceptor65);
        retrofit.Server server70 = builder69.server;
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(gsonConverter9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4000 + "'", int24 == 4000);
        org.junit.Assert.assertNull(server25);
        org.junit.Assert.assertNull(converter26);
        org.junit.Assert.assertNull(converter27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(requestInterceptor46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(requestInterceptor57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(requestInterceptor65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(server70);
    }

    @Test
    public void test1851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1851");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.client.Client.Provider provider5 = null;
        builder0.setclientProvider(provider5);
        retrofit.ErrorHandler errorHandler7 = builder0.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter8 = builder0.serializedObjectSupporter;
        retrofit.client.Client.Provider provider9 = builder0.getclientProvider();
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor11 = null;
        builder10.sethttpExecutor(executor11);
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = null;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel22);
        retrofit.ErrorHandler errorHandler24 = restAdapter23.errorHandler;
        int int25 = restAdapter23.getLOG_CHUNK_SIZE();
        retrofit.Server server26 = restAdapter23.getserver();
        retrofit.Server server27 = null;
        retrofit.client.Client.Provider provider28 = null;
        java.util.concurrent.Executor executor29 = null;
        java.util.concurrent.Executor executor30 = null;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        retrofit.converter.Converter converter32 = null;
        retrofit.Profiler profiler33 = null;
        retrofit.ErrorHandler errorHandler34 = null;
        retrofit.RestAdapter.Log log35 = null;
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter(server27, provider28, executor29, executor30, requestInterceptor31, converter32, profiler33, errorHandler34, log35, logLevel36);
        restAdapter23.logLevel = logLevel36;
        builder10.logLevel = logLevel36;
        retrofit.ErrorHandler errorHandler40 = builder10.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter41 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request42 = serializedObjectSupporter41.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler43 = serializedObjectSupporter41.deserializeObjectErrorHandler1();
        builder10.errorHandler = errorHandler43;
        builder0.errorHandler = errorHandler43;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(serializedObjectSupporter8);
        org.junit.Assert.assertNull(provider9);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4000 + "'", int25 == 4000);
        org.junit.Assert.assertNull(server26);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNotNull(request42);
        org.junit.Assert.assertNotNull(errorHandler43);
    }

    @Test
    public void test1852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1852");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = null;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter13;
        retrofit.client.Client.Provider provider15 = restAdapter10.getclientProvider();
        retrofit.ErrorHandler errorHandler16 = restAdapter10.geterrorHandler();
        retrofit.RestAdapter.Log log17 = restAdapter10.log;
        java.util.concurrent.Executor executor18 = restAdapter10.gethttpExecutor();
        retrofit.client.Client.Provider provider19 = restAdapter10.getclientProvider();
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter10.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter21 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter21.deserializeObjectConverter2();
        retrofit.client.Request request23 = serializedObjectSupporter21.deserializeObjectRequest7();
        retrofit.client.Request request24 = serializedObjectSupporter21.deserializeObjectRequest2();
        retrofit.client.Request request25 = serializedObjectSupporter21.deserializeObjectRequest3();
        retrofit.converter.GsonConverter gsonConverter26 = serializedObjectSupporter21.deserializeObjectConverter6();
        retrofit.RequestInterceptor requestInterceptor27 = serializedObjectSupporter21.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter21.deserializeObjectConverter7();
        restHandler20.serializedObjectSupporter = serializedObjectSupporter21;
        retrofit.converter.GsonConverter gsonConverter30 = serializedObjectSupporter21.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter31 = serializedObjectSupporter21.deserializeObjectConverter4();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNull(log17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(provider19);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertNotNull(request24);
        org.junit.Assert.assertNotNull(request25);
        org.junit.Assert.assertNotNull(gsonConverter26);
        org.junit.Assert.assertNotNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(gsonConverter30);
        org.junit.Assert.assertNotNull(gsonConverter31);
    }

    @Test
    public void test1853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1853");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter2();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter7();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString3();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest4();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter6 = serializedObjectSupporter0.deserializeObjectLogLevel3();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Retrofit-Idle" + "'", str1, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GET" + "'", str4, "GET");
        org.junit.Assert.assertNotNull(request5);
    }

    @Test
    public void test1854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1854");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        java.util.concurrent.Executor executor6 = null;
        builder0.sethttpExecutor(executor6);
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder10 = builder8.setServer("hi!");
        java.util.concurrent.Executor executor11 = null;
        builder10.callbackExecutor = executor11;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor14 = serializedObjectSupporter13.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder15 = builder10.setRequestInterceptor(requestInterceptor14);
        retrofit.RestAdapter.Builder builder16 = builder0.setRequestInterceptor(requestInterceptor14);
        java.util.concurrent.Executor executor17 = builder16.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter18.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter21 = serializedObjectSupporter18.deserializeObjectConverter7();
        retrofit.Server server22 = serializedObjectSupporter18.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder23 = builder16.setServer(server22);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder26 = builder24.setServer("hi!");
        java.util.concurrent.Executor executor27 = null;
        builder26.callbackExecutor = executor27;
        retrofit.RestAdapter restAdapter29 = builder26.build();
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor31 = null;
        builder30.sethttpExecutor(executor31);
        retrofit.Profiler profiler33 = null;
        builder30.profiler = profiler33;
        retrofit.RestAdapter.Log log35 = builder30.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter36 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler37 = serializedObjectSupporter36.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder38 = builder30.setErrorHandler(errorHandler37);
        retrofit.RestAdapter.Builder builder39 = builder26.setErrorHandler(errorHandler37);
        java.util.concurrent.Executor executor40 = builder39.callbackExecutor;
        builder23.sethttpExecutor(executor40);
        retrofit.SerializedObjectSupporter serializedObjectSupporter42 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request43 = serializedObjectSupporter42.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter44 = serializedObjectSupporter42.deserializeObjectConverter8();
        builder23.serializedObjectSupporter = serializedObjectSupporter42;
        retrofit.converter.GsonConverter gsonConverter46 = serializedObjectSupporter42.deserializeObjectConverter5();
        java.lang.String str47 = serializedObjectSupporter42.deserializeObjectString3();
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNotNull(gsonConverter21);
        org.junit.Assert.assertNotNull(server22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(restAdapter29);
        org.junit.Assert.assertNull(log35);
        org.junit.Assert.assertNotNull(errorHandler37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(executor40);
        org.junit.Assert.assertNotNull(request43);
        org.junit.Assert.assertNotNull(gsonConverter44);
        org.junit.Assert.assertNotNull(gsonConverter46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "GET" + "'", str47, "GET");
    }

    @Test
    public void test1855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1855");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server4 = null;
        builder0.server = server4;
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        builder0.log = log6;
        java.util.concurrent.Executor executor8 = builder0.gethttpExecutor();
        retrofit.converter.Converter converter9 = builder0.converter;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor11 = null;
        builder10.sethttpExecutor(executor11);
        retrofit.Profiler profiler13 = builder10.profiler;
        retrofit.client.Client.Provider provider14 = builder10.clientProvider;
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter15.deserializeObjectConverter2();
        retrofit.client.Request request17 = serializedObjectSupporter15.deserializeObjectRequest7();
        retrofit.client.Request request18 = serializedObjectSupporter15.deserializeObjectRequest2();
        retrofit.client.Request request19 = serializedObjectSupporter15.deserializeObjectRequest3();
        java.lang.String str20 = serializedObjectSupporter15.deserializeObjectString4();
        builder10.serializedObjectSupporter = serializedObjectSupporter15;
        retrofit.SerializedObjectSupporter serializedObjectSupporter22 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter23 = serializedObjectSupporter22.deserializeObjectConverter2();
        retrofit.client.Request request24 = serializedObjectSupporter22.deserializeObjectRequest7();
        retrofit.client.Request request25 = serializedObjectSupporter22.deserializeObjectRequest2();
        retrofit.client.Request request26 = serializedObjectSupporter22.deserializeObjectRequest3();
        java.lang.String str27 = serializedObjectSupporter22.deserializeObjectString4();
        retrofit.ErrorHandler errorHandler28 = serializedObjectSupporter22.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder29 = builder10.setErrorHandler(errorHandler28);
        retrofit.RestAdapter.Builder builder30 = builder0.setErrorHandler(errorHandler28);
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(converter9);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNotNull(gsonConverter16);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertNotNull(request18);
        org.junit.Assert.assertNotNull(request19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "http://example.com/" + "'", str20, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter23);
        org.junit.Assert.assertNotNull(request24);
        org.junit.Assert.assertNotNull(request25);
        org.junit.Assert.assertNotNull(request26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "http://example.com/" + "'", str27, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test1856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1856");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.client.Request request9 = serializedObjectSupporter6.deserializeObjectRequest1();
        builder0.serializedObjectSupporter = serializedObjectSupporter6;
        java.lang.String str11 = serializedObjectSupporter6.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter12 = serializedObjectSupporter6.deserializeObjectConverter1();
        java.lang.String str13 = serializedObjectSupporter6.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter6.deserializeObjectConverter2();
        retrofit.converter.GsonConverter gsonConverter15 = serializedObjectSupporter6.deserializeObjectConverter8();
        java.lang.String str16 = serializedObjectSupporter6.deserializeObjectString1();
        retrofit.mime.TypedString typedString17 = serializedObjectSupporter6.deserializeObjectTypedOutput2();
        java.lang.String str18 = serializedObjectSupporter6.deserializeObjectString1();
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-Idle" + "'", str11, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-Idle" + "'", str13, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(gsonConverter15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Retrofit-" + "'", str16, "Retrofit-");
        org.junit.Assert.assertNotNull(typedString17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Retrofit-" + "'", str18, "Retrofit-");
    }

    @Test
    public void test1857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1857");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.RestAdapter restAdapter5 = builder2.build();
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.sethttpExecutor(executor7);
        retrofit.Profiler profiler9 = null;
        builder6.profiler = profiler9;
        retrofit.RestAdapter.Log log11 = builder6.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler13 = serializedObjectSupporter12.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder14 = builder6.setErrorHandler(errorHandler13);
        retrofit.RestAdapter.Builder builder15 = builder2.setErrorHandler(errorHandler13);
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder17 = builder15.setLogLevel(logLevel16);
        java.util.concurrent.Executor executor18 = builder17.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor20 = null;
        builder19.sethttpExecutor(executor20);
        retrofit.Profiler profiler22 = null;
        builder19.profiler = profiler22;
        retrofit.RestAdapter.LogLevel logLevel24 = builder19.logLevel;
        java.util.concurrent.Executor executor25 = null;
        builder19.sethttpExecutor(executor25);
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder29 = builder27.setServer("hi!");
        java.util.concurrent.Executor executor30 = null;
        builder29.callbackExecutor = executor30;
        retrofit.SerializedObjectSupporter serializedObjectSupporter32 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor33 = serializedObjectSupporter32.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder34 = builder29.setRequestInterceptor(requestInterceptor33);
        retrofit.RestAdapter.Builder builder35 = builder19.setRequestInterceptor(requestInterceptor33);
        java.util.concurrent.Executor executor36 = builder35.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter37 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor38 = serializedObjectSupporter37.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter39 = serializedObjectSupporter37.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter40 = serializedObjectSupporter37.deserializeObjectConverter7();
        retrofit.Server server41 = serializedObjectSupporter37.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder42 = builder35.setServer(server41);
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder45 = builder43.setServer("hi!");
        java.util.concurrent.Executor executor46 = null;
        builder45.callbackExecutor = executor46;
        retrofit.RestAdapter restAdapter48 = builder45.build();
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor50 = null;
        builder49.sethttpExecutor(executor50);
        retrofit.Profiler profiler52 = null;
        builder49.profiler = profiler52;
        retrofit.RestAdapter.Log log54 = builder49.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter55 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler56 = serializedObjectSupporter55.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder57 = builder49.setErrorHandler(errorHandler56);
        retrofit.RestAdapter.Builder builder58 = builder45.setErrorHandler(errorHandler56);
        java.util.concurrent.Executor executor59 = builder58.callbackExecutor;
        builder42.sethttpExecutor(executor59);
        builder17.setcallbackExecutor(executor59);
        retrofit.RequestInterceptor requestInterceptor62 = builder17.requestInterceptor;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(restAdapter5);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertNotNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(executor18);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(requestInterceptor33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(executor36);
        org.junit.Assert.assertNotNull(requestInterceptor38);
        org.junit.Assert.assertNotNull(gsonConverter39);
        org.junit.Assert.assertNotNull(gsonConverter40);
        org.junit.Assert.assertNotNull(server41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(restAdapter48);
        org.junit.Assert.assertNull(log54);
        org.junit.Assert.assertNotNull(errorHandler56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(executor59);
        org.junit.Assert.assertNotNull(requestInterceptor62);
    }

    @Test
    public void test1858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1858");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest6();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString3();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter6 = serializedObjectSupporter0.deserializeObjectLogLevel2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GET" + "'", str5, "GET");
    }

    @Test
    public void test1859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1859");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server4 = null;
        builder0.server = server4;
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        builder0.log = log6;
        retrofit.converter.Converter converter8 = builder0.converter;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = null;
        builder9.sethttpExecutor(executor10);
        retrofit.converter.Converter converter12 = builder9.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor14 = serializedObjectSupporter13.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter15 = serializedObjectSupporter13.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter13.deserializeObjectConverter7();
        retrofit.Server server17 = serializedObjectSupporter13.deserializeObjectServer1();
        retrofit.converter.GsonConverter gsonConverter18 = serializedObjectSupporter13.deserializeObjectConverter7();
        retrofit.ErrorHandler errorHandler19 = serializedObjectSupporter13.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder20 = builder9.setErrorHandler(errorHandler19);
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor22 = null;
        builder21.sethttpExecutor(executor22);
        retrofit.converter.Converter converter24 = builder21.converter;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = null;
        builder25.sethttpExecutor(executor26);
        retrofit.converter.Converter converter28 = builder25.converter;
        java.util.concurrent.Executor executor29 = builder25.getcallbackExecutor();
        retrofit.client.Client.Provider provider30 = builder25.getclientProvider();
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder33 = builder31.setServer("hi!");
        java.util.concurrent.Executor executor34 = null;
        builder33.callbackExecutor = executor34;
        retrofit.RestAdapter restAdapter36 = builder33.build();
        retrofit.RestAdapter.Log log37 = restAdapter36.log;
        java.util.concurrent.Executor executor38 = restAdapter36.gethttpExecutor();
        retrofit.client.Client.Provider provider39 = restAdapter36.getclientProvider();
        builder25.setclientProvider(provider39);
        retrofit.RestAdapter.Builder builder41 = builder21.setClient(provider39);
        builder20.clientProvider = provider39;
        retrofit.RestAdapter.Builder builder43 = builder0.setClient(provider39);
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor45 = builder44.getcallbackExecutor();
        retrofit.client.Client.Provider provider46 = null;
        builder44.clientProvider = provider46;
        java.util.concurrent.Executor executor48 = builder44.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter49 = new retrofit.SerializedObjectSupporter();
        java.lang.String str50 = serializedObjectSupporter49.deserializeObjectString2();
        java.lang.String str51 = serializedObjectSupporter49.deserializeObjectString1();
        retrofit.RequestInterceptor requestInterceptor52 = serializedObjectSupporter49.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder53 = builder44.setRequestInterceptor(requestInterceptor52);
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder56 = builder54.setServer("hi!");
        retrofit.client.Client.Provider provider57 = builder54.clientProvider;
        retrofit.RequestInterceptor requestInterceptor58 = builder54.requestInterceptor;
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder61 = builder59.setServer("hi!");
        retrofit.client.Client.Provider provider62 = builder59.clientProvider;
        java.util.concurrent.Executor executor63 = null;
        builder59.setcallbackExecutor(executor63);
        retrofit.RestAdapter.Log log65 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder66 = builder59.setLog(log65);
        retrofit.RestAdapter.Builder builder67 = builder54.setLog(log65);
        builder44.log = log65;
        retrofit.RestAdapter.Builder builder69 = builder0.setLog(log65);
        retrofit.SerializedObjectSupporter serializedObjectSupporter70 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor71 = serializedObjectSupporter70.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter72 = serializedObjectSupporter70.deserializeObjectConverter8();
        java.lang.String str73 = serializedObjectSupporter70.deserializeObjectString1();
        java.lang.String str74 = serializedObjectSupporter70.deserializeObjectString4();
        retrofit.ErrorHandler errorHandler75 = serializedObjectSupporter70.deserializeObjectErrorHandler1();
        retrofit.converter.GsonConverter gsonConverter76 = serializedObjectSupporter70.deserializeObjectConverter1();
        retrofit.RestAdapter.Builder builder77 = builder0.setConverter((retrofit.converter.Converter) gsonConverter76);
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor79 = null;
        builder78.sethttpExecutor(executor79);
        retrofit.Profiler profiler81 = null;
        builder78.profiler = profiler81;
        retrofit.Server server83 = builder78.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter84 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor85 = serializedObjectSupporter84.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter86 = serializedObjectSupporter84.deserializeObjectConverter7();
        retrofit.client.Request request87 = serializedObjectSupporter84.deserializeObjectRequest1();
        builder78.serializedObjectSupporter = serializedObjectSupporter84;
        java.lang.String str89 = serializedObjectSupporter84.deserializeObjectString2();
        retrofit.ErrorHandler errorHandler90 = serializedObjectSupporter84.deserializeObjectErrorHandler1();
        retrofit.client.Request request91 = serializedObjectSupporter84.deserializeObjectRequest3();
        retrofit.client.Request request92 = serializedObjectSupporter84.deserializeObjectRequest7();
        retrofit.mime.TypedString typedString93 = serializedObjectSupporter84.deserializeObjectTypedOutput2();
        builder77.serializedObjectSupporter = serializedObjectSupporter84;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNull(converter12);
        org.junit.Assert.assertNotNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(gsonConverter15);
        org.junit.Assert.assertNotNull(gsonConverter16);
        org.junit.Assert.assertNotNull(server17);
        org.junit.Assert.assertNotNull(gsonConverter18);
        org.junit.Assert.assertNotNull(errorHandler19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(converter24);
        org.junit.Assert.assertNull(converter28);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(provider30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(restAdapter36);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNotNull(executor38);
        org.junit.Assert.assertNotNull(provider39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertNull(executor48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Retrofit-Idle" + "'", str50, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Retrofit-" + "'", str51, "Retrofit-");
        org.junit.Assert.assertNotNull(requestInterceptor52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(provider57);
        org.junit.Assert.assertNull(requestInterceptor58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(provider62);
        org.junit.Assert.assertNotNull(log65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(requestInterceptor71);
        org.junit.Assert.assertNotNull(gsonConverter72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Retrofit-" + "'", str73, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "http://example.com/" + "'", str74, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler75);
        org.junit.Assert.assertNotNull(gsonConverter76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNull(server83);
        org.junit.Assert.assertNotNull(requestInterceptor85);
        org.junit.Assert.assertNotNull(gsonConverter86);
        org.junit.Assert.assertNotNull(request87);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "Retrofit-Idle" + "'", str89, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler90);
        org.junit.Assert.assertNotNull(request91);
        org.junit.Assert.assertNotNull(request92);
        org.junit.Assert.assertNotNull(typedString93);
    }

    @Test
    public void test1860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1860");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter1 = serializedObjectSupporter0.deserializeObjectConverter2();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest7();
        java.lang.String str3 = request2.url;
        java.lang.String str4 = request2.method;
        java.util.List<retrofit.client.Header> headerList5 = request2.headers;
        org.junit.Assert.assertNotNull(gsonConverter1);
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GET" + "'", str4, "GET");
        org.junit.Assert.assertNotNull(headerList5);
    }

    @Test
    public void test1861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1861");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.RestAdapter.Builder builder7 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = null;
        builder8.sethttpExecutor(executor9);
        retrofit.converter.Converter converter11 = builder8.converter;
        java.util.concurrent.Executor executor12 = builder8.getcallbackExecutor();
        retrofit.client.Client.Provider provider13 = builder8.getclientProvider();
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        java.util.concurrent.Executor executor17 = null;
        builder16.callbackExecutor = executor17;
        retrofit.SerializedObjectSupporter serializedObjectSupporter19 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor20 = serializedObjectSupporter19.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder21 = builder16.setRequestInterceptor(requestInterceptor20);
        retrofit.SerializedObjectSupporter serializedObjectSupporter22 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request23 = serializedObjectSupporter22.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter24 = serializedObjectSupporter22.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter25 = serializedObjectSupporter22.deserializeObjectConverter1();
        builder21.converter = gsonConverter25;
        retrofit.RestAdapter.Builder builder27 = builder8.setConverter((retrofit.converter.Converter) gsonConverter25);
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder30 = builder28.setServer("hi!");
        retrofit.client.Client.Provider provider31 = builder28.clientProvider;
        retrofit.RequestInterceptor requestInterceptor32 = builder28.requestInterceptor;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder35 = builder33.setServer("hi!");
        retrofit.client.Client.Provider provider36 = builder33.clientProvider;
        java.util.concurrent.Executor executor37 = null;
        builder33.setcallbackExecutor(executor37);
        retrofit.RestAdapter.Log log39 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder40 = builder33.setLog(log39);
        retrofit.RestAdapter.Builder builder41 = builder28.setLog(log39);
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor43 = null;
        builder42.sethttpExecutor(executor43);
        retrofit.Profiler profiler45 = null;
        builder42.profiler = profiler45;
        retrofit.Server server47 = builder42.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter48 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor49 = serializedObjectSupporter48.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter50 = serializedObjectSupporter48.deserializeObjectConverter7();
        retrofit.client.Request request51 = serializedObjectSupporter48.deserializeObjectRequest1();
        builder42.serializedObjectSupporter = serializedObjectSupporter48;
        builder42.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder56 = builder54.setServer("hi!");
        java.util.concurrent.Executor executor57 = null;
        builder56.callbackExecutor = executor57;
        retrofit.RestAdapter restAdapter59 = builder56.build();
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor61 = null;
        builder60.sethttpExecutor(executor61);
        retrofit.Profiler profiler63 = null;
        builder60.profiler = profiler63;
        retrofit.RestAdapter.Log log65 = builder60.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter66 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler67 = serializedObjectSupporter66.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder68 = builder60.setErrorHandler(errorHandler67);
        retrofit.RestAdapter.Builder builder69 = builder56.setErrorHandler(errorHandler67);
        java.util.concurrent.Executor executor70 = builder69.callbackExecutor;
        builder42.setcallbackExecutor(executor70);
        builder41.callbackExecutor = executor70;
        builder27.httpExecutor = executor70;
        java.util.concurrent.Executor executor74 = builder27.httpExecutor;
        builder7.httpExecutor = executor74;
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(provider13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(requestInterceptor20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertNotNull(gsonConverter24);
        org.junit.Assert.assertNotNull(gsonConverter25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(provider31);
        org.junit.Assert.assertNull(requestInterceptor32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(provider36);
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(server47);
        org.junit.Assert.assertNotNull(requestInterceptor49);
        org.junit.Assert.assertNotNull(gsonConverter50);
        org.junit.Assert.assertNotNull(request51);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(restAdapter59);
        org.junit.Assert.assertNull(log65);
        org.junit.Assert.assertNotNull(errorHandler67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(executor70);
        org.junit.Assert.assertNotNull(executor74);
    }

    @Test
    public void test1862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1862");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter1 = serializedObjectSupporter0.deserializeObjectConverter2();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest3();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.client.Request request6 = serializedObjectSupporter0.deserializeObjectRequest8();
        org.junit.Assert.assertNotNull(gsonConverter1);
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(request6);
    }

    @Test
    public void test1863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1863");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.converter.Converter converter3 = builder2.converter;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor5 = null;
        builder4.sethttpExecutor(executor5);
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = null;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel16);
        retrofit.ErrorHandler errorHandler18 = restAdapter17.errorHandler;
        int int19 = restAdapter17.getLOG_CHUNK_SIZE();
        retrofit.Server server20 = restAdapter17.getserver();
        retrofit.Server server21 = null;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = null;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel30);
        restAdapter17.logLevel = logLevel30;
        builder4.logLevel = logLevel30;
        retrofit.RestAdapter.Builder builder34 = builder2.setLogLevel(logLevel30);
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor36 = null;
        builder35.sethttpExecutor(executor36);
        java.util.concurrent.Executor executor38 = builder35.httpExecutor;
        java.util.concurrent.Executor executor39 = builder35.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor41 = null;
        builder40.sethttpExecutor(executor41);
        retrofit.Profiler profiler43 = null;
        builder40.profiler = profiler43;
        retrofit.RestAdapter.LogLevel logLevel45 = builder40.logLevel;
        java.util.concurrent.Executor executor46 = null;
        builder40.sethttpExecutor(executor46);
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder50 = builder48.setServer("hi!");
        java.util.concurrent.Executor executor51 = null;
        builder50.callbackExecutor = executor51;
        retrofit.SerializedObjectSupporter serializedObjectSupporter53 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor54 = serializedObjectSupporter53.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder55 = builder50.setRequestInterceptor(requestInterceptor54);
        retrofit.RestAdapter.Builder builder56 = builder40.setRequestInterceptor(requestInterceptor54);
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor58 = null;
        builder57.sethttpExecutor(executor58);
        retrofit.converter.Converter converter60 = builder57.converter;
        java.util.concurrent.Executor executor61 = builder57.getcallbackExecutor();
        java.util.concurrent.Executor executor62 = builder57.callbackExecutor;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor64 = null;
        builder63.sethttpExecutor(executor64);
        retrofit.Profiler profiler66 = null;
        builder63.profiler = profiler66;
        retrofit.Server server68 = builder63.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter69 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor70 = serializedObjectSupporter69.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter71 = serializedObjectSupporter69.deserializeObjectConverter7();
        retrofit.client.Request request72 = serializedObjectSupporter69.deserializeObjectRequest1();
        builder63.serializedObjectSupporter = serializedObjectSupporter69;
        builder63.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder77 = builder75.setServer("hi!");
        java.util.concurrent.Executor executor78 = null;
        builder77.callbackExecutor = executor78;
        retrofit.RestAdapter restAdapter80 = builder77.build();
        retrofit.RestAdapter.Builder builder81 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor82 = null;
        builder81.sethttpExecutor(executor82);
        retrofit.Profiler profiler84 = null;
        builder81.profiler = profiler84;
        retrofit.RestAdapter.Log log86 = builder81.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter87 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler88 = serializedObjectSupporter87.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder89 = builder81.setErrorHandler(errorHandler88);
        retrofit.RestAdapter.Builder builder90 = builder77.setErrorHandler(errorHandler88);
        java.util.concurrent.Executor executor91 = builder90.callbackExecutor;
        builder63.setcallbackExecutor(executor91);
        builder57.httpExecutor = executor91;
        builder56.callbackExecutor = executor91;
        builder35.callbackExecutor = executor91;
        builder34.callbackExecutor = executor91;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4000 + "'", int19 == 4000);
        org.junit.Assert.assertNull(server20);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(requestInterceptor54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(converter60);
        org.junit.Assert.assertNull(executor61);
        org.junit.Assert.assertNull(executor62);
        org.junit.Assert.assertNull(server68);
        org.junit.Assert.assertNotNull(requestInterceptor70);
        org.junit.Assert.assertNotNull(gsonConverter71);
        org.junit.Assert.assertNotNull(request72);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(restAdapter80);
        org.junit.Assert.assertNull(log86);
        org.junit.Assert.assertNotNull(errorHandler88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(executor91);
    }
}

