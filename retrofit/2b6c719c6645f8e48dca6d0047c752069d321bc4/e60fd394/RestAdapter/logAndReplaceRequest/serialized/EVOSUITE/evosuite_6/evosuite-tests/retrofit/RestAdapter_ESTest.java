/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 09 19:20:19 GMT 2021
 */

package retrofit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import android.os.Message;
import android.os.ParcelUuid;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.squareup.okhttp.ConnectionPool;
import com.squareup.okhttp.OkHttpClient;
import java.io.InputStream;
import java.io.PrintWriter;
import java.lang.reflect.Method;
import java.net.ProxySelector;
import java.net.URI;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Map;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.Callable;
import java.util.concurrent.Delayed;
import java.util.concurrent.Executor;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.RejectedExecutionHandler;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.BasicHttpParams;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import retrofit.ErrorHandler;
import retrofit.Profiler;
import retrofit.RequestBuilder;
import retrofit.RequestInterceptor;
import retrofit.RequestInterceptorTape;
import retrofit.RestAdapter;
import retrofit.RestMethodInfo;
import retrofit.SerializedObjectSupporter;
import retrofit.Server;
import retrofit.client.ApacheClient;
import retrofit.client.Client;
import retrofit.client.Header;
import retrofit.client.OkClient;
import retrofit.client.Request;
import retrofit.client.Response;
import retrofit.client.UrlConnectionClient;
import retrofit.converter.Converter;
import retrofit.converter.GsonConverter;
import retrofit.mime.TypedByteArray;
import retrofit.mime.TypedFile;
import retrofit.mime.TypedString;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RestAdapter_ESTest extends RestAdapter_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      int int0 = 4000;
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      assertNotNull(forkJoinPool_ForkJoinWorkerThreadFactory0);
      
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      String string0 = ".'ISV`l62bDi1&[";
      MockThread mockThread0 = new MockThread(string0);
      assertNotNull(mockThread0);
      
      MockThread mockThread1 = new MockThread(mockThread0);
      assertNotNull(mockThread1);
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      MockThread mockThread2 = new MockThread(threadGroup0, mockThread1);
      assertNotNull(mockThread2);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = mockThread2.getUncaughtExceptionHandler();
      assertNotNull(thread_UncaughtExceptionHandler0);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread2, mockThread0);
      assertNotSame(mockThread2, mockThread1);
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      assertNotNull(classLoader0);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(mockThread1, mockThread2);
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      
      boolean boolean0 = true;
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(int0, forkJoinPool_ForkJoinWorkerThreadFactory0, thread_UncaughtExceptionHandler0, boolean0);
      assertNotNull(forkJoinPool0);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      
      restAdapter_Builder0.sethttpExecutor(forkJoinPool0);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread2, mockThread0);
      assertNotSame(mockThread2, mockThread1);
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLog(restAdapter_Log0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      Map<Thread, StackTraceElement[]> map0 = MockThread.getAllStackTraces();
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(2319, map0.size());
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      Profiler<Header> profiler0 = (Profiler<Header>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      String string1 = "";
      MockThread.setDefaultUncaughtExceptionHandler(thread_UncaughtExceptionHandler0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertNotSame(string0, string1);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread2, mockThread0);
      assertNotSame(mockThread2, mockThread1);
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      
      int int1 = (-1936);
      String string2 = "";
      LinkedList<Header> linkedList0 = new LinkedList<Header>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      long long0 = 1300L;
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = restAdapter_Builder0.logLevel.log();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.HEADERS;
      Executor executor0 = restAdapter_Builder0.getcallbackExecutor();
      assertNull(executor0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      RestAdapter.LogLevel restAdapter_LogLevel2 = RestAdapter.LogLevel.BASIC;
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder0.server, restAdapter_Builder1.clientProvider, restAdapter_Builder0.callbackExecutor, forkJoinPool0, restAdapter_Builder1.requestInterceptor, restAdapter_Builder0.converter, profiler0, restAdapter_Builder1.errorHandler, restAdapter_Builder0.log, restAdapter_LogLevel2);
      assertNotNull(restAdapter0);
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel0));
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel1));
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertNotNull(restAdapter_RestHandler0);
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel0));
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel1));
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        restAdapter0.create(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only interface endpoint definitions are supported.
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertEquals(4, restAdapter_LogLevelArray0.length);
      assertNotNull(restAdapter_LogLevelArray0);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      int int0 = 2296;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      BlockingQueue<Runnable> blockingQueue0 = scheduledThreadPoolExecutor0.getQueue();
      assertNotNull(blockingQueue0);
      
      restAdapter_Builder0.setclientProvider(client_Provider0);
      int int1 = scheduledThreadPoolExecutor0.getCorePoolSize();
      assertTrue(int1 == int0);
      assertEquals(2296, int1);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setExecutors(scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor0);
      assertNotNull(restAdapter_Builder1);
      assertTrue(int0 == int1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setLogLevel(restAdapter_Builder0.logLevel);
      assertNotNull(restAdapter_Builder2);
      assertTrue(int0 == int1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      Runnable runnable0 = null;
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      String string0 = "Client provider may not be null.";
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setServer(string0);
      assertNotNull(restAdapter_Builder3);
      assertTrue(int0 == int1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder3.setConverter(restAdapter_Builder1.converter);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Converter may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      int int0 = 2296;
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      assertNotNull(threadPoolExecutor_DiscardPolicy0);
      
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      String string0 = "";
      MockThread mockThread0 = new MockThread(threadGroup0, string0);
      assertNotNull(mockThread0);
      
      MockThread mockThread1 = new MockThread(mockThread0, string0);
      assertNotNull(mockThread1);
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      String string1 = "";
      MockThread mockThread2 = new MockThread(threadGroup0, mockThread1, string1);
      assertNotNull(mockThread2);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      
      int int1 = 489;
      ClassLoader classLoader0 = mockThread2.getContextClassLoader();
      assertNotNull(classLoader0);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertSame(string0, string1);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread1, mockThread0);
      assertSame(string1, string0);
      assertNotSame(mockThread2, mockThread1);
      assertNotSame(mockThread2, mockThread0);
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      
      mockThread2.setContextClassLoader(classLoader0);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertSame(string0, string1);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread1, mockThread0);
      assertSame(string1, string0);
      assertNotSame(mockThread2, mockThread1);
      assertNotSame(mockThread2, mockThread0);
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      
      boolean boolean0 = MockThread.interrupted();
      assertFalse(boolean0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int1);
      assertNotNull(scheduledThreadPoolExecutor0);
      assertFalse(int1 == int0);
      
      threadPoolExecutor_DiscardPolicy0.rejectedExecution(mockThread2, scheduledThreadPoolExecutor0);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(int1 == int0);
      assertSame(string0, string1);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread1, mockThread0);
      assertSame(string1, string0);
      assertNotSame(mockThread2, mockThread1);
      assertNotSame(mockThread2, mockThread0);
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      
      restAdapter_Builder0.setclientProvider(restAdapter_Builder0.clientProvider);
      int int2 = scheduledThreadPoolExecutor0.getCorePoolSize();
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(int1 == int0);
      assertEquals(489, int2);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setExecutors(scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor0);
      assertNotNull(restAdapter_Builder1);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setLogLevel(restAdapter_Builder0.logLevel);
      assertNotNull(restAdapter_Builder2);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      Runnable runnable0 = null;
      Executor executor0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder2.setExecutors(executor0, scheduledThreadPoolExecutor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // HTTP executor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Profiler<String> profiler0 = (Profiler<String>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      restAdapter_Builder0.ensureSaneDefaults();
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setProfiler(profiler0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setErrorHandler(restAdapter_Builder0.errorHandler);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setServer(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be blank.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      Request request0 = serializedObjectSupporter0.deserializeObjectRequest2();
      assertNotNull(request0);
      assertEquals("GET", request0.getMethod());
      assertEquals("http://example.com/", request0.getUrl());
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter4();
      assertNotNull(gsonConverter0);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setConverter(gsonConverter0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setLog(restAdapter_Builder0.log);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Log may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      String string0 = "%&";
      String string1 = "N2/a8\\FQI]";
      requestInterceptorTape0.addPathParam(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setRequestInterceptor(requestInterceptorTape0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      String string2 = "appWidgetMinHeight";
      restAdapter_Builder1.sethttpExecutor(restAdapter_Builder0.callbackExecutor);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      String string0 = "ZCDUt,h\\";
      restAdapter_Log0.log(string0);
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Server server0 = null;
      UrlConnectionClient urlConnectionClient0 = new UrlConnectionClient();
      assertNotNull(urlConnectionClient0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setClient(restAdapter_Builder0.clientProvider);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Client provider may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "com.google.gson.Gson$3";
      Server server0 = new Server(string0);
      assertNotNull(server0);
      assertEquals("default", server0.getName());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("default", server0.getName());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      
      OkClient okClient0 = new OkClient();
      assertNotNull(okClient0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient((Client) okClient0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertEquals("default", server0.getName());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      
      RestAdapter restAdapter0 = restAdapter_Builder2.build();
      assertNotNull(restAdapter0);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertEquals("default", server0.getName());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      restAdapter_Builder0.logLevel = restAdapter_LogLevel0;
      assertTrue(restAdapter_Builder0.logLevel.log());
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setLogLevel(restAdapter_Builder1.logLevel);
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertEquals("default", server0.getName());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      
      restAdapter_Builder3.sethttpExecutor(restAdapter0.httpExecutor);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertEquals("default", server0.getName());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      RestAdapter restAdapter1 = restAdapter_Builder3.build();
      assertNotNull(restAdapter1);
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertNotSame(restAdapter1, restAdapter0);
      assertEquals("default", server0.getName());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals(4000, restAdapter1.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      Executor executor0 = restAdapter1.getcallbackExecutor();
      assertNotNull(executor0);
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertNotSame(restAdapter1, restAdapter0);
      assertEquals("default", server0.getName());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals(4000, restAdapter1.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      restAdapter1.setLogLevel(restAdapter0.logLevel);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertNotSame(restAdapter1, restAdapter0);
      assertEquals("default", server0.getName());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter1.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter1.getLogLevel());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      Executor executor1 = restAdapter0.gethttpExecutor();
      assertNotNull(executor1);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertNotSame(restAdapter0, restAdapter1);
      assertEquals("default", server0.getName());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      int int0 = (-1871);
      String string1 = restAdapter1.getIDLE_THREAD_NAME();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals("Retrofit-Idle", string1);
      assertNotSame(string1, string0);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertNotSame(restAdapter1, restAdapter0);
      assertEquals("default", server0.getName());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals(4000, restAdapter1.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter1.getLogLevel());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      int int1 = restAdapter1.getLOG_CHUNK_SIZE();
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals(4000, int1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertNotSame(restAdapter1, restAdapter0);
      assertEquals("default", server0.getName());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals(4000, restAdapter1.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter1.getLogLevel());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      restAdapter1.setLogLevel(restAdapter_LogLevel0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertNotSame(restAdapter1, restAdapter0);
      assertEquals("default", server0.getName());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals(4000, restAdapter1.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      int int2 = 1843;
      Random.setNextRandom(int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "";
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder0.server, restAdapter_Builder0.clientProvider, restAdapter_Builder0.callbackExecutor, restAdapter_Builder0.httpExecutor, restAdapter_Builder0.requestInterceptor, restAdapter_Builder0.converter, restAdapter_Builder0.profiler, restAdapter_Builder0.errorHandler, restAdapter_Builder0.log, restAdapter_LogLevel0);
      assertNotNull(restAdapter0);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      String string1 = restAdapter0.getTHREAD_PREFIX();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Retrofit-", string1);
      assertNotSame(string1, string0);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setRequestInterceptor(restAdapter_Builder0.requestInterceptor);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Request interceptor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "+:XO<5OmFo7";
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder0.server, restAdapter_Builder0.clientProvider, restAdapter_Builder0.callbackExecutor, restAdapter_Builder0.httpExecutor, restAdapter_Builder0.requestInterceptor, restAdapter_Builder0.converter, restAdapter_Builder0.profiler, restAdapter_Builder0.errorHandler, restAdapter_Builder0.log, restAdapter_LogLevel0);
      assertNotNull(restAdapter0);
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      String string1 = "";
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      Response response0 = null;
      long long0 = (-1L);
      // Undeclared exception!
      try { 
        restAdapter0.logAndReplaceResponse(string1, response0, long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      String string0 = "RIGHT_LEFT";
      String string1 = "vU";
      Server server0 = new Server(string0, string1);
      assertNotNull(server0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("vU", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("RIGHT_LEFT", server0.getUrl());
      assertEquals("RIGHT_LEFT", server0.getapiUrl());
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      assertNotNull(forkJoinPool0);
      
      RequestInterceptor requestInterceptor0 = null;
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0, server0.name);
      assertNotNull(gsonConverter0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("vU", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("RIGHT_LEFT", server0.getUrl());
      assertEquals("RIGHT_LEFT", server0.getapiUrl());
      assertEquals("vU", gsonConverter0.getencoding());
      
      Profiler<TypedByteArray> profiler0 = (Profiler<TypedByteArray>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = null;
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, forkJoinPool0, forkJoinPool0, requestInterceptor0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertNotNull(restAdapter0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("vU", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("RIGHT_LEFT", server0.getUrl());
      assertEquals("RIGHT_LEFT", server0.getapiUrl());
      assertEquals("vU", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      restAdapter_Log0.log(string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      String string2 = "X!_WBMF:_=@z";
      MockException mockException0 = new MockException();
      assertNotNull(mockException0);
      
      MockException mockException1 = new MockException(string2, mockException0);
      assertNotNull(mockException1);
      assertFalse(mockException1.equals((Object)mockException0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = "type parameter";
      restAdapter0.logException(mockException1, string3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(mockException0.equals((Object)mockException1));
      assertFalse(mockException1.equals((Object)mockException0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(mockException0, mockException1);
      assertNotSame(mockException1, mockException0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertEquals("vU", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("RIGHT_LEFT", server0.getUrl());
      assertEquals("RIGHT_LEFT", server0.getapiUrl());
      assertEquals("vU", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      RequestInterceptor requestInterceptor1 = restAdapter0.getrequestInterceptor();
      assertNull(requestInterceptor1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertEquals("vU", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("RIGHT_LEFT", server0.getUrl());
      assertEquals("RIGHT_LEFT", server0.getapiUrl());
      assertEquals("vU", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      ErrorHandler errorHandler1 = restAdapter0.geterrorHandler();
      assertNull(errorHandler1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertEquals("vU", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("RIGHT_LEFT", server0.getUrl());
      assertEquals("RIGHT_LEFT", server0.getapiUrl());
      assertEquals("vU", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      Class<Header> class0 = Header.class;
      Header header0 = new Header(string2, server0.name);
      assertNotNull(header0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertEquals("vU", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("RIGHT_LEFT", server0.getUrl());
      assertEquals("RIGHT_LEFT", server0.getapiUrl());
      assertEquals("X!_WBMF:_=@z", header0.getName());
      assertEquals("vU", header0.getValue());
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertNotNull(restAdapter_RestHandler0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertEquals("vU", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("RIGHT_LEFT", server0.getUrl());
      assertEquals("RIGHT_LEFT", server0.getapiUrl());
      assertEquals("vU", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      RequestInterceptor requestInterceptor2 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
      assertNotNull(requestInterceptor2);
      
      RestMethodInfo restMethodInfo0 = null;
      Object[] objectArray0 = null;
      // Undeclared exception!
      try { 
        restAdapter_RestHandler0.invokeRequest(requestInterceptor2, restMethodInfo0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter$RestHandler", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      Server server0 = serializedObjectSupporter0.deserializeObjectServer1();
      assertNotNull(server0);
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int0 = 3632;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadFactory0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      Request request0 = serializedObjectSupporter0.deserializeObjectRequest4();
      assertNotNull(request0);
      assertEquals("GET", request0.getMethod());
      assertEquals("http://example.com/", request0.getUrl());
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter2();
      assertNotNull(gsonConverter0);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      
      String string0 = "";
      String string1 = "appWidgetIds";
      requestInterceptorTape0.addPathParam(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      Profiler<Integer> profiler0 = (Profiler<Integer>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      String string2 = "HTTP executor may not be null.";
      String string3 = ">hO.";
      requestInterceptorTape0.addHeader(string2, string3);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNull(errorHandler0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor0, requestInterceptorTape0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertNotNull(restAdapter0);
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      GsonConverter gsonConverter1 = (GsonConverter)restAdapter0.getconverter();
      assertNotNull(gsonConverter1);
      assertSame(gsonConverter1, gsonConverter0);
      assertSame(gsonConverter0, gsonConverter1);
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("UTF-8", gsonConverter1.getencoding());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertEquals(4, restAdapter_LogLevelArray0.length);
      assertNotNull(restAdapter_LogLevelArray0);
      
      Request request1 = restAdapter0.logAndReplaceRequest(request0);
      assertNotNull(request1);
      assertSame(request1, request0);
      assertSame(request0, request1);
      assertSame(gsonConverter0, gsonConverter1);
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("http://example.com/", request1.getUrl());
      assertEquals("GET", request1.getMethod());
      assertEquals("GET", request0.getMethod());
      assertEquals("http://example.com/", request0.getUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Request request2 = restAdapter0.logAndReplaceRequest(request1);
      assertNotNull(request2);
      assertSame(request1, request0);
      assertSame(request1, request2);
      assertSame(request0, request1);
      assertSame(request0, request2);
      assertSame(request2, request1);
      assertSame(request2, request0);
      assertSame(gsonConverter0, gsonConverter1);
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("http://example.com/", request1.getUrl());
      assertEquals("GET", request1.getMethod());
      assertEquals("GET", request0.getMethod());
      assertEquals("http://example.com/", request0.getUrl());
      assertEquals("http://example.com/", request2.getUrl());
      assertEquals("GET", request2.getMethod());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(restAdapter0.server);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(gsonConverter0, gsonConverter1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter8();
      assertNotNull(gsonConverter2);
      assertFalse(gsonConverter2.equals((Object)gsonConverter0));
      assertFalse(gsonConverter2.equals((Object)gsonConverter1));
      assertNotSame(gsonConverter2, gsonConverter0);
      assertNotSame(gsonConverter2, gsonConverter1);
      assertEquals("UTF-8", gsonConverter2.getencoding());
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setConverter(gsonConverter2);
      assertNotNull(restAdapter_Builder2);
      assertFalse(gsonConverter0.equals((Object)gsonConverter2));
      assertFalse(gsonConverter2.equals((Object)gsonConverter0));
      assertFalse(gsonConverter2.equals((Object)gsonConverter1));
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(gsonConverter0, gsonConverter2);
      assertSame(gsonConverter0, gsonConverter1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotSame(gsonConverter2, gsonConverter0);
      assertNotSame(gsonConverter2, gsonConverter1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("UTF-8", gsonConverter2.getencoding());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      String string4 = "v(?snV]Os2@y:1Q_%";
      gsonConverter2.setencoding(string4);
      assertFalse(gsonConverter2.equals((Object)gsonConverter0));
      assertFalse(gsonConverter2.equals((Object)gsonConverter1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotSame(gsonConverter2, gsonConverter0);
      assertNotSame(gsonConverter2, gsonConverter1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertEquals("v(?snV]Os2@y:1Q_%", gsonConverter2.getencoding());
      
      Profiler<String> profiler1 = (Profiler<String>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      String string5 = "$1U1Tnx]*<|D/.q%vx";
      gsonConverter2.encoding = string5;
      assertEquals("$1U1Tnx]*<|D/.q%vx", gsonConverter2.getencoding());
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setProfiler(profiler1);
      assertNotNull(restAdapter_Builder3);
      assertFalse(gsonConverter0.equals((Object)gsonConverter2));
      assertFalse(gsonConverter2.equals((Object)gsonConverter0));
      assertFalse(gsonConverter2.equals((Object)gsonConverter1));
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertNotSame(gsonConverter0, gsonConverter2);
      assertSame(gsonConverter0, gsonConverter1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertNotSame(gsonConverter2, gsonConverter0);
      assertNotSame(gsonConverter2, gsonConverter1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("$1U1Tnx]*<|D/.q%vx", gsonConverter2.getencoding());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = restAdapter0.getLogLevel();
      assertFalse(gsonConverter0.equals((Object)gsonConverter2));
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter_LogLevel1);
      assertSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertNotSame(gsonConverter0, gsonConverter2);
      assertSame(gsonConverter0, gsonConverter1);
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertTrue(restAdapter_LogLevel1.log());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor1 = (ScheduledThreadPoolExecutor)restAdapter0.gethttpExecutor();
      assertNotNull(scheduledThreadPoolExecutor1);
      assertFalse(gsonConverter0.equals((Object)gsonConverter2));
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(scheduledThreadPoolExecutor1, scheduledThreadPoolExecutor0);
      assertSame(scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor1);
      assertNotSame(gsonConverter0, gsonConverter2);
      assertSame(gsonConverter0, gsonConverter1);
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder3.setErrorHandler(errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Error handler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      Server server0 = serializedObjectSupporter0.deserializeObjectServer1();
      assertNotNull(server0);
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int0 = 3632;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadFactory0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      Request request0 = serializedObjectSupporter0.deserializeObjectRequest4();
      assertNotNull(request0);
      assertEquals("http://example.com/", request0.getUrl());
      assertEquals("GET", request0.getMethod());
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter2();
      assertNotNull(gsonConverter0);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      
      String string0 = "";
      String string1 = "appWidgetIds";
      requestInterceptorTape0.addPathParam(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      Profiler<Integer> profiler0 = (Profiler<Integer>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      String string2 = "HTTP executor may not be null.";
      String string3 = ">hO.";
      requestInterceptorTape0.addHeader(string2, string3);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNull(errorHandler0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor0, requestInterceptorTape0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertNotNull(restAdapter0);
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      GsonConverter gsonConverter1 = (GsonConverter)restAdapter0.getconverter();
      assertNotNull(gsonConverter1);
      assertSame(gsonConverter1, gsonConverter0);
      assertSame(gsonConverter0, gsonConverter1);
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("UTF-8", gsonConverter1.getencoding());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertEquals(4, restAdapter_LogLevelArray0.length);
      assertNotNull(restAdapter_LogLevelArray0);
      
      Request request1 = restAdapter0.logAndReplaceRequest(request0);
      assertNotNull(request1);
      assertSame(request1, request0);
      assertSame(request0, request1);
      assertSame(gsonConverter0, gsonConverter1);
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("GET", request1.getMethod());
      assertEquals("http://example.com/", request1.getUrl());
      assertEquals("http://example.com/", request0.getUrl());
      assertEquals("GET", request0.getMethod());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(restAdapter0.server);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(gsonConverter0, gsonConverter1);
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setConverter(gsonConverter0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(gsonConverter0, gsonConverter1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      Profiler<String> profiler1 = (Profiler<String>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setProfiler(profiler1);
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(gsonConverter0, gsonConverter1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder3.setErrorHandler(errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Error handler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Client client0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setClient(client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Client may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertNotNull(gsonConverter0);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      
      TypedString typedString0 = new TypedString(gsonConverter0.encoding);
      assertNotNull(typedString0);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertEquals(5L, typedString0.length());
      
      InputStream inputStream0 = typedString0.in();
      assertNotNull(inputStream0);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertEquals(5L, typedString0.length());
      assertEquals(5, inputStream0.available());
      
      Class<Boolean> class0 = Boolean.TYPE;
      assertNotNull(class0);
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      
      Object object0 = gsonConverter0.fromBody(typedString0, class0);
      assertNotNull(object0);
      assertEquals(false, object0);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertEquals(5L, typedString0.length());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      Profiler<Header> profiler0 = (Profiler<Header>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      String string0 = "";
      int int0 = (-1936);
      String string1 = "";
      LinkedList<Header> linkedList0 = new LinkedList<Header>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Server server0 = new Server(gsonConverter0.encoding);
      assertNotNull(server0);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("UTF-8", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("UTF-8", server0.getapiUrl());
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(client_Provider0).toString();
      int int1 = 0;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      assertNotNull(threadPoolExecutor_AbortPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int1, threadFactory0, threadPoolExecutor_AbortPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      assertFalse(int1 == int0);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      ErrorHandler errorHandler0 = null;
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.FULL;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor0, requestInterceptor0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel1);
      assertNotNull(restAdapter0);
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      assertFalse(int1 == int0);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("UTF-8", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("UTF-8", server0.getapiUrl());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      Client.Provider client_Provider1 = restAdapter0.getclientProvider();
      assertNotNull(client_Provider1);
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      assertFalse(int1 == int0);
      assertNotSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertSame(client_Provider1, client_Provider0);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("UTF-8", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("UTF-8", server0.getapiUrl());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      // Undeclared exception!
      try { 
        serializedObjectSupporter0.deserializeObjectLogLevel3();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter
         //
         verifyException("retrofit.SerializedObjectSupporter", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertEquals(4, restAdapter_LogLevelArray0.length);
      assertNotNull(restAdapter_LogLevelArray0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Client.Provider client_Provider0 = restAdapter_Builder0.getclientProvider();
      assertNull(client_Provider0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setServer(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be blank.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      String string0 = "J/_lNz})\\=qQ.}*";
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter_LogLevel0);
      assertTrue(restAdapter_LogLevel0.log());
      
      boolean boolean0 = restAdapter_LogLevel0.log();
      assertTrue(boolean0);
      assertTrue(restAdapter_LogLevel0.log());
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setServer(restAdapter_Builder0.server);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLogLevel(restAdapter_LogLevel0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setProfiler(restAdapter_Builder0.profiler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Profiler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLog(restAdapter_Log0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setExecutors(restAdapter_Builder0.callbackExecutor, restAdapter_Builder0.callbackExecutor);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // HTTP executor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      int int0 = 162;
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      assertNotNull(threadPoolExecutor_DiscardOldestPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadPoolExecutor_DiscardOldestPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      restAdapter_Builder0.sethttpExecutor(scheduledThreadPoolExecutor0);
      Executor executor0 = restAdapter_Builder0.gethttpExecutor();
      assertNotNull(executor0);
      assertSame(executor0, scheduledThreadPoolExecutor0);
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "[}Vv/f79x";
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(string0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setErrorHandler(restAdapter_Builder0.errorHandler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Error handler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      OkClient okClient0 = new OkClient();
      assertNotNull(okClient0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient((Client) okClient0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setRequestInterceptor(restAdapter_Builder0.requestInterceptor);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Request interceptor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "---- ERROR %s";
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(string0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      restAdapter_Builder1.setcallbackExecutor(restAdapter_Builder0.callbackExecutor);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder2 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder2);
      assertFalse(restAdapter_Builder2.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder2.equals((Object)restAdapter_Builder0));
      
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertNotNull(okHttpClient0);
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      assertNotNull(proxySelector0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setProxySelector(proxySelector0);
      assertNotNull(okHttpClient1);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertEquals(0, okHttpClient1.getConnectTimeout());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient1.getReadTimeout());
      
      ConnectionPool connectionPool0 = ConnectionPool.getDefault();
      assertNotNull(connectionPool0);
      assertEquals(0, connectionPool0.getConnectionCount());
      
      OkHttpClient okHttpClient2 = okHttpClient1.setConnectionPool(connectionPool0);
      assertNotNull(okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertEquals(0, okHttpClient1.getConnectTimeout());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient1.getReadTimeout());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertEquals(0, okHttpClient2.getConnectTimeout());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient2.getReadTimeout());
      
      OkClient okClient0 = new OkClient(okHttpClient2);
      assertNotNull(okClient0);
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertEquals(0, okHttpClient1.getConnectTimeout());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient1.getReadTimeout());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertEquals(0, okHttpClient2.getConnectTimeout());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient2.getReadTimeout());
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder0.setClient((Client) okClient0);
      assertNotNull(restAdapter_Builder3);
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder2));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder2));
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder2);
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertEquals(0, okHttpClient1.getConnectTimeout());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient1.getReadTimeout());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertEquals(0, okHttpClient2.getConnectTimeout());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient2.getReadTimeout());
      
      // Undeclared exception!
      try { 
        restAdapter_Builder2.setExecutors(restAdapter_Builder1.httpExecutor, restAdapter_Builder3.callbackExecutor);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // HTTP executor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLogLevel(restAdapter_LogLevel0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setClient(restAdapter_Builder0.clientProvider);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Client provider may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setRequestInterceptor(requestInterceptor0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setProfiler(restAdapter_Builder0.profiler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Profiler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "com.google.gson.Gson$3";
      Server server0 = new Server(string0);
      assertNotNull(server0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getName());
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getName());
      
      OkClient okClient0 = new OkClient();
      assertNotNull(okClient0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient((Client) okClient0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getName());
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setLogLevel(restAdapter_Builder1.logLevel);
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getName());
      
      RestAdapter restAdapter0 = restAdapter_Builder3.build();
      assertNotNull(restAdapter0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      GsonConverter gsonConverter0 = (GsonConverter)restAdapter0.getconverter();
      assertNotNull(gsonConverter0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      String string0 = "";
      Server server0 = new Server(string0, string0);
      assertNotNull(server0);
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getName());
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool0 = ForkJoinTask.getPool();
      assertNull(forkJoinPool0);
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter1();
      assertNotNull(gsonConverter0);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      
      Profiler<String> profiler0 = (Profiler<String>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, forkJoinPool0, forkJoinPool0, requestInterceptorTape0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertNotNull(restAdapter0);
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getName());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      Executor executor0 = restAdapter0.gethttpExecutor();
      assertNull(executor0);
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getName());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Profiler<Integer> profiler0 = (Profiler<Integer>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setProfiler(profiler0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setErrorHandler(restAdapter_Builder0.errorHandler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Error handler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setErrorHandler(errorHandler0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      SerializedObjectSupporter serializedObjectSupporter1 = restAdapter_Builder1.serializedObjectSupporter;
      assertNull(serializedObjectSupporter1);
      
      restAdapter_Builder0.setclientProvider(restAdapter_Builder1.clientProvider);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setExecutors(restAdapter_Builder1.callbackExecutor, restAdapter_Builder1.callbackExecutor);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // HTTP executor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      int int0 = 4;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setExecutors(scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setConverter(restAdapter_Builder0.converter);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Converter may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLogLevel(restAdapter_LogLevel0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setServer(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be blank.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      restAdapter_Builder0.ensureSaneDefaults();
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      restAdapter_Builder0.setclientProvider(client_Provider0);
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      String string0 = "#;>1T2*L8P@";
      String string1 = "";
      requestInterceptorTape0.addHeader(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setRequestInterceptor(requestInterceptorTape0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setConverter(restAdapter_Builder0.converter);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Profiler<String> profiler0 = (Profiler<String>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      restAdapter_Builder0.ensureSaneDefaults();
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setProfiler(profiler0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      restAdapter_Builder1.ensureSaneDefaults();
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setErrorHandler(restAdapter_Builder0.errorHandler);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setServer(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be blank.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "|je^O)l77";
      Server server0 = new Server(string0, string0);
      assertNotNull(server0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("|je^O)l77", server0.getName());
      assertEquals("|je^O)l77", server0.getUrl());
      assertEquals("|je^O)l77", server0.getapiUrl());
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("|je^O)l77", server0.getName());
      assertEquals("|je^O)l77", server0.getUrl());
      assertEquals("|je^O)l77", server0.getapiUrl());
      
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertNotNull(okHttpClient0);
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkClient okClient0 = new OkClient(okHttpClient0);
      assertNotNull(okClient0);
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient((Client) okClient0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("|je^O)l77", server0.getName());
      assertEquals("|je^O)l77", server0.getUrl());
      assertEquals("|je^O)l77", server0.getapiUrl());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setClient(restAdapter_Builder0.clientProvider);
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("|je^O)l77", server0.getName());
      assertEquals("|je^O)l77", server0.getUrl());
      assertEquals("|je^O)l77", server0.getapiUrl());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setLogLevel(restAdapter_Builder1.logLevel);
      assertNotNull(restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("|je^O)l77", server0.getName());
      assertEquals("|je^O)l77", server0.getUrl());
      assertEquals("|je^O)l77", server0.getapiUrl());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      // Undeclared exception!
      try { 
        restAdapter_Builder4.setErrorHandler(restAdapter_Builder2.errorHandler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Error handler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      String string0 = "";
      Server server0 = new Server(string0);
      assertNotNull(server0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      
      Client.Provider client_Provider0 = null;
      int int0 = 0;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      assertNotNull(threadPoolExecutor_AbortPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadFactory0, threadPoolExecutor_AbortPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      RequestInterceptor requestInterceptor0 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
      assertNotNull(requestInterceptor0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0, server0.apiUrl);
      assertNotNull(gsonConverter0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertEquals("", gsonConverter0.getencoding());
      
      Profiler<TypedByteArray> profiler0 = (Profiler<TypedByteArray>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor0, requestInterceptor0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertNotNull(restAdapter0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertEquals("", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertNotNull(restAdapter_RestHandler0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertEquals("", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      String string0 = "<--- END HTTP (%s-byte body)";
      Server server0 = new Server(string0);
      assertNotNull(server0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("<--- END HTTP (%s-byte body)", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("<--- END HTTP (%s-byte body)", server0.getUrl());
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      assertNotNull(forkJoinPool0);
      
      RequestInterceptor requestInterceptor0 = null;
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0, server0.name);
      assertNotNull(gsonConverter0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("<--- END HTTP (%s-byte body)", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("<--- END HTTP (%s-byte body)", server0.getUrl());
      assertEquals("default", gsonConverter0.getencoding());
      
      Profiler<Integer> profiler0 = (Profiler<Integer>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = null;
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, forkJoinPool0, forkJoinPool0, requestInterceptor0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertNotNull(restAdapter0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("<--- END HTTP (%s-byte body)", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("<--- END HTTP (%s-byte body)", server0.getUrl());
      assertEquals("default", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertNotNull(restAdapter_RestHandler0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("<--- END HTTP (%s-byte body)", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("<--- END HTTP (%s-byte body)", server0.getUrl());
      assertEquals("default", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      Map<Method, RestMethodInfo> map0 = restAdapter_RestHandler0.getmethodDetailsCache();
      assertNotNull(map0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("<--- END HTTP (%s-byte body)", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("<--- END HTTP (%s-byte body)", server0.getUrl());
      assertEquals("default", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(restAdapter0.server);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("<--- END HTTP (%s-byte body)", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("<--- END HTTP (%s-byte body)", server0.getUrl());
      assertEquals("default", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setConverter(restAdapter_Builder0.converter);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Converter may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      String string0 = "";
      Server server0 = new Server(string0);
      assertNotNull(server0);
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      Executor executor0 = null;
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter8();
      assertNotNull(gsonConverter0);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      
      Profiler<Header> profiler0 = (Profiler<Header>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      GsonConverter gsonConverter1 = serializedObjectSupporter0.deserializeObjectConverter8();
      assertNull(gsonConverter1);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, executor0, executor0, requestInterceptor0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertNotNull(restAdapter0);
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertNotNull(restAdapter_RestHandler0);
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      Map<Method, RestMethodInfo> map0 = restAdapter_RestHandler0.getmethodDetailsCache();
      assertNotNull(map0);
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      int int0 = restAdapter0.getLOG_CHUNK_SIZE();
      assertEquals(4000, int0);
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      String string1 = "`qz9_j";
      RestMethodInfo restMethodInfo0 = null;
      RequestBuilder requestBuilder0 = null;
      try {
        requestBuilder0 = new RequestBuilder(gsonConverter0, restMethodInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Gson gson0 = null;
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertNotNull(gsonConverter0);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setConverter(gsonConverter0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setErrorHandler(restAdapter_Builder0.errorHandler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Error handler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLogLevel(restAdapter_LogLevel0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      Client client0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setClient(client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Client may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Server server0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setServer(server0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      String string0 = "9bg/";
      RestMethodInfo restMethodInfo0 = null;
      Request request0 = null;
      // Undeclared exception!
      try { 
        RestAdapter.getRequestInfo(string0, restMethodInfo0, request0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      UrlConnectionClient urlConnectionClient0 = new UrlConnectionClient();
      assertNotNull(urlConnectionClient0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient((Client) urlConnectionClient0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setLog(restAdapter_Builder0.log);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Log may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      String string0 = null;
      restAdapter_Log0.log(string0);
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      Class<Boolean> class0 = Boolean.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isAnnotation());
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLog(restAdapter_Log0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      Profiler<Header> profiler0 = (Profiler<Header>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      String string0 = "";
      int int0 = (-1936);
      String string1 = "";
      LinkedList<Header> linkedList0 = new LinkedList<Header>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      long long0 = 1300L;
      boolean boolean0 = restAdapter_Builder0.logLevel.log();
      assertFalse(boolean0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "com.google.gson.Gson$3";
      Server server0 = new Server(string0);
      assertNotNull(server0);
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      
      OkClient okClient0 = new OkClient();
      assertNotNull(okClient0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient((Client) okClient0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      
      String string1 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setServer(string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be blank.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient(client_Provider0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setLogLevel(restAdapter_Builder0.logLevel);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder2.setServer(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be blank.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      String string0 = "";
      Server server0 = new Server(string0);
      assertNotNull(server0);
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool0 = ForkJoinTask.getPool();
      assertNull(forkJoinPool0);
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter1();
      assertNotNull(gsonConverter0);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      
      Profiler<String> profiler0 = (Profiler<String>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      RequestInterceptorTape requestInterceptorTape1 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape1);
      assertFalse(requestInterceptorTape1.equals((Object)requestInterceptorTape0));
      
      requestInterceptorTape0.intercept(requestInterceptorTape1);
      assertFalse(requestInterceptorTape0.equals((Object)requestInterceptorTape1));
      assertFalse(requestInterceptorTape1.equals((Object)requestInterceptorTape0));
      assertNotSame(requestInterceptorTape0, requestInterceptorTape1);
      assertNotSame(requestInterceptorTape1, requestInterceptorTape0);
      
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, forkJoinPool0, forkJoinPool0, requestInterceptorTape0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertNotNull(restAdapter0);
      assertFalse(requestInterceptorTape0.equals((Object)requestInterceptorTape1));
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      Executor executor0 = restAdapter0.gethttpExecutor();
      assertNull(executor0);
      assertFalse(requestInterceptorTape0.equals((Object)requestInterceptorTape1));
      assertNotSame(requestInterceptorTape0, requestInterceptorTape1);
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      restAdapter0.setLogLevel(restAdapter_LogLevel0);
      assertFalse(requestInterceptorTape0.equals((Object)requestInterceptorTape1));
      assertNotSame(requestInterceptorTape0, requestInterceptorTape1);
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient(restAdapter0.clientProvider);
      assertNotNull(restAdapter_Builder1);
      assertFalse(requestInterceptorTape0.equals((Object)requestInterceptorTape1));
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotSame(requestInterceptorTape0, requestInterceptorTape1);
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.FULL;
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setLogLevel(restAdapter_LogLevel1);
      assertNotNull(restAdapter_Builder2);
      assertFalse(requestInterceptorTape0.equals((Object)requestInterceptorTape1));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      assertNotSame(requestInterceptorTape0, requestInterceptorTape1);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertNotSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder2.setRequestInterceptor(restAdapter_Builder0.requestInterceptor);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Request interceptor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "";
      Server server0 = new Server(string0, string0);
      assertNotNull(server0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      
      String string1 = "=GLs'<|43W+sQTvgg)";
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder0.setServer(string1);
      assertNotNull(restAdapter_Builder2);
      assertFalse(string1.equals((Object)string0));
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(string1, string0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      int int0 = 4;
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      LinkedTransferQueue<Runnable> linkedTransferQueue0 = new LinkedTransferQueue<Runnable>();
      assertNotNull(linkedTransferQueue0);
      
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(int0, int0, int0, timeUnit0, linkedTransferQueue0, threadFactory0);
      assertNotNull(threadPoolExecutor0);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder1.setExecutors(threadPoolExecutor0, restAdapter_Builder0.httpExecutor);
      assertNotNull(restAdapter_Builder3);
      assertFalse(string0.equals((Object)string1));
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setLog(restAdapter_Builder0.log);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Log may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      String string0 = "J/_lNz})\\=qQ.}*";
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter_LogLevel0);
      assertTrue(restAdapter_LogLevel0.log());
      
      boolean boolean0 = restAdapter_LogLevel0.log();
      assertTrue(boolean0);
      assertTrue(restAdapter_LogLevel0.log());
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLog(restAdapter_Log0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setServer(restAdapter_Builder0.server);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "com.google.gson.Gson$3";
      Server server0 = new Server(string0);
      assertNotNull(server0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getName());
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getName());
      
      OkClient okClient0 = new OkClient();
      assertNotNull(okClient0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient((Client) okClient0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getName());
      
      RestAdapter restAdapter0 = restAdapter_Builder2.build();
      assertNotNull(restAdapter0);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setLogLevel(restAdapter_Builder1.logLevel);
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getName());
      
      RestAdapter restAdapter1 = restAdapter_Builder3.build();
      assertNotNull(restAdapter1);
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertNotSame(restAdapter1, restAdapter0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter1.getLogLevel());
      assertEquals(4000, restAdapter1.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      Executor executor0 = restAdapter1.getcallbackExecutor();
      assertNotNull(executor0);
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertNotSame(restAdapter1, restAdapter0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter1.getLogLevel());
      assertEquals(4000, restAdapter1.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      Profiler profiler0 = restAdapter0.getprofiler();
      assertNull(profiler0);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertNotSame(restAdapter0, restAdapter1);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RequestInterceptor requestInterceptor0 = null;
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.NONE;
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder0.server, restAdapter_Builder0.clientProvider, restAdapter_Builder0.callbackExecutor, restAdapter_Builder0.httpExecutor, requestInterceptor0, restAdapter_Builder0.converter, restAdapter_Builder0.profiler, restAdapter_Builder0.errorHandler, restAdapter_Builder0.log, restAdapter_LogLevel1);
      assertNotNull(restAdapter0);
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      Converter converter0 = restAdapter0.getconverter();
      assertNull(converter0);
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      assertNotSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      Executor executor0 = restAdapter_Builder0.getcallbackExecutor();
      assertNull(executor0);
      
      SerializedObjectSupporter serializedObjectSupporter1 = null;
      RestAdapter.LogLevel restAdapter_LogLevel2 = RestAdapter.LogLevel.FULL;
      restAdapter_Builder0.ensureSaneDefaults();
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertEquals(4, restAdapter_LogLevelArray0.length);
      assertNotNull(restAdapter_LogLevelArray0);
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertEquals(4, restAdapter_LogLevelArray0.length);
      assertNotNull(restAdapter_LogLevelArray0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Client.Provider client_Provider0 = restAdapter_Builder0.getclientProvider();
      assertNull(client_Provider0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      String string0 = "$3v0PQU";
      restAdapter_Log0.log(string0);
      String string1 = "";
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setServer(string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be blank.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      Server server0 = serializedObjectSupporter0.deserializeObjectServer1();
      assertNotNull(server0);
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int0 = 2573;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      assertNotNull(threadPoolExecutor_CallerRunsPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadFactory0, threadPoolExecutor_CallerRunsPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter5();
      assertNotNull(gsonConverter0);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      
      Profiler<Header> profiler0 = (Profiler<Header>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(profiler0).toString();
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor0, requestInterceptorTape0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertNotNull(restAdapter0);
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      Profiler profiler1 = restAdapter0.getprofiler();
      assertNotNull(profiler1);
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      Client.Provider client_Provider1 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int1 = 18;
      int int2 = (-5936);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      LinkedTransferQueue<Runnable> linkedTransferQueue0 = new LinkedTransferQueue<Runnable>();
      assertNotNull(linkedTransferQueue0);
      
      ThreadFactory threadFactory1 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor threadPoolExecutor0 = null;
      try {
        threadPoolExecutor0 = new ThreadPoolExecutor(int1, int2, int2, timeUnit0, linkedTransferQueue0, threadFactory1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "com.google.gson.Gson$3";
      Server server0 = new Server(string0);
      assertNotNull(server0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      
      OkClient okClient0 = new OkClient();
      assertNotNull(okClient0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient((Client) okClient0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      
      RestAdapter restAdapter0 = restAdapter_Builder2.build();
      assertNotNull(restAdapter0);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      String string1 = "HEADERS";
      MockException mockException0 = new MockException();
      assertNotNull(mockException0);
      
      MockException mockException1 = new MockException(restAdapter0.IDLE_THREAD_NAME, mockException0);
      assertNotNull(mockException1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(mockException1.equals((Object)mockException0));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      MockThrowable mockThrowable0 = new MockThrowable(string1, mockException1);
      assertNotNull(mockThrowable0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(mockException0.equals((Object)mockException1));
      assertFalse(mockException1.equals((Object)mockException0));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      restAdapter0.logException(mockThrowable0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(mockException0.equals((Object)mockException1));
      assertFalse(mockException1.equals((Object)mockException0));
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertNotSame(string1, string0);
      assertNotSame(mockException0, mockException1);
      assertNotSame(mockException1, mockException0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("HEADERS", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: HEADERS", mockThrowable0.toString());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setLogLevel(restAdapter_Builder1.logLevel);
      assertNotNull(restAdapter_Builder3);
      assertFalse(string0.equals((Object)string1));
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      
      RestAdapter restAdapter1 = restAdapter_Builder3.build();
      assertNotNull(restAdapter1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertNotSame(restAdapter1, restAdapter0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter1.getLogLevel());
      assertEquals(4000, restAdapter1.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      Executor executor0 = restAdapter1.getcallbackExecutor();
      assertNotNull(executor0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertNotSame(restAdapter1, restAdapter0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter1.getLogLevel());
      assertEquals(4000, restAdapter1.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      restAdapter_Builder1.setcallbackExecutor(restAdapter0.callbackExecutor);
      assertFalse(string0.equals((Object)string1));
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertNotSame(restAdapter0, restAdapter1);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      Server server0 = serializedObjectSupporter0.deserializeObjectServer1();
      assertNotNull(server0);
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int0 = 3632;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadFactory0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      Request request0 = serializedObjectSupporter0.deserializeObjectRequest4();
      assertNotNull(request0);
      assertEquals("GET", request0.getMethod());
      assertEquals("http://example.com/", request0.getUrl());
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter2();
      assertNotNull(gsonConverter0);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      
      String string0 = "";
      String string1 = "appWidgetIds";
      requestInterceptorTape0.addPathParam(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      Profiler<Integer> profiler0 = (Profiler<Integer>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      String string2 = "HTTP executor may not be null.";
      String string3 = ">hO.";
      requestInterceptorTape0.addHeader(string2, string3);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNull(errorHandler0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor0, requestInterceptorTape0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertNotNull(restAdapter0);
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      GsonConverter gsonConverter1 = (GsonConverter)restAdapter0.getconverter();
      assertNotNull(gsonConverter1);
      assertSame(gsonConverter1, gsonConverter0);
      assertSame(gsonConverter0, gsonConverter1);
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("UTF-8", gsonConverter1.getencoding());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertEquals(4, restAdapter_LogLevelArray0.length);
      assertNotNull(restAdapter_LogLevelArray0);
      
      Request request1 = restAdapter0.logAndReplaceRequest(request0);
      assertNotNull(request1);
      assertSame(request1, request0);
      assertSame(request0, request1);
      assertSame(gsonConverter0, gsonConverter1);
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("GET", request1.getMethod());
      assertEquals("http://example.com/", request1.getUrl());
      assertEquals("GET", request0.getMethod());
      assertEquals("http://example.com/", request0.getUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(restAdapter0.server);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(gsonConverter0, gsonConverter1);
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      GsonConverter gsonConverter2 = new GsonConverter(gsonConverter0.gson, server0.name);
      assertNotNull(gsonConverter2);
      assertFalse(gsonConverter2.equals((Object)gsonConverter0));
      assertFalse(gsonConverter2.equals((Object)gsonConverter1));
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("default", gsonConverter2.getencoding());
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setConverter(gsonConverter2);
      assertNotNull(restAdapter_Builder2);
      assertFalse(gsonConverter0.equals((Object)gsonConverter2));
      assertFalse(gsonConverter2.equals((Object)gsonConverter0));
      assertFalse(gsonConverter2.equals((Object)gsonConverter1));
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertNotSame(gsonConverter0, gsonConverter2);
      assertSame(gsonConverter0, gsonConverter1);
      assertNotSame(gsonConverter2, gsonConverter0);
      assertNotSame(gsonConverter2, gsonConverter1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("default", gsonConverter2.getencoding());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      Profiler<String> profiler1 = (Profiler<String>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setProfiler(profiler1);
      assertNotNull(restAdapter_Builder3);
      assertFalse(gsonConverter0.equals((Object)gsonConverter2));
      assertFalse(gsonConverter2.equals((Object)gsonConverter0));
      assertFalse(gsonConverter2.equals((Object)gsonConverter1));
      assertNotSame(gsonConverter0, gsonConverter2);
      assertSame(gsonConverter0, gsonConverter1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertNotSame(gsonConverter2, gsonConverter0);
      assertNotSame(gsonConverter2, gsonConverter1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("default", gsonConverter2.getencoding());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder3.setErrorHandler(errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Error handler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      Server server0 = serializedObjectSupporter0.deserializeObjectServer1();
      assertNotNull(server0);
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int0 = 2573;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      assertNotNull(threadPoolExecutor_CallerRunsPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadFactory0, threadPoolExecutor_CallerRunsPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter5();
      assertNotNull(gsonConverter0);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      
      String string0 = "";
      Profiler<Header> profiler0 = (Profiler<Header>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(profiler0).toString();
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor0, requestInterceptorTape0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertNotNull(restAdapter0);
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      Profiler profiler1 = restAdapter0.getprofiler();
      assertNotNull(profiler1);
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      Client.Provider client_Provider1 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int1 = 18;
      int int2 = (-5936);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      LinkedTransferQueue<Runnable> linkedTransferQueue0 = new LinkedTransferQueue<Runnable>();
      assertNotNull(linkedTransferQueue0);
      
      ThreadFactory threadFactory1 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      Server server1 = restAdapter0.getserver();
      assertNotNull(server1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertSame(server0, server1);
      assertSame(server1, server0);
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("default", server1.getDEFAULT_NAME());
      assertEquals("http://example.com", server1.getUrl());
      assertEquals("http://example.com", server1.getapiUrl());
      assertEquals("default", server1.getName());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      ThreadPoolExecutor threadPoolExecutor0 = null;
      try {
        threadPoolExecutor0 = new ThreadPoolExecutor(int1, int2, int2, timeUnit0, linkedTransferQueue0, threadFactory1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 11000)
  public void test57()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "com.google.gson.Gson$3";
      Server server0 = new Server(string0);
      assertNotNull(server0);
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      
      OkClient okClient0 = new OkClient();
      assertNotNull(okClient0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient((Client) okClient0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      
      RestAdapter restAdapter0 = restAdapter_Builder2.build();
      assertNotNull(restAdapter0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setLogLevel(restAdapter_Builder1.logLevel);
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      
      RestAdapter restAdapter1 = restAdapter_Builder3.build();
      assertNotNull(restAdapter1);
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertNotSame(restAdapter1, restAdapter0);
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter1.getLogLevel());
      assertEquals(4000, restAdapter1.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      Executor executor0 = restAdapter1.getcallbackExecutor();
      assertNotNull(executor0);
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertNotSame(restAdapter1, restAdapter0);
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter1.getLogLevel());
      assertEquals(4000, restAdapter1.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      ErrorHandler errorHandler0 = restAdapter0.geterrorHandler();
      assertNotNull(errorHandler0);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertNotSame(restAdapter0, restAdapter1);
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      restAdapter1.setLogLevel(restAdapter_LogLevel0);
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertNotSame(restAdapter1, restAdapter0);
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter1.getLogLevel());
      assertEquals(4000, restAdapter1.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      Executor executor1 = restAdapter0.gethttpExecutor();
      assertNotNull(executor1);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertNotSame(restAdapter0, restAdapter1);
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
  }

  @Test(timeout = 11000)
  public void test58()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "com.google.gson.Gson$3";
      Server server0 = new Server(string0);
      assertNotNull(server0);
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      
      OkClient okClient0 = new OkClient();
      assertNotNull(okClient0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient((Client) okClient0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      
      RestAdapter restAdapter0 = restAdapter_Builder2.build();
      assertNotNull(restAdapter0);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setLogLevel(restAdapter_Builder1.logLevel);
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      
      RestAdapter restAdapter1 = restAdapter_Builder3.build();
      assertNotNull(restAdapter1);
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertNotSame(restAdapter1, restAdapter0);
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter1.getLogLevel());
      assertEquals(4000, restAdapter1.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      Executor executor0 = restAdapter1.getcallbackExecutor();
      assertNotNull(executor0);
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertNotSame(restAdapter1, restAdapter0);
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter1.getLogLevel());
      assertEquals(4000, restAdapter1.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        restAdapter1.create(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only interface endpoint definitions are supported.
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test59()  throws Throwable  {
      String string0 = "RIGHT_LEFT";
      String string1 = "vU";
      Server server0 = new Server(string0, string1);
      assertNotNull(server0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("RIGHT_LEFT", server0.getapiUrl());
      assertEquals("RIGHT_LEFT", server0.getUrl());
      assertEquals("vU", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      assertNotNull(forkJoinPool0);
      
      RequestInterceptor requestInterceptor0 = null;
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0, server0.name);
      assertNotNull(gsonConverter0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("RIGHT_LEFT", server0.getapiUrl());
      assertEquals("RIGHT_LEFT", server0.getUrl());
      assertEquals("vU", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("vU", gsonConverter0.getencoding());
      
      Profiler<TypedByteArray> profiler0 = (Profiler<TypedByteArray>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = null;
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, forkJoinPool0, forkJoinPool0, requestInterceptor0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertNotNull(restAdapter0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("RIGHT_LEFT", server0.getapiUrl());
      assertEquals("RIGHT_LEFT", server0.getUrl());
      assertEquals("vU", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("vU", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      restAdapter_Log0.log(string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      RequestInterceptor requestInterceptor1 = restAdapter0.getrequestInterceptor();
      assertNull(requestInterceptor1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("RIGHT_LEFT", server0.getapiUrl());
      assertEquals("RIGHT_LEFT", server0.getUrl());
      assertEquals("vU", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("vU", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      ErrorHandler errorHandler1 = restAdapter0.geterrorHandler();
      assertNull(errorHandler1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("RIGHT_LEFT", server0.getapiUrl());
      assertEquals("RIGHT_LEFT", server0.getUrl());
      assertEquals("vU", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("vU", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      Class<Header> class0 = Header.class;
      // Undeclared exception!
      try { 
        restAdapter0.create(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only interface endpoint definitions are supported.
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test60()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "";
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder0.server, restAdapter_Builder0.clientProvider, restAdapter_Builder0.callbackExecutor, restAdapter_Builder0.httpExecutor, restAdapter_Builder0.requestInterceptor, restAdapter_Builder0.converter, restAdapter_Builder0.profiler, restAdapter_Builder0.errorHandler, restAdapter_Builder0.log, restAdapter_LogLevel0);
      assertNotNull(restAdapter0);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      String string1 = restAdapter0.getTHREAD_PREFIX();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Retrofit-", string1);
      assertNotSame(string1, string0);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setServer(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be blank.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test61()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Profiler<String> profiler0 = (Profiler<String>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setProfiler(profiler0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      restAdapter_Builder1.ensureSaneDefaults();
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      Executor executor0 = null;
      restAdapter_Builder0.setcallbackExecutor(executor0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder0.setConverter(restAdapter_Builder1.converter);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder2.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test62()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "com.google.gson.Gson$3";
      Server server0 = new Server(string0);
      assertNotNull(server0);
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      
      OkClient okClient0 = new OkClient();
      assertNotNull(okClient0);
      
      RestAdapter restAdapter0 = restAdapter_Builder1.build();
      assertNotNull(restAdapter0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder0.setLogLevel(restAdapter_Builder1.logLevel);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      
      RestAdapter restAdapter1 = restAdapter_Builder2.build();
      assertNotNull(restAdapter1);
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertNotSame(restAdapter1, restAdapter0);
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter1.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter1.getLOG_CHUNK_SIZE());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      Executor executor0 = restAdapter1.getcallbackExecutor();
      assertNotNull(executor0);
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertNotSame(restAdapter1, restAdapter0);
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter1.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter1.getLOG_CHUNK_SIZE());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setServer(restAdapter0.THREAD_PREFIX);
      assertNotNull(restAdapter_Builder3);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      RequestInterceptor requestInterceptor0 = restAdapter1.getrequestInterceptor();
      assertNotNull(requestInterceptor0);
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertNotSame(restAdapter1, restAdapter0);
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter1.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter1.getLOG_CHUNK_SIZE());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
  }

  @Test(timeout = 11000)
  public void test63()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "com.google.gson.Gson$3";
      Server server0 = new Server(string0);
      assertNotNull(server0);
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("default", server0.getName());
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("default", server0.getName());
      
      OkClient okClient0 = new OkClient();
      assertNotNull(okClient0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient((Client) okClient0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("default", server0.getName());
      
      RestAdapter restAdapter0 = restAdapter_Builder2.build();
      assertNotNull(restAdapter0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setLogLevel(restAdapter_Builder1.logLevel);
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("default", server0.getName());
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setServer(restAdapter0.server);
      assertNotNull(restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      RestAdapter restAdapter1 = restAdapter_Builder3.build();
      assertNotNull(restAdapter1);
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertNotSame(restAdapter1, restAdapter0);
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter1.getLogLevel());
      assertEquals(4000, restAdapter1.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      String string1 = restAdapter0.getIDLE_THREAD_NAME();
      assertNotNull(string1);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("Retrofit-Idle", string1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertNotSame(restAdapter0, restAdapter1);
      assertNotSame(string1, string0);
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
  }

  @Test(timeout = 11000)
  public void test64()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "com.google.gson.Gson$3";
      Server server0 = new Server(string0);
      assertNotNull(server0);
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      
      OkClient okClient0 = new OkClient();
      assertNotNull(okClient0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient((Client) okClient0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      
      RestAdapter restAdapter0 = restAdapter_Builder2.build();
      assertNotNull(restAdapter0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      restAdapter_Builder0.logLevel = restAdapter_LogLevel0;
      assertTrue(restAdapter_Builder0.logLevel.log());
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setLogLevel(restAdapter_Builder1.logLevel);
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      
      RestAdapter restAdapter1 = restAdapter_Builder3.build();
      assertNotNull(restAdapter1);
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertNotSame(restAdapter1, restAdapter0);
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
      assertEquals(4000, restAdapter1.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      Executor executor0 = restAdapter1.getcallbackExecutor();
      assertNotNull(executor0);
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertNotSame(restAdapter1, restAdapter0);
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
      assertEquals(4000, restAdapter1.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      restAdapter1.setLogLevel(restAdapter0.logLevel);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertNotSame(restAdapter1, restAdapter0);
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter1.getLogLevel());
      assertEquals(4000, restAdapter1.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      Executor executor1 = restAdapter0.gethttpExecutor();
      assertNotNull(executor1);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertNotSame(restAdapter0, restAdapter1);
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      int int0 = (-1871);
      Random.setNextRandom(int0);
      String string1 = restAdapter1.getIDLE_THREAD_NAME();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals("Retrofit-Idle", string1);
      assertNotSame(string1, string0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertNotSame(restAdapter1, restAdapter0);
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter1.getLogLevel());
      assertEquals(4000, restAdapter1.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = restAdapter0.getLogLevel();
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter_LogLevel1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertNotSame(restAdapter0, restAdapter1);
      assertFalse(restAdapter_LogLevel1.log());
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
  }

  @Test(timeout = 11000)
  public void test65()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      int int0 = 4000;
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      assertNotNull(forkJoinPool_ForkJoinWorkerThreadFactory0);
      
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      String string0 = ".'ISV`l62bDi1&[";
      MockThread mockThread0 = new MockThread(string0);
      assertNotNull(mockThread0);
      
      MockThread mockThread1 = new MockThread(mockThread0);
      assertNotNull(mockThread1);
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      MockThread mockThread2 = new MockThread(threadGroup0, mockThread1);
      assertNotNull(mockThread2);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = mockThread2.getUncaughtExceptionHandler();
      assertNotNull(thread_UncaughtExceptionHandler0);
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(mockThread2, mockThread0);
      assertNotSame(mockThread2, mockThread1);
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      
      boolean boolean0 = true;
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(int0, forkJoinPool_ForkJoinWorkerThreadFactory0, thread_UncaughtExceptionHandler0, boolean0);
      assertNotNull(forkJoinPool0);
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      
      restAdapter_Builder0.sethttpExecutor(forkJoinPool0);
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(mockThread2, mockThread0);
      assertNotSame(mockThread2, mockThread1);
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLog(restAdapter_Log0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      Profiler<Header> profiler0 = (Profiler<Header>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      String string1 = "";
      int int1 = (-1936);
      String string2 = "";
      LinkedList<Header> linkedList0 = new LinkedList<Header>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      long long0 = 1300L;
      boolean boolean1 = restAdapter_Builder0.logLevel.log();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.HEADERS;
      Executor executor0 = restAdapter_Builder0.getcallbackExecutor();
      assertNull(executor0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      String string3 = "---- END ERROR";
      // Undeclared exception!
      try { 
        RestAdapter.LogLevel.valueOf(string3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant retrofit.RestAdapter.LogLevel.---- END ERROR
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test66()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      Server server0 = serializedObjectSupporter0.deserializeObjectServer1();
      assertNotNull(server0);
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getName());
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int0 = 3632;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadFactory0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      Request request0 = serializedObjectSupporter0.deserializeObjectRequest4();
      assertNotNull(request0);
      assertEquals("http://example.com/", request0.getUrl());
      assertEquals("GET", request0.getMethod());
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter2();
      assertNotNull(gsonConverter0);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      
      String string0 = "";
      String string1 = "appWidgetIds";
      requestInterceptorTape0.addPathParam(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = "HTTP executor may not be null.";
      String string3 = ">hO.";
      requestInterceptorTape0.addHeader(string2, string3);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNull(errorHandler0);
      
      TypedString typedString0 = new TypedString(string0);
      assertNotNull(typedString0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNull(typedString0.fileName());
      assertEquals(0L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      
      Class<Header> class0 = Header.class;
      TypeToken<Header> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      Class class1 = (Class)typeToken0.getType();
      assertNotNull(class1);
      assertEquals("class retrofit.client.Header", class1.toString());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      
      Object object0 = gsonConverter0.fromBody(typedString0, class1);
      assertNull(object0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNull(typedString0.fileName());
      assertEquals(0L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals("class retrofit.client.Header", class1.toString());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      GsonConverter gsonConverter1 = serializedObjectSupporter0.deserializeObjectConverter5();
      assertNotNull(gsonConverter1);
      assertFalse(gsonConverter1.equals((Object)gsonConverter0));
      assertNotSame(gsonConverter1, gsonConverter0);
      assertEquals("UTF-8", gsonConverter1.getencoding());
      
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertEquals(4, restAdapter_LogLevelArray0.length);
      assertNotNull(restAdapter_LogLevelArray0);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      GsonConverter gsonConverter2 = new GsonConverter(gsonConverter0.gson, server0.name);
      assertNotNull(gsonConverter2);
      assertFalse(gsonConverter0.equals((Object)gsonConverter1));
      assertFalse(gsonConverter2.equals((Object)gsonConverter1));
      assertFalse(gsonConverter2.equals((Object)gsonConverter0));
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("default", gsonConverter2.getencoding());
      
      Profiler<String> profiler0 = (Profiler<String>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      Client.Provider client_Provider1 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder0.server, client_Provider1, restAdapter_Builder0.callbackExecutor, restAdapter_Builder0.httpExecutor, restAdapter_Builder0.requestInterceptor, restAdapter_Builder0.converter, profiler0, restAdapter_Builder0.errorHandler, restAdapter_Builder0.log, restAdapter_Builder0.logLevel);
      assertNotNull(restAdapter0);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      Server server1 = restAdapter0.getserver();
      assertNull(server1);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
  }

  @Test(timeout = 11000)
  public void test67()  throws Throwable  {
      String string0 = "";
      Server server0 = new Server(string0);
      assertNotNull(server0);
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool0 = ForkJoinTask.getPool();
      assertNull(forkJoinPool0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      RequestInterceptor requestInterceptor0 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
      assertNotNull(requestInterceptor0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      String string1 = "";
      GsonConverter gsonConverter0 = new GsonConverter(gson0, string1);
      assertNotNull(gsonConverter0);
      assertEquals("", gsonConverter0.getencoding());
      
      Profiler<ParcelUuid> profiler0 = (Profiler<ParcelUuid>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, forkJoinPool0, forkJoinPool0, requestInterceptor0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertNotNull(restAdapter0);
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertNotNull(restAdapter_RestHandler0);
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      Executor executor0 = restAdapter0.getcallbackExecutor();
      assertNull(executor0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
  }

  @Test(timeout = 11000)
  public void test68()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      Server server0 = serializedObjectSupporter0.deserializeObjectServer1();
      assertNotNull(server0);
      assertEquals("default", server0.getName());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getUrl());
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int0 = 3632;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadFactory0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      Request request0 = serializedObjectSupporter0.deserializeObjectRequest4();
      assertNotNull(request0);
      assertEquals("http://example.com/", request0.getUrl());
      assertEquals("GET", request0.getMethod());
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter2();
      assertNotNull(gsonConverter0);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      
      String string0 = "";
      String string1 = "appWidgetIds";
      requestInterceptorTape0.addPathParam(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      Profiler<Integer> profiler0 = (Profiler<Integer>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      String string2 = "HTTP executor may not be null.";
      String string3 = ">hO.";
      requestInterceptorTape0.addHeader(string2, string3);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNull(errorHandler0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor0, requestInterceptorTape0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertNotNull(restAdapter0);
      assertEquals("default", server0.getName());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      GsonConverter gsonConverter1 = (GsonConverter)restAdapter0.getconverter();
      assertNotNull(gsonConverter1);
      assertSame(gsonConverter1, gsonConverter0);
      assertSame(gsonConverter0, gsonConverter1);
      assertEquals("default", server0.getName());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("UTF-8", gsonConverter1.getencoding());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertEquals(4, restAdapter_LogLevelArray0.length);
      assertNotNull(restAdapter_LogLevelArray0);
      
      Request request1 = restAdapter0.logAndReplaceRequest(request0);
      assertNotNull(request1);
      assertSame(request1, request0);
      assertSame(request0, request1);
      assertSame(gsonConverter0, gsonConverter1);
      assertEquals("default", server0.getName());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("GET", request1.getMethod());
      assertEquals("http://example.com/", request1.getUrl());
      assertEquals("http://example.com/", request0.getUrl());
      assertEquals("GET", request0.getMethod());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(restAdapter0.server);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(gsonConverter0, gsonConverter1);
      assertEquals("default", server0.getName());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter8();
      assertNotNull(gsonConverter2);
      assertFalse(gsonConverter2.equals((Object)gsonConverter1));
      assertFalse(gsonConverter2.equals((Object)gsonConverter0));
      assertNotSame(gsonConverter2, gsonConverter1);
      assertNotSame(gsonConverter2, gsonConverter0);
      assertEquals("UTF-8", gsonConverter2.getencoding());
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setConverter(gsonConverter2);
      assertNotNull(restAdapter_Builder2);
      assertFalse(gsonConverter0.equals((Object)gsonConverter2));
      assertFalse(gsonConverter2.equals((Object)gsonConverter1));
      assertFalse(gsonConverter2.equals((Object)gsonConverter0));
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotSame(gsonConverter0, gsonConverter2);
      assertSame(gsonConverter0, gsonConverter1);
      assertNotSame(gsonConverter2, gsonConverter1);
      assertNotSame(gsonConverter2, gsonConverter0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertEquals("default", server0.getName());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("UTF-8", gsonConverter2.getencoding());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      Profiler<String> profiler1 = (Profiler<String>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setProfiler(profiler1);
      assertNotNull(restAdapter_Builder3);
      assertFalse(gsonConverter0.equals((Object)gsonConverter2));
      assertFalse(gsonConverter2.equals((Object)gsonConverter1));
      assertFalse(gsonConverter2.equals((Object)gsonConverter0));
      assertNotSame(gsonConverter0, gsonConverter2);
      assertSame(gsonConverter0, gsonConverter1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotSame(gsonConverter2, gsonConverter1);
      assertNotSame(gsonConverter2, gsonConverter0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertEquals("default", server0.getName());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("UTF-8", gsonConverter2.getencoding());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder3.setErrorHandler(errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Error handler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test69()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "com.google.gson.Gson$3";
      Server server0 = new Server(string0);
      assertNotNull(server0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getName());
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getName());
      
      OkClient okClient0 = new OkClient();
      assertNotNull(okClient0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient((Client) okClient0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getName());
      
      RestAdapter restAdapter0 = restAdapter_Builder2.build();
      assertNotNull(restAdapter0);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      restAdapter_Builder0.logLevel = restAdapter0.logLevel;
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertFalse(restAdapter_Builder0.logLevel.log());
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setLogLevel(restAdapter_Builder1.logLevel);
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getName());
      
      RestAdapter restAdapter1 = restAdapter_Builder3.build();
      assertNotNull(restAdapter1);
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertNotSame(restAdapter1, restAdapter0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter1.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter1.getLogLevel());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      Executor executor0 = restAdapter0.getcallbackExecutor();
      assertNotNull(executor0);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertNotSame(restAdapter0, restAdapter1);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      restAdapter1.setLogLevel(restAdapter0.logLevel);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertNotSame(restAdapter1, restAdapter0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter1.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter1.getLogLevel());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      Executor executor1 = restAdapter0.gethttpExecutor();
      assertNotNull(executor1);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertNotSame(restAdapter0, restAdapter1);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      int int0 = (-1871);
      Random.setNextRandom(int0);
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertNotNull(restAdapter_RestHandler0);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("com.google.gson.Gson$3", server0.getUrl());
      assertEquals("com.google.gson.Gson$3", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      Method method0 = null;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) executor1;
      objectArray0[1] = (Object) restAdapter0;
      objectArray0[2] = (Object) executor0;
      objectArray0[3] = (Object) restAdapter_Builder1;
      try { 
        restAdapter_RestHandler0.invoke(executor1, method0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter$RestHandler", e);
      }
  }

  @Test(timeout = 11000)
  public void test70()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "";
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder0.server, restAdapter_Builder0.clientProvider, restAdapter_Builder0.callbackExecutor, restAdapter_Builder0.httpExecutor, restAdapter_Builder0.requestInterceptor, restAdapter_Builder0.converter, restAdapter_Builder0.profiler, restAdapter_Builder0.errorHandler, restAdapter_Builder0.log, restAdapter_LogLevel0);
      assertNotNull(restAdapter0);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      Request request0 = null;
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.BASIC;
      restAdapter0.setLogLevel(restAdapter_LogLevel1);
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      // Undeclared exception!
      try { 
        restAdapter0.logAndReplaceRequest(request0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test71()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      Server server0 = serializedObjectSupporter0.deserializeObjectServer1();
      assertNotNull(server0);
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getapiUrl());
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int0 = 3632;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadFactory0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      Request request0 = serializedObjectSupporter0.deserializeObjectRequest4();
      assertNotNull(request0);
      assertEquals("GET", request0.getMethod());
      assertEquals("http://example.com/", request0.getUrl());
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter2();
      assertNotNull(gsonConverter0);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      
      String string0 = "";
      String string1 = "appWidgetIds";
      requestInterceptorTape0.addPathParam(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      Profiler<Integer> profiler0 = (Profiler<Integer>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      String string2 = "HTTP executor may not be null.";
      String string3 = ">hO.";
      requestInterceptorTape0.addHeader(string2, string3);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNull(errorHandler0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor0, requestInterceptorTape0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertNotNull(restAdapter0);
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      GsonConverter gsonConverter1 = (GsonConverter)restAdapter0.getconverter();
      assertNotNull(gsonConverter1);
      assertSame(gsonConverter1, gsonConverter0);
      assertSame(gsonConverter0, gsonConverter1);
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("UTF-8", gsonConverter1.getencoding());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertEquals(4, restAdapter_LogLevelArray0.length);
      assertNotNull(restAdapter_LogLevelArray0);
      
      Request request1 = restAdapter0.logAndReplaceRequest(request0);
      assertNotNull(request1);
      assertSame(request1, request0);
      assertSame(request0, request1);
      assertSame(gsonConverter0, gsonConverter1);
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("GET", request1.getMethod());
      assertEquals("http://example.com/", request1.getUrl());
      assertEquals("GET", request0.getMethod());
      assertEquals("http://example.com/", request0.getUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Request request2 = restAdapter0.logAndReplaceRequest(request1);
      assertNotNull(request2);
      assertSame(request1, request0);
      assertSame(request1, request2);
      assertSame(request0, request2);
      assertSame(request0, request1);
      assertSame(request2, request1);
      assertSame(request2, request0);
      assertSame(gsonConverter0, gsonConverter1);
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("GET", request1.getMethod());
      assertEquals("http://example.com/", request1.getUrl());
      assertEquals("GET", request0.getMethod());
      assertEquals("http://example.com/", request0.getUrl());
      assertEquals("GET", request2.getMethod());
      assertEquals("http://example.com/", request2.getUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(restAdapter0.server);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(gsonConverter0, gsonConverter1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter8();
      assertNotNull(gsonConverter2);
      assertFalse(gsonConverter2.equals((Object)gsonConverter1));
      assertFalse(gsonConverter2.equals((Object)gsonConverter0));
      assertNotSame(gsonConverter2, gsonConverter1);
      assertNotSame(gsonConverter2, gsonConverter0);
      assertEquals("UTF-8", gsonConverter2.getencoding());
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setConverter(gsonConverter2);
      assertNotNull(restAdapter_Builder2);
      assertFalse(gsonConverter0.equals((Object)gsonConverter2));
      assertFalse(gsonConverter2.equals((Object)gsonConverter1));
      assertFalse(gsonConverter2.equals((Object)gsonConverter0));
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(gsonConverter0, gsonConverter1);
      assertNotSame(gsonConverter0, gsonConverter2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotSame(gsonConverter2, gsonConverter1);
      assertNotSame(gsonConverter2, gsonConverter0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("UTF-8", gsonConverter2.getencoding());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      Profiler<String> profiler1 = (Profiler<String>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      String string4 = "$1U1Tnx]*<|D/.q%vx";
      gsonConverter2.encoding = string4;
      assertEquals("$1U1Tnx]*<|D/.q%vx", gsonConverter2.getencoding());
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setProfiler(profiler1);
      assertNotNull(restAdapter_Builder3);
      assertFalse(gsonConverter0.equals((Object)gsonConverter2));
      assertFalse(gsonConverter2.equals((Object)gsonConverter1));
      assertFalse(gsonConverter2.equals((Object)gsonConverter0));
      assertSame(gsonConverter0, gsonConverter1);
      assertNotSame(gsonConverter0, gsonConverter2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertNotSame(gsonConverter2, gsonConverter1);
      assertNotSame(gsonConverter2, gsonConverter0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("$1U1Tnx]*<|D/.q%vx", gsonConverter2.getencoding());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      RestAdapter restAdapter1 = restAdapter_Builder3.build();
      assertNotNull(restAdapter1);
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertFalse(gsonConverter0.equals((Object)gsonConverter2));
      assertFalse(gsonConverter2.equals((Object)gsonConverter1));
      assertFalse(gsonConverter2.equals((Object)gsonConverter0));
      assertNotSame(restAdapter1, restAdapter0);
      assertSame(gsonConverter0, gsonConverter1);
      assertNotSame(gsonConverter0, gsonConverter2);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertNotSame(gsonConverter2, gsonConverter1);
      assertNotSame(gsonConverter2, gsonConverter0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter1.getLogLevel());
      assertEquals(4000, restAdapter1.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("$1U1Tnx]*<|D/.q%vx", gsonConverter2.getencoding());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor1 = (ScheduledThreadPoolExecutor)restAdapter0.gethttpExecutor();
      assertNotNull(scheduledThreadPoolExecutor1);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(gsonConverter0.equals((Object)gsonConverter2));
      assertSame(scheduledThreadPoolExecutor1, scheduledThreadPoolExecutor0);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor1);
      assertSame(gsonConverter0, gsonConverter1);
      assertNotSame(gsonConverter0, gsonConverter2);
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = restAdapter0.getLogLevel();
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(gsonConverter0.equals((Object)gsonConverter2));
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter_LogLevel1);
      assertSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor1);
      assertSame(gsonConverter0, gsonConverter1);
      assertNotSame(gsonConverter0, gsonConverter2);
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getapiUrl());
      assertTrue(restAdapter_LogLevel1.log());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder3.setErrorHandler(errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Error handler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test72()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      Server server0 = serializedObjectSupporter0.deserializeObjectServer1();
      assertNotNull(server0);
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("http://example.com", server0.getapiUrl());
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int0 = 300;
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      assertNotNull(forkJoinPool_ForkJoinWorkerThreadFactory0);
      
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = MockThread.getDefaultUncaughtExceptionHandler();
      assertNotNull(thread_UncaughtExceptionHandler0);
      
      boolean boolean0 = true;
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(int0, forkJoinPool_ForkJoinWorkerThreadFactory0, thread_UncaughtExceptionHandler0, boolean0);
      assertNotNull(forkJoinPool0);
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter2();
      assertNotNull(gsonConverter0);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      
      Profiler<Header> profiler0 = (Profiler<Header>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, forkJoinPool0, forkJoinPool0, requestInterceptorTape0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertNotNull(restAdapter0);
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertNotNull(restAdapter_RestHandler0);
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      RequestInterceptorTape requestInterceptorTape1 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape1);
      assertFalse(requestInterceptorTape1.equals((Object)requestInterceptorTape0));
      
      RestMethodInfo restMethodInfo0 = null;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) server0;
      objectArray0[1] = (Object) forkJoinPool_ForkJoinWorkerThreadFactory0;
      objectArray0[2] = (Object) restAdapter0;
      // Undeclared exception!
      try { 
        restAdapter_RestHandler0.invokeRequest(requestInterceptorTape1, restMethodInfo0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter$RestHandler", e);
      }
  }

  @Test(timeout = 11000)
  public void test73()  throws Throwable  {
      String string0 = "RIGHT_LEFT";
      String string1 = "vU";
      Server server0 = new Server(string0, string1);
      assertNotNull(server0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("RIGHT_LEFT", server0.getapiUrl());
      assertEquals("RIGHT_LEFT", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("vU", server0.getName());
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      assertNotNull(forkJoinPool0);
      
      RequestInterceptor requestInterceptor0 = null;
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0, server0.name);
      assertNotNull(gsonConverter0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("RIGHT_LEFT", server0.getapiUrl());
      assertEquals("RIGHT_LEFT", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("vU", server0.getName());
      assertEquals("vU", gsonConverter0.getencoding());
      
      Profiler<TypedByteArray> profiler0 = (Profiler<TypedByteArray>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = null;
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, forkJoinPool0, forkJoinPool0, requestInterceptor0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertNotNull(restAdapter0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("RIGHT_LEFT", server0.getapiUrl());
      assertEquals("RIGHT_LEFT", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("vU", server0.getName());
      assertEquals("vU", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      restAdapter_Log0.log(string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      String string2 = "";
      MockException mockException0 = new MockException();
      assertNotNull(mockException0);
      
      MockException mockException1 = new MockException(string2, mockException0);
      assertNotNull(mockException1);
      assertFalse(mockException1.equals((Object)mockException0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = "type parameter";
      restAdapter0.logException(mockException1, string3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(mockException0.equals((Object)mockException1));
      assertFalse(mockException1.equals((Object)mockException0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(mockException0, mockException1);
      assertNotSame(mockException1, mockException0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertEquals("RIGHT_LEFT", server0.getapiUrl());
      assertEquals("RIGHT_LEFT", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("vU", server0.getName());
      assertEquals("vU", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      RequestInterceptor requestInterceptor1 = restAdapter0.getrequestInterceptor();
      assertNull(requestInterceptor1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertEquals("RIGHT_LEFT", server0.getapiUrl());
      assertEquals("RIGHT_LEFT", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("vU", server0.getName());
      assertEquals("vU", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      ErrorHandler errorHandler1 = restAdapter0.geterrorHandler();
      assertNull(errorHandler1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertEquals("RIGHT_LEFT", server0.getapiUrl());
      assertEquals("RIGHT_LEFT", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("vU", server0.getName());
      assertEquals("vU", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      Class<Header> class0 = Header.class;
      Class<Header> class1 = null;
      // Undeclared exception!
      try { 
        restAdapter0.create(class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test74()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      int int0 = 4012;
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      assertNotNull(forkJoinPool_ForkJoinWorkerThreadFactory0);
      
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      String string0 = ".'ISV`l62bDi1&[";
      MockThread mockThread0 = new MockThread(string0);
      assertNotNull(mockThread0);
      
      MockThread mockThread1 = new MockThread(mockThread0);
      assertNotNull(mockThread1);
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      MockThread mockThread2 = new MockThread(threadGroup0, mockThread1);
      assertNotNull(mockThread2);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = mockThread2.getUncaughtExceptionHandler();
      assertNotNull(thread_UncaughtExceptionHandler0);
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(mockThread2, mockThread1);
      assertNotSame(mockThread2, mockThread0);
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertFalse(mockThread2.isDaemon());
      assertEquals(0, mockThread2.countStackFrames());
      
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      assertNotNull(classLoader0);
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread1, mockThread0);
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      
      boolean boolean0 = true;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(int0, forkJoinPool_ForkJoinWorkerThreadFactory0, thread_UncaughtExceptionHandler0, boolean0);
      assertNotNull(forkJoinPool0);
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(boolean0 == boolean1);
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertFalse(mockThread2.isDaemon());
      assertEquals(0, mockThread2.countStackFrames());
      
      restAdapter_Builder0.sethttpExecutor(forkJoinPool0);
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(boolean0 == boolean1);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(mockThread2, mockThread1);
      assertNotSame(mockThread2, mockThread0);
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertFalse(mockThread2.isDaemon());
      assertEquals(0, mockThread2.countStackFrames());
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLog(restAdapter_Log0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      Map<Thread, StackTraceElement[]> map0 = MockThread.getAllStackTraces();
      assertNotNull(map0);
      assertEquals(2319, map0.size());
      assertFalse(map0.isEmpty());
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      Profiler<Header> profiler0 = (Profiler<Header>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      String string1 = "";
      MockThread.setDefaultUncaughtExceptionHandler(thread_UncaughtExceptionHandler0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertNotSame(string0, string1);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(mockThread2, mockThread1);
      assertNotSame(mockThread2, mockThread0);
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertFalse(mockThread2.isDaemon());
      assertEquals(0, mockThread2.countStackFrames());
      
      int int1 = (-1936);
      String string2 = "";
      LinkedList<Header> linkedList0 = new LinkedList<Header>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      long long0 = 1300L;
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      boolean boolean3 = restAdapter_Builder0.logLevel.log();
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      Executor executor0 = restAdapter_Builder0.getcallbackExecutor();
      assertNull(executor0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.BASIC;
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder0.server, restAdapter_Builder1.clientProvider, restAdapter_Builder0.callbackExecutor, forkJoinPool0, restAdapter_Builder1.requestInterceptor, restAdapter_Builder0.converter, profiler0, restAdapter_Builder1.errorHandler, restAdapter_Builder0.log, restAdapter_LogLevel1);
      assertNotNull(restAdapter0);
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertTrue(boolean0 == boolean2);
      assertFalse(boolean0 == boolean3);
      assertFalse(boolean0 == boolean1);
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertFalse(mockThread2.isDaemon());
      assertEquals(0, mockThread2.countStackFrames());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertNotNull(restAdapter_RestHandler0);
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertTrue(boolean0 == boolean2);
      assertFalse(boolean0 == boolean3);
      assertFalse(boolean0 == boolean1);
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertFalse(mockThread2.isDaemon());
      assertEquals(0, mockThread2.countStackFrames());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      Class<Object> class0 = Object.class;
      Executor executor1 = restAdapter0.gethttpExecutor();
      assertNull(executor1);
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertTrue(boolean0 == boolean2);
      assertFalse(boolean0 == boolean3);
      assertFalse(boolean0 == boolean1);
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(mockThread2, mockThread1);
      assertNotSame(mockThread2, mockThread0);
      assertNotSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertFalse(mockThread2.isDaemon());
      assertEquals(0, mockThread2.countStackFrames());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      // Undeclared exception!
      try { 
        restAdapter0.create(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only interface endpoint definitions are supported.
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }
}
