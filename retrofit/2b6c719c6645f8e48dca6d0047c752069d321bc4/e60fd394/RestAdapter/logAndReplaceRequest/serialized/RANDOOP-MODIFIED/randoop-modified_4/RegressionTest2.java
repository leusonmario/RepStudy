import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1001");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request12 = serializedObjectSupporter11.deserializeObjectRequest6();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter11;
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter11.deserializeObjectConverter7();
        retrofit.Server server15 = serializedObjectSupporter11.deserializeObjectServer1();
        java.lang.String str16 = serializedObjectSupporter11.deserializeObjectString4();
        retrofit.client.Request request17 = serializedObjectSupporter11.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter18 = serializedObjectSupporter11.deserializeObjectConverter2();
        java.lang.String str19 = serializedObjectSupporter11.deserializeObjectString5();
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(server15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "http://example.com/" + "'", str16, "http://example.com/");
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertNotNull(gsonConverter18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "POST" + "'", str19, "POST");
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1002");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor2 = null;
        builder0.requestInterceptor = requestInterceptor2;
        java.util.concurrent.Executor executor4 = null;
        builder0.setcallbackExecutor(executor4);
        retrofit.ErrorHandler errorHandler6 = builder0.errorHandler;
        retrofit.RequestInterceptor requestInterceptor7 = builder0.requestInterceptor;
        retrofit.converter.Converter converter8 = builder0.converter;
        retrofit.converter.Converter converter9 = builder0.converter;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(requestInterceptor7);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNull(converter9);
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1003");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor2 = null;
        builder0.requestInterceptor = requestInterceptor2;
        java.util.concurrent.Executor executor4 = null;
        builder0.setcallbackExecutor(executor4);
        retrofit.RequestInterceptor requestInterceptor6 = builder0.requestInterceptor;
        java.util.concurrent.Executor executor7 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.Server server9 = builder8.server;
        java.util.concurrent.Executor executor10 = null;
        builder8.httpExecutor = executor10;
        java.util.concurrent.Executor executor12 = builder8.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.FULL;
        builder8.logLevel = logLevel13;
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request16 = serializedObjectSupporter15.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter15.deserializeObjectConverter1();
        retrofit.converter.GsonConverter gsonConverter18 = serializedObjectSupporter15.deserializeObjectConverter4();
        builder8.serializedObjectSupporter = serializedObjectSupporter15;
        retrofit.RestAdapter.Builder builder21 = builder8.setServer("http://example.com/");
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        builder8.log = log22;
        retrofit.RestAdapter.Builder builder24 = builder0.setLog(log22);
        retrofit.client.Client client25 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder26 = builder0.setClient(client25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(server9);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertNotNull(gsonConverter18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1004");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest1();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Retrofit-Idle" + "'", str1, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(request4);
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1005");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.Profiler profiler2 = builder0.profiler;
        retrofit.ErrorHandler errorHandler3 = null;
        builder0.errorHandler = errorHandler3;
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("Retrofit-Idle");
        retrofit.SerializedObjectSupporter serializedObjectSupporter7 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request8 = serializedObjectSupporter7.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter7.deserializeObjectConverter1();
        retrofit.converter.GsonConverter gsonConverter10 = serializedObjectSupporter7.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter11 = serializedObjectSupporter7.deserializeObjectConverter4();
        retrofit.RestAdapter.Builder builder12 = builder0.setConverter((retrofit.converter.Converter) gsonConverter11);
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(request8);
        org.junit.Assert.assertNotNull(gsonConverter9);
        org.junit.Assert.assertNotNull(gsonConverter10);
        org.junit.Assert.assertNotNull(gsonConverter11);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1006");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = null;
        builder0.setclientProvider(provider1);
        retrofit.ErrorHandler errorHandler3 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server5 = builder4.server;
        retrofit.converter.Converter converter6 = null;
        builder4.converter = converter6;
        retrofit.RestAdapter.Log log8 = builder4.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter9 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request10 = serializedObjectSupporter9.deserializeObjectRequest6();
        java.lang.String str11 = serializedObjectSupporter9.deserializeObjectString4();
        java.lang.String str12 = serializedObjectSupporter9.deserializeObjectString4();
        retrofit.ErrorHandler errorHandler13 = serializedObjectSupporter9.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder14 = builder4.setErrorHandler(errorHandler13);
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter15.deserializeObjectConverter5();
        retrofit.Server server17 = serializedObjectSupporter15.deserializeObjectServer1();
        retrofit.ErrorHandler errorHandler18 = serializedObjectSupporter15.deserializeObjectErrorHandler1();
        builder4.errorHandler = errorHandler18;
        builder0.errorHandler = errorHandler18;
        java.util.concurrent.Executor executor21 = builder0.httpExecutor;
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNull(log8);
        org.junit.Assert.assertNotNull(request10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "http://example.com/" + "'", str11, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "http://example.com/" + "'", str12, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(gsonConverter16);
        org.junit.Assert.assertNotNull(server17);
        org.junit.Assert.assertNotNull(errorHandler18);
        org.junit.Assert.assertNull(executor21);
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1007");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor5 = builder4.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor6 = null;
        builder4.requestInterceptor = requestInterceptor6;
        java.util.concurrent.Executor executor8 = null;
        builder4.setcallbackExecutor(executor8);
        retrofit.RequestInterceptor requestInterceptor10 = builder4.requestInterceptor;
        java.util.concurrent.Executor executor11 = builder4.callbackExecutor;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        java.lang.String str14 = serializedObjectSupporter13.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter15 = serializedObjectSupporter13.deserializeObjectConverter3();
        builder12.serializedObjectSupporter = serializedObjectSupporter13;
        retrofit.RestAdapter.Log log17 = builder12.log;
        retrofit.RestAdapter.Builder builder19 = builder12.setServer("http://example.com/");
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor21 = builder20.getcallbackExecutor();
        retrofit.Server server22 = builder20.server;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider24 = null;
        builder23.setclientProvider(provider24);
        retrofit.Server server27 = new retrofit.Server("Retrofit-");
        java.lang.String str28 = server27.name;
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.Server server38 = builder37.server;
        java.util.concurrent.Executor executor39 = null;
        builder37.httpExecutor = executor39;
        java.util.concurrent.Executor executor41 = builder37.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.FULL;
        builder37.logLevel = logLevel42;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter(server27, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log36, logLevel42);
        retrofit.RestAdapter.Builder builder45 = builder23.setLog(log36);
        retrofit.RestAdapter.Builder builder46 = builder20.setLog(log36);
        retrofit.Server server47 = null;
        retrofit.client.Client.Provider provider48 = null;
        java.util.concurrent.Executor executor49 = null;
        java.util.concurrent.Executor executor50 = null;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        retrofit.converter.Converter converter52 = null;
        retrofit.Profiler profiler53 = null;
        retrofit.ErrorHandler errorHandler54 = null;
        retrofit.RestAdapter.Log log55 = null;
        retrofit.RestAdapter.LogLevel logLevel56 = null;
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter(server47, provider48, executor49, executor50, requestInterceptor51, converter52, profiler53, errorHandler54, log55, logLevel56);
        retrofit.SerializedObjectSupporter serializedObjectSupporter58 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request59 = serializedObjectSupporter58.deserializeObjectRequest6();
        restAdapter57.serializedObjectSupporter = serializedObjectSupporter58;
        retrofit.converter.GsonConverter gsonConverter61 = serializedObjectSupporter58.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter62 = serializedObjectSupporter58.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter63 = serializedObjectSupporter58.deserializeObjectConverter1();
        retrofit.client.Request request64 = serializedObjectSupporter58.deserializeObjectRequest5();
        retrofit.RequestInterceptor requestInterceptor65 = serializedObjectSupporter58.deserializeObjectRequestInterceptor1();
        builder46.requestInterceptor = requestInterceptor65;
        retrofit.RestAdapter.Builder builder67 = builder19.setRequestInterceptor(requestInterceptor65);
        retrofit.RestAdapter.LogLevel logLevel68 = builder67.logLevel;
        retrofit.Server server69 = null;
        retrofit.client.Client.Provider provider70 = null;
        java.util.concurrent.Executor executor71 = null;
        java.util.concurrent.Executor executor72 = null;
        retrofit.RequestInterceptor requestInterceptor73 = null;
        retrofit.converter.Converter converter74 = null;
        retrofit.Profiler profiler75 = null;
        retrofit.ErrorHandler errorHandler76 = null;
        retrofit.RestAdapter.Log log77 = null;
        retrofit.RestAdapter.LogLevel logLevel78 = null;
        retrofit.RestAdapter restAdapter79 = new retrofit.RestAdapter(server69, provider70, executor71, executor72, requestInterceptor73, converter74, profiler75, errorHandler76, log77, logLevel78);
        retrofit.SerializedObjectSupporter serializedObjectSupporter80 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request81 = serializedObjectSupporter80.deserializeObjectRequest6();
        restAdapter79.serializedObjectSupporter = serializedObjectSupporter80;
        retrofit.converter.GsonConverter gsonConverter83 = serializedObjectSupporter80.deserializeObjectConverter7();
        retrofit.Server server84 = serializedObjectSupporter80.deserializeObjectServer1();
        retrofit.converter.GsonConverter gsonConverter85 = serializedObjectSupporter80.deserializeObjectConverter5();
        retrofit.Server server86 = serializedObjectSupporter80.deserializeObjectServer1();
        builder67.server = server86;
        retrofit.RestAdapter restAdapter88 = builder67.build();
        java.util.concurrent.Executor executor89 = restAdapter88.httpExecutor;
        builder4.callbackExecutor = executor89;
        java.util.concurrent.Executor executor91 = builder4.callbackExecutor;
        builder0.setcallbackExecutor(executor91);
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Retrofit-Idle" + "'", str14, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter15);
        org.junit.Assert.assertNull(log17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(server22);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "default" + "'", str28, "default");
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertNull(server38);
        org.junit.Assert.assertNull(executor41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(request59);
        org.junit.Assert.assertNotNull(gsonConverter61);
        org.junit.Assert.assertNotNull(gsonConverter62);
        org.junit.Assert.assertNotNull(gsonConverter63);
        org.junit.Assert.assertNotNull(request64);
        org.junit.Assert.assertNotNull(requestInterceptor65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(request81);
        org.junit.Assert.assertNotNull(gsonConverter83);
        org.junit.Assert.assertNotNull(server84);
        org.junit.Assert.assertNotNull(gsonConverter85);
        org.junit.Assert.assertNotNull(server86);
        org.junit.Assert.assertNotNull(restAdapter88);
        org.junit.Assert.assertNotNull(executor89);
        org.junit.Assert.assertNotNull(executor91);
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1008");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        java.lang.String str2 = serializedObjectSupporter1.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter1.deserializeObjectConverter3();
        builder0.serializedObjectSupporter = serializedObjectSupporter1;
        java.util.concurrent.Executor executor5 = null;
        builder0.callbackExecutor = executor5;
        retrofit.SerializedObjectSupporter serializedObjectSupporter7 = builder0.serializedObjectSupporter;
        java.lang.String str8 = serializedObjectSupporter7.deserializeObjectString1();
        retrofit.mime.TypedString typedString9 = serializedObjectSupporter7.deserializeObjectTypedOutput2();
        retrofit.client.Request request10 = serializedObjectSupporter7.deserializeObjectRequest5();
        retrofit.client.Request request11 = serializedObjectSupporter7.deserializeObjectRequest6();
        retrofit.Server server12 = serializedObjectSupporter7.deserializeObjectServer1();
        java.lang.String str13 = server12.getUrl();
        java.lang.String str14 = server12.getUrl();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Retrofit-Idle" + "'", str2, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(serializedObjectSupporter7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Retrofit-" + "'", str8, "Retrofit-");
        org.junit.Assert.assertNotNull(typedString9);
        org.junit.Assert.assertNotNull(request10);
        org.junit.Assert.assertNotNull(request11);
        org.junit.Assert.assertNotNull(server12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "http://example.com" + "'", str13, "http://example.com");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "http://example.com" + "'", str14, "http://example.com");
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1009");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.Server server2 = builder0.server;
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.Server server6 = new retrofit.Server("Retrofit-Idle", "Retrofit-");
        java.lang.String str7 = server6.getapiUrl();
        java.lang.String str8 = server6.getDEFAULT_NAME();
        retrofit.RestAdapter.Builder builder9 = builder0.setServer(server6);
        java.util.concurrent.Executor executor10 = null;
        builder9.httpExecutor = executor10;
        java.util.concurrent.Executor executor12 = null;
        builder9.sethttpExecutor(executor12);
        retrofit.Profiler profiler14 = null;
        builder9.profiler = profiler14;
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request17 = serializedObjectSupporter16.deserializeObjectRequest6();
        java.lang.String str18 = serializedObjectSupporter16.deserializeObjectString4();
        java.lang.String str19 = serializedObjectSupporter16.deserializeObjectString4();
        retrofit.Server server20 = serializedObjectSupporter16.deserializeObjectServer1();
        java.lang.String str21 = serializedObjectSupporter16.deserializeObjectString4();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter16.deserializeObjectConverter5();
        builder9.converter = gsonConverter22;
        retrofit.RestAdapter.Builder builder25 = builder9.setServer("hi!");
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.Server server28 = builder27.server;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider30 = null;
        builder29.setclientProvider(provider30);
        retrofit.Server server33 = new retrofit.Server("Retrofit-");
        java.lang.String str34 = server33.name;
        retrofit.client.Client.Provider provider35 = null;
        java.util.concurrent.Executor executor36 = null;
        java.util.concurrent.Executor executor37 = null;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        retrofit.converter.Converter converter39 = null;
        retrofit.Profiler profiler40 = null;
        retrofit.ErrorHandler errorHandler41 = null;
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.Server server44 = builder43.server;
        java.util.concurrent.Executor executor45 = null;
        builder43.httpExecutor = executor45;
        java.util.concurrent.Executor executor47 = builder43.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.FULL;
        builder43.logLevel = logLevel48;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter(server33, provider35, executor36, executor37, requestInterceptor38, converter39, profiler40, errorHandler41, log42, logLevel48);
        retrofit.RestAdapter.Builder builder51 = builder29.setLog(log42);
        log42.log("default");
        log42.log("GET");
        builder27.log = log42;
        builder26.log = log42;
        retrofit.RestAdapter.Builder builder58 = builder9.setLog(log42);
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Retrofit-Idle" + "'", str7, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "default" + "'", str8, "default");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertNotNull(server20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "http://example.com/" + "'", str21, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(server28);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "default" + "'", str34, "default");
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertNull(server44);
        org.junit.Assert.assertNull(executor47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder58);
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1010");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        java.lang.String str13 = serializedObjectSupporter12.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter12.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter15 = serializedObjectSupporter12.deserializeObjectConverter7();
        retrofit.Server server16 = serializedObjectSupporter12.deserializeObjectServer1();
        retrofit.client.Request request17 = serializedObjectSupporter12.deserializeObjectRequest5();
        java.lang.String str18 = serializedObjectSupporter12.deserializeObjectString2();
        restHandler11.serializedObjectSupporter = serializedObjectSupporter12;
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-Idle" + "'", str13, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(gsonConverter15);
        org.junit.Assert.assertNotNull(server16);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Retrofit-Idle" + "'", str18, "Retrofit-Idle");
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1011");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.Server server2 = builder0.server;
        retrofit.Server server5 = new retrofit.Server("default", "");
        retrofit.RestAdapter.Builder builder6 = builder0.setServer(server5);
        retrofit.Profiler profiler7 = builder0.profiler;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter9 = new retrofit.SerializedObjectSupporter();
        java.lang.String str10 = serializedObjectSupporter9.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter11 = serializedObjectSupporter9.deserializeObjectConverter3();
        builder8.serializedObjectSupporter = serializedObjectSupporter9;
        java.util.concurrent.Executor executor13 = null;
        builder8.callbackExecutor = executor13;
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = builder8.serializedObjectSupporter;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor17 = builder16.getcallbackExecutor();
        retrofit.Server server18 = builder16.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter19 = builder16.serializedObjectSupporter;
        retrofit.converter.Converter converter20 = builder16.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter21 = new retrofit.SerializedObjectSupporter();
        java.lang.String str22 = serializedObjectSupporter21.deserializeObjectString2();
        retrofit.client.Request request23 = serializedObjectSupporter21.deserializeObjectRequest7();
        java.lang.String str24 = serializedObjectSupporter21.deserializeObjectString5();
        retrofit.Server server25 = serializedObjectSupporter21.deserializeObjectServer1();
        builder16.serializedObjectSupporter = serializedObjectSupporter21;
        retrofit.ErrorHandler errorHandler27 = builder16.errorHandler;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor29 = builder28.getcallbackExecutor();
        retrofit.Server server30 = builder28.server;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider32 = null;
        builder31.setclientProvider(provider32);
        retrofit.Server server35 = new retrofit.Server("Retrofit-");
        java.lang.String str36 = server35.name;
        retrofit.client.Client.Provider provider37 = null;
        java.util.concurrent.Executor executor38 = null;
        java.util.concurrent.Executor executor39 = null;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        retrofit.converter.Converter converter41 = null;
        retrofit.Profiler profiler42 = null;
        retrofit.ErrorHandler errorHandler43 = null;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.Server server46 = builder45.server;
        java.util.concurrent.Executor executor47 = null;
        builder45.httpExecutor = executor47;
        java.util.concurrent.Executor executor49 = builder45.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel50 = retrofit.RestAdapter.LogLevel.FULL;
        builder45.logLevel = logLevel50;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter(server35, provider37, executor38, executor39, requestInterceptor40, converter41, profiler42, errorHandler43, log44, logLevel50);
        retrofit.RestAdapter.Builder builder53 = builder31.setLog(log44);
        retrofit.RestAdapter.Builder builder54 = builder28.setLog(log44);
        retrofit.RestAdapter.Log log55 = builder54.log;
        builder16.log = log55;
        builder8.log = log55;
        log55.log("hi!");
        builder0.log = log55;
        java.lang.Class<?> wildcardClass61 = builder0.getClass();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Retrofit-Idle" + "'", str10, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter11);
        org.junit.Assert.assertNotNull(serializedObjectSupporter15);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(server18);
        org.junit.Assert.assertNull(serializedObjectSupporter19);
        org.junit.Assert.assertNull(converter20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Retrofit-Idle" + "'", str22, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "POST" + "'", str24, "POST");
        org.junit.Assert.assertNotNull(server25);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "default" + "'", str36, "default");
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNull(server46);
        org.junit.Assert.assertNull(executor49);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1012");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel14 = null;
        restAdapter10.logLevel = logLevel14;
        retrofit.client.Client.Provider provider16 = restAdapter10.getclientProvider();
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter10.new RestHandler();
        retrofit.converter.Converter converter18 = restAdapter10.getconverter();
        java.util.concurrent.Executor executor19 = restAdapter10.gethttpExecutor();
        retrofit.client.Request request20 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request21 = restAdapter10.logAndReplaceRequest(request20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(provider16);
        org.junit.Assert.assertNull(converter18);
        org.junit.Assert.assertNull(executor19);
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1013");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.Server server4 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest5();
        retrofit.ErrorHandler errorHandler6 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter0.deserializeObjectConverter6();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Retrofit-Idle" + "'", str1, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(server4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(errorHandler6);
        org.junit.Assert.assertNotNull(gsonConverter7);
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1014");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter10.new RestHandler();
        java.lang.String str16 = restAdapter10.getIDLE_THREAD_NAME();
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Retrofit-Idle" + "'", str16, "Retrofit-Idle");
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1015");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter10.new RestHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter10.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter10.getrequestInterceptor();
        java.util.concurrent.Executor executor17 = restAdapter10.getcallbackExecutor();
        retrofit.converter.Converter converter18 = restAdapter10.getconverter();
        retrofit.SerializedObjectSupporter serializedObjectSupporter19 = restAdapter10.serializedObjectSupporter;
        java.lang.String str20 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.Server server21 = null;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = null;
        retrofit.RestAdapter.LogLevel logLevel30 = null;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel30);
        retrofit.RestAdapter.RestHandler restHandler32 = restAdapter31.new RestHandler();
        retrofit.Server server33 = restAdapter31.server;
        retrofit.RestAdapter.LogLevel logLevel34 = restAdapter31.getLogLevel();
        retrofit.client.Client.Provider provider35 = restAdapter31.clientProvider;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter37 = new retrofit.SerializedObjectSupporter();
        java.lang.String str38 = serializedObjectSupporter37.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter39 = serializedObjectSupporter37.deserializeObjectConverter3();
        builder36.serializedObjectSupporter = serializedObjectSupporter37;
        restAdapter31.serializedObjectSupporter = serializedObjectSupporter37;
        java.lang.String str42 = restAdapter31.getTHREAD_PREFIX();
        retrofit.RestAdapter.Log log43 = restAdapter31.log;
        retrofit.RestAdapter.RestHandler restHandler44 = restAdapter31.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter45 = restAdapter31.serializedObjectSupporter;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter45;
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(converter18);
        org.junit.Assert.assertNull(serializedObjectSupporter19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Retrofit-Idle" + "'", str20, "Retrofit-Idle");
        org.junit.Assert.assertNull(server33);
        org.junit.Assert.assertNull(logLevel34);
        org.junit.Assert.assertNull(provider35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Retrofit-Idle" + "'", str38, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter39);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Retrofit-" + "'", str42, "Retrofit-");
        org.junit.Assert.assertNull(log43);
        org.junit.Assert.assertNotNull(serializedObjectSupporter45);
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1016");
        retrofit.Server server1 = new retrofit.Server("Retrofit-");
        java.lang.String str2 = server1.name;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.Server server12 = builder11.server;
        java.util.concurrent.Executor executor13 = null;
        builder11.httpExecutor = executor13;
        java.util.concurrent.Executor executor15 = builder11.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.FULL;
        builder11.logLevel = logLevel16;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter(server1, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log10, logLevel16);
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter18.new RestHandler();
        java.util.concurrent.Executor executor20 = restAdapter18.getcallbackExecutor();
        retrofit.converter.Converter converter21 = restAdapter18.converter;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "default" + "'", str2, "default");
        org.junit.Assert.assertNotNull(log10);
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(converter21);
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1017");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request16 = serializedObjectSupporter15.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter15.deserializeObjectConverter1();
        java.lang.String str18 = serializedObjectSupporter15.deserializeObjectString4();
        java.lang.String str19 = serializedObjectSupporter15.deserializeObjectString4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter15;
        retrofit.ErrorHandler errorHandler21 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor22 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.Server server24 = builder23.server;
        retrofit.converter.Converter converter25 = null;
        builder23.converter = converter25;
        retrofit.RestAdapter.Log log27 = builder23.log;
        retrofit.RestAdapter.LogLevel logLevel28 = builder23.logLevel;
        restAdapter10.logLevel = logLevel28;
        retrofit.RestAdapter.RestHandler restHandler30 = restAdapter10.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor31 = restAdapter10.getrequestInterceptor();
        int int32 = restAdapter10.getLOG_CHUNK_SIZE();
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(server24);
        org.junit.Assert.assertNull(log27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 4000 + "'", int32 == 4000);
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1018");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request12 = serializedObjectSupporter11.deserializeObjectRequest6();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter11;
        java.lang.String str14 = serializedObjectSupporter11.deserializeObjectString4();
        retrofit.Server server15 = serializedObjectSupporter11.deserializeObjectServer1();
        retrofit.RequestInterceptor requestInterceptor16 = serializedObjectSupporter11.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter11.deserializeObjectConverter3();
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "http://example.com/" + "'", str14, "http://example.com/");
        org.junit.Assert.assertNotNull(server15);
        org.junit.Assert.assertNotNull(requestInterceptor16);
        org.junit.Assert.assertNotNull(gsonConverter17);
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1019");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        java.lang.String str2 = serializedObjectSupporter1.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter1.deserializeObjectConverter3();
        builder0.serializedObjectSupporter = serializedObjectSupporter1;
        java.util.concurrent.Executor executor5 = null;
        builder0.httpExecutor = executor5;
        retrofit.SerializedObjectSupporter serializedObjectSupporter7 = builder0.serializedObjectSupporter;
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter7.deserializeObjectConverter3();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Retrofit-Idle" + "'", str2, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(serializedObjectSupporter7);
        org.junit.Assert.assertNotNull(gsonConverter8);
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1020");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.Profiler profiler2 = builder0.profiler;
        retrofit.client.Client.Provider provider3 = null;
        builder0.setclientProvider(provider3);
        java.util.concurrent.Executor executor5 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider6 = null;
        builder0.clientProvider = provider6;
        retrofit.RestAdapter.Log log8 = builder0.log;
        retrofit.client.Client client9 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder10 = builder0.setClient(client9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(log8);
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1021");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.getconverter();
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = restAdapter10.serializedObjectSupporter;
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter10.new RestHandler();
        java.util.concurrent.Executor executor14 = restAdapter10.getcallbackExecutor();
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(serializedObjectSupporter12);
        org.junit.Assert.assertNull(executor14);
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1022");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter10.new RestHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter10.logLevel = logLevel15;
        java.lang.String str17 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.RequestInterceptor requestInterceptor18 = restAdapter10.getrequestInterceptor();
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter10.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request21 = serializedObjectSupporter20.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter1();
        java.lang.String str23 = serializedObjectSupporter20.deserializeObjectString4();
        java.lang.String str24 = serializedObjectSupporter20.deserializeObjectString4();
        retrofit.client.Request request25 = serializedObjectSupporter20.deserializeObjectRequest3();
        retrofit.client.Request request26 = serializedObjectSupporter20.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter27 = serializedObjectSupporter20.deserializeObjectConverter1();
        restHandler19.serializedObjectSupporter = serializedObjectSupporter20;
        retrofit.client.Request request29 = serializedObjectSupporter20.deserializeObjectRequest7();
        retrofit.client.Request request30 = serializedObjectSupporter20.deserializeObjectRequest2();
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-Idle" + "'", str17, "Retrofit-Idle");
        org.junit.Assert.assertNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(request21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "http://example.com/" + "'", str23, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "http://example.com/" + "'", str24, "http://example.com/");
        org.junit.Assert.assertNotNull(request25);
        org.junit.Assert.assertNotNull(request26);
        org.junit.Assert.assertNotNull(gsonConverter27);
        org.junit.Assert.assertNotNull(request29);
        org.junit.Assert.assertNotNull(request30);
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1023");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString2();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString5();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.client.Request request6 = serializedObjectSupporter0.deserializeObjectRequest8();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "http://example.com/" + "'", str2, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Retrofit-Idle" + "'", str3, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "POST" + "'", str4, "POST");
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(request6);
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1024");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter1();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString4();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest4();
        retrofit.client.Request request6 = serializedObjectSupporter0.deserializeObjectRequest3();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString4();
        retrofit.Server server8 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.RequestInterceptor requestInterceptor9 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "http://example.com/" + "'", str4, "http://example.com/");
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(request6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "http://example.com/" + "'", str7, "http://example.com/");
        org.junit.Assert.assertNotNull(server8);
        org.junit.Assert.assertNotNull(requestInterceptor9);
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1025");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter10.new RestHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter10.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter10.getrequestInterceptor();
        java.util.concurrent.Executor executor17 = restAdapter10.getcallbackExecutor();
        retrofit.converter.Converter converter18 = restAdapter10.getconverter();
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.Server server20 = builder19.server;
        retrofit.converter.Converter converter21 = null;
        builder19.converter = converter21;
        retrofit.ErrorHandler errorHandler23 = builder19.errorHandler;
        retrofit.Server server25 = new retrofit.Server("Retrofit-");
        java.lang.String str26 = server25.name;
        retrofit.client.Client.Provider provider27 = null;
        java.util.concurrent.Executor executor28 = null;
        java.util.concurrent.Executor executor29 = null;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        retrofit.converter.Converter converter31 = null;
        retrofit.Profiler profiler32 = null;
        retrofit.ErrorHandler errorHandler33 = null;
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.Server server36 = builder35.server;
        java.util.concurrent.Executor executor37 = null;
        builder35.httpExecutor = executor37;
        java.util.concurrent.Executor executor39 = builder35.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.FULL;
        builder35.logLevel = logLevel40;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter(server25, provider27, executor28, executor29, requestInterceptor30, converter31, profiler32, errorHandler33, log34, logLevel40);
        retrofit.RestAdapter.LogLevel logLevel43 = restAdapter42.getLogLevel();
        retrofit.RestAdapter.Builder builder44 = builder19.setLogLevel(logLevel43);
        retrofit.Server server46 = new retrofit.Server("Retrofit-");
        java.lang.String str47 = server46.name;
        retrofit.client.Client.Provider provider48 = null;
        java.util.concurrent.Executor executor49 = null;
        java.util.concurrent.Executor executor50 = null;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        retrofit.converter.Converter converter52 = null;
        retrofit.Profiler profiler53 = null;
        retrofit.ErrorHandler errorHandler54 = null;
        retrofit.RestAdapter.Log log55 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.Server server57 = builder56.server;
        java.util.concurrent.Executor executor58 = null;
        builder56.httpExecutor = executor58;
        java.util.concurrent.Executor executor60 = builder56.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel61 = retrofit.RestAdapter.LogLevel.FULL;
        builder56.logLevel = logLevel61;
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter(server46, provider48, executor49, executor50, requestInterceptor51, converter52, profiler53, errorHandler54, log55, logLevel61);
        retrofit.RestAdapter.LogLevel logLevel64 = restAdapter63.getLogLevel();
        builder19.logLevel = logLevel64;
        restAdapter10.logLevel = logLevel64;
        java.util.concurrent.Executor executor67 = restAdapter10.getcallbackExecutor();
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(converter18);
        org.junit.Assert.assertNull(server20);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "default" + "'", str26, "default");
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertNull(server36);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "default" + "'", str47, "default");
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertNull(server57);
        org.junit.Assert.assertNull(executor60);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor67);
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1026");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter10.new RestHandler();
        retrofit.converter.Converter converter13 = restAdapter10.converter;
        retrofit.RestAdapter.Log log14 = restAdapter10.log;
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter10.getrequestInterceptor();
        java.lang.String str16 = restAdapter10.getTHREAD_PREFIX();
        retrofit.Server server18 = new retrofit.Server("Retrofit-");
        java.lang.String str19 = server18.name;
        retrofit.client.Client.Provider provider20 = null;
        java.util.concurrent.Executor executor21 = null;
        java.util.concurrent.Executor executor22 = null;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        retrofit.converter.Converter converter24 = null;
        retrofit.Profiler profiler25 = null;
        retrofit.ErrorHandler errorHandler26 = null;
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.Server server29 = builder28.server;
        java.util.concurrent.Executor executor30 = null;
        builder28.httpExecutor = executor30;
        java.util.concurrent.Executor executor32 = builder28.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.FULL;
        builder28.logLevel = logLevel33;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server18, provider20, executor21, executor22, requestInterceptor23, converter24, profiler25, errorHandler26, log27, logLevel33);
        java.util.concurrent.Executor executor36 = restAdapter35.getcallbackExecutor();
        int int37 = restAdapter35.getLOG_CHUNK_SIZE();
        java.util.List<retrofit.client.Header> headerList40 = null;
        retrofit.mime.TypedOutput typedOutput41 = null;
        retrofit.client.Request request42 = new retrofit.client.Request("", "", headerList40, typedOutput41);
        retrofit.mime.TypedOutput typedOutput43 = request42.getBody();
        java.lang.String str44 = request42.url;
        retrofit.mime.TypedOutput typedOutput45 = request42.getBody();
        java.lang.String str46 = request42.getUrl();
        retrofit.client.Request request47 = restAdapter35.logAndReplaceRequest(request42);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request48 = restAdapter10.logAndReplaceRequest(request47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertNull(log14);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Retrofit-" + "'", str16, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "default" + "'", str19, "default");
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNull(server29);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4000 + "'", int37 == 4000);
        org.junit.Assert.assertNull(typedOutput43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNull(typedOutput45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(request47);
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1027");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString2();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest7();
        retrofit.ErrorHandler errorHandler3 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest1();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Retrofit-Idle" + "'", str1, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertNotNull(errorHandler3);
        org.junit.Assert.assertNotNull(request4);
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1028");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request16 = serializedObjectSupporter15.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter15.deserializeObjectConverter1();
        java.lang.String str18 = serializedObjectSupporter15.deserializeObjectString4();
        java.lang.String str19 = serializedObjectSupporter15.deserializeObjectString4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter15;
        java.util.concurrent.Executor executor21 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler22 = restAdapter10.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter23 = restHandler22.serializedObjectSupporter;
        retrofit.Server server24 = null;
        retrofit.client.Client.Provider provider25 = null;
        java.util.concurrent.Executor executor26 = null;
        java.util.concurrent.Executor executor27 = null;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        retrofit.converter.Converter converter29 = null;
        retrofit.Profiler profiler30 = null;
        retrofit.ErrorHandler errorHandler31 = null;
        retrofit.RestAdapter.Log log32 = null;
        retrofit.RestAdapter.LogLevel logLevel33 = null;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server24, provider25, executor26, executor27, requestInterceptor28, converter29, profiler30, errorHandler31, log32, logLevel33);
        retrofit.SerializedObjectSupporter serializedObjectSupporter35 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request36 = serializedObjectSupporter35.deserializeObjectRequest6();
        restAdapter34.serializedObjectSupporter = serializedObjectSupporter35;
        retrofit.converter.GsonConverter gsonConverter38 = serializedObjectSupporter35.deserializeObjectConverter7();
        java.lang.String str39 = serializedObjectSupporter35.deserializeObjectString1();
        retrofit.client.Request request40 = serializedObjectSupporter35.deserializeObjectRequest6();
        retrofit.Server server41 = serializedObjectSupporter35.deserializeObjectServer1();
        retrofit.client.Request request42 = serializedObjectSupporter35.deserializeObjectRequest5();
        retrofit.Server server43 = serializedObjectSupporter35.deserializeObjectServer1();
        restHandler22.serializedObjectSupporter = serializedObjectSupporter35;
        retrofit.client.Request request45 = serializedObjectSupporter35.deserializeObjectRequest1();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter46 = serializedObjectSupporter35.deserializeObjectLogLevel3();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(serializedObjectSupporter23);
        org.junit.Assert.assertNotNull(request36);
        org.junit.Assert.assertNotNull(gsonConverter38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Retrofit-" + "'", str39, "Retrofit-");
        org.junit.Assert.assertNotNull(request40);
        org.junit.Assert.assertNotNull(server41);
        org.junit.Assert.assertNotNull(request42);
        org.junit.Assert.assertNotNull(server43);
        org.junit.Assert.assertNotNull(request45);
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1029");
        retrofit.Server server2 = new retrofit.Server("default", "default");
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1030");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel14 = null;
        restAdapter10.logLevel = logLevel14;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter10.logLevel = logLevel16;
        retrofit.Profiler profiler18 = restAdapter10.profiler;
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter10.new RestHandler();
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler18);
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1031");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request12 = serializedObjectSupporter11.deserializeObjectRequest6();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter11;
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter11.deserializeObjectConverter7();
        java.lang.String str15 = serializedObjectSupporter11.deserializeObjectString1();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter11.deserializeObjectConverter3();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter17 = serializedObjectSupporter11.deserializeObjectLogLevel2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Retrofit-" + "'", str15, "Retrofit-");
        org.junit.Assert.assertNotNull(gsonConverter16);
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1032");
        retrofit.Server server1 = new retrofit.Server("Retrofit-");
        java.lang.String str2 = server1.name;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.Server server12 = builder11.server;
        java.util.concurrent.Executor executor13 = null;
        builder11.httpExecutor = executor13;
        java.util.concurrent.Executor executor15 = builder11.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.FULL;
        builder11.logLevel = logLevel16;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter(server1, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log10, logLevel16);
        java.util.concurrent.Executor executor19 = restAdapter18.getcallbackExecutor();
        int int20 = restAdapter18.getLOG_CHUNK_SIZE();
        retrofit.ErrorHandler errorHandler21 = restAdapter18.errorHandler;
        retrofit.ErrorHandler errorHandler22 = restAdapter18.geterrorHandler();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "default" + "'", str2, "default");
        org.junit.Assert.assertNotNull(log10);
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4000 + "'", int20 == 4000);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(errorHandler22);
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1033");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.converter.Converter converter2 = null;
        builder0.converter = converter2;
        retrofit.RestAdapter.Log log4 = builder0.log;
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        retrofit.RestAdapter.Log log6 = builder0.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter7 = builder0.serializedObjectSupporter;
        retrofit.RestAdapter.LogLevel logLevel8 = builder0.logLevel;
        builder0.ensureSaneDefaults();
        retrofit.client.Client.Provider provider10 = builder0.getclientProvider();
        retrofit.Server server12 = new retrofit.Server("POST");
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.Server server17 = null;
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Log log25 = null;
        retrofit.RestAdapter.LogLevel logLevel26 = null;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server17, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log25, logLevel26);
        retrofit.SerializedObjectSupporter serializedObjectSupporter28 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request29 = serializedObjectSupporter28.deserializeObjectRequest6();
        restAdapter27.serializedObjectSupporter = serializedObjectSupporter28;
        retrofit.converter.GsonConverter gsonConverter31 = serializedObjectSupporter28.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter32 = serializedObjectSupporter28.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter28.deserializeObjectConverter1();
        retrofit.Profiler profiler34 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter35 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request36 = serializedObjectSupporter35.deserializeObjectRequest6();
        java.lang.String str37 = serializedObjectSupporter35.deserializeObjectString4();
        java.lang.String str38 = serializedObjectSupporter35.deserializeObjectString5();
        retrofit.ErrorHandler errorHandler39 = serializedObjectSupporter35.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor41 = builder40.getcallbackExecutor();
        retrofit.Server server42 = builder40.server;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider44 = null;
        builder43.setclientProvider(provider44);
        retrofit.Server server47 = new retrofit.Server("Retrofit-");
        java.lang.String str48 = server47.name;
        retrofit.client.Client.Provider provider49 = null;
        java.util.concurrent.Executor executor50 = null;
        java.util.concurrent.Executor executor51 = null;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        retrofit.converter.Converter converter53 = null;
        retrofit.Profiler profiler54 = null;
        retrofit.ErrorHandler errorHandler55 = null;
        retrofit.RestAdapter.Log log56 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.Server server58 = builder57.server;
        java.util.concurrent.Executor executor59 = null;
        builder57.httpExecutor = executor59;
        java.util.concurrent.Executor executor61 = builder57.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.FULL;
        builder57.logLevel = logLevel62;
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter(server47, provider49, executor50, executor51, requestInterceptor52, converter53, profiler54, errorHandler55, log56, logLevel62);
        retrofit.RestAdapter.Builder builder65 = builder43.setLog(log56);
        retrofit.RestAdapter.Builder builder66 = builder40.setLog(log56);
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        retrofit.Server server68 = builder67.server;
        retrofit.converter.Converter converter69 = null;
        builder67.converter = converter69;
        retrofit.RestAdapter.Log log71 = builder67.log;
        retrofit.RestAdapter.LogLevel logLevel72 = builder67.logLevel;
        retrofit.RestAdapter restAdapter73 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, (retrofit.converter.Converter) gsonConverter33, profiler34, errorHandler39, log56, logLevel72);
        log56.log("http://example.com");
        log56.log("http://example.com/");
        retrofit.RestAdapter.Builder builder78 = builder0.setLog(log56);
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(log6);
        org.junit.Assert.assertNull(serializedObjectSupporter7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(provider10);
        org.junit.Assert.assertNotNull(request29);
        org.junit.Assert.assertNotNull(gsonConverter31);
        org.junit.Assert.assertNotNull(gsonConverter32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(request36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "http://example.com/" + "'", str37, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "POST" + "'", str38, "POST");
        org.junit.Assert.assertNotNull(errorHandler39);
        org.junit.Assert.assertNull(executor41);
        org.junit.Assert.assertNull(server42);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "default" + "'", str48, "default");
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertNull(server58);
        org.junit.Assert.assertNull(executor61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(server68);
        org.junit.Assert.assertNull(log71);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder78);
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1034");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        retrofit.mime.TypedOutput typedOutput7 = request6.body;
        java.util.List<retrofit.client.Header> headerList8 = request6.headers;
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(typedOutput7);
        org.junit.Assert.assertNotNull(headerList8);
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1035");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor2 = null;
        builder0.requestInterceptor = requestInterceptor2;
        java.util.concurrent.Executor executor4 = null;
        builder0.setcallbackExecutor(executor4);
        retrofit.Server server7 = new retrofit.Server("POST");
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = null;
        retrofit.RestAdapter.LogLevel logLevel21 = null;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel21);
        retrofit.SerializedObjectSupporter serializedObjectSupporter23 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request24 = serializedObjectSupporter23.deserializeObjectRequest6();
        restAdapter22.serializedObjectSupporter = serializedObjectSupporter23;
        retrofit.converter.GsonConverter gsonConverter26 = serializedObjectSupporter23.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter27 = serializedObjectSupporter23.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter23.deserializeObjectConverter1();
        retrofit.Profiler profiler29 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request31 = serializedObjectSupporter30.deserializeObjectRequest6();
        java.lang.String str32 = serializedObjectSupporter30.deserializeObjectString4();
        java.lang.String str33 = serializedObjectSupporter30.deserializeObjectString5();
        retrofit.ErrorHandler errorHandler34 = serializedObjectSupporter30.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor36 = builder35.getcallbackExecutor();
        retrofit.Server server37 = builder35.server;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider39 = null;
        builder38.setclientProvider(provider39);
        retrofit.Server server42 = new retrofit.Server("Retrofit-");
        java.lang.String str43 = server42.name;
        retrofit.client.Client.Provider provider44 = null;
        java.util.concurrent.Executor executor45 = null;
        java.util.concurrent.Executor executor46 = null;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        retrofit.converter.Converter converter48 = null;
        retrofit.Profiler profiler49 = null;
        retrofit.ErrorHandler errorHandler50 = null;
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.Server server53 = builder52.server;
        java.util.concurrent.Executor executor54 = null;
        builder52.httpExecutor = executor54;
        java.util.concurrent.Executor executor56 = builder52.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.FULL;
        builder52.logLevel = logLevel57;
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter(server42, provider44, executor45, executor46, requestInterceptor47, converter48, profiler49, errorHandler50, log51, logLevel57);
        retrofit.RestAdapter.Builder builder60 = builder38.setLog(log51);
        retrofit.RestAdapter.Builder builder61 = builder35.setLog(log51);
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.Server server63 = builder62.server;
        retrofit.converter.Converter converter64 = null;
        builder62.converter = converter64;
        retrofit.RestAdapter.Log log66 = builder62.log;
        retrofit.RestAdapter.LogLevel logLevel67 = builder62.logLevel;
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, (retrofit.converter.Converter) gsonConverter28, profiler29, errorHandler34, log51, logLevel67);
        builder0.errorHandler = errorHandler34;
        java.util.concurrent.Executor executor70 = null;
        builder0.callbackExecutor = executor70;
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor73 = builder72.getcallbackExecutor();
        retrofit.Server server74 = builder72.server;
        retrofit.RestAdapter.Log log75 = builder72.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter76 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request77 = serializedObjectSupporter76.deserializeObjectRequest6();
        java.lang.String str78 = serializedObjectSupporter76.deserializeObjectString4();
        java.lang.String str79 = serializedObjectSupporter76.deserializeObjectString5();
        retrofit.ErrorHandler errorHandler80 = serializedObjectSupporter76.deserializeObjectErrorHandler1();
        builder72.errorHandler = errorHandler80;
        retrofit.RestAdapter.Builder builder82 = builder0.setErrorHandler(errorHandler80);
        retrofit.RequestInterceptor requestInterceptor83 = builder82.requestInterceptor;
        retrofit.Server server84 = builder82.server;
        builder82.ensureSaneDefaults();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNotNull(request24);
        org.junit.Assert.assertNotNull(gsonConverter26);
        org.junit.Assert.assertNotNull(gsonConverter27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(request31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "http://example.com/" + "'", str32, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "POST" + "'", str33, "POST");
        org.junit.Assert.assertNotNull(errorHandler34);
        org.junit.Assert.assertNull(executor36);
        org.junit.Assert.assertNull(server37);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "default" + "'", str43, "default");
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNull(server53);
        org.junit.Assert.assertNull(executor56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(server63);
        org.junit.Assert.assertNull(log66);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor73);
        org.junit.Assert.assertNull(server74);
        org.junit.Assert.assertNull(log75);
        org.junit.Assert.assertNotNull(request77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "http://example.com/" + "'", str78, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "POST" + "'", str79, "POST");
        org.junit.Assert.assertNotNull(errorHandler80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNull(requestInterceptor83);
        org.junit.Assert.assertNull(server84);
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1036");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        java.lang.String str2 = serializedObjectSupporter1.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter1.deserializeObjectConverter3();
        builder0.serializedObjectSupporter = serializedObjectSupporter1;
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.RestAdapter.Builder builder7 = builder0.setServer("http://example.com/");
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = builder8.getcallbackExecutor();
        retrofit.Server server10 = builder8.server;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider12 = null;
        builder11.setclientProvider(provider12);
        retrofit.Server server15 = new retrofit.Server("Retrofit-");
        java.lang.String str16 = server15.name;
        retrofit.client.Client.Provider provider17 = null;
        java.util.concurrent.Executor executor18 = null;
        java.util.concurrent.Executor executor19 = null;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        retrofit.converter.Converter converter21 = null;
        retrofit.Profiler profiler22 = null;
        retrofit.ErrorHandler errorHandler23 = null;
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.Server server26 = builder25.server;
        java.util.concurrent.Executor executor27 = null;
        builder25.httpExecutor = executor27;
        java.util.concurrent.Executor executor29 = builder25.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.FULL;
        builder25.logLevel = logLevel30;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server15, provider17, executor18, executor19, requestInterceptor20, converter21, profiler22, errorHandler23, log24, logLevel30);
        retrofit.RestAdapter.Builder builder33 = builder11.setLog(log24);
        retrofit.RestAdapter.Builder builder34 = builder8.setLog(log24);
        retrofit.Server server35 = null;
        retrofit.client.Client.Provider provider36 = null;
        java.util.concurrent.Executor executor37 = null;
        java.util.concurrent.Executor executor38 = null;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        retrofit.converter.Converter converter40 = null;
        retrofit.Profiler profiler41 = null;
        retrofit.ErrorHandler errorHandler42 = null;
        retrofit.RestAdapter.Log log43 = null;
        retrofit.RestAdapter.LogLevel logLevel44 = null;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter(server35, provider36, executor37, executor38, requestInterceptor39, converter40, profiler41, errorHandler42, log43, logLevel44);
        retrofit.SerializedObjectSupporter serializedObjectSupporter46 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request47 = serializedObjectSupporter46.deserializeObjectRequest6();
        restAdapter45.serializedObjectSupporter = serializedObjectSupporter46;
        retrofit.converter.GsonConverter gsonConverter49 = serializedObjectSupporter46.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter50 = serializedObjectSupporter46.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter51 = serializedObjectSupporter46.deserializeObjectConverter1();
        retrofit.client.Request request52 = serializedObjectSupporter46.deserializeObjectRequest5();
        retrofit.RequestInterceptor requestInterceptor53 = serializedObjectSupporter46.deserializeObjectRequestInterceptor1();
        builder34.requestInterceptor = requestInterceptor53;
        retrofit.RestAdapter.Builder builder55 = builder7.setRequestInterceptor(requestInterceptor53);
        java.util.concurrent.Executor executor56 = builder7.httpExecutor;
        retrofit.client.Client.Provider provider57 = null;
        builder7.setclientProvider(provider57);
        retrofit.Profiler profiler59 = builder7.profiler;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter61 = new retrofit.SerializedObjectSupporter();
        java.lang.String str62 = serializedObjectSupporter61.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter63 = serializedObjectSupporter61.deserializeObjectConverter3();
        builder60.serializedObjectSupporter = serializedObjectSupporter61;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider66 = null;
        builder65.setclientProvider(provider66);
        retrofit.Server server69 = new retrofit.Server("Retrofit-");
        java.lang.String str70 = server69.name;
        retrofit.client.Client.Provider provider71 = null;
        java.util.concurrent.Executor executor72 = null;
        java.util.concurrent.Executor executor73 = null;
        retrofit.RequestInterceptor requestInterceptor74 = null;
        retrofit.converter.Converter converter75 = null;
        retrofit.Profiler profiler76 = null;
        retrofit.ErrorHandler errorHandler77 = null;
        retrofit.RestAdapter.Log log78 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        retrofit.Server server80 = builder79.server;
        java.util.concurrent.Executor executor81 = null;
        builder79.httpExecutor = executor81;
        java.util.concurrent.Executor executor83 = builder79.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel84 = retrofit.RestAdapter.LogLevel.FULL;
        builder79.logLevel = logLevel84;
        retrofit.RestAdapter restAdapter86 = new retrofit.RestAdapter(server69, provider71, executor72, executor73, requestInterceptor74, converter75, profiler76, errorHandler77, log78, logLevel84);
        retrofit.RestAdapter.Builder builder87 = builder65.setLog(log78);
        builder60.log = log78;
        builder7.log = log78;
        java.util.concurrent.Executor executor90 = builder7.callbackExecutor;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Retrofit-Idle" + "'", str2, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "default" + "'", str16, "default");
        org.junit.Assert.assertNotNull(log24);
        org.junit.Assert.assertNull(server26);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(request47);
        org.junit.Assert.assertNotNull(gsonConverter49);
        org.junit.Assert.assertNotNull(gsonConverter50);
        org.junit.Assert.assertNotNull(gsonConverter51);
        org.junit.Assert.assertNotNull(request52);
        org.junit.Assert.assertNotNull(requestInterceptor53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(executor56);
        org.junit.Assert.assertNull(profiler59);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Retrofit-Idle" + "'", str62, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter63);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "default" + "'", str70, "default");
        org.junit.Assert.assertNotNull(log78);
        org.junit.Assert.assertNull(server80);
        org.junit.Assert.assertNull(executor83);
        org.junit.Assert.assertTrue("'" + logLevel84 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel84.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNull(executor90);
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1037");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        java.lang.String str17 = serializedObjectSupporter16.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter18 = serializedObjectSupporter16.deserializeObjectConverter3();
        builder15.serializedObjectSupporter = serializedObjectSupporter16;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter16;
        java.lang.String str21 = restAdapter10.getTHREAD_PREFIX();
        retrofit.Profiler profiler22 = restAdapter10.profiler;
        java.util.concurrent.Executor executor23 = restAdapter10.gethttpExecutor();
        retrofit.converter.Converter converter24 = restAdapter10.converter;
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-Idle" + "'", str17, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Retrofit-" + "'", str21, "Retrofit-");
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNull(converter24);
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1038");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor2 = null;
        builder0.requestInterceptor = requestInterceptor2;
        java.util.concurrent.Executor executor4 = null;
        builder0.setcallbackExecutor(executor4);
        retrofit.ErrorHandler errorHandler6 = builder0.errorHandler;
        java.util.concurrent.Executor executor7 = null;
        builder0.callbackExecutor = executor7;
        retrofit.Profiler profiler9 = null;
        builder0.profiler = profiler9;
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Log log19 = null;
        retrofit.RestAdapter.LogLevel logLevel20 = null;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log19, logLevel20);
        retrofit.SerializedObjectSupporter serializedObjectSupporter22 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request23 = serializedObjectSupporter22.deserializeObjectRequest6();
        restAdapter21.serializedObjectSupporter = serializedObjectSupporter22;
        retrofit.converter.GsonConverter gsonConverter25 = serializedObjectSupporter22.deserializeObjectConverter7();
        java.lang.String str26 = serializedObjectSupporter22.deserializeObjectString1();
        retrofit.client.Request request27 = serializedObjectSupporter22.deserializeObjectRequest6();
        retrofit.Server server28 = serializedObjectSupporter22.deserializeObjectServer1();
        java.lang.String str29 = server28.getUrl();
        retrofit.RestAdapter.Builder builder30 = builder0.setServer(server28);
        retrofit.Server server31 = builder30.server;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertNotNull(gsonConverter25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Retrofit-" + "'", str26, "Retrofit-");
        org.junit.Assert.assertNotNull(request27);
        org.junit.Assert.assertNotNull(server28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "http://example.com" + "'", str29, "http://example.com");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(server31);
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1039");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.Profiler profiler2 = builder0.profiler;
        retrofit.client.Client.Provider provider3 = null;
        builder0.setclientProvider(provider3);
        java.util.concurrent.Executor executor5 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider6 = null;
        builder0.clientProvider = provider6;
        java.util.concurrent.Executor executor8 = null;
        builder0.callbackExecutor = executor8;
        retrofit.RestAdapter.LogLevel logLevel10 = builder0.logLevel;
        retrofit.RequestInterceptor requestInterceptor11 = builder0.requestInterceptor;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor11);
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1040");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.Profiler profiler2 = builder0.profiler;
        retrofit.client.Client.Provider provider3 = null;
        builder0.setclientProvider(provider3);
        java.util.concurrent.Executor executor5 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider6 = null;
        builder0.clientProvider = provider6;
        retrofit.SerializedObjectSupporter serializedObjectSupporter8 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request9 = serializedObjectSupporter8.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter10 = serializedObjectSupporter8.deserializeObjectConverter1();
        retrofit.converter.GsonConverter gsonConverter11 = serializedObjectSupporter8.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter12 = serializedObjectSupporter8.deserializeObjectConverter4();
        retrofit.RestAdapter.Builder builder13 = builder0.setConverter((retrofit.converter.Converter) gsonConverter12);
        java.util.concurrent.Executor executor14 = builder0.httpExecutor;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNotNull(gsonConverter10);
        org.junit.Assert.assertNotNull(gsonConverter11);
        org.junit.Assert.assertNotNull(gsonConverter12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(executor14);
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1041");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter1();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString4();
        retrofit.Server server5 = serializedObjectSupporter0.deserializeObjectServer1();
        java.lang.String str6 = server5.getName();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "http://example.com/" + "'", str4, "http://example.com/");
        org.junit.Assert.assertNotNull(server5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "default" + "'", str6, "default");
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1042");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.converter.Converter converter2 = null;
        builder0.converter = converter2;
        retrofit.RestAdapter.Log log4 = builder0.log;
        retrofit.client.Client.Provider provider5 = null;
        builder0.clientProvider = provider5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.Server server8 = builder7.server;
        java.util.concurrent.Executor executor9 = null;
        builder7.httpExecutor = executor9;
        java.util.concurrent.Executor executor11 = null;
        builder7.callbackExecutor = executor11;
        java.util.concurrent.Executor executor13 = null;
        builder7.callbackExecutor = executor13;
        builder7.ensureSaneDefaults();
        retrofit.client.Client.Provider provider16 = builder7.clientProvider;
        builder0.setclientProvider(provider16);
        retrofit.Server server18 = null;
        retrofit.client.Client.Provider provider19 = null;
        java.util.concurrent.Executor executor20 = null;
        java.util.concurrent.Executor executor21 = null;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        retrofit.converter.Converter converter23 = null;
        retrofit.Profiler profiler24 = null;
        retrofit.ErrorHandler errorHandler25 = null;
        retrofit.RestAdapter.Log log26 = null;
        retrofit.RestAdapter.LogLevel logLevel27 = null;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server18, provider19, executor20, executor21, requestInterceptor22, converter23, profiler24, errorHandler25, log26, logLevel27);
        retrofit.RestAdapter.RestHandler restHandler29 = restAdapter28.new RestHandler();
        retrofit.Server server30 = null;
        retrofit.client.Client.Provider provider31 = null;
        java.util.concurrent.Executor executor32 = null;
        java.util.concurrent.Executor executor33 = null;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        retrofit.converter.Converter converter35 = null;
        retrofit.Profiler profiler36 = null;
        retrofit.ErrorHandler errorHandler37 = null;
        retrofit.RestAdapter.Log log38 = null;
        retrofit.RestAdapter.LogLevel logLevel39 = null;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server30, provider31, executor32, executor33, requestInterceptor34, converter35, profiler36, errorHandler37, log38, logLevel39);
        retrofit.RestAdapter.RestHandler restHandler41 = restAdapter40.new RestHandler();
        retrofit.Server server42 = restAdapter40.server;
        retrofit.RestAdapter.LogLevel logLevel43 = restAdapter40.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor44 = restAdapter40.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter45 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request46 = serializedObjectSupporter45.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter47 = serializedObjectSupporter45.deserializeObjectConverter1();
        java.lang.String str48 = serializedObjectSupporter45.deserializeObjectString4();
        java.lang.String str49 = serializedObjectSupporter45.deserializeObjectString4();
        restAdapter40.serializedObjectSupporter = serializedObjectSupporter45;
        retrofit.client.Request request51 = serializedObjectSupporter45.deserializeObjectRequest1();
        retrofit.converter.GsonConverter gsonConverter52 = serializedObjectSupporter45.deserializeObjectConverter1();
        retrofit.converter.GsonConverter gsonConverter53 = serializedObjectSupporter45.deserializeObjectConverter4();
        retrofit.client.Request request54 = serializedObjectSupporter45.deserializeObjectRequest1();
        retrofit.converter.GsonConverter gsonConverter55 = serializedObjectSupporter45.deserializeObjectConverter6();
        restHandler29.serializedObjectSupporter = serializedObjectSupporter45;
        builder0.serializedObjectSupporter = serializedObjectSupporter45;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertNull(server8);
        org.junit.Assert.assertNotNull(provider16);
        org.junit.Assert.assertNull(server42);
        org.junit.Assert.assertNull(logLevel43);
        org.junit.Assert.assertNull(requestInterceptor44);
        org.junit.Assert.assertNotNull(request46);
        org.junit.Assert.assertNotNull(gsonConverter47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "http://example.com/" + "'", str48, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "http://example.com/" + "'", str49, "http://example.com/");
        org.junit.Assert.assertNotNull(request51);
        org.junit.Assert.assertNotNull(gsonConverter52);
        org.junit.Assert.assertNotNull(gsonConverter53);
        org.junit.Assert.assertNotNull(request54);
        org.junit.Assert.assertNotNull(gsonConverter55);
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1043");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.Server server2 = builder0.server;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider4 = null;
        builder3.setclientProvider(provider4);
        retrofit.Server server7 = new retrofit.Server("Retrofit-");
        java.lang.String str8 = server7.name;
        retrofit.client.Client.Provider provider9 = null;
        java.util.concurrent.Executor executor10 = null;
        java.util.concurrent.Executor executor11 = null;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        retrofit.converter.Converter converter13 = null;
        retrofit.Profiler profiler14 = null;
        retrofit.ErrorHandler errorHandler15 = null;
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.Server server18 = builder17.server;
        java.util.concurrent.Executor executor19 = null;
        builder17.httpExecutor = executor19;
        java.util.concurrent.Executor executor21 = builder17.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.FULL;
        builder17.logLevel = logLevel22;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server7, provider9, executor10, executor11, requestInterceptor12, converter13, profiler14, errorHandler15, log16, logLevel22);
        retrofit.RestAdapter.Builder builder25 = builder3.setLog(log16);
        retrofit.RestAdapter.Builder builder26 = builder0.setLog(log16);
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor28 = builder27.getcallbackExecutor();
        retrofit.Server server29 = builder27.server;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider31 = null;
        builder30.setclientProvider(provider31);
        retrofit.Server server34 = new retrofit.Server("Retrofit-");
        java.lang.String str35 = server34.name;
        retrofit.client.Client.Provider provider36 = null;
        java.util.concurrent.Executor executor37 = null;
        java.util.concurrent.Executor executor38 = null;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        retrofit.converter.Converter converter40 = null;
        retrofit.Profiler profiler41 = null;
        retrofit.ErrorHandler errorHandler42 = null;
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.Server server45 = builder44.server;
        java.util.concurrent.Executor executor46 = null;
        builder44.httpExecutor = executor46;
        java.util.concurrent.Executor executor48 = builder44.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.FULL;
        builder44.logLevel = logLevel49;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter(server34, provider36, executor37, executor38, requestInterceptor39, converter40, profiler41, errorHandler42, log43, logLevel49);
        retrofit.RestAdapter.Builder builder52 = builder30.setLog(log43);
        retrofit.RestAdapter.Builder builder53 = builder27.setLog(log43);
        retrofit.RestAdapter.Builder builder54 = builder0.setLog(log43);
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "default" + "'", str8, "default");
        org.junit.Assert.assertNotNull(log16);
        org.junit.Assert.assertNull(server18);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNull(server29);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "default" + "'", str35, "default");
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertNull(server45);
        org.junit.Assert.assertNull(executor48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1044");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.client.Client.Provider provider3 = null;
        builder0.setclientProvider(provider3);
        retrofit.SerializedObjectSupporter serializedObjectSupporter5 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request6 = serializedObjectSupporter5.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter5.deserializeObjectConverter1();
        java.lang.String str8 = serializedObjectSupporter5.deserializeObjectString4();
        java.lang.String str9 = serializedObjectSupporter5.deserializeObjectString4();
        retrofit.client.Request request10 = serializedObjectSupporter5.deserializeObjectRequest4();
        retrofit.client.Request request11 = serializedObjectSupporter5.deserializeObjectRequest3();
        java.lang.String str12 = serializedObjectSupporter5.deserializeObjectString4();
        retrofit.converter.GsonConverter gsonConverter13 = serializedObjectSupporter5.deserializeObjectConverter2();
        builder0.converter = gsonConverter13;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.Server server16 = builder15.server;
        retrofit.converter.Converter converter17 = null;
        builder15.converter = converter17;
        retrofit.ErrorHandler errorHandler19 = builder15.errorHandler;
        retrofit.Server server21 = new retrofit.Server("Retrofit-");
        java.lang.String str22 = server21.name;
        retrofit.client.Client.Provider provider23 = null;
        java.util.concurrent.Executor executor24 = null;
        java.util.concurrent.Executor executor25 = null;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        retrofit.converter.Converter converter27 = null;
        retrofit.Profiler profiler28 = null;
        retrofit.ErrorHandler errorHandler29 = null;
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.Server server32 = builder31.server;
        java.util.concurrent.Executor executor33 = null;
        builder31.httpExecutor = executor33;
        java.util.concurrent.Executor executor35 = builder31.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.FULL;
        builder31.logLevel = logLevel36;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter(server21, provider23, executor24, executor25, requestInterceptor26, converter27, profiler28, errorHandler29, log30, logLevel36);
        retrofit.RestAdapter.LogLevel logLevel39 = restAdapter38.getLogLevel();
        retrofit.RestAdapter.Builder builder40 = builder15.setLogLevel(logLevel39);
        retrofit.client.Client.Provider provider41 = builder15.clientProvider;
        retrofit.SerializedObjectSupporter serializedObjectSupporter42 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request43 = serializedObjectSupporter42.deserializeObjectRequest6();
        java.lang.String str44 = serializedObjectSupporter42.deserializeObjectString4();
        java.lang.String str45 = serializedObjectSupporter42.deserializeObjectString4();
        retrofit.ErrorHandler errorHandler46 = serializedObjectSupporter42.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder47 = builder15.setErrorHandler(errorHandler46);
        retrofit.RestAdapter.Builder builder48 = builder0.setErrorHandler(errorHandler46);
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNotNull(request6);
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://example.com/" + "'", str8, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "http://example.com/" + "'", str9, "http://example.com/");
        org.junit.Assert.assertNotNull(request10);
        org.junit.Assert.assertNotNull(request11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "http://example.com/" + "'", str12, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter13);
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "default" + "'", str22, "default");
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertNull(server32);
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(provider41);
        org.junit.Assert.assertNotNull(request43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "http://example.com/" + "'", str44, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "http://example.com/" + "'", str45, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1045");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor2 = null;
        builder0.requestInterceptor = requestInterceptor2;
        java.util.concurrent.Executor executor4 = null;
        builder0.setcallbackExecutor(executor4);
        retrofit.Server server7 = new retrofit.Server("POST");
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = null;
        retrofit.RestAdapter.LogLevel logLevel21 = null;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel21);
        retrofit.SerializedObjectSupporter serializedObjectSupporter23 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request24 = serializedObjectSupporter23.deserializeObjectRequest6();
        restAdapter22.serializedObjectSupporter = serializedObjectSupporter23;
        retrofit.converter.GsonConverter gsonConverter26 = serializedObjectSupporter23.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter27 = serializedObjectSupporter23.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter23.deserializeObjectConverter1();
        retrofit.Profiler profiler29 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request31 = serializedObjectSupporter30.deserializeObjectRequest6();
        java.lang.String str32 = serializedObjectSupporter30.deserializeObjectString4();
        java.lang.String str33 = serializedObjectSupporter30.deserializeObjectString5();
        retrofit.ErrorHandler errorHandler34 = serializedObjectSupporter30.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor36 = builder35.getcallbackExecutor();
        retrofit.Server server37 = builder35.server;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider39 = null;
        builder38.setclientProvider(provider39);
        retrofit.Server server42 = new retrofit.Server("Retrofit-");
        java.lang.String str43 = server42.name;
        retrofit.client.Client.Provider provider44 = null;
        java.util.concurrent.Executor executor45 = null;
        java.util.concurrent.Executor executor46 = null;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        retrofit.converter.Converter converter48 = null;
        retrofit.Profiler profiler49 = null;
        retrofit.ErrorHandler errorHandler50 = null;
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.Server server53 = builder52.server;
        java.util.concurrent.Executor executor54 = null;
        builder52.httpExecutor = executor54;
        java.util.concurrent.Executor executor56 = builder52.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.FULL;
        builder52.logLevel = logLevel57;
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter(server42, provider44, executor45, executor46, requestInterceptor47, converter48, profiler49, errorHandler50, log51, logLevel57);
        retrofit.RestAdapter.Builder builder60 = builder38.setLog(log51);
        retrofit.RestAdapter.Builder builder61 = builder35.setLog(log51);
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.Server server63 = builder62.server;
        retrofit.converter.Converter converter64 = null;
        builder62.converter = converter64;
        retrofit.RestAdapter.Log log66 = builder62.log;
        retrofit.RestAdapter.LogLevel logLevel67 = builder62.logLevel;
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, (retrofit.converter.Converter) gsonConverter28, profiler29, errorHandler34, log51, logLevel67);
        builder0.errorHandler = errorHandler34;
        java.util.concurrent.Executor executor70 = null;
        builder0.callbackExecutor = executor70;
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor73 = builder72.getcallbackExecutor();
        retrofit.Server server74 = builder72.server;
        retrofit.RestAdapter.Log log75 = builder72.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter76 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request77 = serializedObjectSupporter76.deserializeObjectRequest6();
        java.lang.String str78 = serializedObjectSupporter76.deserializeObjectString4();
        java.lang.String str79 = serializedObjectSupporter76.deserializeObjectString5();
        retrofit.ErrorHandler errorHandler80 = serializedObjectSupporter76.deserializeObjectErrorHandler1();
        builder72.errorHandler = errorHandler80;
        retrofit.RestAdapter.Builder builder82 = builder0.setErrorHandler(errorHandler80);
        retrofit.RequestInterceptor requestInterceptor83 = builder82.requestInterceptor;
        retrofit.Server server84 = builder82.server;
        java.util.concurrent.Executor executor85 = builder82.callbackExecutor;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNotNull(request24);
        org.junit.Assert.assertNotNull(gsonConverter26);
        org.junit.Assert.assertNotNull(gsonConverter27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(request31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "http://example.com/" + "'", str32, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "POST" + "'", str33, "POST");
        org.junit.Assert.assertNotNull(errorHandler34);
        org.junit.Assert.assertNull(executor36);
        org.junit.Assert.assertNull(server37);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "default" + "'", str43, "default");
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNull(server53);
        org.junit.Assert.assertNull(executor56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(server63);
        org.junit.Assert.assertNull(log66);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor73);
        org.junit.Assert.assertNull(server74);
        org.junit.Assert.assertNull(log75);
        org.junit.Assert.assertNotNull(request77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "http://example.com/" + "'", str78, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "POST" + "'", str79, "POST");
        org.junit.Assert.assertNotNull(errorHandler80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNull(requestInterceptor83);
        org.junit.Assert.assertNull(server84);
        org.junit.Assert.assertNull(executor85);
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1046");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        java.lang.String str2 = serializedObjectSupporter1.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter1.deserializeObjectConverter3();
        builder0.serializedObjectSupporter = serializedObjectSupporter1;
        java.util.concurrent.Executor executor5 = null;
        builder0.httpExecutor = executor5;
        java.util.concurrent.Executor executor7 = null;
        builder0.httpExecutor = executor7;
        retrofit.SerializedObjectSupporter serializedObjectSupporter9 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request10 = serializedObjectSupporter9.deserializeObjectRequest3();
        retrofit.converter.GsonConverter gsonConverter11 = serializedObjectSupporter9.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter12 = serializedObjectSupporter9.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter13 = serializedObjectSupporter9.deserializeObjectConverter5();
        retrofit.RequestInterceptor requestInterceptor14 = serializedObjectSupporter9.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder15 = builder0.setRequestInterceptor(requestInterceptor14);
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        java.lang.String str18 = serializedObjectSupporter17.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter17.deserializeObjectConverter3();
        builder16.serializedObjectSupporter = serializedObjectSupporter17;
        retrofit.RestAdapter.Log log21 = builder16.log;
        retrofit.RestAdapter.Builder builder23 = builder16.setServer("http://example.com/");
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = builder24.getcallbackExecutor();
        retrofit.Server server26 = builder24.server;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider28 = null;
        builder27.setclientProvider(provider28);
        retrofit.Server server31 = new retrofit.Server("Retrofit-");
        java.lang.String str32 = server31.name;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.Server server42 = builder41.server;
        java.util.concurrent.Executor executor43 = null;
        builder41.httpExecutor = executor43;
        java.util.concurrent.Executor executor45 = builder41.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.FULL;
        builder41.logLevel = logLevel46;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter(server31, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log40, logLevel46);
        retrofit.RestAdapter.Builder builder49 = builder27.setLog(log40);
        retrofit.RestAdapter.Builder builder50 = builder24.setLog(log40);
        retrofit.Server server51 = null;
        retrofit.client.Client.Provider provider52 = null;
        java.util.concurrent.Executor executor53 = null;
        java.util.concurrent.Executor executor54 = null;
        retrofit.RequestInterceptor requestInterceptor55 = null;
        retrofit.converter.Converter converter56 = null;
        retrofit.Profiler profiler57 = null;
        retrofit.ErrorHandler errorHandler58 = null;
        retrofit.RestAdapter.Log log59 = null;
        retrofit.RestAdapter.LogLevel logLevel60 = null;
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter(server51, provider52, executor53, executor54, requestInterceptor55, converter56, profiler57, errorHandler58, log59, logLevel60);
        retrofit.SerializedObjectSupporter serializedObjectSupporter62 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request63 = serializedObjectSupporter62.deserializeObjectRequest6();
        restAdapter61.serializedObjectSupporter = serializedObjectSupporter62;
        retrofit.converter.GsonConverter gsonConverter65 = serializedObjectSupporter62.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter66 = serializedObjectSupporter62.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter67 = serializedObjectSupporter62.deserializeObjectConverter1();
        retrofit.client.Request request68 = serializedObjectSupporter62.deserializeObjectRequest5();
        retrofit.RequestInterceptor requestInterceptor69 = serializedObjectSupporter62.deserializeObjectRequestInterceptor1();
        builder50.requestInterceptor = requestInterceptor69;
        retrofit.RestAdapter.Builder builder71 = builder23.setRequestInterceptor(requestInterceptor69);
        retrofit.RestAdapter.LogLevel logLevel72 = builder71.logLevel;
        retrofit.Server server73 = null;
        retrofit.client.Client.Provider provider74 = null;
        java.util.concurrent.Executor executor75 = null;
        java.util.concurrent.Executor executor76 = null;
        retrofit.RequestInterceptor requestInterceptor77 = null;
        retrofit.converter.Converter converter78 = null;
        retrofit.Profiler profiler79 = null;
        retrofit.ErrorHandler errorHandler80 = null;
        retrofit.RestAdapter.Log log81 = null;
        retrofit.RestAdapter.LogLevel logLevel82 = null;
        retrofit.RestAdapter restAdapter83 = new retrofit.RestAdapter(server73, provider74, executor75, executor76, requestInterceptor77, converter78, profiler79, errorHandler80, log81, logLevel82);
        retrofit.SerializedObjectSupporter serializedObjectSupporter84 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request85 = serializedObjectSupporter84.deserializeObjectRequest6();
        restAdapter83.serializedObjectSupporter = serializedObjectSupporter84;
        retrofit.converter.GsonConverter gsonConverter87 = serializedObjectSupporter84.deserializeObjectConverter7();
        retrofit.Server server88 = serializedObjectSupporter84.deserializeObjectServer1();
        retrofit.converter.GsonConverter gsonConverter89 = serializedObjectSupporter84.deserializeObjectConverter5();
        retrofit.Server server90 = serializedObjectSupporter84.deserializeObjectServer1();
        builder71.server = server90;
        retrofit.RestAdapter restAdapter92 = builder71.build();
        retrofit.client.Client.Provider provider93 = restAdapter92.clientProvider;
        builder0.clientProvider = provider93;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Retrofit-Idle" + "'", str2, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(request10);
        org.junit.Assert.assertNotNull(gsonConverter11);
        org.junit.Assert.assertNotNull(gsonConverter12);
        org.junit.Assert.assertNotNull(gsonConverter13);
        org.junit.Assert.assertNotNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Retrofit-Idle" + "'", str18, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNull(log21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(server26);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "default" + "'", str32, "default");
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertNull(server42);
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(request63);
        org.junit.Assert.assertNotNull(gsonConverter65);
        org.junit.Assert.assertNotNull(gsonConverter66);
        org.junit.Assert.assertNotNull(gsonConverter67);
        org.junit.Assert.assertNotNull(request68);
        org.junit.Assert.assertNotNull(requestInterceptor69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(request85);
        org.junit.Assert.assertNotNull(gsonConverter87);
        org.junit.Assert.assertNotNull(server88);
        org.junit.Assert.assertNotNull(gsonConverter89);
        org.junit.Assert.assertNotNull(server90);
        org.junit.Assert.assertNotNull(restAdapter92);
        org.junit.Assert.assertNotNull(provider93);
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1047");
        retrofit.Server server1 = new retrofit.Server("Retrofit-");
        java.lang.String str2 = server1.name;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.Server server12 = builder11.server;
        java.util.concurrent.Executor executor13 = null;
        builder11.httpExecutor = executor13;
        java.util.concurrent.Executor executor15 = builder11.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.FULL;
        builder11.logLevel = logLevel16;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter(server1, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log10, logLevel16);
        java.util.concurrent.Executor executor19 = restAdapter18.getcallbackExecutor();
        int int20 = restAdapter18.getLOG_CHUNK_SIZE();
        java.util.List<retrofit.client.Header> headerList23 = null;
        retrofit.mime.TypedOutput typedOutput24 = null;
        retrofit.client.Request request25 = new retrofit.client.Request("", "", headerList23, typedOutput24);
        retrofit.mime.TypedOutput typedOutput26 = request25.getBody();
        java.lang.String str27 = request25.url;
        retrofit.mime.TypedOutput typedOutput28 = request25.getBody();
        java.lang.String str29 = request25.getUrl();
        retrofit.client.Request request30 = restAdapter18.logAndReplaceRequest(request25);
        java.lang.String str31 = restAdapter18.getIDLE_THREAD_NAME();
        retrofit.SerializedObjectSupporter serializedObjectSupporter32 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request33 = serializedObjectSupporter32.deserializeObjectRequest3();
        retrofit.converter.GsonConverter gsonConverter34 = serializedObjectSupporter32.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter35 = serializedObjectSupporter32.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter36 = serializedObjectSupporter32.deserializeObjectConverter5();
        restAdapter18.serializedObjectSupporter = serializedObjectSupporter32;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "default" + "'", str2, "default");
        org.junit.Assert.assertNotNull(log10);
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4000 + "'", int20 == 4000);
        org.junit.Assert.assertNull(typedOutput26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNull(typedOutput28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(request30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Retrofit-Idle" + "'", str31, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(request33);
        org.junit.Assert.assertNotNull(gsonConverter34);
        org.junit.Assert.assertNotNull(gsonConverter35);
        org.junit.Assert.assertNotNull(gsonConverter36);
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1048");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.Server server2 = builder0.server;
        retrofit.Server server5 = new retrofit.Server("default", "");
        retrofit.RestAdapter.Builder builder6 = builder0.setServer(server5);
        retrofit.Profiler profiler7 = builder0.profiler;
        retrofit.Server server8 = null;
        retrofit.client.Client.Provider provider9 = null;
        java.util.concurrent.Executor executor10 = null;
        java.util.concurrent.Executor executor11 = null;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        retrofit.converter.Converter converter13 = null;
        retrofit.Profiler profiler14 = null;
        retrofit.ErrorHandler errorHandler15 = null;
        retrofit.RestAdapter.Log log16 = null;
        retrofit.RestAdapter.LogLevel logLevel17 = null;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter(server8, provider9, executor10, executor11, requestInterceptor12, converter13, profiler14, errorHandler15, log16, logLevel17);
        retrofit.SerializedObjectSupporter serializedObjectSupporter19 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request20 = serializedObjectSupporter19.deserializeObjectRequest6();
        restAdapter18.serializedObjectSupporter = serializedObjectSupporter19;
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter19.deserializeObjectConverter7();
        retrofit.Server server23 = serializedObjectSupporter19.deserializeObjectServer1();
        java.lang.String str24 = server23.getUrl();
        java.lang.String str25 = server23.getDEFAULT_NAME();
        builder0.server = server23;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(server23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "http://example.com" + "'", str24, "http://example.com");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "default" + "'", str25, "default");
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1049");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter1();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString1();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.RequestInterceptor requestInterceptor6 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.mime.TypedString typedString7 = serializedObjectSupporter0.deserializeObjectTypedOutput2();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter0.deserializeObjectConverter2();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Retrofit-" + "'", str4, "Retrofit-");
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(typedString7);
        org.junit.Assert.assertNotNull(gsonConverter8);
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1050");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter10.new RestHandler();
        retrofit.converter.Converter converter13 = restAdapter10.converter;
        retrofit.RestAdapter.Log log14 = restAdapter10.log;
        retrofit.ErrorHandler errorHandler15 = restAdapter10.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter10.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor17 = restAdapter10.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request19 = serializedObjectSupporter18.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter18.deserializeObjectConverter1();
        retrofit.Server server21 = serializedObjectSupporter18.deserializeObjectServer1();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter18;
        retrofit.converter.GsonConverter gsonConverter23 = serializedObjectSupporter18.deserializeObjectConverter8();
        java.lang.String str24 = serializedObjectSupporter18.deserializeObjectString3();
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertNull(log14);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNull(requestInterceptor17);
        org.junit.Assert.assertNotNull(request19);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNotNull(server21);
        org.junit.Assert.assertNotNull(gsonConverter23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "GET" + "'", str24, "GET");
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1051");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.Server server2 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter3 = builder0.serializedObjectSupporter;
        retrofit.converter.Converter converter4 = builder0.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter5 = new retrofit.SerializedObjectSupporter();
        java.lang.String str6 = serializedObjectSupporter5.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter5.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter5.deserializeObjectConverter3();
        retrofit.RestAdapter.Builder builder9 = builder0.setConverter((retrofit.converter.Converter) gsonConverter8);
        retrofit.RestAdapter.LogLevel logLevel10 = builder0.logLevel;
        boolean boolean11 = logLevel10.log();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertNull(serializedObjectSupporter3);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Retrofit-Idle" + "'", str6, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1052");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter2 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request3 = serializedObjectSupporter2.deserializeObjectRequest2();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter2.deserializeObjectConverter2();
        retrofit.RestAdapter.Builder builder5 = builder0.setConverter((retrofit.converter.Converter) gsonConverter4);
        retrofit.Server server6 = builder0.server;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(server6);
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1053");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString2();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString5();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter0.deserializeObjectConverter3();
        retrofit.client.Request request7 = serializedObjectSupporter0.deserializeObjectRequest5();
        retrofit.client.Request request8 = serializedObjectSupporter0.deserializeObjectRequest7();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter0.deserializeObjectConverter5();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Retrofit-Idle" + "'", str1, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "POST" + "'", str3, "POST");
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(gsonConverter6);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(request8);
        org.junit.Assert.assertNotNull(gsonConverter9);
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1054");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.Server server2 = builder0.server;
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter5 = new retrofit.SerializedObjectSupporter();
        java.lang.String str6 = serializedObjectSupporter5.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter5.deserializeObjectConverter3();
        builder4.serializedObjectSupporter = serializedObjectSupporter5;
        java.util.concurrent.Executor executor9 = null;
        builder4.callbackExecutor = executor9;
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = builder4.serializedObjectSupporter;
        retrofit.mime.TypedString typedString12 = serializedObjectSupporter11.deserializeObjectTypedOutput2();
        retrofit.Server server13 = serializedObjectSupporter11.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder14 = builder0.setServer(server13);
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Retrofit-Idle" + "'", str6, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertNotNull(serializedObjectSupporter11);
        org.junit.Assert.assertNotNull(typedString12);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1055");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request16 = serializedObjectSupporter15.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter15.deserializeObjectConverter1();
        java.lang.String str18 = serializedObjectSupporter15.deserializeObjectString4();
        java.lang.String str19 = serializedObjectSupporter15.deserializeObjectString4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter15;
        java.util.concurrent.Executor executor21 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler22 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler23 = restAdapter10.new RestHandler();
        retrofit.converter.Converter converter24 = restAdapter10.converter;
        java.util.concurrent.Executor executor25 = restAdapter10.gethttpExecutor();
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(converter24);
        org.junit.Assert.assertNull(executor25);
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1056");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request16 = serializedObjectSupporter15.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter15.deserializeObjectConverter1();
        java.lang.String str18 = serializedObjectSupporter15.deserializeObjectString4();
        java.lang.String str19 = serializedObjectSupporter15.deserializeObjectString4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter15;
        retrofit.ErrorHandler errorHandler21 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor22 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.Server server24 = builder23.server;
        retrofit.converter.Converter converter25 = null;
        builder23.converter = converter25;
        retrofit.RestAdapter.Log log27 = builder23.log;
        retrofit.RestAdapter.LogLevel logLevel28 = builder23.logLevel;
        restAdapter10.logLevel = logLevel28;
        retrofit.RestAdapter.RestHandler restHandler30 = restAdapter10.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = restAdapter10.serializedObjectSupporter;
        retrofit.converter.GsonConverter gsonConverter32 = serializedObjectSupporter31.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter31.deserializeObjectConverter2();
        retrofit.converter.GsonConverter gsonConverter34 = serializedObjectSupporter31.deserializeObjectConverter8();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter35 = serializedObjectSupporter31.deserializeObjectLogLevel1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(server24);
        org.junit.Assert.assertNull(log27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(serializedObjectSupporter31);
        org.junit.Assert.assertNotNull(gsonConverter32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(gsonConverter34);
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1057");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.Server server2 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter3 = builder0.serializedObjectSupporter;
        retrofit.converter.Converter converter4 = builder0.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter5 = new retrofit.SerializedObjectSupporter();
        java.lang.String str6 = serializedObjectSupporter5.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter5.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter5.deserializeObjectConverter3();
        retrofit.RestAdapter.Builder builder9 = builder0.setConverter((retrofit.converter.Converter) gsonConverter8);
        retrofit.RestAdapter.LogLevel logLevel10 = builder0.logLevel;
        retrofit.RequestInterceptor requestInterceptor11 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.Server server13 = builder12.server;
        retrofit.converter.Converter converter14 = null;
        builder12.converter = converter14;
        retrofit.RestAdapter.Log log16 = builder12.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request18 = serializedObjectSupporter17.deserializeObjectRequest6();
        java.lang.String str19 = serializedObjectSupporter17.deserializeObjectString4();
        java.lang.String str20 = serializedObjectSupporter17.deserializeObjectString4();
        retrofit.ErrorHandler errorHandler21 = serializedObjectSupporter17.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder22 = builder12.setErrorHandler(errorHandler21);
        java.util.concurrent.Executor executor23 = builder12.gethttpExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request25 = serializedObjectSupporter24.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter26 = serializedObjectSupporter24.deserializeObjectConverter1();
        java.lang.String str27 = serializedObjectSupporter24.deserializeObjectString4();
        java.lang.String str28 = serializedObjectSupporter24.deserializeObjectString4();
        retrofit.client.Request request29 = serializedObjectSupporter24.deserializeObjectRequest3();
        retrofit.client.Request request30 = serializedObjectSupporter24.deserializeObjectRequest4();
        retrofit.ErrorHandler errorHandler31 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder32 = builder12.setErrorHandler(errorHandler31);
        retrofit.RestAdapter.Builder builder33 = builder0.setErrorHandler(errorHandler31);
        java.util.concurrent.Executor executor34 = builder0.getcallbackExecutor();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertNull(serializedObjectSupporter3);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Retrofit-Idle" + "'", str6, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(log16);
        org.junit.Assert.assertNotNull(request18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "http://example.com/" + "'", str20, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNotNull(request25);
        org.junit.Assert.assertNotNull(gsonConverter26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "http://example.com/" + "'", str27, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "http://example.com/" + "'", str28, "http://example.com/");
        org.junit.Assert.assertNotNull(request29);
        org.junit.Assert.assertNotNull(request30);
        org.junit.Assert.assertNotNull(errorHandler31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(executor34);
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1058");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        java.util.concurrent.Executor executor2 = null;
        builder0.httpExecutor = executor2;
        java.util.concurrent.Executor executor4 = builder0.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.FULL;
        builder0.logLevel = logLevel5;
        retrofit.Server server7 = builder0.server;
        retrofit.Profiler profiler8 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder9 = builder0.setProfiler(profiler8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(server7);
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1059");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter10.new RestHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter10.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter10.getrequestInterceptor();
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter10.new RestHandler();
        java.util.concurrent.Executor executor18 = restAdapter10.getcallbackExecutor();
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter10.new RestHandler();
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNull(executor18);
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1060");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request16 = serializedObjectSupporter15.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter15.deserializeObjectConverter1();
        java.lang.String str18 = serializedObjectSupporter15.deserializeObjectString4();
        java.lang.String str19 = serializedObjectSupporter15.deserializeObjectString4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter15;
        retrofit.client.Request request21 = serializedObjectSupporter15.deserializeObjectRequest1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter15.deserializeObjectConverter1();
        retrofit.client.Request request23 = serializedObjectSupporter15.deserializeObjectRequest2();
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertNotNull(request21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(request23);
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1061");
        retrofit.Server server1 = new retrofit.Server("Retrofit-");
        java.lang.String str2 = server1.name;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.Server server12 = builder11.server;
        java.util.concurrent.Executor executor13 = null;
        builder11.httpExecutor = executor13;
        java.util.concurrent.Executor executor15 = builder11.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.FULL;
        builder11.logLevel = logLevel16;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter(server1, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log10, logLevel16);
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter18.getLogLevel();
        retrofit.Profiler profiler20 = restAdapter18.profiler;
        java.util.concurrent.Executor executor21 = restAdapter18.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler22 = restAdapter18.new RestHandler();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "default" + "'", str2, "default");
        org.junit.Assert.assertNotNull(log10);
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler20);
        org.junit.Assert.assertNull(executor21);
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1062");
        retrofit.Server server2 = new retrofit.Server("http://example.com/", "http://example.com/");
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1063");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request12 = serializedObjectSupporter11.deserializeObjectRequest6();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter11;
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter11.deserializeObjectConverter7();
        java.lang.String str15 = serializedObjectSupporter11.deserializeObjectString1();
        retrofit.Server server16 = serializedObjectSupporter11.deserializeObjectServer1();
        retrofit.client.Request request17 = serializedObjectSupporter11.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter18 = serializedObjectSupporter11.deserializeObjectConverter1();
        java.lang.String str19 = serializedObjectSupporter11.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter11.deserializeObjectConverter1();
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Retrofit-" + "'", str15, "Retrofit-");
        org.junit.Assert.assertNotNull(server16);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertNotNull(gsonConverter18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Retrofit-Idle" + "'", str19, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter20);
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1064");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter10.new RestHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter10.getLogLevel();
        java.util.concurrent.Executor executor17 = restAdapter10.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request19 = serializedObjectSupporter18.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter18.deserializeObjectConverter1();
        java.lang.String str21 = serializedObjectSupporter18.deserializeObjectString4();
        java.lang.String str22 = serializedObjectSupporter18.deserializeObjectString4();
        retrofit.client.Request request23 = serializedObjectSupporter18.deserializeObjectRequest4();
        retrofit.client.Request request24 = serializedObjectSupporter18.deserializeObjectRequest3();
        java.lang.String str25 = serializedObjectSupporter18.deserializeObjectString4();
        retrofit.converter.GsonConverter gsonConverter26 = serializedObjectSupporter18.deserializeObjectConverter2();
        retrofit.client.Request request27 = serializedObjectSupporter18.deserializeObjectRequest8();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request28 = restAdapter10.logAndReplaceRequest(request27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(logLevel16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNotNull(request19);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "http://example.com/" + "'", str21, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "http://example.com/" + "'", str22, "http://example.com/");
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertNotNull(request24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "http://example.com/" + "'", str25, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter26);
        org.junit.Assert.assertNotNull(request27);
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1065");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request12 = serializedObjectSupporter11.deserializeObjectRequest6();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter11;
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter11.deserializeObjectConverter7();
        java.lang.String str15 = serializedObjectSupporter11.deserializeObjectString1();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter11.deserializeObjectConverter3();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter17 = serializedObjectSupporter11.deserializeObjectLogLevel1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Retrofit-" + "'", str15, "Retrofit-");
        org.junit.Assert.assertNotNull(gsonConverter16);
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1066");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.Server server2 = builder0.server;
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.Server server6 = new retrofit.Server("Retrofit-Idle", "Retrofit-");
        java.lang.String str7 = server6.getapiUrl();
        java.lang.String str8 = server6.getDEFAULT_NAME();
        retrofit.RestAdapter.Builder builder9 = builder0.setServer(server6);
        java.util.concurrent.Executor executor10 = null;
        builder9.httpExecutor = executor10;
        retrofit.RestAdapter.Builder builder13 = builder9.setServer("POST");
        retrofit.converter.Converter converter14 = builder9.converter;
        retrofit.RequestInterceptor requestInterceptor15 = builder9.requestInterceptor;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Retrofit-Idle" + "'", str7, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "default" + "'", str8, "default");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(requestInterceptor15);
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1067");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = null;
        builder0.setclientProvider(provider1);
        retrofit.ErrorHandler errorHandler3 = builder0.errorHandler;
        retrofit.Server server6 = new retrofit.Server("POST", "");
        java.lang.String str7 = server6.getName();
        retrofit.RestAdapter.Builder builder8 = builder0.setServer(server6);
        retrofit.Server server10 = new retrofit.Server("Retrofit-");
        java.lang.String str11 = server10.name;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.Server server21 = builder20.server;
        java.util.concurrent.Executor executor22 = null;
        builder20.httpExecutor = executor22;
        java.util.concurrent.Executor executor24 = builder20.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.FULL;
        builder20.logLevel = logLevel25;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server10, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log19, logLevel25);
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter27.getLogLevel();
        retrofit.Profiler profiler29 = restAdapter27.profiler;
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter27.logLevel;
        builder0.logLevel = logLevel30;
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "default" + "'", str11, "default");
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertNull(server21);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.FULL));
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1068");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel14 = null;
        restAdapter10.logLevel = logLevel14;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter10.logLevel = logLevel16;
        retrofit.Profiler profiler18 = restAdapter10.profiler;
        java.util.concurrent.Executor executor19 = restAdapter10.httpExecutor;
        retrofit.ErrorHandler errorHandler20 = restAdapter10.errorHandler;
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler18);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(errorHandler20);
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1069");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        java.lang.String str2 = serializedObjectSupporter1.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter1.deserializeObjectConverter3();
        builder0.serializedObjectSupporter = serializedObjectSupporter1;
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.RestAdapter.Builder builder7 = builder0.setServer("http://example.com/");
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = builder8.getcallbackExecutor();
        retrofit.Server server10 = builder8.server;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider12 = null;
        builder11.setclientProvider(provider12);
        retrofit.Server server15 = new retrofit.Server("Retrofit-");
        java.lang.String str16 = server15.name;
        retrofit.client.Client.Provider provider17 = null;
        java.util.concurrent.Executor executor18 = null;
        java.util.concurrent.Executor executor19 = null;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        retrofit.converter.Converter converter21 = null;
        retrofit.Profiler profiler22 = null;
        retrofit.ErrorHandler errorHandler23 = null;
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.Server server26 = builder25.server;
        java.util.concurrent.Executor executor27 = null;
        builder25.httpExecutor = executor27;
        java.util.concurrent.Executor executor29 = builder25.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.FULL;
        builder25.logLevel = logLevel30;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server15, provider17, executor18, executor19, requestInterceptor20, converter21, profiler22, errorHandler23, log24, logLevel30);
        retrofit.RestAdapter.Builder builder33 = builder11.setLog(log24);
        retrofit.RestAdapter.Builder builder34 = builder8.setLog(log24);
        retrofit.Server server35 = null;
        retrofit.client.Client.Provider provider36 = null;
        java.util.concurrent.Executor executor37 = null;
        java.util.concurrent.Executor executor38 = null;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        retrofit.converter.Converter converter40 = null;
        retrofit.Profiler profiler41 = null;
        retrofit.ErrorHandler errorHandler42 = null;
        retrofit.RestAdapter.Log log43 = null;
        retrofit.RestAdapter.LogLevel logLevel44 = null;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter(server35, provider36, executor37, executor38, requestInterceptor39, converter40, profiler41, errorHandler42, log43, logLevel44);
        retrofit.SerializedObjectSupporter serializedObjectSupporter46 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request47 = serializedObjectSupporter46.deserializeObjectRequest6();
        restAdapter45.serializedObjectSupporter = serializedObjectSupporter46;
        retrofit.converter.GsonConverter gsonConverter49 = serializedObjectSupporter46.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter50 = serializedObjectSupporter46.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter51 = serializedObjectSupporter46.deserializeObjectConverter1();
        retrofit.client.Request request52 = serializedObjectSupporter46.deserializeObjectRequest5();
        retrofit.RequestInterceptor requestInterceptor53 = serializedObjectSupporter46.deserializeObjectRequestInterceptor1();
        builder34.requestInterceptor = requestInterceptor53;
        retrofit.RestAdapter.Builder builder55 = builder7.setRequestInterceptor(requestInterceptor53);
        java.util.concurrent.Executor executor56 = builder7.httpExecutor;
        retrofit.ErrorHandler errorHandler57 = builder7.errorHandler;
        retrofit.converter.Converter converter58 = builder7.converter;
        retrofit.Server server59 = builder7.server;
        java.lang.String str60 = server59.getapiUrl();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Retrofit-Idle" + "'", str2, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "default" + "'", str16, "default");
        org.junit.Assert.assertNotNull(log24);
        org.junit.Assert.assertNull(server26);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(request47);
        org.junit.Assert.assertNotNull(gsonConverter49);
        org.junit.Assert.assertNotNull(gsonConverter50);
        org.junit.Assert.assertNotNull(gsonConverter51);
        org.junit.Assert.assertNotNull(request52);
        org.junit.Assert.assertNotNull(requestInterceptor53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(executor56);
        org.junit.Assert.assertNull(errorHandler57);
        org.junit.Assert.assertNull(converter58);
        org.junit.Assert.assertNotNull(server59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "http://example.com/" + "'", str60, "http://example.com/");
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1070");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        java.lang.String str2 = serializedObjectSupporter1.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter1.deserializeObjectConverter3();
        builder0.serializedObjectSupporter = serializedObjectSupporter1;
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.RestAdapter.Builder builder7 = builder0.setServer("http://example.com/");
        retrofit.Profiler profiler8 = builder7.profiler;
        java.util.concurrent.Executor executor9 = builder7.gethttpExecutor();
        retrofit.Server server10 = null;
        retrofit.client.Client.Provider provider11 = null;
        java.util.concurrent.Executor executor12 = null;
        java.util.concurrent.Executor executor13 = null;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        retrofit.converter.Converter converter15 = null;
        retrofit.Profiler profiler16 = null;
        retrofit.ErrorHandler errorHandler17 = null;
        retrofit.RestAdapter.Log log18 = null;
        retrofit.RestAdapter.LogLevel logLevel19 = null;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter(server10, provider11, executor12, executor13, requestInterceptor14, converter15, profiler16, errorHandler17, log18, logLevel19);
        retrofit.SerializedObjectSupporter serializedObjectSupporter21 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request22 = serializedObjectSupporter21.deserializeObjectRequest6();
        restAdapter20.serializedObjectSupporter = serializedObjectSupporter21;
        retrofit.converter.GsonConverter gsonConverter24 = serializedObjectSupporter21.deserializeObjectConverter7();
        java.lang.String str25 = serializedObjectSupporter21.deserializeObjectString1();
        retrofit.Server server26 = serializedObjectSupporter21.deserializeObjectServer1();
        retrofit.client.Request request27 = serializedObjectSupporter21.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter21.deserializeObjectConverter5();
        retrofit.RestAdapter.Builder builder29 = builder7.setConverter((retrofit.converter.Converter) gsonConverter28);
        retrofit.Server server30 = null;
        retrofit.client.Client.Provider provider31 = null;
        java.util.concurrent.Executor executor32 = null;
        java.util.concurrent.Executor executor33 = null;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        retrofit.converter.Converter converter35 = null;
        retrofit.Profiler profiler36 = null;
        retrofit.ErrorHandler errorHandler37 = null;
        retrofit.RestAdapter.Log log38 = null;
        retrofit.RestAdapter.LogLevel logLevel39 = null;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server30, provider31, executor32, executor33, requestInterceptor34, converter35, profiler36, errorHandler37, log38, logLevel39);
        retrofit.RestAdapter.RestHandler restHandler41 = restAdapter40.new RestHandler();
        retrofit.Server server42 = restAdapter40.server;
        retrofit.RestAdapter.LogLevel logLevel43 = restAdapter40.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor44 = restAdapter40.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter45 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request46 = serializedObjectSupporter45.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter47 = serializedObjectSupporter45.deserializeObjectConverter1();
        java.lang.String str48 = serializedObjectSupporter45.deserializeObjectString4();
        java.lang.String str49 = serializedObjectSupporter45.deserializeObjectString4();
        restAdapter40.serializedObjectSupporter = serializedObjectSupporter45;
        retrofit.client.Request request51 = serializedObjectSupporter45.deserializeObjectRequest4();
        builder29.serializedObjectSupporter = serializedObjectSupporter45;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.Server server54 = builder53.server;
        retrofit.Profiler profiler55 = builder53.profiler;
        retrofit.client.Client.Provider provider56 = null;
        builder53.setclientProvider(provider56);
        java.util.concurrent.Executor executor58 = builder53.getcallbackExecutor();
        retrofit.client.Client.Provider provider59 = null;
        builder53.clientProvider = provider59;
        retrofit.RestAdapter.Log log61 = builder53.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter62 = builder53.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter63 = new retrofit.SerializedObjectSupporter();
        java.lang.String str64 = serializedObjectSupporter63.deserializeObjectString2();
        retrofit.client.Request request65 = serializedObjectSupporter63.deserializeObjectRequest7();
        retrofit.ErrorHandler errorHandler66 = serializedObjectSupporter63.deserializeObjectErrorHandler1();
        builder53.errorHandler = errorHandler66;
        retrofit.RestAdapter.Builder builder68 = builder29.setErrorHandler(errorHandler66);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Retrofit-Idle" + "'", str2, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(profiler8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNotNull(request22);
        org.junit.Assert.assertNotNull(gsonConverter24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Retrofit-" + "'", str25, "Retrofit-");
        org.junit.Assert.assertNotNull(server26);
        org.junit.Assert.assertNotNull(request27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(server42);
        org.junit.Assert.assertNull(logLevel43);
        org.junit.Assert.assertNull(requestInterceptor44);
        org.junit.Assert.assertNotNull(request46);
        org.junit.Assert.assertNotNull(gsonConverter47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "http://example.com/" + "'", str48, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "http://example.com/" + "'", str49, "http://example.com/");
        org.junit.Assert.assertNotNull(request51);
        org.junit.Assert.assertNull(server54);
        org.junit.Assert.assertNull(profiler55);
        org.junit.Assert.assertNull(executor58);
        org.junit.Assert.assertNull(log61);
        org.junit.Assert.assertNull(serializedObjectSupporter62);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Retrofit-Idle" + "'", str64, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(request65);
        org.junit.Assert.assertNotNull(errorHandler66);
        org.junit.Assert.assertNotNull(builder68);
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1071");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.converter.Converter converter2 = null;
        builder0.converter = converter2;
        retrofit.RestAdapter.Log log4 = builder0.log;
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        retrofit.Server server6 = builder0.server;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = builder7.getcallbackExecutor();
        retrofit.Server server10 = new retrofit.Server("Retrofit-");
        java.lang.String str11 = server10.name;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.Server server21 = builder20.server;
        java.util.concurrent.Executor executor22 = null;
        builder20.httpExecutor = executor22;
        java.util.concurrent.Executor executor24 = builder20.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.FULL;
        builder20.logLevel = logLevel25;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server10, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log19, logLevel25);
        java.util.concurrent.Executor executor28 = restAdapter27.getcallbackExecutor();
        int int29 = restAdapter27.getLOG_CHUNK_SIZE();
        java.util.List<retrofit.client.Header> headerList32 = null;
        retrofit.mime.TypedOutput typedOutput33 = null;
        retrofit.client.Request request34 = new retrofit.client.Request("", "", headerList32, typedOutput33);
        retrofit.mime.TypedOutput typedOutput35 = request34.getBody();
        java.lang.String str36 = request34.url;
        retrofit.mime.TypedOutput typedOutput37 = request34.getBody();
        java.lang.String str38 = request34.getUrl();
        retrofit.client.Request request39 = restAdapter27.logAndReplaceRequest(request34);
        retrofit.RequestInterceptor requestInterceptor40 = restAdapter27.getrequestInterceptor();
        retrofit.Profiler profiler41 = restAdapter27.getprofiler();
        retrofit.Server server42 = restAdapter27.getserver();
        retrofit.Server server44 = new retrofit.Server("Retrofit-");
        java.lang.String str45 = server44.name;
        retrofit.client.Client.Provider provider46 = null;
        java.util.concurrent.Executor executor47 = null;
        java.util.concurrent.Executor executor48 = null;
        retrofit.RequestInterceptor requestInterceptor49 = null;
        retrofit.converter.Converter converter50 = null;
        retrofit.Profiler profiler51 = null;
        retrofit.ErrorHandler errorHandler52 = null;
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.Server server55 = builder54.server;
        java.util.concurrent.Executor executor56 = null;
        builder54.httpExecutor = executor56;
        java.util.concurrent.Executor executor58 = builder54.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.FULL;
        builder54.logLevel = logLevel59;
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter(server44, provider46, executor47, executor48, requestInterceptor49, converter50, profiler51, errorHandler52, log53, logLevel59);
        java.util.concurrent.Executor executor62 = restAdapter61.getcallbackExecutor();
        retrofit.converter.Converter converter63 = restAdapter61.converter;
        retrofit.RestAdapter.LogLevel logLevel64 = restAdapter61.logLevel;
        restAdapter27.logLevel = logLevel64;
        builder7.logLevel = logLevel64;
        builder0.logLevel = logLevel64;
        java.util.concurrent.Executor executor68 = builder0.gethttpExecutor();
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "default" + "'", str11, "default");
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertNull(server21);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4000 + "'", int29 == 4000);
        org.junit.Assert.assertNull(typedOutput35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNull(typedOutput37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(request39);
        org.junit.Assert.assertNull(requestInterceptor40);
        org.junit.Assert.assertNull(profiler41);
        org.junit.Assert.assertNotNull(server42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "default" + "'", str45, "default");
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertNull(server55);
        org.junit.Assert.assertNull(executor58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor62);
        org.junit.Assert.assertNull(converter63);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor68);
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1072");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString4();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest7();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collections collections5 = serializedObjectSupporter0.deserializeObjectList1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.Collections$UnmodifiableRandomAccessList cannot be cast to java.util.Collections");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "http://example.com/" + "'", str2, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertNotNull(request4);
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1073");
        retrofit.Server server1 = new retrofit.Server("hi!");
        java.lang.String str2 = server1.name;
        java.lang.String str3 = server1.apiUrl;
        java.lang.String str4 = server1.getDEFAULT_NAME();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "default" + "'", str2, "default");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "default" + "'", str4, "default");
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1074");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter2();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter8();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1075");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.requestInterceptor;
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter10.new RestHandler();
        retrofit.ErrorHandler errorHandler16 = restAdapter10.geterrorHandler();
        retrofit.client.Client.Provider provider17 = restAdapter10.getclientProvider();
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter10.new RestHandler();
        java.util.concurrent.Executor executor19 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter10.new RestHandler();
        retrofit.client.Client.Provider provider21 = restAdapter10.clientProvider;
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNull(provider17);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(provider21);
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1076");
        retrofit.Server server2 = new retrofit.Server("http://example.com/", "Retrofit-");
        java.lang.String str3 = server2.getDEFAULT_NAME();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "default" + "'", str3, "default");
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1077");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter10.new RestHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter10.new RestHandler();
        retrofit.Server server16 = restAdapter10.getserver();
        retrofit.Server server17 = restAdapter10.server;
        retrofit.converter.Converter converter18 = restAdapter10.getconverter();
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertNull(server17);
        org.junit.Assert.assertNull(converter18);
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1078");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request12 = serializedObjectSupporter11.deserializeObjectRequest6();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter11;
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter11.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter15 = serializedObjectSupporter11.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter11.deserializeObjectConverter8();
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(gsonConverter15);
        org.junit.Assert.assertNotNull(gsonConverter16);
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1079");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString4();
        retrofit.Server server4 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter2();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString1();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "http://example.com/" + "'", str2, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertNotNull(server4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Retrofit-" + "'", str6, "Retrofit-");
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1080");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter10.new RestHandler();
        retrofit.converter.Converter converter13 = restAdapter10.converter;
        retrofit.RestAdapter.Log log14 = restAdapter10.log;
        retrofit.RestAdapter.LogLevel logLevel15 = restAdapter10.logLevel;
        retrofit.client.Client.Provider provider16 = restAdapter10.getclientProvider();
        java.lang.String str17 = restAdapter10.getTHREAD_PREFIX();
        retrofit.client.Client.Provider provider18 = restAdapter10.getclientProvider();
        retrofit.client.Client.Provider provider19 = restAdapter10.clientProvider;
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertNull(log14);
        org.junit.Assert.assertNull(logLevel15);
        org.junit.Assert.assertNull(provider16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-" + "'", str17, "Retrofit-");
        org.junit.Assert.assertNull(provider18);
        org.junit.Assert.assertNull(provider19);
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1081");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        java.util.concurrent.Executor executor2 = null;
        builder0.httpExecutor = executor2;
        java.util.concurrent.Executor executor4 = null;
        builder0.callbackExecutor = executor4;
        java.util.concurrent.Executor executor6 = null;
        builder0.callbackExecutor = executor6;
        builder0.ensureSaneDefaults();
        retrofit.client.Client.Provider provider9 = builder0.clientProvider;
        retrofit.Profiler profiler10 = builder0.profiler;
        java.util.concurrent.Executor executor11 = null;
        builder0.setcallbackExecutor(executor11);
        retrofit.client.Client client13 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder14 = builder0.setClient(client13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNotNull(provider9);
        org.junit.Assert.assertNull(profiler10);
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1082");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.converter.Converter converter2 = null;
        builder0.converter = converter2;
        retrofit.RestAdapter.Log log4 = builder0.log;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.Server server6 = builder5.server;
        retrofit.Profiler profiler7 = builder5.profiler;
        retrofit.client.Client.Provider provider8 = null;
        builder5.setclientProvider(provider8);
        java.util.concurrent.Executor executor10 = builder5.getcallbackExecutor();
        java.util.concurrent.Executor executor11 = builder5.httpExecutor;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        java.lang.String str14 = serializedObjectSupporter13.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter15 = serializedObjectSupporter13.deserializeObjectConverter3();
        builder12.serializedObjectSupporter = serializedObjectSupporter13;
        retrofit.RestAdapter.Log log17 = builder12.log;
        retrofit.RestAdapter.Builder builder19 = builder12.setServer("http://example.com/");
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor21 = builder20.getcallbackExecutor();
        retrofit.Server server22 = builder20.server;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider24 = null;
        builder23.setclientProvider(provider24);
        retrofit.Server server27 = new retrofit.Server("Retrofit-");
        java.lang.String str28 = server27.name;
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.Server server38 = builder37.server;
        java.util.concurrent.Executor executor39 = null;
        builder37.httpExecutor = executor39;
        java.util.concurrent.Executor executor41 = builder37.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.FULL;
        builder37.logLevel = logLevel42;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter(server27, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log36, logLevel42);
        retrofit.RestAdapter.Builder builder45 = builder23.setLog(log36);
        retrofit.RestAdapter.Builder builder46 = builder20.setLog(log36);
        retrofit.Server server47 = null;
        retrofit.client.Client.Provider provider48 = null;
        java.util.concurrent.Executor executor49 = null;
        java.util.concurrent.Executor executor50 = null;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        retrofit.converter.Converter converter52 = null;
        retrofit.Profiler profiler53 = null;
        retrofit.ErrorHandler errorHandler54 = null;
        retrofit.RestAdapter.Log log55 = null;
        retrofit.RestAdapter.LogLevel logLevel56 = null;
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter(server47, provider48, executor49, executor50, requestInterceptor51, converter52, profiler53, errorHandler54, log55, logLevel56);
        retrofit.SerializedObjectSupporter serializedObjectSupporter58 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request59 = serializedObjectSupporter58.deserializeObjectRequest6();
        restAdapter57.serializedObjectSupporter = serializedObjectSupporter58;
        retrofit.converter.GsonConverter gsonConverter61 = serializedObjectSupporter58.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter62 = serializedObjectSupporter58.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter63 = serializedObjectSupporter58.deserializeObjectConverter1();
        retrofit.client.Request request64 = serializedObjectSupporter58.deserializeObjectRequest5();
        retrofit.RequestInterceptor requestInterceptor65 = serializedObjectSupporter58.deserializeObjectRequestInterceptor1();
        builder46.requestInterceptor = requestInterceptor65;
        retrofit.RestAdapter.Builder builder67 = builder19.setRequestInterceptor(requestInterceptor65);
        retrofit.RestAdapter.LogLevel logLevel68 = builder67.logLevel;
        retrofit.Server server69 = null;
        retrofit.client.Client.Provider provider70 = null;
        java.util.concurrent.Executor executor71 = null;
        java.util.concurrent.Executor executor72 = null;
        retrofit.RequestInterceptor requestInterceptor73 = null;
        retrofit.converter.Converter converter74 = null;
        retrofit.Profiler profiler75 = null;
        retrofit.ErrorHandler errorHandler76 = null;
        retrofit.RestAdapter.Log log77 = null;
        retrofit.RestAdapter.LogLevel logLevel78 = null;
        retrofit.RestAdapter restAdapter79 = new retrofit.RestAdapter(server69, provider70, executor71, executor72, requestInterceptor73, converter74, profiler75, errorHandler76, log77, logLevel78);
        retrofit.SerializedObjectSupporter serializedObjectSupporter80 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request81 = serializedObjectSupporter80.deserializeObjectRequest6();
        restAdapter79.serializedObjectSupporter = serializedObjectSupporter80;
        retrofit.converter.GsonConverter gsonConverter83 = serializedObjectSupporter80.deserializeObjectConverter7();
        retrofit.Server server84 = serializedObjectSupporter80.deserializeObjectServer1();
        retrofit.converter.GsonConverter gsonConverter85 = serializedObjectSupporter80.deserializeObjectConverter5();
        retrofit.Server server86 = serializedObjectSupporter80.deserializeObjectServer1();
        builder67.server = server86;
        retrofit.RestAdapter restAdapter88 = builder67.build();
        java.util.concurrent.Executor executor89 = restAdapter88.httpExecutor;
        builder5.callbackExecutor = executor89;
        builder0.httpExecutor = executor89;
        retrofit.RestAdapter.LogLevel logLevel92 = retrofit.RestAdapter.LogLevel.NONE;
        builder0.logLevel = logLevel92;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Retrofit-Idle" + "'", str14, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter15);
        org.junit.Assert.assertNull(log17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(server22);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "default" + "'", str28, "default");
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertNull(server38);
        org.junit.Assert.assertNull(executor41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(request59);
        org.junit.Assert.assertNotNull(gsonConverter61);
        org.junit.Assert.assertNotNull(gsonConverter62);
        org.junit.Assert.assertNotNull(gsonConverter63);
        org.junit.Assert.assertNotNull(request64);
        org.junit.Assert.assertNotNull(requestInterceptor65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(request81);
        org.junit.Assert.assertNotNull(gsonConverter83);
        org.junit.Assert.assertNotNull(server84);
        org.junit.Assert.assertNotNull(gsonConverter85);
        org.junit.Assert.assertNotNull(server86);
        org.junit.Assert.assertNotNull(restAdapter88);
        org.junit.Assert.assertNotNull(executor89);
        org.junit.Assert.assertTrue("'" + logLevel92 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel92.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1083");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor2 = null;
        builder0.requestInterceptor = requestInterceptor2;
        java.util.concurrent.Executor executor4 = null;
        builder0.setcallbackExecutor(executor4);
        retrofit.Server server7 = new retrofit.Server("POST");
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = null;
        retrofit.RestAdapter.LogLevel logLevel21 = null;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel21);
        retrofit.SerializedObjectSupporter serializedObjectSupporter23 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request24 = serializedObjectSupporter23.deserializeObjectRequest6();
        restAdapter22.serializedObjectSupporter = serializedObjectSupporter23;
        retrofit.converter.GsonConverter gsonConverter26 = serializedObjectSupporter23.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter27 = serializedObjectSupporter23.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter23.deserializeObjectConverter1();
        retrofit.Profiler profiler29 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request31 = serializedObjectSupporter30.deserializeObjectRequest6();
        java.lang.String str32 = serializedObjectSupporter30.deserializeObjectString4();
        java.lang.String str33 = serializedObjectSupporter30.deserializeObjectString5();
        retrofit.ErrorHandler errorHandler34 = serializedObjectSupporter30.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor36 = builder35.getcallbackExecutor();
        retrofit.Server server37 = builder35.server;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider39 = null;
        builder38.setclientProvider(provider39);
        retrofit.Server server42 = new retrofit.Server("Retrofit-");
        java.lang.String str43 = server42.name;
        retrofit.client.Client.Provider provider44 = null;
        java.util.concurrent.Executor executor45 = null;
        java.util.concurrent.Executor executor46 = null;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        retrofit.converter.Converter converter48 = null;
        retrofit.Profiler profiler49 = null;
        retrofit.ErrorHandler errorHandler50 = null;
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.Server server53 = builder52.server;
        java.util.concurrent.Executor executor54 = null;
        builder52.httpExecutor = executor54;
        java.util.concurrent.Executor executor56 = builder52.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.FULL;
        builder52.logLevel = logLevel57;
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter(server42, provider44, executor45, executor46, requestInterceptor47, converter48, profiler49, errorHandler50, log51, logLevel57);
        retrofit.RestAdapter.Builder builder60 = builder38.setLog(log51);
        retrofit.RestAdapter.Builder builder61 = builder35.setLog(log51);
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.Server server63 = builder62.server;
        retrofit.converter.Converter converter64 = null;
        builder62.converter = converter64;
        retrofit.RestAdapter.Log log66 = builder62.log;
        retrofit.RestAdapter.LogLevel logLevel67 = builder62.logLevel;
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, (retrofit.converter.Converter) gsonConverter28, profiler29, errorHandler34, log51, logLevel67);
        builder0.errorHandler = errorHandler34;
        retrofit.client.Client client70 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder71 = builder0.setClient(client70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNotNull(request24);
        org.junit.Assert.assertNotNull(gsonConverter26);
        org.junit.Assert.assertNotNull(gsonConverter27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(request31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "http://example.com/" + "'", str32, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "POST" + "'", str33, "POST");
        org.junit.Assert.assertNotNull(errorHandler34);
        org.junit.Assert.assertNull(executor36);
        org.junit.Assert.assertNull(server37);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "default" + "'", str43, "default");
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNull(server53);
        org.junit.Assert.assertNull(executor56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(server63);
        org.junit.Assert.assertNull(log66);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1084");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request16 = serializedObjectSupporter15.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter15.deserializeObjectConverter1();
        java.lang.String str18 = serializedObjectSupporter15.deserializeObjectString4();
        java.lang.String str19 = serializedObjectSupporter15.deserializeObjectString4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter15;
        retrofit.client.Request request21 = serializedObjectSupporter15.deserializeObjectRequest1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter15.deserializeObjectConverter7();
        java.lang.String str23 = serializedObjectSupporter15.deserializeObjectString2();
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertNotNull(request21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Retrofit-Idle" + "'", str23, "Retrofit-Idle");
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1085");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request16 = serializedObjectSupporter15.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter15.deserializeObjectConverter1();
        java.lang.String str18 = serializedObjectSupporter15.deserializeObjectString4();
        java.lang.String str19 = serializedObjectSupporter15.deserializeObjectString4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter15;
        retrofit.client.Request request21 = serializedObjectSupporter15.deserializeObjectRequest1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter15.deserializeObjectConverter1();
        retrofit.converter.GsonConverter gsonConverter23 = serializedObjectSupporter15.deserializeObjectConverter4();
        retrofit.client.Request request24 = serializedObjectSupporter15.deserializeObjectRequest1();
        retrofit.client.Request request25 = serializedObjectSupporter15.deserializeObjectRequest2();
        retrofit.client.Request request26 = serializedObjectSupporter15.deserializeObjectRequest6();
        retrofit.client.Request request27 = serializedObjectSupporter15.deserializeObjectRequest4();
        retrofit.client.Request request28 = serializedObjectSupporter15.deserializeObjectRequest6();
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertNotNull(request21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(gsonConverter23);
        org.junit.Assert.assertNotNull(request24);
        org.junit.Assert.assertNotNull(request25);
        org.junit.Assert.assertNotNull(request26);
        org.junit.Assert.assertNotNull(request27);
        org.junit.Assert.assertNotNull(request28);
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1086");
        retrofit.Server server1 = new retrofit.Server("Retrofit-");
        java.lang.String str2 = server1.name;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.Server server12 = builder11.server;
        java.util.concurrent.Executor executor13 = null;
        builder11.httpExecutor = executor13;
        java.util.concurrent.Executor executor15 = builder11.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.FULL;
        builder11.logLevel = logLevel16;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter(server1, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log10, logLevel16);
        java.util.concurrent.Executor executor19 = restAdapter18.getcallbackExecutor();
        retrofit.converter.Converter converter20 = restAdapter18.getconverter();
        retrofit.RestAdapter.LogLevel logLevel21 = null;
        restAdapter18.setLogLevel(logLevel21);
        java.util.concurrent.Executor executor23 = restAdapter18.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter18.new RestHandler();
        retrofit.ErrorHandler errorHandler25 = restAdapter18.errorHandler;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "default" + "'", str2, "default");
        org.junit.Assert.assertNotNull(log10);
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(converter20);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNull(errorHandler25);
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1087");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor2 = null;
        builder0.requestInterceptor = requestInterceptor2;
        java.util.concurrent.Executor executor4 = null;
        builder0.setcallbackExecutor(executor4);
        retrofit.RequestInterceptor requestInterceptor6 = builder0.requestInterceptor;
        java.util.concurrent.Executor executor7 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter9 = new retrofit.SerializedObjectSupporter();
        java.lang.String str10 = serializedObjectSupporter9.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter11 = serializedObjectSupporter9.deserializeObjectConverter3();
        builder8.serializedObjectSupporter = serializedObjectSupporter9;
        retrofit.RestAdapter.Log log13 = builder8.log;
        retrofit.RestAdapter.Builder builder15 = builder8.setServer("http://example.com/");
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor17 = builder16.getcallbackExecutor();
        retrofit.Server server18 = builder16.server;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider20 = null;
        builder19.setclientProvider(provider20);
        retrofit.Server server23 = new retrofit.Server("Retrofit-");
        java.lang.String str24 = server23.name;
        retrofit.client.Client.Provider provider25 = null;
        java.util.concurrent.Executor executor26 = null;
        java.util.concurrent.Executor executor27 = null;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        retrofit.converter.Converter converter29 = null;
        retrofit.Profiler profiler30 = null;
        retrofit.ErrorHandler errorHandler31 = null;
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.Server server34 = builder33.server;
        java.util.concurrent.Executor executor35 = null;
        builder33.httpExecutor = executor35;
        java.util.concurrent.Executor executor37 = builder33.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.FULL;
        builder33.logLevel = logLevel38;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server23, provider25, executor26, executor27, requestInterceptor28, converter29, profiler30, errorHandler31, log32, logLevel38);
        retrofit.RestAdapter.Builder builder41 = builder19.setLog(log32);
        retrofit.RestAdapter.Builder builder42 = builder16.setLog(log32);
        retrofit.Server server43 = null;
        retrofit.client.Client.Provider provider44 = null;
        java.util.concurrent.Executor executor45 = null;
        java.util.concurrent.Executor executor46 = null;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        retrofit.converter.Converter converter48 = null;
        retrofit.Profiler profiler49 = null;
        retrofit.ErrorHandler errorHandler50 = null;
        retrofit.RestAdapter.Log log51 = null;
        retrofit.RestAdapter.LogLevel logLevel52 = null;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server43, provider44, executor45, executor46, requestInterceptor47, converter48, profiler49, errorHandler50, log51, logLevel52);
        retrofit.SerializedObjectSupporter serializedObjectSupporter54 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request55 = serializedObjectSupporter54.deserializeObjectRequest6();
        restAdapter53.serializedObjectSupporter = serializedObjectSupporter54;
        retrofit.converter.GsonConverter gsonConverter57 = serializedObjectSupporter54.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter58 = serializedObjectSupporter54.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter59 = serializedObjectSupporter54.deserializeObjectConverter1();
        retrofit.client.Request request60 = serializedObjectSupporter54.deserializeObjectRequest5();
        retrofit.RequestInterceptor requestInterceptor61 = serializedObjectSupporter54.deserializeObjectRequestInterceptor1();
        builder42.requestInterceptor = requestInterceptor61;
        retrofit.RestAdapter.Builder builder63 = builder15.setRequestInterceptor(requestInterceptor61);
        retrofit.RestAdapter.LogLevel logLevel64 = builder63.logLevel;
        retrofit.Server server65 = null;
        retrofit.client.Client.Provider provider66 = null;
        java.util.concurrent.Executor executor67 = null;
        java.util.concurrent.Executor executor68 = null;
        retrofit.RequestInterceptor requestInterceptor69 = null;
        retrofit.converter.Converter converter70 = null;
        retrofit.Profiler profiler71 = null;
        retrofit.ErrorHandler errorHandler72 = null;
        retrofit.RestAdapter.Log log73 = null;
        retrofit.RestAdapter.LogLevel logLevel74 = null;
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter(server65, provider66, executor67, executor68, requestInterceptor69, converter70, profiler71, errorHandler72, log73, logLevel74);
        retrofit.SerializedObjectSupporter serializedObjectSupporter76 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request77 = serializedObjectSupporter76.deserializeObjectRequest6();
        restAdapter75.serializedObjectSupporter = serializedObjectSupporter76;
        retrofit.converter.GsonConverter gsonConverter79 = serializedObjectSupporter76.deserializeObjectConverter7();
        retrofit.Server server80 = serializedObjectSupporter76.deserializeObjectServer1();
        retrofit.converter.GsonConverter gsonConverter81 = serializedObjectSupporter76.deserializeObjectConverter5();
        retrofit.Server server82 = serializedObjectSupporter76.deserializeObjectServer1();
        builder63.server = server82;
        retrofit.RestAdapter restAdapter84 = builder63.build();
        java.util.concurrent.Executor executor85 = restAdapter84.httpExecutor;
        builder0.callbackExecutor = executor85;
        retrofit.RestAdapter.Log log87 = builder0.log;
        builder0.ensureSaneDefaults();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Retrofit-Idle" + "'", str10, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter11);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(server18);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "default" + "'", str24, "default");
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertNull(server34);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(request55);
        org.junit.Assert.assertNotNull(gsonConverter57);
        org.junit.Assert.assertNotNull(gsonConverter58);
        org.junit.Assert.assertNotNull(gsonConverter59);
        org.junit.Assert.assertNotNull(request60);
        org.junit.Assert.assertNotNull(requestInterceptor61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(request77);
        org.junit.Assert.assertNotNull(gsonConverter79);
        org.junit.Assert.assertNotNull(server80);
        org.junit.Assert.assertNotNull(gsonConverter81);
        org.junit.Assert.assertNotNull(server82);
        org.junit.Assert.assertNotNull(restAdapter84);
        org.junit.Assert.assertNotNull(executor85);
        org.junit.Assert.assertNull(log87);
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1088");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor2 = null;
        builder0.requestInterceptor = requestInterceptor2;
        java.util.concurrent.Executor executor4 = null;
        builder0.setcallbackExecutor(executor4);
        retrofit.Server server7 = new retrofit.Server("POST");
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = null;
        retrofit.RestAdapter.LogLevel logLevel21 = null;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel21);
        retrofit.SerializedObjectSupporter serializedObjectSupporter23 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request24 = serializedObjectSupporter23.deserializeObjectRequest6();
        restAdapter22.serializedObjectSupporter = serializedObjectSupporter23;
        retrofit.converter.GsonConverter gsonConverter26 = serializedObjectSupporter23.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter27 = serializedObjectSupporter23.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter23.deserializeObjectConverter1();
        retrofit.Profiler profiler29 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request31 = serializedObjectSupporter30.deserializeObjectRequest6();
        java.lang.String str32 = serializedObjectSupporter30.deserializeObjectString4();
        java.lang.String str33 = serializedObjectSupporter30.deserializeObjectString5();
        retrofit.ErrorHandler errorHandler34 = serializedObjectSupporter30.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor36 = builder35.getcallbackExecutor();
        retrofit.Server server37 = builder35.server;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider39 = null;
        builder38.setclientProvider(provider39);
        retrofit.Server server42 = new retrofit.Server("Retrofit-");
        java.lang.String str43 = server42.name;
        retrofit.client.Client.Provider provider44 = null;
        java.util.concurrent.Executor executor45 = null;
        java.util.concurrent.Executor executor46 = null;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        retrofit.converter.Converter converter48 = null;
        retrofit.Profiler profiler49 = null;
        retrofit.ErrorHandler errorHandler50 = null;
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.Server server53 = builder52.server;
        java.util.concurrent.Executor executor54 = null;
        builder52.httpExecutor = executor54;
        java.util.concurrent.Executor executor56 = builder52.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.FULL;
        builder52.logLevel = logLevel57;
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter(server42, provider44, executor45, executor46, requestInterceptor47, converter48, profiler49, errorHandler50, log51, logLevel57);
        retrofit.RestAdapter.Builder builder60 = builder38.setLog(log51);
        retrofit.RestAdapter.Builder builder61 = builder35.setLog(log51);
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.Server server63 = builder62.server;
        retrofit.converter.Converter converter64 = null;
        builder62.converter = converter64;
        retrofit.RestAdapter.Log log66 = builder62.log;
        retrofit.RestAdapter.LogLevel logLevel67 = builder62.logLevel;
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, (retrofit.converter.Converter) gsonConverter28, profiler29, errorHandler34, log51, logLevel67);
        builder0.errorHandler = errorHandler34;
        java.util.concurrent.Executor executor70 = null;
        builder0.callbackExecutor = executor70;
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        retrofit.Server server73 = builder72.server;
        java.util.concurrent.Executor executor74 = null;
        builder72.httpExecutor = executor74;
        java.util.concurrent.Executor executor76 = null;
        builder72.callbackExecutor = executor76;
        java.util.concurrent.Executor executor78 = null;
        builder72.callbackExecutor = executor78;
        builder72.ensureSaneDefaults();
        retrofit.client.Client.Provider provider81 = builder72.clientProvider;
        builder0.clientProvider = provider81;
        retrofit.client.Client.Provider provider83 = builder0.clientProvider;
        retrofit.Profiler profiler84 = builder0.profiler;
        retrofit.ErrorHandler errorHandler85 = builder0.errorHandler;
        java.util.concurrent.Executor executor86 = builder0.gethttpExecutor();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNotNull(request24);
        org.junit.Assert.assertNotNull(gsonConverter26);
        org.junit.Assert.assertNotNull(gsonConverter27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(request31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "http://example.com/" + "'", str32, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "POST" + "'", str33, "POST");
        org.junit.Assert.assertNotNull(errorHandler34);
        org.junit.Assert.assertNull(executor36);
        org.junit.Assert.assertNull(server37);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "default" + "'", str43, "default");
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNull(server53);
        org.junit.Assert.assertNull(executor56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(server63);
        org.junit.Assert.assertNull(log66);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server73);
        org.junit.Assert.assertNotNull(provider81);
        org.junit.Assert.assertNotNull(provider83);
        org.junit.Assert.assertNull(profiler84);
        org.junit.Assert.assertNotNull(errorHandler85);
        org.junit.Assert.assertNull(executor86);
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1089");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel14 = null;
        restAdapter10.logLevel = logLevel14;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter10.logLevel = logLevel16;
        retrofit.client.Client.Provider provider18 = restAdapter10.clientProvider;
        retrofit.client.Client.Provider provider19 = restAdapter10.getclientProvider();
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Log log28 = null;
        retrofit.RestAdapter.LogLevel logLevel29 = null;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log28, logLevel29);
        retrofit.RestAdapter.RestHandler restHandler31 = restAdapter30.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler32 = restAdapter30.new RestHandler();
        java.util.concurrent.Executor executor33 = restAdapter30.getcallbackExecutor();
        retrofit.RestAdapter.RestHandler restHandler34 = restAdapter30.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter30.logLevel = logLevel35;
        restAdapter10.setLogLevel(logLevel35);
        boolean boolean38 = logLevel35.log();
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(provider18);
        org.junit.Assert.assertNull(provider19);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1090");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        java.lang.String str2 = serializedObjectSupporter1.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter1.deserializeObjectConverter3();
        builder0.serializedObjectSupporter = serializedObjectSupporter1;
        java.util.concurrent.Executor executor5 = null;
        builder0.callbackExecutor = executor5;
        java.util.concurrent.Executor executor7 = builder0.callbackExecutor;
        java.util.concurrent.Executor executor8 = null;
        builder0.httpExecutor = executor8;
        retrofit.ErrorHandler errorHandler10 = builder0.errorHandler;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Retrofit-Idle" + "'", str2, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler10);
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1091");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter10.new RestHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter10.getLogLevel();
        java.util.concurrent.Executor executor17 = restAdapter10.httpExecutor;
        java.util.concurrent.Executor executor18 = restAdapter10.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor19 = restAdapter10.getrequestInterceptor();
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(logLevel16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(requestInterceptor19);
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1092");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter10.new RestHandler();
        retrofit.Server server15 = null;
        retrofit.client.Client.Provider provider16 = null;
        java.util.concurrent.Executor executor17 = null;
        java.util.concurrent.Executor executor18 = null;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        retrofit.converter.Converter converter20 = null;
        retrofit.Profiler profiler21 = null;
        retrofit.ErrorHandler errorHandler22 = null;
        retrofit.RestAdapter.Log log23 = null;
        retrofit.RestAdapter.LogLevel logLevel24 = null;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter(server15, provider16, executor17, executor18, requestInterceptor19, converter20, profiler21, errorHandler22, log23, logLevel24);
        retrofit.RestAdapter.RestHandler restHandler26 = restAdapter25.new RestHandler();
        retrofit.Server server27 = restAdapter25.server;
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter25.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor29 = restAdapter25.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request31 = serializedObjectSupporter30.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter32 = serializedObjectSupporter30.deserializeObjectConverter1();
        java.lang.String str33 = serializedObjectSupporter30.deserializeObjectString4();
        java.lang.String str34 = serializedObjectSupporter30.deserializeObjectString4();
        restAdapter25.serializedObjectSupporter = serializedObjectSupporter30;
        retrofit.client.Request request36 = serializedObjectSupporter30.deserializeObjectRequest1();
        retrofit.client.Request request37 = serializedObjectSupporter30.deserializeObjectRequest3();
        retrofit.converter.GsonConverter gsonConverter38 = serializedObjectSupporter30.deserializeObjectConverter5();
        restHandler14.serializedObjectSupporter = serializedObjectSupporter30;
        retrofit.client.Request request40 = serializedObjectSupporter30.deserializeObjectRequest1();
        retrofit.converter.GsonConverter gsonConverter41 = serializedObjectSupporter30.deserializeObjectConverter5();
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(server27);
        org.junit.Assert.assertNull(logLevel28);
        org.junit.Assert.assertNull(requestInterceptor29);
        org.junit.Assert.assertNotNull(request31);
        org.junit.Assert.assertNotNull(gsonConverter32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "http://example.com/" + "'", str33, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "http://example.com/" + "'", str34, "http://example.com/");
        org.junit.Assert.assertNotNull(request36);
        org.junit.Assert.assertNotNull(request37);
        org.junit.Assert.assertNotNull(gsonConverter38);
        org.junit.Assert.assertNotNull(request40);
        org.junit.Assert.assertNotNull(gsonConverter41);
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1093");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest3();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest1();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter7();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(gsonConverter5);
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1094");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest5();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest5();
        retrofit.Server server5 = serializedObjectSupporter0.deserializeObjectServer1();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString5();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter0.deserializeObjectConverter8();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(server5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "POST" + "'", str6, "POST");
        org.junit.Assert.assertNotNull(gsonConverter7);
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1095");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request16 = serializedObjectSupporter15.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter15.deserializeObjectConverter1();
        java.lang.String str18 = serializedObjectSupporter15.deserializeObjectString4();
        java.lang.String str19 = serializedObjectSupporter15.deserializeObjectString4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter15;
        retrofit.client.Request request21 = serializedObjectSupporter15.deserializeObjectRequest4();
        java.lang.String str22 = serializedObjectSupporter15.deserializeObjectString3();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter23 = serializedObjectSupporter15.deserializeObjectLogLevel1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertNotNull(request21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "GET" + "'", str22, "GET");
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1096");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter3();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest4();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Retrofit-Idle" + "'", str1, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(request4);
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1097");
        retrofit.Server server1 = new retrofit.Server("Retrofit-");
        java.lang.String str2 = server1.name;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.Server server12 = builder11.server;
        java.util.concurrent.Executor executor13 = null;
        builder11.httpExecutor = executor13;
        java.util.concurrent.Executor executor15 = builder11.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.FULL;
        builder11.logLevel = logLevel16;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter(server1, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log10, logLevel16);
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter18.new RestHandler();
        java.util.List<retrofit.client.Header> headerList22 = null;
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "", headerList22, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = request24.getBody();
        java.lang.String str26 = request24.url;
        java.util.List<retrofit.client.Header> headerList27 = request24.headers;
        retrofit.client.Request request28 = restAdapter18.logAndReplaceRequest(request24);
        retrofit.RestAdapter.RestHandler restHandler29 = restAdapter18.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler30 = restAdapter18.new RestHandler();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "default" + "'", str2, "default");
        org.junit.Assert.assertNotNull(log10);
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(typedOutput25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(headerList27);
        org.junit.Assert.assertNotNull(request28);
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1098");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter7();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString5();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest6();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter6 = serializedObjectSupporter0.deserializeObjectLogLevel3();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Retrofit-Idle" + "'", str1, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "POST" + "'", str4, "POST");
        org.junit.Assert.assertNotNull(request5);
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1099");
        retrofit.Server server2 = new retrofit.Server("default", "http://example.com/");
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1100");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request16 = serializedObjectSupporter15.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter15.deserializeObjectConverter1();
        java.lang.String str18 = serializedObjectSupporter15.deserializeObjectString4();
        java.lang.String str19 = serializedObjectSupporter15.deserializeObjectString4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter15;
        java.util.concurrent.Executor executor21 = restAdapter10.callbackExecutor;
        retrofit.Profiler profiler22 = restAdapter10.profiler;
        retrofit.RequestInterceptor requestInterceptor23 = restAdapter10.requestInterceptor;
        java.lang.String str24 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.Server server25 = restAdapter10.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = restAdapter10.serializedObjectSupporter;
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(requestInterceptor23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Retrofit-Idle" + "'", str24, "Retrofit-Idle");
        org.junit.Assert.assertNull(server25);
        org.junit.Assert.assertNotNull(serializedObjectSupporter26);
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1101");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.Server server2 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter3 = builder0.serializedObjectSupporter;
        retrofit.converter.Converter converter4 = builder0.converter;
        retrofit.Server server5 = null;
        retrofit.client.Client.Provider provider6 = null;
        java.util.concurrent.Executor executor7 = null;
        java.util.concurrent.Executor executor8 = null;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        retrofit.converter.Converter converter10 = null;
        retrofit.Profiler profiler11 = null;
        retrofit.ErrorHandler errorHandler12 = null;
        retrofit.RestAdapter.Log log13 = null;
        retrofit.RestAdapter.LogLevel logLevel14 = null;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter(server5, provider6, executor7, executor8, requestInterceptor9, converter10, profiler11, errorHandler12, log13, logLevel14);
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request17 = serializedObjectSupporter16.deserializeObjectRequest6();
        restAdapter15.serializedObjectSupporter = serializedObjectSupporter16;
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter16.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter16.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter21 = serializedObjectSupporter16.deserializeObjectConverter1();
        retrofit.client.Request request22 = serializedObjectSupporter16.deserializeObjectRequest5();
        retrofit.RequestInterceptor requestInterceptor23 = serializedObjectSupporter16.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder24 = builder0.setRequestInterceptor(requestInterceptor23);
        retrofit.Profiler profiler25 = null;
        builder24.profiler = profiler25;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertNull(serializedObjectSupporter3);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNotNull(gsonConverter21);
        org.junit.Assert.assertNotNull(request22);
        org.junit.Assert.assertNotNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1102");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request16 = serializedObjectSupporter15.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter15.deserializeObjectConverter1();
        java.lang.String str18 = serializedObjectSupporter15.deserializeObjectString4();
        java.lang.String str19 = serializedObjectSupporter15.deserializeObjectString4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter15;
        retrofit.ErrorHandler errorHandler21 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor22 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.Server server24 = builder23.server;
        retrofit.converter.Converter converter25 = null;
        builder23.converter = converter25;
        retrofit.RestAdapter.Log log27 = builder23.log;
        retrofit.RestAdapter.LogLevel logLevel28 = builder23.logLevel;
        restAdapter10.logLevel = logLevel28;
        retrofit.RestAdapter.RestHandler restHandler30 = restAdapter10.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = restAdapter10.serializedObjectSupporter;
        retrofit.converter.GsonConverter gsonConverter32 = serializedObjectSupporter31.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter31.deserializeObjectConverter2();
        retrofit.converter.GsonConverter gsonConverter34 = serializedObjectSupporter31.deserializeObjectConverter8();
        java.lang.String str35 = serializedObjectSupporter31.deserializeObjectString4();
        retrofit.client.Request request36 = serializedObjectSupporter31.deserializeObjectRequest3();
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(server24);
        org.junit.Assert.assertNull(log27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(serializedObjectSupporter31);
        org.junit.Assert.assertNotNull(gsonConverter32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(gsonConverter34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "http://example.com/" + "'", str35, "http://example.com/");
        org.junit.Assert.assertNotNull(request36);
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1103");
        retrofit.Server server1 = new retrofit.Server("Retrofit-");
        java.lang.String str2 = server1.name;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.Server server12 = builder11.server;
        java.util.concurrent.Executor executor13 = null;
        builder11.httpExecutor = executor13;
        java.util.concurrent.Executor executor15 = builder11.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.FULL;
        builder11.logLevel = logLevel16;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter(server1, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log10, logLevel16);
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter18.getLogLevel();
        retrofit.Profiler profiler20 = restAdapter18.profiler;
        retrofit.RestAdapter.LogLevel logLevel21 = restAdapter18.logLevel;
        retrofit.Profiler profiler22 = restAdapter18.profiler;
        retrofit.Server server23 = restAdapter18.server;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "default" + "'", str2, "default");
        org.junit.Assert.assertNotNull(log10);
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNotNull(server23);
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1104");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        java.util.concurrent.Executor executor3 = null;
        builder0.setcallbackExecutor(executor3);
        retrofit.client.Client.Provider provider5 = builder0.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = builder0.serializedObjectSupporter;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNull(serializedObjectSupporter6);
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1105");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request16 = serializedObjectSupporter15.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter15.deserializeObjectConverter1();
        java.lang.String str18 = serializedObjectSupporter15.deserializeObjectString4();
        java.lang.String str19 = serializedObjectSupporter15.deserializeObjectString4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter15;
        retrofit.client.Request request21 = serializedObjectSupporter15.deserializeObjectRequest1();
        retrofit.client.Request request22 = serializedObjectSupporter15.deserializeObjectRequest5();
        retrofit.converter.GsonConverter gsonConverter23 = serializedObjectSupporter15.deserializeObjectConverter3();
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertNotNull(request21);
        org.junit.Assert.assertNotNull(request22);
        org.junit.Assert.assertNotNull(gsonConverter23);
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1106");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString2();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString4();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest1();
        retrofit.Server server4 = serializedObjectSupporter0.deserializeObjectServer1();
        java.lang.String str5 = server4.name;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Retrofit-Idle" + "'", str1, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "http://example.com/" + "'", str2, "http://example.com/");
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(server4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "default" + "'", str5, "default");
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1107");
        retrofit.Server server1 = new retrofit.Server("hi!");
        java.lang.String str2 = server1.getDEFAULT_NAME();
        java.lang.String str3 = server1.getName();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "default" + "'", str2, "default");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "default" + "'", str3, "default");
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1108");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.converter.Converter converter2 = null;
        builder0.converter = converter2;
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = new retrofit.SerializedObjectSupporter();
        java.lang.String str5 = serializedObjectSupporter4.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter4.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter4.deserializeObjectConverter7();
        builder0.converter = gsonConverter7;
        retrofit.converter.Converter converter9 = builder0.converter;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.Server server11 = builder10.server;
        retrofit.Profiler profiler12 = builder10.profiler;
        retrofit.client.Client.Provider provider13 = null;
        builder10.setclientProvider(provider13);
        retrofit.Server server16 = new retrofit.Server("Retrofit-");
        java.lang.String str17 = server16.name;
        builder10.server = server16;
        retrofit.Server server19 = builder10.server;
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Log log28 = null;
        retrofit.RestAdapter.LogLevel logLevel29 = null;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log28, logLevel29);
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request32 = serializedObjectSupporter31.deserializeObjectRequest6();
        restAdapter30.serializedObjectSupporter = serializedObjectSupporter31;
        retrofit.converter.GsonConverter gsonConverter34 = serializedObjectSupporter31.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter35 = serializedObjectSupporter31.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter36 = serializedObjectSupporter31.deserializeObjectConverter1();
        retrofit.client.Request request37 = serializedObjectSupporter31.deserializeObjectRequest5();
        retrofit.RequestInterceptor requestInterceptor38 = serializedObjectSupporter31.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder39 = builder10.setRequestInterceptor(requestInterceptor38);
        retrofit.RestAdapter.Builder builder40 = builder0.setRequestInterceptor(requestInterceptor38);
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Retrofit-Idle" + "'", str5, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter6);
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertNotNull(converter9);
        org.junit.Assert.assertNull(server11);
        org.junit.Assert.assertNull(profiler12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "default" + "'", str17, "default");
        org.junit.Assert.assertNotNull(server19);
        org.junit.Assert.assertNotNull(request32);
        org.junit.Assert.assertNotNull(gsonConverter34);
        org.junit.Assert.assertNotNull(gsonConverter35);
        org.junit.Assert.assertNotNull(gsonConverter36);
        org.junit.Assert.assertNotNull(request37);
        org.junit.Assert.assertNotNull(requestInterceptor38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1109");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel14 = null;
        restAdapter10.logLevel = logLevel14;
        retrofit.client.Client.Provider provider16 = restAdapter10.getclientProvider();
        java.util.concurrent.Executor executor17 = restAdapter10.httpExecutor;
        retrofit.Server server18 = null;
        retrofit.client.Client.Provider provider19 = null;
        java.util.concurrent.Executor executor20 = null;
        java.util.concurrent.Executor executor21 = null;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        retrofit.converter.Converter converter23 = null;
        retrofit.Profiler profiler24 = null;
        retrofit.ErrorHandler errorHandler25 = null;
        retrofit.RestAdapter.Log log26 = null;
        retrofit.RestAdapter.LogLevel logLevel27 = null;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server18, provider19, executor20, executor21, requestInterceptor22, converter23, profiler24, errorHandler25, log26, logLevel27);
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request30 = serializedObjectSupporter29.deserializeObjectRequest6();
        restAdapter28.serializedObjectSupporter = serializedObjectSupporter29;
        retrofit.converter.GsonConverter gsonConverter32 = serializedObjectSupporter29.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter29.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter34 = serializedObjectSupporter29.deserializeObjectConverter1();
        retrofit.ErrorHandler errorHandler35 = serializedObjectSupporter29.deserializeObjectErrorHandler1();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter29;
        retrofit.RestAdapter.LogLevel logLevel37 = restAdapter10.getLogLevel();
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(provider16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNotNull(request30);
        org.junit.Assert.assertNotNull(gsonConverter32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(gsonConverter34);
        org.junit.Assert.assertNotNull(errorHandler35);
        org.junit.Assert.assertNull(logLevel37);
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1110");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter1 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest7();
        retrofit.mime.TypedString typedString3 = serializedObjectSupporter0.deserializeObjectTypedOutput2();
        org.junit.Assert.assertNotNull(gsonConverter1);
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertNotNull(typedString3);
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1111");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor2 = null;
        builder0.requestInterceptor = requestInterceptor2;
        java.util.concurrent.Executor executor4 = null;
        builder0.setcallbackExecutor(executor4);
        retrofit.ErrorHandler errorHandler6 = builder0.errorHandler;
        java.util.concurrent.Executor executor7 = null;
        builder0.callbackExecutor = executor7;
        retrofit.Profiler profiler9 = null;
        builder0.profiler = profiler9;
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Log log19 = null;
        retrofit.RestAdapter.LogLevel logLevel20 = null;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log19, logLevel20);
        retrofit.SerializedObjectSupporter serializedObjectSupporter22 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request23 = serializedObjectSupporter22.deserializeObjectRequest6();
        restAdapter21.serializedObjectSupporter = serializedObjectSupporter22;
        retrofit.converter.GsonConverter gsonConverter25 = serializedObjectSupporter22.deserializeObjectConverter7();
        java.lang.String str26 = serializedObjectSupporter22.deserializeObjectString1();
        retrofit.client.Request request27 = serializedObjectSupporter22.deserializeObjectRequest6();
        retrofit.Server server28 = serializedObjectSupporter22.deserializeObjectServer1();
        java.lang.String str29 = server28.getUrl();
        retrofit.RestAdapter.Builder builder30 = builder0.setServer(server28);
        retrofit.Server server31 = null;
        retrofit.client.Client.Provider provider32 = null;
        java.util.concurrent.Executor executor33 = null;
        java.util.concurrent.Executor executor34 = null;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        retrofit.converter.Converter converter36 = null;
        retrofit.Profiler profiler37 = null;
        retrofit.ErrorHandler errorHandler38 = null;
        retrofit.RestAdapter.Log log39 = null;
        retrofit.RestAdapter.LogLevel logLevel40 = null;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter(server31, provider32, executor33, executor34, requestInterceptor35, converter36, profiler37, errorHandler38, log39, logLevel40);
        retrofit.SerializedObjectSupporter serializedObjectSupporter42 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request43 = serializedObjectSupporter42.deserializeObjectRequest6();
        restAdapter41.serializedObjectSupporter = serializedObjectSupporter42;
        retrofit.RestAdapter.RestHandler restHandler45 = restAdapter41.new RestHandler();
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.Server server47 = builder46.server;
        retrofit.converter.Converter converter48 = null;
        builder46.converter = converter48;
        retrofit.ErrorHandler errorHandler50 = builder46.errorHandler;
        retrofit.Server server52 = new retrofit.Server("Retrofit-");
        java.lang.String str53 = server52.name;
        retrofit.client.Client.Provider provider54 = null;
        java.util.concurrent.Executor executor55 = null;
        java.util.concurrent.Executor executor56 = null;
        retrofit.RequestInterceptor requestInterceptor57 = null;
        retrofit.converter.Converter converter58 = null;
        retrofit.Profiler profiler59 = null;
        retrofit.ErrorHandler errorHandler60 = null;
        retrofit.RestAdapter.Log log61 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.Server server63 = builder62.server;
        java.util.concurrent.Executor executor64 = null;
        builder62.httpExecutor = executor64;
        java.util.concurrent.Executor executor66 = builder62.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel67 = retrofit.RestAdapter.LogLevel.FULL;
        builder62.logLevel = logLevel67;
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter(server52, provider54, executor55, executor56, requestInterceptor57, converter58, profiler59, errorHandler60, log61, logLevel67);
        retrofit.RestAdapter.LogLevel logLevel70 = restAdapter69.getLogLevel();
        retrofit.RestAdapter.Builder builder71 = builder46.setLogLevel(logLevel70);
        restAdapter41.logLevel = logLevel70;
        retrofit.RestAdapter.Builder builder73 = builder0.setLogLevel(logLevel70);
        retrofit.RestAdapter.Builder builder75 = builder73.setServer("http://example.com/");
        retrofit.converter.Converter converter76 = builder73.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter77 = new retrofit.SerializedObjectSupporter();
        java.lang.String str78 = serializedObjectSupporter77.deserializeObjectString2();
        retrofit.client.Request request79 = serializedObjectSupporter77.deserializeObjectRequest7();
        java.lang.String str80 = serializedObjectSupporter77.deserializeObjectString5();
        retrofit.client.Request request81 = serializedObjectSupporter77.deserializeObjectRequest2();
        retrofit.client.Request request82 = serializedObjectSupporter77.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter83 = serializedObjectSupporter77.deserializeObjectConverter3();
        retrofit.Server server84 = serializedObjectSupporter77.deserializeObjectServer1();
        builder73.serializedObjectSupporter = serializedObjectSupporter77;
        retrofit.converter.GsonConverter gsonConverter86 = serializedObjectSupporter77.deserializeObjectConverter1();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertNotNull(gsonConverter25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Retrofit-" + "'", str26, "Retrofit-");
        org.junit.Assert.assertNotNull(request27);
        org.junit.Assert.assertNotNull(server28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "http://example.com" + "'", str29, "http://example.com");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(request43);
        org.junit.Assert.assertNull(server47);
        org.junit.Assert.assertNull(errorHandler50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "default" + "'", str53, "default");
        org.junit.Assert.assertNotNull(log61);
        org.junit.Assert.assertNull(server63);
        org.junit.Assert.assertNull(executor66);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNull(converter76);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Retrofit-Idle" + "'", str78, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(request79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "POST" + "'", str80, "POST");
        org.junit.Assert.assertNotNull(request81);
        org.junit.Assert.assertNotNull(request82);
        org.junit.Assert.assertNotNull(gsonConverter83);
        org.junit.Assert.assertNotNull(server84);
        org.junit.Assert.assertNotNull(gsonConverter86);
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1112");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request16 = serializedObjectSupporter15.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter15.deserializeObjectConverter1();
        java.lang.String str18 = serializedObjectSupporter15.deserializeObjectString4();
        java.lang.String str19 = serializedObjectSupporter15.deserializeObjectString4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter15;
        retrofit.ErrorHandler errorHandler21 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor22 = restAdapter10.httpExecutor;
        int int23 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter10.new RestHandler();
        java.util.concurrent.Executor executor26 = restAdapter10.callbackExecutor;
        java.lang.String str27 = restAdapter10.getTHREAD_PREFIX();
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor29 = builder28.getcallbackExecutor();
        retrofit.Server server30 = builder28.server;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider32 = null;
        builder31.setclientProvider(provider32);
        retrofit.Server server35 = new retrofit.Server("Retrofit-");
        java.lang.String str36 = server35.name;
        retrofit.client.Client.Provider provider37 = null;
        java.util.concurrent.Executor executor38 = null;
        java.util.concurrent.Executor executor39 = null;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        retrofit.converter.Converter converter41 = null;
        retrofit.Profiler profiler42 = null;
        retrofit.ErrorHandler errorHandler43 = null;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.Server server46 = builder45.server;
        java.util.concurrent.Executor executor47 = null;
        builder45.httpExecutor = executor47;
        java.util.concurrent.Executor executor49 = builder45.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel50 = retrofit.RestAdapter.LogLevel.FULL;
        builder45.logLevel = logLevel50;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter(server35, provider37, executor38, executor39, requestInterceptor40, converter41, profiler42, errorHandler43, log44, logLevel50);
        retrofit.RestAdapter.Builder builder53 = builder31.setLog(log44);
        retrofit.RestAdapter.Builder builder54 = builder28.setLog(log44);
        retrofit.Profiler profiler55 = null;
        builder54.profiler = profiler55;
        retrofit.RestAdapter.LogLevel logLevel57 = builder54.logLevel;
        restAdapter10.logLevel = logLevel57;
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4000 + "'", int23 == 4000);
        org.junit.Assert.assertNull(logLevel24);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Retrofit-" + "'", str27, "Retrofit-");
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "default" + "'", str36, "default");
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNull(server46);
        org.junit.Assert.assertNull(executor49);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1113");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter1();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString1();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter0.deserializeObjectConverter8();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Retrofit-" + "'", str4, "Retrofit-");
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(gsonConverter6);
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1114");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString4();
        retrofit.ErrorHandler errorHandler4 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter2();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collections collections6 = serializedObjectSupporter0.deserializeObjectList1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.Collections$UnmodifiableRandomAccessList cannot be cast to java.util.Collections");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "http://example.com/" + "'", str2, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler4);
        org.junit.Assert.assertNotNull(gsonConverter5);
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1115");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request12 = serializedObjectSupporter11.deserializeObjectRequest6();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter11;
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter11.deserializeObjectConverter7();
        java.lang.String str15 = serializedObjectSupporter11.deserializeObjectString1();
        retrofit.client.Request request16 = serializedObjectSupporter11.deserializeObjectRequest2();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter11.deserializeObjectConverter8();
        java.lang.String str18 = serializedObjectSupporter11.deserializeObjectString4();
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Retrofit-" + "'", str15, "Retrofit-");
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1116");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request12 = serializedObjectSupporter11.deserializeObjectRequest6();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter11;
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter11.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter15 = serializedObjectSupporter11.deserializeObjectConverter7();
        java.lang.String str16 = serializedObjectSupporter11.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter11.deserializeObjectConverter1();
        retrofit.mime.TypedString typedString18 = serializedObjectSupporter11.deserializeObjectTypedOutput2();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter19 = serializedObjectSupporter11.deserializeObjectLogLevel2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(gsonConverter15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Retrofit-Idle" + "'", str16, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertNotNull(typedString18);
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1117");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        java.lang.String str17 = serializedObjectSupporter16.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter18 = serializedObjectSupporter16.deserializeObjectConverter3();
        builder15.serializedObjectSupporter = serializedObjectSupporter16;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter16;
        retrofit.converter.Converter converter21 = restAdapter10.converter;
        retrofit.RequestInterceptor requestInterceptor22 = restAdapter10.getrequestInterceptor();
        retrofit.RestAdapter.RestHandler restHandler23 = restAdapter10.new RestHandler();
        retrofit.converter.Converter converter24 = restAdapter10.getconverter();
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-Idle" + "'", str17, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter18);
        org.junit.Assert.assertNull(converter21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNull(converter24);
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1118");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter10.new RestHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter10.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = restHandler14.serializedObjectSupporter;
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(serializedObjectSupporter15);
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1119");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request12 = serializedObjectSupporter11.deserializeObjectRequest6();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter11;
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter11.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter15 = serializedObjectSupporter11.deserializeObjectConverter7();
        retrofit.client.Request request16 = serializedObjectSupporter11.deserializeObjectRequest6();
        retrofit.client.Request request17 = serializedObjectSupporter11.deserializeObjectRequest7();
        java.lang.String str18 = serializedObjectSupporter11.deserializeObjectString4();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter11.deserializeObjectConverter5();
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(gsonConverter15);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter19);
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1120");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.Server server2 = builder0.server;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider4 = null;
        builder3.setclientProvider(provider4);
        retrofit.Server server7 = new retrofit.Server("Retrofit-");
        java.lang.String str8 = server7.name;
        retrofit.client.Client.Provider provider9 = null;
        java.util.concurrent.Executor executor10 = null;
        java.util.concurrent.Executor executor11 = null;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        retrofit.converter.Converter converter13 = null;
        retrofit.Profiler profiler14 = null;
        retrofit.ErrorHandler errorHandler15 = null;
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.Server server18 = builder17.server;
        java.util.concurrent.Executor executor19 = null;
        builder17.httpExecutor = executor19;
        java.util.concurrent.Executor executor21 = builder17.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.FULL;
        builder17.logLevel = logLevel22;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server7, provider9, executor10, executor11, requestInterceptor12, converter13, profiler14, errorHandler15, log16, logLevel22);
        retrofit.RestAdapter.Builder builder25 = builder3.setLog(log16);
        retrofit.RestAdapter.Builder builder26 = builder0.setLog(log16);
        retrofit.converter.Converter converter27 = builder26.converter;
        retrofit.Server server28 = null;
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.RestAdapter.Log log36 = null;
        retrofit.RestAdapter.LogLevel logLevel37 = null;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter(server28, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log36, logLevel37);
        retrofit.SerializedObjectSupporter serializedObjectSupporter39 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request40 = serializedObjectSupporter39.deserializeObjectRequest6();
        restAdapter38.serializedObjectSupporter = serializedObjectSupporter39;
        retrofit.converter.GsonConverter gsonConverter42 = serializedObjectSupporter39.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter43 = serializedObjectSupporter39.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter44 = serializedObjectSupporter39.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter45 = serializedObjectSupporter39.deserializeObjectConverter6();
        builder26.converter = gsonConverter45;
        java.util.concurrent.Executor executor47 = builder26.httpExecutor;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "default" + "'", str8, "default");
        org.junit.Assert.assertNotNull(log16);
        org.junit.Assert.assertNull(server18);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(converter27);
        org.junit.Assert.assertNotNull(request40);
        org.junit.Assert.assertNotNull(gsonConverter42);
        org.junit.Assert.assertNotNull(gsonConverter43);
        org.junit.Assert.assertNotNull(gsonConverter44);
        org.junit.Assert.assertNotNull(gsonConverter45);
        org.junit.Assert.assertNull(executor47);
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1121");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        java.lang.String str2 = serializedObjectSupporter1.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter1.deserializeObjectConverter3();
        builder0.serializedObjectSupporter = serializedObjectSupporter1;
        java.util.concurrent.Executor executor5 = null;
        builder0.callbackExecutor = executor5;
        retrofit.SerializedObjectSupporter serializedObjectSupporter7 = builder0.serializedObjectSupporter;
        java.lang.String str8 = serializedObjectSupporter7.deserializeObjectString1();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter7.deserializeObjectConverter8();
        retrofit.client.Request request10 = serializedObjectSupporter7.deserializeObjectRequest1();
        retrofit.converter.GsonConverter gsonConverter11 = serializedObjectSupporter7.deserializeObjectConverter3();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Retrofit-Idle" + "'", str2, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(serializedObjectSupporter7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Retrofit-" + "'", str8, "Retrofit-");
        org.junit.Assert.assertNotNull(gsonConverter9);
        org.junit.Assert.assertNotNull(request10);
        org.junit.Assert.assertNotNull(gsonConverter11);
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1122");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        java.util.concurrent.Executor executor2 = null;
        builder0.httpExecutor = executor2;
        java.util.concurrent.Executor executor4 = builder0.httpExecutor;
        retrofit.Server server7 = new retrofit.Server("Retrofit-", "");
        java.lang.String str8 = server7.getUrl();
        builder0.server = server7;
        java.util.concurrent.Executor executor10 = builder0.getcallbackExecutor();
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Log log19 = null;
        retrofit.RestAdapter.LogLevel logLevel20 = null;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log19, logLevel20);
        retrofit.SerializedObjectSupporter serializedObjectSupporter22 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request23 = serializedObjectSupporter22.deserializeObjectRequest6();
        restAdapter21.serializedObjectSupporter = serializedObjectSupporter22;
        java.lang.String str25 = serializedObjectSupporter22.deserializeObjectString4();
        retrofit.Server server26 = serializedObjectSupporter22.deserializeObjectServer1();
        java.lang.String str27 = server26.getapiUrl();
        retrofit.RestAdapter.Builder builder28 = builder0.setServer(server26);
        java.lang.String str29 = server26.getapiUrl();
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Retrofit-" + "'", str8, "Retrofit-");
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "http://example.com/" + "'", str25, "http://example.com/");
        org.junit.Assert.assertNotNull(server26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "http://example.com" + "'", str27, "http://example.com");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "http://example.com" + "'", str29, "http://example.com");
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1123");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.Server server2 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter3 = builder0.serializedObjectSupporter;
        retrofit.converter.Converter converter4 = builder0.converter;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.Server server6 = builder5.server;
        retrofit.converter.Converter converter7 = null;
        builder5.converter = converter7;
        retrofit.RestAdapter.Log log9 = builder5.log;
        retrofit.RestAdapter.LogLevel logLevel10 = builder5.logLevel;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = builder11.getcallbackExecutor();
        retrofit.Server server13 = builder11.server;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider15 = null;
        builder14.setclientProvider(provider15);
        retrofit.Server server18 = new retrofit.Server("Retrofit-");
        java.lang.String str19 = server18.name;
        retrofit.client.Client.Provider provider20 = null;
        java.util.concurrent.Executor executor21 = null;
        java.util.concurrent.Executor executor22 = null;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        retrofit.converter.Converter converter24 = null;
        retrofit.Profiler profiler25 = null;
        retrofit.ErrorHandler errorHandler26 = null;
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.Server server29 = builder28.server;
        java.util.concurrent.Executor executor30 = null;
        builder28.httpExecutor = executor30;
        java.util.concurrent.Executor executor32 = builder28.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.FULL;
        builder28.logLevel = logLevel33;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server18, provider20, executor21, executor22, requestInterceptor23, converter24, profiler25, errorHandler26, log27, logLevel33);
        retrofit.RestAdapter.Builder builder36 = builder14.setLog(log27);
        retrofit.RestAdapter.Builder builder37 = builder11.setLog(log27);
        builder37.ensureSaneDefaults();
        java.util.concurrent.Executor executor39 = builder37.callbackExecutor;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor41 = builder40.getcallbackExecutor();
        retrofit.Server server42 = builder40.server;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider44 = null;
        builder43.setclientProvider(provider44);
        retrofit.Server server47 = new retrofit.Server("Retrofit-");
        java.lang.String str48 = server47.name;
        retrofit.client.Client.Provider provider49 = null;
        java.util.concurrent.Executor executor50 = null;
        java.util.concurrent.Executor executor51 = null;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        retrofit.converter.Converter converter53 = null;
        retrofit.Profiler profiler54 = null;
        retrofit.ErrorHandler errorHandler55 = null;
        retrofit.RestAdapter.Log log56 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.Server server58 = builder57.server;
        java.util.concurrent.Executor executor59 = null;
        builder57.httpExecutor = executor59;
        java.util.concurrent.Executor executor61 = builder57.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.FULL;
        builder57.logLevel = logLevel62;
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter(server47, provider49, executor50, executor51, requestInterceptor52, converter53, profiler54, errorHandler55, log56, logLevel62);
        retrofit.RestAdapter.Builder builder65 = builder43.setLog(log56);
        retrofit.RestAdapter.Builder builder66 = builder40.setLog(log56);
        builder66.ensureSaneDefaults();
        java.util.concurrent.Executor executor68 = builder66.callbackExecutor;
        retrofit.RestAdapter.Builder builder69 = builder5.setExecutors(executor39, executor68);
        builder0.sethttpExecutor(executor39);
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertNull(serializedObjectSupporter3);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertNull(log9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "default" + "'", str19, "default");
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNull(server29);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(executor39);
        org.junit.Assert.assertNull(executor41);
        org.junit.Assert.assertNull(server42);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "default" + "'", str48, "default");
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertNull(server58);
        org.junit.Assert.assertNull(executor61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(executor68);
        org.junit.Assert.assertNotNull(builder69);
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1124");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.Profiler profiler2 = builder0.profiler;
        retrofit.ErrorHandler errorHandler3 = null;
        builder0.errorHandler = errorHandler3;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor6 = builder5.getcallbackExecutor();
        retrofit.Server server7 = builder5.server;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider9 = null;
        builder8.setclientProvider(provider9);
        retrofit.Server server12 = new retrofit.Server("Retrofit-");
        java.lang.String str13 = server12.name;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.Server server23 = builder22.server;
        java.util.concurrent.Executor executor24 = null;
        builder22.httpExecutor = executor24;
        java.util.concurrent.Executor executor26 = builder22.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.FULL;
        builder22.logLevel = logLevel27;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server12, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel27);
        retrofit.RestAdapter.Builder builder30 = builder8.setLog(log21);
        retrofit.RestAdapter.Builder builder31 = builder5.setLog(log21);
        retrofit.RestAdapter.Log log32 = builder31.log;
        log32.log("http://example.com");
        builder0.log = log32;
        retrofit.client.Client.Provider provider36 = builder0.getclientProvider();
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(server7);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "default" + "'", str13, "default");
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertNull(server23);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertNull(provider36);
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1125");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request16 = serializedObjectSupporter15.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter15.deserializeObjectConverter1();
        java.lang.String str18 = serializedObjectSupporter15.deserializeObjectString4();
        java.lang.String str19 = serializedObjectSupporter15.deserializeObjectString4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter15;
        retrofit.ErrorHandler errorHandler21 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor22 = restAdapter10.httpExecutor;
        int int23 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter10.new RestHandler();
        java.util.concurrent.Executor executor26 = restAdapter10.getcallbackExecutor();
        retrofit.client.Client.Provider provider27 = restAdapter10.getclientProvider();
        retrofit.ErrorHandler errorHandler28 = restAdapter10.errorHandler;
        retrofit.client.Request request29 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request30 = restAdapter10.logAndReplaceRequest(request29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4000 + "'", int23 == 4000);
        org.junit.Assert.assertNull(logLevel24);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(provider27);
        org.junit.Assert.assertNull(errorHandler28);
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1126");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        java.lang.String str2 = serializedObjectSupporter1.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter1.deserializeObjectConverter3();
        builder0.serializedObjectSupporter = serializedObjectSupporter1;
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.RestAdapter.Builder builder7 = builder0.setServer("http://example.com/");
        retrofit.RestAdapter.Builder builder9 = builder7.setServer("http://example.com");
        retrofit.Server server10 = null;
        retrofit.client.Client.Provider provider11 = null;
        java.util.concurrent.Executor executor12 = null;
        java.util.concurrent.Executor executor13 = null;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        retrofit.converter.Converter converter15 = null;
        retrofit.Profiler profiler16 = null;
        retrofit.ErrorHandler errorHandler17 = null;
        retrofit.RestAdapter.Log log18 = null;
        retrofit.RestAdapter.LogLevel logLevel19 = null;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter(server10, provider11, executor12, executor13, requestInterceptor14, converter15, profiler16, errorHandler17, log18, logLevel19);
        retrofit.SerializedObjectSupporter serializedObjectSupporter21 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request22 = serializedObjectSupporter21.deserializeObjectRequest6();
        restAdapter20.serializedObjectSupporter = serializedObjectSupporter21;
        retrofit.converter.GsonConverter gsonConverter24 = serializedObjectSupporter21.deserializeObjectConverter7();
        java.lang.String str25 = serializedObjectSupporter21.deserializeObjectString1();
        retrofit.Server server26 = serializedObjectSupporter21.deserializeObjectServer1();
        retrofit.client.Request request27 = serializedObjectSupporter21.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter21.deserializeObjectConverter1();
        retrofit.RestAdapter.Builder builder29 = builder9.setConverter((retrofit.converter.Converter) gsonConverter28);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Retrofit-Idle" + "'", str2, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(request22);
        org.junit.Assert.assertNotNull(gsonConverter24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Retrofit-" + "'", str25, "Retrofit-");
        org.junit.Assert.assertNotNull(server26);
        org.junit.Assert.assertNotNull(request27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1127");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.converter.Converter converter2 = null;
        builder0.converter = converter2;
        retrofit.RestAdapter.Log log4 = builder0.log;
        retrofit.client.Client.Provider provider5 = null;
        builder0.clientProvider = provider5;
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = null;
        retrofit.RestAdapter.LogLevel logLevel16 = null;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel16);
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request19 = serializedObjectSupporter18.deserializeObjectRequest6();
        restAdapter17.serializedObjectSupporter = serializedObjectSupporter18;
        java.lang.String str21 = serializedObjectSupporter18.deserializeObjectString4();
        retrofit.Server server22 = serializedObjectSupporter18.deserializeObjectServer1();
        retrofit.client.Request request23 = serializedObjectSupporter18.deserializeObjectRequest1();
        retrofit.client.Request request24 = serializedObjectSupporter18.deserializeObjectRequest6();
        java.lang.String str25 = serializedObjectSupporter18.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter26 = serializedObjectSupporter18.deserializeObjectConverter2();
        java.lang.String str27 = serializedObjectSupporter18.deserializeObjectString2();
        retrofit.RequestInterceptor requestInterceptor28 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder29 = builder0.setRequestInterceptor(requestInterceptor28);
        retrofit.Profiler profiler30 = null;
        builder29.profiler = profiler30;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertNotNull(request19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "http://example.com/" + "'", str21, "http://example.com/");
        org.junit.Assert.assertNotNull(server22);
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertNotNull(request24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Retrofit-Idle" + "'", str25, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Retrofit-Idle" + "'", str27, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(requestInterceptor28);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1128");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        java.lang.String str17 = serializedObjectSupporter16.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter18 = serializedObjectSupporter16.deserializeObjectConverter3();
        builder15.serializedObjectSupporter = serializedObjectSupporter16;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter16;
        java.lang.String str21 = restAdapter10.getTHREAD_PREFIX();
        retrofit.RestAdapter.Log log22 = restAdapter10.log;
        retrofit.RestAdapter.RestHandler restHandler23 = restAdapter10.new RestHandler();
        retrofit.client.Client.Provider provider24 = restAdapter10.clientProvider;
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-Idle" + "'", str17, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Retrofit-" + "'", str21, "Retrofit-");
        org.junit.Assert.assertNull(log22);
        org.junit.Assert.assertNull(provider24);
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1129");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest5();
        retrofit.mime.TypedOutput typedOutput4 = request3.getBody();
        java.lang.String str5 = request3.getUrl();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNull(typedOutput4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "http://example.com/" + "'", str5, "http://example.com/");
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1130");
        retrofit.Server server1 = new retrofit.Server("Retrofit-");
        java.lang.String str2 = server1.name;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.Server server12 = builder11.server;
        java.util.concurrent.Executor executor13 = null;
        builder11.httpExecutor = executor13;
        java.util.concurrent.Executor executor15 = builder11.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.FULL;
        builder11.logLevel = logLevel16;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter(server1, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log10, logLevel16);
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter18.getLogLevel();
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Log log28 = null;
        retrofit.RestAdapter.LogLevel logLevel29 = null;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log28, logLevel29);
        retrofit.RestAdapter.RestHandler restHandler31 = restAdapter30.new RestHandler();
        retrofit.Server server32 = restAdapter30.server;
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter30.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor34 = restAdapter30.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter35 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request36 = serializedObjectSupporter35.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter37 = serializedObjectSupporter35.deserializeObjectConverter1();
        java.lang.String str38 = serializedObjectSupporter35.deserializeObjectString4();
        java.lang.String str39 = serializedObjectSupporter35.deserializeObjectString4();
        restAdapter30.serializedObjectSupporter = serializedObjectSupporter35;
        retrofit.ErrorHandler errorHandler41 = restAdapter30.geterrorHandler();
        java.util.concurrent.Executor executor42 = restAdapter30.httpExecutor;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.Server server44 = builder43.server;
        retrofit.converter.Converter converter45 = null;
        builder43.converter = converter45;
        retrofit.RestAdapter.Log log47 = builder43.log;
        retrofit.RestAdapter.LogLevel logLevel48 = builder43.logLevel;
        restAdapter30.logLevel = logLevel48;
        restAdapter18.logLevel = logLevel48;
        retrofit.SerializedObjectSupporter serializedObjectSupporter51 = restAdapter18.serializedObjectSupporter;
        retrofit.client.Response response53 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response55 = restAdapter18.logAndReplaceResponse("http://example.com/", response53, (long) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "default" + "'", str2, "default");
        org.junit.Assert.assertNotNull(log10);
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(server32);
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertNull(requestInterceptor34);
        org.junit.Assert.assertNotNull(request36);
        org.junit.Assert.assertNotNull(gsonConverter37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "http://example.com/" + "'", str38, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "http://example.com/" + "'", str39, "http://example.com/");
        org.junit.Assert.assertNull(errorHandler41);
        org.junit.Assert.assertNull(executor42);
        org.junit.Assert.assertNull(server44);
        org.junit.Assert.assertNull(log47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(serializedObjectSupporter51);
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1131");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request12 = serializedObjectSupporter11.deserializeObjectRequest6();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter11;
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter11.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter15 = serializedObjectSupporter11.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter11.deserializeObjectConverter1();
        retrofit.client.Request request17 = serializedObjectSupporter11.deserializeObjectRequest5();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter18 = serializedObjectSupporter11.deserializeObjectLogLevel2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(gsonConverter15);
        org.junit.Assert.assertNotNull(gsonConverter16);
        org.junit.Assert.assertNotNull(request17);
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1132");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString2();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest8();
        retrofit.client.Request request6 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.mime.TypedOutput typedOutput7 = request6.body;
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "http://example.com/" + "'", str2, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Retrofit-Idle" + "'", str4, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(request6);
        org.junit.Assert.assertNull(typedOutput7);
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1133");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        java.lang.String str2 = serializedObjectSupporter1.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter1.deserializeObjectConverter3();
        builder0.serializedObjectSupporter = serializedObjectSupporter1;
        java.util.concurrent.Executor executor5 = null;
        builder0.callbackExecutor = executor5;
        retrofit.SerializedObjectSupporter serializedObjectSupporter7 = builder0.serializedObjectSupporter;
        java.lang.String str8 = serializedObjectSupporter7.deserializeObjectString1();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter7.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter10 = serializedObjectSupporter7.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter11 = serializedObjectSupporter7.deserializeObjectConverter3();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter12 = serializedObjectSupporter7.deserializeObjectLogLevel1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Retrofit-Idle" + "'", str2, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(serializedObjectSupporter7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Retrofit-" + "'", str8, "Retrofit-");
        org.junit.Assert.assertNotNull(gsonConverter9);
        org.junit.Assert.assertNotNull(gsonConverter10);
        org.junit.Assert.assertNotNull(gsonConverter11);
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1134");
        retrofit.Server server1 = new retrofit.Server("Retrofit-");
        java.lang.String str2 = server1.name;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.Server server12 = builder11.server;
        java.util.concurrent.Executor executor13 = null;
        builder11.httpExecutor = executor13;
        java.util.concurrent.Executor executor15 = builder11.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.FULL;
        builder11.logLevel = logLevel16;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter(server1, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log10, logLevel16);
        java.util.concurrent.Executor executor19 = restAdapter18.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = restAdapter18.serializedObjectSupporter;
        retrofit.RestAdapter.RestHandler restHandler21 = restAdapter18.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler22 = restAdapter18.new RestHandler();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "default" + "'", str2, "default");
        org.junit.Assert.assertNotNull(log10);
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(serializedObjectSupporter20);
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1135");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        java.lang.String str2 = serializedObjectSupporter1.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter1.deserializeObjectConverter3();
        builder0.serializedObjectSupporter = serializedObjectSupporter1;
        java.util.concurrent.Executor executor5 = null;
        builder0.httpExecutor = executor5;
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = null;
        retrofit.RestAdapter.LogLevel logLevel16 = null;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel16);
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request19 = serializedObjectSupporter18.deserializeObjectRequest6();
        restAdapter17.serializedObjectSupporter = serializedObjectSupporter18;
        java.lang.String str21 = serializedObjectSupporter18.deserializeObjectString4();
        retrofit.Server server22 = serializedObjectSupporter18.deserializeObjectServer1();
        retrofit.client.Request request23 = serializedObjectSupporter18.deserializeObjectRequest1();
        retrofit.converter.GsonConverter gsonConverter24 = serializedObjectSupporter18.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter25 = serializedObjectSupporter18.deserializeObjectConverter3();
        builder0.converter = gsonConverter25;
        retrofit.SerializedObjectSupporter serializedObjectSupporter27 = new retrofit.SerializedObjectSupporter();
        builder0.serializedObjectSupporter = serializedObjectSupporter27;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter29 = serializedObjectSupporter27.deserializeObjectLogLevel1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Retrofit-Idle" + "'", str2, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(request19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "http://example.com/" + "'", str21, "http://example.com/");
        org.junit.Assert.assertNotNull(server22);
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertNotNull(gsonConverter24);
        org.junit.Assert.assertNotNull(gsonConverter25);
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1136");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel14 = null;
        restAdapter10.logLevel = logLevel14;
        java.lang.String str16 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.Server server17 = restAdapter10.server;
        retrofit.Server server18 = restAdapter10.server;
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Retrofit-Idle" + "'", str16, "Retrofit-Idle");
        org.junit.Assert.assertNull(server17);
        org.junit.Assert.assertNull(server18);
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1137");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request12 = serializedObjectSupporter11.deserializeObjectRequest6();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter11;
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter11.deserializeObjectConverter7();
        java.lang.String str15 = serializedObjectSupporter11.deserializeObjectString1();
        retrofit.client.Request request16 = serializedObjectSupporter11.deserializeObjectRequest6();
        retrofit.Server server17 = serializedObjectSupporter11.deserializeObjectServer1();
        retrofit.client.Request request18 = serializedObjectSupporter11.deserializeObjectRequest5();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter11.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter11.deserializeObjectConverter8();
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Retrofit-" + "'", str15, "Retrofit-");
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(server17);
        org.junit.Assert.assertNotNull(request18);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(gsonConverter20);
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1138");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter1();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString1();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.RequestInterceptor requestInterceptor6 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.mime.TypedString typedString7 = serializedObjectSupporter0.deserializeObjectTypedOutput2();
        retrofit.Server server8 = serializedObjectSupporter0.deserializeObjectServer1();
        java.lang.String str9 = server8.getUrl();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Retrofit-" + "'", str4, "Retrofit-");
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(typedString7);
        org.junit.Assert.assertNotNull(server8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "http://example.com" + "'", str9, "http://example.com");
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1139");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = null;
        retrofit.RestAdapter.LogLevel logLevel21 = null;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel21);
        retrofit.RestAdapter.RestHandler restHandler23 = restAdapter22.new RestHandler();
        retrofit.Server server24 = restAdapter22.server;
        retrofit.RestAdapter.LogLevel logLevel25 = restAdapter22.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor26 = restAdapter22.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter27 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request28 = serializedObjectSupporter27.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter29 = serializedObjectSupporter27.deserializeObjectConverter1();
        java.lang.String str30 = serializedObjectSupporter27.deserializeObjectString4();
        java.lang.String str31 = serializedObjectSupporter27.deserializeObjectString4();
        restAdapter22.serializedObjectSupporter = serializedObjectSupporter27;
        retrofit.client.Request request33 = serializedObjectSupporter27.deserializeObjectRequest1();
        retrofit.converter.GsonConverter gsonConverter34 = serializedObjectSupporter27.deserializeObjectConverter1();
        retrofit.converter.GsonConverter gsonConverter35 = serializedObjectSupporter27.deserializeObjectConverter4();
        retrofit.client.Request request36 = serializedObjectSupporter27.deserializeObjectRequest1();
        retrofit.converter.GsonConverter gsonConverter37 = serializedObjectSupporter27.deserializeObjectConverter6();
        restHandler11.serializedObjectSupporter = serializedObjectSupporter27;
        retrofit.Server server39 = null;
        retrofit.client.Client.Provider provider40 = null;
        java.util.concurrent.Executor executor41 = null;
        java.util.concurrent.Executor executor42 = null;
        retrofit.RequestInterceptor requestInterceptor43 = null;
        retrofit.converter.Converter converter44 = null;
        retrofit.Profiler profiler45 = null;
        retrofit.ErrorHandler errorHandler46 = null;
        retrofit.RestAdapter.Log log47 = null;
        retrofit.RestAdapter.LogLevel logLevel48 = null;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server39, provider40, executor41, executor42, requestInterceptor43, converter44, profiler45, errorHandler46, log47, logLevel48);
        retrofit.RestAdapter.RestHandler restHandler50 = restAdapter49.new RestHandler();
        retrofit.Server server51 = restAdapter49.server;
        retrofit.RestAdapter.LogLevel logLevel52 = restAdapter49.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor53 = restAdapter49.requestInterceptor;
        retrofit.RestAdapter.RestHandler restHandler54 = restAdapter49.new RestHandler();
        retrofit.ErrorHandler errorHandler55 = restAdapter49.geterrorHandler();
        retrofit.client.Client.Provider provider56 = restAdapter49.getclientProvider();
        java.lang.reflect.Method method57 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] {};
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj59 = restHandler11.invoke((java.lang.Object) provider56, method57, objArray58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server24);
        org.junit.Assert.assertNull(logLevel25);
        org.junit.Assert.assertNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(request28);
        org.junit.Assert.assertNotNull(gsonConverter29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "http://example.com/" + "'", str30, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "http://example.com/" + "'", str31, "http://example.com/");
        org.junit.Assert.assertNotNull(request33);
        org.junit.Assert.assertNotNull(gsonConverter34);
        org.junit.Assert.assertNotNull(gsonConverter35);
        org.junit.Assert.assertNotNull(request36);
        org.junit.Assert.assertNotNull(gsonConverter37);
        org.junit.Assert.assertNull(server51);
        org.junit.Assert.assertNull(logLevel52);
        org.junit.Assert.assertNull(requestInterceptor53);
        org.junit.Assert.assertNull(errorHandler55);
        org.junit.Assert.assertNull(provider56);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[]");
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1140");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor2 = null;
        builder0.requestInterceptor = requestInterceptor2;
        java.util.concurrent.Executor executor4 = null;
        builder0.setcallbackExecutor(executor4);
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request7 = serializedObjectSupporter6.deserializeObjectRequest3();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter10 = serializedObjectSupporter6.deserializeObjectConverter5();
        retrofit.RequestInterceptor requestInterceptor11 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder12 = builder0.setRequestInterceptor(requestInterceptor11);
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(gsonConverter9);
        org.junit.Assert.assertNotNull(gsonConverter10);
        org.junit.Assert.assertNotNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1141");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.RequestInterceptor requestInterceptor4 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter5 = serializedObjectSupporter0.deserializeObjectLogLevel1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(requestInterceptor4);
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1142");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.requestInterceptor;
        retrofit.Server server15 = restAdapter10.getserver();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass16 = server15.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNull(server15);
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1143");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request12 = serializedObjectSupporter11.deserializeObjectRequest6();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter11;
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter11.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter15 = serializedObjectSupporter11.deserializeObjectConverter7();
        retrofit.client.Request request16 = serializedObjectSupporter11.deserializeObjectRequest6();
        retrofit.client.Request request17 = serializedObjectSupporter11.deserializeObjectRequest7();
        retrofit.client.Request request18 = serializedObjectSupporter11.deserializeObjectRequest2();
        retrofit.mime.TypedOutput typedOutput19 = request18.body;
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(gsonConverter15);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertNotNull(request18);
        org.junit.Assert.assertNull(typedOutput19);
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1144");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel14 = null;
        restAdapter10.logLevel = logLevel14;
        retrofit.client.Client.Provider provider16 = restAdapter10.getclientProvider();
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter10.new RestHandler();
        retrofit.converter.Converter converter18 = restAdapter10.getconverter();
        java.util.concurrent.Executor executor19 = restAdapter10.gethttpExecutor();
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter10.new RestHandler();
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(provider16);
        org.junit.Assert.assertNull(converter18);
        org.junit.Assert.assertNull(executor19);
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1145");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.requestInterceptor;
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter10.new RestHandler();
        java.lang.String str16 = restAdapter10.getIDLE_THREAD_NAME();
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Retrofit-Idle" + "'", str16, "Retrofit-Idle");
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1146");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.Server server2 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter3 = builder0.serializedObjectSupporter;
        retrofit.converter.Converter converter4 = builder0.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter5 = new retrofit.SerializedObjectSupporter();
        java.lang.String str6 = serializedObjectSupporter5.deserializeObjectString2();
        retrofit.client.Request request7 = serializedObjectSupporter5.deserializeObjectRequest7();
        java.lang.String str8 = serializedObjectSupporter5.deserializeObjectString5();
        retrofit.Server server9 = serializedObjectSupporter5.deserializeObjectServer1();
        builder0.serializedObjectSupporter = serializedObjectSupporter5;
        retrofit.ErrorHandler errorHandler11 = builder0.errorHandler;
        retrofit.Profiler profiler12 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder13 = builder0.setProfiler(profiler12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertNull(serializedObjectSupporter3);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Retrofit-Idle" + "'", str6, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "POST" + "'", str8, "POST");
        org.junit.Assert.assertNotNull(server9);
        org.junit.Assert.assertNull(errorHandler11);
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1147");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter10.new RestHandler();
        retrofit.converter.Converter converter14 = restAdapter10.getconverter();
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor16 = builder15.getcallbackExecutor();
        retrofit.ErrorHandler errorHandler17 = builder15.errorHandler;
        retrofit.client.Client.Provider provider18 = null;
        builder15.setclientProvider(provider18);
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Log log28 = null;
        retrofit.RestAdapter.LogLevel logLevel29 = null;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log28, logLevel29);
        retrofit.RestAdapter.RestHandler restHandler31 = restAdapter30.new RestHandler();
        retrofit.Server server32 = restAdapter30.server;
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter30.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor34 = restAdapter30.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter35 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request36 = serializedObjectSupporter35.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter37 = serializedObjectSupporter35.deserializeObjectConverter1();
        java.lang.String str38 = serializedObjectSupporter35.deserializeObjectString4();
        java.lang.String str39 = serializedObjectSupporter35.deserializeObjectString4();
        restAdapter30.serializedObjectSupporter = serializedObjectSupporter35;
        retrofit.ErrorHandler errorHandler41 = restAdapter30.geterrorHandler();
        java.util.concurrent.Executor executor42 = restAdapter30.httpExecutor;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.Server server44 = builder43.server;
        retrofit.converter.Converter converter45 = null;
        builder43.converter = converter45;
        retrofit.RestAdapter.Log log47 = builder43.log;
        retrofit.RestAdapter.LogLevel logLevel48 = builder43.logLevel;
        restAdapter30.logLevel = logLevel48;
        retrofit.RestAdapter.Builder builder50 = builder15.setLogLevel(logLevel48);
        // The following exception was thrown during execution in test generation
        try {
            restAdapter10.setLogLevel(logLevel48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log level may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(server32);
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertNull(requestInterceptor34);
        org.junit.Assert.assertNotNull(request36);
        org.junit.Assert.assertNotNull(gsonConverter37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "http://example.com/" + "'", str38, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "http://example.com/" + "'", str39, "http://example.com/");
        org.junit.Assert.assertNull(errorHandler41);
        org.junit.Assert.assertNull(executor42);
        org.junit.Assert.assertNull(server44);
        org.junit.Assert.assertNull(log47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1148");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.Server server2 = builder0.server;
        retrofit.RestAdapter.Log log3 = builder0.log;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor6 = builder5.getcallbackExecutor();
        retrofit.Server server7 = builder5.server;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider9 = null;
        builder8.setclientProvider(provider9);
        retrofit.Server server12 = new retrofit.Server("Retrofit-");
        java.lang.String str13 = server12.name;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.Server server23 = builder22.server;
        java.util.concurrent.Executor executor24 = null;
        builder22.httpExecutor = executor24;
        java.util.concurrent.Executor executor26 = builder22.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.FULL;
        builder22.logLevel = logLevel27;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server12, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel27);
        retrofit.RestAdapter.Builder builder30 = builder8.setLog(log21);
        retrofit.RestAdapter.Builder builder31 = builder5.setLog(log21);
        java.util.concurrent.Executor executor32 = builder31.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.Server server34 = builder33.server;
        java.util.concurrent.Executor executor35 = null;
        builder33.httpExecutor = executor35;
        java.util.concurrent.Executor executor37 = null;
        builder33.callbackExecutor = executor37;
        java.util.concurrent.Executor executor39 = null;
        builder33.callbackExecutor = executor39;
        builder33.ensureSaneDefaults();
        retrofit.client.Client.Provider provider42 = builder33.clientProvider;
        retrofit.RestAdapter.Builder builder43 = builder31.setClient(provider42);
        java.util.concurrent.Executor executor44 = null;
        builder31.sethttpExecutor(executor44);
        retrofit.client.Client.Provider provider46 = builder31.clientProvider;
        builder0.clientProvider = provider46;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertNull(log3);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(server7);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "default" + "'", str13, "default");
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertNull(server23);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(server34);
        org.junit.Assert.assertNotNull(provider42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(provider46);
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1149");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter10.new RestHandler();
        retrofit.converter.Converter converter13 = restAdapter10.converter;
        retrofit.RestAdapter.Log log14 = restAdapter10.log;
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter10.requestInterceptor;
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertNull(log14);
        org.junit.Assert.assertNull(requestInterceptor15);
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1150");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        java.util.concurrent.Executor executor13 = restAdapter10.gethttpExecutor();
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter10.new RestHandler();
        retrofit.Server server15 = null;
        retrofit.client.Client.Provider provider16 = null;
        java.util.concurrent.Executor executor17 = null;
        java.util.concurrent.Executor executor18 = null;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        retrofit.converter.Converter converter20 = null;
        retrofit.Profiler profiler21 = null;
        retrofit.ErrorHandler errorHandler22 = null;
        retrofit.RestAdapter.Log log23 = null;
        retrofit.RestAdapter.LogLevel logLevel24 = null;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter(server15, provider16, executor17, executor18, requestInterceptor19, converter20, profiler21, errorHandler22, log23, logLevel24);
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request27 = serializedObjectSupporter26.deserializeObjectRequest6();
        restAdapter25.serializedObjectSupporter = serializedObjectSupporter26;
        retrofit.converter.GsonConverter gsonConverter29 = serializedObjectSupporter26.deserializeObjectConverter7();
        java.lang.String str30 = serializedObjectSupporter26.deserializeObjectString1();
        retrofit.Server server31 = serializedObjectSupporter26.deserializeObjectServer1();
        retrofit.client.Request request32 = serializedObjectSupporter26.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter26.deserializeObjectConverter1();
        java.lang.String str34 = serializedObjectSupporter26.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter35 = serializedObjectSupporter26.deserializeObjectConverter2();
        java.lang.String str36 = serializedObjectSupporter26.deserializeObjectString5();
        restHandler14.serializedObjectSupporter = serializedObjectSupporter26;
        java.lang.Class<?> wildcardClass38 = serializedObjectSupporter26.getClass();
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNotNull(request27);
        org.junit.Assert.assertNotNull(gsonConverter29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Retrofit-" + "'", str30, "Retrofit-");
        org.junit.Assert.assertNotNull(server31);
        org.junit.Assert.assertNotNull(request32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Retrofit-Idle" + "'", str34, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "POST" + "'", str36, "POST");
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1151");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter10.new RestHandler();
        retrofit.converter.Converter converter14 = restAdapter10.getconverter();
        retrofit.Server server15 = restAdapter10.getserver();
        retrofit.RestAdapter.Log log16 = restAdapter10.log;
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertNull(log16);
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1152");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.Profiler profiler2 = builder0.profiler;
        retrofit.client.Client.Provider provider3 = null;
        builder0.setclientProvider(provider3);
        java.util.concurrent.Executor executor5 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider6 = null;
        builder0.clientProvider = provider6;
        retrofit.RestAdapter.Log log8 = builder0.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter9 = builder0.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter10 = new retrofit.SerializedObjectSupporter();
        java.lang.String str11 = serializedObjectSupporter10.deserializeObjectString2();
        retrofit.client.Request request12 = serializedObjectSupporter10.deserializeObjectRequest7();
        retrofit.ErrorHandler errorHandler13 = serializedObjectSupporter10.deserializeObjectErrorHandler1();
        builder0.errorHandler = errorHandler13;
        java.util.concurrent.Executor executor15 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor17 = builder16.getcallbackExecutor();
        retrofit.Server server18 = builder16.server;
        retrofit.client.Client.Provider provider19 = builder16.clientProvider;
        retrofit.Server server22 = new retrofit.Server("Retrofit-Idle", "Retrofit-");
        java.lang.String str23 = server22.getapiUrl();
        java.lang.String str24 = server22.getDEFAULT_NAME();
        retrofit.RestAdapter.Builder builder25 = builder16.setServer(server22);
        retrofit.Server server27 = new retrofit.Server("hi!");
        java.lang.String str28 = server27.name;
        retrofit.RestAdapter.Builder builder29 = builder25.setServer(server27);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor31 = builder30.getcallbackExecutor();
        retrofit.ErrorHandler errorHandler32 = builder30.errorHandler;
        java.util.concurrent.Executor executor33 = null;
        builder30.setcallbackExecutor(executor33);
        builder30.ensureSaneDefaults();
        java.util.concurrent.Executor executor36 = builder30.gethttpExecutor();
        java.util.concurrent.Executor executor37 = builder30.httpExecutor;
        builder29.sethttpExecutor(executor37);
        builder0.setcallbackExecutor(executor37);
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(log8);
        org.junit.Assert.assertNull(serializedObjectSupporter9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-Idle" + "'", str11, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(errorHandler13);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(server18);
        org.junit.Assert.assertNull(provider19);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Retrofit-Idle" + "'", str23, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "default" + "'", str24, "default");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "default" + "'", str28, "default");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNull(errorHandler32);
        org.junit.Assert.assertNotNull(executor36);
        org.junit.Assert.assertNotNull(executor37);
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1153");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.Server server2 = builder0.server;
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.Server server6 = new retrofit.Server("Retrofit-Idle", "Retrofit-");
        java.lang.String str7 = server6.getapiUrl();
        java.lang.String str8 = server6.getDEFAULT_NAME();
        retrofit.RestAdapter.Builder builder9 = builder0.setServer(server6);
        retrofit.SerializedObjectSupporter serializedObjectSupporter10 = new retrofit.SerializedObjectSupporter();
        java.lang.String str11 = serializedObjectSupporter10.deserializeObjectString2();
        retrofit.client.Request request12 = serializedObjectSupporter10.deserializeObjectRequest7();
        java.lang.String str13 = serializedObjectSupporter10.deserializeObjectString5();
        retrofit.Server server14 = serializedObjectSupporter10.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder15 = builder9.setServer(server14);
        retrofit.Server server17 = new retrofit.Server("Retrofit-");
        java.lang.String str18 = server17.name;
        retrofit.client.Client.Provider provider19 = null;
        java.util.concurrent.Executor executor20 = null;
        java.util.concurrent.Executor executor21 = null;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        retrofit.converter.Converter converter23 = null;
        retrofit.Profiler profiler24 = null;
        retrofit.ErrorHandler errorHandler25 = null;
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.Server server28 = builder27.server;
        java.util.concurrent.Executor executor29 = null;
        builder27.httpExecutor = executor29;
        java.util.concurrent.Executor executor31 = builder27.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.FULL;
        builder27.logLevel = logLevel32;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server17, provider19, executor20, executor21, requestInterceptor22, converter23, profiler24, errorHandler25, log26, logLevel32);
        java.util.concurrent.Executor executor35 = restAdapter34.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter36 = restAdapter34.serializedObjectSupporter;
        retrofit.RequestInterceptor requestInterceptor37 = restAdapter34.requestInterceptor;
        java.util.concurrent.Executor executor38 = restAdapter34.httpExecutor;
        retrofit.RestAdapter.Log log39 = restAdapter34.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter40 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request41 = serializedObjectSupporter40.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter42 = serializedObjectSupporter40.deserializeObjectConverter1();
        retrofit.client.Request request43 = serializedObjectSupporter40.deserializeObjectRequest5();
        retrofit.mime.TypedOutput typedOutput44 = request43.getBody();
        retrofit.client.Request request45 = restAdapter34.logAndReplaceRequest(request43);
        retrofit.Server server46 = null;
        retrofit.client.Client.Provider provider47 = null;
        java.util.concurrent.Executor executor48 = null;
        java.util.concurrent.Executor executor49 = null;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        retrofit.converter.Converter converter51 = null;
        retrofit.Profiler profiler52 = null;
        retrofit.ErrorHandler errorHandler53 = null;
        retrofit.RestAdapter.Log log54 = null;
        retrofit.RestAdapter.LogLevel logLevel55 = null;
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter(server46, provider47, executor48, executor49, requestInterceptor50, converter51, profiler52, errorHandler53, log54, logLevel55);
        retrofit.RestAdapter.RestHandler restHandler57 = restAdapter56.new RestHandler();
        retrofit.Server server58 = restAdapter56.server;
        retrofit.RestAdapter.LogLevel logLevel59 = restAdapter56.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler60 = restAdapter56.new RestHandler();
        retrofit.Server server61 = null;
        retrofit.client.Client.Provider provider62 = null;
        java.util.concurrent.Executor executor63 = null;
        java.util.concurrent.Executor executor64 = null;
        retrofit.RequestInterceptor requestInterceptor65 = null;
        retrofit.converter.Converter converter66 = null;
        retrofit.Profiler profiler67 = null;
        retrofit.ErrorHandler errorHandler68 = null;
        retrofit.RestAdapter.Log log69 = null;
        retrofit.RestAdapter.LogLevel logLevel70 = null;
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter(server61, provider62, executor63, executor64, requestInterceptor65, converter66, profiler67, errorHandler68, log69, logLevel70);
        retrofit.RestAdapter.RestHandler restHandler72 = restAdapter71.new RestHandler();
        retrofit.Server server73 = restAdapter71.server;
        retrofit.RestAdapter.LogLevel logLevel74 = restAdapter71.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor75 = restAdapter71.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter76 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request77 = serializedObjectSupporter76.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter78 = serializedObjectSupporter76.deserializeObjectConverter1();
        java.lang.String str79 = serializedObjectSupporter76.deserializeObjectString4();
        java.lang.String str80 = serializedObjectSupporter76.deserializeObjectString4();
        restAdapter71.serializedObjectSupporter = serializedObjectSupporter76;
        retrofit.client.Request request82 = serializedObjectSupporter76.deserializeObjectRequest1();
        retrofit.client.Request request83 = serializedObjectSupporter76.deserializeObjectRequest3();
        retrofit.converter.GsonConverter gsonConverter84 = serializedObjectSupporter76.deserializeObjectConverter5();
        restHandler60.serializedObjectSupporter = serializedObjectSupporter76;
        retrofit.client.Request request86 = serializedObjectSupporter76.deserializeObjectRequest1();
        retrofit.client.Request request87 = restAdapter34.logAndReplaceRequest(request86);
        retrofit.RestAdapter.Log log88 = restAdapter34.log;
        builder9.log = log88;
        retrofit.ErrorHandler errorHandler90 = builder9.errorHandler;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Retrofit-Idle" + "'", str7, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "default" + "'", str8, "default");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-Idle" + "'", str11, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "POST" + "'", str13, "POST");
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "default" + "'", str18, "default");
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNull(server28);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertNull(serializedObjectSupporter36);
        org.junit.Assert.assertNull(requestInterceptor37);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertNotNull(request41);
        org.junit.Assert.assertNotNull(gsonConverter42);
        org.junit.Assert.assertNotNull(request43);
        org.junit.Assert.assertNull(typedOutput44);
        org.junit.Assert.assertNotNull(request45);
        org.junit.Assert.assertNull(server58);
        org.junit.Assert.assertNull(logLevel59);
        org.junit.Assert.assertNull(server73);
        org.junit.Assert.assertNull(logLevel74);
        org.junit.Assert.assertNull(requestInterceptor75);
        org.junit.Assert.assertNotNull(request77);
        org.junit.Assert.assertNotNull(gsonConverter78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "http://example.com/" + "'", str79, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "http://example.com/" + "'", str80, "http://example.com/");
        org.junit.Assert.assertNotNull(request82);
        org.junit.Assert.assertNotNull(request83);
        org.junit.Assert.assertNotNull(gsonConverter84);
        org.junit.Assert.assertNotNull(request86);
        org.junit.Assert.assertNotNull(request87);
        org.junit.Assert.assertNotNull(log88);
        org.junit.Assert.assertNull(errorHandler90);
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1154");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        java.lang.String str2 = serializedObjectSupporter1.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter1.deserializeObjectConverter3();
        builder0.serializedObjectSupporter = serializedObjectSupporter1;
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.RestAdapter.Builder builder7 = builder0.setServer("http://example.com/");
        retrofit.Profiler profiler8 = builder7.profiler;
        java.util.concurrent.Executor executor9 = builder7.gethttpExecutor();
        retrofit.Server server10 = null;
        retrofit.client.Client.Provider provider11 = null;
        java.util.concurrent.Executor executor12 = null;
        java.util.concurrent.Executor executor13 = null;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        retrofit.converter.Converter converter15 = null;
        retrofit.Profiler profiler16 = null;
        retrofit.ErrorHandler errorHandler17 = null;
        retrofit.RestAdapter.Log log18 = null;
        retrofit.RestAdapter.LogLevel logLevel19 = null;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter(server10, provider11, executor12, executor13, requestInterceptor14, converter15, profiler16, errorHandler17, log18, logLevel19);
        retrofit.SerializedObjectSupporter serializedObjectSupporter21 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request22 = serializedObjectSupporter21.deserializeObjectRequest6();
        restAdapter20.serializedObjectSupporter = serializedObjectSupporter21;
        retrofit.converter.GsonConverter gsonConverter24 = serializedObjectSupporter21.deserializeObjectConverter7();
        java.lang.String str25 = serializedObjectSupporter21.deserializeObjectString1();
        retrofit.Server server26 = serializedObjectSupporter21.deserializeObjectServer1();
        retrofit.client.Request request27 = serializedObjectSupporter21.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter21.deserializeObjectConverter5();
        retrofit.RestAdapter.Builder builder29 = builder7.setConverter((retrofit.converter.Converter) gsonConverter28);
        retrofit.Server server30 = null;
        retrofit.client.Client.Provider provider31 = null;
        java.util.concurrent.Executor executor32 = null;
        java.util.concurrent.Executor executor33 = null;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        retrofit.converter.Converter converter35 = null;
        retrofit.Profiler profiler36 = null;
        retrofit.ErrorHandler errorHandler37 = null;
        retrofit.RestAdapter.Log log38 = null;
        retrofit.RestAdapter.LogLevel logLevel39 = null;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server30, provider31, executor32, executor33, requestInterceptor34, converter35, profiler36, errorHandler37, log38, logLevel39);
        retrofit.RestAdapter.RestHandler restHandler41 = restAdapter40.new RestHandler();
        retrofit.Server server42 = restAdapter40.server;
        retrofit.RestAdapter.LogLevel logLevel43 = restAdapter40.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor44 = restAdapter40.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter45 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request46 = serializedObjectSupporter45.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter47 = serializedObjectSupporter45.deserializeObjectConverter1();
        java.lang.String str48 = serializedObjectSupporter45.deserializeObjectString4();
        java.lang.String str49 = serializedObjectSupporter45.deserializeObjectString4();
        restAdapter40.serializedObjectSupporter = serializedObjectSupporter45;
        retrofit.client.Request request51 = serializedObjectSupporter45.deserializeObjectRequest4();
        builder29.serializedObjectSupporter = serializedObjectSupporter45;
        java.util.concurrent.Executor executor53 = builder29.httpExecutor;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Retrofit-Idle" + "'", str2, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(profiler8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNotNull(request22);
        org.junit.Assert.assertNotNull(gsonConverter24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Retrofit-" + "'", str25, "Retrofit-");
        org.junit.Assert.assertNotNull(server26);
        org.junit.Assert.assertNotNull(request27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(server42);
        org.junit.Assert.assertNull(logLevel43);
        org.junit.Assert.assertNull(requestInterceptor44);
        org.junit.Assert.assertNotNull(request46);
        org.junit.Assert.assertNotNull(gsonConverter47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "http://example.com/" + "'", str48, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "http://example.com/" + "'", str49, "http://example.com/");
        org.junit.Assert.assertNotNull(request51);
        org.junit.Assert.assertNull(executor53);
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1155");
        retrofit.Server server1 = new retrofit.Server("Retrofit-");
        java.lang.String str2 = server1.name;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.Server server12 = builder11.server;
        java.util.concurrent.Executor executor13 = null;
        builder11.httpExecutor = executor13;
        java.util.concurrent.Executor executor15 = builder11.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.FULL;
        builder11.logLevel = logLevel16;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter(server1, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log10, logLevel16);
        java.util.concurrent.Executor executor19 = restAdapter18.getcallbackExecutor();
        java.util.concurrent.Executor executor20 = restAdapter18.getcallbackExecutor();
        retrofit.converter.Converter converter21 = restAdapter18.getconverter();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "default" + "'", str2, "default");
        org.junit.Assert.assertNotNull(log10);
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(converter21);
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1156");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.Server server2 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter3 = builder0.serializedObjectSupporter;
        retrofit.converter.Converter converter4 = builder0.converter;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor6 = builder5.getcallbackExecutor();
        retrofit.Server server7 = builder5.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter8 = builder5.serializedObjectSupporter;
        retrofit.converter.Converter converter9 = builder5.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter10 = new retrofit.SerializedObjectSupporter();
        java.lang.String str11 = serializedObjectSupporter10.deserializeObjectString2();
        retrofit.client.Request request12 = serializedObjectSupporter10.deserializeObjectRequest7();
        java.lang.String str13 = serializedObjectSupporter10.deserializeObjectString5();
        retrofit.Server server14 = serializedObjectSupporter10.deserializeObjectServer1();
        builder5.serializedObjectSupporter = serializedObjectSupporter10;
        retrofit.ErrorHandler errorHandler16 = builder5.errorHandler;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        java.lang.String str19 = serializedObjectSupporter18.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter18.deserializeObjectConverter3();
        builder17.serializedObjectSupporter = serializedObjectSupporter18;
        retrofit.RestAdapter.Log log22 = builder17.log;
        retrofit.RestAdapter.Builder builder24 = builder17.setServer("http://example.com/");
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = builder25.getcallbackExecutor();
        retrofit.Server server27 = builder25.server;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider29 = null;
        builder28.setclientProvider(provider29);
        retrofit.Server server32 = new retrofit.Server("Retrofit-");
        java.lang.String str33 = server32.name;
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.Server server43 = builder42.server;
        java.util.concurrent.Executor executor44 = null;
        builder42.httpExecutor = executor44;
        java.util.concurrent.Executor executor46 = builder42.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.FULL;
        builder42.logLevel = logLevel47;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server32, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log41, logLevel47);
        retrofit.RestAdapter.Builder builder50 = builder28.setLog(log41);
        retrofit.RestAdapter.Builder builder51 = builder25.setLog(log41);
        retrofit.Server server52 = null;
        retrofit.client.Client.Provider provider53 = null;
        java.util.concurrent.Executor executor54 = null;
        java.util.concurrent.Executor executor55 = null;
        retrofit.RequestInterceptor requestInterceptor56 = null;
        retrofit.converter.Converter converter57 = null;
        retrofit.Profiler profiler58 = null;
        retrofit.ErrorHandler errorHandler59 = null;
        retrofit.RestAdapter.Log log60 = null;
        retrofit.RestAdapter.LogLevel logLevel61 = null;
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter(server52, provider53, executor54, executor55, requestInterceptor56, converter57, profiler58, errorHandler59, log60, logLevel61);
        retrofit.SerializedObjectSupporter serializedObjectSupporter63 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request64 = serializedObjectSupporter63.deserializeObjectRequest6();
        restAdapter62.serializedObjectSupporter = serializedObjectSupporter63;
        retrofit.converter.GsonConverter gsonConverter66 = serializedObjectSupporter63.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter67 = serializedObjectSupporter63.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter68 = serializedObjectSupporter63.deserializeObjectConverter1();
        retrofit.client.Request request69 = serializedObjectSupporter63.deserializeObjectRequest5();
        retrofit.RequestInterceptor requestInterceptor70 = serializedObjectSupporter63.deserializeObjectRequestInterceptor1();
        builder51.requestInterceptor = requestInterceptor70;
        retrofit.RestAdapter.Builder builder72 = builder24.setRequestInterceptor(requestInterceptor70);
        builder5.requestInterceptor = requestInterceptor70;
        retrofit.RestAdapter.Builder builder74 = builder0.setRequestInterceptor(requestInterceptor70);
        retrofit.RestAdapter.Builder builder76 = builder0.setServer("http://example.com/");
        retrofit.SerializedObjectSupporter serializedObjectSupporter77 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request78 = serializedObjectSupporter77.deserializeObjectRequest6();
        java.lang.String str79 = serializedObjectSupporter77.deserializeObjectString4();
        java.lang.String str80 = serializedObjectSupporter77.deserializeObjectString4();
        retrofit.ErrorHandler errorHandler81 = serializedObjectSupporter77.deserializeObjectErrorHandler1();
        retrofit.converter.GsonConverter gsonConverter82 = serializedObjectSupporter77.deserializeObjectConverter2();
        retrofit.Server server83 = serializedObjectSupporter77.deserializeObjectServer1();
        java.lang.String str84 = server83.getName();
        java.lang.String str85 = server83.getDEFAULT_NAME();
        java.lang.String str86 = server83.apiUrl;
        retrofit.RestAdapter.Builder builder87 = builder76.setServer(server83);
        java.util.concurrent.Executor executor88 = builder87.gethttpExecutor();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertNull(serializedObjectSupporter3);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(server7);
        org.junit.Assert.assertNull(serializedObjectSupporter8);
        org.junit.Assert.assertNull(converter9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-Idle" + "'", str11, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "POST" + "'", str13, "POST");
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Retrofit-Idle" + "'", str19, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNull(log22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(server27);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "default" + "'", str33, "default");
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertNull(server43);
        org.junit.Assert.assertNull(executor46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(request64);
        org.junit.Assert.assertNotNull(gsonConverter66);
        org.junit.Assert.assertNotNull(gsonConverter67);
        org.junit.Assert.assertNotNull(gsonConverter68);
        org.junit.Assert.assertNotNull(request69);
        org.junit.Assert.assertNotNull(requestInterceptor70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(request78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "http://example.com/" + "'", str79, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "http://example.com/" + "'", str80, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler81);
        org.junit.Assert.assertNotNull(gsonConverter82);
        org.junit.Assert.assertNotNull(server83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "default" + "'", str84, "default");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "default" + "'", str85, "default");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "http://example.com" + "'", str86, "http://example.com");
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNull(executor88);
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1157");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString2();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest7();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter2();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Retrofit-Idle" + "'", str1, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertNotNull(gsonConverter3);
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1158");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request12 = serializedObjectSupporter11.deserializeObjectRequest6();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter11;
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter11.deserializeObjectConverter7();
        java.lang.String str15 = serializedObjectSupporter11.deserializeObjectString1();
        retrofit.Server server16 = serializedObjectSupporter11.deserializeObjectServer1();
        retrofit.client.Request request17 = serializedObjectSupporter11.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter18 = serializedObjectSupporter11.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter11.deserializeObjectConverter8();
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Retrofit-" + "'", str15, "Retrofit-");
        org.junit.Assert.assertNotNull(server16);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertNotNull(gsonConverter18);
        org.junit.Assert.assertNotNull(gsonConverter19);
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1159");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.Server server2 = builder0.server;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider4 = null;
        builder3.setclientProvider(provider4);
        retrofit.Server server7 = new retrofit.Server("Retrofit-");
        java.lang.String str8 = server7.name;
        retrofit.client.Client.Provider provider9 = null;
        java.util.concurrent.Executor executor10 = null;
        java.util.concurrent.Executor executor11 = null;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        retrofit.converter.Converter converter13 = null;
        retrofit.Profiler profiler14 = null;
        retrofit.ErrorHandler errorHandler15 = null;
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.Server server18 = builder17.server;
        java.util.concurrent.Executor executor19 = null;
        builder17.httpExecutor = executor19;
        java.util.concurrent.Executor executor21 = builder17.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.FULL;
        builder17.logLevel = logLevel22;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server7, provider9, executor10, executor11, requestInterceptor12, converter13, profiler14, errorHandler15, log16, logLevel22);
        retrofit.RestAdapter.Builder builder25 = builder3.setLog(log16);
        retrofit.RestAdapter.Builder builder26 = builder0.setLog(log16);
        retrofit.Server server27 = null;
        retrofit.client.Client.Provider provider28 = null;
        java.util.concurrent.Executor executor29 = null;
        java.util.concurrent.Executor executor30 = null;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        retrofit.converter.Converter converter32 = null;
        retrofit.Profiler profiler33 = null;
        retrofit.ErrorHandler errorHandler34 = null;
        retrofit.RestAdapter.Log log35 = null;
        retrofit.RestAdapter.LogLevel logLevel36 = null;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter(server27, provider28, executor29, executor30, requestInterceptor31, converter32, profiler33, errorHandler34, log35, logLevel36);
        retrofit.SerializedObjectSupporter serializedObjectSupporter38 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request39 = serializedObjectSupporter38.deserializeObjectRequest6();
        restAdapter37.serializedObjectSupporter = serializedObjectSupporter38;
        retrofit.converter.GsonConverter gsonConverter41 = serializedObjectSupporter38.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter42 = serializedObjectSupporter38.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter43 = serializedObjectSupporter38.deserializeObjectConverter1();
        retrofit.client.Request request44 = serializedObjectSupporter38.deserializeObjectRequest5();
        retrofit.RequestInterceptor requestInterceptor45 = serializedObjectSupporter38.deserializeObjectRequestInterceptor1();
        builder26.requestInterceptor = requestInterceptor45;
        retrofit.converter.Converter converter47 = builder26.converter;
        java.util.concurrent.Executor executor48 = builder26.callbackExecutor;
        retrofit.Server server50 = new retrofit.Server("http://example.com/");
        java.lang.String str51 = server50.apiUrl;
        java.lang.String str52 = server50.getapiUrl();
        retrofit.RestAdapter.Builder builder53 = builder26.setServer(server50);
        retrofit.client.Client client54 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder55 = builder53.setClient(client54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "default" + "'", str8, "default");
        org.junit.Assert.assertNotNull(log16);
        org.junit.Assert.assertNull(server18);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(request39);
        org.junit.Assert.assertNotNull(gsonConverter41);
        org.junit.Assert.assertNotNull(gsonConverter42);
        org.junit.Assert.assertNotNull(gsonConverter43);
        org.junit.Assert.assertNotNull(request44);
        org.junit.Assert.assertNotNull(requestInterceptor45);
        org.junit.Assert.assertNull(converter47);
        org.junit.Assert.assertNull(executor48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "http://example.com/" + "'", str51, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "http://example.com/" + "'", str52, "http://example.com/");
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1160");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request16 = serializedObjectSupporter15.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter15.deserializeObjectConverter1();
        java.lang.String str18 = serializedObjectSupporter15.deserializeObjectString4();
        java.lang.String str19 = serializedObjectSupporter15.deserializeObjectString4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter15;
        retrofit.converter.GsonConverter gsonConverter21 = serializedObjectSupporter15.deserializeObjectConverter3();
        retrofit.client.Request request22 = serializedObjectSupporter15.deserializeObjectRequest2();
        java.util.List<retrofit.client.Header> headerList23 = request22.headers;
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter21);
        org.junit.Assert.assertNotNull(request22);
        org.junit.Assert.assertNotNull(headerList23);
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1161");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = null;
        builder0.setclientProvider(provider1);
        retrofit.Server server4 = new retrofit.Server("Retrofit-");
        java.lang.String str5 = server4.name;
        retrofit.client.Client.Provider provider6 = null;
        java.util.concurrent.Executor executor7 = null;
        java.util.concurrent.Executor executor8 = null;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        retrofit.converter.Converter converter10 = null;
        retrofit.Profiler profiler11 = null;
        retrofit.ErrorHandler errorHandler12 = null;
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.Server server15 = builder14.server;
        java.util.concurrent.Executor executor16 = null;
        builder14.httpExecutor = executor16;
        java.util.concurrent.Executor executor18 = builder14.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.FULL;
        builder14.logLevel = logLevel19;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter(server4, provider6, executor7, executor8, requestInterceptor9, converter10, profiler11, errorHandler12, log13, logLevel19);
        retrofit.RestAdapter.Builder builder22 = builder0.setLog(log13);
        java.util.concurrent.Executor executor23 = builder22.httpExecutor;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "default" + "'", str5, "default");
        org.junit.Assert.assertNotNull(log13);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(executor23);
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1162");
        retrofit.Server server1 = new retrofit.Server("Retrofit-");
        java.lang.String str2 = server1.name;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.Server server12 = builder11.server;
        java.util.concurrent.Executor executor13 = null;
        builder11.httpExecutor = executor13;
        java.util.concurrent.Executor executor15 = builder11.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.FULL;
        builder11.logLevel = logLevel16;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter(server1, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log10, logLevel16);
        java.util.concurrent.Executor executor19 = restAdapter18.getcallbackExecutor();
        int int20 = restAdapter18.getLOG_CHUNK_SIZE();
        java.util.List<retrofit.client.Header> headerList23 = null;
        retrofit.mime.TypedOutput typedOutput24 = null;
        retrofit.client.Request request25 = new retrofit.client.Request("", "", headerList23, typedOutput24);
        retrofit.mime.TypedOutput typedOutput26 = request25.getBody();
        java.lang.String str27 = request25.url;
        retrofit.mime.TypedOutput typedOutput28 = request25.getBody();
        java.lang.String str29 = request25.getUrl();
        retrofit.client.Request request30 = restAdapter18.logAndReplaceRequest(request25);
        java.lang.String str31 = restAdapter18.getIDLE_THREAD_NAME();
        retrofit.Server server32 = restAdapter18.server;
        int int33 = restAdapter18.getLOG_CHUNK_SIZE();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "default" + "'", str2, "default");
        org.junit.Assert.assertNotNull(log10);
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4000 + "'", int20 == 4000);
        org.junit.Assert.assertNull(typedOutput26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNull(typedOutput28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(request30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Retrofit-Idle" + "'", str31, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(server32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4000 + "'", int33 == 4000);
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1163");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest3();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest8();
        java.lang.String str6 = request5.getUrl();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://example.com/" + "'", str6, "http://example.com/");
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1164");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter10.new RestHandler();
        retrofit.converter.Converter converter13 = restAdapter10.converter;
        retrofit.RestAdapter.Log log14 = restAdapter10.log;
        retrofit.RestAdapter.LogLevel logLevel15 = restAdapter10.logLevel;
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter10.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = restAdapter10.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        java.lang.String str19 = serializedObjectSupporter18.deserializeObjectString2();
        java.lang.String str20 = serializedObjectSupporter18.deserializeObjectString2();
        retrofit.client.Request request21 = serializedObjectSupporter18.deserializeObjectRequest6();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request22 = restAdapter10.logAndReplaceRequest(request21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertNull(log14);
        org.junit.Assert.assertNull(logLevel15);
        org.junit.Assert.assertNull(serializedObjectSupporter17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Retrofit-Idle" + "'", str19, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Retrofit-Idle" + "'", str20, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(request21);
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1165");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel14 = null;
        restAdapter10.logLevel = logLevel14;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter10.logLevel = logLevel16;
        retrofit.client.Client.Provider provider18 = restAdapter10.clientProvider;
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.Server server21 = builder20.server;
        retrofit.Profiler profiler22 = builder20.profiler;
        retrofit.client.Client.Provider provider23 = null;
        builder20.setclientProvider(provider23);
        java.util.concurrent.Executor executor25 = builder20.getcallbackExecutor();
        retrofit.client.Client.Provider provider26 = null;
        builder20.clientProvider = provider26;
        retrofit.RestAdapter.Log log28 = builder20.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = builder20.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = new retrofit.SerializedObjectSupporter();
        java.lang.String str31 = serializedObjectSupporter30.deserializeObjectString2();
        retrofit.client.Request request32 = serializedObjectSupporter30.deserializeObjectRequest7();
        retrofit.ErrorHandler errorHandler33 = serializedObjectSupporter30.deserializeObjectErrorHandler1();
        builder20.errorHandler = errorHandler33;
        retrofit.RestAdapter.Log log35 = builder20.log;
        retrofit.RestAdapter.Builder builder37 = builder20.setServer("default");
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter39 = new retrofit.SerializedObjectSupporter();
        java.lang.String str40 = serializedObjectSupporter39.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter41 = serializedObjectSupporter39.deserializeObjectConverter3();
        builder38.serializedObjectSupporter = serializedObjectSupporter39;
        java.util.concurrent.Executor executor43 = null;
        builder38.callbackExecutor = executor43;
        retrofit.SerializedObjectSupporter serializedObjectSupporter45 = builder38.serializedObjectSupporter;
        java.lang.String str46 = serializedObjectSupporter45.deserializeObjectString1();
        retrofit.converter.GsonConverter gsonConverter47 = serializedObjectSupporter45.deserializeObjectConverter1();
        retrofit.RestAdapter.Builder builder48 = builder37.setConverter((retrofit.converter.Converter) gsonConverter47);
        java.lang.reflect.Method method49 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] {};
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj51 = restHandler19.invoke((java.lang.Object) builder48, method49, objArray50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(provider18);
        org.junit.Assert.assertNull(server21);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(log28);
        org.junit.Assert.assertNull(serializedObjectSupporter29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Retrofit-Idle" + "'", str31, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(request32);
        org.junit.Assert.assertNotNull(errorHandler33);
        org.junit.Assert.assertNull(log35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Retrofit-Idle" + "'", str40, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter41);
        org.junit.Assert.assertNotNull(serializedObjectSupporter45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Retrofit-" + "'", str46, "Retrofit-");
        org.junit.Assert.assertNotNull(gsonConverter47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1166");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter10.new RestHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter10.new RestHandler();
        retrofit.Server server15 = null;
        retrofit.client.Client.Provider provider16 = null;
        java.util.concurrent.Executor executor17 = null;
        java.util.concurrent.Executor executor18 = null;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        retrofit.converter.Converter converter20 = null;
        retrofit.Profiler profiler21 = null;
        retrofit.ErrorHandler errorHandler22 = null;
        retrofit.RestAdapter.Log log23 = null;
        retrofit.RestAdapter.LogLevel logLevel24 = null;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter(server15, provider16, executor17, executor18, requestInterceptor19, converter20, profiler21, errorHandler22, log23, logLevel24);
        retrofit.RestAdapter.RestHandler restHandler26 = restAdapter25.new RestHandler();
        retrofit.Server server27 = restAdapter25.server;
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter25.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor29 = restAdapter25.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request31 = serializedObjectSupporter30.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter32 = serializedObjectSupporter30.deserializeObjectConverter1();
        java.lang.String str33 = serializedObjectSupporter30.deserializeObjectString4();
        java.lang.String str34 = serializedObjectSupporter30.deserializeObjectString4();
        restAdapter25.serializedObjectSupporter = serializedObjectSupporter30;
        retrofit.client.Request request36 = serializedObjectSupporter30.deserializeObjectRequest1();
        retrofit.client.Request request37 = serializedObjectSupporter30.deserializeObjectRequest3();
        retrofit.client.Request request38 = serializedObjectSupporter30.deserializeObjectRequest7();
        retrofit.client.Request request39 = serializedObjectSupporter30.deserializeObjectRequest7();
        retrofit.converter.GsonConverter gsonConverter40 = serializedObjectSupporter30.deserializeObjectConverter6();
        java.lang.reflect.Method method41 = null;
        retrofit.Server server42 = null;
        retrofit.client.Client.Provider provider43 = null;
        java.util.concurrent.Executor executor44 = null;
        java.util.concurrent.Executor executor45 = null;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        retrofit.converter.Converter converter47 = null;
        retrofit.Profiler profiler48 = null;
        retrofit.ErrorHandler errorHandler49 = null;
        retrofit.RestAdapter.Log log50 = null;
        retrofit.RestAdapter.LogLevel logLevel51 = null;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter(server42, provider43, executor44, executor45, requestInterceptor46, converter47, profiler48, errorHandler49, log50, logLevel51);
        retrofit.SerializedObjectSupporter serializedObjectSupporter53 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request54 = serializedObjectSupporter53.deserializeObjectRequest6();
        restAdapter52.serializedObjectSupporter = serializedObjectSupporter53;
        retrofit.RequestInterceptor requestInterceptor56 = serializedObjectSupporter53.deserializeObjectRequestInterceptor1();
        java.lang.String str57 = serializedObjectSupporter53.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter58 = serializedObjectSupporter53.deserializeObjectConverter6();
        java.lang.Object[] objArray59 = new java.lang.Object[] { serializedObjectSupporter53 };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj60 = restHandler14.invoke((java.lang.Object) serializedObjectSupporter30, method41, objArray59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(server27);
        org.junit.Assert.assertNull(logLevel28);
        org.junit.Assert.assertNull(requestInterceptor29);
        org.junit.Assert.assertNotNull(request31);
        org.junit.Assert.assertNotNull(gsonConverter32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "http://example.com/" + "'", str33, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "http://example.com/" + "'", str34, "http://example.com/");
        org.junit.Assert.assertNotNull(request36);
        org.junit.Assert.assertNotNull(request37);
        org.junit.Assert.assertNotNull(request38);
        org.junit.Assert.assertNotNull(request39);
        org.junit.Assert.assertNotNull(gsonConverter40);
        org.junit.Assert.assertNotNull(request54);
        org.junit.Assert.assertNotNull(requestInterceptor56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Retrofit-Idle" + "'", str57, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter58);
        org.junit.Assert.assertNotNull(objArray59);
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1167");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request12 = serializedObjectSupporter11.deserializeObjectRequest6();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter11;
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter11.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter15 = serializedObjectSupporter11.deserializeObjectConverter7();
        retrofit.client.Request request16 = serializedObjectSupporter11.deserializeObjectRequest6();
        retrofit.client.Request request17 = serializedObjectSupporter11.deserializeObjectRequest3();
        retrofit.converter.GsonConverter gsonConverter18 = serializedObjectSupporter11.deserializeObjectConverter5();
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(gsonConverter15);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertNotNull(gsonConverter18);
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1168");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request12 = serializedObjectSupporter11.deserializeObjectRequest6();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter11;
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter11.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter15 = serializedObjectSupporter11.deserializeObjectConverter7();
        java.lang.String str16 = serializedObjectSupporter11.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter11.deserializeObjectConverter1();
        retrofit.converter.GsonConverter gsonConverter18 = serializedObjectSupporter11.deserializeObjectConverter2();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter19 = serializedObjectSupporter11.deserializeObjectLogLevel2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(gsonConverter15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Retrofit-Idle" + "'", str16, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertNotNull(gsonConverter18);
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1169");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.Server server2 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter3 = builder0.serializedObjectSupporter;
        retrofit.converter.Converter converter4 = builder0.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter5 = new retrofit.SerializedObjectSupporter();
        java.lang.String str6 = serializedObjectSupporter5.deserializeObjectString2();
        retrofit.client.Request request7 = serializedObjectSupporter5.deserializeObjectRequest7();
        java.lang.String str8 = serializedObjectSupporter5.deserializeObjectString5();
        retrofit.Server server9 = serializedObjectSupporter5.deserializeObjectServer1();
        builder0.serializedObjectSupporter = serializedObjectSupporter5;
        retrofit.converter.GsonConverter gsonConverter11 = serializedObjectSupporter5.deserializeObjectConverter7();
        java.lang.String str12 = serializedObjectSupporter5.deserializeObjectString2();
        retrofit.client.Request request13 = serializedObjectSupporter5.deserializeObjectRequest6();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertNull(serializedObjectSupporter3);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Retrofit-Idle" + "'", str6, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "POST" + "'", str8, "POST");
        org.junit.Assert.assertNotNull(server9);
        org.junit.Assert.assertNotNull(gsonConverter11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(request13);
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1170");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel14 = null;
        restAdapter10.logLevel = logLevel14;
        java.lang.String str16 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.Server server17 = restAdapter10.server;
        retrofit.ErrorHandler errorHandler18 = restAdapter10.errorHandler;
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Retrofit-Idle" + "'", str16, "Retrofit-Idle");
        org.junit.Assert.assertNull(server17);
        org.junit.Assert.assertNull(errorHandler18);
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1171");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor2 = null;
        builder0.requestInterceptor = requestInterceptor2;
        java.util.concurrent.Executor executor4 = null;
        builder0.setcallbackExecutor(executor4);
        retrofit.ErrorHandler errorHandler6 = builder0.errorHandler;
        java.util.concurrent.Executor executor7 = null;
        builder0.callbackExecutor = executor7;
        retrofit.Profiler profiler9 = null;
        builder0.profiler = profiler9;
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Log log19 = null;
        retrofit.RestAdapter.LogLevel logLevel20 = null;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log19, logLevel20);
        retrofit.SerializedObjectSupporter serializedObjectSupporter22 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request23 = serializedObjectSupporter22.deserializeObjectRequest6();
        restAdapter21.serializedObjectSupporter = serializedObjectSupporter22;
        retrofit.converter.GsonConverter gsonConverter25 = serializedObjectSupporter22.deserializeObjectConverter7();
        java.lang.String str26 = serializedObjectSupporter22.deserializeObjectString1();
        retrofit.client.Request request27 = serializedObjectSupporter22.deserializeObjectRequest6();
        retrofit.Server server28 = serializedObjectSupporter22.deserializeObjectServer1();
        java.lang.String str29 = server28.getUrl();
        retrofit.RestAdapter.Builder builder30 = builder0.setServer(server28);
        retrofit.Server server31 = null;
        retrofit.client.Client.Provider provider32 = null;
        java.util.concurrent.Executor executor33 = null;
        java.util.concurrent.Executor executor34 = null;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        retrofit.converter.Converter converter36 = null;
        retrofit.Profiler profiler37 = null;
        retrofit.ErrorHandler errorHandler38 = null;
        retrofit.RestAdapter.Log log39 = null;
        retrofit.RestAdapter.LogLevel logLevel40 = null;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter(server31, provider32, executor33, executor34, requestInterceptor35, converter36, profiler37, errorHandler38, log39, logLevel40);
        retrofit.SerializedObjectSupporter serializedObjectSupporter42 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request43 = serializedObjectSupporter42.deserializeObjectRequest6();
        restAdapter41.serializedObjectSupporter = serializedObjectSupporter42;
        retrofit.RestAdapter.RestHandler restHandler45 = restAdapter41.new RestHandler();
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.Server server47 = builder46.server;
        retrofit.converter.Converter converter48 = null;
        builder46.converter = converter48;
        retrofit.ErrorHandler errorHandler50 = builder46.errorHandler;
        retrofit.Server server52 = new retrofit.Server("Retrofit-");
        java.lang.String str53 = server52.name;
        retrofit.client.Client.Provider provider54 = null;
        java.util.concurrent.Executor executor55 = null;
        java.util.concurrent.Executor executor56 = null;
        retrofit.RequestInterceptor requestInterceptor57 = null;
        retrofit.converter.Converter converter58 = null;
        retrofit.Profiler profiler59 = null;
        retrofit.ErrorHandler errorHandler60 = null;
        retrofit.RestAdapter.Log log61 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.Server server63 = builder62.server;
        java.util.concurrent.Executor executor64 = null;
        builder62.httpExecutor = executor64;
        java.util.concurrent.Executor executor66 = builder62.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel67 = retrofit.RestAdapter.LogLevel.FULL;
        builder62.logLevel = logLevel67;
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter(server52, provider54, executor55, executor56, requestInterceptor57, converter58, profiler59, errorHandler60, log61, logLevel67);
        retrofit.RestAdapter.LogLevel logLevel70 = restAdapter69.getLogLevel();
        retrofit.RestAdapter.Builder builder71 = builder46.setLogLevel(logLevel70);
        restAdapter41.logLevel = logLevel70;
        retrofit.RestAdapter.Builder builder73 = builder0.setLogLevel(logLevel70);
        retrofit.RestAdapter.Builder builder75 = builder73.setServer("http://example.com/");
        retrofit.converter.Converter converter76 = builder73.converter;
        retrofit.client.Client.Provider provider77 = builder73.getclientProvider();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertNotNull(gsonConverter25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Retrofit-" + "'", str26, "Retrofit-");
        org.junit.Assert.assertNotNull(request27);
        org.junit.Assert.assertNotNull(server28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "http://example.com" + "'", str29, "http://example.com");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(request43);
        org.junit.Assert.assertNull(server47);
        org.junit.Assert.assertNull(errorHandler50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "default" + "'", str53, "default");
        org.junit.Assert.assertNotNull(log61);
        org.junit.Assert.assertNull(server63);
        org.junit.Assert.assertNull(executor66);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNull(converter76);
        org.junit.Assert.assertNull(provider77);
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1172");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.requestInterceptor;
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter10.new RestHandler();
        retrofit.ErrorHandler errorHandler16 = restAdapter10.geterrorHandler();
        retrofit.client.Client.Provider provider17 = restAdapter10.getclientProvider();
        java.util.concurrent.Executor executor18 = restAdapter10.getcallbackExecutor();
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNull(provider17);
        org.junit.Assert.assertNull(executor18);
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1173");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel14 = null;
        restAdapter10.logLevel = logLevel14;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter10.logLevel = logLevel16;
        retrofit.client.Client.Provider provider18 = restAdapter10.clientProvider;
        retrofit.client.Client.Provider provider19 = restAdapter10.getclientProvider();
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Log log28 = null;
        retrofit.RestAdapter.LogLevel logLevel29 = null;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log28, logLevel29);
        retrofit.RestAdapter.RestHandler restHandler31 = restAdapter30.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler32 = restAdapter30.new RestHandler();
        java.util.concurrent.Executor executor33 = restAdapter30.getcallbackExecutor();
        retrofit.RestAdapter.RestHandler restHandler34 = restAdapter30.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter30.logLevel = logLevel35;
        restAdapter10.setLogLevel(logLevel35);
        retrofit.client.Client.Provider provider38 = restAdapter10.clientProvider;
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(provider18);
        org.junit.Assert.assertNull(provider19);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(provider38);
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1174");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        java.util.concurrent.Executor executor2 = null;
        builder0.httpExecutor = executor2;
        java.util.concurrent.Executor executor4 = null;
        builder0.callbackExecutor = executor4;
        java.util.concurrent.Executor executor6 = null;
        builder0.callbackExecutor = executor6;
        builder0.ensureSaneDefaults();
        retrofit.client.Client.Provider provider9 = builder0.clientProvider;
        retrofit.Profiler profiler10 = builder0.profiler;
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Log log19 = null;
        retrofit.RestAdapter.LogLevel logLevel20 = null;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log19, logLevel20);
        retrofit.SerializedObjectSupporter serializedObjectSupporter22 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request23 = serializedObjectSupporter22.deserializeObjectRequest6();
        restAdapter21.serializedObjectSupporter = serializedObjectSupporter22;
        retrofit.converter.GsonConverter gsonConverter25 = serializedObjectSupporter22.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter26 = serializedObjectSupporter22.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter27 = serializedObjectSupporter22.deserializeObjectConverter1();
        retrofit.client.Request request28 = serializedObjectSupporter22.deserializeObjectRequest5();
        retrofit.RequestInterceptor requestInterceptor29 = serializedObjectSupporter22.deserializeObjectRequestInterceptor1();
        builder0.requestInterceptor = requestInterceptor29;
        retrofit.Profiler profiler31 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder32 = builder0.setProfiler(profiler31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNotNull(provider9);
        org.junit.Assert.assertNull(profiler10);
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertNotNull(gsonConverter25);
        org.junit.Assert.assertNotNull(gsonConverter26);
        org.junit.Assert.assertNotNull(gsonConverter27);
        org.junit.Assert.assertNotNull(request28);
        org.junit.Assert.assertNotNull(requestInterceptor29);
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1175");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.Server server2 = builder0.server;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider4 = null;
        builder3.setclientProvider(provider4);
        retrofit.Server server7 = new retrofit.Server("Retrofit-");
        java.lang.String str8 = server7.name;
        retrofit.client.Client.Provider provider9 = null;
        java.util.concurrent.Executor executor10 = null;
        java.util.concurrent.Executor executor11 = null;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        retrofit.converter.Converter converter13 = null;
        retrofit.Profiler profiler14 = null;
        retrofit.ErrorHandler errorHandler15 = null;
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.Server server18 = builder17.server;
        java.util.concurrent.Executor executor19 = null;
        builder17.httpExecutor = executor19;
        java.util.concurrent.Executor executor21 = builder17.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.FULL;
        builder17.logLevel = logLevel22;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server7, provider9, executor10, executor11, requestInterceptor12, converter13, profiler14, errorHandler15, log16, logLevel22);
        retrofit.RestAdapter.Builder builder25 = builder3.setLog(log16);
        retrofit.RestAdapter.Builder builder26 = builder0.setLog(log16);
        retrofit.Server server28 = new retrofit.Server("Retrofit-");
        java.lang.String str29 = server28.name;
        builder0.server = server28;
        java.util.concurrent.Executor executor31 = null;
        builder0.callbackExecutor = executor31;
        retrofit.Server server33 = builder0.server;
        java.lang.String str34 = server33.getUrl();
        java.lang.String str35 = server33.name;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "default" + "'", str8, "default");
        org.junit.Assert.assertNotNull(log16);
        org.junit.Assert.assertNull(server18);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "default" + "'", str29, "default");
        org.junit.Assert.assertNotNull(server33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Retrofit-" + "'", str34, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "default" + "'", str35, "default");
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1176");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        java.lang.String str2 = serializedObjectSupporter1.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter1.deserializeObjectConverter3();
        builder0.serializedObjectSupporter = serializedObjectSupporter1;
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.RestAdapter.Builder builder7 = builder0.setServer("http://example.com/");
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = builder8.getcallbackExecutor();
        retrofit.Server server10 = builder8.server;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider12 = null;
        builder11.setclientProvider(provider12);
        retrofit.Server server15 = new retrofit.Server("Retrofit-");
        java.lang.String str16 = server15.name;
        retrofit.client.Client.Provider provider17 = null;
        java.util.concurrent.Executor executor18 = null;
        java.util.concurrent.Executor executor19 = null;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        retrofit.converter.Converter converter21 = null;
        retrofit.Profiler profiler22 = null;
        retrofit.ErrorHandler errorHandler23 = null;
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.Server server26 = builder25.server;
        java.util.concurrent.Executor executor27 = null;
        builder25.httpExecutor = executor27;
        java.util.concurrent.Executor executor29 = builder25.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.FULL;
        builder25.logLevel = logLevel30;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server15, provider17, executor18, executor19, requestInterceptor20, converter21, profiler22, errorHandler23, log24, logLevel30);
        retrofit.RestAdapter.Builder builder33 = builder11.setLog(log24);
        retrofit.RestAdapter.Builder builder34 = builder8.setLog(log24);
        retrofit.Server server35 = null;
        retrofit.client.Client.Provider provider36 = null;
        java.util.concurrent.Executor executor37 = null;
        java.util.concurrent.Executor executor38 = null;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        retrofit.converter.Converter converter40 = null;
        retrofit.Profiler profiler41 = null;
        retrofit.ErrorHandler errorHandler42 = null;
        retrofit.RestAdapter.Log log43 = null;
        retrofit.RestAdapter.LogLevel logLevel44 = null;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter(server35, provider36, executor37, executor38, requestInterceptor39, converter40, profiler41, errorHandler42, log43, logLevel44);
        retrofit.SerializedObjectSupporter serializedObjectSupporter46 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request47 = serializedObjectSupporter46.deserializeObjectRequest6();
        restAdapter45.serializedObjectSupporter = serializedObjectSupporter46;
        retrofit.converter.GsonConverter gsonConverter49 = serializedObjectSupporter46.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter50 = serializedObjectSupporter46.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter51 = serializedObjectSupporter46.deserializeObjectConverter1();
        retrofit.client.Request request52 = serializedObjectSupporter46.deserializeObjectRequest5();
        retrofit.RequestInterceptor requestInterceptor53 = serializedObjectSupporter46.deserializeObjectRequestInterceptor1();
        builder34.requestInterceptor = requestInterceptor53;
        retrofit.RestAdapter.Builder builder55 = builder7.setRequestInterceptor(requestInterceptor53);
        retrofit.RestAdapter.LogLevel logLevel56 = builder55.logLevel;
        retrofit.Server server57 = null;
        retrofit.client.Client.Provider provider58 = null;
        java.util.concurrent.Executor executor59 = null;
        java.util.concurrent.Executor executor60 = null;
        retrofit.RequestInterceptor requestInterceptor61 = null;
        retrofit.converter.Converter converter62 = null;
        retrofit.Profiler profiler63 = null;
        retrofit.ErrorHandler errorHandler64 = null;
        retrofit.RestAdapter.Log log65 = null;
        retrofit.RestAdapter.LogLevel logLevel66 = null;
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter(server57, provider58, executor59, executor60, requestInterceptor61, converter62, profiler63, errorHandler64, log65, logLevel66);
        retrofit.SerializedObjectSupporter serializedObjectSupporter68 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request69 = serializedObjectSupporter68.deserializeObjectRequest6();
        restAdapter67.serializedObjectSupporter = serializedObjectSupporter68;
        retrofit.converter.GsonConverter gsonConverter71 = serializedObjectSupporter68.deserializeObjectConverter7();
        retrofit.Server server72 = serializedObjectSupporter68.deserializeObjectServer1();
        retrofit.converter.GsonConverter gsonConverter73 = serializedObjectSupporter68.deserializeObjectConverter5();
        retrofit.Server server74 = serializedObjectSupporter68.deserializeObjectServer1();
        builder55.server = server74;
        retrofit.RestAdapter restAdapter76 = builder55.build();
        java.lang.String str77 = restAdapter76.getIDLE_THREAD_NAME();
        retrofit.converter.Converter converter78 = restAdapter76.getconverter();
        retrofit.Server server79 = restAdapter76.getserver();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Retrofit-Idle" + "'", str2, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "default" + "'", str16, "default");
        org.junit.Assert.assertNotNull(log24);
        org.junit.Assert.assertNull(server26);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(request47);
        org.junit.Assert.assertNotNull(gsonConverter49);
        org.junit.Assert.assertNotNull(gsonConverter50);
        org.junit.Assert.assertNotNull(gsonConverter51);
        org.junit.Assert.assertNotNull(request52);
        org.junit.Assert.assertNotNull(requestInterceptor53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(request69);
        org.junit.Assert.assertNotNull(gsonConverter71);
        org.junit.Assert.assertNotNull(server72);
        org.junit.Assert.assertNotNull(gsonConverter73);
        org.junit.Assert.assertNotNull(server74);
        org.junit.Assert.assertNotNull(restAdapter76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Retrofit-Idle" + "'", str77, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(converter78);
        org.junit.Assert.assertNotNull(server79);
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1177");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter10.new RestHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter10.new RestHandler();
        retrofit.Server server16 = restAdapter10.getserver();
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.Server server18 = builder17.server;
        retrofit.converter.Converter converter19 = null;
        builder17.converter = converter19;
        retrofit.RestAdapter.Log log21 = builder17.log;
        retrofit.RestAdapter.LogLevel logLevel22 = builder17.logLevel;
        boolean boolean23 = logLevel22.log();
        restAdapter10.logLevel = logLevel22;
        java.util.concurrent.Executor executor25 = restAdapter10.gethttpExecutor();
        retrofit.RestAdapter.RestHandler restHandler26 = restAdapter10.new RestHandler();
        java.util.concurrent.Executor executor27 = restAdapter10.callbackExecutor;
        retrofit.Profiler profiler28 = restAdapter10.getprofiler();
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertNull(server18);
        org.junit.Assert.assertNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(profiler28);
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1178");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        java.util.concurrent.Executor executor2 = null;
        builder0.httpExecutor = executor2;
        java.util.concurrent.Executor executor4 = builder0.httpExecutor;
        retrofit.Server server7 = new retrofit.Server("Retrofit-", "");
        java.lang.String str8 = server7.getUrl();
        builder0.server = server7;
        java.lang.String str10 = server7.getName();
        java.lang.String str11 = server7.getapiUrl();
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Retrofit-" + "'", str8, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1179");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        java.lang.String str2 = serializedObjectSupporter1.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter1.deserializeObjectConverter3();
        builder0.serializedObjectSupporter = serializedObjectSupporter1;
        java.util.concurrent.Executor executor5 = null;
        builder0.callbackExecutor = executor5;
        retrofit.SerializedObjectSupporter serializedObjectSupporter7 = builder0.serializedObjectSupporter;
        java.lang.String str8 = serializedObjectSupporter7.deserializeObjectString1();
        retrofit.mime.TypedString typedString9 = serializedObjectSupporter7.deserializeObjectTypedOutput2();
        retrofit.Server server10 = serializedObjectSupporter7.deserializeObjectServer1();
        java.lang.String str11 = serializedObjectSupporter7.deserializeObjectString4();
        retrofit.client.Request request12 = serializedObjectSupporter7.deserializeObjectRequest5();
        retrofit.client.Request request13 = serializedObjectSupporter7.deserializeObjectRequest3();
        java.util.List<retrofit.client.Header> headerList14 = request13.getHeaders();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Retrofit-Idle" + "'", str2, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(serializedObjectSupporter7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Retrofit-" + "'", str8, "Retrofit-");
        org.junit.Assert.assertNotNull(typedString9);
        org.junit.Assert.assertNotNull(server10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "http://example.com/" + "'", str11, "http://example.com/");
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(request13);
        org.junit.Assert.assertNotNull(headerList14);
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1180");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request12 = serializedObjectSupporter11.deserializeObjectRequest6();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter11;
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter11.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter15 = serializedObjectSupporter11.deserializeObjectConverter7();
        retrofit.client.Request request16 = serializedObjectSupporter11.deserializeObjectRequest8();
        retrofit.client.Request request17 = serializedObjectSupporter11.deserializeObjectRequest8();
        retrofit.Server server18 = serializedObjectSupporter11.deserializeObjectServer1();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter11.deserializeObjectConverter3();
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(gsonConverter15);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertNotNull(server18);
        org.junit.Assert.assertNotNull(gsonConverter19);
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1181");
        retrofit.Server server2 = new retrofit.Server("hi!", "");
        java.lang.String str3 = server2.getapiUrl();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1182");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request16 = serializedObjectSupporter15.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter15.deserializeObjectConverter1();
        java.lang.String str18 = serializedObjectSupporter15.deserializeObjectString4();
        java.lang.String str19 = serializedObjectSupporter15.deserializeObjectString4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter15;
        retrofit.ErrorHandler errorHandler21 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor22 = restAdapter10.httpExecutor;
        int int23 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter10.new RestHandler();
        java.util.concurrent.Executor executor26 = restAdapter10.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor27 = restAdapter10.requestInterceptor;
        retrofit.client.Client.Provider provider28 = restAdapter10.clientProvider;
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request30 = serializedObjectSupporter29.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter31 = serializedObjectSupporter29.deserializeObjectConverter1();
        java.lang.String str32 = serializedObjectSupporter29.deserializeObjectString4();
        java.lang.String str33 = serializedObjectSupporter29.deserializeObjectString1();
        retrofit.client.Request request34 = serializedObjectSupporter29.deserializeObjectRequest2();
        retrofit.RequestInterceptor requestInterceptor35 = serializedObjectSupporter29.deserializeObjectRequestInterceptor1();
        retrofit.mime.TypedString typedString36 = serializedObjectSupporter29.deserializeObjectTypedOutput2();
        retrofit.client.Request request37 = serializedObjectSupporter29.deserializeObjectRequest8();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request38 = restAdapter10.logAndReplaceRequest(request37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4000 + "'", int23 == 4000);
        org.junit.Assert.assertNull(logLevel24);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(requestInterceptor27);
        org.junit.Assert.assertNull(provider28);
        org.junit.Assert.assertNotNull(request30);
        org.junit.Assert.assertNotNull(gsonConverter31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "http://example.com/" + "'", str32, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Retrofit-" + "'", str33, "Retrofit-");
        org.junit.Assert.assertNotNull(request34);
        org.junit.Assert.assertNotNull(requestInterceptor35);
        org.junit.Assert.assertNotNull(typedString36);
        org.junit.Assert.assertNotNull(request37);
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1183");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request12 = serializedObjectSupporter11.deserializeObjectRequest6();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter11;
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter11.deserializeObjectConverter8();
        java.lang.String str15 = serializedObjectSupporter11.deserializeObjectString2();
        retrofit.client.Request request16 = serializedObjectSupporter11.deserializeObjectRequest5();
        java.lang.String str17 = request16.url;
        java.util.List<retrofit.client.Header> headerList18 = request16.getHeaders();
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Retrofit-Idle" + "'", str15, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "http://example.com/" + "'", str17, "http://example.com/");
        org.junit.Assert.assertNotNull(headerList18);
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1184");
        retrofit.Server server1 = new retrofit.Server("POST");
        retrofit.client.Client.Provider provider2 = null;
        java.util.concurrent.Executor executor3 = null;
        java.util.concurrent.Executor executor4 = null;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = null;
        retrofit.RestAdapter.LogLevel logLevel15 = null;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request18 = serializedObjectSupporter17.deserializeObjectRequest6();
        restAdapter16.serializedObjectSupporter = serializedObjectSupporter17;
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter17.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter21 = serializedObjectSupporter17.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter17.deserializeObjectConverter1();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request25 = serializedObjectSupporter24.deserializeObjectRequest6();
        java.lang.String str26 = serializedObjectSupporter24.deserializeObjectString4();
        java.lang.String str27 = serializedObjectSupporter24.deserializeObjectString5();
        retrofit.ErrorHandler errorHandler28 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor30 = builder29.getcallbackExecutor();
        retrofit.Server server31 = builder29.server;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider33 = null;
        builder32.setclientProvider(provider33);
        retrofit.Server server36 = new retrofit.Server("Retrofit-");
        java.lang.String str37 = server36.name;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.Server server47 = builder46.server;
        java.util.concurrent.Executor executor48 = null;
        builder46.httpExecutor = executor48;
        java.util.concurrent.Executor executor50 = builder46.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.FULL;
        builder46.logLevel = logLevel51;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server36, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log45, logLevel51);
        retrofit.RestAdapter.Builder builder54 = builder32.setLog(log45);
        retrofit.RestAdapter.Builder builder55 = builder29.setLog(log45);
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.Server server57 = builder56.server;
        retrofit.converter.Converter converter58 = null;
        builder56.converter = converter58;
        retrofit.RestAdapter.Log log60 = builder56.log;
        retrofit.RestAdapter.LogLevel logLevel61 = builder56.logLevel;
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter(server1, provider2, executor3, executor4, requestInterceptor5, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler28, log45, logLevel61);
        retrofit.SerializedObjectSupporter serializedObjectSupporter63 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request64 = serializedObjectSupporter63.deserializeObjectRequest6();
        java.lang.String str65 = serializedObjectSupporter63.deserializeObjectString4();
        java.lang.String str66 = serializedObjectSupporter63.deserializeObjectString4();
        retrofit.converter.GsonConverter gsonConverter67 = serializedObjectSupporter63.deserializeObjectConverter3();
        retrofit.ErrorHandler errorHandler68 = serializedObjectSupporter63.deserializeObjectErrorHandler1();
        retrofit.client.Request request69 = serializedObjectSupporter63.deserializeObjectRequest8();
        retrofit.client.Request request70 = restAdapter62.logAndReplaceRequest(request69);
        retrofit.mime.TypedOutput typedOutput71 = request69.getBody();
        org.junit.Assert.assertNotNull(request18);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNotNull(gsonConverter21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(request25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "http://example.com/" + "'", str26, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "POST" + "'", str27, "POST");
        org.junit.Assert.assertNotNull(errorHandler28);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNull(server31);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "default" + "'", str37, "default");
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNull(server47);
        org.junit.Assert.assertNull(executor50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(server57);
        org.junit.Assert.assertNull(log60);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(request64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "http://example.com/" + "'", str65, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "http://example.com/" + "'", str66, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter67);
        org.junit.Assert.assertNotNull(errorHandler68);
        org.junit.Assert.assertNotNull(request69);
        org.junit.Assert.assertNotNull(request70);
        org.junit.Assert.assertNull(typedOutput71);
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1185");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor2 = null;
        builder0.requestInterceptor = requestInterceptor2;
        java.util.concurrent.Executor executor4 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("default");
        retrofit.SerializedObjectSupporter serializedObjectSupporter7 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request8 = serializedObjectSupporter7.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter7.deserializeObjectConverter1();
        retrofit.RestAdapter.Builder builder10 = builder0.setConverter((retrofit.converter.Converter) gsonConverter9);
        retrofit.Server server13 = new retrofit.Server("", "POST");
        builder10.server = server13;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(request8);
        org.junit.Assert.assertNotNull(gsonConverter9);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1186");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        java.lang.String str2 = serializedObjectSupporter1.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter1.deserializeObjectConverter3();
        builder0.serializedObjectSupporter = serializedObjectSupporter1;
        java.util.concurrent.Executor executor5 = null;
        builder0.callbackExecutor = executor5;
        retrofit.SerializedObjectSupporter serializedObjectSupporter7 = builder0.serializedObjectSupporter;
        java.lang.String str8 = serializedObjectSupporter7.deserializeObjectString1();
        retrofit.mime.TypedString typedString9 = serializedObjectSupporter7.deserializeObjectTypedOutput2();
        retrofit.client.Request request10 = serializedObjectSupporter7.deserializeObjectRequest5();
        retrofit.client.Request request11 = serializedObjectSupporter7.deserializeObjectRequest6();
        retrofit.Server server12 = serializedObjectSupporter7.deserializeObjectServer1();
        retrofit.client.Request request13 = serializedObjectSupporter7.deserializeObjectRequest1();
        java.util.List<retrofit.client.Header> headerList14 = request13.headers;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Retrofit-Idle" + "'", str2, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(serializedObjectSupporter7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Retrofit-" + "'", str8, "Retrofit-");
        org.junit.Assert.assertNotNull(typedString9);
        org.junit.Assert.assertNotNull(request10);
        org.junit.Assert.assertNotNull(request11);
        org.junit.Assert.assertNotNull(server12);
        org.junit.Assert.assertNotNull(request13);
        org.junit.Assert.assertNotNull(headerList14);
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1187");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        java.lang.String str2 = serializedObjectSupporter1.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter1.deserializeObjectConverter3();
        builder0.serializedObjectSupporter = serializedObjectSupporter1;
        java.util.concurrent.Executor executor5 = null;
        builder0.callbackExecutor = executor5;
        retrofit.SerializedObjectSupporter serializedObjectSupporter7 = builder0.serializedObjectSupporter;
        java.util.concurrent.Executor executor8 = null;
        builder0.callbackExecutor = executor8;
        retrofit.ErrorHandler errorHandler10 = builder0.errorHandler;
        retrofit.RequestInterceptor requestInterceptor11 = builder0.requestInterceptor;
        retrofit.Server server12 = builder0.server;
        java.util.concurrent.Executor executor13 = builder0.getcallbackExecutor();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Retrofit-Idle" + "'", str2, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(serializedObjectSupporter7);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(executor13);
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1188");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.Server server2 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter3 = builder0.serializedObjectSupporter;
        retrofit.converter.Converter converter4 = builder0.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter5 = new retrofit.SerializedObjectSupporter();
        java.lang.String str6 = serializedObjectSupporter5.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter5.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter5.deserializeObjectConverter3();
        retrofit.RestAdapter.Builder builder9 = builder0.setConverter((retrofit.converter.Converter) gsonConverter8);
        retrofit.SerializedObjectSupporter serializedObjectSupporter10 = builder0.serializedObjectSupporter;
        retrofit.Profiler profiler11 = null;
        builder0.profiler = profiler11;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertNull(serializedObjectSupporter3);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Retrofit-Idle" + "'", str6, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(serializedObjectSupporter10);
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1189");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        java.lang.String str2 = serializedObjectSupporter1.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter1.deserializeObjectConverter3();
        builder0.serializedObjectSupporter = serializedObjectSupporter1;
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.RestAdapter.Builder builder7 = builder0.setServer("http://example.com/");
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = builder8.getcallbackExecutor();
        retrofit.Server server10 = builder8.server;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider12 = null;
        builder11.setclientProvider(provider12);
        retrofit.Server server15 = new retrofit.Server("Retrofit-");
        java.lang.String str16 = server15.name;
        retrofit.client.Client.Provider provider17 = null;
        java.util.concurrent.Executor executor18 = null;
        java.util.concurrent.Executor executor19 = null;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        retrofit.converter.Converter converter21 = null;
        retrofit.Profiler profiler22 = null;
        retrofit.ErrorHandler errorHandler23 = null;
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.Server server26 = builder25.server;
        java.util.concurrent.Executor executor27 = null;
        builder25.httpExecutor = executor27;
        java.util.concurrent.Executor executor29 = builder25.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.FULL;
        builder25.logLevel = logLevel30;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server15, provider17, executor18, executor19, requestInterceptor20, converter21, profiler22, errorHandler23, log24, logLevel30);
        retrofit.RestAdapter.Builder builder33 = builder11.setLog(log24);
        retrofit.RestAdapter.Builder builder34 = builder8.setLog(log24);
        retrofit.Server server35 = null;
        retrofit.client.Client.Provider provider36 = null;
        java.util.concurrent.Executor executor37 = null;
        java.util.concurrent.Executor executor38 = null;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        retrofit.converter.Converter converter40 = null;
        retrofit.Profiler profiler41 = null;
        retrofit.ErrorHandler errorHandler42 = null;
        retrofit.RestAdapter.Log log43 = null;
        retrofit.RestAdapter.LogLevel logLevel44 = null;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter(server35, provider36, executor37, executor38, requestInterceptor39, converter40, profiler41, errorHandler42, log43, logLevel44);
        retrofit.SerializedObjectSupporter serializedObjectSupporter46 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request47 = serializedObjectSupporter46.deserializeObjectRequest6();
        restAdapter45.serializedObjectSupporter = serializedObjectSupporter46;
        retrofit.converter.GsonConverter gsonConverter49 = serializedObjectSupporter46.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter50 = serializedObjectSupporter46.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter51 = serializedObjectSupporter46.deserializeObjectConverter1();
        retrofit.client.Request request52 = serializedObjectSupporter46.deserializeObjectRequest5();
        retrofit.RequestInterceptor requestInterceptor53 = serializedObjectSupporter46.deserializeObjectRequestInterceptor1();
        builder34.requestInterceptor = requestInterceptor53;
        retrofit.RestAdapter.Builder builder55 = builder7.setRequestInterceptor(requestInterceptor53);
        retrofit.RestAdapter.LogLevel logLevel56 = builder55.logLevel;
        retrofit.Server server57 = null;
        retrofit.client.Client.Provider provider58 = null;
        java.util.concurrent.Executor executor59 = null;
        java.util.concurrent.Executor executor60 = null;
        retrofit.RequestInterceptor requestInterceptor61 = null;
        retrofit.converter.Converter converter62 = null;
        retrofit.Profiler profiler63 = null;
        retrofit.ErrorHandler errorHandler64 = null;
        retrofit.RestAdapter.Log log65 = null;
        retrofit.RestAdapter.LogLevel logLevel66 = null;
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter(server57, provider58, executor59, executor60, requestInterceptor61, converter62, profiler63, errorHandler64, log65, logLevel66);
        retrofit.SerializedObjectSupporter serializedObjectSupporter68 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request69 = serializedObjectSupporter68.deserializeObjectRequest6();
        restAdapter67.serializedObjectSupporter = serializedObjectSupporter68;
        retrofit.converter.GsonConverter gsonConverter71 = serializedObjectSupporter68.deserializeObjectConverter7();
        retrofit.Server server72 = serializedObjectSupporter68.deserializeObjectServer1();
        retrofit.converter.GsonConverter gsonConverter73 = serializedObjectSupporter68.deserializeObjectConverter5();
        retrofit.Server server74 = serializedObjectSupporter68.deserializeObjectServer1();
        builder55.server = server74;
        retrofit.RestAdapter restAdapter76 = builder55.build();
        retrofit.RestAdapter.Builder builder77 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider78 = null;
        builder77.setclientProvider(provider78);
        retrofit.ErrorHandler errorHandler80 = builder77.errorHandler;
        retrofit.RestAdapter.Builder builder81 = new retrofit.RestAdapter.Builder();
        retrofit.Server server82 = builder81.server;
        retrofit.Profiler profiler83 = builder81.profiler;
        retrofit.client.Client.Provider provider84 = null;
        builder81.setclientProvider(provider84);
        java.util.concurrent.Executor executor86 = builder81.getcallbackExecutor();
        retrofit.client.Client.Provider provider87 = null;
        builder81.clientProvider = provider87;
        retrofit.RestAdapter.Log log89 = builder81.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter90 = builder81.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter91 = new retrofit.SerializedObjectSupporter();
        java.lang.String str92 = serializedObjectSupporter91.deserializeObjectString2();
        retrofit.client.Request request93 = serializedObjectSupporter91.deserializeObjectRequest7();
        retrofit.ErrorHandler errorHandler94 = serializedObjectSupporter91.deserializeObjectErrorHandler1();
        builder81.errorHandler = errorHandler94;
        builder77.errorHandler = errorHandler94;
        retrofit.RestAdapter.Builder builder97 = builder55.setErrorHandler(errorHandler94);
        retrofit.RestAdapter.Builder builder99 = builder55.setServer("hi!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Retrofit-Idle" + "'", str2, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "default" + "'", str16, "default");
        org.junit.Assert.assertNotNull(log24);
        org.junit.Assert.assertNull(server26);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(request47);
        org.junit.Assert.assertNotNull(gsonConverter49);
        org.junit.Assert.assertNotNull(gsonConverter50);
        org.junit.Assert.assertNotNull(gsonConverter51);
        org.junit.Assert.assertNotNull(request52);
        org.junit.Assert.assertNotNull(requestInterceptor53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(request69);
        org.junit.Assert.assertNotNull(gsonConverter71);
        org.junit.Assert.assertNotNull(server72);
        org.junit.Assert.assertNotNull(gsonConverter73);
        org.junit.Assert.assertNotNull(server74);
        org.junit.Assert.assertNotNull(restAdapter76);
        org.junit.Assert.assertNull(errorHandler80);
        org.junit.Assert.assertNull(server82);
        org.junit.Assert.assertNull(profiler83);
        org.junit.Assert.assertNull(executor86);
        org.junit.Assert.assertNull(log89);
        org.junit.Assert.assertNull(serializedObjectSupporter90);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "Retrofit-Idle" + "'", str92, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(request93);
        org.junit.Assert.assertNotNull(errorHandler94);
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertNotNull(builder99);
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1190");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request12 = serializedObjectSupporter11.deserializeObjectRequest6();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter11;
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter11.deserializeObjectConverter7();
        java.lang.String str15 = serializedObjectSupporter11.deserializeObjectString1();
        retrofit.Server server16 = serializedObjectSupporter11.deserializeObjectServer1();
        retrofit.Server server17 = serializedObjectSupporter11.deserializeObjectServer1();
        java.lang.String str18 = server17.getName();
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Retrofit-" + "'", str15, "Retrofit-");
        org.junit.Assert.assertNotNull(server16);
        org.junit.Assert.assertNotNull(server17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "default" + "'", str18, "default");
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1191");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        java.util.concurrent.Executor executor2 = null;
        builder0.httpExecutor = executor2;
        java.util.concurrent.Executor executor4 = builder0.httpExecutor;
        retrofit.Server server7 = new retrofit.Server("Retrofit-", "");
        java.lang.String str8 = server7.getUrl();
        builder0.server = server7;
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.BASIC;
        builder0.logLevel = logLevel10;
        java.util.concurrent.Executor executor12 = builder0.gethttpExecutor();
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Retrofit-" + "'", str8, "Retrofit-");
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor12);
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1192");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel14 = null;
        restAdapter10.logLevel = logLevel14;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter10.logLevel = logLevel16;
        java.util.concurrent.Executor executor18 = restAdapter10.httpExecutor;
        retrofit.Profiler profiler19 = restAdapter10.profiler;
        retrofit.Server server20 = restAdapter10.getserver();
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(profiler19);
        org.junit.Assert.assertNull(server20);
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1193");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request12 = serializedObjectSupporter11.deserializeObjectRequest6();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter11;
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter11.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter15 = serializedObjectSupporter11.deserializeObjectConverter7();
        retrofit.client.Request request16 = serializedObjectSupporter11.deserializeObjectRequest8();
        retrofit.client.Request request17 = serializedObjectSupporter11.deserializeObjectRequest8();
        retrofit.Server server18 = serializedObjectSupporter11.deserializeObjectServer1();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter11.deserializeObjectConverter1();
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(gsonConverter15);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertNotNull(server18);
        org.junit.Assert.assertNotNull(gsonConverter19);
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1194");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.requestInterceptor;
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter10.new RestHandler();
        retrofit.ErrorHandler errorHandler16 = restAdapter10.geterrorHandler();
        retrofit.client.Client.Provider provider17 = restAdapter10.getclientProvider();
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter10.new RestHandler();
        java.util.concurrent.Executor executor19 = restAdapter10.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor20 = restAdapter10.getrequestInterceptor();
        retrofit.RestAdapter.RestHandler restHandler21 = restAdapter10.new RestHandler();
        java.lang.Throwable throwable22 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter10.logException(throwable22, "POST");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNull(provider17);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(requestInterceptor20);
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1195");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter10.new RestHandler();
        retrofit.converter.Converter converter14 = restAdapter10.getconverter();
        retrofit.Server server15 = restAdapter10.getserver();
        java.lang.Throwable throwable16 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter10.logException(throwable16, "default");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(server15);
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1196");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.Profiler profiler2 = builder0.profiler;
        retrofit.client.Client.Provider provider3 = null;
        builder0.setclientProvider(provider3);
        java.util.concurrent.Executor executor5 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider6 = null;
        builder0.clientProvider = provider6;
        retrofit.Server server10 = new retrofit.Server("Retrofit-Idle", "Retrofit-");
        java.lang.String str11 = server10.getapiUrl();
        java.lang.String str12 = server10.getDEFAULT_NAME();
        java.lang.String str13 = server10.getName();
        retrofit.RestAdapter.Builder builder14 = builder0.setServer(server10);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor16 = builder15.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor17 = null;
        builder15.requestInterceptor = requestInterceptor17;
        java.util.concurrent.Executor executor19 = null;
        builder15.setcallbackExecutor(executor19);
        retrofit.Server server22 = new retrofit.Server("POST");
        retrofit.client.Client.Provider provider23 = null;
        java.util.concurrent.Executor executor24 = null;
        java.util.concurrent.Executor executor25 = null;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        retrofit.Server server27 = null;
        retrofit.client.Client.Provider provider28 = null;
        java.util.concurrent.Executor executor29 = null;
        java.util.concurrent.Executor executor30 = null;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        retrofit.converter.Converter converter32 = null;
        retrofit.Profiler profiler33 = null;
        retrofit.ErrorHandler errorHandler34 = null;
        retrofit.RestAdapter.Log log35 = null;
        retrofit.RestAdapter.LogLevel logLevel36 = null;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter(server27, provider28, executor29, executor30, requestInterceptor31, converter32, profiler33, errorHandler34, log35, logLevel36);
        retrofit.SerializedObjectSupporter serializedObjectSupporter38 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request39 = serializedObjectSupporter38.deserializeObjectRequest6();
        restAdapter37.serializedObjectSupporter = serializedObjectSupporter38;
        retrofit.converter.GsonConverter gsonConverter41 = serializedObjectSupporter38.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter42 = serializedObjectSupporter38.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter43 = serializedObjectSupporter38.deserializeObjectConverter1();
        retrofit.Profiler profiler44 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter45 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request46 = serializedObjectSupporter45.deserializeObjectRequest6();
        java.lang.String str47 = serializedObjectSupporter45.deserializeObjectString4();
        java.lang.String str48 = serializedObjectSupporter45.deserializeObjectString5();
        retrofit.ErrorHandler errorHandler49 = serializedObjectSupporter45.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor51 = builder50.getcallbackExecutor();
        retrofit.Server server52 = builder50.server;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider54 = null;
        builder53.setclientProvider(provider54);
        retrofit.Server server57 = new retrofit.Server("Retrofit-");
        java.lang.String str58 = server57.name;
        retrofit.client.Client.Provider provider59 = null;
        java.util.concurrent.Executor executor60 = null;
        java.util.concurrent.Executor executor61 = null;
        retrofit.RequestInterceptor requestInterceptor62 = null;
        retrofit.converter.Converter converter63 = null;
        retrofit.Profiler profiler64 = null;
        retrofit.ErrorHandler errorHandler65 = null;
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        retrofit.Server server68 = builder67.server;
        java.util.concurrent.Executor executor69 = null;
        builder67.httpExecutor = executor69;
        java.util.concurrent.Executor executor71 = builder67.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel72 = retrofit.RestAdapter.LogLevel.FULL;
        builder67.logLevel = logLevel72;
        retrofit.RestAdapter restAdapter74 = new retrofit.RestAdapter(server57, provider59, executor60, executor61, requestInterceptor62, converter63, profiler64, errorHandler65, log66, logLevel72);
        retrofit.RestAdapter.Builder builder75 = builder53.setLog(log66);
        retrofit.RestAdapter.Builder builder76 = builder50.setLog(log66);
        retrofit.RestAdapter.Builder builder77 = new retrofit.RestAdapter.Builder();
        retrofit.Server server78 = builder77.server;
        retrofit.converter.Converter converter79 = null;
        builder77.converter = converter79;
        retrofit.RestAdapter.Log log81 = builder77.log;
        retrofit.RestAdapter.LogLevel logLevel82 = builder77.logLevel;
        retrofit.RestAdapter restAdapter83 = new retrofit.RestAdapter(server22, provider23, executor24, executor25, requestInterceptor26, (retrofit.converter.Converter) gsonConverter43, profiler44, errorHandler49, log66, logLevel82);
        builder15.errorHandler = errorHandler49;
        java.util.concurrent.Executor executor85 = null;
        builder15.callbackExecutor = executor85;
        retrofit.RestAdapter.Builder builder87 = new retrofit.RestAdapter.Builder();
        retrofit.Server server88 = builder87.server;
        java.util.concurrent.Executor executor89 = null;
        builder87.httpExecutor = executor89;
        java.util.concurrent.Executor executor91 = null;
        builder87.callbackExecutor = executor91;
        java.util.concurrent.Executor executor93 = null;
        builder87.callbackExecutor = executor93;
        builder87.ensureSaneDefaults();
        retrofit.client.Client.Provider provider96 = builder87.clientProvider;
        builder15.clientProvider = provider96;
        retrofit.RestAdapter.Builder builder98 = builder14.setClient(provider96);
        retrofit.client.Client.Provider provider99 = builder14.getclientProvider();
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-Idle" + "'", str11, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "default" + "'", str12, "default");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-" + "'", str13, "Retrofit-");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNotNull(request39);
        org.junit.Assert.assertNotNull(gsonConverter41);
        org.junit.Assert.assertNotNull(gsonConverter42);
        org.junit.Assert.assertNotNull(gsonConverter43);
        org.junit.Assert.assertNotNull(request46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "http://example.com/" + "'", str47, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "POST" + "'", str48, "POST");
        org.junit.Assert.assertNotNull(errorHandler49);
        org.junit.Assert.assertNull(executor51);
        org.junit.Assert.assertNull(server52);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "default" + "'", str58, "default");
        org.junit.Assert.assertNotNull(log66);
        org.junit.Assert.assertNull(server68);
        org.junit.Assert.assertNull(executor71);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNull(server78);
        org.junit.Assert.assertNull(log81);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server88);
        org.junit.Assert.assertNotNull(provider96);
        org.junit.Assert.assertNotNull(builder98);
        org.junit.Assert.assertNotNull(provider99);
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1197");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.Server server2 = builder0.server;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider4 = null;
        builder3.setclientProvider(provider4);
        retrofit.Server server7 = new retrofit.Server("Retrofit-");
        java.lang.String str8 = server7.name;
        retrofit.client.Client.Provider provider9 = null;
        java.util.concurrent.Executor executor10 = null;
        java.util.concurrent.Executor executor11 = null;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        retrofit.converter.Converter converter13 = null;
        retrofit.Profiler profiler14 = null;
        retrofit.ErrorHandler errorHandler15 = null;
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.Server server18 = builder17.server;
        java.util.concurrent.Executor executor19 = null;
        builder17.httpExecutor = executor19;
        java.util.concurrent.Executor executor21 = builder17.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.FULL;
        builder17.logLevel = logLevel22;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server7, provider9, executor10, executor11, requestInterceptor12, converter13, profiler14, errorHandler15, log16, logLevel22);
        retrofit.RestAdapter.Builder builder25 = builder3.setLog(log16);
        retrofit.RestAdapter.Builder builder26 = builder0.setLog(log16);
        retrofit.Profiler profiler27 = null;
        builder26.profiler = profiler27;
        java.util.concurrent.Executor executor29 = builder26.gethttpExecutor();
        retrofit.Server server31 = new retrofit.Server("Retrofit-");
        java.lang.String str32 = server31.name;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.Server server42 = builder41.server;
        java.util.concurrent.Executor executor43 = null;
        builder41.httpExecutor = executor43;
        java.util.concurrent.Executor executor45 = builder41.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.FULL;
        builder41.logLevel = logLevel46;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter(server31, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log40, logLevel46);
        builder26.log = log40;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter51 = new retrofit.SerializedObjectSupporter();
        java.lang.String str52 = serializedObjectSupporter51.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter53 = serializedObjectSupporter51.deserializeObjectConverter3();
        builder50.serializedObjectSupporter = serializedObjectSupporter51;
        java.util.concurrent.Executor executor55 = null;
        builder50.httpExecutor = executor55;
        retrofit.Server server57 = null;
        retrofit.client.Client.Provider provider58 = null;
        java.util.concurrent.Executor executor59 = null;
        java.util.concurrent.Executor executor60 = null;
        retrofit.RequestInterceptor requestInterceptor61 = null;
        retrofit.converter.Converter converter62 = null;
        retrofit.Profiler profiler63 = null;
        retrofit.ErrorHandler errorHandler64 = null;
        retrofit.RestAdapter.Log log65 = null;
        retrofit.RestAdapter.LogLevel logLevel66 = null;
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter(server57, provider58, executor59, executor60, requestInterceptor61, converter62, profiler63, errorHandler64, log65, logLevel66);
        retrofit.SerializedObjectSupporter serializedObjectSupporter68 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request69 = serializedObjectSupporter68.deserializeObjectRequest6();
        restAdapter67.serializedObjectSupporter = serializedObjectSupporter68;
        java.lang.String str71 = serializedObjectSupporter68.deserializeObjectString4();
        retrofit.Server server72 = serializedObjectSupporter68.deserializeObjectServer1();
        retrofit.client.Request request73 = serializedObjectSupporter68.deserializeObjectRequest1();
        retrofit.converter.GsonConverter gsonConverter74 = serializedObjectSupporter68.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter75 = serializedObjectSupporter68.deserializeObjectConverter3();
        builder50.converter = gsonConverter75;
        retrofit.RestAdapter.Builder builder77 = builder26.setConverter((retrofit.converter.Converter) gsonConverter75);
        retrofit.Server server78 = builder77.server;
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        retrofit.Server server80 = builder79.server;
        retrofit.converter.Converter converter81 = null;
        builder79.converter = converter81;
        retrofit.RestAdapter.Log log83 = builder79.log;
        retrofit.client.Client.Provider provider84 = null;
        builder79.clientProvider = provider84;
        retrofit.RestAdapter.Builder builder86 = new retrofit.RestAdapter.Builder();
        retrofit.Server server87 = builder86.server;
        java.util.concurrent.Executor executor88 = null;
        builder86.httpExecutor = executor88;
        java.util.concurrent.Executor executor90 = null;
        builder86.callbackExecutor = executor90;
        java.util.concurrent.Executor executor92 = null;
        builder86.callbackExecutor = executor92;
        builder86.ensureSaneDefaults();
        retrofit.client.Client.Provider provider95 = builder86.clientProvider;
        builder79.setclientProvider(provider95);
        retrofit.RestAdapter.Builder builder97 = builder77.setClient(provider95);
        java.util.concurrent.Executor executor98 = builder97.gethttpExecutor();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "default" + "'", str8, "default");
        org.junit.Assert.assertNotNull(log16);
        org.junit.Assert.assertNull(server18);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "default" + "'", str32, "default");
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertNull(server42);
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Retrofit-Idle" + "'", str52, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter53);
        org.junit.Assert.assertNotNull(request69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "http://example.com/" + "'", str71, "http://example.com/");
        org.junit.Assert.assertNotNull(server72);
        org.junit.Assert.assertNotNull(request73);
        org.junit.Assert.assertNotNull(gsonConverter74);
        org.junit.Assert.assertNotNull(gsonConverter75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNull(server78);
        org.junit.Assert.assertNull(server80);
        org.junit.Assert.assertNull(log83);
        org.junit.Assert.assertNull(server87);
        org.junit.Assert.assertNotNull(provider95);
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertNull(executor98);
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1198");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request12 = serializedObjectSupporter11.deserializeObjectRequest6();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter11;
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter11.deserializeObjectConverter7();
        retrofit.Server server15 = serializedObjectSupporter11.deserializeObjectServer1();
        java.lang.String str16 = server15.getName();
        java.lang.String str17 = server15.getUrl();
        java.lang.String str18 = server15.name;
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(server15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "default" + "'", str16, "default");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "http://example.com" + "'", str17, "http://example.com");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "default" + "'", str18, "default");
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1199");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter10.new RestHandler();
        retrofit.Profiler profiler14 = restAdapter10.getprofiler();
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(profiler14);
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1200");
        retrofit.Server server1 = new retrofit.Server("hi!");
        java.lang.String str2 = server1.getapiUrl();
        java.lang.String str3 = server1.name;
        java.lang.String str4 = server1.apiUrl;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "default" + "'", str3, "default");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1201");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest5();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest5();
        retrofit.mime.TypedString typedString5 = serializedObjectSupporter0.deserializeObjectTypedOutput2();
        retrofit.mime.TypedString typedString6 = serializedObjectSupporter0.deserializeObjectTypedOutput2();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(typedString5);
        org.junit.Assert.assertNotNull(typedString6);
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1202");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request16 = serializedObjectSupporter15.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter15.deserializeObjectConverter1();
        java.lang.String str18 = serializedObjectSupporter15.deserializeObjectString4();
        java.lang.String str19 = serializedObjectSupporter15.deserializeObjectString4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter15;
        retrofit.ErrorHandler errorHandler21 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor22 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.Server server24 = builder23.server;
        retrofit.converter.Converter converter25 = null;
        builder23.converter = converter25;
        retrofit.RestAdapter.Log log27 = builder23.log;
        retrofit.RestAdapter.LogLevel logLevel28 = builder23.logLevel;
        restAdapter10.logLevel = logLevel28;
        retrofit.RequestInterceptor requestInterceptor30 = restAdapter10.requestInterceptor;
        retrofit.RestAdapter.RestHandler restHandler31 = restAdapter10.new RestHandler();
        retrofit.Server server32 = null;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Log log40 = null;
        retrofit.RestAdapter.LogLevel logLevel41 = null;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log40, logLevel41);
        retrofit.SerializedObjectSupporter serializedObjectSupporter43 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request44 = serializedObjectSupporter43.deserializeObjectRequest6();
        restAdapter42.serializedObjectSupporter = serializedObjectSupporter43;
        retrofit.converter.GsonConverter gsonConverter46 = serializedObjectSupporter43.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter47 = serializedObjectSupporter43.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter48 = serializedObjectSupporter43.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter49 = serializedObjectSupporter43.deserializeObjectConverter6();
        retrofit.converter.GsonConverter gsonConverter50 = serializedObjectSupporter43.deserializeObjectConverter2();
        java.lang.reflect.Method method51 = null;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor53 = builder52.getcallbackExecutor();
        retrofit.Server server54 = builder52.server;
        retrofit.RestAdapter.Log log55 = builder52.log;
        retrofit.Server server56 = builder52.server;
        java.util.concurrent.Executor executor57 = builder52.getcallbackExecutor();
        retrofit.Server server58 = builder52.server;
        java.lang.Object[] objArray59 = new java.lang.Object[] { builder52 };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj60 = restHandler31.invoke((java.lang.Object) gsonConverter50, method51, objArray59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(server24);
        org.junit.Assert.assertNull(log27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(request44);
        org.junit.Assert.assertNotNull(gsonConverter46);
        org.junit.Assert.assertNotNull(gsonConverter47);
        org.junit.Assert.assertNotNull(gsonConverter48);
        org.junit.Assert.assertNotNull(gsonConverter49);
        org.junit.Assert.assertNotNull(gsonConverter50);
        org.junit.Assert.assertNull(executor53);
        org.junit.Assert.assertNull(server54);
        org.junit.Assert.assertNull(log55);
        org.junit.Assert.assertNull(server56);
        org.junit.Assert.assertNull(executor57);
        org.junit.Assert.assertNull(server58);
        org.junit.Assert.assertNotNull(objArray59);
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1203");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        java.util.concurrent.Executor executor3 = null;
        builder0.setcallbackExecutor(executor3);
        retrofit.Profiler profiler5 = null;
        builder0.profiler = profiler5;
        retrofit.SerializedObjectSupporter serializedObjectSupporter7 = new retrofit.SerializedObjectSupporter();
        java.lang.String str8 = serializedObjectSupporter7.deserializeObjectString2();
        retrofit.client.Request request9 = serializedObjectSupporter7.deserializeObjectRequest7();
        retrofit.ErrorHandler errorHandler10 = serializedObjectSupporter7.deserializeObjectErrorHandler1();
        retrofit.converter.GsonConverter gsonConverter11 = serializedObjectSupporter7.deserializeObjectConverter4();
        builder0.converter = gsonConverter11;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Retrofit-Idle" + "'", str8, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNotNull(errorHandler10);
        org.junit.Assert.assertNotNull(gsonConverter11);
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1204");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel14 = null;
        restAdapter10.logLevel = logLevel14;
        retrofit.client.Client.Provider provider16 = restAdapter10.getclientProvider();
        retrofit.ErrorHandler errorHandler17 = restAdapter10.geterrorHandler();
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter10.new RestHandler();
        retrofit.Profiler profiler19 = restAdapter10.profiler;
        java.lang.String str20 = restAdapter10.getIDLE_THREAD_NAME();
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(provider16);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(profiler19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Retrofit-Idle" + "'", str20, "Retrofit-Idle");
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1205");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.Server server2 = builder0.server;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider4 = null;
        builder3.setclientProvider(provider4);
        retrofit.Server server7 = new retrofit.Server("Retrofit-");
        java.lang.String str8 = server7.name;
        retrofit.client.Client.Provider provider9 = null;
        java.util.concurrent.Executor executor10 = null;
        java.util.concurrent.Executor executor11 = null;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        retrofit.converter.Converter converter13 = null;
        retrofit.Profiler profiler14 = null;
        retrofit.ErrorHandler errorHandler15 = null;
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.Server server18 = builder17.server;
        java.util.concurrent.Executor executor19 = null;
        builder17.httpExecutor = executor19;
        java.util.concurrent.Executor executor21 = builder17.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.FULL;
        builder17.logLevel = logLevel22;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server7, provider9, executor10, executor11, requestInterceptor12, converter13, profiler14, errorHandler15, log16, logLevel22);
        retrofit.RestAdapter.Builder builder25 = builder3.setLog(log16);
        retrofit.RestAdapter.Builder builder26 = builder0.setLog(log16);
        retrofit.Profiler profiler27 = null;
        builder26.profiler = profiler27;
        retrofit.RestAdapter.LogLevel logLevel29 = builder26.logLevel;
        boolean boolean30 = logLevel29.log();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "default" + "'", str8, "default");
        org.junit.Assert.assertNotNull(log16);
        org.junit.Assert.assertNull(server18);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1206");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.Server server2 = builder0.server;
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.Server server6 = new retrofit.Server("Retrofit-Idle", "Retrofit-");
        java.lang.String str7 = server6.getapiUrl();
        java.lang.String str8 = server6.getDEFAULT_NAME();
        retrofit.RestAdapter.Builder builder9 = builder0.setServer(server6);
        retrofit.Server server11 = new retrofit.Server("hi!");
        java.lang.String str12 = server11.name;
        retrofit.RestAdapter.Builder builder13 = builder9.setServer(server11);
        retrofit.RequestInterceptor requestInterceptor14 = builder9.requestInterceptor;
        retrofit.client.Client.Provider provider15 = builder9.clientProvider;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Retrofit-Idle" + "'", str7, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "default" + "'", str8, "default");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "default" + "'", str12, "default");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNull(provider15);
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1207");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request12 = serializedObjectSupporter11.deserializeObjectRequest6();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter11;
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter11.deserializeObjectConverter7();
        retrofit.Server server15 = serializedObjectSupporter11.deserializeObjectServer1();
        java.lang.String str16 = serializedObjectSupporter11.deserializeObjectString4();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter11.deserializeObjectConverter5();
        retrofit.client.Request request18 = serializedObjectSupporter11.deserializeObjectRequest4();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter19 = serializedObjectSupporter11.deserializeObjectLogLevel1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(server15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "http://example.com/" + "'", str16, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertNotNull(request18);
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1208");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request12 = serializedObjectSupporter11.deserializeObjectRequest6();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter11;
        java.lang.String str14 = serializedObjectSupporter11.deserializeObjectString4();
        retrofit.Server server15 = serializedObjectSupporter11.deserializeObjectServer1();
        retrofit.client.Request request16 = serializedObjectSupporter11.deserializeObjectRequest1();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter11.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter18 = serializedObjectSupporter11.deserializeObjectConverter7();
        retrofit.Server server19 = serializedObjectSupporter11.deserializeObjectServer1();
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "http://example.com/" + "'", str14, "http://example.com/");
        org.junit.Assert.assertNotNull(server15);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertNotNull(gsonConverter18);
        org.junit.Assert.assertNotNull(server19);
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1209");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter10.new RestHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.httpExecutor;
        retrofit.converter.Converter converter14 = restAdapter10.getconverter();
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter10.new RestHandler();
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(converter14);
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1210");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString2();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString3();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString4();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter5 = serializedObjectSupporter0.deserializeObjectLogLevel2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Retrofit-Idle" + "'", str1, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "http://example.com/" + "'", str2, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "GET" + "'", str3, "GET");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "http://example.com/" + "'", str4, "http://example.com/");
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1211");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.Server server2 = builder0.server;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider4 = null;
        builder3.setclientProvider(provider4);
        retrofit.Server server7 = new retrofit.Server("Retrofit-");
        java.lang.String str8 = server7.name;
        retrofit.client.Client.Provider provider9 = null;
        java.util.concurrent.Executor executor10 = null;
        java.util.concurrent.Executor executor11 = null;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        retrofit.converter.Converter converter13 = null;
        retrofit.Profiler profiler14 = null;
        retrofit.ErrorHandler errorHandler15 = null;
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.Server server18 = builder17.server;
        java.util.concurrent.Executor executor19 = null;
        builder17.httpExecutor = executor19;
        java.util.concurrent.Executor executor21 = builder17.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.FULL;
        builder17.logLevel = logLevel22;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server7, provider9, executor10, executor11, requestInterceptor12, converter13, profiler14, errorHandler15, log16, logLevel22);
        retrofit.RestAdapter.Builder builder25 = builder3.setLog(log16);
        retrofit.RestAdapter.Builder builder26 = builder0.setLog(log16);
        java.util.concurrent.Executor executor27 = builder26.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.Server server29 = builder28.server;
        java.util.concurrent.Executor executor30 = null;
        builder28.httpExecutor = executor30;
        java.util.concurrent.Executor executor32 = null;
        builder28.callbackExecutor = executor32;
        java.util.concurrent.Executor executor34 = null;
        builder28.callbackExecutor = executor34;
        builder28.ensureSaneDefaults();
        retrofit.client.Client.Provider provider37 = builder28.clientProvider;
        retrofit.RestAdapter.Builder builder38 = builder26.setClient(provider37);
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder26.logLevel = logLevel39;
        boolean boolean41 = logLevel39.log();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "default" + "'", str8, "default");
        org.junit.Assert.assertNotNull(log16);
        org.junit.Assert.assertNull(server18);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(server29);
        org.junit.Assert.assertNotNull(provider37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1212");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.Server server2 = builder0.server;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider4 = null;
        builder3.setclientProvider(provider4);
        retrofit.Server server7 = new retrofit.Server("Retrofit-");
        java.lang.String str8 = server7.name;
        retrofit.client.Client.Provider provider9 = null;
        java.util.concurrent.Executor executor10 = null;
        java.util.concurrent.Executor executor11 = null;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        retrofit.converter.Converter converter13 = null;
        retrofit.Profiler profiler14 = null;
        retrofit.ErrorHandler errorHandler15 = null;
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.Server server18 = builder17.server;
        java.util.concurrent.Executor executor19 = null;
        builder17.httpExecutor = executor19;
        java.util.concurrent.Executor executor21 = builder17.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.FULL;
        builder17.logLevel = logLevel22;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server7, provider9, executor10, executor11, requestInterceptor12, converter13, profiler14, errorHandler15, log16, logLevel22);
        retrofit.RestAdapter.Builder builder25 = builder3.setLog(log16);
        retrofit.RestAdapter.Builder builder26 = builder0.setLog(log16);
        retrofit.Profiler profiler27 = null;
        builder26.profiler = profiler27;
        java.util.concurrent.Executor executor29 = builder26.gethttpExecutor();
        retrofit.Server server31 = new retrofit.Server("Retrofit-");
        java.lang.String str32 = server31.name;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.Server server42 = builder41.server;
        java.util.concurrent.Executor executor43 = null;
        builder41.httpExecutor = executor43;
        java.util.concurrent.Executor executor45 = builder41.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.FULL;
        builder41.logLevel = logLevel46;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter(server31, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log40, logLevel46);
        builder26.log = log40;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter51 = new retrofit.SerializedObjectSupporter();
        java.lang.String str52 = serializedObjectSupporter51.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter53 = serializedObjectSupporter51.deserializeObjectConverter3();
        builder50.serializedObjectSupporter = serializedObjectSupporter51;
        java.util.concurrent.Executor executor55 = null;
        builder50.httpExecutor = executor55;
        retrofit.Server server57 = null;
        retrofit.client.Client.Provider provider58 = null;
        java.util.concurrent.Executor executor59 = null;
        java.util.concurrent.Executor executor60 = null;
        retrofit.RequestInterceptor requestInterceptor61 = null;
        retrofit.converter.Converter converter62 = null;
        retrofit.Profiler profiler63 = null;
        retrofit.ErrorHandler errorHandler64 = null;
        retrofit.RestAdapter.Log log65 = null;
        retrofit.RestAdapter.LogLevel logLevel66 = null;
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter(server57, provider58, executor59, executor60, requestInterceptor61, converter62, profiler63, errorHandler64, log65, logLevel66);
        retrofit.SerializedObjectSupporter serializedObjectSupporter68 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request69 = serializedObjectSupporter68.deserializeObjectRequest6();
        restAdapter67.serializedObjectSupporter = serializedObjectSupporter68;
        java.lang.String str71 = serializedObjectSupporter68.deserializeObjectString4();
        retrofit.Server server72 = serializedObjectSupporter68.deserializeObjectServer1();
        retrofit.client.Request request73 = serializedObjectSupporter68.deserializeObjectRequest1();
        retrofit.converter.GsonConverter gsonConverter74 = serializedObjectSupporter68.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter75 = serializedObjectSupporter68.deserializeObjectConverter3();
        builder50.converter = gsonConverter75;
        retrofit.RestAdapter.Builder builder77 = builder26.setConverter((retrofit.converter.Converter) gsonConverter75);
        retrofit.Server server78 = builder77.server;
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        retrofit.Server server80 = builder79.server;
        retrofit.converter.Converter converter81 = null;
        builder79.converter = converter81;
        retrofit.RestAdapter.Log log83 = builder79.log;
        retrofit.client.Client.Provider provider84 = null;
        builder79.clientProvider = provider84;
        retrofit.RestAdapter.Builder builder86 = new retrofit.RestAdapter.Builder();
        retrofit.Server server87 = builder86.server;
        java.util.concurrent.Executor executor88 = null;
        builder86.httpExecutor = executor88;
        java.util.concurrent.Executor executor90 = null;
        builder86.callbackExecutor = executor90;
        java.util.concurrent.Executor executor92 = null;
        builder86.callbackExecutor = executor92;
        builder86.ensureSaneDefaults();
        retrofit.client.Client.Provider provider95 = builder86.clientProvider;
        builder79.setclientProvider(provider95);
        retrofit.RestAdapter.Builder builder97 = builder77.setClient(provider95);
        retrofit.Profiler profiler98 = builder77.profiler;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "default" + "'", str8, "default");
        org.junit.Assert.assertNotNull(log16);
        org.junit.Assert.assertNull(server18);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "default" + "'", str32, "default");
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertNull(server42);
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Retrofit-Idle" + "'", str52, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter53);
        org.junit.Assert.assertNotNull(request69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "http://example.com/" + "'", str71, "http://example.com/");
        org.junit.Assert.assertNotNull(server72);
        org.junit.Assert.assertNotNull(request73);
        org.junit.Assert.assertNotNull(gsonConverter74);
        org.junit.Assert.assertNotNull(gsonConverter75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNull(server78);
        org.junit.Assert.assertNull(server80);
        org.junit.Assert.assertNull(log83);
        org.junit.Assert.assertNull(server87);
        org.junit.Assert.assertNotNull(provider95);
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertNull(profiler98);
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1213");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        java.lang.String str2 = serializedObjectSupporter1.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter1.deserializeObjectConverter3();
        builder0.serializedObjectSupporter = serializedObjectSupporter1;
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.RestAdapter.Builder builder7 = builder0.setServer("http://example.com/");
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = builder8.getcallbackExecutor();
        retrofit.Server server10 = builder8.server;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider12 = null;
        builder11.setclientProvider(provider12);
        retrofit.Server server15 = new retrofit.Server("Retrofit-");
        java.lang.String str16 = server15.name;
        retrofit.client.Client.Provider provider17 = null;
        java.util.concurrent.Executor executor18 = null;
        java.util.concurrent.Executor executor19 = null;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        retrofit.converter.Converter converter21 = null;
        retrofit.Profiler profiler22 = null;
        retrofit.ErrorHandler errorHandler23 = null;
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.Server server26 = builder25.server;
        java.util.concurrent.Executor executor27 = null;
        builder25.httpExecutor = executor27;
        java.util.concurrent.Executor executor29 = builder25.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.FULL;
        builder25.logLevel = logLevel30;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server15, provider17, executor18, executor19, requestInterceptor20, converter21, profiler22, errorHandler23, log24, logLevel30);
        retrofit.RestAdapter.Builder builder33 = builder11.setLog(log24);
        retrofit.RestAdapter.Builder builder34 = builder8.setLog(log24);
        retrofit.Server server35 = null;
        retrofit.client.Client.Provider provider36 = null;
        java.util.concurrent.Executor executor37 = null;
        java.util.concurrent.Executor executor38 = null;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        retrofit.converter.Converter converter40 = null;
        retrofit.Profiler profiler41 = null;
        retrofit.ErrorHandler errorHandler42 = null;
        retrofit.RestAdapter.Log log43 = null;
        retrofit.RestAdapter.LogLevel logLevel44 = null;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter(server35, provider36, executor37, executor38, requestInterceptor39, converter40, profiler41, errorHandler42, log43, logLevel44);
        retrofit.SerializedObjectSupporter serializedObjectSupporter46 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request47 = serializedObjectSupporter46.deserializeObjectRequest6();
        restAdapter45.serializedObjectSupporter = serializedObjectSupporter46;
        retrofit.converter.GsonConverter gsonConverter49 = serializedObjectSupporter46.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter50 = serializedObjectSupporter46.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter51 = serializedObjectSupporter46.deserializeObjectConverter1();
        retrofit.client.Request request52 = serializedObjectSupporter46.deserializeObjectRequest5();
        retrofit.RequestInterceptor requestInterceptor53 = serializedObjectSupporter46.deserializeObjectRequestInterceptor1();
        builder34.requestInterceptor = requestInterceptor53;
        retrofit.RestAdapter.Builder builder55 = builder7.setRequestInterceptor(requestInterceptor53);
        retrofit.RestAdapter.LogLevel logLevel56 = builder55.logLevel;
        retrofit.Server server57 = null;
        retrofit.client.Client.Provider provider58 = null;
        java.util.concurrent.Executor executor59 = null;
        java.util.concurrent.Executor executor60 = null;
        retrofit.RequestInterceptor requestInterceptor61 = null;
        retrofit.converter.Converter converter62 = null;
        retrofit.Profiler profiler63 = null;
        retrofit.ErrorHandler errorHandler64 = null;
        retrofit.RestAdapter.Log log65 = null;
        retrofit.RestAdapter.LogLevel logLevel66 = null;
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter(server57, provider58, executor59, executor60, requestInterceptor61, converter62, profiler63, errorHandler64, log65, logLevel66);
        retrofit.SerializedObjectSupporter serializedObjectSupporter68 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request69 = serializedObjectSupporter68.deserializeObjectRequest6();
        restAdapter67.serializedObjectSupporter = serializedObjectSupporter68;
        retrofit.converter.GsonConverter gsonConverter71 = serializedObjectSupporter68.deserializeObjectConverter7();
        retrofit.Server server72 = serializedObjectSupporter68.deserializeObjectServer1();
        retrofit.converter.GsonConverter gsonConverter73 = serializedObjectSupporter68.deserializeObjectConverter5();
        retrofit.Server server74 = serializedObjectSupporter68.deserializeObjectServer1();
        builder55.server = server74;
        java.lang.String str76 = server74.getDEFAULT_NAME();
        java.lang.String str77 = server74.getName();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Retrofit-Idle" + "'", str2, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "default" + "'", str16, "default");
        org.junit.Assert.assertNotNull(log24);
        org.junit.Assert.assertNull(server26);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(request47);
        org.junit.Assert.assertNotNull(gsonConverter49);
        org.junit.Assert.assertNotNull(gsonConverter50);
        org.junit.Assert.assertNotNull(gsonConverter51);
        org.junit.Assert.assertNotNull(request52);
        org.junit.Assert.assertNotNull(requestInterceptor53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(request69);
        org.junit.Assert.assertNotNull(gsonConverter71);
        org.junit.Assert.assertNotNull(server72);
        org.junit.Assert.assertNotNull(gsonConverter73);
        org.junit.Assert.assertNotNull(server74);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "default" + "'", str76, "default");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "default" + "'", str77, "default");
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1214");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request16 = serializedObjectSupporter15.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter15.deserializeObjectConverter1();
        java.lang.String str18 = serializedObjectSupporter15.deserializeObjectString4();
        java.lang.String str19 = serializedObjectSupporter15.deserializeObjectString4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter15;
        retrofit.ErrorHandler errorHandler21 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor22 = restAdapter10.httpExecutor;
        retrofit.Server server23 = restAdapter10.server;
        retrofit.client.Client.Provider provider24 = restAdapter10.getclientProvider();
        retrofit.Profiler profiler25 = restAdapter10.getprofiler();
        retrofit.Profiler profiler26 = restAdapter10.getprofiler();
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor28 = builder27.getcallbackExecutor();
        retrofit.Server server29 = builder27.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = builder27.serializedObjectSupporter;
        retrofit.converter.Converter converter31 = builder27.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter32 = new retrofit.SerializedObjectSupporter();
        java.lang.String str33 = serializedObjectSupporter32.deserializeObjectString2();
        retrofit.client.Request request34 = serializedObjectSupporter32.deserializeObjectRequest7();
        java.lang.String str35 = serializedObjectSupporter32.deserializeObjectString5();
        retrofit.Server server36 = serializedObjectSupporter32.deserializeObjectServer1();
        builder27.serializedObjectSupporter = serializedObjectSupporter32;
        retrofit.converter.GsonConverter gsonConverter38 = serializedObjectSupporter32.deserializeObjectConverter7();
        java.lang.String str39 = serializedObjectSupporter32.deserializeObjectString2();
        retrofit.client.Request request40 = serializedObjectSupporter32.deserializeObjectRequest2();
        retrofit.client.Request request41 = serializedObjectSupporter32.deserializeObjectRequest6();
        retrofit.client.Request request42 = serializedObjectSupporter32.deserializeObjectRequest7();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request43 = restAdapter10.logAndReplaceRequest(request42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(server23);
        org.junit.Assert.assertNull(provider24);
        org.junit.Assert.assertNull(profiler25);
        org.junit.Assert.assertNull(profiler26);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNull(server29);
        org.junit.Assert.assertNull(serializedObjectSupporter30);
        org.junit.Assert.assertNull(converter31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Retrofit-Idle" + "'", str33, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(request34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "POST" + "'", str35, "POST");
        org.junit.Assert.assertNotNull(server36);
        org.junit.Assert.assertNotNull(gsonConverter38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Retrofit-Idle" + "'", str39, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(request40);
        org.junit.Assert.assertNotNull(request41);
        org.junit.Assert.assertNotNull(request42);
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1215");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor2 = null;
        builder0.requestInterceptor = requestInterceptor2;
        java.util.concurrent.Executor executor4 = null;
        builder0.setcallbackExecutor(executor4);
        retrofit.ErrorHandler errorHandler6 = builder0.errorHandler;
        retrofit.RequestInterceptor requestInterceptor7 = builder0.requestInterceptor;
        retrofit.converter.Converter converter8 = builder0.converter;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = builder9.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor11 = null;
        builder9.requestInterceptor = requestInterceptor11;
        java.util.concurrent.Executor executor13 = null;
        builder9.setcallbackExecutor(executor13);
        retrofit.RequestInterceptor requestInterceptor15 = builder9.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        java.lang.String str17 = serializedObjectSupporter16.deserializeObjectString2();
        java.lang.String str18 = serializedObjectSupporter16.deserializeObjectString4();
        retrofit.client.Request request19 = serializedObjectSupporter16.deserializeObjectRequest1();
        builder9.serializedObjectSupporter = serializedObjectSupporter16;
        retrofit.ErrorHandler errorHandler21 = serializedObjectSupporter16.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder22 = builder0.setErrorHandler(errorHandler21);
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor24 = builder23.getcallbackExecutor();
        retrofit.Server server25 = builder23.server;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider27 = null;
        builder26.setclientProvider(provider27);
        retrofit.Server server30 = new retrofit.Server("Retrofit-");
        java.lang.String str31 = server30.name;
        retrofit.client.Client.Provider provider32 = null;
        java.util.concurrent.Executor executor33 = null;
        java.util.concurrent.Executor executor34 = null;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        retrofit.converter.Converter converter36 = null;
        retrofit.Profiler profiler37 = null;
        retrofit.ErrorHandler errorHandler38 = null;
        retrofit.RestAdapter.Log log39 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.Server server41 = builder40.server;
        java.util.concurrent.Executor executor42 = null;
        builder40.httpExecutor = executor42;
        java.util.concurrent.Executor executor44 = builder40.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.FULL;
        builder40.logLevel = logLevel45;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter(server30, provider32, executor33, executor34, requestInterceptor35, converter36, profiler37, errorHandler38, log39, logLevel45);
        retrofit.RestAdapter.Builder builder48 = builder26.setLog(log39);
        retrofit.RestAdapter.Builder builder49 = builder23.setLog(log39);
        retrofit.Profiler profiler50 = null;
        builder49.profiler = profiler50;
        retrofit.RestAdapter.LogLevel logLevel52 = builder49.logLevel;
        retrofit.RestAdapter.Builder builder53 = builder0.setLogLevel(logLevel52);
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(requestInterceptor7);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-Idle" + "'", str17, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
        org.junit.Assert.assertNotNull(request19);
        org.junit.Assert.assertNotNull(errorHandler21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(server25);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "default" + "'", str31, "default");
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertNull(server41);
        org.junit.Assert.assertNull(executor44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1216");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter10.new RestHandler();
        retrofit.converter.Converter converter13 = restAdapter10.converter;
        retrofit.RestAdapter.Log log14 = restAdapter10.log;
        retrofit.ErrorHandler errorHandler15 = restAdapter10.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter10.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor17 = restAdapter10.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request19 = serializedObjectSupporter18.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter18.deserializeObjectConverter1();
        retrofit.Server server21 = serializedObjectSupporter18.deserializeObjectServer1();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter18;
        retrofit.converter.GsonConverter gsonConverter23 = serializedObjectSupporter18.deserializeObjectConverter1();
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertNull(log14);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNull(requestInterceptor17);
        org.junit.Assert.assertNotNull(request19);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNotNull(server21);
        org.junit.Assert.assertNotNull(gsonConverter23);
    }

    @Test
    public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1217");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        java.util.concurrent.Executor executor2 = null;
        builder0.httpExecutor = executor2;
        java.util.concurrent.Executor executor4 = builder0.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.FULL;
        builder0.logLevel = logLevel5;
        retrofit.SerializedObjectSupporter serializedObjectSupporter7 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request8 = serializedObjectSupporter7.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter7.deserializeObjectConverter1();
        retrofit.converter.GsonConverter gsonConverter10 = serializedObjectSupporter7.deserializeObjectConverter4();
        builder0.serializedObjectSupporter = serializedObjectSupporter7;
        retrofit.RestAdapter.Builder builder13 = builder0.setServer("http://example.com/");
        retrofit.RestAdapter restAdapter14 = builder0.build();
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(request8);
        org.junit.Assert.assertNotNull(gsonConverter9);
        org.junit.Assert.assertNotNull(gsonConverter10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(restAdapter14);
    }

    @Test
    public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1218");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.Server server2 = builder0.server;
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = null;
        retrofit.client.Client.Provider provider6 = null;
        java.util.concurrent.Executor executor7 = null;
        java.util.concurrent.Executor executor8 = null;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        retrofit.converter.Converter converter10 = null;
        retrofit.Profiler profiler11 = null;
        retrofit.ErrorHandler errorHandler12 = null;
        retrofit.RestAdapter.Log log13 = null;
        retrofit.RestAdapter.LogLevel logLevel14 = null;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter(server5, provider6, executor7, executor8, requestInterceptor9, converter10, profiler11, errorHandler12, log13, logLevel14);
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request17 = serializedObjectSupporter16.deserializeObjectRequest6();
        restAdapter15.serializedObjectSupporter = serializedObjectSupporter16;
        java.lang.String str19 = serializedObjectSupporter16.deserializeObjectString4();
        retrofit.Server server20 = serializedObjectSupporter16.deserializeObjectServer1();
        retrofit.client.Request request21 = serializedObjectSupporter16.deserializeObjectRequest1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter16.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter23 = serializedObjectSupporter16.deserializeObjectConverter3();
        retrofit.RestAdapter.Builder builder24 = builder0.setConverter((retrofit.converter.Converter) gsonConverter23);
        java.util.concurrent.Executor executor25 = builder0.callbackExecutor;
        retrofit.Server server28 = new retrofit.Server("", "hi!");
        retrofit.RestAdapter.Builder builder29 = builder0.setServer(server28);
        retrofit.client.Client.Provider provider30 = builder0.getclientProvider();
        java.util.concurrent.Executor executor31 = builder0.httpExecutor;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertNotNull(server20);
        org.junit.Assert.assertNotNull(request21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(gsonConverter23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(provider30);
        org.junit.Assert.assertNull(executor31);
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1219");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel14 = null;
        restAdapter10.logLevel = logLevel14;
        retrofit.client.Client.Provider provider16 = restAdapter10.getclientProvider();
        retrofit.ErrorHandler errorHandler17 = restAdapter10.geterrorHandler();
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter10.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter19 = restHandler18.serializedObjectSupporter;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor21 = builder20.getcallbackExecutor();
        retrofit.Server server22 = builder20.server;
        retrofit.Profiler profiler23 = null;
        builder20.profiler = profiler23;
        retrofit.Server server25 = null;
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Log log33 = null;
        retrofit.RestAdapter.LogLevel logLevel34 = null;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server25, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log33, logLevel34);
        retrofit.SerializedObjectSupporter serializedObjectSupporter36 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request37 = serializedObjectSupporter36.deserializeObjectRequest6();
        restAdapter35.serializedObjectSupporter = serializedObjectSupporter36;
        java.lang.String str39 = serializedObjectSupporter36.deserializeObjectString4();
        retrofit.Server server40 = serializedObjectSupporter36.deserializeObjectServer1();
        retrofit.client.Request request41 = serializedObjectSupporter36.deserializeObjectRequest1();
        retrofit.converter.GsonConverter gsonConverter42 = serializedObjectSupporter36.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter43 = serializedObjectSupporter36.deserializeObjectConverter3();
        retrofit.RestAdapter.Builder builder44 = builder20.setConverter((retrofit.converter.Converter) gsonConverter43);
        java.util.concurrent.Executor executor45 = builder20.callbackExecutor;
        retrofit.Server server48 = new retrofit.Server("", "hi!");
        retrofit.RestAdapter.Builder builder49 = builder20.setServer(server48);
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor51 = builder50.getcallbackExecutor();
        retrofit.Server server52 = builder50.server;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider54 = null;
        builder53.setclientProvider(provider54);
        retrofit.Server server57 = new retrofit.Server("Retrofit-");
        java.lang.String str58 = server57.name;
        retrofit.client.Client.Provider provider59 = null;
        java.util.concurrent.Executor executor60 = null;
        java.util.concurrent.Executor executor61 = null;
        retrofit.RequestInterceptor requestInterceptor62 = null;
        retrofit.converter.Converter converter63 = null;
        retrofit.Profiler profiler64 = null;
        retrofit.ErrorHandler errorHandler65 = null;
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        retrofit.Server server68 = builder67.server;
        java.util.concurrent.Executor executor69 = null;
        builder67.httpExecutor = executor69;
        java.util.concurrent.Executor executor71 = builder67.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel72 = retrofit.RestAdapter.LogLevel.FULL;
        builder67.logLevel = logLevel72;
        retrofit.RestAdapter restAdapter74 = new retrofit.RestAdapter(server57, provider59, executor60, executor61, requestInterceptor62, converter63, profiler64, errorHandler65, log66, logLevel72);
        retrofit.RestAdapter.Builder builder75 = builder53.setLog(log66);
        retrofit.RestAdapter.Builder builder76 = builder50.setLog(log66);
        retrofit.Profiler profiler77 = null;
        builder76.profiler = profiler77;
        retrofit.RestAdapter.LogLevel logLevel79 = builder76.logLevel;
        builder20.logLevel = logLevel79;
        java.lang.reflect.Method method81 = null;
        java.lang.Object[] objArray82 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj83 = restHandler18.invoke((java.lang.Object) logLevel79, method81, objArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(provider16);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(serializedObjectSupporter19);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(server22);
        org.junit.Assert.assertNotNull(request37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "http://example.com/" + "'", str39, "http://example.com/");
        org.junit.Assert.assertNotNull(server40);
        org.junit.Assert.assertNotNull(request41);
        org.junit.Assert.assertNotNull(gsonConverter42);
        org.junit.Assert.assertNotNull(gsonConverter43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(executor51);
        org.junit.Assert.assertNull(server52);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "default" + "'", str58, "default");
        org.junit.Assert.assertNotNull(log66);
        org.junit.Assert.assertNull(server68);
        org.junit.Assert.assertNull(executor71);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1220");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter10.new RestHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter10.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter10.getrequestInterceptor();
        java.util.concurrent.Executor executor17 = restAdapter10.getcallbackExecutor();
        retrofit.converter.Converter converter18 = restAdapter10.getconverter();
        retrofit.SerializedObjectSupporter serializedObjectSupporter19 = restAdapter10.serializedObjectSupporter;
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter10.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor21 = restAdapter10.requestInterceptor;
        retrofit.ErrorHandler errorHandler22 = restAdapter10.geterrorHandler();
        retrofit.RequestInterceptor requestInterceptor23 = restAdapter10.getrequestInterceptor();
        retrofit.Profiler profiler24 = restAdapter10.getprofiler();
        retrofit.client.Client.Provider provider25 = restAdapter10.getclientProvider();
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(converter18);
        org.junit.Assert.assertNull(serializedObjectSupporter19);
        org.junit.Assert.assertNull(requestInterceptor21);
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNull(requestInterceptor23);
        org.junit.Assert.assertNull(profiler24);
        org.junit.Assert.assertNull(provider25);
    }

    @Test
    public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1221");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.converter.Converter converter2 = null;
        builder0.converter = converter2;
        java.util.concurrent.Executor executor4 = builder0.httpExecutor;
        retrofit.Profiler profiler5 = builder0.profiler;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider7 = null;
        builder6.setclientProvider(provider7);
        retrofit.Server server10 = new retrofit.Server("Retrofit-");
        java.lang.String str11 = server10.name;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.Server server21 = builder20.server;
        java.util.concurrent.Executor executor22 = null;
        builder20.httpExecutor = executor22;
        java.util.concurrent.Executor executor24 = builder20.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.FULL;
        builder20.logLevel = logLevel25;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server10, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log19, logLevel25);
        retrofit.RestAdapter.Builder builder28 = builder6.setLog(log19);
        log19.log("default");
        log19.log("GET");
        retrofit.RestAdapter.Builder builder33 = builder0.setLog(log19);
        retrofit.client.Client client34 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder35 = builder33.setClient(client34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(profiler5);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "default" + "'", str11, "default");
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertNull(server21);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1222");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.Server server2 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter3 = builder0.serializedObjectSupporter;
        retrofit.converter.Converter converter4 = builder0.converter;
        retrofit.Server server5 = null;
        retrofit.client.Client.Provider provider6 = null;
        java.util.concurrent.Executor executor7 = null;
        java.util.concurrent.Executor executor8 = null;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        retrofit.converter.Converter converter10 = null;
        retrofit.Profiler profiler11 = null;
        retrofit.ErrorHandler errorHandler12 = null;
        retrofit.RestAdapter.Log log13 = null;
        retrofit.RestAdapter.LogLevel logLevel14 = null;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter(server5, provider6, executor7, executor8, requestInterceptor9, converter10, profiler11, errorHandler12, log13, logLevel14);
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request17 = serializedObjectSupporter16.deserializeObjectRequest6();
        restAdapter15.serializedObjectSupporter = serializedObjectSupporter16;
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter16.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter16.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter21 = serializedObjectSupporter16.deserializeObjectConverter1();
        retrofit.client.Request request22 = serializedObjectSupporter16.deserializeObjectRequest5();
        retrofit.RequestInterceptor requestInterceptor23 = serializedObjectSupporter16.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder24 = builder0.setRequestInterceptor(requestInterceptor23);
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor27 = builder26.getcallbackExecutor();
        retrofit.Server server28 = builder26.server;
        retrofit.Server server31 = new retrofit.Server("Retrofit-Idle", "Retrofit-");
        java.lang.String str32 = server31.getapiUrl();
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter37 = new retrofit.SerializedObjectSupporter();
        java.lang.String str38 = serializedObjectSupporter37.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter39 = serializedObjectSupporter37.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter40 = serializedObjectSupporter37.deserializeObjectConverter7();
        retrofit.Profiler profiler41 = null;
        retrofit.ErrorHandler errorHandler42 = null;
        retrofit.RestAdapter.Log log43 = null;
        retrofit.Server server44 = null;
        retrofit.client.Client.Provider provider45 = null;
        java.util.concurrent.Executor executor46 = null;
        java.util.concurrent.Executor executor47 = null;
        retrofit.RequestInterceptor requestInterceptor48 = null;
        retrofit.converter.Converter converter49 = null;
        retrofit.Profiler profiler50 = null;
        retrofit.ErrorHandler errorHandler51 = null;
        retrofit.RestAdapter.Log log52 = null;
        retrofit.RestAdapter.LogLevel logLevel53 = null;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter(server44, provider45, executor46, executor47, requestInterceptor48, converter49, profiler50, errorHandler51, log52, logLevel53);
        retrofit.RestAdapter.RestHandler restHandler55 = restAdapter54.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler56 = restAdapter54.new RestHandler();
        java.util.concurrent.Executor executor57 = restAdapter54.getcallbackExecutor();
        retrofit.RestAdapter.RestHandler restHandler58 = restAdapter54.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter54.logLevel = logLevel59;
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter(server31, provider33, executor34, executor35, requestInterceptor36, (retrofit.converter.Converter) gsonConverter40, profiler41, errorHandler42, log43, logLevel59);
        retrofit.RestAdapter.LogLevel logLevel62 = restAdapter61.logLevel;
        retrofit.RestAdapter.Builder builder63 = builder26.setLogLevel(logLevel62);
        retrofit.SerializedObjectSupporter serializedObjectSupporter64 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request65 = serializedObjectSupporter64.deserializeObjectRequest2();
        retrofit.converter.GsonConverter gsonConverter66 = serializedObjectSupporter64.deserializeObjectConverter4();
        retrofit.RequestInterceptor requestInterceptor67 = serializedObjectSupporter64.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder68 = builder63.setRequestInterceptor(requestInterceptor67);
        retrofit.RestAdapter.Builder builder69 = builder0.setRequestInterceptor(requestInterceptor67);
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor71 = builder70.getcallbackExecutor();
        retrofit.ErrorHandler errorHandler72 = builder70.errorHandler;
        java.util.concurrent.Executor executor73 = null;
        builder70.setcallbackExecutor(executor73);
        builder70.ensureSaneDefaults();
        java.util.concurrent.Executor executor76 = builder70.getcallbackExecutor();
        builder69.sethttpExecutor(executor76);
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertNull(serializedObjectSupporter3);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNotNull(gsonConverter21);
        org.junit.Assert.assertNotNull(request22);
        org.junit.Assert.assertNotNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(server28);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Retrofit-Idle" + "'", str32, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Retrofit-Idle" + "'", str38, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter39);
        org.junit.Assert.assertNotNull(gsonConverter40);
        org.junit.Assert.assertNull(executor57);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(request65);
        org.junit.Assert.assertNotNull(gsonConverter66);
        org.junit.Assert.assertNotNull(requestInterceptor67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNull(executor71);
        org.junit.Assert.assertNull(errorHandler72);
        org.junit.Assert.assertNotNull(executor76);
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1223");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.Server server2 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter3 = builder0.serializedObjectSupporter;
        retrofit.converter.Converter converter4 = builder0.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter5 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request6 = serializedObjectSupporter5.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter5.deserializeObjectConverter1();
        retrofit.client.Request request8 = serializedObjectSupporter5.deserializeObjectRequest7();
        builder0.serializedObjectSupporter = serializedObjectSupporter5;
        retrofit.client.Request request10 = serializedObjectSupporter5.deserializeObjectRequest8();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertNull(serializedObjectSupporter3);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertNotNull(request6);
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertNotNull(request8);
        org.junit.Assert.assertNotNull(request10);
    }

    @Test
    public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1224");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter10.new RestHandler();
        retrofit.converter.Converter converter13 = restAdapter10.converter;
        retrofit.RestAdapter.Log log14 = restAdapter10.log;
        retrofit.RestAdapter.LogLevel logLevel15 = restAdapter10.logLevel;
        retrofit.RestAdapter.Log log16 = restAdapter10.log;
        java.util.concurrent.Executor executor17 = restAdapter10.httpExecutor;
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertNull(log14);
        org.junit.Assert.assertNull(logLevel15);
        org.junit.Assert.assertNull(log16);
        org.junit.Assert.assertNull(executor17);
    }

    @Test
    public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1225");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = null;
        builder0.setclientProvider(provider1);
        retrofit.Server server4 = new retrofit.Server("Retrofit-");
        java.lang.String str5 = server4.name;
        retrofit.client.Client.Provider provider6 = null;
        java.util.concurrent.Executor executor7 = null;
        java.util.concurrent.Executor executor8 = null;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        retrofit.converter.Converter converter10 = null;
        retrofit.Profiler profiler11 = null;
        retrofit.ErrorHandler errorHandler12 = null;
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.Server server15 = builder14.server;
        java.util.concurrent.Executor executor16 = null;
        builder14.httpExecutor = executor16;
        java.util.concurrent.Executor executor18 = builder14.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.FULL;
        builder14.logLevel = logLevel19;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter(server4, provider6, executor7, executor8, requestInterceptor9, converter10, profiler11, errorHandler12, log13, logLevel19);
        retrofit.RestAdapter.Builder builder22 = builder0.setLog(log13);
        retrofit.Profiler profiler23 = builder22.profiler;
        java.util.concurrent.Executor executor24 = null;
        builder22.setcallbackExecutor(executor24);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "default" + "'", str5, "default");
        org.junit.Assert.assertNotNull(log13);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(profiler23);
    }

    @Test
    public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1226");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.Server server2 = builder0.server;
        retrofit.Server server5 = new retrofit.Server("default", "");
        retrofit.RestAdapter.Builder builder6 = builder0.setServer(server5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = builder7.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor9 = null;
        builder7.requestInterceptor = requestInterceptor9;
        java.util.concurrent.Executor executor11 = builder7.callbackExecutor;
        retrofit.RestAdapter.Builder builder13 = builder7.setServer("default");
        retrofit.SerializedObjectSupporter serializedObjectSupporter14 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request15 = serializedObjectSupporter14.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter14.deserializeObjectConverter1();
        retrofit.RestAdapter.Builder builder17 = builder7.setConverter((retrofit.converter.Converter) gsonConverter16);
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor19 = builder18.getcallbackExecutor();
        retrofit.Server server20 = builder18.server;
        retrofit.RestAdapter.Log log21 = builder18.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter22 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request23 = serializedObjectSupporter22.deserializeObjectRequest6();
        java.lang.String str24 = serializedObjectSupporter22.deserializeObjectString4();
        java.lang.String str25 = serializedObjectSupporter22.deserializeObjectString5();
        retrofit.ErrorHandler errorHandler26 = serializedObjectSupporter22.deserializeObjectErrorHandler1();
        builder18.errorHandler = errorHandler26;
        builder17.errorHandler = errorHandler26;
        retrofit.RestAdapter.Builder builder29 = builder6.setErrorHandler(errorHandler26);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor31 = builder30.getcallbackExecutor();
        retrofit.Server server32 = builder30.server;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider34 = null;
        builder33.setclientProvider(provider34);
        retrofit.Server server37 = new retrofit.Server("Retrofit-");
        java.lang.String str38 = server37.name;
        retrofit.client.Client.Provider provider39 = null;
        java.util.concurrent.Executor executor40 = null;
        java.util.concurrent.Executor executor41 = null;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        retrofit.converter.Converter converter43 = null;
        retrofit.Profiler profiler44 = null;
        retrofit.ErrorHandler errorHandler45 = null;
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.Server server48 = builder47.server;
        java.util.concurrent.Executor executor49 = null;
        builder47.httpExecutor = executor49;
        java.util.concurrent.Executor executor51 = builder47.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.FULL;
        builder47.logLevel = logLevel52;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter(server37, provider39, executor40, executor41, requestInterceptor42, converter43, profiler44, errorHandler45, log46, logLevel52);
        retrofit.RestAdapter.Builder builder55 = builder33.setLog(log46);
        retrofit.RestAdapter.Builder builder56 = builder30.setLog(log46);
        retrofit.Profiler profiler57 = null;
        builder56.profiler = profiler57;
        java.util.concurrent.Executor executor59 = null;
        builder56.sethttpExecutor(executor59);
        retrofit.RestAdapter.LogLevel logLevel61 = builder56.logLevel;
        builder6.logLevel = logLevel61;
        retrofit.Profiler profiler63 = null;
        builder6.profiler = profiler63;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(gsonConverter16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(server20);
        org.junit.Assert.assertNull(log21);
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "http://example.com/" + "'", str24, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "POST" + "'", str25, "POST");
        org.junit.Assert.assertNotNull(errorHandler26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNull(server32);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "default" + "'", str38, "default");
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertNull(server48);
        org.junit.Assert.assertNull(executor51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1227");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.Server server2 = builder0.server;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider4 = null;
        builder3.setclientProvider(provider4);
        retrofit.Server server7 = new retrofit.Server("Retrofit-");
        java.lang.String str8 = server7.name;
        retrofit.client.Client.Provider provider9 = null;
        java.util.concurrent.Executor executor10 = null;
        java.util.concurrent.Executor executor11 = null;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        retrofit.converter.Converter converter13 = null;
        retrofit.Profiler profiler14 = null;
        retrofit.ErrorHandler errorHandler15 = null;
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.Server server18 = builder17.server;
        java.util.concurrent.Executor executor19 = null;
        builder17.httpExecutor = executor19;
        java.util.concurrent.Executor executor21 = builder17.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.FULL;
        builder17.logLevel = logLevel22;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server7, provider9, executor10, executor11, requestInterceptor12, converter13, profiler14, errorHandler15, log16, logLevel22);
        retrofit.RestAdapter.Builder builder25 = builder3.setLog(log16);
        retrofit.RestAdapter.Builder builder26 = builder0.setLog(log16);
        builder26.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.Server server29 = builder28.server;
        java.util.concurrent.Executor executor30 = null;
        builder28.httpExecutor = executor30;
        java.util.concurrent.Executor executor32 = builder28.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.FULL;
        builder28.logLevel = logLevel33;
        retrofit.SerializedObjectSupporter serializedObjectSupporter35 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request36 = serializedObjectSupporter35.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter37 = serializedObjectSupporter35.deserializeObjectConverter1();
        retrofit.converter.GsonConverter gsonConverter38 = serializedObjectSupporter35.deserializeObjectConverter4();
        builder28.serializedObjectSupporter = serializedObjectSupporter35;
        retrofit.RestAdapter.Builder builder41 = builder28.setServer("http://example.com/");
        java.util.concurrent.Executor executor42 = builder41.gethttpExecutor();
        retrofit.RestAdapter.Builder builder44 = builder41.setServer("Retrofit-Idle");
        retrofit.client.Client.Provider provider45 = builder41.clientProvider;
        retrofit.client.Client.Provider provider46 = builder41.clientProvider;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.Server server48 = builder47.server;
        retrofit.converter.Converter converter49 = null;
        builder47.converter = converter49;
        retrofit.ErrorHandler errorHandler51 = builder47.errorHandler;
        retrofit.Server server53 = new retrofit.Server("Retrofit-");
        java.lang.String str54 = server53.name;
        retrofit.client.Client.Provider provider55 = null;
        java.util.concurrent.Executor executor56 = null;
        java.util.concurrent.Executor executor57 = null;
        retrofit.RequestInterceptor requestInterceptor58 = null;
        retrofit.converter.Converter converter59 = null;
        retrofit.Profiler profiler60 = null;
        retrofit.ErrorHandler errorHandler61 = null;
        retrofit.RestAdapter.Log log62 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        retrofit.Server server64 = builder63.server;
        java.util.concurrent.Executor executor65 = null;
        builder63.httpExecutor = executor65;
        java.util.concurrent.Executor executor67 = builder63.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel68 = retrofit.RestAdapter.LogLevel.FULL;
        builder63.logLevel = logLevel68;
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter(server53, provider55, executor56, executor57, requestInterceptor58, converter59, profiler60, errorHandler61, log62, logLevel68);
        retrofit.RestAdapter.LogLevel logLevel71 = restAdapter70.getLogLevel();
        retrofit.RestAdapter.Builder builder72 = builder47.setLogLevel(logLevel71);
        retrofit.client.Client.Provider provider73 = builder47.clientProvider;
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        retrofit.Server server75 = builder74.server;
        java.util.concurrent.Executor executor76 = null;
        builder74.httpExecutor = executor76;
        retrofit.Server server78 = null;
        retrofit.client.Client.Provider provider79 = null;
        java.util.concurrent.Executor executor80 = null;
        java.util.concurrent.Executor executor81 = null;
        retrofit.RequestInterceptor requestInterceptor82 = null;
        retrofit.converter.Converter converter83 = null;
        retrofit.Profiler profiler84 = null;
        retrofit.ErrorHandler errorHandler85 = null;
        retrofit.RestAdapter.Log log86 = null;
        retrofit.RestAdapter.LogLevel logLevel87 = null;
        retrofit.RestAdapter restAdapter88 = new retrofit.RestAdapter(server78, provider79, executor80, executor81, requestInterceptor82, converter83, profiler84, errorHandler85, log86, logLevel87);
        retrofit.SerializedObjectSupporter serializedObjectSupporter89 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request90 = serializedObjectSupporter89.deserializeObjectRequest6();
        restAdapter88.serializedObjectSupporter = serializedObjectSupporter89;
        java.lang.String str92 = serializedObjectSupporter89.deserializeObjectString4();
        retrofit.Server server93 = serializedObjectSupporter89.deserializeObjectServer1();
        builder74.server = server93;
        java.lang.String str95 = server93.getDEFAULT_NAME();
        builder47.server = server93;
        java.lang.String str97 = server93.getDEFAULT_NAME();
        builder41.server = server93;
        retrofit.RestAdapter.Builder builder99 = builder26.setServer(server93);
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "default" + "'", str8, "default");
        org.junit.Assert.assertNotNull(log16);
        org.junit.Assert.assertNull(server18);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(server29);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(request36);
        org.junit.Assert.assertNotNull(gsonConverter37);
        org.junit.Assert.assertNotNull(gsonConverter38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(executor42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(provider45);
        org.junit.Assert.assertNull(provider46);
        org.junit.Assert.assertNull(server48);
        org.junit.Assert.assertNull(errorHandler51);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "default" + "'", str54, "default");
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertNull(server64);
        org.junit.Assert.assertNull(executor67);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNull(provider73);
        org.junit.Assert.assertNull(server75);
        org.junit.Assert.assertNotNull(request90);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "http://example.com/" + "'", str92, "http://example.com/");
        org.junit.Assert.assertNotNull(server93);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "default" + "'", str95, "default");
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "default" + "'", str97, "default");
        org.junit.Assert.assertNotNull(builder99);
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1228");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString2();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString5();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter0.deserializeObjectConverter3();
        retrofit.client.Request request7 = serializedObjectSupporter0.deserializeObjectRequest5();
        retrofit.client.Request request8 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.client.Request request9 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.converter.GsonConverter gsonConverter10 = serializedObjectSupporter0.deserializeObjectConverter6();
        java.lang.String str11 = serializedObjectSupporter0.deserializeObjectString1();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter12 = serializedObjectSupporter0.deserializeObjectLogLevel3();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Retrofit-Idle" + "'", str1, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "POST" + "'", str3, "POST");
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(gsonConverter6);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(request8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNotNull(gsonConverter10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
    }

    @Test
    public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1229");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        java.util.concurrent.Executor executor2 = null;
        builder0.httpExecutor = executor2;
        java.util.concurrent.Executor executor4 = builder0.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.FULL;
        builder0.logLevel = logLevel5;
        retrofit.SerializedObjectSupporter serializedObjectSupporter7 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request8 = serializedObjectSupporter7.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter7.deserializeObjectConverter1();
        retrofit.converter.GsonConverter gsonConverter10 = serializedObjectSupporter7.deserializeObjectConverter4();
        builder0.serializedObjectSupporter = serializedObjectSupporter7;
        retrofit.RestAdapter.Builder builder13 = builder0.setServer("http://example.com/");
        java.util.concurrent.Executor executor14 = builder13.gethttpExecutor();
        retrofit.RestAdapter.Builder builder16 = builder13.setServer("Retrofit-Idle");
        retrofit.client.Client.Provider provider17 = builder13.clientProvider;
        retrofit.client.Client.Provider provider18 = builder13.clientProvider;
        retrofit.RestAdapter restAdapter19 = builder13.build();
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(request8);
        org.junit.Assert.assertNotNull(gsonConverter9);
        org.junit.Assert.assertNotNull(gsonConverter10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(provider17);
        org.junit.Assert.assertNull(provider18);
        org.junit.Assert.assertNotNull(restAdapter19);
    }

    @Test
    public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1230");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.Server server2 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter3 = builder0.serializedObjectSupporter;
        retrofit.converter.Converter converter4 = builder0.converter;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor6 = builder5.getcallbackExecutor();
        retrofit.Server server7 = builder5.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter8 = builder5.serializedObjectSupporter;
        retrofit.converter.Converter converter9 = builder5.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter10 = new retrofit.SerializedObjectSupporter();
        java.lang.String str11 = serializedObjectSupporter10.deserializeObjectString2();
        retrofit.client.Request request12 = serializedObjectSupporter10.deserializeObjectRequest7();
        java.lang.String str13 = serializedObjectSupporter10.deserializeObjectString5();
        retrofit.Server server14 = serializedObjectSupporter10.deserializeObjectServer1();
        builder5.serializedObjectSupporter = serializedObjectSupporter10;
        retrofit.ErrorHandler errorHandler16 = builder5.errorHandler;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        java.lang.String str19 = serializedObjectSupporter18.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter18.deserializeObjectConverter3();
        builder17.serializedObjectSupporter = serializedObjectSupporter18;
        retrofit.RestAdapter.Log log22 = builder17.log;
        retrofit.RestAdapter.Builder builder24 = builder17.setServer("http://example.com/");
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = builder25.getcallbackExecutor();
        retrofit.Server server27 = builder25.server;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider29 = null;
        builder28.setclientProvider(provider29);
        retrofit.Server server32 = new retrofit.Server("Retrofit-");
        java.lang.String str33 = server32.name;
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.Server server43 = builder42.server;
        java.util.concurrent.Executor executor44 = null;
        builder42.httpExecutor = executor44;
        java.util.concurrent.Executor executor46 = builder42.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.FULL;
        builder42.logLevel = logLevel47;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server32, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log41, logLevel47);
        retrofit.RestAdapter.Builder builder50 = builder28.setLog(log41);
        retrofit.RestAdapter.Builder builder51 = builder25.setLog(log41);
        retrofit.Server server52 = null;
        retrofit.client.Client.Provider provider53 = null;
        java.util.concurrent.Executor executor54 = null;
        java.util.concurrent.Executor executor55 = null;
        retrofit.RequestInterceptor requestInterceptor56 = null;
        retrofit.converter.Converter converter57 = null;
        retrofit.Profiler profiler58 = null;
        retrofit.ErrorHandler errorHandler59 = null;
        retrofit.RestAdapter.Log log60 = null;
        retrofit.RestAdapter.LogLevel logLevel61 = null;
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter(server52, provider53, executor54, executor55, requestInterceptor56, converter57, profiler58, errorHandler59, log60, logLevel61);
        retrofit.SerializedObjectSupporter serializedObjectSupporter63 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request64 = serializedObjectSupporter63.deserializeObjectRequest6();
        restAdapter62.serializedObjectSupporter = serializedObjectSupporter63;
        retrofit.converter.GsonConverter gsonConverter66 = serializedObjectSupporter63.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter67 = serializedObjectSupporter63.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter68 = serializedObjectSupporter63.deserializeObjectConverter1();
        retrofit.client.Request request69 = serializedObjectSupporter63.deserializeObjectRequest5();
        retrofit.RequestInterceptor requestInterceptor70 = serializedObjectSupporter63.deserializeObjectRequestInterceptor1();
        builder51.requestInterceptor = requestInterceptor70;
        retrofit.RestAdapter.Builder builder72 = builder24.setRequestInterceptor(requestInterceptor70);
        builder5.requestInterceptor = requestInterceptor70;
        retrofit.RestAdapter.Builder builder74 = builder0.setRequestInterceptor(requestInterceptor70);
        retrofit.RestAdapter.Builder builder76 = builder0.setServer("http://example.com/");
        retrofit.Server server77 = builder76.server;
        java.lang.String str78 = server77.name;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertNull(serializedObjectSupporter3);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(server7);
        org.junit.Assert.assertNull(serializedObjectSupporter8);
        org.junit.Assert.assertNull(converter9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-Idle" + "'", str11, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "POST" + "'", str13, "POST");
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Retrofit-Idle" + "'", str19, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNull(log22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(server27);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "default" + "'", str33, "default");
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertNull(server43);
        org.junit.Assert.assertNull(executor46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(request64);
        org.junit.Assert.assertNotNull(gsonConverter66);
        org.junit.Assert.assertNotNull(gsonConverter67);
        org.junit.Assert.assertNotNull(gsonConverter68);
        org.junit.Assert.assertNotNull(request69);
        org.junit.Assert.assertNotNull(requestInterceptor70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(server77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "default" + "'", str78, "default");
    }

    @Test
    public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1231");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request12 = serializedObjectSupporter11.deserializeObjectRequest6();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter11;
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter11.deserializeObjectConverter7();
        java.lang.String str15 = serializedObjectSupporter11.deserializeObjectString1();
        retrofit.client.Request request16 = serializedObjectSupporter11.deserializeObjectRequest6();
        retrofit.Server server17 = serializedObjectSupporter11.deserializeObjectServer1();
        retrofit.client.Request request18 = serializedObjectSupporter11.deserializeObjectRequest5();
        retrofit.client.Request request19 = serializedObjectSupporter11.deserializeObjectRequest4();
        java.lang.String str20 = request19.url;
        java.lang.String str21 = request19.getMethod();
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Retrofit-" + "'", str15, "Retrofit-");
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(server17);
        org.junit.Assert.assertNotNull(request18);
        org.junit.Assert.assertNotNull(request19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "http://example.com/" + "'", str20, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "GET" + "'", str21, "GET");
    }

    @Test
    public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1232");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter1 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.Server server2 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.ErrorHandler errorHandler3 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest1();
        org.junit.Assert.assertNotNull(gsonConverter1);
        org.junit.Assert.assertNotNull(server2);
        org.junit.Assert.assertNotNull(errorHandler3);
        org.junit.Assert.assertNotNull(request4);
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1233");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.converter.Converter converter2 = null;
        builder0.converter = converter2;
        retrofit.Profiler profiler4 = builder0.profiler;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(profiler4);
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1234");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        java.lang.String str2 = serializedObjectSupporter1.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter1.deserializeObjectConverter3();
        builder0.serializedObjectSupporter = serializedObjectSupporter1;
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.RestAdapter.Builder builder7 = builder0.setServer("http://example.com/");
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = builder8.getcallbackExecutor();
        retrofit.Server server10 = builder8.server;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider12 = null;
        builder11.setclientProvider(provider12);
        retrofit.Server server15 = new retrofit.Server("Retrofit-");
        java.lang.String str16 = server15.name;
        retrofit.client.Client.Provider provider17 = null;
        java.util.concurrent.Executor executor18 = null;
        java.util.concurrent.Executor executor19 = null;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        retrofit.converter.Converter converter21 = null;
        retrofit.Profiler profiler22 = null;
        retrofit.ErrorHandler errorHandler23 = null;
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.Server server26 = builder25.server;
        java.util.concurrent.Executor executor27 = null;
        builder25.httpExecutor = executor27;
        java.util.concurrent.Executor executor29 = builder25.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.FULL;
        builder25.logLevel = logLevel30;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server15, provider17, executor18, executor19, requestInterceptor20, converter21, profiler22, errorHandler23, log24, logLevel30);
        retrofit.RestAdapter.Builder builder33 = builder11.setLog(log24);
        retrofit.RestAdapter.Builder builder34 = builder8.setLog(log24);
        retrofit.Server server35 = null;
        retrofit.client.Client.Provider provider36 = null;
        java.util.concurrent.Executor executor37 = null;
        java.util.concurrent.Executor executor38 = null;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        retrofit.converter.Converter converter40 = null;
        retrofit.Profiler profiler41 = null;
        retrofit.ErrorHandler errorHandler42 = null;
        retrofit.RestAdapter.Log log43 = null;
        retrofit.RestAdapter.LogLevel logLevel44 = null;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter(server35, provider36, executor37, executor38, requestInterceptor39, converter40, profiler41, errorHandler42, log43, logLevel44);
        retrofit.SerializedObjectSupporter serializedObjectSupporter46 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request47 = serializedObjectSupporter46.deserializeObjectRequest6();
        restAdapter45.serializedObjectSupporter = serializedObjectSupporter46;
        retrofit.converter.GsonConverter gsonConverter49 = serializedObjectSupporter46.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter50 = serializedObjectSupporter46.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter51 = serializedObjectSupporter46.deserializeObjectConverter1();
        retrofit.client.Request request52 = serializedObjectSupporter46.deserializeObjectRequest5();
        retrofit.RequestInterceptor requestInterceptor53 = serializedObjectSupporter46.deserializeObjectRequestInterceptor1();
        builder34.requestInterceptor = requestInterceptor53;
        retrofit.RestAdapter.Builder builder55 = builder7.setRequestInterceptor(requestInterceptor53);
        retrofit.RestAdapter.LogLevel logLevel56 = builder55.logLevel;
        retrofit.Server server57 = null;
        retrofit.client.Client.Provider provider58 = null;
        java.util.concurrent.Executor executor59 = null;
        java.util.concurrent.Executor executor60 = null;
        retrofit.RequestInterceptor requestInterceptor61 = null;
        retrofit.converter.Converter converter62 = null;
        retrofit.Profiler profiler63 = null;
        retrofit.ErrorHandler errorHandler64 = null;
        retrofit.RestAdapter.Log log65 = null;
        retrofit.RestAdapter.LogLevel logLevel66 = null;
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter(server57, provider58, executor59, executor60, requestInterceptor61, converter62, profiler63, errorHandler64, log65, logLevel66);
        retrofit.SerializedObjectSupporter serializedObjectSupporter68 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request69 = serializedObjectSupporter68.deserializeObjectRequest6();
        restAdapter67.serializedObjectSupporter = serializedObjectSupporter68;
        retrofit.converter.GsonConverter gsonConverter71 = serializedObjectSupporter68.deserializeObjectConverter7();
        retrofit.Server server72 = serializedObjectSupporter68.deserializeObjectServer1();
        retrofit.converter.GsonConverter gsonConverter73 = serializedObjectSupporter68.deserializeObjectConverter5();
        retrofit.Server server74 = serializedObjectSupporter68.deserializeObjectServer1();
        builder55.server = server74;
        retrofit.RestAdapter restAdapter76 = builder55.build();
        java.util.concurrent.Executor executor77 = restAdapter76.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler78 = restAdapter76.new RestHandler();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Retrofit-Idle" + "'", str2, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "default" + "'", str16, "default");
        org.junit.Assert.assertNotNull(log24);
        org.junit.Assert.assertNull(server26);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(request47);
        org.junit.Assert.assertNotNull(gsonConverter49);
        org.junit.Assert.assertNotNull(gsonConverter50);
        org.junit.Assert.assertNotNull(gsonConverter51);
        org.junit.Assert.assertNotNull(request52);
        org.junit.Assert.assertNotNull(requestInterceptor53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(request69);
        org.junit.Assert.assertNotNull(gsonConverter71);
        org.junit.Assert.assertNotNull(server72);
        org.junit.Assert.assertNotNull(gsonConverter73);
        org.junit.Assert.assertNotNull(server74);
        org.junit.Assert.assertNotNull(restAdapter76);
        org.junit.Assert.assertNotNull(executor77);
    }

    @Test
    public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1235");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.Profiler profiler2 = builder0.profiler;
        retrofit.client.Client.Provider provider3 = null;
        builder0.setclientProvider(provider3);
        retrofit.Server server6 = new retrofit.Server("Retrofit-");
        java.lang.String str7 = server6.name;
        builder0.server = server6;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider10 = null;
        builder9.setclientProvider(provider10);
        retrofit.ErrorHandler errorHandler12 = builder9.errorHandler;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.Server server14 = builder13.server;
        retrofit.converter.Converter converter15 = null;
        builder13.converter = converter15;
        retrofit.RestAdapter.Log log17 = builder13.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request19 = serializedObjectSupporter18.deserializeObjectRequest6();
        java.lang.String str20 = serializedObjectSupporter18.deserializeObjectString4();
        java.lang.String str21 = serializedObjectSupporter18.deserializeObjectString4();
        retrofit.ErrorHandler errorHandler22 = serializedObjectSupporter18.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder23 = builder13.setErrorHandler(errorHandler22);
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter25 = serializedObjectSupporter24.deserializeObjectConverter5();
        retrofit.Server server26 = serializedObjectSupporter24.deserializeObjectServer1();
        retrofit.ErrorHandler errorHandler27 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        builder13.errorHandler = errorHandler27;
        builder9.errorHandler = errorHandler27;
        builder0.errorHandler = errorHandler27;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.Server server32 = builder31.server;
        java.util.concurrent.Executor executor33 = null;
        builder31.httpExecutor = executor33;
        java.util.concurrent.Executor executor35 = builder31.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.FULL;
        builder31.logLevel = logLevel36;
        retrofit.ErrorHandler errorHandler38 = builder31.errorHandler;
        retrofit.converter.Converter converter39 = builder31.converter;
        java.util.concurrent.Executor executor40 = builder31.callbackExecutor;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter42 = new retrofit.SerializedObjectSupporter();
        java.lang.String str43 = serializedObjectSupporter42.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter44 = serializedObjectSupporter42.deserializeObjectConverter3();
        builder41.serializedObjectSupporter = serializedObjectSupporter42;
        retrofit.RestAdapter.Log log46 = builder41.log;
        retrofit.RestAdapter.Builder builder48 = builder41.setServer("http://example.com/");
        retrofit.RestAdapter.Builder builder50 = builder48.setServer("http://example.com");
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor52 = builder51.getcallbackExecutor();
        retrofit.ErrorHandler errorHandler53 = builder51.errorHandler;
        java.util.concurrent.Executor executor54 = null;
        builder51.setcallbackExecutor(executor54);
        builder51.ensureSaneDefaults();
        java.util.concurrent.Executor executor57 = builder51.gethttpExecutor();
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.Server server59 = builder58.server;
        retrofit.Profiler profiler60 = builder58.profiler;
        retrofit.client.Client.Provider provider61 = null;
        builder58.setclientProvider(provider61);
        java.util.concurrent.Executor executor63 = builder58.getcallbackExecutor();
        java.util.concurrent.Executor executor64 = builder58.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor66 = builder65.getcallbackExecutor();
        retrofit.Server server67 = builder65.server;
        retrofit.client.Client.Provider provider68 = builder65.clientProvider;
        retrofit.Server server71 = new retrofit.Server("Retrofit-Idle", "Retrofit-");
        java.lang.String str72 = server71.getapiUrl();
        java.lang.String str73 = server71.getDEFAULT_NAME();
        retrofit.RestAdapter.Builder builder74 = builder65.setServer(server71);
        retrofit.Server server76 = new retrofit.Server("hi!");
        java.lang.String str77 = server76.name;
        retrofit.RestAdapter.Builder builder78 = builder74.setServer(server76);
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor80 = builder79.getcallbackExecutor();
        retrofit.ErrorHandler errorHandler81 = builder79.errorHandler;
        java.util.concurrent.Executor executor82 = null;
        builder79.setcallbackExecutor(executor82);
        builder79.ensureSaneDefaults();
        java.util.concurrent.Executor executor85 = builder79.gethttpExecutor();
        java.util.concurrent.Executor executor86 = builder79.httpExecutor;
        builder78.sethttpExecutor(executor86);
        builder58.callbackExecutor = executor86;
        retrofit.RestAdapter.Builder builder89 = builder48.setExecutors(executor57, executor86);
        builder31.sethttpExecutor(executor86);
        builder0.sethttpExecutor(executor86);
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "default" + "'", str7, "default");
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(server14);
        org.junit.Assert.assertNull(log17);
        org.junit.Assert.assertNotNull(request19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "http://example.com/" + "'", str20, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "http://example.com/" + "'", str21, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(gsonConverter25);
        org.junit.Assert.assertNotNull(server26);
        org.junit.Assert.assertNotNull(errorHandler27);
        org.junit.Assert.assertNull(server32);
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(errorHandler38);
        org.junit.Assert.assertNull(converter39);
        org.junit.Assert.assertNull(executor40);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Retrofit-Idle" + "'", str43, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter44);
        org.junit.Assert.assertNull(log46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(executor52);
        org.junit.Assert.assertNull(errorHandler53);
        org.junit.Assert.assertNotNull(executor57);
        org.junit.Assert.assertNull(server59);
        org.junit.Assert.assertNull(profiler60);
        org.junit.Assert.assertNull(executor63);
        org.junit.Assert.assertNull(executor64);
        org.junit.Assert.assertNull(executor66);
        org.junit.Assert.assertNull(server67);
        org.junit.Assert.assertNull(provider68);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Retrofit-Idle" + "'", str72, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "default" + "'", str73, "default");
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "default" + "'", str77, "default");
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNull(executor80);
        org.junit.Assert.assertNull(errorHandler81);
        org.junit.Assert.assertNotNull(executor85);
        org.junit.Assert.assertNotNull(executor86);
        org.junit.Assert.assertNotNull(builder89);
    }

    @Test
    public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1236");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        java.lang.String str2 = serializedObjectSupporter1.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter1.deserializeObjectConverter3();
        builder0.serializedObjectSupporter = serializedObjectSupporter1;
        java.util.concurrent.Executor executor5 = null;
        builder0.callbackExecutor = executor5;
        retrofit.SerializedObjectSupporter serializedObjectSupporter7 = builder0.serializedObjectSupporter;
        retrofit.converter.Converter converter8 = builder0.converter;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        builder0.logLevel = logLevel9;
        java.util.concurrent.Executor executor11 = builder0.callbackExecutor;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Retrofit-Idle" + "'", str2, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(serializedObjectSupporter7);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNull(executor11);
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1237");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor2 = null;
        builder0.requestInterceptor = requestInterceptor2;
        java.util.concurrent.Executor executor4 = null;
        builder0.setcallbackExecutor(executor4);
        retrofit.RequestInterceptor requestInterceptor6 = builder0.requestInterceptor;
        java.util.concurrent.Executor executor7 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter9 = new retrofit.SerializedObjectSupporter();
        java.lang.String str10 = serializedObjectSupporter9.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter11 = serializedObjectSupporter9.deserializeObjectConverter3();
        builder8.serializedObjectSupporter = serializedObjectSupporter9;
        retrofit.RestAdapter.Log log13 = builder8.log;
        retrofit.RestAdapter.Builder builder15 = builder8.setServer("http://example.com/");
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor17 = builder16.getcallbackExecutor();
        retrofit.Server server18 = builder16.server;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider20 = null;
        builder19.setclientProvider(provider20);
        retrofit.Server server23 = new retrofit.Server("Retrofit-");
        java.lang.String str24 = server23.name;
        retrofit.client.Client.Provider provider25 = null;
        java.util.concurrent.Executor executor26 = null;
        java.util.concurrent.Executor executor27 = null;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        retrofit.converter.Converter converter29 = null;
        retrofit.Profiler profiler30 = null;
        retrofit.ErrorHandler errorHandler31 = null;
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.Server server34 = builder33.server;
        java.util.concurrent.Executor executor35 = null;
        builder33.httpExecutor = executor35;
        java.util.concurrent.Executor executor37 = builder33.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.FULL;
        builder33.logLevel = logLevel38;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server23, provider25, executor26, executor27, requestInterceptor28, converter29, profiler30, errorHandler31, log32, logLevel38);
        retrofit.RestAdapter.Builder builder41 = builder19.setLog(log32);
        retrofit.RestAdapter.Builder builder42 = builder16.setLog(log32);
        retrofit.Server server43 = null;
        retrofit.client.Client.Provider provider44 = null;
        java.util.concurrent.Executor executor45 = null;
        java.util.concurrent.Executor executor46 = null;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        retrofit.converter.Converter converter48 = null;
        retrofit.Profiler profiler49 = null;
        retrofit.ErrorHandler errorHandler50 = null;
        retrofit.RestAdapter.Log log51 = null;
        retrofit.RestAdapter.LogLevel logLevel52 = null;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server43, provider44, executor45, executor46, requestInterceptor47, converter48, profiler49, errorHandler50, log51, logLevel52);
        retrofit.SerializedObjectSupporter serializedObjectSupporter54 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request55 = serializedObjectSupporter54.deserializeObjectRequest6();
        restAdapter53.serializedObjectSupporter = serializedObjectSupporter54;
        retrofit.converter.GsonConverter gsonConverter57 = serializedObjectSupporter54.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter58 = serializedObjectSupporter54.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter59 = serializedObjectSupporter54.deserializeObjectConverter1();
        retrofit.client.Request request60 = serializedObjectSupporter54.deserializeObjectRequest5();
        retrofit.RequestInterceptor requestInterceptor61 = serializedObjectSupporter54.deserializeObjectRequestInterceptor1();
        builder42.requestInterceptor = requestInterceptor61;
        retrofit.RestAdapter.Builder builder63 = builder15.setRequestInterceptor(requestInterceptor61);
        retrofit.RestAdapter.LogLevel logLevel64 = builder63.logLevel;
        retrofit.Server server65 = null;
        retrofit.client.Client.Provider provider66 = null;
        java.util.concurrent.Executor executor67 = null;
        java.util.concurrent.Executor executor68 = null;
        retrofit.RequestInterceptor requestInterceptor69 = null;
        retrofit.converter.Converter converter70 = null;
        retrofit.Profiler profiler71 = null;
        retrofit.ErrorHandler errorHandler72 = null;
        retrofit.RestAdapter.Log log73 = null;
        retrofit.RestAdapter.LogLevel logLevel74 = null;
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter(server65, provider66, executor67, executor68, requestInterceptor69, converter70, profiler71, errorHandler72, log73, logLevel74);
        retrofit.SerializedObjectSupporter serializedObjectSupporter76 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request77 = serializedObjectSupporter76.deserializeObjectRequest6();
        restAdapter75.serializedObjectSupporter = serializedObjectSupporter76;
        retrofit.converter.GsonConverter gsonConverter79 = serializedObjectSupporter76.deserializeObjectConverter7();
        retrofit.Server server80 = serializedObjectSupporter76.deserializeObjectServer1();
        retrofit.converter.GsonConverter gsonConverter81 = serializedObjectSupporter76.deserializeObjectConverter5();
        retrofit.Server server82 = serializedObjectSupporter76.deserializeObjectServer1();
        builder63.server = server82;
        retrofit.RestAdapter restAdapter84 = builder63.build();
        java.util.concurrent.Executor executor85 = restAdapter84.httpExecutor;
        builder0.callbackExecutor = executor85;
        java.util.concurrent.Executor executor87 = builder0.callbackExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter88 = builder0.serializedObjectSupporter;
        retrofit.Profiler profiler89 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder90 = builder0.setProfiler(profiler89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Retrofit-Idle" + "'", str10, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter11);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(server18);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "default" + "'", str24, "default");
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertNull(server34);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(request55);
        org.junit.Assert.assertNotNull(gsonConverter57);
        org.junit.Assert.assertNotNull(gsonConverter58);
        org.junit.Assert.assertNotNull(gsonConverter59);
        org.junit.Assert.assertNotNull(request60);
        org.junit.Assert.assertNotNull(requestInterceptor61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(request77);
        org.junit.Assert.assertNotNull(gsonConverter79);
        org.junit.Assert.assertNotNull(server80);
        org.junit.Assert.assertNotNull(gsonConverter81);
        org.junit.Assert.assertNotNull(server82);
        org.junit.Assert.assertNotNull(restAdapter84);
        org.junit.Assert.assertNotNull(executor85);
        org.junit.Assert.assertNotNull(executor87);
        org.junit.Assert.assertNull(serializedObjectSupporter88);
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1238");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.Server server2 = builder0.server;
        retrofit.RestAdapter.Log log3 = builder0.log;
        retrofit.Server server4 = builder0.server;
        retrofit.Server server5 = builder0.server;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.Server server7 = builder6.server;
        java.util.concurrent.Executor executor8 = null;
        builder6.httpExecutor = executor8;
        java.util.concurrent.Executor executor10 = null;
        builder6.callbackExecutor = executor10;
        java.util.concurrent.Executor executor12 = null;
        builder6.callbackExecutor = executor12;
        builder6.ensureSaneDefaults();
        retrofit.client.Client.Provider provider15 = builder6.clientProvider;
        retrofit.Server server17 = new retrofit.Server("http://example.com/");
        java.lang.String str18 = server17.apiUrl;
        java.lang.String str19 = server17.getName();
        retrofit.RestAdapter.Builder builder20 = builder6.setServer(server17);
        builder0.server = server17;
        retrofit.Server server22 = builder0.server;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertNull(log3);
        org.junit.Assert.assertNull(server4);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNull(server7);
        org.junit.Assert.assertNotNull(provider15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "default" + "'", str19, "default");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(server22);
    }

    @Test
    public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1239");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        java.lang.String str2 = serializedObjectSupporter1.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter1.deserializeObjectConverter3();
        builder0.serializedObjectSupporter = serializedObjectSupporter1;
        java.util.concurrent.Executor executor5 = null;
        builder0.callbackExecutor = executor5;
        java.util.concurrent.Executor executor7 = builder0.callbackExecutor;
        java.util.concurrent.Executor executor8 = null;
        builder0.httpExecutor = executor8;
        retrofit.RestAdapter.Builder builder11 = builder0.setServer("hi!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Retrofit-Idle" + "'", str2, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1240");
        retrofit.Server server1 = new retrofit.Server("Retrofit-");
        java.lang.String str2 = server1.name;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.Server server12 = builder11.server;
        java.util.concurrent.Executor executor13 = null;
        builder11.httpExecutor = executor13;
        java.util.concurrent.Executor executor15 = builder11.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.FULL;
        builder11.logLevel = logLevel16;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter(server1, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log10, logLevel16);
        java.util.concurrent.Executor executor19 = restAdapter18.getcallbackExecutor();
        int int20 = restAdapter18.getLOG_CHUNK_SIZE();
        retrofit.ErrorHandler errorHandler21 = restAdapter18.errorHandler;
        retrofit.converter.Converter converter22 = restAdapter18.converter;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "default" + "'", str2, "default");
        org.junit.Assert.assertNotNull(log10);
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4000 + "'", int20 == 4000);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(converter22);
    }

    @Test
    public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1241");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest8();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest3();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter1();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter5 = serializedObjectSupporter0.deserializeObjectLogLevel2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(gsonConverter4);
    }

    @Test
    public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1242");
        retrofit.Server server1 = new retrofit.Server("Retrofit-");
        java.lang.String str2 = server1.name;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.Server server12 = builder11.server;
        java.util.concurrent.Executor executor13 = null;
        builder11.httpExecutor = executor13;
        java.util.concurrent.Executor executor15 = builder11.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.FULL;
        builder11.logLevel = logLevel16;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter(server1, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log10, logLevel16);
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter18.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor20 = restAdapter18.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter21 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request22 = serializedObjectSupporter21.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter23 = serializedObjectSupporter21.deserializeObjectConverter1();
        retrofit.client.Request request24 = serializedObjectSupporter21.deserializeObjectRequest5();
        retrofit.client.Request request25 = serializedObjectSupporter21.deserializeObjectRequest5();
        retrofit.client.Request request26 = restAdapter18.logAndReplaceRequest(request25);
        retrofit.RequestInterceptor requestInterceptor27 = restAdapter18.getrequestInterceptor();
        retrofit.converter.Converter converter28 = restAdapter18.getconverter();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "default" + "'", str2, "default");
        org.junit.Assert.assertNotNull(log10);
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(requestInterceptor20);
        org.junit.Assert.assertNotNull(request22);
        org.junit.Assert.assertNotNull(gsonConverter23);
        org.junit.Assert.assertNotNull(request24);
        org.junit.Assert.assertNotNull(request25);
        org.junit.Assert.assertNotNull(request26);
        org.junit.Assert.assertNull(requestInterceptor27);
        org.junit.Assert.assertNull(converter28);
    }

    @Test
    public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1243");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.converter.Converter converter2 = null;
        builder0.converter = converter2;
        retrofit.RestAdapter.Log log4 = builder0.log;
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        retrofit.Server server6 = builder0.server;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = builder7.getcallbackExecutor();
        retrofit.Server server10 = new retrofit.Server("Retrofit-");
        java.lang.String str11 = server10.name;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.Server server21 = builder20.server;
        java.util.concurrent.Executor executor22 = null;
        builder20.httpExecutor = executor22;
        java.util.concurrent.Executor executor24 = builder20.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.FULL;
        builder20.logLevel = logLevel25;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server10, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log19, logLevel25);
        java.util.concurrent.Executor executor28 = restAdapter27.getcallbackExecutor();
        int int29 = restAdapter27.getLOG_CHUNK_SIZE();
        java.util.List<retrofit.client.Header> headerList32 = null;
        retrofit.mime.TypedOutput typedOutput33 = null;
        retrofit.client.Request request34 = new retrofit.client.Request("", "", headerList32, typedOutput33);
        retrofit.mime.TypedOutput typedOutput35 = request34.getBody();
        java.lang.String str36 = request34.url;
        retrofit.mime.TypedOutput typedOutput37 = request34.getBody();
        java.lang.String str38 = request34.getUrl();
        retrofit.client.Request request39 = restAdapter27.logAndReplaceRequest(request34);
        retrofit.RequestInterceptor requestInterceptor40 = restAdapter27.getrequestInterceptor();
        retrofit.Profiler profiler41 = restAdapter27.getprofiler();
        retrofit.Server server42 = restAdapter27.getserver();
        retrofit.Server server44 = new retrofit.Server("Retrofit-");
        java.lang.String str45 = server44.name;
        retrofit.client.Client.Provider provider46 = null;
        java.util.concurrent.Executor executor47 = null;
        java.util.concurrent.Executor executor48 = null;
        retrofit.RequestInterceptor requestInterceptor49 = null;
        retrofit.converter.Converter converter50 = null;
        retrofit.Profiler profiler51 = null;
        retrofit.ErrorHandler errorHandler52 = null;
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.Server server55 = builder54.server;
        java.util.concurrent.Executor executor56 = null;
        builder54.httpExecutor = executor56;
        java.util.concurrent.Executor executor58 = builder54.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.FULL;
        builder54.logLevel = logLevel59;
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter(server44, provider46, executor47, executor48, requestInterceptor49, converter50, profiler51, errorHandler52, log53, logLevel59);
        java.util.concurrent.Executor executor62 = restAdapter61.getcallbackExecutor();
        retrofit.converter.Converter converter63 = restAdapter61.converter;
        retrofit.RestAdapter.LogLevel logLevel64 = restAdapter61.logLevel;
        restAdapter27.logLevel = logLevel64;
        builder7.logLevel = logLevel64;
        builder0.logLevel = logLevel64;
        retrofit.SerializedObjectSupporter serializedObjectSupporter68 = builder0.serializedObjectSupporter;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "default" + "'", str11, "default");
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertNull(server21);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4000 + "'", int29 == 4000);
        org.junit.Assert.assertNull(typedOutput35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNull(typedOutput37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(request39);
        org.junit.Assert.assertNull(requestInterceptor40);
        org.junit.Assert.assertNull(profiler41);
        org.junit.Assert.assertNotNull(server42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "default" + "'", str45, "default");
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertNull(server55);
        org.junit.Assert.assertNull(executor58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor62);
        org.junit.Assert.assertNull(converter63);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(serializedObjectSupporter68);
    }

    @Test
    public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1244");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter1();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString4();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest3();
        retrofit.client.Request request6 = serializedObjectSupporter0.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.client.Request request8 = serializedObjectSupporter0.deserializeObjectRequest8();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "http://example.com/" + "'", str4, "http://example.com/");
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(request6);
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertNotNull(request8);
    }

    @Test
    public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1245");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        java.lang.String str2 = serializedObjectSupporter1.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter1.deserializeObjectConverter3();
        builder0.serializedObjectSupporter = serializedObjectSupporter1;
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.RestAdapter.Builder builder7 = builder0.setServer("http://example.com/");
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = builder8.getcallbackExecutor();
        retrofit.Server server10 = builder8.server;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider12 = null;
        builder11.setclientProvider(provider12);
        retrofit.Server server15 = new retrofit.Server("Retrofit-");
        java.lang.String str16 = server15.name;
        retrofit.client.Client.Provider provider17 = null;
        java.util.concurrent.Executor executor18 = null;
        java.util.concurrent.Executor executor19 = null;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        retrofit.converter.Converter converter21 = null;
        retrofit.Profiler profiler22 = null;
        retrofit.ErrorHandler errorHandler23 = null;
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.Server server26 = builder25.server;
        java.util.concurrent.Executor executor27 = null;
        builder25.httpExecutor = executor27;
        java.util.concurrent.Executor executor29 = builder25.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.FULL;
        builder25.logLevel = logLevel30;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server15, provider17, executor18, executor19, requestInterceptor20, converter21, profiler22, errorHandler23, log24, logLevel30);
        retrofit.RestAdapter.Builder builder33 = builder11.setLog(log24);
        retrofit.RestAdapter.Builder builder34 = builder8.setLog(log24);
        retrofit.Server server35 = null;
        retrofit.client.Client.Provider provider36 = null;
        java.util.concurrent.Executor executor37 = null;
        java.util.concurrent.Executor executor38 = null;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        retrofit.converter.Converter converter40 = null;
        retrofit.Profiler profiler41 = null;
        retrofit.ErrorHandler errorHandler42 = null;
        retrofit.RestAdapter.Log log43 = null;
        retrofit.RestAdapter.LogLevel logLevel44 = null;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter(server35, provider36, executor37, executor38, requestInterceptor39, converter40, profiler41, errorHandler42, log43, logLevel44);
        retrofit.SerializedObjectSupporter serializedObjectSupporter46 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request47 = serializedObjectSupporter46.deserializeObjectRequest6();
        restAdapter45.serializedObjectSupporter = serializedObjectSupporter46;
        retrofit.converter.GsonConverter gsonConverter49 = serializedObjectSupporter46.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter50 = serializedObjectSupporter46.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter51 = serializedObjectSupporter46.deserializeObjectConverter1();
        retrofit.client.Request request52 = serializedObjectSupporter46.deserializeObjectRequest5();
        retrofit.RequestInterceptor requestInterceptor53 = serializedObjectSupporter46.deserializeObjectRequestInterceptor1();
        builder34.requestInterceptor = requestInterceptor53;
        retrofit.RestAdapter.Builder builder55 = builder7.setRequestInterceptor(requestInterceptor53);
        retrofit.Server server56 = null;
        retrofit.client.Client.Provider provider57 = null;
        java.util.concurrent.Executor executor58 = null;
        java.util.concurrent.Executor executor59 = null;
        retrofit.RequestInterceptor requestInterceptor60 = null;
        retrofit.converter.Converter converter61 = null;
        retrofit.Profiler profiler62 = null;
        retrofit.ErrorHandler errorHandler63 = null;
        retrofit.RestAdapter.Log log64 = null;
        retrofit.RestAdapter.LogLevel logLevel65 = null;
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter(server56, provider57, executor58, executor59, requestInterceptor60, converter61, profiler62, errorHandler63, log64, logLevel65);
        retrofit.RestAdapter.RestHandler restHandler67 = restAdapter66.new RestHandler();
        retrofit.Server server68 = restAdapter66.server;
        retrofit.RestAdapter.LogLevel logLevel69 = restAdapter66.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel70 = null;
        restAdapter66.logLevel = logLevel70;
        retrofit.client.Client.Provider provider72 = restAdapter66.getclientProvider();
        retrofit.RestAdapter.RestHandler restHandler73 = restAdapter66.new RestHandler();
        java.lang.String str74 = restAdapter66.getIDLE_THREAD_NAME();
        retrofit.Server server75 = null;
        retrofit.client.Client.Provider provider76 = null;
        java.util.concurrent.Executor executor77 = null;
        java.util.concurrent.Executor executor78 = null;
        retrofit.RequestInterceptor requestInterceptor79 = null;
        retrofit.converter.Converter converter80 = null;
        retrofit.Profiler profiler81 = null;
        retrofit.ErrorHandler errorHandler82 = null;
        retrofit.RestAdapter.Log log83 = null;
        retrofit.RestAdapter.LogLevel logLevel84 = null;
        retrofit.RestAdapter restAdapter85 = new retrofit.RestAdapter(server75, provider76, executor77, executor78, requestInterceptor79, converter80, profiler81, errorHandler82, log83, logLevel84);
        retrofit.RestAdapter.RestHandler restHandler86 = restAdapter85.new RestHandler();
        retrofit.Server server87 = restAdapter85.server;
        retrofit.RestAdapter.LogLevel logLevel88 = restAdapter85.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel89 = null;
        restAdapter85.logLevel = logLevel89;
        retrofit.RestAdapter.LogLevel logLevel91 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter85.logLevel = logLevel91;
        restAdapter66.logLevel = logLevel91;
        builder55.logLevel = logLevel91;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Retrofit-Idle" + "'", str2, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "default" + "'", str16, "default");
        org.junit.Assert.assertNotNull(log24);
        org.junit.Assert.assertNull(server26);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(request47);
        org.junit.Assert.assertNotNull(gsonConverter49);
        org.junit.Assert.assertNotNull(gsonConverter50);
        org.junit.Assert.assertNotNull(gsonConverter51);
        org.junit.Assert.assertNotNull(request52);
        org.junit.Assert.assertNotNull(requestInterceptor53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(server68);
        org.junit.Assert.assertNull(logLevel69);
        org.junit.Assert.assertNull(provider72);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Retrofit-Idle" + "'", str74, "Retrofit-Idle");
        org.junit.Assert.assertNull(server87);
        org.junit.Assert.assertNull(logLevel88);
        org.junit.Assert.assertTrue("'" + logLevel91 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel91.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1246");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        java.lang.String str17 = serializedObjectSupporter16.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter18 = serializedObjectSupporter16.deserializeObjectConverter3();
        builder15.serializedObjectSupporter = serializedObjectSupporter16;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter16;
        retrofit.Server server21 = null;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = null;
        retrofit.RestAdapter.LogLevel logLevel30 = null;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel30);
        retrofit.RestAdapter.RestHandler restHandler32 = restAdapter31.new RestHandler();
        retrofit.Server server33 = restAdapter31.server;
        retrofit.RestAdapter.LogLevel logLevel34 = restAdapter31.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor35 = restAdapter31.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter36 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request37 = serializedObjectSupporter36.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter38 = serializedObjectSupporter36.deserializeObjectConverter1();
        java.lang.String str39 = serializedObjectSupporter36.deserializeObjectString4();
        java.lang.String str40 = serializedObjectSupporter36.deserializeObjectString4();
        restAdapter31.serializedObjectSupporter = serializedObjectSupporter36;
        retrofit.client.Request request42 = serializedObjectSupporter36.deserializeObjectRequest1();
        retrofit.converter.GsonConverter gsonConverter43 = serializedObjectSupporter36.deserializeObjectConverter1();
        retrofit.converter.GsonConverter gsonConverter44 = serializedObjectSupporter36.deserializeObjectConverter4();
        retrofit.client.Request request45 = serializedObjectSupporter36.deserializeObjectRequest1();
        retrofit.client.Request request46 = serializedObjectSupporter36.deserializeObjectRequest2();
        retrofit.client.Request request47 = serializedObjectSupporter36.deserializeObjectRequest6();
        retrofit.client.Request request48 = serializedObjectSupporter36.deserializeObjectRequest4();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request49 = restAdapter10.logAndReplaceRequest(request48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-Idle" + "'", str17, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter18);
        org.junit.Assert.assertNull(server33);
        org.junit.Assert.assertNull(logLevel34);
        org.junit.Assert.assertNull(requestInterceptor35);
        org.junit.Assert.assertNotNull(request37);
        org.junit.Assert.assertNotNull(gsonConverter38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "http://example.com/" + "'", str39, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "http://example.com/" + "'", str40, "http://example.com/");
        org.junit.Assert.assertNotNull(request42);
        org.junit.Assert.assertNotNull(gsonConverter43);
        org.junit.Assert.assertNotNull(gsonConverter44);
        org.junit.Assert.assertNotNull(request45);
        org.junit.Assert.assertNotNull(request46);
        org.junit.Assert.assertNotNull(request47);
        org.junit.Assert.assertNotNull(request48);
    }

    @Test
    public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1247");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel14 = null;
        restAdapter10.logLevel = logLevel14;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter10.logLevel = logLevel16;
        retrofit.client.Client.Provider provider18 = restAdapter10.clientProvider;
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter10.getLogLevel();
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(provider18);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1248");
        retrofit.Server server1 = new retrofit.Server("Retrofit-");
        java.lang.String str2 = server1.name;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.Server server12 = builder11.server;
        java.util.concurrent.Executor executor13 = null;
        builder11.httpExecutor = executor13;
        java.util.concurrent.Executor executor15 = builder11.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.FULL;
        builder11.logLevel = logLevel16;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter(server1, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log10, logLevel16);
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter18.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter18.new RestHandler();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "default" + "'", str2, "default");
        org.junit.Assert.assertNotNull(log10);
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.FULL));
    }

    @Test
    public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1249");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter1();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString4();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest4();
        retrofit.client.Request request6 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.client.Request request7 = serializedObjectSupporter0.deserializeObjectRequest3();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "http://example.com/" + "'", str4, "http://example.com/");
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(request6);
        org.junit.Assert.assertNotNull(request7);
    }

    @Test
    public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1250");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request16 = serializedObjectSupporter15.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter15.deserializeObjectConverter1();
        java.lang.String str18 = serializedObjectSupporter15.deserializeObjectString4();
        java.lang.String str19 = serializedObjectSupporter15.deserializeObjectString4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter15;
        retrofit.ErrorHandler errorHandler21 = restAdapter10.geterrorHandler();
        retrofit.Profiler profiler22 = restAdapter10.profiler;
        retrofit.converter.Converter converter23 = restAdapter10.converter;
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter10.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request26 = serializedObjectSupporter25.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter27 = serializedObjectSupporter25.deserializeObjectConverter1();
        java.lang.String str28 = serializedObjectSupporter25.deserializeObjectString4();
        java.lang.String str29 = serializedObjectSupporter25.deserializeObjectString1();
        retrofit.client.Request request30 = serializedObjectSupporter25.deserializeObjectRequest2();
        retrofit.Server server31 = serializedObjectSupporter25.deserializeObjectServer1();
        restHandler24.serializedObjectSupporter = serializedObjectSupporter25;
        retrofit.Server server33 = serializedObjectSupporter25.deserializeObjectServer1();
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(converter23);
        org.junit.Assert.assertNotNull(request26);
        org.junit.Assert.assertNotNull(gsonConverter27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "http://example.com/" + "'", str28, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Retrofit-" + "'", str29, "Retrofit-");
        org.junit.Assert.assertNotNull(request30);
        org.junit.Assert.assertNotNull(server31);
        org.junit.Assert.assertNotNull(server33);
    }

    @Test
    public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1251");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        java.lang.String str2 = serializedObjectSupporter1.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter1.deserializeObjectConverter3();
        builder0.serializedObjectSupporter = serializedObjectSupporter1;
        java.util.concurrent.Executor executor5 = null;
        builder0.callbackExecutor = executor5;
        retrofit.SerializedObjectSupporter serializedObjectSupporter7 = builder0.serializedObjectSupporter;
        java.lang.String str8 = serializedObjectSupporter7.deserializeObjectString1();
        retrofit.mime.TypedString typedString9 = serializedObjectSupporter7.deserializeObjectTypedOutput2();
        retrofit.client.Request request10 = serializedObjectSupporter7.deserializeObjectRequest5();
        retrofit.client.Request request11 = serializedObjectSupporter7.deserializeObjectRequest6();
        java.lang.String str12 = serializedObjectSupporter7.deserializeObjectString4();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter13 = serializedObjectSupporter7.deserializeObjectLogLevel2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Retrofit-Idle" + "'", str2, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(serializedObjectSupporter7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Retrofit-" + "'", str8, "Retrofit-");
        org.junit.Assert.assertNotNull(typedString9);
        org.junit.Assert.assertNotNull(request10);
        org.junit.Assert.assertNotNull(request11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "http://example.com/" + "'", str12, "http://example.com/");
    }

    @Test
    public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1252");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request16 = serializedObjectSupporter15.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter15.deserializeObjectConverter1();
        java.lang.String str18 = serializedObjectSupporter15.deserializeObjectString4();
        java.lang.String str19 = serializedObjectSupporter15.deserializeObjectString4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter15;
        retrofit.client.Request request21 = serializedObjectSupporter15.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter15.deserializeObjectConverter3();
        java.lang.String str23 = serializedObjectSupporter15.deserializeObjectString1();
        retrofit.client.Request request24 = serializedObjectSupporter15.deserializeObjectRequest5();
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertNotNull(request21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Retrofit-" + "'", str23, "Retrofit-");
        org.junit.Assert.assertNotNull(request24);
    }

    @Test
    public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1253");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.getconverter();
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = restAdapter10.serializedObjectSupporter;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        retrofit.RestAdapter.Log log14 = restAdapter10.log;
        java.lang.String str15 = restAdapter10.getIDLE_THREAD_NAME();
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(serializedObjectSupporter12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNull(log14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Retrofit-Idle" + "'", str15, "Retrofit-Idle");
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1254");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel14 = null;
        restAdapter10.logLevel = logLevel14;
        java.lang.String str16 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.Server server17 = restAdapter10.server;
        retrofit.converter.Converter converter18 = restAdapter10.getconverter();
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Retrofit-Idle" + "'", str16, "Retrofit-Idle");
        org.junit.Assert.assertNull(server17);
        org.junit.Assert.assertNull(converter18);
    }

    @Test
    public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1255");
        retrofit.Server server1 = new retrofit.Server("POST");
        retrofit.client.Client.Provider provider2 = null;
        java.util.concurrent.Executor executor3 = null;
        java.util.concurrent.Executor executor4 = null;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = null;
        retrofit.RestAdapter.LogLevel logLevel15 = null;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request18 = serializedObjectSupporter17.deserializeObjectRequest6();
        restAdapter16.serializedObjectSupporter = serializedObjectSupporter17;
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter17.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter21 = serializedObjectSupporter17.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter17.deserializeObjectConverter1();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request25 = serializedObjectSupporter24.deserializeObjectRequest6();
        java.lang.String str26 = serializedObjectSupporter24.deserializeObjectString4();
        java.lang.String str27 = serializedObjectSupporter24.deserializeObjectString5();
        retrofit.ErrorHandler errorHandler28 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor30 = builder29.getcallbackExecutor();
        retrofit.Server server31 = builder29.server;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider33 = null;
        builder32.setclientProvider(provider33);
        retrofit.Server server36 = new retrofit.Server("Retrofit-");
        java.lang.String str37 = server36.name;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.Server server47 = builder46.server;
        java.util.concurrent.Executor executor48 = null;
        builder46.httpExecutor = executor48;
        java.util.concurrent.Executor executor50 = builder46.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.FULL;
        builder46.logLevel = logLevel51;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server36, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log45, logLevel51);
        retrofit.RestAdapter.Builder builder54 = builder32.setLog(log45);
        retrofit.RestAdapter.Builder builder55 = builder29.setLog(log45);
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.Server server57 = builder56.server;
        retrofit.converter.Converter converter58 = null;
        builder56.converter = converter58;
        retrofit.RestAdapter.Log log60 = builder56.log;
        retrofit.RestAdapter.LogLevel logLevel61 = builder56.logLevel;
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter(server1, provider2, executor3, executor4, requestInterceptor5, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler28, log45, logLevel61);
        retrofit.SerializedObjectSupporter serializedObjectSupporter63 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request64 = serializedObjectSupporter63.deserializeObjectRequest6();
        java.lang.String str65 = serializedObjectSupporter63.deserializeObjectString4();
        java.lang.String str66 = serializedObjectSupporter63.deserializeObjectString4();
        retrofit.converter.GsonConverter gsonConverter67 = serializedObjectSupporter63.deserializeObjectConverter3();
        retrofit.ErrorHandler errorHandler68 = serializedObjectSupporter63.deserializeObjectErrorHandler1();
        retrofit.client.Request request69 = serializedObjectSupporter63.deserializeObjectRequest8();
        retrofit.client.Request request70 = restAdapter62.logAndReplaceRequest(request69);
        java.util.List<retrofit.client.Header> headerList71 = request70.headers;
        org.junit.Assert.assertNotNull(request18);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNotNull(gsonConverter21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(request25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "http://example.com/" + "'", str26, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "POST" + "'", str27, "POST");
        org.junit.Assert.assertNotNull(errorHandler28);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNull(server31);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "default" + "'", str37, "default");
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNull(server47);
        org.junit.Assert.assertNull(executor50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(server57);
        org.junit.Assert.assertNull(log60);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(request64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "http://example.com/" + "'", str65, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "http://example.com/" + "'", str66, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter67);
        org.junit.Assert.assertNotNull(errorHandler68);
        org.junit.Assert.assertNotNull(request69);
        org.junit.Assert.assertNotNull(request70);
        org.junit.Assert.assertNotNull(headerList71);
    }

    @Test
    public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1256");
        retrofit.Server server1 = new retrofit.Server("Retrofit-");
        java.lang.String str2 = server1.name;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.Server server12 = builder11.server;
        java.util.concurrent.Executor executor13 = null;
        builder11.httpExecutor = executor13;
        java.util.concurrent.Executor executor15 = builder11.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.FULL;
        builder11.logLevel = logLevel16;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter(server1, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log10, logLevel16);
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter18.new RestHandler();
        java.util.List<retrofit.client.Header> headerList22 = null;
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "", headerList22, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = request24.getBody();
        java.lang.String str26 = request24.url;
        java.util.List<retrofit.client.Header> headerList27 = request24.headers;
        retrofit.client.Request request28 = restAdapter18.logAndReplaceRequest(request24);
        java.lang.String str29 = request24.url;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "default" + "'", str2, "default");
        org.junit.Assert.assertNotNull(log10);
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(typedOutput25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(headerList27);
        org.junit.Assert.assertNotNull(request28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
    }

    @Test
    public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1257");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        java.lang.String str2 = serializedObjectSupporter1.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter1.deserializeObjectConverter3();
        builder0.serializedObjectSupporter = serializedObjectSupporter1;
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.RestAdapter.Builder builder7 = builder0.setServer("http://example.com/");
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = builder8.getcallbackExecutor();
        retrofit.Server server10 = builder8.server;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider12 = null;
        builder11.setclientProvider(provider12);
        retrofit.Server server15 = new retrofit.Server("Retrofit-");
        java.lang.String str16 = server15.name;
        retrofit.client.Client.Provider provider17 = null;
        java.util.concurrent.Executor executor18 = null;
        java.util.concurrent.Executor executor19 = null;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        retrofit.converter.Converter converter21 = null;
        retrofit.Profiler profiler22 = null;
        retrofit.ErrorHandler errorHandler23 = null;
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.Server server26 = builder25.server;
        java.util.concurrent.Executor executor27 = null;
        builder25.httpExecutor = executor27;
        java.util.concurrent.Executor executor29 = builder25.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.FULL;
        builder25.logLevel = logLevel30;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server15, provider17, executor18, executor19, requestInterceptor20, converter21, profiler22, errorHandler23, log24, logLevel30);
        retrofit.RestAdapter.Builder builder33 = builder11.setLog(log24);
        retrofit.RestAdapter.Builder builder34 = builder8.setLog(log24);
        retrofit.Server server35 = null;
        retrofit.client.Client.Provider provider36 = null;
        java.util.concurrent.Executor executor37 = null;
        java.util.concurrent.Executor executor38 = null;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        retrofit.converter.Converter converter40 = null;
        retrofit.Profiler profiler41 = null;
        retrofit.ErrorHandler errorHandler42 = null;
        retrofit.RestAdapter.Log log43 = null;
        retrofit.RestAdapter.LogLevel logLevel44 = null;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter(server35, provider36, executor37, executor38, requestInterceptor39, converter40, profiler41, errorHandler42, log43, logLevel44);
        retrofit.SerializedObjectSupporter serializedObjectSupporter46 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request47 = serializedObjectSupporter46.deserializeObjectRequest6();
        restAdapter45.serializedObjectSupporter = serializedObjectSupporter46;
        retrofit.converter.GsonConverter gsonConverter49 = serializedObjectSupporter46.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter50 = serializedObjectSupporter46.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter51 = serializedObjectSupporter46.deserializeObjectConverter1();
        retrofit.client.Request request52 = serializedObjectSupporter46.deserializeObjectRequest5();
        retrofit.RequestInterceptor requestInterceptor53 = serializedObjectSupporter46.deserializeObjectRequestInterceptor1();
        builder34.requestInterceptor = requestInterceptor53;
        retrofit.RestAdapter.Builder builder55 = builder7.setRequestInterceptor(requestInterceptor53);
        retrofit.RestAdapter.LogLevel logLevel56 = builder55.logLevel;
        retrofit.Server server57 = null;
        retrofit.client.Client.Provider provider58 = null;
        java.util.concurrent.Executor executor59 = null;
        java.util.concurrent.Executor executor60 = null;
        retrofit.RequestInterceptor requestInterceptor61 = null;
        retrofit.converter.Converter converter62 = null;
        retrofit.Profiler profiler63 = null;
        retrofit.ErrorHandler errorHandler64 = null;
        retrofit.RestAdapter.Log log65 = null;
        retrofit.RestAdapter.LogLevel logLevel66 = null;
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter(server57, provider58, executor59, executor60, requestInterceptor61, converter62, profiler63, errorHandler64, log65, logLevel66);
        retrofit.SerializedObjectSupporter serializedObjectSupporter68 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request69 = serializedObjectSupporter68.deserializeObjectRequest6();
        restAdapter67.serializedObjectSupporter = serializedObjectSupporter68;
        retrofit.converter.GsonConverter gsonConverter71 = serializedObjectSupporter68.deserializeObjectConverter7();
        retrofit.Server server72 = serializedObjectSupporter68.deserializeObjectServer1();
        retrofit.converter.GsonConverter gsonConverter73 = serializedObjectSupporter68.deserializeObjectConverter5();
        retrofit.Server server74 = serializedObjectSupporter68.deserializeObjectServer1();
        builder55.server = server74;
        retrofit.RestAdapter restAdapter76 = builder55.build();
        java.lang.String str77 = restAdapter76.getIDLE_THREAD_NAME();
        retrofit.Profiler profiler78 = restAdapter76.getprofiler();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Retrofit-Idle" + "'", str2, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "default" + "'", str16, "default");
        org.junit.Assert.assertNotNull(log24);
        org.junit.Assert.assertNull(server26);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(request47);
        org.junit.Assert.assertNotNull(gsonConverter49);
        org.junit.Assert.assertNotNull(gsonConverter50);
        org.junit.Assert.assertNotNull(gsonConverter51);
        org.junit.Assert.assertNotNull(request52);
        org.junit.Assert.assertNotNull(requestInterceptor53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(request69);
        org.junit.Assert.assertNotNull(gsonConverter71);
        org.junit.Assert.assertNotNull(server72);
        org.junit.Assert.assertNotNull(gsonConverter73);
        org.junit.Assert.assertNotNull(server74);
        org.junit.Assert.assertNotNull(restAdapter76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Retrofit-Idle" + "'", str77, "Retrofit-Idle");
        org.junit.Assert.assertNull(profiler78);
    }

    @Test
    public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1258");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request16 = serializedObjectSupporter15.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter15.deserializeObjectConverter1();
        java.lang.String str18 = serializedObjectSupporter15.deserializeObjectString4();
        java.lang.String str19 = serializedObjectSupporter15.deserializeObjectString4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter15;
        retrofit.client.Request request21 = serializedObjectSupporter15.deserializeObjectRequest1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter15.deserializeObjectConverter1();
        retrofit.converter.GsonConverter gsonConverter23 = serializedObjectSupporter15.deserializeObjectConverter4();
        retrofit.client.Request request24 = serializedObjectSupporter15.deserializeObjectRequest1();
        retrofit.client.Request request25 = serializedObjectSupporter15.deserializeObjectRequest2();
        retrofit.client.Request request26 = serializedObjectSupporter15.deserializeObjectRequest4();
        retrofit.mime.TypedString typedString27 = serializedObjectSupporter15.deserializeObjectTypedOutput2();
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertNotNull(request21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(gsonConverter23);
        org.junit.Assert.assertNotNull(request24);
        org.junit.Assert.assertNotNull(request25);
        org.junit.Assert.assertNotNull(request26);
        org.junit.Assert.assertNotNull(typedString27);
    }

    @Test
    public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1259");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request12 = serializedObjectSupporter11.deserializeObjectRequest6();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter11;
        java.lang.String str14 = serializedObjectSupporter11.deserializeObjectString4();
        retrofit.Server server15 = serializedObjectSupporter11.deserializeObjectServer1();
        retrofit.client.Request request16 = serializedObjectSupporter11.deserializeObjectRequest1();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter11.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter18 = serializedObjectSupporter11.deserializeObjectConverter7();
        retrofit.client.Request request19 = serializedObjectSupporter11.deserializeObjectRequest7();
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "http://example.com/" + "'", str14, "http://example.com/");
        org.junit.Assert.assertNotNull(server15);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertNotNull(gsonConverter18);
        org.junit.Assert.assertNotNull(request19);
    }

    @Test
    public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1260");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request16 = serializedObjectSupporter15.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter15.deserializeObjectConverter1();
        java.lang.String str18 = serializedObjectSupporter15.deserializeObjectString4();
        java.lang.String str19 = serializedObjectSupporter15.deserializeObjectString4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter15;
        retrofit.ErrorHandler errorHandler21 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor22 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.Server server24 = builder23.server;
        retrofit.converter.Converter converter25 = null;
        builder23.converter = converter25;
        retrofit.RestAdapter.Log log27 = builder23.log;
        retrofit.RestAdapter.LogLevel logLevel28 = builder23.logLevel;
        restAdapter10.logLevel = logLevel28;
        retrofit.RestAdapter.RestHandler restHandler30 = restAdapter10.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = restAdapter10.serializedObjectSupporter;
        retrofit.converter.GsonConverter gsonConverter32 = serializedObjectSupporter31.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter31.deserializeObjectConverter8();
        retrofit.Server server34 = serializedObjectSupporter31.deserializeObjectServer1();
        retrofit.client.Request request35 = serializedObjectSupporter31.deserializeObjectRequest2();
        java.lang.String str36 = request35.url;
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(server24);
        org.junit.Assert.assertNull(log27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(serializedObjectSupporter31);
        org.junit.Assert.assertNotNull(gsonConverter32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(server34);
        org.junit.Assert.assertNotNull(request35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "http://example.com/" + "'", str36, "http://example.com/");
    }

    @Test
    public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1261");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor2 = null;
        builder0.requestInterceptor = requestInterceptor2;
        java.util.concurrent.Executor executor4 = builder0.callbackExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter5 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request6 = serializedObjectSupporter5.deserializeObjectRequest6();
        java.lang.String str7 = serializedObjectSupporter5.deserializeObjectString4();
        java.lang.String str8 = serializedObjectSupporter5.deserializeObjectString4();
        retrofit.ErrorHandler errorHandler9 = serializedObjectSupporter5.deserializeObjectErrorHandler1();
        retrofit.converter.GsonConverter gsonConverter10 = serializedObjectSupporter5.deserializeObjectConverter2();
        retrofit.Server server11 = serializedObjectSupporter5.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder12 = builder0.setServer(server11);
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        java.lang.String str14 = serializedObjectSupporter13.deserializeObjectString2();
        retrofit.client.Request request15 = serializedObjectSupporter13.deserializeObjectRequest7();
        java.lang.String str16 = serializedObjectSupporter13.deserializeObjectString5();
        retrofit.client.Request request17 = serializedObjectSupporter13.deserializeObjectRequest2();
        retrofit.client.Request request18 = serializedObjectSupporter13.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter13.deserializeObjectConverter3();
        retrofit.client.Request request20 = serializedObjectSupporter13.deserializeObjectRequest5();
        retrofit.client.Request request21 = serializedObjectSupporter13.deserializeObjectRequest2();
        retrofit.client.Request request22 = serializedObjectSupporter13.deserializeObjectRequest2();
        retrofit.converter.GsonConverter gsonConverter23 = serializedObjectSupporter13.deserializeObjectConverter6();
        retrofit.RestAdapter.Builder builder24 = builder12.setConverter((retrofit.converter.Converter) gsonConverter23);
        java.util.concurrent.Executor executor25 = null;
        builder12.sethttpExecutor(executor25);
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNotNull(request6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "http://example.com/" + "'", str7, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://example.com/" + "'", str8, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler9);
        org.junit.Assert.assertNotNull(gsonConverter10);
        org.junit.Assert.assertNotNull(server11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Retrofit-Idle" + "'", str14, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "POST" + "'", str16, "POST");
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertNotNull(request18);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertNotNull(request21);
        org.junit.Assert.assertNotNull(request22);
        org.junit.Assert.assertNotNull(gsonConverter23);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1262");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        java.util.concurrent.Executor executor2 = null;
        builder0.httpExecutor = executor2;
        java.util.concurrent.Executor executor4 = null;
        builder0.callbackExecutor = executor4;
        java.util.concurrent.Executor executor6 = null;
        builder0.callbackExecutor = executor6;
        builder0.ensureSaneDefaults();
        retrofit.client.Client.Provider provider9 = builder0.clientProvider;
        retrofit.SerializedObjectSupporter serializedObjectSupporter10 = new retrofit.SerializedObjectSupporter();
        java.lang.String str11 = serializedObjectSupporter10.deserializeObjectString2();
        retrofit.client.Request request12 = serializedObjectSupporter10.deserializeObjectRequest7();
        java.lang.String str13 = serializedObjectSupporter10.deserializeObjectString5();
        retrofit.client.Request request14 = serializedObjectSupporter10.deserializeObjectRequest2();
        retrofit.client.Request request15 = serializedObjectSupporter10.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter10.deserializeObjectConverter3();
        retrofit.Server server17 = serializedObjectSupporter10.deserializeObjectServer1();
        builder0.server = server17;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNotNull(provider9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-Idle" + "'", str11, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "POST" + "'", str13, "POST");
        org.junit.Assert.assertNotNull(request14);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(gsonConverter16);
        org.junit.Assert.assertNotNull(server17);
    }

    @Test
    public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1263");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.converter.Converter converter2 = null;
        builder0.converter = converter2;
        retrofit.RestAdapter.Log log4 = builder0.log;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.Server server6 = builder5.server;
        retrofit.Profiler profiler7 = builder5.profiler;
        retrofit.client.Client.Provider provider8 = null;
        builder5.setclientProvider(provider8);
        retrofit.Server server11 = new retrofit.Server("Retrofit-");
        java.lang.String str12 = server11.name;
        builder5.server = server11;
        java.lang.String str14 = server11.name;
        retrofit.RestAdapter.Builder builder15 = builder0.setServer(server11);
        retrofit.client.Client.Provider provider16 = builder0.clientProvider;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "default" + "'", str12, "default");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "default" + "'", str14, "default");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(provider16);
    }

    @Test
    public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1264");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.Server server2 = builder0.server;
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor5 = builder4.getcallbackExecutor();
        retrofit.Server server6 = builder4.server;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider8 = null;
        builder7.setclientProvider(provider8);
        retrofit.Server server11 = new retrofit.Server("Retrofit-");
        java.lang.String str12 = server11.name;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.Server server22 = builder21.server;
        java.util.concurrent.Executor executor23 = null;
        builder21.httpExecutor = executor23;
        java.util.concurrent.Executor executor25 = builder21.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.FULL;
        builder21.logLevel = logLevel26;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server11, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel26);
        retrofit.RestAdapter.Builder builder29 = builder7.setLog(log20);
        retrofit.RestAdapter.Builder builder30 = builder4.setLog(log20);
        java.util.concurrent.Executor executor31 = builder30.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.Server server33 = builder32.server;
        java.util.concurrent.Executor executor34 = null;
        builder32.httpExecutor = executor34;
        java.util.concurrent.Executor executor36 = null;
        builder32.callbackExecutor = executor36;
        java.util.concurrent.Executor executor38 = null;
        builder32.callbackExecutor = executor38;
        builder32.ensureSaneDefaults();
        retrofit.client.Client.Provider provider41 = builder32.clientProvider;
        retrofit.RestAdapter.Builder builder42 = builder30.setClient(provider41);
        builder0.setclientProvider(provider41);
        builder0.ensureSaneDefaults();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "default" + "'", str12, "default");
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNull(server22);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNull(server33);
        org.junit.Assert.assertNotNull(provider41);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1265");
        retrofit.Server server1 = new retrofit.Server("Retrofit-");
        java.lang.String str2 = server1.name;
        java.lang.String str3 = server1.apiUrl;
        java.lang.String str4 = server1.getUrl();
        java.lang.String str5 = server1.apiUrl;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "default" + "'", str2, "default");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Retrofit-" + "'", str3, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Retrofit-" + "'", str4, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Retrofit-" + "'", str5, "Retrofit-");
    }

    @Test
    public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1266");
        retrofit.Server server2 = new retrofit.Server("Retrofit-", "Retrofit-");
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1267");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest8();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter4();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString3();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter3();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GET" + "'", str4, "GET");
        org.junit.Assert.assertNotNull(gsonConverter5);
    }

    @Test
    public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1268");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.Server server2 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter3 = builder0.serializedObjectSupporter;
        java.util.concurrent.Executor executor4 = builder0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = builder0.serializedObjectSupporter;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter7 = builder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertNull(serializedObjectSupporter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(serializedObjectSupporter6);
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1269");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request12 = serializedObjectSupporter11.deserializeObjectRequest6();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter11;
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter11.deserializeObjectConverter7();
        java.lang.String str15 = serializedObjectSupporter11.deserializeObjectString1();
        retrofit.client.Request request16 = serializedObjectSupporter11.deserializeObjectRequest6();
        retrofit.Server server17 = serializedObjectSupporter11.deserializeObjectServer1();
        retrofit.client.Request request18 = serializedObjectSupporter11.deserializeObjectRequest5();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter11.deserializeObjectConverter7();
        java.lang.Class<?> wildcardClass20 = serializedObjectSupporter11.getClass();
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Retrofit-" + "'", str15, "Retrofit-");
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(server17);
        org.junit.Assert.assertNotNull(request18);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1270");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request16 = serializedObjectSupporter15.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter15.deserializeObjectConverter1();
        java.lang.String str18 = serializedObjectSupporter15.deserializeObjectString4();
        java.lang.String str19 = serializedObjectSupporter15.deserializeObjectString4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter15;
        java.lang.String str21 = restAdapter10.getTHREAD_PREFIX();
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter10.logLevel;
        retrofit.Server server24 = new retrofit.Server("Retrofit-");
        java.lang.String str25 = server24.name;
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.Server server35 = builder34.server;
        java.util.concurrent.Executor executor36 = null;
        builder34.httpExecutor = executor36;
        java.util.concurrent.Executor executor38 = builder34.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.FULL;
        builder34.logLevel = logLevel39;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter(server24, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log33, logLevel39);
        java.util.concurrent.Executor executor42 = restAdapter41.getcallbackExecutor();
        int int43 = restAdapter41.getLOG_CHUNK_SIZE();
        java.util.List<retrofit.client.Header> headerList46 = null;
        retrofit.mime.TypedOutput typedOutput47 = null;
        retrofit.client.Request request48 = new retrofit.client.Request("", "", headerList46, typedOutput47);
        retrofit.mime.TypedOutput typedOutput49 = request48.getBody();
        java.lang.String str50 = request48.url;
        retrofit.mime.TypedOutput typedOutput51 = request48.getBody();
        java.lang.String str52 = request48.getUrl();
        retrofit.client.Request request53 = restAdapter41.logAndReplaceRequest(request48);
        retrofit.RequestInterceptor requestInterceptor54 = restAdapter41.getrequestInterceptor();
        retrofit.Profiler profiler55 = restAdapter41.getprofiler();
        retrofit.Server server56 = restAdapter41.getserver();
        retrofit.Server server58 = new retrofit.Server("Retrofit-");
        java.lang.String str59 = server58.name;
        retrofit.client.Client.Provider provider60 = null;
        java.util.concurrent.Executor executor61 = null;
        java.util.concurrent.Executor executor62 = null;
        retrofit.RequestInterceptor requestInterceptor63 = null;
        retrofit.converter.Converter converter64 = null;
        retrofit.Profiler profiler65 = null;
        retrofit.ErrorHandler errorHandler66 = null;
        retrofit.RestAdapter.Log log67 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        retrofit.Server server69 = builder68.server;
        java.util.concurrent.Executor executor70 = null;
        builder68.httpExecutor = executor70;
        java.util.concurrent.Executor executor72 = builder68.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.FULL;
        builder68.logLevel = logLevel73;
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter(server58, provider60, executor61, executor62, requestInterceptor63, converter64, profiler65, errorHandler66, log67, logLevel73);
        java.util.concurrent.Executor executor76 = restAdapter75.getcallbackExecutor();
        retrofit.converter.Converter converter77 = restAdapter75.converter;
        retrofit.RestAdapter.LogLevel logLevel78 = restAdapter75.logLevel;
        restAdapter41.logLevel = logLevel78;
        restAdapter10.logLevel = logLevel78;
        retrofit.RestAdapter.RestHandler restHandler81 = restAdapter10.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter82 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request83 = serializedObjectSupporter82.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter84 = serializedObjectSupporter82.deserializeObjectConverter1();
        java.lang.String str85 = serializedObjectSupporter82.deserializeObjectString4();
        java.lang.String str86 = serializedObjectSupporter82.deserializeObjectString4();
        retrofit.client.Request request87 = serializedObjectSupporter82.deserializeObjectRequest3();
        retrofit.converter.GsonConverter gsonConverter88 = serializedObjectSupporter82.deserializeObjectConverter1();
        retrofit.client.Request request89 = serializedObjectSupporter82.deserializeObjectRequest7();
        restHandler81.serializedObjectSupporter = serializedObjectSupporter82;
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Retrofit-" + "'", str21, "Retrofit-");
        org.junit.Assert.assertNull(logLevel22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "default" + "'", str25, "default");
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNull(server35);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 4000 + "'", int43 == 4000);
        org.junit.Assert.assertNull(typedOutput49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNull(typedOutput51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(request53);
        org.junit.Assert.assertNull(requestInterceptor54);
        org.junit.Assert.assertNull(profiler55);
        org.junit.Assert.assertNotNull(server56);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "default" + "'", str59, "default");
        org.junit.Assert.assertNotNull(log67);
        org.junit.Assert.assertNull(server69);
        org.junit.Assert.assertNull(executor72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor76);
        org.junit.Assert.assertNull(converter77);
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(request83);
        org.junit.Assert.assertNotNull(gsonConverter84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "http://example.com/" + "'", str85, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "http://example.com/" + "'", str86, "http://example.com/");
        org.junit.Assert.assertNotNull(request87);
        org.junit.Assert.assertNotNull(gsonConverter88);
        org.junit.Assert.assertNotNull(request89);
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1271");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request16 = serializedObjectSupporter15.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter15.deserializeObjectConverter1();
        java.lang.String str18 = serializedObjectSupporter15.deserializeObjectString4();
        java.lang.String str19 = serializedObjectSupporter15.deserializeObjectString4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter15;
        retrofit.ErrorHandler errorHandler21 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor22 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.Server server24 = builder23.server;
        retrofit.converter.Converter converter25 = null;
        builder23.converter = converter25;
        retrofit.RestAdapter.Log log27 = builder23.log;
        retrofit.RestAdapter.LogLevel logLevel28 = builder23.logLevel;
        restAdapter10.logLevel = logLevel28;
        retrofit.RestAdapter.RestHandler restHandler30 = restAdapter10.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = restAdapter10.serializedObjectSupporter;
        retrofit.converter.GsonConverter gsonConverter32 = serializedObjectSupporter31.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter31.deserializeObjectConverter8();
        retrofit.Server server34 = serializedObjectSupporter31.deserializeObjectServer1();
        retrofit.client.Request request35 = serializedObjectSupporter31.deserializeObjectRequest2();
        java.util.List<retrofit.client.Header> headerList36 = request35.getHeaders();
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(server24);
        org.junit.Assert.assertNull(log27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(serializedObjectSupporter31);
        org.junit.Assert.assertNotNull(gsonConverter32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(server34);
        org.junit.Assert.assertNotNull(request35);
        org.junit.Assert.assertNotNull(headerList36);
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1272");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter10.new RestHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter10.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter10.getrequestInterceptor();
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter10.new RestHandler();
        java.util.concurrent.Executor executor18 = restAdapter10.getcallbackExecutor();
        retrofit.Server server19 = null;
        retrofit.client.Client.Provider provider20 = null;
        java.util.concurrent.Executor executor21 = null;
        java.util.concurrent.Executor executor22 = null;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        retrofit.converter.Converter converter24 = null;
        retrofit.Profiler profiler25 = null;
        retrofit.ErrorHandler errorHandler26 = null;
        retrofit.RestAdapter.Log log27 = null;
        retrofit.RestAdapter.LogLevel logLevel28 = null;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server19, provider20, executor21, executor22, requestInterceptor23, converter24, profiler25, errorHandler26, log27, logLevel28);
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request31 = serializedObjectSupporter30.deserializeObjectRequest6();
        restAdapter29.serializedObjectSupporter = serializedObjectSupporter30;
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter30.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter34 = serializedObjectSupporter30.deserializeObjectConverter7();
        retrofit.client.Request request35 = serializedObjectSupporter30.deserializeObjectRequest6();
        retrofit.client.Request request36 = serializedObjectSupporter30.deserializeObjectRequest3();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter30;
        retrofit.Profiler profiler38 = restAdapter10.getprofiler();
        retrofit.converter.Converter converter39 = restAdapter10.converter;
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNotNull(request31);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(gsonConverter34);
        org.junit.Assert.assertNotNull(request35);
        org.junit.Assert.assertNotNull(request36);
        org.junit.Assert.assertNull(profiler38);
        org.junit.Assert.assertNull(converter39);
    }

    @Test
    public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1273");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        java.util.concurrent.Executor executor2 = null;
        builder0.httpExecutor = executor2;
        java.util.concurrent.Executor executor4 = null;
        builder0.callbackExecutor = executor4;
        java.util.concurrent.Executor executor6 = null;
        builder0.callbackExecutor = executor6;
        builder0.ensureSaneDefaults();
        retrofit.client.Client.Provider provider9 = builder0.clientProvider;
        retrofit.Profiler profiler10 = builder0.profiler;
        java.util.concurrent.Executor executor11 = null;
        builder0.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder14 = builder0.setServer("Retrofit-");
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor16 = builder15.getcallbackExecutor();
        retrofit.ErrorHandler errorHandler17 = builder15.errorHandler;
        java.util.concurrent.Executor executor18 = null;
        builder15.setcallbackExecutor(executor18);
        retrofit.Profiler profiler20 = null;
        builder15.profiler = profiler20;
        retrofit.RestAdapter.Builder builder23 = builder15.setServer("GET");
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.Server server25 = builder24.server;
        retrofit.converter.Converter converter26 = null;
        builder24.converter = converter26;
        retrofit.RestAdapter.Log log28 = builder24.log;
        retrofit.RestAdapter.LogLevel logLevel29 = builder24.logLevel;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor31 = builder30.getcallbackExecutor();
        retrofit.Server server32 = builder30.server;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider34 = null;
        builder33.setclientProvider(provider34);
        retrofit.Server server37 = new retrofit.Server("Retrofit-");
        java.lang.String str38 = server37.name;
        retrofit.client.Client.Provider provider39 = null;
        java.util.concurrent.Executor executor40 = null;
        java.util.concurrent.Executor executor41 = null;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        retrofit.converter.Converter converter43 = null;
        retrofit.Profiler profiler44 = null;
        retrofit.ErrorHandler errorHandler45 = null;
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.Server server48 = builder47.server;
        java.util.concurrent.Executor executor49 = null;
        builder47.httpExecutor = executor49;
        java.util.concurrent.Executor executor51 = builder47.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.FULL;
        builder47.logLevel = logLevel52;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter(server37, provider39, executor40, executor41, requestInterceptor42, converter43, profiler44, errorHandler45, log46, logLevel52);
        retrofit.RestAdapter.Builder builder55 = builder33.setLog(log46);
        retrofit.RestAdapter.Builder builder56 = builder30.setLog(log46);
        builder56.ensureSaneDefaults();
        java.util.concurrent.Executor executor58 = builder56.callbackExecutor;
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor60 = builder59.getcallbackExecutor();
        retrofit.Server server61 = builder59.server;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider63 = null;
        builder62.setclientProvider(provider63);
        retrofit.Server server66 = new retrofit.Server("Retrofit-");
        java.lang.String str67 = server66.name;
        retrofit.client.Client.Provider provider68 = null;
        java.util.concurrent.Executor executor69 = null;
        java.util.concurrent.Executor executor70 = null;
        retrofit.RequestInterceptor requestInterceptor71 = null;
        retrofit.converter.Converter converter72 = null;
        retrofit.Profiler profiler73 = null;
        retrofit.ErrorHandler errorHandler74 = null;
        retrofit.RestAdapter.Log log75 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        retrofit.Server server77 = builder76.server;
        java.util.concurrent.Executor executor78 = null;
        builder76.httpExecutor = executor78;
        java.util.concurrent.Executor executor80 = builder76.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel81 = retrofit.RestAdapter.LogLevel.FULL;
        builder76.logLevel = logLevel81;
        retrofit.RestAdapter restAdapter83 = new retrofit.RestAdapter(server66, provider68, executor69, executor70, requestInterceptor71, converter72, profiler73, errorHandler74, log75, logLevel81);
        retrofit.RestAdapter.Builder builder84 = builder62.setLog(log75);
        retrofit.RestAdapter.Builder builder85 = builder59.setLog(log75);
        builder85.ensureSaneDefaults();
        java.util.concurrent.Executor executor87 = builder85.callbackExecutor;
        retrofit.RestAdapter.Builder builder88 = builder24.setExecutors(executor58, executor87);
        builder15.callbackExecutor = executor58;
        builder0.setcallbackExecutor(executor58);
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNotNull(provider9);
        org.junit.Assert.assertNull(profiler10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(server25);
        org.junit.Assert.assertNull(log28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNull(server32);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "default" + "'", str38, "default");
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertNull(server48);
        org.junit.Assert.assertNull(executor51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(executor58);
        org.junit.Assert.assertNull(executor60);
        org.junit.Assert.assertNull(server61);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "default" + "'", str67, "default");
        org.junit.Assert.assertNotNull(log75);
        org.junit.Assert.assertNull(server77);
        org.junit.Assert.assertNull(executor80);
        org.junit.Assert.assertTrue("'" + logLevel81 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel81.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(executor87);
        org.junit.Assert.assertNotNull(builder88);
    }

    @Test
    public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1274");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel14 = null;
        restAdapter10.logLevel = logLevel14;
        retrofit.client.Client.Provider provider16 = restAdapter10.getclientProvider();
        retrofit.ErrorHandler errorHandler17 = restAdapter10.geterrorHandler();
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter10.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor19 = restAdapter10.requestInterceptor;
        retrofit.Profiler profiler20 = restAdapter10.getprofiler();
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(provider16);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(requestInterceptor19);
        org.junit.Assert.assertNull(profiler20);
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1275");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter10.new RestHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter10.new RestHandler();
        retrofit.Server server16 = restAdapter10.getserver();
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.Server server18 = builder17.server;
        retrofit.converter.Converter converter19 = null;
        builder17.converter = converter19;
        retrofit.RestAdapter.Log log21 = builder17.log;
        retrofit.RestAdapter.LogLevel logLevel22 = builder17.logLevel;
        boolean boolean23 = logLevel22.log();
        restAdapter10.logLevel = logLevel22;
        java.util.concurrent.Executor executor25 = restAdapter10.gethttpExecutor();
        retrofit.RestAdapter.RestHandler restHandler26 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.Log log27 = restAdapter10.log;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.Server server29 = builder28.server;
        retrofit.converter.Converter converter30 = null;
        builder28.converter = converter30;
        retrofit.ErrorHandler errorHandler32 = builder28.errorHandler;
        retrofit.Server server34 = new retrofit.Server("Retrofit-");
        java.lang.String str35 = server34.name;
        retrofit.client.Client.Provider provider36 = null;
        java.util.concurrent.Executor executor37 = null;
        java.util.concurrent.Executor executor38 = null;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        retrofit.converter.Converter converter40 = null;
        retrofit.Profiler profiler41 = null;
        retrofit.ErrorHandler errorHandler42 = null;
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.Server server45 = builder44.server;
        java.util.concurrent.Executor executor46 = null;
        builder44.httpExecutor = executor46;
        java.util.concurrent.Executor executor48 = builder44.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.FULL;
        builder44.logLevel = logLevel49;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter(server34, provider36, executor37, executor38, requestInterceptor39, converter40, profiler41, errorHandler42, log43, logLevel49);
        retrofit.RestAdapter.LogLevel logLevel52 = restAdapter51.getLogLevel();
        retrofit.RestAdapter.Builder builder53 = builder28.setLogLevel(logLevel52);
        boolean boolean54 = logLevel52.log();
        restAdapter10.logLevel = logLevel52;
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertNull(server18);
        org.junit.Assert.assertNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(log27);
        org.junit.Assert.assertNull(server29);
        org.junit.Assert.assertNull(errorHandler32);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "default" + "'", str35, "default");
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertNull(server45);
        org.junit.Assert.assertNull(executor48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1276");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request16 = serializedObjectSupporter15.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter15.deserializeObjectConverter1();
        java.lang.String str18 = serializedObjectSupporter15.deserializeObjectString4();
        java.lang.String str19 = serializedObjectSupporter15.deserializeObjectString4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter15;
        java.util.concurrent.Executor executor21 = restAdapter10.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor22 = restAdapter10.requestInterceptor;
        retrofit.Server server23 = restAdapter10.server;
        java.lang.String str24 = restAdapter10.getIDLE_THREAD_NAME();
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNull(server23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Retrofit-Idle" + "'", str24, "Retrofit-Idle");
    }

    @Test
    public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1277");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.Server server14 = restAdapter10.server;
        java.util.concurrent.Executor executor15 = restAdapter10.callbackExecutor;
        retrofit.converter.Converter converter16 = restAdapter10.getconverter();
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(server14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(converter16);
    }

    @Test
    public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1278");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.Server server2 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter3 = builder0.serializedObjectSupporter;
        retrofit.converter.Converter converter4 = builder0.converter;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor6 = builder5.getcallbackExecutor();
        retrofit.Server server7 = builder5.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter8 = builder5.serializedObjectSupporter;
        retrofit.converter.Converter converter9 = builder5.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter10 = new retrofit.SerializedObjectSupporter();
        java.lang.String str11 = serializedObjectSupporter10.deserializeObjectString2();
        retrofit.client.Request request12 = serializedObjectSupporter10.deserializeObjectRequest7();
        java.lang.String str13 = serializedObjectSupporter10.deserializeObjectString5();
        retrofit.Server server14 = serializedObjectSupporter10.deserializeObjectServer1();
        builder5.serializedObjectSupporter = serializedObjectSupporter10;
        retrofit.ErrorHandler errorHandler16 = builder5.errorHandler;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        java.lang.String str19 = serializedObjectSupporter18.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter18.deserializeObjectConverter3();
        builder17.serializedObjectSupporter = serializedObjectSupporter18;
        retrofit.RestAdapter.Log log22 = builder17.log;
        retrofit.RestAdapter.Builder builder24 = builder17.setServer("http://example.com/");
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = builder25.getcallbackExecutor();
        retrofit.Server server27 = builder25.server;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider29 = null;
        builder28.setclientProvider(provider29);
        retrofit.Server server32 = new retrofit.Server("Retrofit-");
        java.lang.String str33 = server32.name;
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.Server server43 = builder42.server;
        java.util.concurrent.Executor executor44 = null;
        builder42.httpExecutor = executor44;
        java.util.concurrent.Executor executor46 = builder42.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.FULL;
        builder42.logLevel = logLevel47;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server32, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log41, logLevel47);
        retrofit.RestAdapter.Builder builder50 = builder28.setLog(log41);
        retrofit.RestAdapter.Builder builder51 = builder25.setLog(log41);
        retrofit.Server server52 = null;
        retrofit.client.Client.Provider provider53 = null;
        java.util.concurrent.Executor executor54 = null;
        java.util.concurrent.Executor executor55 = null;
        retrofit.RequestInterceptor requestInterceptor56 = null;
        retrofit.converter.Converter converter57 = null;
        retrofit.Profiler profiler58 = null;
        retrofit.ErrorHandler errorHandler59 = null;
        retrofit.RestAdapter.Log log60 = null;
        retrofit.RestAdapter.LogLevel logLevel61 = null;
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter(server52, provider53, executor54, executor55, requestInterceptor56, converter57, profiler58, errorHandler59, log60, logLevel61);
        retrofit.SerializedObjectSupporter serializedObjectSupporter63 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request64 = serializedObjectSupporter63.deserializeObjectRequest6();
        restAdapter62.serializedObjectSupporter = serializedObjectSupporter63;
        retrofit.converter.GsonConverter gsonConverter66 = serializedObjectSupporter63.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter67 = serializedObjectSupporter63.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter68 = serializedObjectSupporter63.deserializeObjectConverter1();
        retrofit.client.Request request69 = serializedObjectSupporter63.deserializeObjectRequest5();
        retrofit.RequestInterceptor requestInterceptor70 = serializedObjectSupporter63.deserializeObjectRequestInterceptor1();
        builder51.requestInterceptor = requestInterceptor70;
        retrofit.RestAdapter.Builder builder72 = builder24.setRequestInterceptor(requestInterceptor70);
        builder5.requestInterceptor = requestInterceptor70;
        retrofit.RestAdapter.Builder builder74 = builder0.setRequestInterceptor(requestInterceptor70);
        builder0.ensureSaneDefaults();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertNull(serializedObjectSupporter3);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(server7);
        org.junit.Assert.assertNull(serializedObjectSupporter8);
        org.junit.Assert.assertNull(converter9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-Idle" + "'", str11, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "POST" + "'", str13, "POST");
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Retrofit-Idle" + "'", str19, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNull(log22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(server27);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "default" + "'", str33, "default");
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertNull(server43);
        org.junit.Assert.assertNull(executor46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(request64);
        org.junit.Assert.assertNotNull(gsonConverter66);
        org.junit.Assert.assertNotNull(gsonConverter67);
        org.junit.Assert.assertNotNull(gsonConverter68);
        org.junit.Assert.assertNotNull(request69);
        org.junit.Assert.assertNotNull(requestInterceptor70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1279");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter10.new RestHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter10.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = restHandler15.serializedObjectSupporter;
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(serializedObjectSupporter16);
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1280");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter4();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString4();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest3();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertNotNull(request4);
    }

    @Test
    public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1281");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        java.lang.String str2 = serializedObjectSupporter1.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter1.deserializeObjectConverter3();
        builder0.serializedObjectSupporter = serializedObjectSupporter1;
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.RestAdapter.Builder builder7 = builder0.setServer("http://example.com/");
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = builder8.getcallbackExecutor();
        retrofit.Server server10 = builder8.server;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider12 = null;
        builder11.setclientProvider(provider12);
        retrofit.Server server15 = new retrofit.Server("Retrofit-");
        java.lang.String str16 = server15.name;
        retrofit.client.Client.Provider provider17 = null;
        java.util.concurrent.Executor executor18 = null;
        java.util.concurrent.Executor executor19 = null;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        retrofit.converter.Converter converter21 = null;
        retrofit.Profiler profiler22 = null;
        retrofit.ErrorHandler errorHandler23 = null;
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.Server server26 = builder25.server;
        java.util.concurrent.Executor executor27 = null;
        builder25.httpExecutor = executor27;
        java.util.concurrent.Executor executor29 = builder25.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.FULL;
        builder25.logLevel = logLevel30;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server15, provider17, executor18, executor19, requestInterceptor20, converter21, profiler22, errorHandler23, log24, logLevel30);
        retrofit.RestAdapter.Builder builder33 = builder11.setLog(log24);
        retrofit.RestAdapter.Builder builder34 = builder8.setLog(log24);
        retrofit.Server server35 = null;
        retrofit.client.Client.Provider provider36 = null;
        java.util.concurrent.Executor executor37 = null;
        java.util.concurrent.Executor executor38 = null;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        retrofit.converter.Converter converter40 = null;
        retrofit.Profiler profiler41 = null;
        retrofit.ErrorHandler errorHandler42 = null;
        retrofit.RestAdapter.Log log43 = null;
        retrofit.RestAdapter.LogLevel logLevel44 = null;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter(server35, provider36, executor37, executor38, requestInterceptor39, converter40, profiler41, errorHandler42, log43, logLevel44);
        retrofit.SerializedObjectSupporter serializedObjectSupporter46 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request47 = serializedObjectSupporter46.deserializeObjectRequest6();
        restAdapter45.serializedObjectSupporter = serializedObjectSupporter46;
        retrofit.converter.GsonConverter gsonConverter49 = serializedObjectSupporter46.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter50 = serializedObjectSupporter46.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter51 = serializedObjectSupporter46.deserializeObjectConverter1();
        retrofit.client.Request request52 = serializedObjectSupporter46.deserializeObjectRequest5();
        retrofit.RequestInterceptor requestInterceptor53 = serializedObjectSupporter46.deserializeObjectRequestInterceptor1();
        builder34.requestInterceptor = requestInterceptor53;
        retrofit.RestAdapter.Builder builder55 = builder7.setRequestInterceptor(requestInterceptor53);
        java.util.concurrent.Executor executor56 = null;
        builder7.setcallbackExecutor(executor56);
        java.util.concurrent.Executor executor58 = builder7.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter59 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request60 = serializedObjectSupporter59.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter61 = serializedObjectSupporter59.deserializeObjectConverter1();
        retrofit.converter.GsonConverter gsonConverter62 = serializedObjectSupporter59.deserializeObjectConverter4();
        builder7.converter = gsonConverter62;
        retrofit.converter.Converter converter64 = builder7.converter;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Retrofit-Idle" + "'", str2, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "default" + "'", str16, "default");
        org.junit.Assert.assertNotNull(log24);
        org.junit.Assert.assertNull(server26);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(request47);
        org.junit.Assert.assertNotNull(gsonConverter49);
        org.junit.Assert.assertNotNull(gsonConverter50);
        org.junit.Assert.assertNotNull(gsonConverter51);
        org.junit.Assert.assertNotNull(request52);
        org.junit.Assert.assertNotNull(requestInterceptor53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(executor58);
        org.junit.Assert.assertNotNull(request60);
        org.junit.Assert.assertNotNull(gsonConverter61);
        org.junit.Assert.assertNotNull(gsonConverter62);
        org.junit.Assert.assertNotNull(converter64);
    }

    @Test
    public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1282");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.converter.Converter converter2 = null;
        builder0.converter = converter2;
        retrofit.RestAdapter.Log log4 = builder0.log;
        retrofit.client.Client.Provider provider5 = null;
        builder0.clientProvider = provider5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = builder7.getcallbackExecutor();
        retrofit.Server server9 = builder7.server;
        retrofit.Profiler profiler10 = null;
        builder7.profiler = profiler10;
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = null;
        retrofit.RestAdapter.LogLevel logLevel21 = null;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel21);
        retrofit.SerializedObjectSupporter serializedObjectSupporter23 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request24 = serializedObjectSupporter23.deserializeObjectRequest6();
        restAdapter22.serializedObjectSupporter = serializedObjectSupporter23;
        java.lang.String str26 = serializedObjectSupporter23.deserializeObjectString4();
        retrofit.Server server27 = serializedObjectSupporter23.deserializeObjectServer1();
        retrofit.client.Request request28 = serializedObjectSupporter23.deserializeObjectRequest1();
        retrofit.converter.GsonConverter gsonConverter29 = serializedObjectSupporter23.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter30 = serializedObjectSupporter23.deserializeObjectConverter3();
        retrofit.RestAdapter.Builder builder31 = builder7.setConverter((retrofit.converter.Converter) gsonConverter30);
        retrofit.SerializedObjectSupporter serializedObjectSupporter32 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request33 = serializedObjectSupporter32.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter34 = serializedObjectSupporter32.deserializeObjectConverter1();
        java.lang.String str35 = serializedObjectSupporter32.deserializeObjectString4();
        java.lang.String str36 = serializedObjectSupporter32.deserializeObjectString1();
        retrofit.client.Request request37 = serializedObjectSupporter32.deserializeObjectRequest5();
        retrofit.Server server38 = serializedObjectSupporter32.deserializeObjectServer1();
        builder7.server = server38;
        retrofit.Server server41 = new retrofit.Server("Retrofit-");
        java.lang.String str42 = server41.name;
        retrofit.client.Client.Provider provider43 = null;
        java.util.concurrent.Executor executor44 = null;
        java.util.concurrent.Executor executor45 = null;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        retrofit.converter.Converter converter47 = null;
        retrofit.Profiler profiler48 = null;
        retrofit.ErrorHandler errorHandler49 = null;
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.Server server52 = builder51.server;
        java.util.concurrent.Executor executor53 = null;
        builder51.httpExecutor = executor53;
        java.util.concurrent.Executor executor55 = builder51.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.FULL;
        builder51.logLevel = logLevel56;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter(server41, provider43, executor44, executor45, requestInterceptor46, converter47, profiler48, errorHandler49, log50, logLevel56);
        retrofit.RestAdapter.LogLevel logLevel59 = restAdapter58.getLogLevel();
        retrofit.Server server60 = null;
        retrofit.client.Client.Provider provider61 = null;
        java.util.concurrent.Executor executor62 = null;
        java.util.concurrent.Executor executor63 = null;
        retrofit.RequestInterceptor requestInterceptor64 = null;
        retrofit.converter.Converter converter65 = null;
        retrofit.Profiler profiler66 = null;
        retrofit.ErrorHandler errorHandler67 = null;
        retrofit.RestAdapter.Log log68 = null;
        retrofit.RestAdapter.LogLevel logLevel69 = null;
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter(server60, provider61, executor62, executor63, requestInterceptor64, converter65, profiler66, errorHandler67, log68, logLevel69);
        retrofit.RestAdapter.RestHandler restHandler71 = restAdapter70.new RestHandler();
        retrofit.Server server72 = restAdapter70.server;
        retrofit.RestAdapter.LogLevel logLevel73 = restAdapter70.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor74 = restAdapter70.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter75 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request76 = serializedObjectSupporter75.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter77 = serializedObjectSupporter75.deserializeObjectConverter1();
        java.lang.String str78 = serializedObjectSupporter75.deserializeObjectString4();
        java.lang.String str79 = serializedObjectSupporter75.deserializeObjectString4();
        restAdapter70.serializedObjectSupporter = serializedObjectSupporter75;
        retrofit.ErrorHandler errorHandler81 = restAdapter70.geterrorHandler();
        java.util.concurrent.Executor executor82 = restAdapter70.httpExecutor;
        retrofit.RestAdapter.Builder builder83 = new retrofit.RestAdapter.Builder();
        retrofit.Server server84 = builder83.server;
        retrofit.converter.Converter converter85 = null;
        builder83.converter = converter85;
        retrofit.RestAdapter.Log log87 = builder83.log;
        retrofit.RestAdapter.LogLevel logLevel88 = builder83.logLevel;
        restAdapter70.logLevel = logLevel88;
        restAdapter58.logLevel = logLevel88;
        builder7.logLevel = logLevel88;
        retrofit.RestAdapter.Builder builder92 = builder0.setLogLevel(logLevel88);
        java.util.concurrent.Executor executor93 = builder92.gethttpExecutor();
        retrofit.ErrorHandler errorHandler94 = builder92.errorHandler;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(server9);
        org.junit.Assert.assertNotNull(request24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "http://example.com/" + "'", str26, "http://example.com/");
        org.junit.Assert.assertNotNull(server27);
        org.junit.Assert.assertNotNull(request28);
        org.junit.Assert.assertNotNull(gsonConverter29);
        org.junit.Assert.assertNotNull(gsonConverter30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(request33);
        org.junit.Assert.assertNotNull(gsonConverter34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "http://example.com/" + "'", str35, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Retrofit-" + "'", str36, "Retrofit-");
        org.junit.Assert.assertNotNull(request37);
        org.junit.Assert.assertNotNull(server38);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "default" + "'", str42, "default");
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertNull(server52);
        org.junit.Assert.assertNull(executor55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(server72);
        org.junit.Assert.assertNull(logLevel73);
        org.junit.Assert.assertNull(requestInterceptor74);
        org.junit.Assert.assertNotNull(request76);
        org.junit.Assert.assertNotNull(gsonConverter77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "http://example.com/" + "'", str78, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "http://example.com/" + "'", str79, "http://example.com/");
        org.junit.Assert.assertNull(errorHandler81);
        org.junit.Assert.assertNull(executor82);
        org.junit.Assert.assertNull(server84);
        org.junit.Assert.assertNull(log87);
        org.junit.Assert.assertTrue("'" + logLevel88 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel88.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNull(executor93);
        org.junit.Assert.assertNull(errorHandler94);
    }

    @Test
    public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1283");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.Server server2 = builder0.server;
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = null;
        retrofit.client.Client.Provider provider6 = null;
        java.util.concurrent.Executor executor7 = null;
        java.util.concurrent.Executor executor8 = null;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        retrofit.converter.Converter converter10 = null;
        retrofit.Profiler profiler11 = null;
        retrofit.ErrorHandler errorHandler12 = null;
        retrofit.RestAdapter.Log log13 = null;
        retrofit.RestAdapter.LogLevel logLevel14 = null;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter(server5, provider6, executor7, executor8, requestInterceptor9, converter10, profiler11, errorHandler12, log13, logLevel14);
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request17 = serializedObjectSupporter16.deserializeObjectRequest6();
        restAdapter15.serializedObjectSupporter = serializedObjectSupporter16;
        java.lang.String str19 = serializedObjectSupporter16.deserializeObjectString4();
        retrofit.Server server20 = serializedObjectSupporter16.deserializeObjectServer1();
        retrofit.client.Request request21 = serializedObjectSupporter16.deserializeObjectRequest1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter16.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter23 = serializedObjectSupporter16.deserializeObjectConverter3();
        retrofit.RestAdapter.Builder builder24 = builder0.setConverter((retrofit.converter.Converter) gsonConverter23);
        java.util.concurrent.Executor executor25 = builder0.callbackExecutor;
        retrofit.Server server28 = new retrofit.Server("", "hi!");
        retrofit.RestAdapter.Builder builder29 = builder0.setServer(server28);
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request31 = serializedObjectSupporter30.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter32 = serializedObjectSupporter30.deserializeObjectConverter1();
        java.lang.String str33 = serializedObjectSupporter30.deserializeObjectString4();
        java.lang.String str34 = serializedObjectSupporter30.deserializeObjectString1();
        retrofit.client.Request request35 = serializedObjectSupporter30.deserializeObjectRequest2();
        retrofit.RequestInterceptor requestInterceptor36 = serializedObjectSupporter30.deserializeObjectRequestInterceptor1();
        retrofit.mime.TypedString typedString37 = serializedObjectSupporter30.deserializeObjectTypedOutput2();
        builder0.serializedObjectSupporter = serializedObjectSupporter30;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertNotNull(server20);
        org.junit.Assert.assertNotNull(request21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(gsonConverter23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(request31);
        org.junit.Assert.assertNotNull(gsonConverter32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "http://example.com/" + "'", str33, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Retrofit-" + "'", str34, "Retrofit-");
        org.junit.Assert.assertNotNull(request35);
        org.junit.Assert.assertNotNull(requestInterceptor36);
        org.junit.Assert.assertNotNull(typedString37);
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1284");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.Profiler profiler2 = builder0.profiler;
        retrofit.client.Client.Provider provider3 = null;
        builder0.setclientProvider(provider3);
        java.util.concurrent.Executor executor5 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider6 = null;
        builder0.clientProvider = provider6;
        retrofit.Server server10 = new retrofit.Server("Retrofit-Idle", "Retrofit-");
        java.lang.String str11 = server10.getapiUrl();
        java.lang.String str12 = server10.getDEFAULT_NAME();
        java.lang.String str13 = server10.getName();
        retrofit.RestAdapter.Builder builder14 = builder0.setServer(server10);
        java.util.concurrent.Executor executor15 = builder14.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.Server server17 = builder16.server;
        retrofit.Profiler profiler18 = builder16.profiler;
        retrofit.client.Client.Provider provider19 = null;
        builder16.setclientProvider(provider19);
        java.util.concurrent.Executor executor21 = builder16.getcallbackExecutor();
        retrofit.client.Client.Provider provider22 = null;
        builder16.clientProvider = provider22;
        retrofit.Server server24 = null;
        retrofit.client.Client.Provider provider25 = null;
        java.util.concurrent.Executor executor26 = null;
        java.util.concurrent.Executor executor27 = null;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        retrofit.converter.Converter converter29 = null;
        retrofit.Profiler profiler30 = null;
        retrofit.ErrorHandler errorHandler31 = null;
        retrofit.RestAdapter.Log log32 = null;
        retrofit.RestAdapter.LogLevel logLevel33 = null;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server24, provider25, executor26, executor27, requestInterceptor28, converter29, profiler30, errorHandler31, log32, logLevel33);
        retrofit.SerializedObjectSupporter serializedObjectSupporter35 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request36 = serializedObjectSupporter35.deserializeObjectRequest6();
        restAdapter34.serializedObjectSupporter = serializedObjectSupporter35;
        retrofit.converter.GsonConverter gsonConverter38 = serializedObjectSupporter35.deserializeObjectConverter7();
        builder16.converter = gsonConverter38;
        retrofit.SerializedObjectSupporter serializedObjectSupporter40 = new retrofit.SerializedObjectSupporter();
        java.lang.String str41 = serializedObjectSupporter40.deserializeObjectString2();
        retrofit.client.Request request42 = serializedObjectSupporter40.deserializeObjectRequest7();
        retrofit.ErrorHandler errorHandler43 = serializedObjectSupporter40.deserializeObjectErrorHandler1();
        builder16.errorHandler = errorHandler43;
        retrofit.RestAdapter.Builder builder45 = builder14.setErrorHandler(errorHandler43);
        retrofit.Server server46 = null;
        retrofit.client.Client.Provider provider47 = null;
        java.util.concurrent.Executor executor48 = null;
        java.util.concurrent.Executor executor49 = null;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        retrofit.converter.Converter converter51 = null;
        retrofit.Profiler profiler52 = null;
        retrofit.ErrorHandler errorHandler53 = null;
        retrofit.RestAdapter.Log log54 = null;
        retrofit.RestAdapter.LogLevel logLevel55 = null;
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter(server46, provider47, executor48, executor49, requestInterceptor50, converter51, profiler52, errorHandler53, log54, logLevel55);
        retrofit.SerializedObjectSupporter serializedObjectSupporter57 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request58 = serializedObjectSupporter57.deserializeObjectRequest6();
        restAdapter56.serializedObjectSupporter = serializedObjectSupporter57;
        retrofit.converter.GsonConverter gsonConverter60 = serializedObjectSupporter57.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter61 = serializedObjectSupporter57.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter62 = serializedObjectSupporter57.deserializeObjectConverter1();
        retrofit.client.Request request63 = serializedObjectSupporter57.deserializeObjectRequest5();
        retrofit.RequestInterceptor requestInterceptor64 = serializedObjectSupporter57.deserializeObjectRequestInterceptor1();
        retrofit.client.Request request65 = serializedObjectSupporter57.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter66 = serializedObjectSupporter57.deserializeObjectConverter4();
        retrofit.Server server67 = serializedObjectSupporter57.deserializeObjectServer1();
        java.lang.String str68 = server67.getapiUrl();
        retrofit.RestAdapter.Builder builder69 = builder45.setServer(server67);
        retrofit.SerializedObjectSupporter serializedObjectSupporter70 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request71 = serializedObjectSupporter70.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter72 = serializedObjectSupporter70.deserializeObjectConverter1();
        java.lang.String str73 = serializedObjectSupporter70.deserializeObjectString4();
        java.lang.String str74 = serializedObjectSupporter70.deserializeObjectString1();
        retrofit.client.Request request75 = serializedObjectSupporter70.deserializeObjectRequest5();
        retrofit.client.Request request76 = serializedObjectSupporter70.deserializeObjectRequest3();
        builder45.serializedObjectSupporter = serializedObjectSupporter70;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter78 = serializedObjectSupporter70.deserializeObjectLogLevel3();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-Idle" + "'", str11, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "default" + "'", str12, "default");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-" + "'", str13, "Retrofit-");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(server17);
        org.junit.Assert.assertNull(profiler18);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNotNull(request36);
        org.junit.Assert.assertNotNull(gsonConverter38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Retrofit-Idle" + "'", str41, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(request42);
        org.junit.Assert.assertNotNull(errorHandler43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(request58);
        org.junit.Assert.assertNotNull(gsonConverter60);
        org.junit.Assert.assertNotNull(gsonConverter61);
        org.junit.Assert.assertNotNull(gsonConverter62);
        org.junit.Assert.assertNotNull(request63);
        org.junit.Assert.assertNotNull(requestInterceptor64);
        org.junit.Assert.assertNotNull(request65);
        org.junit.Assert.assertNotNull(gsonConverter66);
        org.junit.Assert.assertNotNull(server67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "http://example.com" + "'", str68, "http://example.com");
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(request71);
        org.junit.Assert.assertNotNull(gsonConverter72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "http://example.com/" + "'", str73, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Retrofit-" + "'", str74, "Retrofit-");
        org.junit.Assert.assertNotNull(request75);
        org.junit.Assert.assertNotNull(request76);
    }

    @Test
    public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1285");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        java.lang.String str2 = serializedObjectSupporter1.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter1.deserializeObjectConverter3();
        builder0.serializedObjectSupporter = serializedObjectSupporter1;
        java.util.concurrent.Executor executor5 = null;
        builder0.httpExecutor = executor5;
        retrofit.Profiler profiler7 = builder0.profiler;
        retrofit.client.Client.Provider provider8 = builder0.getclientProvider();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Retrofit-Idle" + "'", str2, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNull(provider8);
    }

    @Test
    public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1286");
        retrofit.Server server1 = new retrofit.Server("Retrofit-");
        java.lang.String str2 = server1.name;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.Server server12 = builder11.server;
        java.util.concurrent.Executor executor13 = null;
        builder11.httpExecutor = executor13;
        java.util.concurrent.Executor executor15 = builder11.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.FULL;
        builder11.logLevel = logLevel16;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter(server1, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log10, logLevel16);
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter18.getLogLevel();
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Log log28 = null;
        retrofit.RestAdapter.LogLevel logLevel29 = null;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log28, logLevel29);
        retrofit.RestAdapter.RestHandler restHandler31 = restAdapter30.new RestHandler();
        retrofit.Server server32 = restAdapter30.server;
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter30.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor34 = restAdapter30.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter35 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request36 = serializedObjectSupporter35.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter37 = serializedObjectSupporter35.deserializeObjectConverter1();
        java.lang.String str38 = serializedObjectSupporter35.deserializeObjectString4();
        java.lang.String str39 = serializedObjectSupporter35.deserializeObjectString4();
        restAdapter30.serializedObjectSupporter = serializedObjectSupporter35;
        retrofit.ErrorHandler errorHandler41 = restAdapter30.geterrorHandler();
        java.util.concurrent.Executor executor42 = restAdapter30.httpExecutor;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.Server server44 = builder43.server;
        retrofit.converter.Converter converter45 = null;
        builder43.converter = converter45;
        retrofit.RestAdapter.Log log47 = builder43.log;
        retrofit.RestAdapter.LogLevel logLevel48 = builder43.logLevel;
        restAdapter30.logLevel = logLevel48;
        restAdapter18.logLevel = logLevel48;
        retrofit.SerializedObjectSupporter serializedObjectSupporter51 = restAdapter18.serializedObjectSupporter;
        retrofit.Server server52 = null;
        retrofit.client.Client.Provider provider53 = null;
        java.util.concurrent.Executor executor54 = null;
        java.util.concurrent.Executor executor55 = null;
        retrofit.RequestInterceptor requestInterceptor56 = null;
        retrofit.converter.Converter converter57 = null;
        retrofit.Profiler profiler58 = null;
        retrofit.ErrorHandler errorHandler59 = null;
        retrofit.RestAdapter.Log log60 = null;
        retrofit.RestAdapter.LogLevel logLevel61 = null;
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter(server52, provider53, executor54, executor55, requestInterceptor56, converter57, profiler58, errorHandler59, log60, logLevel61);
        retrofit.RestAdapter.RestHandler restHandler63 = restAdapter62.new RestHandler();
        retrofit.Server server64 = restAdapter62.server;
        retrofit.RestAdapter.LogLevel logLevel65 = restAdapter62.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor66 = restAdapter62.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter67 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request68 = serializedObjectSupporter67.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter69 = serializedObjectSupporter67.deserializeObjectConverter1();
        java.lang.String str70 = serializedObjectSupporter67.deserializeObjectString4();
        java.lang.String str71 = serializedObjectSupporter67.deserializeObjectString4();
        restAdapter62.serializedObjectSupporter = serializedObjectSupporter67;
        retrofit.ErrorHandler errorHandler73 = restAdapter62.geterrorHandler();
        java.util.concurrent.Executor executor74 = restAdapter62.httpExecutor;
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        retrofit.Server server76 = builder75.server;
        retrofit.converter.Converter converter77 = null;
        builder75.converter = converter77;
        retrofit.RestAdapter.Log log79 = builder75.log;
        retrofit.RestAdapter.LogLevel logLevel80 = builder75.logLevel;
        restAdapter62.logLevel = logLevel80;
        restAdapter18.setLogLevel(logLevel80);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "default" + "'", str2, "default");
        org.junit.Assert.assertNotNull(log10);
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(server32);
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertNull(requestInterceptor34);
        org.junit.Assert.assertNotNull(request36);
        org.junit.Assert.assertNotNull(gsonConverter37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "http://example.com/" + "'", str38, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "http://example.com/" + "'", str39, "http://example.com/");
        org.junit.Assert.assertNull(errorHandler41);
        org.junit.Assert.assertNull(executor42);
        org.junit.Assert.assertNull(server44);
        org.junit.Assert.assertNull(log47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(serializedObjectSupporter51);
        org.junit.Assert.assertNull(server64);
        org.junit.Assert.assertNull(logLevel65);
        org.junit.Assert.assertNull(requestInterceptor66);
        org.junit.Assert.assertNotNull(request68);
        org.junit.Assert.assertNotNull(gsonConverter69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "http://example.com/" + "'", str70, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "http://example.com/" + "'", str71, "http://example.com/");
        org.junit.Assert.assertNull(errorHandler73);
        org.junit.Assert.assertNull(executor74);
        org.junit.Assert.assertNull(server76);
        org.junit.Assert.assertNull(log79);
        org.junit.Assert.assertTrue("'" + logLevel80 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel80.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1287");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.converter.Converter converter2 = null;
        builder0.converter = converter2;
        retrofit.RestAdapter.Log log4 = builder0.log;
        retrofit.client.Client.Provider provider5 = null;
        builder0.clientProvider = provider5;
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = null;
        retrofit.RestAdapter.LogLevel logLevel16 = null;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel16);
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request19 = serializedObjectSupporter18.deserializeObjectRequest6();
        restAdapter17.serializedObjectSupporter = serializedObjectSupporter18;
        retrofit.converter.GsonConverter gsonConverter21 = serializedObjectSupporter18.deserializeObjectConverter7();
        builder0.converter = gsonConverter21;
        retrofit.RestAdapter.Log log23 = builder0.log;
        retrofit.client.Client.Provider provider24 = builder0.clientProvider;
        builder0.ensureSaneDefaults();
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertNotNull(request19);
        org.junit.Assert.assertNotNull(gsonConverter21);
        org.junit.Assert.assertNull(log23);
        org.junit.Assert.assertNull(provider24);
    }

    @Test
    public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1288");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter10.new RestHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter10.getLogLevel();
        java.util.concurrent.Executor executor17 = restAdapter10.getcallbackExecutor();
        java.lang.String str18 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.Profiler profiler19 = restAdapter10.getprofiler();
        retrofit.Profiler profiler20 = restAdapter10.profiler;
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(logLevel16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Retrofit-Idle" + "'", str18, "Retrofit-Idle");
        org.junit.Assert.assertNull(profiler19);
        org.junit.Assert.assertNull(profiler20);
    }

    @Test
    public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1289");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter10.new RestHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter10.logLevel = logLevel15;
        retrofit.Profiler profiler17 = restAdapter10.profiler;
        retrofit.ErrorHandler errorHandler18 = restAdapter10.geterrorHandler();
        retrofit.Server server19 = null;
        retrofit.client.Client.Provider provider20 = null;
        java.util.concurrent.Executor executor21 = null;
        java.util.concurrent.Executor executor22 = null;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        retrofit.converter.Converter converter24 = null;
        retrofit.Profiler profiler25 = null;
        retrofit.ErrorHandler errorHandler26 = null;
        retrofit.RestAdapter.Log log27 = null;
        retrofit.RestAdapter.LogLevel logLevel28 = null;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server19, provider20, executor21, executor22, requestInterceptor23, converter24, profiler25, errorHandler26, log27, logLevel28);
        retrofit.RestAdapter.RestHandler restHandler30 = restAdapter29.new RestHandler();
        retrofit.Server server31 = restAdapter29.server;
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel33 = null;
        restAdapter29.logLevel = logLevel33;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter29.logLevel = logLevel35;
        restAdapter10.logLevel = logLevel35;
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler17);
        org.junit.Assert.assertNull(errorHandler18);
        org.junit.Assert.assertNull(server31);
        org.junit.Assert.assertNull(logLevel32);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1290");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        java.lang.String str2 = serializedObjectSupporter1.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter1.deserializeObjectConverter3();
        builder0.serializedObjectSupporter = serializedObjectSupporter1;
        retrofit.Server server6 = new retrofit.Server("Retrofit-");
        java.lang.String str7 = server6.name;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.Server server17 = builder16.server;
        java.util.concurrent.Executor executor18 = null;
        builder16.httpExecutor = executor18;
        java.util.concurrent.Executor executor20 = builder16.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.FULL;
        builder16.logLevel = logLevel21;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server6, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel21);
        retrofit.RestAdapter.Builder builder24 = builder0.setServer(server6);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Retrofit-Idle" + "'", str2, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "default" + "'", str7, "default");
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNull(server17);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1291");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter1();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString4();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest3();
        java.lang.String str6 = request5.url;
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://example.com/" + "'", str6, "http://example.com/");
    }

    @Test
    public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1292");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request16 = serializedObjectSupporter15.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter15.deserializeObjectConverter1();
        java.lang.String str18 = serializedObjectSupporter15.deserializeObjectString4();
        java.lang.String str19 = serializedObjectSupporter15.deserializeObjectString4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter15;
        retrofit.client.Request request21 = serializedObjectSupporter15.deserializeObjectRequest1();
        retrofit.client.Request request22 = serializedObjectSupporter15.deserializeObjectRequest3();
        retrofit.client.Request request23 = serializedObjectSupporter15.deserializeObjectRequest7();
        retrofit.client.Request request24 = serializedObjectSupporter15.deserializeObjectRequest5();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter25 = serializedObjectSupporter15.deserializeObjectLogLevel1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertNotNull(request21);
        org.junit.Assert.assertNotNull(request22);
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertNotNull(request24);
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1293");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString5();
        retrofit.ErrorHandler errorHandler4 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest3();
        retrofit.client.Request request6 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.Server server7 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.client.Request request8 = serializedObjectSupporter0.deserializeObjectRequest8();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "http://example.com/" + "'", str2, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "POST" + "'", str3, "POST");
        org.junit.Assert.assertNotNull(errorHandler4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(request6);
        org.junit.Assert.assertNotNull(server7);
        org.junit.Assert.assertNotNull(request8);
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1294");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter3();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString2();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter5 = serializedObjectSupporter0.deserializeObjectLogLevel3();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Retrofit-Idle" + "'", str4, "Retrofit-Idle");
    }

    @Test
    public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1295");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.Server server2 = builder0.server;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider4 = null;
        builder3.setclientProvider(provider4);
        retrofit.Server server7 = new retrofit.Server("Retrofit-");
        java.lang.String str8 = server7.name;
        retrofit.client.Client.Provider provider9 = null;
        java.util.concurrent.Executor executor10 = null;
        java.util.concurrent.Executor executor11 = null;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        retrofit.converter.Converter converter13 = null;
        retrofit.Profiler profiler14 = null;
        retrofit.ErrorHandler errorHandler15 = null;
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.Server server18 = builder17.server;
        java.util.concurrent.Executor executor19 = null;
        builder17.httpExecutor = executor19;
        java.util.concurrent.Executor executor21 = builder17.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.FULL;
        builder17.logLevel = logLevel22;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server7, provider9, executor10, executor11, requestInterceptor12, converter13, profiler14, errorHandler15, log16, logLevel22);
        retrofit.RestAdapter.Builder builder25 = builder3.setLog(log16);
        retrofit.RestAdapter.Builder builder26 = builder0.setLog(log16);
        java.util.concurrent.Executor executor27 = builder26.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.Server server29 = builder28.server;
        java.util.concurrent.Executor executor30 = null;
        builder28.httpExecutor = executor30;
        java.util.concurrent.Executor executor32 = null;
        builder28.callbackExecutor = executor32;
        java.util.concurrent.Executor executor34 = null;
        builder28.callbackExecutor = executor34;
        builder28.ensureSaneDefaults();
        retrofit.client.Client.Provider provider37 = builder28.clientProvider;
        retrofit.RestAdapter.Builder builder38 = builder26.setClient(provider37);
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.BASIC;
        builder26.logLevel = logLevel39;
        java.util.concurrent.Executor executor41 = builder26.getcallbackExecutor();
        retrofit.Server server43 = new retrofit.Server("Retrofit-");
        java.lang.String str44 = server43.name;
        retrofit.client.Client.Provider provider45 = null;
        java.util.concurrent.Executor executor46 = null;
        java.util.concurrent.Executor executor47 = null;
        retrofit.RequestInterceptor requestInterceptor48 = null;
        retrofit.converter.Converter converter49 = null;
        retrofit.Profiler profiler50 = null;
        retrofit.ErrorHandler errorHandler51 = null;
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.Server server54 = builder53.server;
        java.util.concurrent.Executor executor55 = null;
        builder53.httpExecutor = executor55;
        java.util.concurrent.Executor executor57 = builder53.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.FULL;
        builder53.logLevel = logLevel58;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter(server43, provider45, executor46, executor47, requestInterceptor48, converter49, profiler50, errorHandler51, log52, logLevel58);
        retrofit.RestAdapter.LogLevel logLevel61 = restAdapter60.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor62 = restAdapter60.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter63 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request64 = serializedObjectSupporter63.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter65 = serializedObjectSupporter63.deserializeObjectConverter1();
        retrofit.client.Request request66 = serializedObjectSupporter63.deserializeObjectRequest5();
        retrofit.client.Request request67 = serializedObjectSupporter63.deserializeObjectRequest5();
        retrofit.client.Request request68 = restAdapter60.logAndReplaceRequest(request67);
        retrofit.Server server69 = restAdapter60.getserver();
        builder26.server = server69;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "default" + "'", str8, "default");
        org.junit.Assert.assertNotNull(log16);
        org.junit.Assert.assertNull(server18);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(server29);
        org.junit.Assert.assertNotNull(provider37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "default" + "'", str44, "default");
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNull(server54);
        org.junit.Assert.assertNull(executor57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(requestInterceptor62);
        org.junit.Assert.assertNotNull(request64);
        org.junit.Assert.assertNotNull(gsonConverter65);
        org.junit.Assert.assertNotNull(request66);
        org.junit.Assert.assertNotNull(request67);
        org.junit.Assert.assertNotNull(request68);
        org.junit.Assert.assertNotNull(server69);
    }

    @Test
    public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1296");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter1 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.mime.TypedString typedString2 = serializedObjectSupporter0.deserializeObjectTypedOutput2();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter2();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter4();
        org.junit.Assert.assertNotNull(gsonConverter1);
        org.junit.Assert.assertNotNull(typedString2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(gsonConverter4);
    }

    @Test
    public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1297");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor2 = null;
        builder0.requestInterceptor = requestInterceptor2;
        java.util.concurrent.Executor executor4 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("default");
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = null;
        retrofit.RestAdapter.LogLevel logLevel16 = null;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel16);
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request19 = serializedObjectSupporter18.deserializeObjectRequest6();
        restAdapter17.serializedObjectSupporter = serializedObjectSupporter18;
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.ErrorHandler errorHandler22 = serializedObjectSupporter18.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder23 = builder6.setErrorHandler(errorHandler22);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.Server server25 = builder24.server;
        java.util.concurrent.Executor executor26 = null;
        builder24.httpExecutor = executor26;
        java.util.concurrent.Executor executor28 = builder24.httpExecutor;
        retrofit.Server server31 = new retrofit.Server("Retrofit-", "");
        java.lang.String str32 = server31.getUrl();
        builder24.server = server31;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.BASIC;
        builder24.logLevel = logLevel34;
        retrofit.RestAdapter.Builder builder36 = builder6.setLogLevel(logLevel34);
        java.util.concurrent.Executor executor37 = builder36.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor38 = builder36.requestInterceptor;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(request19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(errorHandler22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(server25);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Retrofit-" + "'", str32, "Retrofit-");
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNull(requestInterceptor38);
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1298");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        java.lang.String str2 = serializedObjectSupporter1.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter1.deserializeObjectConverter3();
        builder0.serializedObjectSupporter = serializedObjectSupporter1;
        java.util.concurrent.Executor executor5 = null;
        builder0.callbackExecutor = executor5;
        retrofit.SerializedObjectSupporter serializedObjectSupporter7 = builder0.serializedObjectSupporter;
        retrofit.converter.Converter converter8 = builder0.converter;
        retrofit.Server server10 = new retrofit.Server("Retrofit-");
        java.lang.String str11 = server10.name;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.Server server21 = builder20.server;
        java.util.concurrent.Executor executor22 = null;
        builder20.httpExecutor = executor22;
        java.util.concurrent.Executor executor24 = builder20.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.FULL;
        builder20.logLevel = logLevel25;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server10, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log19, logLevel25);
        retrofit.RestAdapter.Builder builder28 = builder0.setLog(log19);
        retrofit.RequestInterceptor requestInterceptor29 = builder0.requestInterceptor;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Retrofit-Idle" + "'", str2, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(serializedObjectSupporter7);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "default" + "'", str11, "default");
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertNull(server21);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(requestInterceptor29);
    }

    @Test
    public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1299");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest8();
        java.lang.String str3 = request2.method;
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "GET" + "'", str3, "GET");
    }

    @Test
    public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1300");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.Server server2 = builder0.server;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider4 = null;
        builder3.setclientProvider(provider4);
        retrofit.Server server7 = new retrofit.Server("Retrofit-");
        java.lang.String str8 = server7.name;
        retrofit.client.Client.Provider provider9 = null;
        java.util.concurrent.Executor executor10 = null;
        java.util.concurrent.Executor executor11 = null;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        retrofit.converter.Converter converter13 = null;
        retrofit.Profiler profiler14 = null;
        retrofit.ErrorHandler errorHandler15 = null;
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.Server server18 = builder17.server;
        java.util.concurrent.Executor executor19 = null;
        builder17.httpExecutor = executor19;
        java.util.concurrent.Executor executor21 = builder17.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.FULL;
        builder17.logLevel = logLevel22;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server7, provider9, executor10, executor11, requestInterceptor12, converter13, profiler14, errorHandler15, log16, logLevel22);
        retrofit.RestAdapter.Builder builder25 = builder3.setLog(log16);
        retrofit.RestAdapter.Builder builder26 = builder0.setLog(log16);
        retrofit.Profiler profiler27 = null;
        builder26.profiler = profiler27;
        retrofit.RestAdapter.LogLevel logLevel29 = builder26.logLevel;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter30 = builder26.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "default" + "'", str8, "default");
        org.junit.Assert.assertNotNull(log16);
        org.junit.Assert.assertNull(server18);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1301");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter10.new RestHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter10.new RestHandler();
        retrofit.Server server16 = restAdapter10.getserver();
        retrofit.Server server17 = restAdapter10.server;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor19 = builder18.getcallbackExecutor();
        retrofit.Server server20 = builder18.server;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider22 = null;
        builder21.setclientProvider(provider22);
        retrofit.Server server25 = new retrofit.Server("Retrofit-");
        java.lang.String str26 = server25.name;
        retrofit.client.Client.Provider provider27 = null;
        java.util.concurrent.Executor executor28 = null;
        java.util.concurrent.Executor executor29 = null;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        retrofit.converter.Converter converter31 = null;
        retrofit.Profiler profiler32 = null;
        retrofit.ErrorHandler errorHandler33 = null;
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.Server server36 = builder35.server;
        java.util.concurrent.Executor executor37 = null;
        builder35.httpExecutor = executor37;
        java.util.concurrent.Executor executor39 = builder35.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.FULL;
        builder35.logLevel = logLevel40;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter(server25, provider27, executor28, executor29, requestInterceptor30, converter31, profiler32, errorHandler33, log34, logLevel40);
        retrofit.RestAdapter.Builder builder43 = builder21.setLog(log34);
        retrofit.RestAdapter.Builder builder44 = builder18.setLog(log34);
        java.util.concurrent.Executor executor45 = builder44.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.Server server47 = builder46.server;
        java.util.concurrent.Executor executor48 = null;
        builder46.httpExecutor = executor48;
        java.util.concurrent.Executor executor50 = null;
        builder46.callbackExecutor = executor50;
        java.util.concurrent.Executor executor52 = null;
        builder46.callbackExecutor = executor52;
        builder46.ensureSaneDefaults();
        retrofit.client.Client.Provider provider55 = builder46.clientProvider;
        retrofit.RestAdapter.Builder builder56 = builder44.setClient(provider55);
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder44.logLevel = logLevel57;
        restAdapter10.logLevel = logLevel57;
        retrofit.Profiler profiler60 = restAdapter10.profiler;
        retrofit.client.Client.Provider provider61 = restAdapter10.getclientProvider();
        retrofit.client.Response response63 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response65 = restAdapter10.logAndReplaceResponse("Retrofit-Idle", response63, 10L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertNull(server17);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(server20);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "default" + "'", str26, "default");
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertNull(server36);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertNull(server47);
        org.junit.Assert.assertNotNull(provider55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(profiler60);
        org.junit.Assert.assertNull(provider61);
    }

    @Test
    public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1302");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        java.util.concurrent.Executor executor2 = null;
        builder0.httpExecutor = executor2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = null;
        retrofit.RestAdapter.LogLevel logLevel13 = null;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel13);
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request16 = serializedObjectSupporter15.deserializeObjectRequest6();
        restAdapter14.serializedObjectSupporter = serializedObjectSupporter15;
        java.lang.String str18 = serializedObjectSupporter15.deserializeObjectString4();
        retrofit.Server server19 = serializedObjectSupporter15.deserializeObjectServer1();
        builder0.server = server19;
        java.lang.String str21 = server19.getDEFAULT_NAME();
        java.lang.String str22 = server19.getapiUrl();
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
        org.junit.Assert.assertNotNull(server19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "default" + "'", str21, "default");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "http://example.com" + "'", str22, "http://example.com");
    }

    @Test
    public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1303");
        retrofit.Server server1 = new retrofit.Server("Retrofit-");
        java.lang.String str2 = server1.name;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.Server server12 = builder11.server;
        java.util.concurrent.Executor executor13 = null;
        builder11.httpExecutor = executor13;
        java.util.concurrent.Executor executor15 = builder11.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.FULL;
        builder11.logLevel = logLevel16;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter(server1, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log10, logLevel16);
        java.util.concurrent.Executor executor19 = restAdapter18.getcallbackExecutor();
        java.util.concurrent.Executor executor20 = restAdapter18.getcallbackExecutor();
        java.util.concurrent.Executor executor21 = restAdapter18.callbackExecutor;
        retrofit.Server server22 = null;
        retrofit.client.Client.Provider provider23 = null;
        java.util.concurrent.Executor executor24 = null;
        java.util.concurrent.Executor executor25 = null;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        retrofit.converter.Converter converter27 = null;
        retrofit.Profiler profiler28 = null;
        retrofit.ErrorHandler errorHandler29 = null;
        retrofit.RestAdapter.Log log30 = null;
        retrofit.RestAdapter.LogLevel logLevel31 = null;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server22, provider23, executor24, executor25, requestInterceptor26, converter27, profiler28, errorHandler29, log30, logLevel31);
        retrofit.SerializedObjectSupporter serializedObjectSupporter33 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request34 = serializedObjectSupporter33.deserializeObjectRequest6();
        restAdapter32.serializedObjectSupporter = serializedObjectSupporter33;
        retrofit.client.Request request36 = serializedObjectSupporter33.deserializeObjectRequest4();
        retrofit.mime.TypedOutput typedOutput37 = request36.getBody();
        retrofit.client.Request request38 = restAdapter18.logAndReplaceRequest(request36);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "default" + "'", str2, "default");
        org.junit.Assert.assertNotNull(log10);
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNotNull(request34);
        org.junit.Assert.assertNotNull(request36);
        org.junit.Assert.assertNull(typedOutput37);
        org.junit.Assert.assertNotNull(request38);
    }

    @Test
    public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1304");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request12 = serializedObjectSupporter11.deserializeObjectRequest6();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter11;
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter11.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter15 = serializedObjectSupporter11.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter11.deserializeObjectConverter1();
        retrofit.client.Request request17 = serializedObjectSupporter11.deserializeObjectRequest5();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter11.deserializeObjectRequestInterceptor1();
        retrofit.client.Request request19 = serializedObjectSupporter11.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter11.deserializeObjectConverter4();
        java.lang.String str21 = serializedObjectSupporter11.deserializeObjectString5();
        retrofit.Server server22 = serializedObjectSupporter11.deserializeObjectServer1();
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(gsonConverter15);
        org.junit.Assert.assertNotNull(gsonConverter16);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(request19);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "POST" + "'", str21, "POST");
        org.junit.Assert.assertNotNull(server22);
    }

    @Test
    public void test1305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1305");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request12 = serializedObjectSupporter11.deserializeObjectRequest6();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter11;
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter11.deserializeObjectConverter7();
        retrofit.Server server15 = serializedObjectSupporter11.deserializeObjectServer1();
        java.lang.String str16 = server15.getName();
        java.lang.String str17 = server15.name;
        java.lang.String str18 = server15.apiUrl;
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(server15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "default" + "'", str16, "default");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "default" + "'", str17, "default");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com" + "'", str18, "http://example.com");
    }

    @Test
    public void test1306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1306");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest3();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.mime.TypedOutput typedOutput3 = request2.getBody();
        retrofit.mime.TypedOutput typedOutput4 = request2.body;
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertNull(typedOutput3);
        org.junit.Assert.assertNull(typedOutput4);
    }

    @Test
    public void test1307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1307");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request12 = serializedObjectSupporter11.deserializeObjectRequest6();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter11;
        retrofit.client.Request request14 = serializedObjectSupporter11.deserializeObjectRequest4();
        retrofit.mime.TypedOutput typedOutput15 = request14.body;
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(request14);
        org.junit.Assert.assertNull(typedOutput15);
    }

    @Test
    public void test1308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1308");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel14 = null;
        restAdapter10.logLevel = logLevel14;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter10.logLevel = logLevel16;
        retrofit.client.Client.Provider provider18 = restAdapter10.clientProvider;
        retrofit.client.Client.Provider provider19 = restAdapter10.getclientProvider();
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter10.new RestHandler();
        retrofit.ErrorHandler errorHandler21 = restAdapter10.errorHandler;
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(provider18);
        org.junit.Assert.assertNull(provider19);
        org.junit.Assert.assertNull(errorHandler21);
    }

    @Test
    public void test1309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1309");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter10.new RestHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter10.getLogLevel();
        java.util.concurrent.Executor executor17 = restAdapter10.getcallbackExecutor();
        java.lang.String str18 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.Server server20 = builder19.server;
        java.util.concurrent.Executor executor21 = null;
        builder19.httpExecutor = executor21;
        java.util.concurrent.Executor executor23 = null;
        builder19.callbackExecutor = executor23;
        java.util.concurrent.Executor executor25 = null;
        builder19.callbackExecutor = executor25;
        builder19.ensureSaneDefaults();
        retrofit.RestAdapter.LogLevel logLevel28 = builder19.logLevel;
        restAdapter10.logLevel = logLevel28;
        retrofit.Server server30 = restAdapter10.getserver();
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(logLevel16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Retrofit-Idle" + "'", str18, "Retrofit-Idle");
        org.junit.Assert.assertNull(server20);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server30);
    }

    @Test
    public void test1310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1310");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        java.lang.String str2 = serializedObjectSupporter1.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter1.deserializeObjectConverter3();
        builder0.serializedObjectSupporter = serializedObjectSupporter1;
        java.util.concurrent.Executor executor5 = null;
        builder0.httpExecutor = executor5;
        retrofit.SerializedObjectSupporter serializedObjectSupporter7 = builder0.serializedObjectSupporter;
        retrofit.client.Client client8 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder9 = builder0.setClient(client8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Retrofit-Idle" + "'", str2, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(serializedObjectSupporter7);
    }

    @Test
    public void test1311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1311");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request16 = serializedObjectSupporter15.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter15.deserializeObjectConverter1();
        java.lang.String str18 = serializedObjectSupporter15.deserializeObjectString4();
        java.lang.String str19 = serializedObjectSupporter15.deserializeObjectString4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter15;
        retrofit.client.Request request21 = serializedObjectSupporter15.deserializeObjectRequest1();
        java.lang.String str22 = request21.method;
        java.lang.String str23 = request21.url;
        retrofit.mime.TypedOutput typedOutput24 = request21.getBody();
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertNotNull(request21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "GET" + "'", str22, "GET");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "http://example.com/" + "'", str23, "http://example.com/");
        org.junit.Assert.assertNull(typedOutput24);
    }

    @Test
    public void test1312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1312");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter10.new RestHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.callbackExecutor;
        retrofit.converter.Converter converter14 = restAdapter10.getconverter();
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter10.getrequestInterceptor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request17 = serializedObjectSupporter16.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter18 = serializedObjectSupporter16.deserializeObjectConverter1();
        java.lang.String str19 = serializedObjectSupporter16.deserializeObjectString4();
        java.lang.String str20 = serializedObjectSupporter16.deserializeObjectString1();
        retrofit.client.Request request21 = serializedObjectSupporter16.deserializeObjectRequest2();
        retrofit.RequestInterceptor requestInterceptor22 = serializedObjectSupporter16.deserializeObjectRequestInterceptor1();
        retrofit.mime.TypedString typedString23 = serializedObjectSupporter16.deserializeObjectTypedOutput2();
        retrofit.client.Request request24 = serializedObjectSupporter16.deserializeObjectRequest8();
        java.lang.String str25 = request24.getMethod();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request26 = restAdapter10.logAndReplaceRequest(request24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertNotNull(gsonConverter18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Retrofit-" + "'", str20, "Retrofit-");
        org.junit.Assert.assertNotNull(request21);
        org.junit.Assert.assertNotNull(requestInterceptor22);
        org.junit.Assert.assertNotNull(typedString23);
        org.junit.Assert.assertNotNull(request24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "GET" + "'", str25, "GET");
    }

    @Test
    public void test1313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1313");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.Server server2 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter3 = builder0.serializedObjectSupporter;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor5 = builder4.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor6 = null;
        builder4.requestInterceptor = requestInterceptor6;
        java.util.concurrent.Executor executor8 = null;
        builder4.setcallbackExecutor(executor8);
        retrofit.Server server11 = new retrofit.Server("POST");
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.Server server16 = null;
        retrofit.client.Client.Provider provider17 = null;
        java.util.concurrent.Executor executor18 = null;
        java.util.concurrent.Executor executor19 = null;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        retrofit.converter.Converter converter21 = null;
        retrofit.Profiler profiler22 = null;
        retrofit.ErrorHandler errorHandler23 = null;
        retrofit.RestAdapter.Log log24 = null;
        retrofit.RestAdapter.LogLevel logLevel25 = null;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter(server16, provider17, executor18, executor19, requestInterceptor20, converter21, profiler22, errorHandler23, log24, logLevel25);
        retrofit.SerializedObjectSupporter serializedObjectSupporter27 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request28 = serializedObjectSupporter27.deserializeObjectRequest6();
        restAdapter26.serializedObjectSupporter = serializedObjectSupporter27;
        retrofit.converter.GsonConverter gsonConverter30 = serializedObjectSupporter27.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter31 = serializedObjectSupporter27.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter32 = serializedObjectSupporter27.deserializeObjectConverter1();
        retrofit.Profiler profiler33 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter34 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request35 = serializedObjectSupporter34.deserializeObjectRequest6();
        java.lang.String str36 = serializedObjectSupporter34.deserializeObjectString4();
        java.lang.String str37 = serializedObjectSupporter34.deserializeObjectString5();
        retrofit.ErrorHandler errorHandler38 = serializedObjectSupporter34.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = builder39.getcallbackExecutor();
        retrofit.Server server41 = builder39.server;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider43 = null;
        builder42.setclientProvider(provider43);
        retrofit.Server server46 = new retrofit.Server("Retrofit-");
        java.lang.String str47 = server46.name;
        retrofit.client.Client.Provider provider48 = null;
        java.util.concurrent.Executor executor49 = null;
        java.util.concurrent.Executor executor50 = null;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        retrofit.converter.Converter converter52 = null;
        retrofit.Profiler profiler53 = null;
        retrofit.ErrorHandler errorHandler54 = null;
        retrofit.RestAdapter.Log log55 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.Server server57 = builder56.server;
        java.util.concurrent.Executor executor58 = null;
        builder56.httpExecutor = executor58;
        java.util.concurrent.Executor executor60 = builder56.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel61 = retrofit.RestAdapter.LogLevel.FULL;
        builder56.logLevel = logLevel61;
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter(server46, provider48, executor49, executor50, requestInterceptor51, converter52, profiler53, errorHandler54, log55, logLevel61);
        retrofit.RestAdapter.Builder builder64 = builder42.setLog(log55);
        retrofit.RestAdapter.Builder builder65 = builder39.setLog(log55);
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        retrofit.Server server67 = builder66.server;
        retrofit.converter.Converter converter68 = null;
        builder66.converter = converter68;
        retrofit.RestAdapter.Log log70 = builder66.log;
        retrofit.RestAdapter.LogLevel logLevel71 = builder66.logLevel;
        retrofit.RestAdapter restAdapter72 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, (retrofit.converter.Converter) gsonConverter32, profiler33, errorHandler38, log55, logLevel71);
        builder4.errorHandler = errorHandler38;
        java.util.concurrent.Executor executor74 = null;
        builder4.callbackExecutor = executor74;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        retrofit.Server server77 = builder76.server;
        java.util.concurrent.Executor executor78 = null;
        builder76.httpExecutor = executor78;
        java.util.concurrent.Executor executor80 = null;
        builder76.callbackExecutor = executor80;
        java.util.concurrent.Executor executor82 = null;
        builder76.callbackExecutor = executor82;
        builder76.ensureSaneDefaults();
        retrofit.client.Client.Provider provider85 = builder76.clientProvider;
        builder4.clientProvider = provider85;
        retrofit.RestAdapter.Builder builder87 = builder0.setClient(provider85);
        builder87.ensureSaneDefaults();
        retrofit.RestAdapter.Log log89 = builder87.log;
        retrofit.RestAdapter.Log log90 = builder87.log;
        log90.log("");
        log90.log("GET");
        log90.log("default");
        log90.log("http://example.com");
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertNull(serializedObjectSupporter3);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNotNull(request28);
        org.junit.Assert.assertNotNull(gsonConverter30);
        org.junit.Assert.assertNotNull(gsonConverter31);
        org.junit.Assert.assertNotNull(gsonConverter32);
        org.junit.Assert.assertNotNull(request35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "http://example.com/" + "'", str36, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "POST" + "'", str37, "POST");
        org.junit.Assert.assertNotNull(errorHandler38);
        org.junit.Assert.assertNull(executor40);
        org.junit.Assert.assertNull(server41);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "default" + "'", str47, "default");
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertNull(server57);
        org.junit.Assert.assertNull(executor60);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(server67);
        org.junit.Assert.assertNull(log70);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server77);
        org.junit.Assert.assertNotNull(provider85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(log89);
        org.junit.Assert.assertNotNull(log90);
    }

    @Test
    public void test1314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1314");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request12 = serializedObjectSupporter11.deserializeObjectRequest6();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter11;
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter11.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter15 = serializedObjectSupporter11.deserializeObjectConverter7();
        retrofit.client.Request request16 = serializedObjectSupporter11.deserializeObjectRequest8();
        retrofit.client.Request request17 = serializedObjectSupporter11.deserializeObjectRequest8();
        retrofit.converter.GsonConverter gsonConverter18 = serializedObjectSupporter11.deserializeObjectConverter3();
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(gsonConverter15);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertNotNull(gsonConverter18);
    }

    @Test
    public void test1315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1315");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter10.new RestHandler();
        retrofit.converter.Converter converter14 = restAdapter10.getconverter();
        java.lang.String str15 = restAdapter10.getIDLE_THREAD_NAME();
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Retrofit-Idle" + "'", str15, "Retrofit-Idle");
    }

    @Test
    public void test1316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1316");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request12 = serializedObjectSupporter11.deserializeObjectRequest6();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter11;
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter11.deserializeObjectConverter7();
        java.lang.String str15 = serializedObjectSupporter11.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter11.deserializeObjectConverter6();
        java.lang.String str17 = serializedObjectSupporter11.deserializeObjectString3();
        retrofit.client.Request request18 = serializedObjectSupporter11.deserializeObjectRequest7();
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Retrofit-Idle" + "'", str15, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GET" + "'", str17, "GET");
        org.junit.Assert.assertNotNull(request18);
    }

    @Test
    public void test1317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1317");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request12 = serializedObjectSupporter11.deserializeObjectRequest6();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter11;
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter11.deserializeObjectConverter7();
        java.lang.String str15 = serializedObjectSupporter11.deserializeObjectString1();
        retrofit.client.Request request16 = serializedObjectSupporter11.deserializeObjectRequest2();
        retrofit.client.Request request17 = serializedObjectSupporter11.deserializeObjectRequest7();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter18 = serializedObjectSupporter11.deserializeObjectLogLevel3();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Retrofit-" + "'", str15, "Retrofit-");
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(request17);
    }

    @Test
    public void test1318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1318");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request12 = serializedObjectSupporter11.deserializeObjectRequest6();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter11;
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter11.deserializeObjectConverter7();
        java.lang.String str15 = serializedObjectSupporter11.deserializeObjectString1();
        retrofit.client.Request request16 = serializedObjectSupporter11.deserializeObjectRequest6();
        retrofit.Server server17 = serializedObjectSupporter11.deserializeObjectServer1();
        retrofit.client.Request request18 = serializedObjectSupporter11.deserializeObjectRequest5();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collections collections19 = serializedObjectSupporter11.deserializeObjectList1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.Collections$UnmodifiableRandomAccessList cannot be cast to java.util.Collections");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Retrofit-" + "'", str15, "Retrofit-");
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(server17);
        org.junit.Assert.assertNotNull(request18);
    }

    @Test
    public void test1319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1319");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        java.lang.String str2 = serializedObjectSupporter1.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter1.deserializeObjectConverter3();
        builder0.serializedObjectSupporter = serializedObjectSupporter1;
        java.util.concurrent.Executor executor5 = null;
        builder0.callbackExecutor = executor5;
        retrofit.SerializedObjectSupporter serializedObjectSupporter7 = builder0.serializedObjectSupporter;
        retrofit.mime.TypedString typedString8 = serializedObjectSupporter7.deserializeObjectTypedOutput2();
        retrofit.client.Request request9 = serializedObjectSupporter7.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter10 = serializedObjectSupporter7.deserializeObjectConverter2();
        retrofit.client.Request request11 = serializedObjectSupporter7.deserializeObjectRequest1();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Retrofit-Idle" + "'", str2, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(serializedObjectSupporter7);
        org.junit.Assert.assertNotNull(typedString8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNotNull(gsonConverter10);
        org.junit.Assert.assertNotNull(request11);
    }

    @Test
    public void test1320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1320");
        retrofit.Server server1 = new retrofit.Server("Retrofit-");
        java.lang.String str2 = server1.name;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.Server server12 = builder11.server;
        java.util.concurrent.Executor executor13 = null;
        builder11.httpExecutor = executor13;
        java.util.concurrent.Executor executor15 = builder11.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.FULL;
        builder11.logLevel = logLevel16;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter(server1, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log10, logLevel16);
        java.util.concurrent.Executor executor19 = restAdapter18.getcallbackExecutor();
        retrofit.converter.Converter converter20 = restAdapter18.getconverter();
        retrofit.RestAdapter.LogLevel logLevel21 = null;
        restAdapter18.setLogLevel(logLevel21);
        retrofit.RestAdapter.RestHandler restHandler23 = restAdapter18.new RestHandler();
        int int24 = restAdapter18.getLOG_CHUNK_SIZE();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "default" + "'", str2, "default");
        org.junit.Assert.assertNotNull(log10);
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(converter20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4000 + "'", int24 == 4000);
    }

    @Test
    public void test1321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1321");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter1();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString4();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest2();
        java.lang.String str6 = request5.method;
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GET" + "'", str6, "GET");
    }

    @Test
    public void test1322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1322");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        java.lang.String str2 = serializedObjectSupporter1.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter1.deserializeObjectConverter3();
        builder0.serializedObjectSupporter = serializedObjectSupporter1;
        java.util.concurrent.Executor executor5 = null;
        builder0.callbackExecutor = executor5;
        retrofit.SerializedObjectSupporter serializedObjectSupporter7 = builder0.serializedObjectSupporter;
        java.lang.String str8 = serializedObjectSupporter7.deserializeObjectString1();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter7.deserializeObjectConverter8();
        retrofit.client.Request request10 = serializedObjectSupporter7.deserializeObjectRequest1();
        java.lang.String str11 = serializedObjectSupporter7.deserializeObjectString1();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Retrofit-Idle" + "'", str2, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(serializedObjectSupporter7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Retrofit-" + "'", str8, "Retrofit-");
        org.junit.Assert.assertNotNull(gsonConverter9);
        org.junit.Assert.assertNotNull(request10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
    }

    @Test
    public void test1323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1323");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter10.new RestHandler();
        retrofit.converter.Converter converter13 = restAdapter10.converter;
        retrofit.RestAdapter.Log log14 = restAdapter10.log;
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter10.getrequestInterceptor();
        java.lang.String str16 = restAdapter10.getTHREAD_PREFIX();
        retrofit.Server server17 = null;
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Log log25 = null;
        retrofit.RestAdapter.LogLevel logLevel26 = null;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server17, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log25, logLevel26);
        retrofit.RestAdapter.RestHandler restHandler28 = restAdapter27.new RestHandler();
        retrofit.Server server29 = restAdapter27.server;
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter27.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor31 = restAdapter27.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter32 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request33 = serializedObjectSupporter32.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter34 = serializedObjectSupporter32.deserializeObjectConverter1();
        java.lang.String str35 = serializedObjectSupporter32.deserializeObjectString4();
        java.lang.String str36 = serializedObjectSupporter32.deserializeObjectString4();
        restAdapter27.serializedObjectSupporter = serializedObjectSupporter32;
        retrofit.client.Request request38 = serializedObjectSupporter32.deserializeObjectRequest4();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request39 = restAdapter10.logAndReplaceRequest(request38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertNull(log14);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Retrofit-" + "'", str16, "Retrofit-");
        org.junit.Assert.assertNull(server29);
        org.junit.Assert.assertNull(logLevel30);
        org.junit.Assert.assertNull(requestInterceptor31);
        org.junit.Assert.assertNotNull(request33);
        org.junit.Assert.assertNotNull(gsonConverter34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "http://example.com/" + "'", str35, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "http://example.com/" + "'", str36, "http://example.com/");
        org.junit.Assert.assertNotNull(request38);
    }

    @Test
    public void test1324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1324");
        retrofit.Server server1 = new retrofit.Server("Retrofit-");
        java.lang.String str2 = server1.name;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.Server server12 = builder11.server;
        java.util.concurrent.Executor executor13 = null;
        builder11.httpExecutor = executor13;
        java.util.concurrent.Executor executor15 = builder11.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.FULL;
        builder11.logLevel = logLevel16;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter(server1, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log10, logLevel16);
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter18.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor20 = restAdapter18.requestInterceptor;
        retrofit.RestAdapter.RestHandler restHandler21 = restAdapter18.new RestHandler();
        java.util.concurrent.Executor executor22 = restAdapter18.httpExecutor;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "default" + "'", str2, "default");
        org.junit.Assert.assertNotNull(log10);
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(requestInterceptor20);
        org.junit.Assert.assertNull(executor22);
    }

    @Test
    public void test1325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1325");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.Profiler profiler2 = builder0.profiler;
        retrofit.client.Client.Provider provider3 = null;
        builder0.setclientProvider(provider3);
        retrofit.Server server6 = new retrofit.Server("Retrofit-");
        java.lang.String str7 = server6.name;
        builder0.server = server6;
        retrofit.Server server9 = builder0.server;
        retrofit.Server server10 = null;
        retrofit.client.Client.Provider provider11 = null;
        java.util.concurrent.Executor executor12 = null;
        java.util.concurrent.Executor executor13 = null;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        retrofit.converter.Converter converter15 = null;
        retrofit.Profiler profiler16 = null;
        retrofit.ErrorHandler errorHandler17 = null;
        retrofit.RestAdapter.Log log18 = null;
        retrofit.RestAdapter.LogLevel logLevel19 = null;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter(server10, provider11, executor12, executor13, requestInterceptor14, converter15, profiler16, errorHandler17, log18, logLevel19);
        retrofit.SerializedObjectSupporter serializedObjectSupporter21 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request22 = serializedObjectSupporter21.deserializeObjectRequest6();
        restAdapter20.serializedObjectSupporter = serializedObjectSupporter21;
        retrofit.converter.GsonConverter gsonConverter24 = serializedObjectSupporter21.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter25 = serializedObjectSupporter21.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter26 = serializedObjectSupporter21.deserializeObjectConverter1();
        retrofit.client.Request request27 = serializedObjectSupporter21.deserializeObjectRequest5();
        retrofit.RequestInterceptor requestInterceptor28 = serializedObjectSupporter21.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder29 = builder0.setRequestInterceptor(requestInterceptor28);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor31 = builder30.getcallbackExecutor();
        retrofit.Server server32 = builder30.server;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider34 = null;
        builder33.setclientProvider(provider34);
        retrofit.Server server37 = new retrofit.Server("Retrofit-");
        java.lang.String str38 = server37.name;
        retrofit.client.Client.Provider provider39 = null;
        java.util.concurrent.Executor executor40 = null;
        java.util.concurrent.Executor executor41 = null;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        retrofit.converter.Converter converter43 = null;
        retrofit.Profiler profiler44 = null;
        retrofit.ErrorHandler errorHandler45 = null;
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.Server server48 = builder47.server;
        java.util.concurrent.Executor executor49 = null;
        builder47.httpExecutor = executor49;
        java.util.concurrent.Executor executor51 = builder47.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.FULL;
        builder47.logLevel = logLevel52;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter(server37, provider39, executor40, executor41, requestInterceptor42, converter43, profiler44, errorHandler45, log46, logLevel52);
        retrofit.RestAdapter.Builder builder55 = builder33.setLog(log46);
        retrofit.RestAdapter.Builder builder56 = builder30.setLog(log46);
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor58 = builder57.getcallbackExecutor();
        retrofit.Server server59 = builder57.server;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider61 = null;
        builder60.setclientProvider(provider61);
        retrofit.Server server64 = new retrofit.Server("Retrofit-");
        java.lang.String str65 = server64.name;
        retrofit.client.Client.Provider provider66 = null;
        java.util.concurrent.Executor executor67 = null;
        java.util.concurrent.Executor executor68 = null;
        retrofit.RequestInterceptor requestInterceptor69 = null;
        retrofit.converter.Converter converter70 = null;
        retrofit.Profiler profiler71 = null;
        retrofit.ErrorHandler errorHandler72 = null;
        retrofit.RestAdapter.Log log73 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        retrofit.Server server75 = builder74.server;
        java.util.concurrent.Executor executor76 = null;
        builder74.httpExecutor = executor76;
        java.util.concurrent.Executor executor78 = builder74.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel79 = retrofit.RestAdapter.LogLevel.FULL;
        builder74.logLevel = logLevel79;
        retrofit.RestAdapter restAdapter81 = new retrofit.RestAdapter(server64, provider66, executor67, executor68, requestInterceptor69, converter70, profiler71, errorHandler72, log73, logLevel79);
        retrofit.RestAdapter.Builder builder82 = builder60.setLog(log73);
        retrofit.RestAdapter.Builder builder83 = builder57.setLog(log73);
        java.util.concurrent.Executor executor84 = builder83.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder85 = new retrofit.RestAdapter.Builder();
        retrofit.Server server86 = builder85.server;
        java.util.concurrent.Executor executor87 = null;
        builder85.httpExecutor = executor87;
        java.util.concurrent.Executor executor89 = null;
        builder85.callbackExecutor = executor89;
        java.util.concurrent.Executor executor91 = null;
        builder85.callbackExecutor = executor91;
        builder85.ensureSaneDefaults();
        retrofit.client.Client.Provider provider94 = builder85.clientProvider;
        retrofit.RestAdapter.Builder builder95 = builder83.setClient(provider94);
        builder30.setclientProvider(provider94);
        builder29.setclientProvider(provider94);
        java.lang.Class<?> wildcardClass98 = builder29.getClass();
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "default" + "'", str7, "default");
        org.junit.Assert.assertNotNull(server9);
        org.junit.Assert.assertNotNull(request22);
        org.junit.Assert.assertNotNull(gsonConverter24);
        org.junit.Assert.assertNotNull(gsonConverter25);
        org.junit.Assert.assertNotNull(gsonConverter26);
        org.junit.Assert.assertNotNull(request27);
        org.junit.Assert.assertNotNull(requestInterceptor28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNull(server32);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "default" + "'", str38, "default");
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertNull(server48);
        org.junit.Assert.assertNull(executor51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(executor58);
        org.junit.Assert.assertNull(server59);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "default" + "'", str65, "default");
        org.junit.Assert.assertNotNull(log73);
        org.junit.Assert.assertNull(server75);
        org.junit.Assert.assertNull(executor78);
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNull(executor84);
        org.junit.Assert.assertNull(server86);
        org.junit.Assert.assertNotNull(provider94);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1326");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request12 = serializedObjectSupporter11.deserializeObjectRequest6();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter11;
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter11.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter15 = serializedObjectSupporter11.deserializeObjectConverter7();
        java.lang.String str16 = serializedObjectSupporter11.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter11.deserializeObjectConverter1();
        retrofit.mime.TypedString typedString18 = serializedObjectSupporter11.deserializeObjectTypedOutput2();
        retrofit.client.Request request19 = serializedObjectSupporter11.deserializeObjectRequest7();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter11.deserializeObjectConverter6();
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(gsonConverter15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Retrofit-Idle" + "'", str16, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertNotNull(typedString18);
        org.junit.Assert.assertNotNull(request19);
        org.junit.Assert.assertNotNull(gsonConverter20);
    }

    @Test
    public void test1327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1327");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        java.lang.String str2 = serializedObjectSupporter1.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter1.deserializeObjectConverter3();
        builder0.serializedObjectSupporter = serializedObjectSupporter1;
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.RestAdapter.Builder builder7 = builder0.setServer("http://example.com/");
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.Server server9 = builder8.server;
        java.util.concurrent.Executor executor10 = null;
        builder8.httpExecutor = executor10;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        java.lang.String str14 = serializedObjectSupporter13.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter15 = serializedObjectSupporter13.deserializeObjectConverter3();
        builder12.serializedObjectSupporter = serializedObjectSupporter13;
        retrofit.RestAdapter.Log log17 = builder12.log;
        retrofit.RestAdapter.Builder builder19 = builder12.setServer("http://example.com/");
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor21 = builder20.getcallbackExecutor();
        retrofit.Server server22 = builder20.server;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider24 = null;
        builder23.setclientProvider(provider24);
        retrofit.Server server27 = new retrofit.Server("Retrofit-");
        java.lang.String str28 = server27.name;
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.Server server38 = builder37.server;
        java.util.concurrent.Executor executor39 = null;
        builder37.httpExecutor = executor39;
        java.util.concurrent.Executor executor41 = builder37.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.FULL;
        builder37.logLevel = logLevel42;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter(server27, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log36, logLevel42);
        retrofit.RestAdapter.Builder builder45 = builder23.setLog(log36);
        retrofit.RestAdapter.Builder builder46 = builder20.setLog(log36);
        retrofit.Server server47 = null;
        retrofit.client.Client.Provider provider48 = null;
        java.util.concurrent.Executor executor49 = null;
        java.util.concurrent.Executor executor50 = null;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        retrofit.converter.Converter converter52 = null;
        retrofit.Profiler profiler53 = null;
        retrofit.ErrorHandler errorHandler54 = null;
        retrofit.RestAdapter.Log log55 = null;
        retrofit.RestAdapter.LogLevel logLevel56 = null;
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter(server47, provider48, executor49, executor50, requestInterceptor51, converter52, profiler53, errorHandler54, log55, logLevel56);
        retrofit.SerializedObjectSupporter serializedObjectSupporter58 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request59 = serializedObjectSupporter58.deserializeObjectRequest6();
        restAdapter57.serializedObjectSupporter = serializedObjectSupporter58;
        retrofit.converter.GsonConverter gsonConverter61 = serializedObjectSupporter58.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter62 = serializedObjectSupporter58.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter63 = serializedObjectSupporter58.deserializeObjectConverter1();
        retrofit.client.Request request64 = serializedObjectSupporter58.deserializeObjectRequest5();
        retrofit.RequestInterceptor requestInterceptor65 = serializedObjectSupporter58.deserializeObjectRequestInterceptor1();
        builder46.requestInterceptor = requestInterceptor65;
        retrofit.RestAdapter.Builder builder67 = builder19.setRequestInterceptor(requestInterceptor65);
        retrofit.RestAdapter.LogLevel logLevel68 = builder67.logLevel;
        retrofit.Server server69 = null;
        retrofit.client.Client.Provider provider70 = null;
        java.util.concurrent.Executor executor71 = null;
        java.util.concurrent.Executor executor72 = null;
        retrofit.RequestInterceptor requestInterceptor73 = null;
        retrofit.converter.Converter converter74 = null;
        retrofit.Profiler profiler75 = null;
        retrofit.ErrorHandler errorHandler76 = null;
        retrofit.RestAdapter.Log log77 = null;
        retrofit.RestAdapter.LogLevel logLevel78 = null;
        retrofit.RestAdapter restAdapter79 = new retrofit.RestAdapter(server69, provider70, executor71, executor72, requestInterceptor73, converter74, profiler75, errorHandler76, log77, logLevel78);
        retrofit.SerializedObjectSupporter serializedObjectSupporter80 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request81 = serializedObjectSupporter80.deserializeObjectRequest6();
        restAdapter79.serializedObjectSupporter = serializedObjectSupporter80;
        retrofit.converter.GsonConverter gsonConverter83 = serializedObjectSupporter80.deserializeObjectConverter7();
        retrofit.Server server84 = serializedObjectSupporter80.deserializeObjectServer1();
        retrofit.converter.GsonConverter gsonConverter85 = serializedObjectSupporter80.deserializeObjectConverter5();
        retrofit.Server server86 = serializedObjectSupporter80.deserializeObjectServer1();
        builder67.server = server86;
        retrofit.RestAdapter restAdapter88 = builder67.build();
        java.util.concurrent.Executor executor89 = restAdapter88.httpExecutor;
        builder8.httpExecutor = executor89;
        builder0.callbackExecutor = executor89;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Retrofit-Idle" + "'", str2, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(server9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Retrofit-Idle" + "'", str14, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter15);
        org.junit.Assert.assertNull(log17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(server22);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "default" + "'", str28, "default");
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertNull(server38);
        org.junit.Assert.assertNull(executor41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(request59);
        org.junit.Assert.assertNotNull(gsonConverter61);
        org.junit.Assert.assertNotNull(gsonConverter62);
        org.junit.Assert.assertNotNull(gsonConverter63);
        org.junit.Assert.assertNotNull(request64);
        org.junit.Assert.assertNotNull(requestInterceptor65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(request81);
        org.junit.Assert.assertNotNull(gsonConverter83);
        org.junit.Assert.assertNotNull(server84);
        org.junit.Assert.assertNotNull(gsonConverter85);
        org.junit.Assert.assertNotNull(server86);
        org.junit.Assert.assertNotNull(restAdapter88);
        org.junit.Assert.assertNotNull(executor89);
    }

    @Test
    public void test1328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1328");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        java.lang.String str2 = serializedObjectSupporter1.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter1.deserializeObjectConverter3();
        builder0.serializedObjectSupporter = serializedObjectSupporter1;
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.RestAdapter.Builder builder7 = builder0.setServer("http://example.com/");
        retrofit.RestAdapter.Builder builder9 = builder7.setServer("http://example.com");
        retrofit.Profiler profiler10 = builder7.profiler;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Retrofit-Idle" + "'", str2, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(profiler10);
    }

    @Test
    public void test1329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1329");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request12 = serializedObjectSupporter11.deserializeObjectRequest6();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter11;
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter11.deserializeObjectConverter7();
        java.lang.String str15 = serializedObjectSupporter11.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter11.deserializeObjectConverter6();
        java.lang.String str17 = serializedObjectSupporter11.deserializeObjectString3();
        retrofit.client.Request request18 = serializedObjectSupporter11.deserializeObjectRequest1();
        retrofit.client.Request request19 = serializedObjectSupporter11.deserializeObjectRequest4();
        retrofit.client.Request request20 = serializedObjectSupporter11.deserializeObjectRequest7();
        retrofit.client.Request request21 = serializedObjectSupporter11.deserializeObjectRequest4();
        retrofit.mime.TypedOutput typedOutput22 = request21.getBody();
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Retrofit-Idle" + "'", str15, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GET" + "'", str17, "GET");
        org.junit.Assert.assertNotNull(request18);
        org.junit.Assert.assertNotNull(request19);
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertNotNull(request21);
        org.junit.Assert.assertNull(typedOutput22);
    }

    @Test
    public void test1330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1330");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        java.util.concurrent.Executor executor2 = null;
        builder0.httpExecutor = executor2;
        java.util.concurrent.Executor executor4 = builder0.httpExecutor;
        java.util.concurrent.Executor executor5 = null;
        builder0.httpExecutor = executor5;
        retrofit.Server server7 = builder0.server;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(server7);
    }

    @Test
    public void test1331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1331");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request16 = serializedObjectSupporter15.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter15.deserializeObjectConverter1();
        java.lang.String str18 = serializedObjectSupporter15.deserializeObjectString4();
        java.lang.String str19 = serializedObjectSupporter15.deserializeObjectString4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter15;
        retrofit.ErrorHandler errorHandler21 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor22 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.Server server24 = builder23.server;
        retrofit.converter.Converter converter25 = null;
        builder23.converter = converter25;
        retrofit.RestAdapter.Log log27 = builder23.log;
        retrofit.RestAdapter.LogLevel logLevel28 = builder23.logLevel;
        restAdapter10.logLevel = logLevel28;
        retrofit.RestAdapter.RestHandler restHandler30 = restAdapter10.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor31 = restAdapter10.getrequestInterceptor();
        retrofit.RestAdapter.RestHandler restHandler32 = restAdapter10.new RestHandler();
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(server24);
        org.junit.Assert.assertNull(log27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor31);
    }

    @Test
    public void test1332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1332");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request12 = serializedObjectSupporter11.deserializeObjectRequest6();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter11;
        java.lang.String str14 = serializedObjectSupporter11.deserializeObjectString4();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter15 = serializedObjectSupporter11.deserializeObjectLogLevel2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "http://example.com/" + "'", str14, "http://example.com/");
    }

    @Test
    public void test1333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1333");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter10.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request16 = serializedObjectSupporter15.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter15.deserializeObjectConverter1();
        java.lang.String str18 = serializedObjectSupporter15.deserializeObjectString4();
        java.lang.String str19 = serializedObjectSupporter15.deserializeObjectString4();
        retrofit.client.Request request20 = serializedObjectSupporter15.deserializeObjectRequest3();
        retrofit.client.Request request21 = serializedObjectSupporter15.deserializeObjectRequest4();
        restHandler14.serializedObjectSupporter = serializedObjectSupporter15;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter23 = serializedObjectSupporter15.deserializeObjectLogLevel2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertNotNull(request21);
    }

    @Test
    public void test1334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1334");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        java.lang.String str2 = serializedObjectSupporter1.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter1.deserializeObjectConverter3();
        builder0.serializedObjectSupporter = serializedObjectSupporter1;
        java.util.concurrent.Executor executor5 = null;
        builder0.callbackExecutor = executor5;
        retrofit.SerializedObjectSupporter serializedObjectSupporter7 = builder0.serializedObjectSupporter;
        java.lang.String str8 = serializedObjectSupporter7.deserializeObjectString1();
        retrofit.mime.TypedString typedString9 = serializedObjectSupporter7.deserializeObjectTypedOutput2();
        retrofit.client.Request request10 = serializedObjectSupporter7.deserializeObjectRequest1();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Retrofit-Idle" + "'", str2, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(serializedObjectSupporter7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Retrofit-" + "'", str8, "Retrofit-");
        org.junit.Assert.assertNotNull(typedString9);
        org.junit.Assert.assertNotNull(request10);
    }

    @Test
    public void test1335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1335");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString2();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString5();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest2();
        java.util.List<retrofit.client.Header> headerList5 = request4.getHeaders();
        java.lang.String str6 = request4.getMethod();
        java.lang.String str7 = request4.getMethod();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Retrofit-Idle" + "'", str1, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "POST" + "'", str3, "POST");
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(headerList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GET" + "'", str6, "GET");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GET" + "'", str7, "GET");
    }

    @Test
    public void test1336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1336");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.converter.Converter converter2 = null;
        builder0.converter = converter2;
        java.util.concurrent.Executor executor4 = null;
        builder0.setcallbackExecutor(executor4);
        retrofit.client.Client.Provider provider6 = builder0.clientProvider;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = builder7.getcallbackExecutor();
        retrofit.Server server9 = builder7.server;
        retrofit.Server server12 = new retrofit.Server("default", "");
        retrofit.RestAdapter.Builder builder13 = builder7.setServer(server12);
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = builder14.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor16 = null;
        builder14.requestInterceptor = requestInterceptor16;
        java.util.concurrent.Executor executor18 = builder14.callbackExecutor;
        retrofit.RestAdapter.Builder builder20 = builder14.setServer("default");
        retrofit.SerializedObjectSupporter serializedObjectSupporter21 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request22 = serializedObjectSupporter21.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter23 = serializedObjectSupporter21.deserializeObjectConverter1();
        retrofit.RestAdapter.Builder builder24 = builder14.setConverter((retrofit.converter.Converter) gsonConverter23);
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = builder25.getcallbackExecutor();
        retrofit.Server server27 = builder25.server;
        retrofit.RestAdapter.Log log28 = builder25.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request30 = serializedObjectSupporter29.deserializeObjectRequest6();
        java.lang.String str31 = serializedObjectSupporter29.deserializeObjectString4();
        java.lang.String str32 = serializedObjectSupporter29.deserializeObjectString5();
        retrofit.ErrorHandler errorHandler33 = serializedObjectSupporter29.deserializeObjectErrorHandler1();
        builder25.errorHandler = errorHandler33;
        builder24.errorHandler = errorHandler33;
        retrofit.RestAdapter.Builder builder36 = builder13.setErrorHandler(errorHandler33);
        retrofit.RestAdapter.Builder builder37 = builder0.setErrorHandler(errorHandler33);
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.Server server39 = builder38.server;
        retrofit.converter.Converter converter40 = null;
        builder38.converter = converter40;
        retrofit.RestAdapter.Log log42 = builder38.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter43 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request44 = serializedObjectSupporter43.deserializeObjectRequest6();
        java.lang.String str45 = serializedObjectSupporter43.deserializeObjectString4();
        java.lang.String str46 = serializedObjectSupporter43.deserializeObjectString4();
        retrofit.ErrorHandler errorHandler47 = serializedObjectSupporter43.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder48 = builder38.setErrorHandler(errorHandler47);
        retrofit.RestAdapter.Builder builder49 = builder0.setErrorHandler(errorHandler47);
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(provider6);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(server9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(request22);
        org.junit.Assert.assertNotNull(gsonConverter23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(server27);
        org.junit.Assert.assertNull(log28);
        org.junit.Assert.assertNotNull(request30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "http://example.com/" + "'", str31, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "POST" + "'", str32, "POST");
        org.junit.Assert.assertNotNull(errorHandler33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(server39);
        org.junit.Assert.assertNull(log42);
        org.junit.Assert.assertNotNull(request44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "http://example.com/" + "'", str45, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "http://example.com/" + "'", str46, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test1337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1337");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.Server server2 = builder0.server;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider4 = null;
        builder3.setclientProvider(provider4);
        retrofit.Server server7 = new retrofit.Server("Retrofit-");
        java.lang.String str8 = server7.name;
        retrofit.client.Client.Provider provider9 = null;
        java.util.concurrent.Executor executor10 = null;
        java.util.concurrent.Executor executor11 = null;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        retrofit.converter.Converter converter13 = null;
        retrofit.Profiler profiler14 = null;
        retrofit.ErrorHandler errorHandler15 = null;
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.Server server18 = builder17.server;
        java.util.concurrent.Executor executor19 = null;
        builder17.httpExecutor = executor19;
        java.util.concurrent.Executor executor21 = builder17.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.FULL;
        builder17.logLevel = logLevel22;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server7, provider9, executor10, executor11, requestInterceptor12, converter13, profiler14, errorHandler15, log16, logLevel22);
        retrofit.RestAdapter.Builder builder25 = builder3.setLog(log16);
        retrofit.RestAdapter.Builder builder26 = builder0.setLog(log16);
        retrofit.Profiler profiler27 = null;
        builder26.profiler = profiler27;
        java.util.concurrent.Executor executor29 = builder26.gethttpExecutor();
        retrofit.Server server31 = new retrofit.Server("Retrofit-");
        java.lang.String str32 = server31.name;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.Server server42 = builder41.server;
        java.util.concurrent.Executor executor43 = null;
        builder41.httpExecutor = executor43;
        java.util.concurrent.Executor executor45 = builder41.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.FULL;
        builder41.logLevel = logLevel46;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter(server31, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log40, logLevel46);
        builder26.log = log40;
        retrofit.Server server50 = null;
        retrofit.client.Client.Provider provider51 = null;
        java.util.concurrent.Executor executor52 = null;
        java.util.concurrent.Executor executor53 = null;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        retrofit.converter.Converter converter55 = null;
        retrofit.Profiler profiler56 = null;
        retrofit.ErrorHandler errorHandler57 = null;
        retrofit.RestAdapter.Log log58 = null;
        retrofit.RestAdapter.LogLevel logLevel59 = null;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter(server50, provider51, executor52, executor53, requestInterceptor54, converter55, profiler56, errorHandler57, log58, logLevel59);
        retrofit.SerializedObjectSupporter serializedObjectSupporter61 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request62 = serializedObjectSupporter61.deserializeObjectRequest6();
        restAdapter60.serializedObjectSupporter = serializedObjectSupporter61;
        retrofit.converter.GsonConverter gsonConverter64 = serializedObjectSupporter61.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter65 = serializedObjectSupporter61.deserializeObjectConverter7();
        java.lang.String str66 = serializedObjectSupporter61.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter67 = serializedObjectSupporter61.deserializeObjectConverter1();
        retrofit.RestAdapter.Builder builder68 = builder26.setConverter((retrofit.converter.Converter) gsonConverter67);
        retrofit.Profiler profiler69 = builder68.profiler;
        java.util.concurrent.Executor executor70 = builder68.httpExecutor;
        java.util.concurrent.Executor executor71 = builder68.httpExecutor;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "default" + "'", str8, "default");
        org.junit.Assert.assertNotNull(log16);
        org.junit.Assert.assertNull(server18);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "default" + "'", str32, "default");
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertNull(server42);
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(request62);
        org.junit.Assert.assertNotNull(gsonConverter64);
        org.junit.Assert.assertNotNull(gsonConverter65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Retrofit-Idle" + "'", str66, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNull(profiler69);
        org.junit.Assert.assertNull(executor70);
        org.junit.Assert.assertNull(executor71);
    }

    @Test
    public void test1338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1338");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter10.new RestHandler();
        retrofit.converter.Converter converter13 = restAdapter10.converter;
        retrofit.RestAdapter.Log log14 = restAdapter10.log;
        retrofit.RestAdapter.LogLevel logLevel15 = restAdapter10.logLevel;
        retrofit.Profiler profiler16 = restAdapter10.profiler;
        retrofit.client.Client.Provider provider17 = restAdapter10.getclientProvider();
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertNull(log14);
        org.junit.Assert.assertNull(logLevel15);
        org.junit.Assert.assertNull(profiler16);
        org.junit.Assert.assertNull(provider17);
    }

    @Test
    public void test1339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1339");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter1();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString1();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest5();
        java.lang.String str6 = request5.getUrl();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Retrofit-" + "'", str4, "Retrofit-");
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://example.com/" + "'", str6, "http://example.com/");
    }

    @Test
    public void test1340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1340");
        retrofit.SerializedObjectSupporter serializedObjectSupporter2 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request3 = serializedObjectSupporter2.deserializeObjectRequest6();
        retrofit.client.Request request4 = serializedObjectSupporter2.deserializeObjectRequest8();
        java.util.List<retrofit.client.Header> headerList5 = request4.headers;
        java.lang.String str6 = request4.url;
        java.util.List<retrofit.client.Header> headerList7 = request4.getHeaders();
        retrofit.client.Header[] headerArray14 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList15 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList15, headerArray14);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList15, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("", "Retrofit-Idle", (java.util.List<retrofit.client.Header>) headerList15, typedOutput19);
        java.util.List<retrofit.client.Header> headerList27 = null;
        retrofit.mime.TypedOutput typedOutput28 = null;
        retrofit.client.Request request29 = new retrofit.client.Request("", "", headerList27, typedOutput28);
        retrofit.mime.TypedOutput typedOutput30 = request29.getBody();
        java.lang.String str31 = request29.url;
        retrofit.mime.TypedOutput typedOutput32 = request29.getBody();
        java.util.List<retrofit.client.Header> headerList33 = request29.getHeaders();
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter35 = new retrofit.SerializedObjectSupporter();
        java.lang.String str36 = serializedObjectSupporter35.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter37 = serializedObjectSupporter35.deserializeObjectConverter3();
        builder34.serializedObjectSupporter = serializedObjectSupporter35;
        java.util.concurrent.Executor executor39 = null;
        builder34.callbackExecutor = executor39;
        retrofit.SerializedObjectSupporter serializedObjectSupporter41 = builder34.serializedObjectSupporter;
        java.lang.String str42 = serializedObjectSupporter41.deserializeObjectString1();
        retrofit.mime.TypedString typedString43 = serializedObjectSupporter41.deserializeObjectTypedOutput2();
        retrofit.client.Request request44 = new retrofit.client.Request("hi!", "POST", headerList33, (retrofit.mime.TypedOutput) typedString43);
        java.util.List<retrofit.client.Header> headerList51 = null;
        retrofit.mime.TypedOutput typedOutput52 = null;
        retrofit.client.Request request53 = new retrofit.client.Request("", "", headerList51, typedOutput52);
        retrofit.mime.TypedOutput typedOutput54 = request53.getBody();
        java.lang.String str55 = request53.url;
        retrofit.mime.TypedOutput typedOutput56 = request53.getBody();
        java.util.List<retrofit.client.Header> headerList57 = request53.getHeaders();
        retrofit.mime.TypedOutput typedOutput58 = null;
        retrofit.client.Request request59 = new retrofit.client.Request("Retrofit-", "Retrofit-", headerList57, typedOutput58);
        retrofit.client.Header[] headerArray64 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList65 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList65, headerArray64);
        retrofit.mime.TypedOutput typedOutput67 = null;
        retrofit.client.Request request68 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList65, typedOutput67);
        java.util.List<retrofit.client.Header> headerList69 = request68.headers;
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter71 = new retrofit.SerializedObjectSupporter();
        java.lang.String str72 = serializedObjectSupporter71.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter73 = serializedObjectSupporter71.deserializeObjectConverter3();
        builder70.serializedObjectSupporter = serializedObjectSupporter71;
        java.util.concurrent.Executor executor75 = null;
        builder70.callbackExecutor = executor75;
        retrofit.SerializedObjectSupporter serializedObjectSupporter77 = builder70.serializedObjectSupporter;
        retrofit.mime.TypedString typedString78 = serializedObjectSupporter77.deserializeObjectTypedOutput2();
        retrofit.client.Request request79 = new retrofit.client.Request("http://example.com/", "http://example.com/", headerList69, (retrofit.mime.TypedOutput) typedString78);
        retrofit.client.Request request80 = new retrofit.client.Request("Retrofit-Idle", "http://example.com", headerList57, (retrofit.mime.TypedOutput) typedString78);
        retrofit.client.Request request81 = new retrofit.client.Request("http://example.com", "", headerList33, (retrofit.mime.TypedOutput) typedString78);
        retrofit.client.Request request82 = new retrofit.client.Request("GET", "POST", (java.util.List<retrofit.client.Header>) headerList15, (retrofit.mime.TypedOutput) typedString78);
        retrofit.client.Request request83 = new retrofit.client.Request("http://example.com", "Retrofit-", headerList7, (retrofit.mime.TypedOutput) typedString78);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(headerList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://example.com/" + "'", str6, "http://example.com/");
        org.junit.Assert.assertNotNull(headerList7);
        org.junit.Assert.assertNotNull(headerArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(typedOutput30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNull(typedOutput32);
        org.junit.Assert.assertNotNull(headerList33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Retrofit-Idle" + "'", str36, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter37);
        org.junit.Assert.assertNotNull(serializedObjectSupporter41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Retrofit-" + "'", str42, "Retrofit-");
        org.junit.Assert.assertNotNull(typedString43);
        org.junit.Assert.assertNull(typedOutput54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNull(typedOutput56);
        org.junit.Assert.assertNotNull(headerList57);
        org.junit.Assert.assertNotNull(headerArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(headerList69);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Retrofit-Idle" + "'", str72, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter73);
        org.junit.Assert.assertNotNull(serializedObjectSupporter77);
        org.junit.Assert.assertNotNull(typedString78);
    }

    @Test
    public void test1341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1341");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request12 = serializedObjectSupporter11.deserializeObjectRequest6();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter11;
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter11.deserializeObjectConverter7();
        java.lang.String str15 = serializedObjectSupporter11.deserializeObjectString1();
        retrofit.client.Request request16 = serializedObjectSupporter11.deserializeObjectRequest2();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter11.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter18 = serializedObjectSupporter11.deserializeObjectConverter1();
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Retrofit-" + "'", str15, "Retrofit-");
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertNotNull(gsonConverter18);
    }

    @Test
    public void test1342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1342");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        java.lang.String str17 = serializedObjectSupporter16.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter18 = serializedObjectSupporter16.deserializeObjectConverter3();
        builder15.serializedObjectSupporter = serializedObjectSupporter16;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter16;
        retrofit.converter.GsonConverter gsonConverter21 = serializedObjectSupporter16.deserializeObjectConverter5();
        retrofit.client.Request request22 = serializedObjectSupporter16.deserializeObjectRequest1();
        retrofit.client.Request request23 = serializedObjectSupporter16.deserializeObjectRequest7();
        java.lang.String str24 = request23.getUrl();
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-Idle" + "'", str17, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter18);
        org.junit.Assert.assertNotNull(gsonConverter21);
        org.junit.Assert.assertNotNull(request22);
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "http://example.com/" + "'", str24, "http://example.com/");
    }

    @Test
    public void test1343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1343");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = null;
        builder0.setclientProvider(provider1);
        retrofit.Server server4 = new retrofit.Server("Retrofit-");
        java.lang.String str5 = server4.name;
        retrofit.client.Client.Provider provider6 = null;
        java.util.concurrent.Executor executor7 = null;
        java.util.concurrent.Executor executor8 = null;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        retrofit.converter.Converter converter10 = null;
        retrofit.Profiler profiler11 = null;
        retrofit.ErrorHandler errorHandler12 = null;
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.Server server15 = builder14.server;
        java.util.concurrent.Executor executor16 = null;
        builder14.httpExecutor = executor16;
        java.util.concurrent.Executor executor18 = builder14.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.FULL;
        builder14.logLevel = logLevel19;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter(server4, provider6, executor7, executor8, requestInterceptor9, converter10, profiler11, errorHandler12, log13, logLevel19);
        retrofit.RestAdapter.Builder builder22 = builder0.setLog(log13);
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor24 = builder23.getcallbackExecutor();
        retrofit.Server server25 = builder23.server;
        retrofit.client.Client.Provider provider26 = builder23.clientProvider;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor28 = builder27.getcallbackExecutor();
        retrofit.Server server29 = builder27.server;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider31 = null;
        builder30.setclientProvider(provider31);
        retrofit.Server server34 = new retrofit.Server("Retrofit-");
        java.lang.String str35 = server34.name;
        retrofit.client.Client.Provider provider36 = null;
        java.util.concurrent.Executor executor37 = null;
        java.util.concurrent.Executor executor38 = null;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        retrofit.converter.Converter converter40 = null;
        retrofit.Profiler profiler41 = null;
        retrofit.ErrorHandler errorHandler42 = null;
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.Server server45 = builder44.server;
        java.util.concurrent.Executor executor46 = null;
        builder44.httpExecutor = executor46;
        java.util.concurrent.Executor executor48 = builder44.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.FULL;
        builder44.logLevel = logLevel49;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter(server34, provider36, executor37, executor38, requestInterceptor39, converter40, profiler41, errorHandler42, log43, logLevel49);
        retrofit.RestAdapter.Builder builder52 = builder30.setLog(log43);
        retrofit.RestAdapter.Builder builder53 = builder27.setLog(log43);
        java.util.concurrent.Executor executor54 = builder53.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.Server server56 = builder55.server;
        java.util.concurrent.Executor executor57 = null;
        builder55.httpExecutor = executor57;
        java.util.concurrent.Executor executor59 = null;
        builder55.callbackExecutor = executor59;
        java.util.concurrent.Executor executor61 = null;
        builder55.callbackExecutor = executor61;
        builder55.ensureSaneDefaults();
        retrofit.client.Client.Provider provider64 = builder55.clientProvider;
        retrofit.RestAdapter.Builder builder65 = builder53.setClient(provider64);
        builder23.setclientProvider(provider64);
        builder22.clientProvider = provider64;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "default" + "'", str5, "default");
        org.junit.Assert.assertNotNull(log13);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(server25);
        org.junit.Assert.assertNull(provider26);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNull(server29);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "default" + "'", str35, "default");
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertNull(server45);
        org.junit.Assert.assertNull(executor48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(executor54);
        org.junit.Assert.assertNull(server56);
        org.junit.Assert.assertNotNull(provider64);
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test1344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1344");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = null;
        builder0.setclientProvider(provider1);
        retrofit.Server server4 = new retrofit.Server("Retrofit-");
        java.lang.String str5 = server4.name;
        retrofit.client.Client.Provider provider6 = null;
        java.util.concurrent.Executor executor7 = null;
        java.util.concurrent.Executor executor8 = null;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        retrofit.converter.Converter converter10 = null;
        retrofit.Profiler profiler11 = null;
        retrofit.ErrorHandler errorHandler12 = null;
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.Server server15 = builder14.server;
        java.util.concurrent.Executor executor16 = null;
        builder14.httpExecutor = executor16;
        java.util.concurrent.Executor executor18 = builder14.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.FULL;
        builder14.logLevel = logLevel19;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter(server4, provider6, executor7, executor8, requestInterceptor9, converter10, profiler11, errorHandler12, log13, logLevel19);
        retrofit.RestAdapter.Builder builder22 = builder0.setLog(log13);
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.Server server24 = builder23.server;
        java.util.concurrent.Executor executor25 = null;
        builder23.httpExecutor = executor25;
        java.util.concurrent.Executor executor27 = null;
        builder23.callbackExecutor = executor27;
        java.util.concurrent.Executor executor29 = null;
        builder23.callbackExecutor = executor29;
        builder23.ensureSaneDefaults();
        retrofit.client.Client.Provider provider32 = builder23.clientProvider;
        retrofit.Profiler profiler33 = builder23.profiler;
        java.util.concurrent.Executor executor34 = builder23.gethttpExecutor();
        builder22.callbackExecutor = executor34;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "default" + "'", str5, "default");
        org.junit.Assert.assertNotNull(log13);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(server24);
        org.junit.Assert.assertNotNull(provider32);
        org.junit.Assert.assertNull(profiler33);
        org.junit.Assert.assertNotNull(executor34);
    }

    @Test
    public void test1345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1345");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request12 = serializedObjectSupporter11.deserializeObjectRequest6();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter11;
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter11.deserializeObjectConverter7();
        java.lang.String str15 = serializedObjectSupporter11.deserializeObjectString1();
        retrofit.Server server16 = serializedObjectSupporter11.deserializeObjectServer1();
        retrofit.client.Request request17 = serializedObjectSupporter11.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter18 = serializedObjectSupporter11.deserializeObjectConverter5();
        retrofit.client.Request request19 = serializedObjectSupporter11.deserializeObjectRequest7();
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Retrofit-" + "'", str15, "Retrofit-");
        org.junit.Assert.assertNotNull(server16);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertNotNull(gsonConverter18);
        org.junit.Assert.assertNotNull(request19);
    }

    @Test
    public void test1346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1346");
        retrofit.Server server2 = new retrofit.Server("default", "GET");
        java.lang.String str3 = server2.getName();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "GET" + "'", str3, "GET");
    }

    @Test
    public void test1347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1347");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        java.lang.String str2 = serializedObjectSupporter1.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter1.deserializeObjectConverter3();
        builder0.serializedObjectSupporter = serializedObjectSupporter1;
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.RestAdapter.Builder builder7 = builder0.setServer("http://example.com/");
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = builder8.getcallbackExecutor();
        retrofit.Server server10 = builder8.server;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider12 = null;
        builder11.setclientProvider(provider12);
        retrofit.Server server15 = new retrofit.Server("Retrofit-");
        java.lang.String str16 = server15.name;
        retrofit.client.Client.Provider provider17 = null;
        java.util.concurrent.Executor executor18 = null;
        java.util.concurrent.Executor executor19 = null;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        retrofit.converter.Converter converter21 = null;
        retrofit.Profiler profiler22 = null;
        retrofit.ErrorHandler errorHandler23 = null;
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.Server server26 = builder25.server;
        java.util.concurrent.Executor executor27 = null;
        builder25.httpExecutor = executor27;
        java.util.concurrent.Executor executor29 = builder25.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.FULL;
        builder25.logLevel = logLevel30;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server15, provider17, executor18, executor19, requestInterceptor20, converter21, profiler22, errorHandler23, log24, logLevel30);
        retrofit.RestAdapter.Builder builder33 = builder11.setLog(log24);
        retrofit.RestAdapter.Builder builder34 = builder8.setLog(log24);
        retrofit.Server server35 = null;
        retrofit.client.Client.Provider provider36 = null;
        java.util.concurrent.Executor executor37 = null;
        java.util.concurrent.Executor executor38 = null;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        retrofit.converter.Converter converter40 = null;
        retrofit.Profiler profiler41 = null;
        retrofit.ErrorHandler errorHandler42 = null;
        retrofit.RestAdapter.Log log43 = null;
        retrofit.RestAdapter.LogLevel logLevel44 = null;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter(server35, provider36, executor37, executor38, requestInterceptor39, converter40, profiler41, errorHandler42, log43, logLevel44);
        retrofit.SerializedObjectSupporter serializedObjectSupporter46 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request47 = serializedObjectSupporter46.deserializeObjectRequest6();
        restAdapter45.serializedObjectSupporter = serializedObjectSupporter46;
        retrofit.converter.GsonConverter gsonConverter49 = serializedObjectSupporter46.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter50 = serializedObjectSupporter46.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter51 = serializedObjectSupporter46.deserializeObjectConverter1();
        retrofit.client.Request request52 = serializedObjectSupporter46.deserializeObjectRequest5();
        retrofit.RequestInterceptor requestInterceptor53 = serializedObjectSupporter46.deserializeObjectRequestInterceptor1();
        builder34.requestInterceptor = requestInterceptor53;
        retrofit.RestAdapter.Builder builder55 = builder7.setRequestInterceptor(requestInterceptor53);
        retrofit.RestAdapter.LogLevel logLevel56 = builder55.logLevel;
        retrofit.Server server57 = null;
        retrofit.client.Client.Provider provider58 = null;
        java.util.concurrent.Executor executor59 = null;
        java.util.concurrent.Executor executor60 = null;
        retrofit.RequestInterceptor requestInterceptor61 = null;
        retrofit.converter.Converter converter62 = null;
        retrofit.Profiler profiler63 = null;
        retrofit.ErrorHandler errorHandler64 = null;
        retrofit.RestAdapter.Log log65 = null;
        retrofit.RestAdapter.LogLevel logLevel66 = null;
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter(server57, provider58, executor59, executor60, requestInterceptor61, converter62, profiler63, errorHandler64, log65, logLevel66);
        retrofit.SerializedObjectSupporter serializedObjectSupporter68 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request69 = serializedObjectSupporter68.deserializeObjectRequest6();
        restAdapter67.serializedObjectSupporter = serializedObjectSupporter68;
        retrofit.converter.GsonConverter gsonConverter71 = serializedObjectSupporter68.deserializeObjectConverter7();
        retrofit.Server server72 = serializedObjectSupporter68.deserializeObjectServer1();
        retrofit.converter.GsonConverter gsonConverter73 = serializedObjectSupporter68.deserializeObjectConverter5();
        retrofit.Server server74 = serializedObjectSupporter68.deserializeObjectServer1();
        builder55.server = server74;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        retrofit.Server server77 = builder76.server;
        java.util.concurrent.Executor executor78 = null;
        builder76.httpExecutor = executor78;
        java.util.concurrent.Executor executor80 = null;
        builder76.callbackExecutor = executor80;
        java.util.concurrent.Executor executor82 = null;
        builder76.callbackExecutor = executor82;
        builder76.ensureSaneDefaults();
        retrofit.client.Client.Provider provider85 = builder76.clientProvider;
        builder55.setclientProvider(provider85);
        retrofit.client.Client.Provider provider87 = builder55.getclientProvider();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Retrofit-Idle" + "'", str2, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "default" + "'", str16, "default");
        org.junit.Assert.assertNotNull(log24);
        org.junit.Assert.assertNull(server26);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(request47);
        org.junit.Assert.assertNotNull(gsonConverter49);
        org.junit.Assert.assertNotNull(gsonConverter50);
        org.junit.Assert.assertNotNull(gsonConverter51);
        org.junit.Assert.assertNotNull(request52);
        org.junit.Assert.assertNotNull(requestInterceptor53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(request69);
        org.junit.Assert.assertNotNull(gsonConverter71);
        org.junit.Assert.assertNotNull(server72);
        org.junit.Assert.assertNotNull(gsonConverter73);
        org.junit.Assert.assertNotNull(server74);
        org.junit.Assert.assertNull(server77);
        org.junit.Assert.assertNotNull(provider85);
        org.junit.Assert.assertNotNull(provider87);
    }

    @Test
    public void test1348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1348");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request16 = serializedObjectSupporter15.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter15.deserializeObjectConverter1();
        java.lang.String str18 = serializedObjectSupporter15.deserializeObjectString4();
        java.lang.String str19 = serializedObjectSupporter15.deserializeObjectString4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter15;
        retrofit.ErrorHandler errorHandler21 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor22 = restAdapter10.httpExecutor;
        retrofit.Server server23 = restAdapter10.server;
        java.lang.String str24 = restAdapter10.getTHREAD_PREFIX();
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(server23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Retrofit-" + "'", str24, "Retrofit-");
    }

    @Test
    public void test1349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1349");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        java.lang.String str17 = serializedObjectSupporter16.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter18 = serializedObjectSupporter16.deserializeObjectConverter3();
        builder15.serializedObjectSupporter = serializedObjectSupporter16;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter16;
        retrofit.converter.Converter converter21 = restAdapter10.converter;
        java.util.concurrent.Executor executor22 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor24 = builder23.getcallbackExecutor();
        retrofit.Server server25 = builder23.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = builder23.serializedObjectSupporter;
        retrofit.converter.Converter converter27 = builder23.converter;
        retrofit.Server server28 = null;
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.RestAdapter.Log log36 = null;
        retrofit.RestAdapter.LogLevel logLevel37 = null;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter(server28, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log36, logLevel37);
        retrofit.SerializedObjectSupporter serializedObjectSupporter39 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request40 = serializedObjectSupporter39.deserializeObjectRequest6();
        restAdapter38.serializedObjectSupporter = serializedObjectSupporter39;
        retrofit.converter.GsonConverter gsonConverter42 = serializedObjectSupporter39.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter43 = serializedObjectSupporter39.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter44 = serializedObjectSupporter39.deserializeObjectConverter1();
        retrofit.client.Request request45 = serializedObjectSupporter39.deserializeObjectRequest5();
        retrofit.RequestInterceptor requestInterceptor46 = serializedObjectSupporter39.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder47 = builder23.setRequestInterceptor(requestInterceptor46);
        retrofit.RestAdapter.LogLevel logLevel48 = builder23.logLevel;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter10.setLogLevel(logLevel48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log level may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-Idle" + "'", str17, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter18);
        org.junit.Assert.assertNull(converter21);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(server25);
        org.junit.Assert.assertNull(serializedObjectSupporter26);
        org.junit.Assert.assertNull(converter27);
        org.junit.Assert.assertNotNull(request40);
        org.junit.Assert.assertNotNull(gsonConverter42);
        org.junit.Assert.assertNotNull(gsonConverter43);
        org.junit.Assert.assertNotNull(gsonConverter44);
        org.junit.Assert.assertNotNull(request45);
        org.junit.Assert.assertNotNull(requestInterceptor46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test1350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1350");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.Server server3 = new retrofit.Server("Retrofit-");
        java.lang.String str4 = server3.name;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.Server server14 = builder13.server;
        java.util.concurrent.Executor executor15 = null;
        builder13.httpExecutor = executor15;
        java.util.concurrent.Executor executor17 = builder13.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.FULL;
        builder13.logLevel = logLevel18;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter(server3, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel18);
        java.util.concurrent.Executor executor21 = restAdapter20.getcallbackExecutor();
        int int22 = restAdapter20.getLOG_CHUNK_SIZE();
        java.util.List<retrofit.client.Header> headerList25 = null;
        retrofit.mime.TypedOutput typedOutput26 = null;
        retrofit.client.Request request27 = new retrofit.client.Request("", "", headerList25, typedOutput26);
        retrofit.mime.TypedOutput typedOutput28 = request27.getBody();
        java.lang.String str29 = request27.url;
        retrofit.mime.TypedOutput typedOutput30 = request27.getBody();
        java.lang.String str31 = request27.getUrl();
        retrofit.client.Request request32 = restAdapter20.logAndReplaceRequest(request27);
        retrofit.RequestInterceptor requestInterceptor33 = restAdapter20.getrequestInterceptor();
        retrofit.Profiler profiler34 = restAdapter20.getprofiler();
        retrofit.Server server35 = restAdapter20.getserver();
        retrofit.Server server37 = new retrofit.Server("Retrofit-");
        java.lang.String str38 = server37.name;
        retrofit.client.Client.Provider provider39 = null;
        java.util.concurrent.Executor executor40 = null;
        java.util.concurrent.Executor executor41 = null;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        retrofit.converter.Converter converter43 = null;
        retrofit.Profiler profiler44 = null;
        retrofit.ErrorHandler errorHandler45 = null;
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.Server server48 = builder47.server;
        java.util.concurrent.Executor executor49 = null;
        builder47.httpExecutor = executor49;
        java.util.concurrent.Executor executor51 = builder47.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.FULL;
        builder47.logLevel = logLevel52;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter(server37, provider39, executor40, executor41, requestInterceptor42, converter43, profiler44, errorHandler45, log46, logLevel52);
        java.util.concurrent.Executor executor55 = restAdapter54.getcallbackExecutor();
        retrofit.converter.Converter converter56 = restAdapter54.converter;
        retrofit.RestAdapter.LogLevel logLevel57 = restAdapter54.logLevel;
        restAdapter20.logLevel = logLevel57;
        builder0.logLevel = logLevel57;
        java.util.concurrent.Executor executor60 = builder0.getcallbackExecutor();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "default" + "'", str4, "default");
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNull(server14);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4000 + "'", int22 == 4000);
        org.junit.Assert.assertNull(typedOutput28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNull(typedOutput30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(request32);
        org.junit.Assert.assertNull(requestInterceptor33);
        org.junit.Assert.assertNull(profiler34);
        org.junit.Assert.assertNotNull(server35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "default" + "'", str38, "default");
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertNull(server48);
        org.junit.Assert.assertNull(executor51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor55);
        org.junit.Assert.assertNull(converter56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor60);
    }

    @Test
    public void test1351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1351");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        java.lang.String str2 = serializedObjectSupporter1.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter1.deserializeObjectConverter3();
        builder0.serializedObjectSupporter = serializedObjectSupporter1;
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.RestAdapter.Builder builder7 = builder0.setServer("http://example.com/");
        retrofit.Profiler profiler8 = builder7.profiler;
        java.util.concurrent.Executor executor9 = builder7.gethttpExecutor();
        java.util.concurrent.Executor executor10 = builder7.httpExecutor;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Retrofit-Idle" + "'", str2, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(profiler8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(executor10);
    }

    @Test
    public void test1352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1352");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.Server server2 = builder0.server;
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.Server server6 = new retrofit.Server("Retrofit-Idle", "Retrofit-");
        java.lang.String str7 = server6.getapiUrl();
        java.lang.String str8 = server6.getDEFAULT_NAME();
        retrofit.RestAdapter.Builder builder9 = builder0.setServer(server6);
        java.util.concurrent.Executor executor10 = null;
        builder9.httpExecutor = executor10;
        retrofit.RestAdapter.Builder builder13 = builder9.setServer("POST");
        retrofit.converter.Converter converter14 = builder9.converter;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor16 = builder15.getcallbackExecutor();
        retrofit.Server server17 = builder15.server;
        retrofit.RestAdapter.Log log18 = builder15.log;
        retrofit.Server server19 = builder15.server;
        java.util.concurrent.Executor executor20 = builder15.getcallbackExecutor();
        builder15.ensureSaneDefaults();
        retrofit.client.Client.Provider provider22 = builder15.clientProvider;
        java.util.concurrent.Executor executor23 = builder15.gethttpExecutor();
        builder9.httpExecutor = executor23;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Retrofit-Idle" + "'", str7, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "default" + "'", str8, "default");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(server17);
        org.junit.Assert.assertNull(log18);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNotNull(provider22);
        org.junit.Assert.assertNotNull(executor23);
    }

    @Test
    public void test1353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1353");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter10.new RestHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter10.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter10.getrequestInterceptor();
        java.util.concurrent.Executor executor17 = restAdapter10.getcallbackExecutor();
        retrofit.converter.Converter converter18 = restAdapter10.getconverter();
        retrofit.SerializedObjectSupporter serializedObjectSupporter19 = restAdapter10.serializedObjectSupporter;
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter10.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor21 = restAdapter10.requestInterceptor;
        int int22 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter10.logLevel;
        retrofit.RequestInterceptor requestInterceptor24 = restAdapter10.requestInterceptor;
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(converter18);
        org.junit.Assert.assertNull(serializedObjectSupporter19);
        org.junit.Assert.assertNull(requestInterceptor21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4000 + "'", int22 == 4000);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertNull(requestInterceptor24);
    }

    @Test
    public void test1354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1354");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter1();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString4();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter5();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString1();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter6 = serializedObjectSupporter0.deserializeObjectLogLevel1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Retrofit-" + "'", str5, "Retrofit-");
    }

    @Test
    public void test1355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1355");
        retrofit.Server server1 = new retrofit.Server("Retrofit-");
        java.lang.String str2 = server1.name;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.Server server12 = builder11.server;
        java.util.concurrent.Executor executor13 = null;
        builder11.httpExecutor = executor13;
        java.util.concurrent.Executor executor15 = builder11.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.FULL;
        builder11.logLevel = logLevel16;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter(server1, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log10, logLevel16);
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter18.getLogLevel();
        retrofit.Profiler profiler20 = restAdapter18.profiler;
        retrofit.Server server21 = null;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = null;
        retrofit.RestAdapter.LogLevel logLevel30 = null;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel30);
        retrofit.SerializedObjectSupporter serializedObjectSupporter32 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request33 = serializedObjectSupporter32.deserializeObjectRequest6();
        restAdapter31.serializedObjectSupporter = serializedObjectSupporter32;
        retrofit.converter.GsonConverter gsonConverter35 = serializedObjectSupporter32.deserializeObjectConverter7();
        retrofit.Server server36 = serializedObjectSupporter32.deserializeObjectServer1();
        retrofit.converter.GsonConverter gsonConverter37 = serializedObjectSupporter32.deserializeObjectConverter5();
        retrofit.Server server38 = serializedObjectSupporter32.deserializeObjectServer1();
        retrofit.client.Request request39 = serializedObjectSupporter32.deserializeObjectRequest5();
        retrofit.client.Request request40 = restAdapter18.logAndReplaceRequest(request39);
        java.lang.String str41 = request40.url;
        retrofit.mime.TypedOutput typedOutput42 = request40.getBody();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "default" + "'", str2, "default");
        org.junit.Assert.assertNotNull(log10);
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler20);
        org.junit.Assert.assertNotNull(request33);
        org.junit.Assert.assertNotNull(gsonConverter35);
        org.junit.Assert.assertNotNull(server36);
        org.junit.Assert.assertNotNull(gsonConverter37);
        org.junit.Assert.assertNotNull(server38);
        org.junit.Assert.assertNotNull(request39);
        org.junit.Assert.assertNotNull(request40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "http://example.com/" + "'", str41, "http://example.com/");
        org.junit.Assert.assertNull(typedOutput42);
    }

    @Test
    public void test1356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1356");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = null;
        retrofit.RestAdapter.LogLevel logLevel21 = null;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel21);
        retrofit.RestAdapter.RestHandler restHandler23 = restAdapter22.new RestHandler();
        retrofit.Server server24 = restAdapter22.server;
        retrofit.RestAdapter.LogLevel logLevel25 = restAdapter22.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor26 = restAdapter22.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter27 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request28 = serializedObjectSupporter27.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter29 = serializedObjectSupporter27.deserializeObjectConverter1();
        java.lang.String str30 = serializedObjectSupporter27.deserializeObjectString4();
        java.lang.String str31 = serializedObjectSupporter27.deserializeObjectString4();
        restAdapter22.serializedObjectSupporter = serializedObjectSupporter27;
        retrofit.client.Request request33 = serializedObjectSupporter27.deserializeObjectRequest1();
        retrofit.converter.GsonConverter gsonConverter34 = serializedObjectSupporter27.deserializeObjectConverter1();
        retrofit.converter.GsonConverter gsonConverter35 = serializedObjectSupporter27.deserializeObjectConverter4();
        retrofit.client.Request request36 = serializedObjectSupporter27.deserializeObjectRequest1();
        retrofit.converter.GsonConverter gsonConverter37 = serializedObjectSupporter27.deserializeObjectConverter6();
        restHandler11.serializedObjectSupporter = serializedObjectSupporter27;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter40 = new retrofit.SerializedObjectSupporter();
        java.lang.String str41 = serializedObjectSupporter40.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter42 = serializedObjectSupporter40.deserializeObjectConverter3();
        builder39.serializedObjectSupporter = serializedObjectSupporter40;
        java.util.concurrent.Executor executor44 = null;
        builder39.callbackExecutor = executor44;
        retrofit.SerializedObjectSupporter serializedObjectSupporter46 = builder39.serializedObjectSupporter;
        java.lang.String str47 = serializedObjectSupporter46.deserializeObjectString1();
        retrofit.mime.TypedString typedString48 = serializedObjectSupporter46.deserializeObjectTypedOutput2();
        retrofit.client.Request request49 = serializedObjectSupporter46.deserializeObjectRequest5();
        retrofit.client.Request request50 = serializedObjectSupporter46.deserializeObjectRequest6();
        retrofit.Server server51 = serializedObjectSupporter46.deserializeObjectServer1();
        retrofit.client.Request request52 = serializedObjectSupporter46.deserializeObjectRequest6();
        restHandler11.serializedObjectSupporter = serializedObjectSupporter46;
        org.junit.Assert.assertNull(server24);
        org.junit.Assert.assertNull(logLevel25);
        org.junit.Assert.assertNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(request28);
        org.junit.Assert.assertNotNull(gsonConverter29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "http://example.com/" + "'", str30, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "http://example.com/" + "'", str31, "http://example.com/");
        org.junit.Assert.assertNotNull(request33);
        org.junit.Assert.assertNotNull(gsonConverter34);
        org.junit.Assert.assertNotNull(gsonConverter35);
        org.junit.Assert.assertNotNull(request36);
        org.junit.Assert.assertNotNull(gsonConverter37);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Retrofit-Idle" + "'", str41, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter42);
        org.junit.Assert.assertNotNull(serializedObjectSupporter46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Retrofit-" + "'", str47, "Retrofit-");
        org.junit.Assert.assertNotNull(typedString48);
        org.junit.Assert.assertNotNull(request49);
        org.junit.Assert.assertNotNull(request50);
        org.junit.Assert.assertNotNull(server51);
        org.junit.Assert.assertNotNull(request52);
    }

    @Test
    public void test1357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1357");
        retrofit.Server server1 = new retrofit.Server("Retrofit-");
        java.lang.String str2 = server1.name;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.Server server12 = builder11.server;
        java.util.concurrent.Executor executor13 = null;
        builder11.httpExecutor = executor13;
        java.util.concurrent.Executor executor15 = builder11.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.FULL;
        builder11.logLevel = logLevel16;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter(server1, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log10, logLevel16);
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter18.getLogLevel();
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Log log28 = null;
        retrofit.RestAdapter.LogLevel logLevel29 = null;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log28, logLevel29);
        retrofit.RestAdapter.RestHandler restHandler31 = restAdapter30.new RestHandler();
        retrofit.Server server32 = restAdapter30.server;
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter30.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor34 = restAdapter30.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter35 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request36 = serializedObjectSupporter35.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter37 = serializedObjectSupporter35.deserializeObjectConverter1();
        java.lang.String str38 = serializedObjectSupporter35.deserializeObjectString4();
        java.lang.String str39 = serializedObjectSupporter35.deserializeObjectString4();
        restAdapter30.serializedObjectSupporter = serializedObjectSupporter35;
        retrofit.ErrorHandler errorHandler41 = restAdapter30.geterrorHandler();
        java.util.concurrent.Executor executor42 = restAdapter30.httpExecutor;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.Server server44 = builder43.server;
        retrofit.converter.Converter converter45 = null;
        builder43.converter = converter45;
        retrofit.RestAdapter.Log log47 = builder43.log;
        retrofit.RestAdapter.LogLevel logLevel48 = builder43.logLevel;
        restAdapter30.logLevel = logLevel48;
        restAdapter18.logLevel = logLevel48;
        java.util.concurrent.Executor executor51 = restAdapter18.getcallbackExecutor();
        retrofit.RestAdapter.RestHandler restHandler52 = restAdapter18.new RestHandler();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "default" + "'", str2, "default");
        org.junit.Assert.assertNotNull(log10);
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(server32);
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertNull(requestInterceptor34);
        org.junit.Assert.assertNotNull(request36);
        org.junit.Assert.assertNotNull(gsonConverter37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "http://example.com/" + "'", str38, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "http://example.com/" + "'", str39, "http://example.com/");
        org.junit.Assert.assertNull(errorHandler41);
        org.junit.Assert.assertNull(executor42);
        org.junit.Assert.assertNull(server44);
        org.junit.Assert.assertNull(log47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor51);
    }

    @Test
    public void test1358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1358");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString4();
        retrofit.ErrorHandler errorHandler4 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter2();
        retrofit.Server server6 = serializedObjectSupporter0.deserializeObjectServer1();
        java.lang.String str7 = server6.apiUrl;
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "http://example.com/" + "'", str2, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(server6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "http://example.com" + "'", str7, "http://example.com");
    }

    @Test
    public void test1359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1359");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter10.new RestHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter10.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter10.getrequestInterceptor();
        java.util.concurrent.Executor executor17 = restAdapter10.getcallbackExecutor();
        retrofit.converter.Converter converter18 = restAdapter10.getconverter();
        retrofit.SerializedObjectSupporter serializedObjectSupporter19 = restAdapter10.serializedObjectSupporter;
        java.lang.String str20 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.Profiler profiler21 = restAdapter10.getprofiler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter22 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request23 = serializedObjectSupporter22.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter24 = serializedObjectSupporter22.deserializeObjectConverter1();
        java.lang.String str25 = serializedObjectSupporter22.deserializeObjectString4();
        java.lang.String str26 = serializedObjectSupporter22.deserializeObjectString4();
        retrofit.client.Request request27 = serializedObjectSupporter22.deserializeObjectRequest3();
        java.lang.String str28 = request27.url;
        java.lang.String str29 = request27.getUrl();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request30 = restAdapter10.logAndReplaceRequest(request27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(converter18);
        org.junit.Assert.assertNull(serializedObjectSupporter19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Retrofit-Idle" + "'", str20, "Retrofit-Idle");
        org.junit.Assert.assertNull(profiler21);
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertNotNull(gsonConverter24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "http://example.com/" + "'", str25, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "http://example.com/" + "'", str26, "http://example.com/");
        org.junit.Assert.assertNotNull(request27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "http://example.com/" + "'", str28, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "http://example.com/" + "'", str29, "http://example.com/");
    }

    @Test
    public void test1360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1360");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        java.util.concurrent.Executor executor2 = null;
        builder0.httpExecutor = executor2;
        java.util.concurrent.Executor executor4 = builder0.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.FULL;
        builder0.logLevel = logLevel5;
        retrofit.ErrorHandler errorHandler7 = builder0.errorHandler;
        retrofit.converter.Converter converter8 = builder0.converter;
        retrofit.Profiler profiler9 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder10 = builder0.setProfiler(profiler9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(converter8);
    }

    @Test
    public void test1361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1361");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest8();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest3();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest5();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter0.deserializeObjectConverter8();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString4();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(gsonConverter6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "http://example.com/" + "'", str7, "http://example.com/");
    }

    @Test
    public void test1362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1362");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request12 = serializedObjectSupporter11.deserializeObjectRequest6();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter11;
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter11.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter15 = serializedObjectSupporter11.deserializeObjectConverter7();
        retrofit.client.Request request16 = serializedObjectSupporter11.deserializeObjectRequest6();
        retrofit.client.Request request17 = serializedObjectSupporter11.deserializeObjectRequest3();
        retrofit.client.Request request18 = serializedObjectSupporter11.deserializeObjectRequest2();
        retrofit.Server server19 = serializedObjectSupporter11.deserializeObjectServer1();
        retrofit.Server server20 = serializedObjectSupporter11.deserializeObjectServer1();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter21 = serializedObjectSupporter11.deserializeObjectLogLevel3();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(gsonConverter15);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertNotNull(request18);
        org.junit.Assert.assertNotNull(server19);
        org.junit.Assert.assertNotNull(server20);
    }

    @Test
    public void test1363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1363");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter1();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString4();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest4();
        retrofit.client.Request request6 = serializedObjectSupporter0.deserializeObjectRequest3();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString4();
        retrofit.Server server8 = serializedObjectSupporter0.deserializeObjectServer1();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collections collections9 = serializedObjectSupporter0.deserializeObjectList1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.Collections$UnmodifiableRandomAccessList cannot be cast to java.util.Collections");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "http://example.com/" + "'", str4, "http://example.com/");
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(request6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "http://example.com/" + "'", str7, "http://example.com/");
        org.junit.Assert.assertNotNull(server8);
    }

    @Test
    public void test1364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1364");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter10.new RestHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter10.getLogLevel();
        java.util.concurrent.Executor executor17 = restAdapter10.getcallbackExecutor();
        java.lang.String str18 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.converter.Converter converter19 = restAdapter10.getconverter();
        retrofit.client.Client.Provider provider20 = restAdapter10.clientProvider;
        retrofit.SerializedObjectSupporter serializedObjectSupporter21 = restAdapter10.serializedObjectSupporter;
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(logLevel16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Retrofit-Idle" + "'", str18, "Retrofit-Idle");
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNull(provider20);
        org.junit.Assert.assertNull(serializedObjectSupporter21);
    }

    @Test
    public void test1365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1365");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter1 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.mime.TypedString typedString2 = serializedObjectSupporter0.deserializeObjectTypedOutput2();
        retrofit.mime.TypedString typedString3 = serializedObjectSupporter0.deserializeObjectTypedOutput2();
        org.junit.Assert.assertNotNull(gsonConverter1);
        org.junit.Assert.assertNotNull(typedString2);
        org.junit.Assert.assertNotNull(typedString3);
    }

    @Test
    public void test1366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1366");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter10.new RestHandler();
        retrofit.converter.Converter converter13 = restAdapter10.converter;
        retrofit.RestAdapter.Log log14 = restAdapter10.log;
        retrofit.RestAdapter.LogLevel logLevel15 = restAdapter10.logLevel;
        retrofit.RestAdapter.Log log16 = restAdapter10.log;
        retrofit.Profiler profiler17 = restAdapter10.profiler;
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertNull(log14);
        org.junit.Assert.assertNull(logLevel15);
        org.junit.Assert.assertNull(log16);
        org.junit.Assert.assertNull(profiler17);
    }

    @Test
    public void test1367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1367");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor2 = null;
        builder0.requestInterceptor = requestInterceptor2;
        java.util.concurrent.Executor executor4 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("default");
        retrofit.SerializedObjectSupporter serializedObjectSupporter7 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request8 = serializedObjectSupporter7.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter7.deserializeObjectConverter1();
        retrofit.RestAdapter.Builder builder10 = builder0.setConverter((retrofit.converter.Converter) gsonConverter9);
        retrofit.RestAdapter restAdapter11 = builder0.build();
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor13 = builder12.getcallbackExecutor();
        retrofit.Server server14 = builder12.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = builder12.serializedObjectSupporter;
        retrofit.converter.Converter converter16 = builder12.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        java.lang.String str18 = serializedObjectSupporter17.deserializeObjectString2();
        retrofit.client.Request request19 = serializedObjectSupporter17.deserializeObjectRequest7();
        java.lang.String str20 = serializedObjectSupporter17.deserializeObjectString5();
        retrofit.Server server21 = serializedObjectSupporter17.deserializeObjectServer1();
        builder12.serializedObjectSupporter = serializedObjectSupporter17;
        retrofit.RestAdapter.Log log23 = null;
        builder12.log = log23;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = builder25.getcallbackExecutor();
        retrofit.Server server27 = builder25.server;
        retrofit.RestAdapter.Log log28 = builder25.log;
        retrofit.Server server29 = builder25.server;
        java.util.concurrent.Executor executor30 = builder25.getcallbackExecutor();
        retrofit.client.Client.Provider provider31 = builder25.getclientProvider();
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.Server server33 = builder32.server;
        java.util.concurrent.Executor executor34 = null;
        builder32.httpExecutor = executor34;
        java.util.concurrent.Executor executor36 = null;
        builder32.callbackExecutor = executor36;
        java.util.concurrent.Executor executor38 = null;
        builder32.callbackExecutor = executor38;
        builder32.ensureSaneDefaults();
        retrofit.client.Client.Provider provider41 = builder32.clientProvider;
        builder25.setclientProvider(provider41);
        builder12.setclientProvider(provider41);
        builder0.clientProvider = provider41;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(request8);
        org.junit.Assert.assertNotNull(gsonConverter9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(restAdapter11);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(server14);
        org.junit.Assert.assertNull(serializedObjectSupporter15);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Retrofit-Idle" + "'", str18, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(request19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "POST" + "'", str20, "POST");
        org.junit.Assert.assertNotNull(server21);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(server27);
        org.junit.Assert.assertNull(log28);
        org.junit.Assert.assertNull(server29);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNull(provider31);
        org.junit.Assert.assertNull(server33);
        org.junit.Assert.assertNotNull(provider41);
    }

    @Test
    public void test1368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1368");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.mime.TypedString typedString3 = serializedObjectSupporter0.deserializeObjectTypedOutput2();
        retrofit.mime.TypedString typedString4 = serializedObjectSupporter0.deserializeObjectTypedOutput2();
        retrofit.Server server5 = serializedObjectSupporter0.deserializeObjectServer1();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(typedString3);
        org.junit.Assert.assertNotNull(typedString4);
        org.junit.Assert.assertNotNull(server5);
    }

    @Test
    public void test1369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1369");
        retrofit.Server server1 = new retrofit.Server("POST");
        retrofit.client.Client.Provider provider2 = null;
        java.util.concurrent.Executor executor3 = null;
        java.util.concurrent.Executor executor4 = null;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = null;
        retrofit.RestAdapter.LogLevel logLevel15 = null;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request18 = serializedObjectSupporter17.deserializeObjectRequest6();
        restAdapter16.serializedObjectSupporter = serializedObjectSupporter17;
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter17.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter21 = serializedObjectSupporter17.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter17.deserializeObjectConverter1();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request25 = serializedObjectSupporter24.deserializeObjectRequest6();
        java.lang.String str26 = serializedObjectSupporter24.deserializeObjectString4();
        java.lang.String str27 = serializedObjectSupporter24.deserializeObjectString5();
        retrofit.ErrorHandler errorHandler28 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor30 = builder29.getcallbackExecutor();
        retrofit.Server server31 = builder29.server;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider33 = null;
        builder32.setclientProvider(provider33);
        retrofit.Server server36 = new retrofit.Server("Retrofit-");
        java.lang.String str37 = server36.name;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.Server server47 = builder46.server;
        java.util.concurrent.Executor executor48 = null;
        builder46.httpExecutor = executor48;
        java.util.concurrent.Executor executor50 = builder46.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.FULL;
        builder46.logLevel = logLevel51;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server36, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log45, logLevel51);
        retrofit.RestAdapter.Builder builder54 = builder32.setLog(log45);
        retrofit.RestAdapter.Builder builder55 = builder29.setLog(log45);
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.Server server57 = builder56.server;
        retrofit.converter.Converter converter58 = null;
        builder56.converter = converter58;
        retrofit.RestAdapter.Log log60 = builder56.log;
        retrofit.RestAdapter.LogLevel logLevel61 = builder56.logLevel;
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter(server1, provider2, executor3, executor4, requestInterceptor5, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler28, log45, logLevel61);
        boolean boolean63 = logLevel61.log();
        org.junit.Assert.assertNotNull(request18);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNotNull(gsonConverter21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(request25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "http://example.com/" + "'", str26, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "POST" + "'", str27, "POST");
        org.junit.Assert.assertNotNull(errorHandler28);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNull(server31);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "default" + "'", str37, "default");
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNull(server47);
        org.junit.Assert.assertNull(executor50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(server57);
        org.junit.Assert.assertNull(log60);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test1370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1370");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor2 = null;
        builder0.requestInterceptor = requestInterceptor2;
        java.util.concurrent.Executor executor4 = null;
        builder0.setcallbackExecutor(executor4);
        retrofit.RequestInterceptor requestInterceptor6 = builder0.requestInterceptor;
        java.util.concurrent.Executor executor7 = builder0.callbackExecutor;
        retrofit.converter.Converter converter8 = builder0.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter9 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request10 = serializedObjectSupporter9.deserializeObjectRequest6();
        java.lang.String str11 = serializedObjectSupporter9.deserializeObjectString4();
        java.lang.String str12 = serializedObjectSupporter9.deserializeObjectString2();
        java.lang.String str13 = serializedObjectSupporter9.deserializeObjectString5();
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter9.deserializeObjectConverter2();
        retrofit.client.Request request15 = serializedObjectSupporter9.deserializeObjectRequest8();
        retrofit.client.Request request16 = serializedObjectSupporter9.deserializeObjectRequest8();
        retrofit.client.Request request17 = serializedObjectSupporter9.deserializeObjectRequest7();
        retrofit.ErrorHandler errorHandler18 = serializedObjectSupporter9.deserializeObjectErrorHandler1();
        builder0.errorHandler = errorHandler18;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNotNull(request10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "http://example.com/" + "'", str11, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "POST" + "'", str13, "POST");
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertNotNull(errorHandler18);
    }

    @Test
    public void test1371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1371");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.converter.Converter converter2 = null;
        builder0.converter = converter2;
        retrofit.RestAdapter.Log log4 = builder0.log;
        retrofit.client.Client.Provider provider5 = null;
        builder0.clientProvider = provider5;
        retrofit.Server server7 = builder0.server;
        retrofit.RestAdapter.Log log8 = builder0.log;
        retrofit.RestAdapter.Builder builder10 = builder0.setServer("http://example.com/");
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertNull(server7);
        org.junit.Assert.assertNull(log8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test1372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1372");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request12 = serializedObjectSupporter11.deserializeObjectRequest6();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter11;
        java.lang.String str14 = serializedObjectSupporter11.deserializeObjectString4();
        retrofit.Server server15 = serializedObjectSupporter11.deserializeObjectServer1();
        retrofit.client.Request request16 = serializedObjectSupporter11.deserializeObjectRequest1();
        retrofit.client.Request request17 = serializedObjectSupporter11.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter18 = serializedObjectSupporter11.deserializeObjectConverter3();
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "http://example.com/" + "'", str14, "http://example.com/");
        org.junit.Assert.assertNotNull(server15);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertNotNull(gsonConverter18);
    }

    @Test
    public void test1373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1373");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor2 = null;
        builder0.requestInterceptor = requestInterceptor2;
        java.util.concurrent.Executor executor4 = null;
        builder0.setcallbackExecutor(executor4);
        retrofit.ErrorHandler errorHandler6 = builder0.errorHandler;
        retrofit.RequestInterceptor requestInterceptor7 = builder0.requestInterceptor;
        retrofit.converter.Converter converter8 = builder0.converter;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = builder9.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor11 = null;
        builder9.requestInterceptor = requestInterceptor11;
        java.util.concurrent.Executor executor13 = null;
        builder9.setcallbackExecutor(executor13);
        retrofit.RequestInterceptor requestInterceptor15 = builder9.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        java.lang.String str17 = serializedObjectSupporter16.deserializeObjectString2();
        java.lang.String str18 = serializedObjectSupporter16.deserializeObjectString4();
        retrofit.client.Request request19 = serializedObjectSupporter16.deserializeObjectRequest1();
        builder9.serializedObjectSupporter = serializedObjectSupporter16;
        retrofit.ErrorHandler errorHandler21 = serializedObjectSupporter16.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder22 = builder0.setErrorHandler(errorHandler21);
        retrofit.RestAdapter.LogLevel logLevel23 = null;
        builder0.logLevel = logLevel23;
        retrofit.Server server25 = null;
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Log log33 = null;
        retrofit.RestAdapter.LogLevel logLevel34 = null;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server25, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log33, logLevel34);
        retrofit.RestAdapter.RestHandler restHandler36 = restAdapter35.new RestHandler();
        retrofit.Server server37 = restAdapter35.server;
        retrofit.RestAdapter.LogLevel logLevel38 = restAdapter35.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor39 = restAdapter35.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter40 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request41 = serializedObjectSupporter40.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter42 = serializedObjectSupporter40.deserializeObjectConverter1();
        java.lang.String str43 = serializedObjectSupporter40.deserializeObjectString4();
        java.lang.String str44 = serializedObjectSupporter40.deserializeObjectString4();
        restAdapter35.serializedObjectSupporter = serializedObjectSupporter40;
        retrofit.client.Request request46 = serializedObjectSupporter40.deserializeObjectRequest1();
        retrofit.client.Request request47 = serializedObjectSupporter40.deserializeObjectRequest3();
        retrofit.client.Request request48 = serializedObjectSupporter40.deserializeObjectRequest7();
        retrofit.client.Request request49 = serializedObjectSupporter40.deserializeObjectRequest5();
        retrofit.client.Request request50 = serializedObjectSupporter40.deserializeObjectRequest1();
        retrofit.ErrorHandler errorHandler51 = serializedObjectSupporter40.deserializeObjectErrorHandler1();
        builder0.errorHandler = errorHandler51;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(requestInterceptor7);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-Idle" + "'", str17, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
        org.junit.Assert.assertNotNull(request19);
        org.junit.Assert.assertNotNull(errorHandler21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(server37);
        org.junit.Assert.assertNull(logLevel38);
        org.junit.Assert.assertNull(requestInterceptor39);
        org.junit.Assert.assertNotNull(request41);
        org.junit.Assert.assertNotNull(gsonConverter42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "http://example.com/" + "'", str43, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "http://example.com/" + "'", str44, "http://example.com/");
        org.junit.Assert.assertNotNull(request46);
        org.junit.Assert.assertNotNull(request47);
        org.junit.Assert.assertNotNull(request48);
        org.junit.Assert.assertNotNull(request49);
        org.junit.Assert.assertNotNull(request50);
        org.junit.Assert.assertNotNull(errorHandler51);
    }

    @Test
    public void test1374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1374");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        java.lang.String str2 = serializedObjectSupporter1.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter1.deserializeObjectConverter3();
        builder0.serializedObjectSupporter = serializedObjectSupporter1;
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.RestAdapter.Builder builder7 = builder0.setServer("http://example.com/");
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = builder8.getcallbackExecutor();
        retrofit.Server server10 = builder8.server;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider12 = null;
        builder11.setclientProvider(provider12);
        retrofit.Server server15 = new retrofit.Server("Retrofit-");
        java.lang.String str16 = server15.name;
        retrofit.client.Client.Provider provider17 = null;
        java.util.concurrent.Executor executor18 = null;
        java.util.concurrent.Executor executor19 = null;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        retrofit.converter.Converter converter21 = null;
        retrofit.Profiler profiler22 = null;
        retrofit.ErrorHandler errorHandler23 = null;
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.Server server26 = builder25.server;
        java.util.concurrent.Executor executor27 = null;
        builder25.httpExecutor = executor27;
        java.util.concurrent.Executor executor29 = builder25.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.FULL;
        builder25.logLevel = logLevel30;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server15, provider17, executor18, executor19, requestInterceptor20, converter21, profiler22, errorHandler23, log24, logLevel30);
        retrofit.RestAdapter.Builder builder33 = builder11.setLog(log24);
        retrofit.RestAdapter.Builder builder34 = builder8.setLog(log24);
        retrofit.Server server35 = null;
        retrofit.client.Client.Provider provider36 = null;
        java.util.concurrent.Executor executor37 = null;
        java.util.concurrent.Executor executor38 = null;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        retrofit.converter.Converter converter40 = null;
        retrofit.Profiler profiler41 = null;
        retrofit.ErrorHandler errorHandler42 = null;
        retrofit.RestAdapter.Log log43 = null;
        retrofit.RestAdapter.LogLevel logLevel44 = null;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter(server35, provider36, executor37, executor38, requestInterceptor39, converter40, profiler41, errorHandler42, log43, logLevel44);
        retrofit.SerializedObjectSupporter serializedObjectSupporter46 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request47 = serializedObjectSupporter46.deserializeObjectRequest6();
        restAdapter45.serializedObjectSupporter = serializedObjectSupporter46;
        retrofit.converter.GsonConverter gsonConverter49 = serializedObjectSupporter46.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter50 = serializedObjectSupporter46.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter51 = serializedObjectSupporter46.deserializeObjectConverter1();
        retrofit.client.Request request52 = serializedObjectSupporter46.deserializeObjectRequest5();
        retrofit.RequestInterceptor requestInterceptor53 = serializedObjectSupporter46.deserializeObjectRequestInterceptor1();
        builder34.requestInterceptor = requestInterceptor53;
        retrofit.RestAdapter.Builder builder55 = builder7.setRequestInterceptor(requestInterceptor53);
        retrofit.RestAdapter.LogLevel logLevel56 = builder55.logLevel;
        retrofit.Server server57 = null;
        retrofit.client.Client.Provider provider58 = null;
        java.util.concurrent.Executor executor59 = null;
        java.util.concurrent.Executor executor60 = null;
        retrofit.RequestInterceptor requestInterceptor61 = null;
        retrofit.converter.Converter converter62 = null;
        retrofit.Profiler profiler63 = null;
        retrofit.ErrorHandler errorHandler64 = null;
        retrofit.RestAdapter.Log log65 = null;
        retrofit.RestAdapter.LogLevel logLevel66 = null;
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter(server57, provider58, executor59, executor60, requestInterceptor61, converter62, profiler63, errorHandler64, log65, logLevel66);
        retrofit.SerializedObjectSupporter serializedObjectSupporter68 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request69 = serializedObjectSupporter68.deserializeObjectRequest6();
        restAdapter67.serializedObjectSupporter = serializedObjectSupporter68;
        retrofit.converter.GsonConverter gsonConverter71 = serializedObjectSupporter68.deserializeObjectConverter7();
        retrofit.Server server72 = serializedObjectSupporter68.deserializeObjectServer1();
        retrofit.converter.GsonConverter gsonConverter73 = serializedObjectSupporter68.deserializeObjectConverter5();
        retrofit.Server server74 = serializedObjectSupporter68.deserializeObjectServer1();
        builder55.server = server74;
        retrofit.RestAdapter restAdapter76 = builder55.build();
        retrofit.client.Client.Provider provider77 = restAdapter76.clientProvider;
        retrofit.RestAdapter.RestHandler restHandler78 = restAdapter76.new RestHandler();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Retrofit-Idle" + "'", str2, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "default" + "'", str16, "default");
        org.junit.Assert.assertNotNull(log24);
        org.junit.Assert.assertNull(server26);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(request47);
        org.junit.Assert.assertNotNull(gsonConverter49);
        org.junit.Assert.assertNotNull(gsonConverter50);
        org.junit.Assert.assertNotNull(gsonConverter51);
        org.junit.Assert.assertNotNull(request52);
        org.junit.Assert.assertNotNull(requestInterceptor53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(request69);
        org.junit.Assert.assertNotNull(gsonConverter71);
        org.junit.Assert.assertNotNull(server72);
        org.junit.Assert.assertNotNull(gsonConverter73);
        org.junit.Assert.assertNotNull(server74);
        org.junit.Assert.assertNotNull(restAdapter76);
        org.junit.Assert.assertNotNull(provider77);
    }

    @Test
    public void test1375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1375");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request12 = serializedObjectSupporter11.deserializeObjectRequest6();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter11;
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter11.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter15 = serializedObjectSupporter11.deserializeObjectConverter7();
        java.lang.String str16 = serializedObjectSupporter11.deserializeObjectString2();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter17 = serializedObjectSupporter11.deserializeObjectLogLevel2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(gsonConverter15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Retrofit-Idle" + "'", str16, "Retrofit-Idle");
    }

    @Test
    public void test1376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1376");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString2();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString5();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter0.deserializeObjectConverter3();
        retrofit.client.Request request7 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.client.Request request8 = serializedObjectSupporter0.deserializeObjectRequest1();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Retrofit-Idle" + "'", str1, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "POST" + "'", str3, "POST");
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(gsonConverter6);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(request8);
    }

    @Test
    public void test1377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1377");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request12 = serializedObjectSupporter11.deserializeObjectRequest6();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter11;
        retrofit.ErrorHandler errorHandler14 = restAdapter10.geterrorHandler();
        retrofit.client.Client.Provider provider15 = restAdapter10.getclientProvider();
        java.lang.String str16 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.converter.Converter converter17 = restAdapter10.converter;
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter10.new RestHandler();
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Retrofit-Idle" + "'", str16, "Retrofit-Idle");
        org.junit.Assert.assertNull(converter17);
    }

    @Test
    public void test1378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1378");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString2();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString5();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.client.Request request6 = serializedObjectSupporter0.deserializeObjectRequest8();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter7 = serializedObjectSupporter0.deserializeObjectLogLevel2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Retrofit-Idle" + "'", str1, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "POST" + "'", str3, "POST");
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(request6);
    }

    @Test
    public void test1379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1379");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request12 = serializedObjectSupporter11.deserializeObjectRequest6();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter11;
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter11.deserializeObjectConverter7();
        java.lang.String str15 = serializedObjectSupporter11.deserializeObjectString1();
        retrofit.Server server16 = serializedObjectSupporter11.deserializeObjectServer1();
        retrofit.client.Request request17 = serializedObjectSupporter11.deserializeObjectRequest3();
        retrofit.client.Request request18 = serializedObjectSupporter11.deserializeObjectRequest5();
        retrofit.client.Request request19 = serializedObjectSupporter11.deserializeObjectRequest8();
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Retrofit-" + "'", str15, "Retrofit-");
        org.junit.Assert.assertNotNull(server16);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertNotNull(request18);
        org.junit.Assert.assertNotNull(request19);
    }

    @Test
    public void test1380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1380");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.Server server2 = builder0.server;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider4 = null;
        builder3.setclientProvider(provider4);
        retrofit.Server server7 = new retrofit.Server("Retrofit-");
        java.lang.String str8 = server7.name;
        retrofit.client.Client.Provider provider9 = null;
        java.util.concurrent.Executor executor10 = null;
        java.util.concurrent.Executor executor11 = null;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        retrofit.converter.Converter converter13 = null;
        retrofit.Profiler profiler14 = null;
        retrofit.ErrorHandler errorHandler15 = null;
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.Server server18 = builder17.server;
        java.util.concurrent.Executor executor19 = null;
        builder17.httpExecutor = executor19;
        java.util.concurrent.Executor executor21 = builder17.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.FULL;
        builder17.logLevel = logLevel22;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server7, provider9, executor10, executor11, requestInterceptor12, converter13, profiler14, errorHandler15, log16, logLevel22);
        retrofit.RestAdapter.Builder builder25 = builder3.setLog(log16);
        retrofit.RestAdapter.Builder builder26 = builder0.setLog(log16);
        builder26.ensureSaneDefaults();
        retrofit.Server server28 = null;
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.RestAdapter.Log log36 = null;
        retrofit.RestAdapter.LogLevel logLevel37 = null;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter(server28, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log36, logLevel37);
        retrofit.RestAdapter.RestHandler restHandler39 = restAdapter38.new RestHandler();
        retrofit.Server server40 = restAdapter38.server;
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter38.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor42 = restAdapter38.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter43 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request44 = serializedObjectSupporter43.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter45 = serializedObjectSupporter43.deserializeObjectConverter1();
        java.lang.String str46 = serializedObjectSupporter43.deserializeObjectString4();
        java.lang.String str47 = serializedObjectSupporter43.deserializeObjectString4();
        restAdapter38.serializedObjectSupporter = serializedObjectSupporter43;
        retrofit.client.Request request49 = serializedObjectSupporter43.deserializeObjectRequest1();
        retrofit.client.Request request50 = serializedObjectSupporter43.deserializeObjectRequest5();
        retrofit.converter.GsonConverter gsonConverter51 = serializedObjectSupporter43.deserializeObjectConverter8();
        retrofit.RestAdapter.Builder builder52 = builder26.setConverter((retrofit.converter.Converter) gsonConverter51);
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "default" + "'", str8, "default");
        org.junit.Assert.assertNotNull(log16);
        org.junit.Assert.assertNull(server18);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(server40);
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertNull(requestInterceptor42);
        org.junit.Assert.assertNotNull(request44);
        org.junit.Assert.assertNotNull(gsonConverter45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "http://example.com/" + "'", str46, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "http://example.com/" + "'", str47, "http://example.com/");
        org.junit.Assert.assertNotNull(request49);
        org.junit.Assert.assertNotNull(request50);
        org.junit.Assert.assertNotNull(gsonConverter51);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test1381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1381");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter10.new RestHandler();
        retrofit.converter.Converter converter13 = restAdapter10.converter;
        retrofit.RestAdapter.Log log14 = restAdapter10.log;
        retrofit.RestAdapter.LogLevel logLevel15 = restAdapter10.logLevel;
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter10.new RestHandler();
        retrofit.client.Client.Provider provider17 = restAdapter10.getclientProvider();
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter10.new RestHandler();
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertNull(log14);
        org.junit.Assert.assertNull(logLevel15);
        org.junit.Assert.assertNull(provider17);
    }

    @Test
    public void test1382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1382");
        retrofit.Server server1 = new retrofit.Server("Retrofit-");
        java.lang.String str2 = server1.name;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.Server server12 = builder11.server;
        java.util.concurrent.Executor executor13 = null;
        builder11.httpExecutor = executor13;
        java.util.concurrent.Executor executor15 = builder11.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.FULL;
        builder11.logLevel = logLevel16;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter(server1, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log10, logLevel16);
        retrofit.client.Client.Provider provider19 = restAdapter18.clientProvider;
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        java.lang.String str21 = serializedObjectSupporter20.deserializeObjectString2();
        retrofit.client.Request request22 = serializedObjectSupporter20.deserializeObjectRequest7();
        restAdapter18.serializedObjectSupporter = serializedObjectSupporter20;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = restAdapter18.serializedObjectSupporter;
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter18.new RestHandler();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "default" + "'", str2, "default");
        org.junit.Assert.assertNotNull(log10);
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(provider19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Retrofit-Idle" + "'", str21, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(request22);
        org.junit.Assert.assertNotNull(serializedObjectSupporter24);
    }

    @Test
    public void test1383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1383");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor2 = null;
        builder0.requestInterceptor = requestInterceptor2;
        java.util.concurrent.Executor executor4 = null;
        builder0.setcallbackExecutor(executor4);
        retrofit.ErrorHandler errorHandler6 = builder0.errorHandler;
        java.util.concurrent.Executor executor7 = null;
        builder0.callbackExecutor = executor7;
        retrofit.Profiler profiler9 = null;
        builder0.profiler = profiler9;
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Log log19 = null;
        retrofit.RestAdapter.LogLevel logLevel20 = null;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log19, logLevel20);
        retrofit.SerializedObjectSupporter serializedObjectSupporter22 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request23 = serializedObjectSupporter22.deserializeObjectRequest6();
        restAdapter21.serializedObjectSupporter = serializedObjectSupporter22;
        retrofit.converter.GsonConverter gsonConverter25 = serializedObjectSupporter22.deserializeObjectConverter7();
        java.lang.String str26 = serializedObjectSupporter22.deserializeObjectString1();
        retrofit.client.Request request27 = serializedObjectSupporter22.deserializeObjectRequest6();
        retrofit.Server server28 = serializedObjectSupporter22.deserializeObjectServer1();
        java.lang.String str29 = server28.getUrl();
        retrofit.RestAdapter.Builder builder30 = builder0.setServer(server28);
        retrofit.Server server31 = null;
        retrofit.client.Client.Provider provider32 = null;
        java.util.concurrent.Executor executor33 = null;
        java.util.concurrent.Executor executor34 = null;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        retrofit.converter.Converter converter36 = null;
        retrofit.Profiler profiler37 = null;
        retrofit.ErrorHandler errorHandler38 = null;
        retrofit.RestAdapter.Log log39 = null;
        retrofit.RestAdapter.LogLevel logLevel40 = null;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter(server31, provider32, executor33, executor34, requestInterceptor35, converter36, profiler37, errorHandler38, log39, logLevel40);
        retrofit.SerializedObjectSupporter serializedObjectSupporter42 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request43 = serializedObjectSupporter42.deserializeObjectRequest6();
        restAdapter41.serializedObjectSupporter = serializedObjectSupporter42;
        retrofit.RestAdapter.RestHandler restHandler45 = restAdapter41.new RestHandler();
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.Server server47 = builder46.server;
        retrofit.converter.Converter converter48 = null;
        builder46.converter = converter48;
        retrofit.ErrorHandler errorHandler50 = builder46.errorHandler;
        retrofit.Server server52 = new retrofit.Server("Retrofit-");
        java.lang.String str53 = server52.name;
        retrofit.client.Client.Provider provider54 = null;
        java.util.concurrent.Executor executor55 = null;
        java.util.concurrent.Executor executor56 = null;
        retrofit.RequestInterceptor requestInterceptor57 = null;
        retrofit.converter.Converter converter58 = null;
        retrofit.Profiler profiler59 = null;
        retrofit.ErrorHandler errorHandler60 = null;
        retrofit.RestAdapter.Log log61 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.Server server63 = builder62.server;
        java.util.concurrent.Executor executor64 = null;
        builder62.httpExecutor = executor64;
        java.util.concurrent.Executor executor66 = builder62.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel67 = retrofit.RestAdapter.LogLevel.FULL;
        builder62.logLevel = logLevel67;
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter(server52, provider54, executor55, executor56, requestInterceptor57, converter58, profiler59, errorHandler60, log61, logLevel67);
        retrofit.RestAdapter.LogLevel logLevel70 = restAdapter69.getLogLevel();
        retrofit.RestAdapter.Builder builder71 = builder46.setLogLevel(logLevel70);
        restAdapter41.logLevel = logLevel70;
        retrofit.RestAdapter.Builder builder73 = builder0.setLogLevel(logLevel70);
        retrofit.Server server74 = null;
        retrofit.client.Client.Provider provider75 = null;
        java.util.concurrent.Executor executor76 = null;
        java.util.concurrent.Executor executor77 = null;
        retrofit.RequestInterceptor requestInterceptor78 = null;
        retrofit.converter.Converter converter79 = null;
        retrofit.Profiler profiler80 = null;
        retrofit.ErrorHandler errorHandler81 = null;
        retrofit.RestAdapter.Log log82 = null;
        retrofit.RestAdapter.LogLevel logLevel83 = null;
        retrofit.RestAdapter restAdapter84 = new retrofit.RestAdapter(server74, provider75, executor76, executor77, requestInterceptor78, converter79, profiler80, errorHandler81, log82, logLevel83);
        retrofit.SerializedObjectSupporter serializedObjectSupporter85 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request86 = serializedObjectSupporter85.deserializeObjectRequest6();
        restAdapter84.serializedObjectSupporter = serializedObjectSupporter85;
        retrofit.converter.GsonConverter gsonConverter88 = serializedObjectSupporter85.deserializeObjectConverter7();
        java.lang.String str89 = serializedObjectSupporter85.deserializeObjectString1();
        retrofit.converter.GsonConverter gsonConverter90 = serializedObjectSupporter85.deserializeObjectConverter4();
        builder0.converter = gsonConverter90;
        retrofit.client.Client.Provider provider92 = builder0.clientProvider;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertNotNull(gsonConverter25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Retrofit-" + "'", str26, "Retrofit-");
        org.junit.Assert.assertNotNull(request27);
        org.junit.Assert.assertNotNull(server28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "http://example.com" + "'", str29, "http://example.com");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(request43);
        org.junit.Assert.assertNull(server47);
        org.junit.Assert.assertNull(errorHandler50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "default" + "'", str53, "default");
        org.junit.Assert.assertNotNull(log61);
        org.junit.Assert.assertNull(server63);
        org.junit.Assert.assertNull(executor66);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(request86);
        org.junit.Assert.assertNotNull(gsonConverter88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "Retrofit-" + "'", str89, "Retrofit-");
        org.junit.Assert.assertNotNull(gsonConverter90);
        org.junit.Assert.assertNull(provider92);
    }

    @Test
    public void test1384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1384");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request12 = serializedObjectSupporter11.deserializeObjectRequest6();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter11;
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter11.deserializeObjectConverter7();
        java.lang.String str15 = serializedObjectSupporter11.deserializeObjectString1();
        retrofit.Server server16 = serializedObjectSupporter11.deserializeObjectServer1();
        retrofit.client.Request request17 = serializedObjectSupporter11.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter18 = serializedObjectSupporter11.deserializeObjectConverter1();
        retrofit.client.Request request19 = serializedObjectSupporter11.deserializeObjectRequest7();
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Retrofit-" + "'", str15, "Retrofit-");
        org.junit.Assert.assertNotNull(server16);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertNotNull(gsonConverter18);
        org.junit.Assert.assertNotNull(request19);
    }

    @Test
    public void test1385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1385");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request12 = serializedObjectSupporter11.deserializeObjectRequest6();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter11;
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter11.deserializeObjectConverter7();
        retrofit.Server server15 = serializedObjectSupporter11.deserializeObjectServer1();
        java.lang.String str16 = serializedObjectSupporter11.deserializeObjectString4();
        retrofit.client.Request request17 = serializedObjectSupporter11.deserializeObjectRequest7();
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(server15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "http://example.com/" + "'", str16, "http://example.com/");
        org.junit.Assert.assertNotNull(request17);
    }

    @Test
    public void test1386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1386");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        java.util.concurrent.Executor executor13 = restAdapter10.gethttpExecutor();
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter10.new RestHandler();
        retrofit.Profiler profiler15 = restAdapter10.getprofiler();
        retrofit.Server server16 = null;
        retrofit.client.Client.Provider provider17 = null;
        java.util.concurrent.Executor executor18 = null;
        java.util.concurrent.Executor executor19 = null;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        retrofit.converter.Converter converter21 = null;
        retrofit.Profiler profiler22 = null;
        retrofit.ErrorHandler errorHandler23 = null;
        retrofit.RestAdapter.Log log24 = null;
        retrofit.RestAdapter.LogLevel logLevel25 = null;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter(server16, provider17, executor18, executor19, requestInterceptor20, converter21, profiler22, errorHandler23, log24, logLevel25);
        retrofit.SerializedObjectSupporter serializedObjectSupporter27 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request28 = serializedObjectSupporter27.deserializeObjectRequest6();
        restAdapter26.serializedObjectSupporter = serializedObjectSupporter27;
        retrofit.converter.GsonConverter gsonConverter30 = serializedObjectSupporter27.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter31 = serializedObjectSupporter27.deserializeObjectConverter7();
        retrofit.client.Request request32 = serializedObjectSupporter27.deserializeObjectRequest6();
        retrofit.client.Request request33 = serializedObjectSupporter27.deserializeObjectRequest7();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request34 = restAdapter10.logAndReplaceRequest(request33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNotNull(request28);
        org.junit.Assert.assertNotNull(gsonConverter30);
        org.junit.Assert.assertNotNull(gsonConverter31);
        org.junit.Assert.assertNotNull(request32);
        org.junit.Assert.assertNotNull(request33);
    }

    @Test
    public void test1387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1387");
        retrofit.Server server1 = new retrofit.Server("Retrofit-");
        java.lang.String str2 = server1.name;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.Server server12 = builder11.server;
        java.util.concurrent.Executor executor13 = null;
        builder11.httpExecutor = executor13;
        java.util.concurrent.Executor executor15 = builder11.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.FULL;
        builder11.logLevel = logLevel16;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter(server1, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log10, logLevel16);
        java.util.concurrent.Executor executor19 = restAdapter18.getcallbackExecutor();
        int int20 = restAdapter18.getLOG_CHUNK_SIZE();
        java.util.List<retrofit.client.Header> headerList23 = null;
        retrofit.mime.TypedOutput typedOutput24 = null;
        retrofit.client.Request request25 = new retrofit.client.Request("", "", headerList23, typedOutput24);
        retrofit.mime.TypedOutput typedOutput26 = request25.getBody();
        java.lang.String str27 = request25.url;
        retrofit.mime.TypedOutput typedOutput28 = request25.getBody();
        java.lang.String str29 = request25.getUrl();
        retrofit.client.Request request30 = restAdapter18.logAndReplaceRequest(request25);
        java.lang.String str31 = restAdapter18.getIDLE_THREAD_NAME();
        retrofit.client.Client.Provider provider32 = restAdapter18.clientProvider;
        retrofit.ErrorHandler errorHandler33 = restAdapter18.geterrorHandler();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "default" + "'", str2, "default");
        org.junit.Assert.assertNotNull(log10);
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4000 + "'", int20 == 4000);
        org.junit.Assert.assertNull(typedOutput26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNull(typedOutput28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(request30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Retrofit-Idle" + "'", str31, "Retrofit-Idle");
        org.junit.Assert.assertNull(provider32);
        org.junit.Assert.assertNull(errorHandler33);
    }

    @Test
    public void test1388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1388");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.requestInterceptor;
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter10.new RestHandler();
        retrofit.ErrorHandler errorHandler16 = restAdapter10.geterrorHandler();
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter10.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = restHandler17.serializedObjectSupporter;
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNull(serializedObjectSupporter18);
    }

    @Test
    public void test1389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1389");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request12 = serializedObjectSupporter11.deserializeObjectRequest6();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter11;
        retrofit.ErrorHandler errorHandler14 = restAdapter10.geterrorHandler();
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter10.new RestHandler();
        retrofit.Server server17 = null;
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Log log25 = null;
        retrofit.RestAdapter.LogLevel logLevel26 = null;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server17, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log25, logLevel26);
        retrofit.SerializedObjectSupporter serializedObjectSupporter28 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request29 = serializedObjectSupporter28.deserializeObjectRequest6();
        restAdapter27.serializedObjectSupporter = serializedObjectSupporter28;
        java.lang.String str31 = serializedObjectSupporter28.deserializeObjectString4();
        retrofit.Server server32 = serializedObjectSupporter28.deserializeObjectServer1();
        retrofit.client.Request request33 = serializedObjectSupporter28.deserializeObjectRequest1();
        retrofit.client.Request request34 = serializedObjectSupporter28.deserializeObjectRequest6();
        java.lang.String str35 = serializedObjectSupporter28.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter36 = serializedObjectSupporter28.deserializeObjectConverter2();
        java.lang.String str37 = serializedObjectSupporter28.deserializeObjectString2();
        java.lang.String str38 = serializedObjectSupporter28.deserializeObjectString5();
        restHandler16.serializedObjectSupporter = serializedObjectSupporter28;
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNotNull(request29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "http://example.com/" + "'", str31, "http://example.com/");
        org.junit.Assert.assertNotNull(server32);
        org.junit.Assert.assertNotNull(request33);
        org.junit.Assert.assertNotNull(request34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Retrofit-Idle" + "'", str35, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Retrofit-Idle" + "'", str37, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "POST" + "'", str38, "POST");
    }

    @Test
    public void test1390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1390");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest5();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest5();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest3();
        retrofit.client.Request request6 = serializedObjectSupporter0.deserializeObjectRequest4();
        retrofit.mime.TypedOutput typedOutput7 = request6.body;
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(request6);
        org.junit.Assert.assertNull(typedOutput7);
    }

    @Test
    public void test1391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1391");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter10.new RestHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        retrofit.converter.Converter converter14 = restAdapter10.converter;
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter10.new RestHandler();
        java.lang.String str16 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter10.new RestHandler();
        java.util.concurrent.Executor executor18 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log19 = restAdapter10.log;
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Retrofit-Idle" + "'", str16, "Retrofit-Idle");
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(log19);
    }

    @Test
    public void test1392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1392");
        retrofit.Server server2 = new retrofit.Server("Retrofit-Idle", "Retrofit-");
        java.lang.String str3 = server2.getapiUrl();
        retrofit.client.Client.Provider provider4 = null;
        java.util.concurrent.Executor executor5 = null;
        java.util.concurrent.Executor executor6 = null;
        retrofit.RequestInterceptor requestInterceptor7 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter8 = new retrofit.SerializedObjectSupporter();
        java.lang.String str9 = serializedObjectSupporter8.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter10 = serializedObjectSupporter8.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter11 = serializedObjectSupporter8.deserializeObjectConverter7();
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = null;
        retrofit.Server server15 = null;
        retrofit.client.Client.Provider provider16 = null;
        java.util.concurrent.Executor executor17 = null;
        java.util.concurrent.Executor executor18 = null;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        retrofit.converter.Converter converter20 = null;
        retrofit.Profiler profiler21 = null;
        retrofit.ErrorHandler errorHandler22 = null;
        retrofit.RestAdapter.Log log23 = null;
        retrofit.RestAdapter.LogLevel logLevel24 = null;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter(server15, provider16, executor17, executor18, requestInterceptor19, converter20, profiler21, errorHandler22, log23, logLevel24);
        retrofit.RestAdapter.RestHandler restHandler26 = restAdapter25.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler27 = restAdapter25.new RestHandler();
        java.util.concurrent.Executor executor28 = restAdapter25.getcallbackExecutor();
        retrofit.RestAdapter.RestHandler restHandler29 = restAdapter25.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter25.logLevel = logLevel30;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server2, provider4, executor5, executor6, requestInterceptor7, (retrofit.converter.Converter) gsonConverter11, profiler12, errorHandler13, log14, logLevel30);
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter32.logLevel;
        retrofit.RequestInterceptor requestInterceptor34 = restAdapter32.getrequestInterceptor();
        retrofit.RequestInterceptor requestInterceptor35 = restAdapter32.getrequestInterceptor();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Retrofit-Idle" + "'", str3, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Retrofit-Idle" + "'", str9, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter10);
        org.junit.Assert.assertNotNull(gsonConverter11);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(requestInterceptor34);
        org.junit.Assert.assertNull(requestInterceptor35);
    }

    @Test
    public void test1393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1393");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request16 = serializedObjectSupporter15.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter15.deserializeObjectConverter1();
        java.lang.String str18 = serializedObjectSupporter15.deserializeObjectString4();
        java.lang.String str19 = serializedObjectSupporter15.deserializeObjectString4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter15;
        retrofit.ErrorHandler errorHandler21 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor22 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.Server server24 = builder23.server;
        retrofit.converter.Converter converter25 = null;
        builder23.converter = converter25;
        retrofit.RestAdapter.Log log27 = builder23.log;
        retrofit.RestAdapter.LogLevel logLevel28 = builder23.logLevel;
        restAdapter10.logLevel = logLevel28;
        retrofit.RestAdapter.RestHandler restHandler30 = restAdapter10.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = restAdapter10.serializedObjectSupporter;
        retrofit.ErrorHandler errorHandler32 = restAdapter10.geterrorHandler();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter10.logLevel;
        retrofit.RestAdapter.LogLevel logLevel34 = restAdapter10.logLevel;
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(server24);
        org.junit.Assert.assertNull(log27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(serializedObjectSupporter31);
        org.junit.Assert.assertNull(errorHandler32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test1394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1394");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        java.lang.String str2 = serializedObjectSupporter1.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter1.deserializeObjectConverter3();
        builder0.serializedObjectSupporter = serializedObjectSupporter1;
        java.util.concurrent.Executor executor5 = null;
        builder0.httpExecutor = executor5;
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = null;
        retrofit.RestAdapter.LogLevel logLevel16 = null;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel16);
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request19 = serializedObjectSupporter18.deserializeObjectRequest6();
        restAdapter17.serializedObjectSupporter = serializedObjectSupporter18;
        java.lang.String str21 = serializedObjectSupporter18.deserializeObjectString4();
        retrofit.Server server22 = serializedObjectSupporter18.deserializeObjectServer1();
        retrofit.client.Request request23 = serializedObjectSupporter18.deserializeObjectRequest1();
        retrofit.converter.GsonConverter gsonConverter24 = serializedObjectSupporter18.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter25 = serializedObjectSupporter18.deserializeObjectConverter3();
        builder0.converter = gsonConverter25;
        retrofit.Server server29 = new retrofit.Server("http://example.com/", "Retrofit-");
        java.lang.String str30 = server29.name;
        retrofit.RestAdapter.Builder builder31 = builder0.setServer(server29);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Retrofit-Idle" + "'", str2, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(request19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "http://example.com/" + "'", str21, "http://example.com/");
        org.junit.Assert.assertNotNull(server22);
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertNotNull(gsonConverter24);
        org.junit.Assert.assertNotNull(gsonConverter25);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Retrofit-" + "'", str30, "Retrofit-");
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test1395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1395");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.Server server2 = builder0.server;
        retrofit.RestAdapter.Log log3 = builder0.log;
        retrofit.Server server4 = builder0.server;
        java.util.concurrent.Executor executor5 = builder0.getcallbackExecutor();
        builder0.ensureSaneDefaults();
        retrofit.client.Client.Provider provider7 = builder0.clientProvider;
        retrofit.SerializedObjectSupporter serializedObjectSupporter8 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request9 = serializedObjectSupporter8.deserializeObjectRequest6();
        java.lang.String str10 = serializedObjectSupporter8.deserializeObjectString4();
        java.lang.String str11 = serializedObjectSupporter8.deserializeObjectString4();
        retrofit.ErrorHandler errorHandler12 = serializedObjectSupporter8.deserializeObjectErrorHandler1();
        retrofit.converter.GsonConverter gsonConverter13 = serializedObjectSupporter8.deserializeObjectConverter2();
        retrofit.RestAdapter.Builder builder14 = builder0.setConverter((retrofit.converter.Converter) gsonConverter13);
        retrofit.Server server15 = null;
        retrofit.client.Client.Provider provider16 = null;
        java.util.concurrent.Executor executor17 = null;
        java.util.concurrent.Executor executor18 = null;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        retrofit.converter.Converter converter20 = null;
        retrofit.Profiler profiler21 = null;
        retrofit.ErrorHandler errorHandler22 = null;
        retrofit.RestAdapter.Log log23 = null;
        retrofit.RestAdapter.LogLevel logLevel24 = null;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter(server15, provider16, executor17, executor18, requestInterceptor19, converter20, profiler21, errorHandler22, log23, logLevel24);
        retrofit.RestAdapter.RestHandler restHandler26 = restAdapter25.new RestHandler();
        retrofit.Server server27 = restAdapter25.server;
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter25.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor29 = restAdapter25.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request31 = serializedObjectSupporter30.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter32 = serializedObjectSupporter30.deserializeObjectConverter1();
        java.lang.String str33 = serializedObjectSupporter30.deserializeObjectString4();
        java.lang.String str34 = serializedObjectSupporter30.deserializeObjectString4();
        restAdapter25.serializedObjectSupporter = serializedObjectSupporter30;
        retrofit.client.Request request36 = serializedObjectSupporter30.deserializeObjectRequest1();
        retrofit.client.Request request37 = serializedObjectSupporter30.deserializeObjectRequest5();
        retrofit.converter.GsonConverter gsonConverter38 = serializedObjectSupporter30.deserializeObjectConverter8();
        builder0.converter = gsonConverter38;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertNull(log3);
        org.junit.Assert.assertNull(server4);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNotNull(provider7);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "http://example.com/" + "'", str10, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "http://example.com/" + "'", str11, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler12);
        org.junit.Assert.assertNotNull(gsonConverter13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(server27);
        org.junit.Assert.assertNull(logLevel28);
        org.junit.Assert.assertNull(requestInterceptor29);
        org.junit.Assert.assertNotNull(request31);
        org.junit.Assert.assertNotNull(gsonConverter32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "http://example.com/" + "'", str33, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "http://example.com/" + "'", str34, "http://example.com/");
        org.junit.Assert.assertNotNull(request36);
        org.junit.Assert.assertNotNull(request37);
        org.junit.Assert.assertNotNull(gsonConverter38);
    }

    @Test
    public void test1396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1396");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter10.new RestHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter10.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter10.getrequestInterceptor();
        java.util.concurrent.Executor executor17 = restAdapter10.getcallbackExecutor();
        retrofit.converter.Converter converter18 = restAdapter10.getconverter();
        retrofit.SerializedObjectSupporter serializedObjectSupporter19 = restAdapter10.serializedObjectSupporter;
        java.lang.String str20 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.Profiler profiler21 = restAdapter10.getprofiler();
        retrofit.Server server22 = null;
        retrofit.client.Client.Provider provider23 = null;
        java.util.concurrent.Executor executor24 = null;
        java.util.concurrent.Executor executor25 = null;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        retrofit.converter.Converter converter27 = null;
        retrofit.Profiler profiler28 = null;
        retrofit.ErrorHandler errorHandler29 = null;
        retrofit.RestAdapter.Log log30 = null;
        retrofit.RestAdapter.LogLevel logLevel31 = null;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server22, provider23, executor24, executor25, requestInterceptor26, converter27, profiler28, errorHandler29, log30, logLevel31);
        retrofit.SerializedObjectSupporter serializedObjectSupporter33 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request34 = serializedObjectSupporter33.deserializeObjectRequest6();
        restAdapter32.serializedObjectSupporter = serializedObjectSupporter33;
        retrofit.converter.GsonConverter gsonConverter36 = serializedObjectSupporter33.deserializeObjectConverter8();
        java.lang.String str37 = serializedObjectSupporter33.deserializeObjectString2();
        retrofit.client.Request request38 = serializedObjectSupporter33.deserializeObjectRequest5();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request39 = restAdapter10.logAndReplaceRequest(request38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(converter18);
        org.junit.Assert.assertNull(serializedObjectSupporter19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Retrofit-Idle" + "'", str20, "Retrofit-Idle");
        org.junit.Assert.assertNull(profiler21);
        org.junit.Assert.assertNotNull(request34);
        org.junit.Assert.assertNotNull(gsonConverter36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Retrofit-Idle" + "'", str37, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(request38);
    }

    @Test
    public void test1397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1397");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        java.util.concurrent.Executor executor2 = null;
        builder0.httpExecutor = executor2;
        java.util.concurrent.Executor executor4 = null;
        builder0.callbackExecutor = executor4;
        java.util.concurrent.Executor executor6 = null;
        builder0.callbackExecutor = executor6;
        builder0.ensureSaneDefaults();
        retrofit.client.Client.Provider provider9 = builder0.clientProvider;
        retrofit.Profiler profiler10 = builder0.profiler;
        java.util.concurrent.Executor executor11 = null;
        builder0.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder14 = builder0.setServer("Retrofit-");
        retrofit.Server server17 = new retrofit.Server("", "GET");
        retrofit.RestAdapter.Builder builder18 = builder14.setServer(server17);
        java.lang.String str19 = server17.getUrl();
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNotNull(provider9);
        org.junit.Assert.assertNull(profiler10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test1398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1398");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request16 = serializedObjectSupporter15.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter15.deserializeObjectConverter1();
        java.lang.String str18 = serializedObjectSupporter15.deserializeObjectString4();
        java.lang.String str19 = serializedObjectSupporter15.deserializeObjectString4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter15;
        retrofit.client.Request request21 = serializedObjectSupporter15.deserializeObjectRequest1();
        retrofit.client.Request request22 = serializedObjectSupporter15.deserializeObjectRequest5();
        java.lang.String str23 = request22.getUrl();
        java.lang.String str24 = request22.getUrl();
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertNotNull(request21);
        org.junit.Assert.assertNotNull(request22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "http://example.com/" + "'", str23, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "http://example.com/" + "'", str24, "http://example.com/");
    }

    @Test
    public void test1399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1399");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter1();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString4();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.client.Request request6 = serializedObjectSupporter0.deserializeObjectRequest3();
        retrofit.Server server7 = serializedObjectSupporter0.deserializeObjectServer1();
        java.lang.String str8 = server7.apiUrl;
        java.lang.String str9 = server7.name;
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(request6);
        org.junit.Assert.assertNotNull(server7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://example.com" + "'", str8, "http://example.com");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "default" + "'", str9, "default");
    }

    @Test
    public void test1400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1400");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        java.lang.String str2 = serializedObjectSupporter1.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter1.deserializeObjectConverter3();
        builder0.serializedObjectSupporter = serializedObjectSupporter1;
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.RestAdapter.Builder builder7 = builder0.setServer("http://example.com/");
        retrofit.Profiler profiler8 = builder0.profiler;
        retrofit.Server server9 = null;
        retrofit.client.Client.Provider provider10 = null;
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        retrofit.converter.Converter converter14 = null;
        retrofit.Profiler profiler15 = null;
        retrofit.ErrorHandler errorHandler16 = null;
        retrofit.RestAdapter.Log log17 = null;
        retrofit.RestAdapter.LogLevel logLevel18 = null;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter(server9, provider10, executor11, executor12, requestInterceptor13, converter14, profiler15, errorHandler16, log17, logLevel18);
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter19.new RestHandler();
        retrofit.Server server21 = restAdapter19.server;
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter19.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor23 = restAdapter19.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request25 = serializedObjectSupporter24.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter26 = serializedObjectSupporter24.deserializeObjectConverter1();
        java.lang.String str27 = serializedObjectSupporter24.deserializeObjectString4();
        java.lang.String str28 = serializedObjectSupporter24.deserializeObjectString4();
        restAdapter19.serializedObjectSupporter = serializedObjectSupporter24;
        retrofit.client.Request request30 = serializedObjectSupporter24.deserializeObjectRequest1();
        retrofit.converter.GsonConverter gsonConverter31 = serializedObjectSupporter24.deserializeObjectConverter1();
        retrofit.converter.GsonConverter gsonConverter32 = serializedObjectSupporter24.deserializeObjectConverter4();
        builder0.converter = gsonConverter32;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor35 = builder34.getcallbackExecutor();
        retrofit.Server server36 = builder34.server;
        retrofit.Profiler profiler37 = null;
        builder34.profiler = profiler37;
        retrofit.Server server39 = null;
        retrofit.client.Client.Provider provider40 = null;
        java.util.concurrent.Executor executor41 = null;
        java.util.concurrent.Executor executor42 = null;
        retrofit.RequestInterceptor requestInterceptor43 = null;
        retrofit.converter.Converter converter44 = null;
        retrofit.Profiler profiler45 = null;
        retrofit.ErrorHandler errorHandler46 = null;
        retrofit.RestAdapter.Log log47 = null;
        retrofit.RestAdapter.LogLevel logLevel48 = null;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server39, provider40, executor41, executor42, requestInterceptor43, converter44, profiler45, errorHandler46, log47, logLevel48);
        retrofit.SerializedObjectSupporter serializedObjectSupporter50 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request51 = serializedObjectSupporter50.deserializeObjectRequest6();
        restAdapter49.serializedObjectSupporter = serializedObjectSupporter50;
        java.lang.String str53 = serializedObjectSupporter50.deserializeObjectString4();
        retrofit.Server server54 = serializedObjectSupporter50.deserializeObjectServer1();
        retrofit.client.Request request55 = serializedObjectSupporter50.deserializeObjectRequest1();
        retrofit.converter.GsonConverter gsonConverter56 = serializedObjectSupporter50.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter57 = serializedObjectSupporter50.deserializeObjectConverter3();
        retrofit.RestAdapter.Builder builder58 = builder34.setConverter((retrofit.converter.Converter) gsonConverter57);
        java.util.concurrent.Executor executor59 = builder34.callbackExecutor;
        retrofit.Server server62 = new retrofit.Server("", "hi!");
        retrofit.RestAdapter.Builder builder63 = builder34.setServer(server62);
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor65 = builder64.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor66 = null;
        builder64.requestInterceptor = requestInterceptor66;
        java.util.concurrent.Executor executor68 = builder64.callbackExecutor;
        retrofit.RestAdapter.Builder builder70 = builder64.setServer("default");
        retrofit.SerializedObjectSupporter serializedObjectSupporter71 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request72 = serializedObjectSupporter71.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter73 = serializedObjectSupporter71.deserializeObjectConverter1();
        retrofit.RestAdapter.Builder builder74 = builder64.setConverter((retrofit.converter.Converter) gsonConverter73);
        retrofit.RestAdapter restAdapter75 = builder64.build();
        java.util.concurrent.Executor executor76 = restAdapter75.callbackExecutor;
        builder34.sethttpExecutor(executor76);
        retrofit.Server server78 = null;
        retrofit.client.Client.Provider provider79 = null;
        java.util.concurrent.Executor executor80 = null;
        java.util.concurrent.Executor executor81 = null;
        retrofit.RequestInterceptor requestInterceptor82 = null;
        retrofit.converter.Converter converter83 = null;
        retrofit.Profiler profiler84 = null;
        retrofit.ErrorHandler errorHandler85 = null;
        retrofit.RestAdapter.Log log86 = null;
        retrofit.RestAdapter.LogLevel logLevel87 = null;
        retrofit.RestAdapter restAdapter88 = new retrofit.RestAdapter(server78, provider79, executor80, executor81, requestInterceptor82, converter83, profiler84, errorHandler85, log86, logLevel87);
        retrofit.SerializedObjectSupporter serializedObjectSupporter89 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request90 = serializedObjectSupporter89.deserializeObjectRequest6();
        restAdapter88.serializedObjectSupporter = serializedObjectSupporter89;
        retrofit.converter.GsonConverter gsonConverter92 = serializedObjectSupporter89.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter93 = serializedObjectSupporter89.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter94 = serializedObjectSupporter89.deserializeObjectConverter1();
        retrofit.client.Request request95 = serializedObjectSupporter89.deserializeObjectRequest5();
        retrofit.RequestInterceptor requestInterceptor96 = serializedObjectSupporter89.deserializeObjectRequestInterceptor1();
        builder34.requestInterceptor = requestInterceptor96;
        builder0.requestInterceptor = requestInterceptor96;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Retrofit-Idle" + "'", str2, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(profiler8);
        org.junit.Assert.assertNull(server21);
        org.junit.Assert.assertNull(logLevel22);
        org.junit.Assert.assertNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(request25);
        org.junit.Assert.assertNotNull(gsonConverter26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "http://example.com/" + "'", str27, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "http://example.com/" + "'", str28, "http://example.com/");
        org.junit.Assert.assertNotNull(request30);
        org.junit.Assert.assertNotNull(gsonConverter31);
        org.junit.Assert.assertNotNull(gsonConverter32);
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertNull(server36);
        org.junit.Assert.assertNotNull(request51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "http://example.com/" + "'", str53, "http://example.com/");
        org.junit.Assert.assertNotNull(server54);
        org.junit.Assert.assertNotNull(request55);
        org.junit.Assert.assertNotNull(gsonConverter56);
        org.junit.Assert.assertNotNull(gsonConverter57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(executor59);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(executor65);
        org.junit.Assert.assertNull(executor68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(request72);
        org.junit.Assert.assertNotNull(gsonConverter73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(restAdapter75);
        org.junit.Assert.assertNotNull(executor76);
        org.junit.Assert.assertNotNull(request90);
        org.junit.Assert.assertNotNull(gsonConverter92);
        org.junit.Assert.assertNotNull(gsonConverter93);
        org.junit.Assert.assertNotNull(gsonConverter94);
        org.junit.Assert.assertNotNull(request95);
        org.junit.Assert.assertNotNull(requestInterceptor96);
    }

    @Test
    public void test1401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1401");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString2();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest7();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter3 = serializedObjectSupporter0.deserializeObjectLogLevel1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Retrofit-Idle" + "'", str1, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(request2);
    }

    @Test
    public void test1402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1402");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString2();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString5();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest2();
        java.util.List<retrofit.client.Header> headerList5 = request4.getHeaders();
        java.lang.String str6 = request4.getMethod();
        java.lang.String str7 = request4.getUrl();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Retrofit-Idle" + "'", str1, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "POST" + "'", str3, "POST");
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(headerList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GET" + "'", str6, "GET");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "http://example.com/" + "'", str7, "http://example.com/");
    }

    @Test
    public void test1403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1403");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.Profiler profiler2 = builder0.profiler;
        retrofit.client.Client.Provider provider3 = null;
        builder0.setclientProvider(provider3);
        retrofit.Server server6 = new retrofit.Server("Retrofit-");
        java.lang.String str7 = server6.name;
        builder0.server = server6;
        retrofit.Server server9 = builder0.server;
        retrofit.RequestInterceptor requestInterceptor10 = builder0.requestInterceptor;
        java.util.concurrent.Executor executor11 = builder0.getcallbackExecutor();
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "default" + "'", str7, "default");
        org.junit.Assert.assertNotNull(server9);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNull(executor11);
    }

    @Test
    public void test1404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1404");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request12 = serializedObjectSupporter11.deserializeObjectRequest6();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter11;
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter11.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter15 = serializedObjectSupporter11.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter11.deserializeObjectConverter1();
        retrofit.client.Request request17 = serializedObjectSupporter11.deserializeObjectRequest5();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter11.deserializeObjectRequestInterceptor1();
        retrofit.client.Request request19 = serializedObjectSupporter11.deserializeObjectRequest5();
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(gsonConverter15);
        org.junit.Assert.assertNotNull(gsonConverter16);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(request19);
    }

    @Test
    public void test1405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1405");
        retrofit.Server server1 = new retrofit.Server("Retrofit-");
        java.lang.String str2 = server1.name;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.Server server12 = builder11.server;
        java.util.concurrent.Executor executor13 = null;
        builder11.httpExecutor = executor13;
        java.util.concurrent.Executor executor15 = builder11.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.FULL;
        builder11.logLevel = logLevel16;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter(server1, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log10, logLevel16);
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter18.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor20 = restAdapter18.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter21 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request22 = serializedObjectSupporter21.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter23 = serializedObjectSupporter21.deserializeObjectConverter1();
        retrofit.client.Request request24 = serializedObjectSupporter21.deserializeObjectRequest5();
        retrofit.client.Request request25 = serializedObjectSupporter21.deserializeObjectRequest5();
        retrofit.client.Request request26 = restAdapter18.logAndReplaceRequest(request25);
        retrofit.Server server27 = restAdapter18.getserver();
        retrofit.Server server28 = null;
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.RestAdapter.Log log36 = null;
        retrofit.RestAdapter.LogLevel logLevel37 = null;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter(server28, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log36, logLevel37);
        retrofit.SerializedObjectSupporter serializedObjectSupporter39 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request40 = serializedObjectSupporter39.deserializeObjectRequest6();
        restAdapter38.serializedObjectSupporter = serializedObjectSupporter39;
        retrofit.converter.GsonConverter gsonConverter42 = serializedObjectSupporter39.deserializeObjectConverter8();
        retrofit.client.Request request43 = serializedObjectSupporter39.deserializeObjectRequest2();
        retrofit.client.Request request44 = restAdapter18.logAndReplaceRequest(request43);
        retrofit.RequestInterceptor requestInterceptor45 = restAdapter18.getrequestInterceptor();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "default" + "'", str2, "default");
        org.junit.Assert.assertNotNull(log10);
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(requestInterceptor20);
        org.junit.Assert.assertNotNull(request22);
        org.junit.Assert.assertNotNull(gsonConverter23);
        org.junit.Assert.assertNotNull(request24);
        org.junit.Assert.assertNotNull(request25);
        org.junit.Assert.assertNotNull(request26);
        org.junit.Assert.assertNotNull(server27);
        org.junit.Assert.assertNotNull(request40);
        org.junit.Assert.assertNotNull(gsonConverter42);
        org.junit.Assert.assertNotNull(request43);
        org.junit.Assert.assertNotNull(request44);
        org.junit.Assert.assertNull(requestInterceptor45);
    }

    @Test
    public void test1406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1406");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter1();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString1();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.RequestInterceptor requestInterceptor6 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.mime.TypedString typedString7 = serializedObjectSupporter0.deserializeObjectTypedOutput2();
        retrofit.client.Request request8 = serializedObjectSupporter0.deserializeObjectRequest8();
        java.lang.String str9 = request8.getMethod();
        java.lang.String str10 = request8.method;
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Retrofit-" + "'", str4, "Retrofit-");
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(typedString7);
        org.junit.Assert.assertNotNull(request8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "GET" + "'", str9, "GET");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GET" + "'", str10, "GET");
    }

    @Test
    public void test1407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1407");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        java.lang.String str2 = serializedObjectSupporter1.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter1.deserializeObjectConverter3();
        builder0.serializedObjectSupporter = serializedObjectSupporter1;
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.RestAdapter.Builder builder7 = builder0.setServer("http://example.com/");
        retrofit.client.Client.Provider provider8 = builder0.clientProvider;
        java.util.concurrent.Executor executor9 = builder0.gethttpExecutor();
        retrofit.Profiler profiler10 = builder0.profiler;
        builder0.ensureSaneDefaults();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Retrofit-Idle" + "'", str2, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(profiler10);
    }

    @Test
    public void test1408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1408");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel14 = null;
        restAdapter10.logLevel = logLevel14;
        retrofit.client.Client.Provider provider16 = restAdapter10.getclientProvider();
        retrofit.ErrorHandler errorHandler17 = restAdapter10.geterrorHandler();
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter10.new RestHandler();
        retrofit.Profiler profiler19 = restAdapter10.profiler;
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter10.logLevel;
        int int21 = restAdapter10.getLOG_CHUNK_SIZE();
        java.util.concurrent.Executor executor22 = restAdapter10.gethttpExecutor();
        retrofit.Profiler profiler23 = restAdapter10.profiler;
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(provider16);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(profiler19);
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4000 + "'", int21 == 4000);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(profiler23);
    }

    @Test
    public void test1409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1409");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest8();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest5();
        java.lang.String str4 = request3.getUrl();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "http://example.com/" + "'", str4, "http://example.com/");
    }

    @Test
    public void test1410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1410");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = null;
        builder0.setclientProvider(provider1);
        retrofit.ErrorHandler errorHandler3 = builder0.errorHandler;
        retrofit.Server server6 = new retrofit.Server("POST", "");
        java.lang.String str7 = server6.getName();
        retrofit.RestAdapter.Builder builder8 = builder0.setServer(server6);
        java.util.concurrent.Executor executor9 = builder8.gethttpExecutor();
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(executor9);
    }

    @Test
    public void test1411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1411");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request12 = serializedObjectSupporter11.deserializeObjectRequest6();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter11;
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter11.deserializeObjectConverter7();
        java.lang.String str15 = serializedObjectSupporter11.deserializeObjectString1();
        retrofit.Server server16 = serializedObjectSupporter11.deserializeObjectServer1();
        retrofit.client.Request request17 = serializedObjectSupporter11.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter18 = serializedObjectSupporter11.deserializeObjectConverter1();
        java.lang.String str19 = serializedObjectSupporter11.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter11.deserializeObjectConverter2();
        retrofit.client.Request request21 = serializedObjectSupporter11.deserializeObjectRequest7();
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Retrofit-" + "'", str15, "Retrofit-");
        org.junit.Assert.assertNotNull(server16);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertNotNull(gsonConverter18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Retrofit-Idle" + "'", str19, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNotNull(request21);
    }

    @Test
    public void test1412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1412");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        java.lang.String str13 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler14 = restAdapter10.geterrorHandler();
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor16 = builder15.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor17 = null;
        builder15.requestInterceptor = requestInterceptor17;
        java.util.concurrent.Executor executor19 = null;
        builder15.setcallbackExecutor(executor19);
        retrofit.ErrorHandler errorHandler21 = builder15.errorHandler;
        java.util.concurrent.Executor executor22 = null;
        builder15.callbackExecutor = executor22;
        retrofit.Profiler profiler24 = builder15.profiler;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = builder25.getcallbackExecutor();
        retrofit.ErrorHandler errorHandler27 = builder25.errorHandler;
        retrofit.client.Client.Provider provider28 = null;
        builder25.setclientProvider(provider28);
        retrofit.Server server30 = null;
        retrofit.client.Client.Provider provider31 = null;
        java.util.concurrent.Executor executor32 = null;
        java.util.concurrent.Executor executor33 = null;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        retrofit.converter.Converter converter35 = null;
        retrofit.Profiler profiler36 = null;
        retrofit.ErrorHandler errorHandler37 = null;
        retrofit.RestAdapter.Log log38 = null;
        retrofit.RestAdapter.LogLevel logLevel39 = null;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server30, provider31, executor32, executor33, requestInterceptor34, converter35, profiler36, errorHandler37, log38, logLevel39);
        retrofit.RestAdapter.RestHandler restHandler41 = restAdapter40.new RestHandler();
        retrofit.Server server42 = restAdapter40.server;
        retrofit.RestAdapter.LogLevel logLevel43 = restAdapter40.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor44 = restAdapter40.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter45 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request46 = serializedObjectSupporter45.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter47 = serializedObjectSupporter45.deserializeObjectConverter1();
        java.lang.String str48 = serializedObjectSupporter45.deserializeObjectString4();
        java.lang.String str49 = serializedObjectSupporter45.deserializeObjectString4();
        restAdapter40.serializedObjectSupporter = serializedObjectSupporter45;
        retrofit.ErrorHandler errorHandler51 = restAdapter40.geterrorHandler();
        java.util.concurrent.Executor executor52 = restAdapter40.httpExecutor;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.Server server54 = builder53.server;
        retrofit.converter.Converter converter55 = null;
        builder53.converter = converter55;
        retrofit.RestAdapter.Log log57 = builder53.log;
        retrofit.RestAdapter.LogLevel logLevel58 = builder53.logLevel;
        restAdapter40.logLevel = logLevel58;
        retrofit.RestAdapter.Builder builder60 = builder25.setLogLevel(logLevel58);
        builder15.logLevel = logLevel58;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter10.setLogLevel(logLevel58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log level may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-Idle" + "'", str13, "Retrofit-Idle");
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(profiler24);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNull(server42);
        org.junit.Assert.assertNull(logLevel43);
        org.junit.Assert.assertNull(requestInterceptor44);
        org.junit.Assert.assertNotNull(request46);
        org.junit.Assert.assertNotNull(gsonConverter47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "http://example.com/" + "'", str48, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "http://example.com/" + "'", str49, "http://example.com/");
        org.junit.Assert.assertNull(errorHandler51);
        org.junit.Assert.assertNull(executor52);
        org.junit.Assert.assertNull(server54);
        org.junit.Assert.assertNull(log57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder60);
    }

    @Test
    public void test1413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1413");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request16 = serializedObjectSupporter15.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter15.deserializeObjectConverter1();
        java.lang.String str18 = serializedObjectSupporter15.deserializeObjectString4();
        java.lang.String str19 = serializedObjectSupporter15.deserializeObjectString4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter15;
        retrofit.ErrorHandler errorHandler21 = restAdapter10.geterrorHandler();
        retrofit.Profiler profiler22 = restAdapter10.profiler;
        retrofit.converter.Converter converter23 = restAdapter10.converter;
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter10.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request26 = serializedObjectSupporter25.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter27 = serializedObjectSupporter25.deserializeObjectConverter1();
        java.lang.String str28 = serializedObjectSupporter25.deserializeObjectString4();
        java.lang.String str29 = serializedObjectSupporter25.deserializeObjectString1();
        retrofit.client.Request request30 = serializedObjectSupporter25.deserializeObjectRequest2();
        retrofit.Server server31 = serializedObjectSupporter25.deserializeObjectServer1();
        restHandler24.serializedObjectSupporter = serializedObjectSupporter25;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter33 = serializedObjectSupporter25.deserializeObjectLogLevel3();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(converter23);
        org.junit.Assert.assertNotNull(request26);
        org.junit.Assert.assertNotNull(gsonConverter27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "http://example.com/" + "'", str28, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Retrofit-" + "'", str29, "Retrofit-");
        org.junit.Assert.assertNotNull(request30);
        org.junit.Assert.assertNotNull(server31);
    }

    @Test
    public void test1414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1414");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        java.util.concurrent.Executor executor2 = null;
        builder0.httpExecutor = executor2;
        java.util.concurrent.Executor executor4 = null;
        builder0.callbackExecutor = executor4;
        java.util.concurrent.Executor executor6 = null;
        builder0.callbackExecutor = executor6;
        builder0.ensureSaneDefaults();
        retrofit.client.Client.Provider provider9 = builder0.clientProvider;
        retrofit.Profiler profiler10 = builder0.profiler;
        java.util.concurrent.Executor executor11 = null;
        builder0.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder14 = builder0.setServer("http://example.com");
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request16 = serializedObjectSupporter15.deserializeObjectRequest6();
        java.lang.String str17 = serializedObjectSupporter15.deserializeObjectString4();
        java.lang.String str18 = serializedObjectSupporter15.deserializeObjectString5();
        retrofit.ErrorHandler errorHandler19 = serializedObjectSupporter15.deserializeObjectErrorHandler1();
        retrofit.client.Request request20 = serializedObjectSupporter15.deserializeObjectRequest3();
        retrofit.Server server21 = serializedObjectSupporter15.deserializeObjectServer1();
        builder14.serializedObjectSupporter = serializedObjectSupporter15;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNotNull(provider9);
        org.junit.Assert.assertNull(profiler10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "http://example.com/" + "'", str17, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "POST" + "'", str18, "POST");
        org.junit.Assert.assertNotNull(errorHandler19);
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertNotNull(server21);
    }

    @Test
    public void test1415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1415");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        java.lang.String str2 = serializedObjectSupporter1.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter1.deserializeObjectConverter3();
        builder0.serializedObjectSupporter = serializedObjectSupporter1;
        java.util.concurrent.Executor executor5 = null;
        builder0.callbackExecutor = executor5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.Server server8 = builder7.server;
        retrofit.converter.Converter converter9 = null;
        builder7.converter = converter9;
        retrofit.RestAdapter.Log log11 = builder7.log;
        retrofit.RestAdapter.LogLevel logLevel12 = builder7.logLevel;
        java.util.concurrent.Executor executor13 = null;
        builder7.sethttpExecutor(executor13);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider16 = null;
        builder15.setclientProvider(provider16);
        retrofit.Server server19 = new retrofit.Server("Retrofit-");
        java.lang.String str20 = server19.name;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.Server server30 = builder29.server;
        java.util.concurrent.Executor executor31 = null;
        builder29.httpExecutor = executor31;
        java.util.concurrent.Executor executor33 = builder29.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.FULL;
        builder29.logLevel = logLevel34;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter(server19, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log28, logLevel34);
        retrofit.RestAdapter.Builder builder37 = builder15.setLog(log28);
        retrofit.RestAdapter.Builder builder38 = builder7.setLog(log28);
        log28.log("hi!");
        retrofit.RestAdapter.Builder builder41 = builder0.setLog(log28);
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.Server server43 = builder42.server;
        java.util.concurrent.Executor executor44 = null;
        builder42.httpExecutor = executor44;
        java.util.concurrent.Executor executor46 = null;
        builder42.callbackExecutor = executor46;
        java.util.concurrent.Executor executor48 = null;
        builder42.callbackExecutor = executor48;
        builder42.ensureSaneDefaults();
        retrofit.RestAdapter.LogLevel logLevel51 = builder42.logLevel;
        builder0.logLevel = logLevel51;
        java.util.concurrent.Executor executor53 = builder0.getcallbackExecutor();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Retrofit-Idle" + "'", str2, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNull(server8);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "default" + "'", str20, "default");
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(server43);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor53);
    }

    @Test
    public void test1416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1416");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString2();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString5();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest7();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Retrofit-Idle" + "'", str1, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "POST" + "'", str3, "POST");
        org.junit.Assert.assertNotNull(request4);
    }

    @Test
    public void test1417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1417");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString2();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString5();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter0.deserializeObjectConverter3();
        retrofit.client.Request request7 = serializedObjectSupporter0.deserializeObjectRequest5();
        retrofit.client.Request request8 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.client.Request request10 = serializedObjectSupporter0.deserializeObjectRequest5();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Retrofit-Idle" + "'", str1, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "POST" + "'", str3, "POST");
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(gsonConverter6);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(request8);
        org.junit.Assert.assertNotNull(gsonConverter9);
        org.junit.Assert.assertNotNull(request10);
    }

    @Test
    public void test1418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1418");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest5();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest5();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest3();
        retrofit.client.Request request6 = serializedObjectSupporter0.deserializeObjectRequest4();
        retrofit.client.Request request7 = serializedObjectSupporter0.deserializeObjectRequest2();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(request6);
        org.junit.Assert.assertNotNull(request7);
    }

    @Test
    public void test1419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1419");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request16 = serializedObjectSupporter15.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter15.deserializeObjectConverter1();
        java.lang.String str18 = serializedObjectSupporter15.deserializeObjectString4();
        java.lang.String str19 = serializedObjectSupporter15.deserializeObjectString4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter15;
        retrofit.ErrorHandler errorHandler21 = restAdapter10.geterrorHandler();
        java.lang.Throwable throwable22 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter10.logException(throwable22, "Retrofit-Idle");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertNull(errorHandler21);
    }

    @Test
    public void test1420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1420");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.converter.Converter converter2 = null;
        builder0.converter = converter2;
        retrofit.ErrorHandler errorHandler4 = builder0.errorHandler;
        retrofit.Server server6 = new retrofit.Server("Retrofit-");
        java.lang.String str7 = server6.name;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.Server server17 = builder16.server;
        java.util.concurrent.Executor executor18 = null;
        builder16.httpExecutor = executor18;
        java.util.concurrent.Executor executor20 = builder16.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.FULL;
        builder16.logLevel = logLevel21;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server6, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel21);
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter23.getLogLevel();
        retrofit.RestAdapter.Builder builder25 = builder0.setLogLevel(logLevel24);
        retrofit.Server server27 = new retrofit.Server("Retrofit-");
        java.lang.String str28 = server27.name;
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.Server server38 = builder37.server;
        java.util.concurrent.Executor executor39 = null;
        builder37.httpExecutor = executor39;
        java.util.concurrent.Executor executor41 = builder37.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.FULL;
        builder37.logLevel = logLevel42;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter(server27, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log36, logLevel42);
        retrofit.RestAdapter.LogLevel logLevel45 = restAdapter44.getLogLevel();
        builder0.logLevel = logLevel45;
        retrofit.SerializedObjectSupporter serializedObjectSupporter47 = builder0.serializedObjectSupporter;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(errorHandler4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "default" + "'", str7, "default");
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNull(server17);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "default" + "'", str28, "default");
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertNull(server38);
        org.junit.Assert.assertNull(executor41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(serializedObjectSupporter47);
    }

    @Test
    public void test1421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1421");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel14 = null;
        restAdapter10.logLevel = logLevel14;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter10.logLevel = logLevel16;
        retrofit.client.Client.Provider provider18 = restAdapter10.clientProvider;
        retrofit.client.Client.Provider provider19 = restAdapter10.getclientProvider();
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Log log28 = null;
        retrofit.RestAdapter.LogLevel logLevel29 = null;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log28, logLevel29);
        retrofit.RestAdapter.RestHandler restHandler31 = restAdapter30.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler32 = restAdapter30.new RestHandler();
        java.util.concurrent.Executor executor33 = restAdapter30.getcallbackExecutor();
        retrofit.RestAdapter.RestHandler restHandler34 = restAdapter30.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter30.logLevel = logLevel35;
        restAdapter10.setLogLevel(logLevel35);
        java.util.concurrent.Executor executor38 = restAdapter10.getcallbackExecutor();
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(provider18);
        org.junit.Assert.assertNull(provider19);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor38);
    }

    @Test
    public void test1422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1422");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter10.new RestHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter10.new RestHandler();
        int int15 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter10.new RestHandler();
        java.util.concurrent.Executor executor17 = restAdapter10.callbackExecutor;
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4000 + "'", int15 == 4000);
        org.junit.Assert.assertNull(executor17);
    }

    @Test
    public void test1423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1423");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request16 = serializedObjectSupporter15.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter15.deserializeObjectConverter1();
        java.lang.String str18 = serializedObjectSupporter15.deserializeObjectString4();
        java.lang.String str19 = serializedObjectSupporter15.deserializeObjectString4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter15;
        retrofit.client.Request request21 = serializedObjectSupporter15.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter15.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter23 = serializedObjectSupporter15.deserializeObjectConverter6();
        retrofit.converter.GsonConverter gsonConverter24 = serializedObjectSupporter15.deserializeObjectConverter6();
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertNotNull(request21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(gsonConverter23);
        org.junit.Assert.assertNotNull(gsonConverter24);
    }

    @Test
    public void test1424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1424");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString2();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString5();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter0.deserializeObjectConverter3();
        retrofit.client.Request request7 = serializedObjectSupporter0.deserializeObjectRequest5();
        retrofit.client.Request request8 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.client.Request request9 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.client.Request request10 = serializedObjectSupporter0.deserializeObjectRequest8();
        retrofit.client.Request request11 = serializedObjectSupporter0.deserializeObjectRequest6();
        java.lang.String str12 = serializedObjectSupporter0.deserializeObjectString3();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Retrofit-Idle" + "'", str1, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "POST" + "'", str3, "POST");
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(gsonConverter6);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(request8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNotNull(request10);
        org.junit.Assert.assertNotNull(request11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "GET" + "'", str12, "GET");
    }

    @Test
    public void test1425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1425");
        retrofit.Server server1 = new retrofit.Server("Retrofit-");
        java.lang.String str2 = server1.name;
        java.lang.String str3 = server1.apiUrl;
        java.lang.String str4 = server1.getName();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "default" + "'", str2, "default");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Retrofit-" + "'", str3, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "default" + "'", str4, "default");
    }

    @Test
    public void test1426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1426");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request12 = serializedObjectSupporter11.deserializeObjectRequest6();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter11;
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter11.deserializeObjectConverter7();
        java.lang.String str15 = serializedObjectSupporter11.deserializeObjectString1();
        retrofit.client.Request request16 = serializedObjectSupporter11.deserializeObjectRequest6();
        retrofit.Server server17 = serializedObjectSupporter11.deserializeObjectServer1();
        retrofit.converter.GsonConverter gsonConverter18 = serializedObjectSupporter11.deserializeObjectConverter4();
        java.lang.Class<?> wildcardClass19 = gsonConverter18.getClass();
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Retrofit-" + "'", str15, "Retrofit-");
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(server17);
        org.junit.Assert.assertNotNull(gsonConverter18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1427");
        retrofit.Server server1 = new retrofit.Server("Retrofit-");
        java.lang.String str2 = server1.name;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.Server server12 = builder11.server;
        java.util.concurrent.Executor executor13 = null;
        builder11.httpExecutor = executor13;
        java.util.concurrent.Executor executor15 = builder11.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.FULL;
        builder11.logLevel = logLevel16;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter(server1, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log10, logLevel16);
        java.util.concurrent.Executor executor19 = restAdapter18.getcallbackExecutor();
        retrofit.converter.Converter converter20 = restAdapter18.getconverter();
        retrofit.RestAdapter.LogLevel logLevel21 = null;
        restAdapter18.setLogLevel(logLevel21);
        retrofit.RestAdapter.RestHandler restHandler23 = restAdapter18.new RestHandler();
        retrofit.Server server24 = null;
        retrofit.client.Client.Provider provider25 = null;
        java.util.concurrent.Executor executor26 = null;
        java.util.concurrent.Executor executor27 = null;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        retrofit.converter.Converter converter29 = null;
        retrofit.Profiler profiler30 = null;
        retrofit.ErrorHandler errorHandler31 = null;
        retrofit.RestAdapter.Log log32 = null;
        retrofit.RestAdapter.LogLevel logLevel33 = null;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server24, provider25, executor26, executor27, requestInterceptor28, converter29, profiler30, errorHandler31, log32, logLevel33);
        retrofit.SerializedObjectSupporter serializedObjectSupporter35 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request36 = serializedObjectSupporter35.deserializeObjectRequest6();
        restAdapter34.serializedObjectSupporter = serializedObjectSupporter35;
        retrofit.converter.GsonConverter gsonConverter38 = serializedObjectSupporter35.deserializeObjectConverter7();
        retrofit.Server server39 = serializedObjectSupporter35.deserializeObjectServer1();
        java.lang.String str40 = serializedObjectSupporter35.deserializeObjectString4();
        restHandler23.serializedObjectSupporter = serializedObjectSupporter35;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter42 = serializedObjectSupporter35.deserializeObjectLogLevel3();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "default" + "'", str2, "default");
        org.junit.Assert.assertNotNull(log10);
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(converter20);
        org.junit.Assert.assertNotNull(request36);
        org.junit.Assert.assertNotNull(gsonConverter38);
        org.junit.Assert.assertNotNull(server39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "http://example.com/" + "'", str40, "http://example.com/");
    }

    @Test
    public void test1428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1428");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request12 = serializedObjectSupporter11.deserializeObjectRequest6();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter11;
        retrofit.ErrorHandler errorHandler14 = restAdapter10.geterrorHandler();
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        java.lang.String str19 = serializedObjectSupporter18.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter18.deserializeObjectConverter3();
        builder17.serializedObjectSupporter = serializedObjectSupporter18;
        java.util.concurrent.Executor executor22 = null;
        builder17.callbackExecutor = executor22;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = builder17.serializedObjectSupporter;
        java.lang.String str25 = serializedObjectSupporter24.deserializeObjectString1();
        retrofit.converter.GsonConverter gsonConverter26 = serializedObjectSupporter24.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter27 = serializedObjectSupporter24.deserializeObjectConverter6();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter24;
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Retrofit-Idle" + "'", str19, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNotNull(serializedObjectSupporter24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Retrofit-" + "'", str25, "Retrofit-");
        org.junit.Assert.assertNotNull(gsonConverter26);
        org.junit.Assert.assertNotNull(gsonConverter27);
    }

    @Test
    public void test1429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1429");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor2 = null;
        builder0.requestInterceptor = requestInterceptor2;
        java.util.concurrent.Executor executor4 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("default");
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = null;
        retrofit.RestAdapter.LogLevel logLevel16 = null;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel16);
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request19 = serializedObjectSupporter18.deserializeObjectRequest6();
        restAdapter17.serializedObjectSupporter = serializedObjectSupporter18;
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.ErrorHandler errorHandler22 = serializedObjectSupporter18.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder23 = builder6.setErrorHandler(errorHandler22);
        retrofit.RestAdapter.LogLevel logLevel24 = builder6.logLevel;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(request19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(errorHandler22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test1430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1430");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request16 = serializedObjectSupporter15.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter15.deserializeObjectConverter1();
        java.lang.String str18 = serializedObjectSupporter15.deserializeObjectString4();
        java.lang.String str19 = serializedObjectSupporter15.deserializeObjectString4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter15;
        java.util.concurrent.Executor executor21 = restAdapter10.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor22 = restAdapter10.requestInterceptor;
        retrofit.Server server23 = restAdapter10.getserver();
        retrofit.RequestInterceptor requestInterceptor24 = restAdapter10.requestInterceptor;
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNull(server23);
        org.junit.Assert.assertNull(requestInterceptor24);
    }

    @Test
    public void test1431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1431");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.Server server2 = builder0.server;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider4 = null;
        builder3.setclientProvider(provider4);
        retrofit.Server server7 = new retrofit.Server("Retrofit-");
        java.lang.String str8 = server7.name;
        retrofit.client.Client.Provider provider9 = null;
        java.util.concurrent.Executor executor10 = null;
        java.util.concurrent.Executor executor11 = null;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        retrofit.converter.Converter converter13 = null;
        retrofit.Profiler profiler14 = null;
        retrofit.ErrorHandler errorHandler15 = null;
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.Server server18 = builder17.server;
        java.util.concurrent.Executor executor19 = null;
        builder17.httpExecutor = executor19;
        java.util.concurrent.Executor executor21 = builder17.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.FULL;
        builder17.logLevel = logLevel22;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server7, provider9, executor10, executor11, requestInterceptor12, converter13, profiler14, errorHandler15, log16, logLevel22);
        retrofit.RestAdapter.Builder builder25 = builder3.setLog(log16);
        retrofit.RestAdapter.Builder builder26 = builder0.setLog(log16);
        java.util.concurrent.Executor executor27 = builder26.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.Server server29 = builder28.server;
        java.util.concurrent.Executor executor30 = null;
        builder28.httpExecutor = executor30;
        java.util.concurrent.Executor executor32 = null;
        builder28.callbackExecutor = executor32;
        java.util.concurrent.Executor executor34 = null;
        builder28.callbackExecutor = executor34;
        builder28.ensureSaneDefaults();
        retrofit.client.Client.Provider provider37 = builder28.clientProvider;
        retrofit.RestAdapter.Builder builder38 = builder26.setClient(provider37);
        java.util.concurrent.Executor executor39 = builder26.getcallbackExecutor();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "default" + "'", str8, "default");
        org.junit.Assert.assertNotNull(log16);
        org.junit.Assert.assertNull(server18);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(server29);
        org.junit.Assert.assertNotNull(provider37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(executor39);
    }

    @Test
    public void test1432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1432");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter10.new RestHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        retrofit.converter.Converter converter14 = restAdapter10.converter;
        java.util.concurrent.Executor executor15 = restAdapter10.getcallbackExecutor();
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(executor15);
    }

    @Test
    public void test1433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1433");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter10.new RestHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter10.logLevel = logLevel15;
        java.lang.String str17 = restAdapter10.getIDLE_THREAD_NAME();
        java.util.concurrent.Executor executor18 = restAdapter10.httpExecutor;
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-Idle" + "'", str17, "Retrofit-Idle");
        org.junit.Assert.assertNull(executor18);
    }

    @Test
    public void test1434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1434");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        java.lang.String str17 = serializedObjectSupporter16.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter18 = serializedObjectSupporter16.deserializeObjectConverter3();
        builder15.serializedObjectSupporter = serializedObjectSupporter16;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter16;
        retrofit.RestAdapter.Log log21 = restAdapter10.log;
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-Idle" + "'", str17, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter18);
        org.junit.Assert.assertNull(log21);
    }

    @Test
    public void test1435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1435");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        java.util.concurrent.Executor executor2 = null;
        builder0.httpExecutor = executor2;
        java.util.concurrent.Executor executor4 = builder0.httpExecutor;
        retrofit.Server server7 = new retrofit.Server("Retrofit-", "");
        java.lang.String str8 = server7.getUrl();
        builder0.server = server7;
        java.util.concurrent.Executor executor10 = builder0.getcallbackExecutor();
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Log log19 = null;
        retrofit.RestAdapter.LogLevel logLevel20 = null;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log19, logLevel20);
        retrofit.SerializedObjectSupporter serializedObjectSupporter22 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request23 = serializedObjectSupporter22.deserializeObjectRequest6();
        restAdapter21.serializedObjectSupporter = serializedObjectSupporter22;
        java.lang.String str25 = serializedObjectSupporter22.deserializeObjectString4();
        retrofit.Server server26 = serializedObjectSupporter22.deserializeObjectServer1();
        java.lang.String str27 = server26.getapiUrl();
        retrofit.RestAdapter.Builder builder28 = builder0.setServer(server26);
        java.util.concurrent.Executor executor29 = builder0.gethttpExecutor();
        java.util.concurrent.Executor executor30 = builder0.httpExecutor;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Retrofit-" + "'", str8, "Retrofit-");
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "http://example.com/" + "'", str25, "http://example.com/");
        org.junit.Assert.assertNotNull(server26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "http://example.com" + "'", str27, "http://example.com");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(executor30);
    }

    @Test
    public void test1436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1436");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter10.new RestHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.httpExecutor;
        java.util.concurrent.Executor executor14 = restAdapter10.getcallbackExecutor();
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(executor14);
    }

    @Test
    public void test1437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1437");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest8();
        java.util.List<retrofit.client.Header> headerList6 = request5.headers;
        java.util.List<retrofit.client.Header> headerList7 = request5.headers;
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(headerList6);
        org.junit.Assert.assertNotNull(headerList7);
    }

    @Test
    public void test1438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1438");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        java.util.concurrent.Executor executor3 = null;
        builder0.setcallbackExecutor(executor3);
        builder0.ensureSaneDefaults();
        java.util.concurrent.Executor executor6 = builder0.gethttpExecutor();
        java.util.concurrent.Executor executor7 = builder0.gethttpExecutor();
        retrofit.Server server8 = null;
        retrofit.client.Client.Provider provider9 = null;
        java.util.concurrent.Executor executor10 = null;
        java.util.concurrent.Executor executor11 = null;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        retrofit.converter.Converter converter13 = null;
        retrofit.Profiler profiler14 = null;
        retrofit.ErrorHandler errorHandler15 = null;
        retrofit.RestAdapter.Log log16 = null;
        retrofit.RestAdapter.LogLevel logLevel17 = null;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter(server8, provider9, executor10, executor11, requestInterceptor12, converter13, profiler14, errorHandler15, log16, logLevel17);
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter18.new RestHandler();
        retrofit.Server server20 = restAdapter18.server;
        retrofit.RestAdapter.LogLevel logLevel21 = restAdapter18.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel22 = null;
        restAdapter18.logLevel = logLevel22;
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter18.logLevel = logLevel24;
        retrofit.Profiler profiler26 = restAdapter18.profiler;
        retrofit.RestAdapter.LogLevel logLevel27 = restAdapter18.getLogLevel();
        retrofit.RestAdapter.Builder builder28 = builder0.setLogLevel(logLevel27);
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNotNull(executor6);
        org.junit.Assert.assertNotNull(executor7);
        org.junit.Assert.assertNull(server20);
        org.junit.Assert.assertNull(logLevel21);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test1439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1439");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request12 = serializedObjectSupporter11.deserializeObjectRequest6();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter11;
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter11.deserializeObjectConverter7();
        retrofit.Server server15 = serializedObjectSupporter11.deserializeObjectServer1();
        java.lang.String str16 = serializedObjectSupporter11.deserializeObjectString4();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter11.deserializeObjectConverter5();
        retrofit.client.Request request18 = serializedObjectSupporter11.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter11.deserializeObjectConverter5();
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(server15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "http://example.com/" + "'", str16, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertNotNull(request18);
        org.junit.Assert.assertNotNull(gsonConverter19);
    }

    @Test
    public void test1440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1440");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        java.util.concurrent.Executor executor2 = null;
        builder0.httpExecutor = executor2;
        java.util.concurrent.Executor executor4 = builder0.httpExecutor;
        retrofit.ErrorHandler errorHandler5 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = builder6.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor8 = null;
        builder6.requestInterceptor = requestInterceptor8;
        java.util.concurrent.Executor executor10 = builder6.callbackExecutor;
        retrofit.RestAdapter.Builder builder12 = builder6.setServer("default");
        java.util.concurrent.Executor executor13 = null;
        builder12.setcallbackExecutor(executor13);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        java.lang.String str17 = serializedObjectSupporter16.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter18 = serializedObjectSupporter16.deserializeObjectConverter3();
        builder15.serializedObjectSupporter = serializedObjectSupporter16;
        retrofit.RestAdapter.Log log20 = builder15.log;
        retrofit.RestAdapter.Builder builder22 = builder15.setServer("http://example.com/");
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor24 = builder23.getcallbackExecutor();
        retrofit.Server server25 = builder23.server;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider27 = null;
        builder26.setclientProvider(provider27);
        retrofit.Server server30 = new retrofit.Server("Retrofit-");
        java.lang.String str31 = server30.name;
        retrofit.client.Client.Provider provider32 = null;
        java.util.concurrent.Executor executor33 = null;
        java.util.concurrent.Executor executor34 = null;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        retrofit.converter.Converter converter36 = null;
        retrofit.Profiler profiler37 = null;
        retrofit.ErrorHandler errorHandler38 = null;
        retrofit.RestAdapter.Log log39 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.Server server41 = builder40.server;
        java.util.concurrent.Executor executor42 = null;
        builder40.httpExecutor = executor42;
        java.util.concurrent.Executor executor44 = builder40.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.FULL;
        builder40.logLevel = logLevel45;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter(server30, provider32, executor33, executor34, requestInterceptor35, converter36, profiler37, errorHandler38, log39, logLevel45);
        retrofit.RestAdapter.Builder builder48 = builder26.setLog(log39);
        retrofit.RestAdapter.Builder builder49 = builder23.setLog(log39);
        retrofit.Server server50 = null;
        retrofit.client.Client.Provider provider51 = null;
        java.util.concurrent.Executor executor52 = null;
        java.util.concurrent.Executor executor53 = null;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        retrofit.converter.Converter converter55 = null;
        retrofit.Profiler profiler56 = null;
        retrofit.ErrorHandler errorHandler57 = null;
        retrofit.RestAdapter.Log log58 = null;
        retrofit.RestAdapter.LogLevel logLevel59 = null;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter(server50, provider51, executor52, executor53, requestInterceptor54, converter55, profiler56, errorHandler57, log58, logLevel59);
        retrofit.SerializedObjectSupporter serializedObjectSupporter61 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request62 = serializedObjectSupporter61.deserializeObjectRequest6();
        restAdapter60.serializedObjectSupporter = serializedObjectSupporter61;
        retrofit.converter.GsonConverter gsonConverter64 = serializedObjectSupporter61.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter65 = serializedObjectSupporter61.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter66 = serializedObjectSupporter61.deserializeObjectConverter1();
        retrofit.client.Request request67 = serializedObjectSupporter61.deserializeObjectRequest5();
        retrofit.RequestInterceptor requestInterceptor68 = serializedObjectSupporter61.deserializeObjectRequestInterceptor1();
        builder49.requestInterceptor = requestInterceptor68;
        retrofit.RestAdapter.Builder builder70 = builder22.setRequestInterceptor(requestInterceptor68);
        retrofit.RestAdapter.LogLevel logLevel71 = builder70.logLevel;
        retrofit.Server server72 = null;
        retrofit.client.Client.Provider provider73 = null;
        java.util.concurrent.Executor executor74 = null;
        java.util.concurrent.Executor executor75 = null;
        retrofit.RequestInterceptor requestInterceptor76 = null;
        retrofit.converter.Converter converter77 = null;
        retrofit.Profiler profiler78 = null;
        retrofit.ErrorHandler errorHandler79 = null;
        retrofit.RestAdapter.Log log80 = null;
        retrofit.RestAdapter.LogLevel logLevel81 = null;
        retrofit.RestAdapter restAdapter82 = new retrofit.RestAdapter(server72, provider73, executor74, executor75, requestInterceptor76, converter77, profiler78, errorHandler79, log80, logLevel81);
        retrofit.SerializedObjectSupporter serializedObjectSupporter83 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request84 = serializedObjectSupporter83.deserializeObjectRequest6();
        restAdapter82.serializedObjectSupporter = serializedObjectSupporter83;
        retrofit.converter.GsonConverter gsonConverter86 = serializedObjectSupporter83.deserializeObjectConverter7();
        retrofit.Server server87 = serializedObjectSupporter83.deserializeObjectServer1();
        retrofit.converter.GsonConverter gsonConverter88 = serializedObjectSupporter83.deserializeObjectConverter5();
        retrofit.Server server89 = serializedObjectSupporter83.deserializeObjectServer1();
        builder70.server = server89;
        retrofit.RestAdapter restAdapter91 = builder70.build();
        retrofit.client.Client.Provider provider92 = restAdapter91.clientProvider;
        retrofit.RestAdapter.Builder builder93 = builder12.setClient(provider92);
        retrofit.RestAdapter.Builder builder94 = builder0.setClient(provider92);
        retrofit.SerializedObjectSupporter serializedObjectSupporter95 = builder94.serializedObjectSupporter;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler5);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-Idle" + "'", str17, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter18);
        org.junit.Assert.assertNull(log20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(server25);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "default" + "'", str31, "default");
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertNull(server41);
        org.junit.Assert.assertNull(executor44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(request62);
        org.junit.Assert.assertNotNull(gsonConverter64);
        org.junit.Assert.assertNotNull(gsonConverter65);
        org.junit.Assert.assertNotNull(gsonConverter66);
        org.junit.Assert.assertNotNull(request67);
        org.junit.Assert.assertNotNull(requestInterceptor68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(request84);
        org.junit.Assert.assertNotNull(gsonConverter86);
        org.junit.Assert.assertNotNull(server87);
        org.junit.Assert.assertNotNull(gsonConverter88);
        org.junit.Assert.assertNotNull(server89);
        org.junit.Assert.assertNotNull(restAdapter91);
        org.junit.Assert.assertNotNull(provider92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNull(serializedObjectSupporter95);
    }

    @Test
    public void test1441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1441");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter10.new RestHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter10.new RestHandler();
        int int15 = restAdapter10.getLOG_CHUNK_SIZE();
        java.util.concurrent.Executor executor16 = restAdapter10.getcallbackExecutor();
        retrofit.Profiler profiler17 = restAdapter10.profiler;
        retrofit.Server server18 = null;
        retrofit.client.Client.Provider provider19 = null;
        java.util.concurrent.Executor executor20 = null;
        java.util.concurrent.Executor executor21 = null;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        retrofit.converter.Converter converter23 = null;
        retrofit.Profiler profiler24 = null;
        retrofit.ErrorHandler errorHandler25 = null;
        retrofit.RestAdapter.Log log26 = null;
        retrofit.RestAdapter.LogLevel logLevel27 = null;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server18, provider19, executor20, executor21, requestInterceptor22, converter23, profiler24, errorHandler25, log26, logLevel27);
        retrofit.RestAdapter.RestHandler restHandler29 = restAdapter28.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler30 = restAdapter28.new RestHandler();
        java.util.concurrent.Executor executor31 = restAdapter28.getcallbackExecutor();
        retrofit.RestAdapter.RestHandler restHandler32 = restAdapter28.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler33 = restAdapter28.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor34 = restAdapter28.getrequestInterceptor();
        java.util.concurrent.Executor executor35 = restAdapter28.getcallbackExecutor();
        retrofit.converter.Converter converter36 = restAdapter28.getconverter();
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.Server server38 = builder37.server;
        retrofit.converter.Converter converter39 = null;
        builder37.converter = converter39;
        retrofit.ErrorHandler errorHandler41 = builder37.errorHandler;
        retrofit.Server server43 = new retrofit.Server("Retrofit-");
        java.lang.String str44 = server43.name;
        retrofit.client.Client.Provider provider45 = null;
        java.util.concurrent.Executor executor46 = null;
        java.util.concurrent.Executor executor47 = null;
        retrofit.RequestInterceptor requestInterceptor48 = null;
        retrofit.converter.Converter converter49 = null;
        retrofit.Profiler profiler50 = null;
        retrofit.ErrorHandler errorHandler51 = null;
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.Server server54 = builder53.server;
        java.util.concurrent.Executor executor55 = null;
        builder53.httpExecutor = executor55;
        java.util.concurrent.Executor executor57 = builder53.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.FULL;
        builder53.logLevel = logLevel58;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter(server43, provider45, executor46, executor47, requestInterceptor48, converter49, profiler50, errorHandler51, log52, logLevel58);
        retrofit.RestAdapter.LogLevel logLevel61 = restAdapter60.getLogLevel();
        retrofit.RestAdapter.Builder builder62 = builder37.setLogLevel(logLevel61);
        retrofit.Server server64 = new retrofit.Server("Retrofit-");
        java.lang.String str65 = server64.name;
        retrofit.client.Client.Provider provider66 = null;
        java.util.concurrent.Executor executor67 = null;
        java.util.concurrent.Executor executor68 = null;
        retrofit.RequestInterceptor requestInterceptor69 = null;
        retrofit.converter.Converter converter70 = null;
        retrofit.Profiler profiler71 = null;
        retrofit.ErrorHandler errorHandler72 = null;
        retrofit.RestAdapter.Log log73 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        retrofit.Server server75 = builder74.server;
        java.util.concurrent.Executor executor76 = null;
        builder74.httpExecutor = executor76;
        java.util.concurrent.Executor executor78 = builder74.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel79 = retrofit.RestAdapter.LogLevel.FULL;
        builder74.logLevel = logLevel79;
        retrofit.RestAdapter restAdapter81 = new retrofit.RestAdapter(server64, provider66, executor67, executor68, requestInterceptor69, converter70, profiler71, errorHandler72, log73, logLevel79);
        retrofit.RestAdapter.LogLevel logLevel82 = restAdapter81.getLogLevel();
        builder37.logLevel = logLevel82;
        restAdapter28.logLevel = logLevel82;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter10.setLogLevel(logLevel82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log level may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4000 + "'", int15 == 4000);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(profiler17);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNull(requestInterceptor34);
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertNull(converter36);
        org.junit.Assert.assertNull(server38);
        org.junit.Assert.assertNull(errorHandler41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "default" + "'", str44, "default");
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNull(server54);
        org.junit.Assert.assertNull(executor57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "default" + "'", str65, "default");
        org.junit.Assert.assertNotNull(log73);
        org.junit.Assert.assertNull(server75);
        org.junit.Assert.assertNull(executor78);
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.FULL));
    }

    @Test
    public void test1442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1442");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.Profiler profiler2 = builder0.profiler;
        retrofit.client.Client.Provider provider3 = null;
        builder0.setclientProvider(provider3);
        retrofit.RequestInterceptor requestInterceptor5 = builder0.requestInterceptor;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = builder7.getcallbackExecutor();
        retrofit.Server server9 = builder7.server;
        retrofit.client.Client.Provider provider10 = builder7.clientProvider;
        retrofit.Server server13 = new retrofit.Server("Retrofit-Idle", "Retrofit-");
        java.lang.String str14 = server13.getapiUrl();
        java.lang.String str15 = server13.getDEFAULT_NAME();
        retrofit.RestAdapter.Builder builder16 = builder7.setServer(server13);
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        java.lang.String str19 = serializedObjectSupporter18.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter18.deserializeObjectConverter3();
        builder17.serializedObjectSupporter = serializedObjectSupporter18;
        retrofit.RestAdapter.Log log22 = builder17.log;
        retrofit.RestAdapter.Builder builder24 = builder17.setServer("http://example.com/");
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = builder25.getcallbackExecutor();
        retrofit.Server server27 = builder25.server;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider29 = null;
        builder28.setclientProvider(provider29);
        retrofit.Server server32 = new retrofit.Server("Retrofit-");
        java.lang.String str33 = server32.name;
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.Server server43 = builder42.server;
        java.util.concurrent.Executor executor44 = null;
        builder42.httpExecutor = executor44;
        java.util.concurrent.Executor executor46 = builder42.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.FULL;
        builder42.logLevel = logLevel47;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server32, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log41, logLevel47);
        retrofit.RestAdapter.Builder builder50 = builder28.setLog(log41);
        retrofit.RestAdapter.Builder builder51 = builder25.setLog(log41);
        retrofit.Server server52 = null;
        retrofit.client.Client.Provider provider53 = null;
        java.util.concurrent.Executor executor54 = null;
        java.util.concurrent.Executor executor55 = null;
        retrofit.RequestInterceptor requestInterceptor56 = null;
        retrofit.converter.Converter converter57 = null;
        retrofit.Profiler profiler58 = null;
        retrofit.ErrorHandler errorHandler59 = null;
        retrofit.RestAdapter.Log log60 = null;
        retrofit.RestAdapter.LogLevel logLevel61 = null;
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter(server52, provider53, executor54, executor55, requestInterceptor56, converter57, profiler58, errorHandler59, log60, logLevel61);
        retrofit.SerializedObjectSupporter serializedObjectSupporter63 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request64 = serializedObjectSupporter63.deserializeObjectRequest6();
        restAdapter62.serializedObjectSupporter = serializedObjectSupporter63;
        retrofit.converter.GsonConverter gsonConverter66 = serializedObjectSupporter63.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter67 = serializedObjectSupporter63.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter68 = serializedObjectSupporter63.deserializeObjectConverter1();
        retrofit.client.Request request69 = serializedObjectSupporter63.deserializeObjectRequest5();
        retrofit.RequestInterceptor requestInterceptor70 = serializedObjectSupporter63.deserializeObjectRequestInterceptor1();
        builder51.requestInterceptor = requestInterceptor70;
        retrofit.RestAdapter.Builder builder72 = builder24.setRequestInterceptor(requestInterceptor70);
        retrofit.RestAdapter.LogLevel logLevel73 = builder72.logLevel;
        retrofit.Server server74 = null;
        retrofit.client.Client.Provider provider75 = null;
        java.util.concurrent.Executor executor76 = null;
        java.util.concurrent.Executor executor77 = null;
        retrofit.RequestInterceptor requestInterceptor78 = null;
        retrofit.converter.Converter converter79 = null;
        retrofit.Profiler profiler80 = null;
        retrofit.ErrorHandler errorHandler81 = null;
        retrofit.RestAdapter.Log log82 = null;
        retrofit.RestAdapter.LogLevel logLevel83 = null;
        retrofit.RestAdapter restAdapter84 = new retrofit.RestAdapter(server74, provider75, executor76, executor77, requestInterceptor78, converter79, profiler80, errorHandler81, log82, logLevel83);
        retrofit.SerializedObjectSupporter serializedObjectSupporter85 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request86 = serializedObjectSupporter85.deserializeObjectRequest6();
        restAdapter84.serializedObjectSupporter = serializedObjectSupporter85;
        retrofit.converter.GsonConverter gsonConverter88 = serializedObjectSupporter85.deserializeObjectConverter7();
        retrofit.Server server89 = serializedObjectSupporter85.deserializeObjectServer1();
        retrofit.converter.GsonConverter gsonConverter90 = serializedObjectSupporter85.deserializeObjectConverter5();
        retrofit.Server server91 = serializedObjectSupporter85.deserializeObjectServer1();
        builder72.server = server91;
        retrofit.RestAdapter restAdapter93 = builder72.build();
        java.util.concurrent.Executor executor94 = restAdapter93.httpExecutor;
        builder7.callbackExecutor = executor94;
        builder0.callbackExecutor = executor94;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(server9);
        org.junit.Assert.assertNull(provider10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Retrofit-Idle" + "'", str14, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "default" + "'", str15, "default");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Retrofit-Idle" + "'", str19, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNull(log22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(server27);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "default" + "'", str33, "default");
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertNull(server43);
        org.junit.Assert.assertNull(executor46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(request64);
        org.junit.Assert.assertNotNull(gsonConverter66);
        org.junit.Assert.assertNotNull(gsonConverter67);
        org.junit.Assert.assertNotNull(gsonConverter68);
        org.junit.Assert.assertNotNull(request69);
        org.junit.Assert.assertNotNull(requestInterceptor70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(request86);
        org.junit.Assert.assertNotNull(gsonConverter88);
        org.junit.Assert.assertNotNull(server89);
        org.junit.Assert.assertNotNull(gsonConverter90);
        org.junit.Assert.assertNotNull(server91);
        org.junit.Assert.assertNotNull(restAdapter93);
        org.junit.Assert.assertNotNull(executor94);
    }

    @Test
    public void test1443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1443");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor2 = null;
        builder0.requestInterceptor = requestInterceptor2;
        java.util.concurrent.Executor executor4 = builder0.callbackExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter5 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request6 = serializedObjectSupporter5.deserializeObjectRequest6();
        java.lang.String str7 = serializedObjectSupporter5.deserializeObjectString4();
        java.lang.String str8 = serializedObjectSupporter5.deserializeObjectString4();
        retrofit.ErrorHandler errorHandler9 = serializedObjectSupporter5.deserializeObjectErrorHandler1();
        retrofit.converter.GsonConverter gsonConverter10 = serializedObjectSupporter5.deserializeObjectConverter2();
        retrofit.Server server11 = serializedObjectSupporter5.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder12 = builder0.setServer(server11);
        retrofit.client.Client.Provider provider13 = builder0.getclientProvider();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNotNull(request6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "http://example.com/" + "'", str7, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://example.com/" + "'", str8, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler9);
        org.junit.Assert.assertNotNull(gsonConverter10);
        org.junit.Assert.assertNotNull(server11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(provider13);
    }

    @Test
    public void test1444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1444");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request16 = serializedObjectSupporter15.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter15.deserializeObjectConverter1();
        java.lang.String str18 = serializedObjectSupporter15.deserializeObjectString4();
        java.lang.String str19 = serializedObjectSupporter15.deserializeObjectString4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter15;
        retrofit.ErrorHandler errorHandler21 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor22 = restAdapter10.httpExecutor;
        int int23 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter10.new RestHandler();
        java.util.concurrent.Executor executor26 = restAdapter10.getcallbackExecutor();
        retrofit.Profiler profiler27 = restAdapter10.profiler;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = new retrofit.SerializedObjectSupporter();
        java.lang.String str30 = serializedObjectSupporter29.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter31 = serializedObjectSupporter29.deserializeObjectConverter3();
        builder28.serializedObjectSupporter = serializedObjectSupporter29;
        retrofit.mime.TypedString typedString33 = serializedObjectSupporter29.deserializeObjectTypedOutput2();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter29;
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4000 + "'", int23 == 4000);
        org.junit.Assert.assertNull(logLevel24);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(profiler27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Retrofit-Idle" + "'", str30, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter31);
        org.junit.Assert.assertNotNull(typedString33);
    }

    @Test
    public void test1445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1445");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel14 = null;
        restAdapter10.logLevel = logLevel14;
        retrofit.client.Client.Provider provider16 = restAdapter10.getclientProvider();
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter10.new RestHandler();
        retrofit.converter.Converter converter18 = restAdapter10.getconverter();
        retrofit.Server server19 = restAdapter10.getserver();
        retrofit.converter.Converter converter20 = restAdapter10.converter;
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(provider16);
        org.junit.Assert.assertNull(converter18);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertNull(converter20);
    }

    @Test
    public void test1446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1446");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter10.new RestHandler();
        retrofit.converter.Converter converter13 = restAdapter10.converter;
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter10.getLogLevel();
        java.util.concurrent.Executor executor15 = restAdapter10.httpExecutor;
        retrofit.Profiler profiler16 = restAdapter10.getprofiler();
        retrofit.client.Client.Provider provider17 = restAdapter10.getclientProvider();
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertNull(logLevel14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(profiler16);
        org.junit.Assert.assertNull(provider17);
    }

    @Test
    public void test1447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1447");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.converter.Converter converter2 = null;
        builder0.converter = converter2;
        retrofit.RestAdapter.Log log4 = builder0.log;
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        retrofit.Profiler profiler6 = builder0.profiler;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.Server server8 = builder7.server;
        retrofit.converter.Converter converter9 = null;
        builder7.converter = converter9;
        retrofit.RestAdapter.Log log11 = builder7.log;
        retrofit.client.Client.Provider provider12 = null;
        builder7.clientProvider = provider12;
        retrofit.Server server14 = builder7.server;
        java.util.concurrent.Executor executor15 = builder7.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor17 = builder16.getcallbackExecutor();
        retrofit.ErrorHandler errorHandler18 = builder16.errorHandler;
        java.util.concurrent.Executor executor19 = null;
        builder16.setcallbackExecutor(executor19);
        builder16.ensureSaneDefaults();
        java.util.concurrent.Executor executor22 = builder16.gethttpExecutor();
        java.util.concurrent.Executor executor23 = builder16.gethttpExecutor();
        builder7.setcallbackExecutor(executor23);
        builder0.httpExecutor = executor23;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler6);
        org.junit.Assert.assertNull(server8);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertNull(server14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(errorHandler18);
        org.junit.Assert.assertNotNull(executor22);
        org.junit.Assert.assertNotNull(executor23);
    }

    @Test
    public void test1448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1448");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        java.lang.String str2 = serializedObjectSupporter1.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter1.deserializeObjectConverter3();
        builder0.serializedObjectSupporter = serializedObjectSupporter1;
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.RestAdapter.Builder builder7 = builder0.setServer("http://example.com/");
        retrofit.RestAdapter.Builder builder9 = builder7.setServer("http://example.com");
        retrofit.ErrorHandler errorHandler10 = builder9.errorHandler;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Retrofit-Idle" + "'", str2, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(errorHandler10);
    }

    @Test
    public void test1449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1449");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        java.util.concurrent.Executor executor2 = null;
        builder0.httpExecutor = executor2;
        java.util.concurrent.Executor executor4 = null;
        builder0.callbackExecutor = executor4;
        java.util.concurrent.Executor executor6 = null;
        builder0.callbackExecutor = executor6;
        builder0.ensureSaneDefaults();
        retrofit.client.Client.Provider provider9 = builder0.clientProvider;
        retrofit.Profiler profiler10 = builder0.profiler;
        java.util.concurrent.Executor executor11 = null;
        builder0.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder14 = builder0.setServer("Retrofit-");
        retrofit.Server server17 = new retrofit.Server("", "GET");
        retrofit.RestAdapter.Builder builder18 = builder14.setServer(server17);
        retrofit.SerializedObjectSupporter serializedObjectSupporter19 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request20 = serializedObjectSupporter19.deserializeObjectRequest6();
        java.lang.String str21 = serializedObjectSupporter19.deserializeObjectString4();
        java.lang.String str22 = serializedObjectSupporter19.deserializeObjectString5();
        retrofit.ErrorHandler errorHandler23 = serializedObjectSupporter19.deserializeObjectErrorHandler1();
        retrofit.client.Request request24 = serializedObjectSupporter19.deserializeObjectRequest3();
        retrofit.client.Request request25 = serializedObjectSupporter19.deserializeObjectRequest2();
        retrofit.client.Request request26 = serializedObjectSupporter19.deserializeObjectRequest7();
        retrofit.ErrorHandler errorHandler27 = serializedObjectSupporter19.deserializeObjectErrorHandler1();
        builder14.errorHandler = errorHandler27;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNotNull(provider9);
        org.junit.Assert.assertNull(profiler10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "http://example.com/" + "'", str21, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "POST" + "'", str22, "POST");
        org.junit.Assert.assertNotNull(errorHandler23);
        org.junit.Assert.assertNotNull(request24);
        org.junit.Assert.assertNotNull(request25);
        org.junit.Assert.assertNotNull(request26);
        org.junit.Assert.assertNotNull(errorHandler27);
    }

    @Test
    public void test1450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1450");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        java.lang.String str2 = serializedObjectSupporter1.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter1.deserializeObjectConverter3();
        builder0.serializedObjectSupporter = serializedObjectSupporter1;
        java.util.concurrent.Executor executor5 = null;
        builder0.httpExecutor = executor5;
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = null;
        retrofit.RestAdapter.LogLevel logLevel16 = null;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel16);
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request19 = serializedObjectSupporter18.deserializeObjectRequest6();
        restAdapter17.serializedObjectSupporter = serializedObjectSupporter18;
        java.lang.String str21 = serializedObjectSupporter18.deserializeObjectString4();
        retrofit.Server server22 = serializedObjectSupporter18.deserializeObjectServer1();
        retrofit.client.Request request23 = serializedObjectSupporter18.deserializeObjectRequest1();
        retrofit.converter.GsonConverter gsonConverter24 = serializedObjectSupporter18.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter25 = serializedObjectSupporter18.deserializeObjectConverter3();
        builder0.converter = gsonConverter25;
        retrofit.SerializedObjectSupporter serializedObjectSupporter27 = builder0.serializedObjectSupporter;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor29 = builder28.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor30 = null;
        builder28.requestInterceptor = requestInterceptor30;
        java.util.concurrent.Executor executor32 = builder28.callbackExecutor;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = builder33.getcallbackExecutor();
        retrofit.ErrorHandler errorHandler35 = builder33.errorHandler;
        java.util.concurrent.Executor executor36 = null;
        builder33.setcallbackExecutor(executor36);
        builder33.ensureSaneDefaults();
        java.util.concurrent.Executor executor39 = builder33.getcallbackExecutor();
        builder28.callbackExecutor = executor39;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter42 = new retrofit.SerializedObjectSupporter();
        java.lang.String str43 = serializedObjectSupporter42.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter44 = serializedObjectSupporter42.deserializeObjectConverter3();
        builder41.serializedObjectSupporter = serializedObjectSupporter42;
        java.util.concurrent.Executor executor46 = null;
        builder41.httpExecutor = executor46;
        retrofit.Server server48 = null;
        retrofit.client.Client.Provider provider49 = null;
        java.util.concurrent.Executor executor50 = null;
        java.util.concurrent.Executor executor51 = null;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        retrofit.converter.Converter converter53 = null;
        retrofit.Profiler profiler54 = null;
        retrofit.ErrorHandler errorHandler55 = null;
        retrofit.RestAdapter.Log log56 = null;
        retrofit.RestAdapter.LogLevel logLevel57 = null;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter(server48, provider49, executor50, executor51, requestInterceptor52, converter53, profiler54, errorHandler55, log56, logLevel57);
        retrofit.SerializedObjectSupporter serializedObjectSupporter59 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request60 = serializedObjectSupporter59.deserializeObjectRequest6();
        restAdapter58.serializedObjectSupporter = serializedObjectSupporter59;
        java.lang.String str62 = serializedObjectSupporter59.deserializeObjectString4();
        retrofit.Server server63 = serializedObjectSupporter59.deserializeObjectServer1();
        retrofit.client.Request request64 = serializedObjectSupporter59.deserializeObjectRequest1();
        retrofit.converter.GsonConverter gsonConverter65 = serializedObjectSupporter59.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter66 = serializedObjectSupporter59.deserializeObjectConverter3();
        builder41.converter = gsonConverter66;
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor69 = builder68.getcallbackExecutor();
        retrofit.Server server70 = builder68.server;
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider72 = null;
        builder71.setclientProvider(provider72);
        retrofit.Server server75 = new retrofit.Server("Retrofit-");
        java.lang.String str76 = server75.name;
        retrofit.client.Client.Provider provider77 = null;
        java.util.concurrent.Executor executor78 = null;
        java.util.concurrent.Executor executor79 = null;
        retrofit.RequestInterceptor requestInterceptor80 = null;
        retrofit.converter.Converter converter81 = null;
        retrofit.Profiler profiler82 = null;
        retrofit.ErrorHandler errorHandler83 = null;
        retrofit.RestAdapter.Log log84 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder85 = new retrofit.RestAdapter.Builder();
        retrofit.Server server86 = builder85.server;
        java.util.concurrent.Executor executor87 = null;
        builder85.httpExecutor = executor87;
        java.util.concurrent.Executor executor89 = builder85.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel90 = retrofit.RestAdapter.LogLevel.FULL;
        builder85.logLevel = logLevel90;
        retrofit.RestAdapter restAdapter92 = new retrofit.RestAdapter(server75, provider77, executor78, executor79, requestInterceptor80, converter81, profiler82, errorHandler83, log84, logLevel90);
        retrofit.RestAdapter.Builder builder93 = builder71.setLog(log84);
        retrofit.RestAdapter.Builder builder94 = builder68.setLog(log84);
        builder94.ensureSaneDefaults();
        java.util.concurrent.Executor executor96 = builder94.callbackExecutor;
        builder41.httpExecutor = executor96;
        retrofit.RestAdapter.Builder builder98 = builder0.setExecutors(executor39, executor96);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Retrofit-Idle" + "'", str2, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(request19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "http://example.com/" + "'", str21, "http://example.com/");
        org.junit.Assert.assertNotNull(server22);
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertNotNull(gsonConverter24);
        org.junit.Assert.assertNotNull(gsonConverter25);
        org.junit.Assert.assertNotNull(serializedObjectSupporter27);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(executor34);
        org.junit.Assert.assertNull(errorHandler35);
        org.junit.Assert.assertNotNull(executor39);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Retrofit-Idle" + "'", str43, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter44);
        org.junit.Assert.assertNotNull(request60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "http://example.com/" + "'", str62, "http://example.com/");
        org.junit.Assert.assertNotNull(server63);
        org.junit.Assert.assertNotNull(request64);
        org.junit.Assert.assertNotNull(gsonConverter65);
        org.junit.Assert.assertNotNull(gsonConverter66);
        org.junit.Assert.assertNull(executor69);
        org.junit.Assert.assertNull(server70);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "default" + "'", str76, "default");
        org.junit.Assert.assertNotNull(log84);
        org.junit.Assert.assertNull(server86);
        org.junit.Assert.assertNull(executor89);
        org.junit.Assert.assertTrue("'" + logLevel90 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel90.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(executor96);
        org.junit.Assert.assertNotNull(builder98);
    }

    @Test
    public void test1451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1451");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        java.util.concurrent.Executor executor2 = null;
        builder0.httpExecutor = executor2;
        java.util.concurrent.Executor executor4 = builder0.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.FULL;
        builder0.logLevel = logLevel5;
        retrofit.SerializedObjectSupporter serializedObjectSupporter7 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request8 = serializedObjectSupporter7.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter7.deserializeObjectConverter1();
        retrofit.converter.GsonConverter gsonConverter10 = serializedObjectSupporter7.deserializeObjectConverter4();
        builder0.serializedObjectSupporter = serializedObjectSupporter7;
        retrofit.Profiler profiler12 = builder0.profiler;
        retrofit.Server server14 = new retrofit.Server("POST");
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.Server server19 = null;
        retrofit.client.Client.Provider provider20 = null;
        java.util.concurrent.Executor executor21 = null;
        java.util.concurrent.Executor executor22 = null;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        retrofit.converter.Converter converter24 = null;
        retrofit.Profiler profiler25 = null;
        retrofit.ErrorHandler errorHandler26 = null;
        retrofit.RestAdapter.Log log27 = null;
        retrofit.RestAdapter.LogLevel logLevel28 = null;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server19, provider20, executor21, executor22, requestInterceptor23, converter24, profiler25, errorHandler26, log27, logLevel28);
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request31 = serializedObjectSupporter30.deserializeObjectRequest6();
        restAdapter29.serializedObjectSupporter = serializedObjectSupporter30;
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter30.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter34 = serializedObjectSupporter30.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter35 = serializedObjectSupporter30.deserializeObjectConverter1();
        retrofit.Profiler profiler36 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter37 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request38 = serializedObjectSupporter37.deserializeObjectRequest6();
        java.lang.String str39 = serializedObjectSupporter37.deserializeObjectString4();
        java.lang.String str40 = serializedObjectSupporter37.deserializeObjectString5();
        retrofit.ErrorHandler errorHandler41 = serializedObjectSupporter37.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor43 = builder42.getcallbackExecutor();
        retrofit.Server server44 = builder42.server;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider46 = null;
        builder45.setclientProvider(provider46);
        retrofit.Server server49 = new retrofit.Server("Retrofit-");
        java.lang.String str50 = server49.name;
        retrofit.client.Client.Provider provider51 = null;
        java.util.concurrent.Executor executor52 = null;
        java.util.concurrent.Executor executor53 = null;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        retrofit.converter.Converter converter55 = null;
        retrofit.Profiler profiler56 = null;
        retrofit.ErrorHandler errorHandler57 = null;
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.Server server60 = builder59.server;
        java.util.concurrent.Executor executor61 = null;
        builder59.httpExecutor = executor61;
        java.util.concurrent.Executor executor63 = builder59.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel64 = retrofit.RestAdapter.LogLevel.FULL;
        builder59.logLevel = logLevel64;
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter(server49, provider51, executor52, executor53, requestInterceptor54, converter55, profiler56, errorHandler57, log58, logLevel64);
        retrofit.RestAdapter.Builder builder67 = builder45.setLog(log58);
        retrofit.RestAdapter.Builder builder68 = builder42.setLog(log58);
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        retrofit.Server server70 = builder69.server;
        retrofit.converter.Converter converter71 = null;
        builder69.converter = converter71;
        retrofit.RestAdapter.Log log73 = builder69.log;
        retrofit.RestAdapter.LogLevel logLevel74 = builder69.logLevel;
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, (retrofit.converter.Converter) gsonConverter35, profiler36, errorHandler41, log58, logLevel74);
        builder0.logLevel = logLevel74;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(request8);
        org.junit.Assert.assertNotNull(gsonConverter9);
        org.junit.Assert.assertNotNull(gsonConverter10);
        org.junit.Assert.assertNull(profiler12);
        org.junit.Assert.assertNotNull(request31);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(gsonConverter34);
        org.junit.Assert.assertNotNull(gsonConverter35);
        org.junit.Assert.assertNotNull(request38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "http://example.com/" + "'", str39, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "POST" + "'", str40, "POST");
        org.junit.Assert.assertNotNull(errorHandler41);
        org.junit.Assert.assertNull(executor43);
        org.junit.Assert.assertNull(server44);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "default" + "'", str50, "default");
        org.junit.Assert.assertNotNull(log58);
        org.junit.Assert.assertNull(server60);
        org.junit.Assert.assertNull(executor63);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNull(server70);
        org.junit.Assert.assertNull(log73);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test1452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1452");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request16 = serializedObjectSupporter15.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter15.deserializeObjectConverter1();
        java.lang.String str18 = serializedObjectSupporter15.deserializeObjectString4();
        java.lang.String str19 = serializedObjectSupporter15.deserializeObjectString4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter15;
        java.util.concurrent.Executor executor21 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler22 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler23 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter10.new RestHandler();
        java.lang.reflect.Method method26 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] {};
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj28 = restHandler24.invoke((java.lang.Object) (-1), method26, objArray27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
    }

    @Test
    public void test1453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1453");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.converter.Converter converter2 = null;
        builder0.converter = converter2;
        retrofit.RestAdapter.Log log4 = builder0.log;
        retrofit.client.Client.Provider provider5 = null;
        builder0.clientProvider = provider5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = builder7.getcallbackExecutor();
        retrofit.Server server9 = builder7.server;
        retrofit.Profiler profiler10 = null;
        builder7.profiler = profiler10;
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = null;
        retrofit.RestAdapter.LogLevel logLevel21 = null;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel21);
        retrofit.SerializedObjectSupporter serializedObjectSupporter23 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request24 = serializedObjectSupporter23.deserializeObjectRequest6();
        restAdapter22.serializedObjectSupporter = serializedObjectSupporter23;
        java.lang.String str26 = serializedObjectSupporter23.deserializeObjectString4();
        retrofit.Server server27 = serializedObjectSupporter23.deserializeObjectServer1();
        retrofit.client.Request request28 = serializedObjectSupporter23.deserializeObjectRequest1();
        retrofit.converter.GsonConverter gsonConverter29 = serializedObjectSupporter23.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter30 = serializedObjectSupporter23.deserializeObjectConverter3();
        retrofit.RestAdapter.Builder builder31 = builder7.setConverter((retrofit.converter.Converter) gsonConverter30);
        retrofit.SerializedObjectSupporter serializedObjectSupporter32 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request33 = serializedObjectSupporter32.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter34 = serializedObjectSupporter32.deserializeObjectConverter1();
        java.lang.String str35 = serializedObjectSupporter32.deserializeObjectString4();
        java.lang.String str36 = serializedObjectSupporter32.deserializeObjectString1();
        retrofit.client.Request request37 = serializedObjectSupporter32.deserializeObjectRequest5();
        retrofit.Server server38 = serializedObjectSupporter32.deserializeObjectServer1();
        builder7.server = server38;
        retrofit.Server server41 = new retrofit.Server("Retrofit-");
        java.lang.String str42 = server41.name;
        retrofit.client.Client.Provider provider43 = null;
        java.util.concurrent.Executor executor44 = null;
        java.util.concurrent.Executor executor45 = null;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        retrofit.converter.Converter converter47 = null;
        retrofit.Profiler profiler48 = null;
        retrofit.ErrorHandler errorHandler49 = null;
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.Server server52 = builder51.server;
        java.util.concurrent.Executor executor53 = null;
        builder51.httpExecutor = executor53;
        java.util.concurrent.Executor executor55 = builder51.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.FULL;
        builder51.logLevel = logLevel56;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter(server41, provider43, executor44, executor45, requestInterceptor46, converter47, profiler48, errorHandler49, log50, logLevel56);
        retrofit.RestAdapter.LogLevel logLevel59 = restAdapter58.getLogLevel();
        retrofit.Server server60 = null;
        retrofit.client.Client.Provider provider61 = null;
        java.util.concurrent.Executor executor62 = null;
        java.util.concurrent.Executor executor63 = null;
        retrofit.RequestInterceptor requestInterceptor64 = null;
        retrofit.converter.Converter converter65 = null;
        retrofit.Profiler profiler66 = null;
        retrofit.ErrorHandler errorHandler67 = null;
        retrofit.RestAdapter.Log log68 = null;
        retrofit.RestAdapter.LogLevel logLevel69 = null;
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter(server60, provider61, executor62, executor63, requestInterceptor64, converter65, profiler66, errorHandler67, log68, logLevel69);
        retrofit.RestAdapter.RestHandler restHandler71 = restAdapter70.new RestHandler();
        retrofit.Server server72 = restAdapter70.server;
        retrofit.RestAdapter.LogLevel logLevel73 = restAdapter70.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor74 = restAdapter70.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter75 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request76 = serializedObjectSupporter75.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter77 = serializedObjectSupporter75.deserializeObjectConverter1();
        java.lang.String str78 = serializedObjectSupporter75.deserializeObjectString4();
        java.lang.String str79 = serializedObjectSupporter75.deserializeObjectString4();
        restAdapter70.serializedObjectSupporter = serializedObjectSupporter75;
        retrofit.ErrorHandler errorHandler81 = restAdapter70.geterrorHandler();
        java.util.concurrent.Executor executor82 = restAdapter70.httpExecutor;
        retrofit.RestAdapter.Builder builder83 = new retrofit.RestAdapter.Builder();
        retrofit.Server server84 = builder83.server;
        retrofit.converter.Converter converter85 = null;
        builder83.converter = converter85;
        retrofit.RestAdapter.Log log87 = builder83.log;
        retrofit.RestAdapter.LogLevel logLevel88 = builder83.logLevel;
        restAdapter70.logLevel = logLevel88;
        restAdapter58.logLevel = logLevel88;
        builder7.logLevel = logLevel88;
        retrofit.RestAdapter.Builder builder92 = builder0.setLogLevel(logLevel88);
        retrofit.SerializedObjectSupporter serializedObjectSupporter93 = builder92.serializedObjectSupporter;
        retrofit.ErrorHandler errorHandler94 = builder92.errorHandler;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(server9);
        org.junit.Assert.assertNotNull(request24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "http://example.com/" + "'", str26, "http://example.com/");
        org.junit.Assert.assertNotNull(server27);
        org.junit.Assert.assertNotNull(request28);
        org.junit.Assert.assertNotNull(gsonConverter29);
        org.junit.Assert.assertNotNull(gsonConverter30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(request33);
        org.junit.Assert.assertNotNull(gsonConverter34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "http://example.com/" + "'", str35, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Retrofit-" + "'", str36, "Retrofit-");
        org.junit.Assert.assertNotNull(request37);
        org.junit.Assert.assertNotNull(server38);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "default" + "'", str42, "default");
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertNull(server52);
        org.junit.Assert.assertNull(executor55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(server72);
        org.junit.Assert.assertNull(logLevel73);
        org.junit.Assert.assertNull(requestInterceptor74);
        org.junit.Assert.assertNotNull(request76);
        org.junit.Assert.assertNotNull(gsonConverter77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "http://example.com/" + "'", str78, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "http://example.com/" + "'", str79, "http://example.com/");
        org.junit.Assert.assertNull(errorHandler81);
        org.junit.Assert.assertNull(executor82);
        org.junit.Assert.assertNull(server84);
        org.junit.Assert.assertNull(log87);
        org.junit.Assert.assertTrue("'" + logLevel88 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel88.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNull(serializedObjectSupporter93);
        org.junit.Assert.assertNull(errorHandler94);
    }

    @Test
    public void test1454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1454");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString4();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter3();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.RequestInterceptor requestInterceptor6 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter7 = serializedObjectSupporter0.deserializeObjectLogLevel3();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "http://example.com/" + "'", str2, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(requestInterceptor6);
    }

    @Test
    public void test1455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1455");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request16 = serializedObjectSupporter15.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter15.deserializeObjectConverter1();
        java.lang.String str18 = serializedObjectSupporter15.deserializeObjectString4();
        java.lang.String str19 = serializedObjectSupporter15.deserializeObjectString4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter15;
        java.util.concurrent.Executor executor21 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler22 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler23 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter10.new RestHandler();
        retrofit.ErrorHandler errorHandler25 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler26 = restAdapter10.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler27 = restAdapter10.new RestHandler();
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(errorHandler25);
        org.junit.Assert.assertNull(errorHandler26);
    }

    @Test
    public void test1456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1456");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter1();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString4();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.client.Request request6 = serializedObjectSupporter0.deserializeObjectRequest3();
        retrofit.client.Request request7 = serializedObjectSupporter0.deserializeObjectRequest8();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter8 = serializedObjectSupporter0.deserializeObjectLogLevel2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(request6);
        org.junit.Assert.assertNotNull(request7);
    }

    @Test
    public void test1457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1457");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        java.util.concurrent.Executor executor13 = restAdapter10.gethttpExecutor();
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter10.new RestHandler();
        retrofit.Profiler profiler15 = restAdapter10.getprofiler();
        retrofit.Server server16 = null;
        retrofit.client.Client.Provider provider17 = null;
        java.util.concurrent.Executor executor18 = null;
        java.util.concurrent.Executor executor19 = null;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        retrofit.converter.Converter converter21 = null;
        retrofit.Profiler profiler22 = null;
        retrofit.ErrorHandler errorHandler23 = null;
        retrofit.RestAdapter.Log log24 = null;
        retrofit.RestAdapter.LogLevel logLevel25 = null;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter(server16, provider17, executor18, executor19, requestInterceptor20, converter21, profiler22, errorHandler23, log24, logLevel25);
        retrofit.RestAdapter.RestHandler restHandler27 = restAdapter26.new RestHandler();
        retrofit.Server server28 = restAdapter26.server;
        retrofit.RestAdapter.LogLevel logLevel29 = restAdapter26.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor30 = restAdapter26.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request32 = serializedObjectSupporter31.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter31.deserializeObjectConverter1();
        java.lang.String str34 = serializedObjectSupporter31.deserializeObjectString4();
        java.lang.String str35 = serializedObjectSupporter31.deserializeObjectString4();
        restAdapter26.serializedObjectSupporter = serializedObjectSupporter31;
        retrofit.client.Request request37 = serializedObjectSupporter31.deserializeObjectRequest1();
        retrofit.client.Request request38 = serializedObjectSupporter31.deserializeObjectRequest3();
        retrofit.converter.GsonConverter gsonConverter39 = serializedObjectSupporter31.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter40 = serializedObjectSupporter31.deserializeObjectConverter8();
        retrofit.client.Request request41 = serializedObjectSupporter31.deserializeObjectRequest1();
        retrofit.mime.TypedOutput typedOutput42 = request41.getBody();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request43 = restAdapter10.logAndReplaceRequest(request41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNull(server28);
        org.junit.Assert.assertNull(logLevel29);
        org.junit.Assert.assertNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(request32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "http://example.com/" + "'", str34, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "http://example.com/" + "'", str35, "http://example.com/");
        org.junit.Assert.assertNotNull(request37);
        org.junit.Assert.assertNotNull(request38);
        org.junit.Assert.assertNotNull(gsonConverter39);
        org.junit.Assert.assertNotNull(gsonConverter40);
        org.junit.Assert.assertNotNull(request41);
        org.junit.Assert.assertNull(typedOutput42);
    }

    @Test
    public void test1458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1458");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.Server server2 = builder0.server;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider4 = null;
        builder3.setclientProvider(provider4);
        retrofit.Server server7 = new retrofit.Server("Retrofit-");
        java.lang.String str8 = server7.name;
        retrofit.client.Client.Provider provider9 = null;
        java.util.concurrent.Executor executor10 = null;
        java.util.concurrent.Executor executor11 = null;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        retrofit.converter.Converter converter13 = null;
        retrofit.Profiler profiler14 = null;
        retrofit.ErrorHandler errorHandler15 = null;
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.Server server18 = builder17.server;
        java.util.concurrent.Executor executor19 = null;
        builder17.httpExecutor = executor19;
        java.util.concurrent.Executor executor21 = builder17.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.FULL;
        builder17.logLevel = logLevel22;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server7, provider9, executor10, executor11, requestInterceptor12, converter13, profiler14, errorHandler15, log16, logLevel22);
        retrofit.RestAdapter.Builder builder25 = builder3.setLog(log16);
        retrofit.RestAdapter.Builder builder26 = builder0.setLog(log16);
        retrofit.Profiler profiler27 = null;
        builder26.profiler = profiler27;
        java.util.concurrent.Executor executor29 = builder26.gethttpExecutor();
        retrofit.Server server31 = new retrofit.Server("Retrofit-");
        java.lang.String str32 = server31.name;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.Server server42 = builder41.server;
        java.util.concurrent.Executor executor43 = null;
        builder41.httpExecutor = executor43;
        java.util.concurrent.Executor executor45 = builder41.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.FULL;
        builder41.logLevel = logLevel46;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter(server31, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log40, logLevel46);
        builder26.log = log40;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter51 = new retrofit.SerializedObjectSupporter();
        java.lang.String str52 = serializedObjectSupporter51.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter53 = serializedObjectSupporter51.deserializeObjectConverter3();
        builder50.serializedObjectSupporter = serializedObjectSupporter51;
        java.util.concurrent.Executor executor55 = null;
        builder50.httpExecutor = executor55;
        retrofit.Server server57 = null;
        retrofit.client.Client.Provider provider58 = null;
        java.util.concurrent.Executor executor59 = null;
        java.util.concurrent.Executor executor60 = null;
        retrofit.RequestInterceptor requestInterceptor61 = null;
        retrofit.converter.Converter converter62 = null;
        retrofit.Profiler profiler63 = null;
        retrofit.ErrorHandler errorHandler64 = null;
        retrofit.RestAdapter.Log log65 = null;
        retrofit.RestAdapter.LogLevel logLevel66 = null;
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter(server57, provider58, executor59, executor60, requestInterceptor61, converter62, profiler63, errorHandler64, log65, logLevel66);
        retrofit.SerializedObjectSupporter serializedObjectSupporter68 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request69 = serializedObjectSupporter68.deserializeObjectRequest6();
        restAdapter67.serializedObjectSupporter = serializedObjectSupporter68;
        java.lang.String str71 = serializedObjectSupporter68.deserializeObjectString4();
        retrofit.Server server72 = serializedObjectSupporter68.deserializeObjectServer1();
        retrofit.client.Request request73 = serializedObjectSupporter68.deserializeObjectRequest1();
        retrofit.converter.GsonConverter gsonConverter74 = serializedObjectSupporter68.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter75 = serializedObjectSupporter68.deserializeObjectConverter3();
        builder50.converter = gsonConverter75;
        retrofit.RestAdapter.Builder builder77 = builder26.setConverter((retrofit.converter.Converter) gsonConverter75);
        retrofit.Server server78 = builder77.server;
        retrofit.RestAdapter.Builder builder80 = builder77.setServer("Retrofit-");
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "default" + "'", str8, "default");
        org.junit.Assert.assertNotNull(log16);
        org.junit.Assert.assertNull(server18);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "default" + "'", str32, "default");
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertNull(server42);
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Retrofit-Idle" + "'", str52, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter53);
        org.junit.Assert.assertNotNull(request69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "http://example.com/" + "'", str71, "http://example.com/");
        org.junit.Assert.assertNotNull(server72);
        org.junit.Assert.assertNotNull(request73);
        org.junit.Assert.assertNotNull(gsonConverter74);
        org.junit.Assert.assertNotNull(gsonConverter75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNull(server78);
        org.junit.Assert.assertNotNull(builder80);
    }

    @Test
    public void test1459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1459");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter10.new RestHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter10.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter10.getrequestInterceptor();
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter10.new RestHandler();
        java.util.concurrent.Executor executor18 = restAdapter10.getcallbackExecutor();
        retrofit.Server server19 = restAdapter10.getserver();
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(server19);
    }

    @Test
    public void test1460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1460");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        java.util.concurrent.Executor executor3 = null;
        builder0.httpExecutor = executor3;
        retrofit.RestAdapter.Log log5 = builder0.log;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(log5);
    }

    @Test
    public void test1461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1461");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter10.new RestHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter10.new RestHandler();
        retrofit.Server server16 = restAdapter10.getserver();
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter10.new RestHandler();
        retrofit.Server server18 = restAdapter10.getserver();
        retrofit.RestAdapter.LogLevel logLevel19 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter10.setLogLevel(logLevel19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log level may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertNull(server18);
    }

    @Test
    public void test1462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1462");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        java.lang.String str13 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter10.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter10.requestInterceptor;
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-Idle" + "'", str13, "Retrofit-Idle");
        org.junit.Assert.assertNull(requestInterceptor16);
    }

    @Test
    public void test1463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1463");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.converter.Converter converter2 = null;
        builder0.converter = converter2;
        retrofit.RestAdapter.Log log4 = builder0.log;
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        java.util.concurrent.Executor executor6 = null;
        builder0.sethttpExecutor(executor6);
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider9 = null;
        builder8.setclientProvider(provider9);
        retrofit.Server server12 = new retrofit.Server("Retrofit-");
        java.lang.String str13 = server12.name;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.Server server23 = builder22.server;
        java.util.concurrent.Executor executor24 = null;
        builder22.httpExecutor = executor24;
        java.util.concurrent.Executor executor26 = builder22.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.FULL;
        builder22.logLevel = logLevel27;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server12, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel27);
        retrofit.RestAdapter.Builder builder30 = builder8.setLog(log21);
        retrofit.RestAdapter.Builder builder31 = builder0.setLog(log21);
        java.util.concurrent.Executor executor32 = builder31.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter33 = builder31.serializedObjectSupporter;
        retrofit.RequestInterceptor requestInterceptor34 = builder31.requestInterceptor;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "default" + "'", str13, "default");
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertNull(server23);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(serializedObjectSupporter33);
        org.junit.Assert.assertNull(requestInterceptor34);
    }

    @Test
    public void test1464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1464");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider3 = null;
        builder2.setclientProvider(provider3);
        retrofit.Server server6 = new retrofit.Server("Retrofit-");
        java.lang.String str7 = server6.name;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.Server server17 = builder16.server;
        java.util.concurrent.Executor executor18 = null;
        builder16.httpExecutor = executor18;
        java.util.concurrent.Executor executor20 = builder16.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.FULL;
        builder16.logLevel = logLevel21;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server6, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel21);
        retrofit.RestAdapter.Builder builder24 = builder2.setLog(log15);
        log15.log("default");
        log15.log("GET");
        builder0.log = log15;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor31 = builder30.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor32 = null;
        builder30.requestInterceptor = requestInterceptor32;
        retrofit.Server server34 = null;
        retrofit.client.Client.Provider provider35 = null;
        java.util.concurrent.Executor executor36 = null;
        java.util.concurrent.Executor executor37 = null;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        retrofit.converter.Converter converter39 = null;
        retrofit.Profiler profiler40 = null;
        retrofit.ErrorHandler errorHandler41 = null;
        retrofit.RestAdapter.Log log42 = null;
        retrofit.RestAdapter.LogLevel logLevel43 = null;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter(server34, provider35, executor36, executor37, requestInterceptor38, converter39, profiler40, errorHandler41, log42, logLevel43);
        retrofit.SerializedObjectSupporter serializedObjectSupporter45 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request46 = serializedObjectSupporter45.deserializeObjectRequest6();
        restAdapter44.serializedObjectSupporter = serializedObjectSupporter45;
        retrofit.converter.GsonConverter gsonConverter48 = serializedObjectSupporter45.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter49 = serializedObjectSupporter45.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter50 = serializedObjectSupporter45.deserializeObjectConverter1();
        retrofit.ErrorHandler errorHandler51 = serializedObjectSupporter45.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder52 = builder30.setErrorHandler(errorHandler51);
        builder0.errorHandler = errorHandler51;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "default" + "'", str7, "default");
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNull(server17);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNotNull(request46);
        org.junit.Assert.assertNotNull(gsonConverter48);
        org.junit.Assert.assertNotNull(gsonConverter49);
        org.junit.Assert.assertNotNull(gsonConverter50);
        org.junit.Assert.assertNotNull(errorHandler51);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test1465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1465");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor2 = null;
        builder0.requestInterceptor = requestInterceptor2;
        java.util.concurrent.Executor executor4 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("default");
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.Server server8 = builder7.server;
        java.util.concurrent.Executor executor9 = null;
        builder7.httpExecutor = executor9;
        java.util.concurrent.Executor executor11 = null;
        builder7.callbackExecutor = executor11;
        java.util.concurrent.Executor executor13 = null;
        builder7.callbackExecutor = executor13;
        builder7.ensureSaneDefaults();
        retrofit.client.Client.Provider provider16 = builder7.clientProvider;
        retrofit.Profiler profiler17 = builder7.profiler;
        retrofit.RequestInterceptor requestInterceptor18 = builder7.requestInterceptor;
        builder0.requestInterceptor = requestInterceptor18;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(server8);
        org.junit.Assert.assertNotNull(provider16);
        org.junit.Assert.assertNull(profiler17);
        org.junit.Assert.assertNotNull(requestInterceptor18);
    }

    @Test
    public void test1466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1466");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        java.lang.String str2 = serializedObjectSupporter1.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter1.deserializeObjectConverter3();
        builder0.serializedObjectSupporter = serializedObjectSupporter1;
        java.util.concurrent.Executor executor5 = null;
        builder0.callbackExecutor = executor5;
        retrofit.SerializedObjectSupporter serializedObjectSupporter7 = builder0.serializedObjectSupporter;
        retrofit.converter.Converter converter8 = builder0.converter;
        retrofit.Profiler profiler9 = null;
        builder0.profiler = profiler9;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Retrofit-Idle" + "'", str2, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(serializedObjectSupporter7);
        org.junit.Assert.assertNull(converter8);
    }

    @Test
    public void test1467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1467");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.Server server2 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter3 = builder0.serializedObjectSupporter;
        retrofit.converter.Converter converter4 = builder0.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter5 = new retrofit.SerializedObjectSupporter();
        java.lang.String str6 = serializedObjectSupporter5.deserializeObjectString2();
        retrofit.client.Request request7 = serializedObjectSupporter5.deserializeObjectRequest7();
        java.lang.String str8 = serializedObjectSupporter5.deserializeObjectString5();
        retrofit.Server server9 = serializedObjectSupporter5.deserializeObjectServer1();
        builder0.serializedObjectSupporter = serializedObjectSupporter5;
        retrofit.converter.GsonConverter gsonConverter11 = serializedObjectSupporter5.deserializeObjectConverter7();
        java.lang.String str12 = serializedObjectSupporter5.deserializeObjectString2();
        retrofit.client.Request request13 = serializedObjectSupporter5.deserializeObjectRequest2();
        retrofit.client.Request request14 = serializedObjectSupporter5.deserializeObjectRequest6();
        java.lang.String str15 = request14.getUrl();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertNull(serializedObjectSupporter3);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Retrofit-Idle" + "'", str6, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "POST" + "'", str8, "POST");
        org.junit.Assert.assertNotNull(server9);
        org.junit.Assert.assertNotNull(gsonConverter11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(request13);
        org.junit.Assert.assertNotNull(request14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "http://example.com/" + "'", str15, "http://example.com/");
    }

    @Test
    public void test1468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1468");
        retrofit.Server server1 = new retrofit.Server("Retrofit-");
        java.lang.String str2 = server1.name;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.Server server12 = builder11.server;
        java.util.concurrent.Executor executor13 = null;
        builder11.httpExecutor = executor13;
        java.util.concurrent.Executor executor15 = builder11.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.FULL;
        builder11.logLevel = logLevel16;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter(server1, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log10, logLevel16);
        java.util.concurrent.Executor executor19 = restAdapter18.getcallbackExecutor();
        retrofit.converter.Converter converter20 = restAdapter18.getconverter();
        retrofit.Profiler profiler21 = restAdapter18.profiler;
        retrofit.RestAdapter.RestHandler restHandler22 = restAdapter18.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor23 = restAdapter18.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = restAdapter18.serializedObjectSupporter;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "default" + "'", str2, "default");
        org.junit.Assert.assertNotNull(log10);
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(converter20);
        org.junit.Assert.assertNull(profiler21);
        org.junit.Assert.assertNull(requestInterceptor23);
        org.junit.Assert.assertNull(serializedObjectSupporter24);
    }

    @Test
    public void test1469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1469");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request16 = serializedObjectSupporter15.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter15.deserializeObjectConverter1();
        java.lang.String str18 = serializedObjectSupporter15.deserializeObjectString4();
        java.lang.String str19 = serializedObjectSupporter15.deserializeObjectString4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter15;
        retrofit.ErrorHandler errorHandler21 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor22 = restAdapter10.httpExecutor;
        int int23 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter10.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = restAdapter10.serializedObjectSupporter;
        java.util.concurrent.Executor executor27 = restAdapter10.callbackExecutor;
        java.lang.Throwable throwable28 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter10.logException(throwable28, "default");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4000 + "'", int23 == 4000);
        org.junit.Assert.assertNull(logLevel24);
        org.junit.Assert.assertNotNull(serializedObjectSupporter26);
        org.junit.Assert.assertNull(executor27);
    }

    @Test
    public void test1470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1470");
        retrofit.Server server1 = new retrofit.Server("Retrofit-");
        java.lang.String str2 = server1.name;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.Server server12 = builder11.server;
        java.util.concurrent.Executor executor13 = null;
        builder11.httpExecutor = executor13;
        java.util.concurrent.Executor executor15 = builder11.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.FULL;
        builder11.logLevel = logLevel16;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter(server1, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log10, logLevel16);
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter18.getLogLevel();
        retrofit.Profiler profiler20 = restAdapter18.profiler;
        retrofit.RestAdapter.LogLevel logLevel21 = restAdapter18.logLevel;
        retrofit.Profiler profiler22 = restAdapter18.profiler;
        retrofit.RestAdapter.RestHandler restHandler23 = restAdapter18.new RestHandler();
        java.util.concurrent.Executor executor24 = restAdapter18.httpExecutor;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "default" + "'", str2, "default");
        org.junit.Assert.assertNotNull(log10);
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(executor24);
    }

    @Test
    public void test1471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1471");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString5();
        retrofit.ErrorHandler errorHandler4 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest3();
        retrofit.ErrorHandler errorHandler6 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "http://example.com/" + "'", str2, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "POST" + "'", str3, "POST");
        org.junit.Assert.assertNotNull(errorHandler4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(errorHandler6);
    }

    @Test
    public void test1472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1472");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest5();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest5();
        retrofit.Server server5 = serializedObjectSupporter0.deserializeObjectServer1();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString5();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter7 = serializedObjectSupporter0.deserializeObjectLogLevel1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(server5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "POST" + "'", str6, "POST");
    }

    @Test
    public void test1473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1473");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request16 = serializedObjectSupporter15.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter15.deserializeObjectConverter1();
        java.lang.String str18 = serializedObjectSupporter15.deserializeObjectString4();
        java.lang.String str19 = serializedObjectSupporter15.deserializeObjectString4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter15;
        retrofit.ErrorHandler errorHandler21 = restAdapter10.geterrorHandler();
        retrofit.Profiler profiler22 = restAdapter10.profiler;
        retrofit.converter.Converter converter23 = restAdapter10.converter;
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter10.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request26 = serializedObjectSupporter25.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter27 = serializedObjectSupporter25.deserializeObjectConverter1();
        java.lang.String str28 = serializedObjectSupporter25.deserializeObjectString4();
        java.lang.String str29 = serializedObjectSupporter25.deserializeObjectString1();
        retrofit.client.Request request30 = serializedObjectSupporter25.deserializeObjectRequest2();
        retrofit.Server server31 = serializedObjectSupporter25.deserializeObjectServer1();
        restHandler24.serializedObjectSupporter = serializedObjectSupporter25;
        retrofit.SerializedObjectSupporter serializedObjectSupporter33 = restHandler24.serializedObjectSupporter;
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(converter23);
        org.junit.Assert.assertNotNull(request26);
        org.junit.Assert.assertNotNull(gsonConverter27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "http://example.com/" + "'", str28, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Retrofit-" + "'", str29, "Retrofit-");
        org.junit.Assert.assertNotNull(request30);
        org.junit.Assert.assertNotNull(server31);
        org.junit.Assert.assertNotNull(serializedObjectSupporter33);
    }

    @Test
    public void test1474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1474");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor2 = null;
        builder0.requestInterceptor = requestInterceptor2;
        java.util.concurrent.Executor executor4 = null;
        builder0.setcallbackExecutor(executor4);
        retrofit.ErrorHandler errorHandler6 = builder0.errorHandler;
        java.util.concurrent.Executor executor7 = null;
        builder0.callbackExecutor = executor7;
        retrofit.Profiler profiler9 = null;
        builder0.profiler = profiler9;
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Log log19 = null;
        retrofit.RestAdapter.LogLevel logLevel20 = null;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log19, logLevel20);
        retrofit.SerializedObjectSupporter serializedObjectSupporter22 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request23 = serializedObjectSupporter22.deserializeObjectRequest6();
        restAdapter21.serializedObjectSupporter = serializedObjectSupporter22;
        retrofit.converter.GsonConverter gsonConverter25 = serializedObjectSupporter22.deserializeObjectConverter7();
        java.lang.String str26 = serializedObjectSupporter22.deserializeObjectString1();
        retrofit.client.Request request27 = serializedObjectSupporter22.deserializeObjectRequest6();
        retrofit.Server server28 = serializedObjectSupporter22.deserializeObjectServer1();
        java.lang.String str29 = server28.getUrl();
        retrofit.RestAdapter.Builder builder30 = builder0.setServer(server28);
        retrofit.Server server31 = null;
        retrofit.client.Client.Provider provider32 = null;
        java.util.concurrent.Executor executor33 = null;
        java.util.concurrent.Executor executor34 = null;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        retrofit.converter.Converter converter36 = null;
        retrofit.Profiler profiler37 = null;
        retrofit.ErrorHandler errorHandler38 = null;
        retrofit.RestAdapter.Log log39 = null;
        retrofit.RestAdapter.LogLevel logLevel40 = null;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter(server31, provider32, executor33, executor34, requestInterceptor35, converter36, profiler37, errorHandler38, log39, logLevel40);
        retrofit.SerializedObjectSupporter serializedObjectSupporter42 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request43 = serializedObjectSupporter42.deserializeObjectRequest6();
        restAdapter41.serializedObjectSupporter = serializedObjectSupporter42;
        retrofit.RestAdapter.RestHandler restHandler45 = restAdapter41.new RestHandler();
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.Server server47 = builder46.server;
        retrofit.converter.Converter converter48 = null;
        builder46.converter = converter48;
        retrofit.ErrorHandler errorHandler50 = builder46.errorHandler;
        retrofit.Server server52 = new retrofit.Server("Retrofit-");
        java.lang.String str53 = server52.name;
        retrofit.client.Client.Provider provider54 = null;
        java.util.concurrent.Executor executor55 = null;
        java.util.concurrent.Executor executor56 = null;
        retrofit.RequestInterceptor requestInterceptor57 = null;
        retrofit.converter.Converter converter58 = null;
        retrofit.Profiler profiler59 = null;
        retrofit.ErrorHandler errorHandler60 = null;
        retrofit.RestAdapter.Log log61 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.Server server63 = builder62.server;
        java.util.concurrent.Executor executor64 = null;
        builder62.httpExecutor = executor64;
        java.util.concurrent.Executor executor66 = builder62.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel67 = retrofit.RestAdapter.LogLevel.FULL;
        builder62.logLevel = logLevel67;
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter(server52, provider54, executor55, executor56, requestInterceptor57, converter58, profiler59, errorHandler60, log61, logLevel67);
        retrofit.RestAdapter.LogLevel logLevel70 = restAdapter69.getLogLevel();
        retrofit.RestAdapter.Builder builder71 = builder46.setLogLevel(logLevel70);
        restAdapter41.logLevel = logLevel70;
        retrofit.RestAdapter.Builder builder73 = builder0.setLogLevel(logLevel70);
        retrofit.RestAdapter.Builder builder75 = builder73.setServer("http://example.com/");
        retrofit.converter.Converter converter76 = builder73.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter77 = new retrofit.SerializedObjectSupporter();
        java.lang.String str78 = serializedObjectSupporter77.deserializeObjectString2();
        retrofit.client.Request request79 = serializedObjectSupporter77.deserializeObjectRequest7();
        java.lang.String str80 = serializedObjectSupporter77.deserializeObjectString5();
        retrofit.client.Request request81 = serializedObjectSupporter77.deserializeObjectRequest2();
        retrofit.client.Request request82 = serializedObjectSupporter77.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter83 = serializedObjectSupporter77.deserializeObjectConverter3();
        retrofit.Server server84 = serializedObjectSupporter77.deserializeObjectServer1();
        builder73.serializedObjectSupporter = serializedObjectSupporter77;
        retrofit.converter.Converter converter86 = builder73.converter;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertNotNull(gsonConverter25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Retrofit-" + "'", str26, "Retrofit-");
        org.junit.Assert.assertNotNull(request27);
        org.junit.Assert.assertNotNull(server28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "http://example.com" + "'", str29, "http://example.com");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(request43);
        org.junit.Assert.assertNull(server47);
        org.junit.Assert.assertNull(errorHandler50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "default" + "'", str53, "default");
        org.junit.Assert.assertNotNull(log61);
        org.junit.Assert.assertNull(server63);
        org.junit.Assert.assertNull(executor66);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNull(converter76);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Retrofit-Idle" + "'", str78, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(request79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "POST" + "'", str80, "POST");
        org.junit.Assert.assertNotNull(request81);
        org.junit.Assert.assertNotNull(request82);
        org.junit.Assert.assertNotNull(gsonConverter83);
        org.junit.Assert.assertNotNull(server84);
        org.junit.Assert.assertNull(converter86);
    }

    @Test
    public void test1475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1475");
        retrofit.Server server1 = new retrofit.Server("POST");
        retrofit.client.Client.Provider provider2 = null;
        java.util.concurrent.Executor executor3 = null;
        java.util.concurrent.Executor executor4 = null;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = null;
        retrofit.RestAdapter.LogLevel logLevel15 = null;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request18 = serializedObjectSupporter17.deserializeObjectRequest6();
        restAdapter16.serializedObjectSupporter = serializedObjectSupporter17;
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter17.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter21 = serializedObjectSupporter17.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter17.deserializeObjectConverter1();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request25 = serializedObjectSupporter24.deserializeObjectRequest6();
        java.lang.String str26 = serializedObjectSupporter24.deserializeObjectString4();
        java.lang.String str27 = serializedObjectSupporter24.deserializeObjectString5();
        retrofit.ErrorHandler errorHandler28 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor30 = builder29.getcallbackExecutor();
        retrofit.Server server31 = builder29.server;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider33 = null;
        builder32.setclientProvider(provider33);
        retrofit.Server server36 = new retrofit.Server("Retrofit-");
        java.lang.String str37 = server36.name;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.Server server47 = builder46.server;
        java.util.concurrent.Executor executor48 = null;
        builder46.httpExecutor = executor48;
        java.util.concurrent.Executor executor50 = builder46.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.FULL;
        builder46.logLevel = logLevel51;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server36, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log45, logLevel51);
        retrofit.RestAdapter.Builder builder54 = builder32.setLog(log45);
        retrofit.RestAdapter.Builder builder55 = builder29.setLog(log45);
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.Server server57 = builder56.server;
        retrofit.converter.Converter converter58 = null;
        builder56.converter = converter58;
        retrofit.RestAdapter.Log log60 = builder56.log;
        retrofit.RestAdapter.LogLevel logLevel61 = builder56.logLevel;
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter(server1, provider2, executor3, executor4, requestInterceptor5, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler28, log45, logLevel61);
        java.lang.String str63 = server1.getapiUrl();
        org.junit.Assert.assertNotNull(request18);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNotNull(gsonConverter21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(request25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "http://example.com/" + "'", str26, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "POST" + "'", str27, "POST");
        org.junit.Assert.assertNotNull(errorHandler28);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNull(server31);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "default" + "'", str37, "default");
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNull(server47);
        org.junit.Assert.assertNull(executor50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(server57);
        org.junit.Assert.assertNull(log60);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "POST" + "'", str63, "POST");
    }

    @Test
    public void test1476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1476");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request16 = serializedObjectSupporter15.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter15.deserializeObjectConverter1();
        java.lang.String str18 = serializedObjectSupporter15.deserializeObjectString4();
        java.lang.String str19 = serializedObjectSupporter15.deserializeObjectString4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter15;
        retrofit.ErrorHandler errorHandler21 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor22 = restAdapter10.httpExecutor;
        retrofit.Server server23 = restAdapter10.server;
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter10.new RestHandler();
        retrofit.client.Client.Provider provider25 = restAdapter10.clientProvider;
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(server23);
        org.junit.Assert.assertNull(provider25);
    }

    @Test
    public void test1477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1477");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.Server server2 = builder0.server;
        retrofit.Server server5 = new retrofit.Server("default", "");
        retrofit.RestAdapter.Builder builder6 = builder0.setServer(server5);
        retrofit.Server server8 = new retrofit.Server("Retrofit-");
        java.lang.String str9 = server8.name;
        retrofit.client.Client.Provider provider10 = null;
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        retrofit.converter.Converter converter14 = null;
        retrofit.Profiler profiler15 = null;
        retrofit.ErrorHandler errorHandler16 = null;
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server19 = builder18.server;
        java.util.concurrent.Executor executor20 = null;
        builder18.httpExecutor = executor20;
        java.util.concurrent.Executor executor22 = builder18.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.FULL;
        builder18.logLevel = logLevel23;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter(server8, provider10, executor11, executor12, requestInterceptor13, converter14, profiler15, errorHandler16, log17, logLevel23);
        retrofit.RestAdapter.Builder builder26 = builder6.setLog(log17);
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor28 = builder27.getcallbackExecutor();
        retrofit.Server server29 = builder27.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = builder27.serializedObjectSupporter;
        retrofit.converter.Converter converter31 = builder27.converter;
        retrofit.Server server32 = null;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Log log40 = null;
        retrofit.RestAdapter.LogLevel logLevel41 = null;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log40, logLevel41);
        retrofit.SerializedObjectSupporter serializedObjectSupporter43 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request44 = serializedObjectSupporter43.deserializeObjectRequest6();
        restAdapter42.serializedObjectSupporter = serializedObjectSupporter43;
        retrofit.converter.GsonConverter gsonConverter46 = serializedObjectSupporter43.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter47 = serializedObjectSupporter43.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter48 = serializedObjectSupporter43.deserializeObjectConverter1();
        retrofit.client.Request request49 = serializedObjectSupporter43.deserializeObjectRequest5();
        retrofit.RequestInterceptor requestInterceptor50 = serializedObjectSupporter43.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder51 = builder27.setRequestInterceptor(requestInterceptor50);
        java.util.concurrent.Executor executor52 = null;
        builder27.setcallbackExecutor(executor52);
        retrofit.Server server55 = new retrofit.Server("Retrofit-");
        java.lang.String str56 = server55.name;
        retrofit.client.Client.Provider provider57 = null;
        java.util.concurrent.Executor executor58 = null;
        java.util.concurrent.Executor executor59 = null;
        retrofit.RequestInterceptor requestInterceptor60 = null;
        retrofit.converter.Converter converter61 = null;
        retrofit.Profiler profiler62 = null;
        retrofit.ErrorHandler errorHandler63 = null;
        retrofit.RestAdapter.Log log64 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.Server server66 = builder65.server;
        java.util.concurrent.Executor executor67 = null;
        builder65.httpExecutor = executor67;
        java.util.concurrent.Executor executor69 = builder65.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.FULL;
        builder65.logLevel = logLevel70;
        retrofit.RestAdapter restAdapter72 = new retrofit.RestAdapter(server55, provider57, executor58, executor59, requestInterceptor60, converter61, profiler62, errorHandler63, log64, logLevel70);
        builder27.log = log64;
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor75 = builder74.getcallbackExecutor();
        retrofit.Server server76 = builder74.server;
        retrofit.RestAdapter.Log log77 = builder74.log;
        retrofit.Server server78 = builder74.server;
        java.util.concurrent.Executor executor79 = builder74.getcallbackExecutor();
        builder74.ensureSaneDefaults();
        retrofit.client.Client.Provider provider81 = builder74.clientProvider;
        builder27.clientProvider = provider81;
        builder26.clientProvider = provider81;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(server2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "default" + "'", str9, "default");
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNull(server29);
        org.junit.Assert.assertNull(serializedObjectSupporter30);
        org.junit.Assert.assertNull(converter31);
        org.junit.Assert.assertNotNull(request44);
        org.junit.Assert.assertNotNull(gsonConverter46);
        org.junit.Assert.assertNotNull(gsonConverter47);
        org.junit.Assert.assertNotNull(gsonConverter48);
        org.junit.Assert.assertNotNull(request49);
        org.junit.Assert.assertNotNull(requestInterceptor50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "default" + "'", str56, "default");
        org.junit.Assert.assertNotNull(log64);
        org.junit.Assert.assertNull(server66);
        org.junit.Assert.assertNull(executor69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor75);
        org.junit.Assert.assertNull(server76);
        org.junit.Assert.assertNull(log77);
        org.junit.Assert.assertNull(server78);
        org.junit.Assert.assertNull(executor79);
        org.junit.Assert.assertNotNull(provider81);
    }

    @Test
    public void test1478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1478");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString2();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString5();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter0.deserializeObjectConverter3();
        retrofit.client.Request request7 = serializedObjectSupporter0.deserializeObjectRequest5();
        retrofit.client.Request request8 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter0.deserializeObjectConverter1();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter10 = serializedObjectSupporter0.deserializeObjectLogLevel1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Retrofit-Idle" + "'", str1, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "POST" + "'", str3, "POST");
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(gsonConverter6);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(request8);
        org.junit.Assert.assertNotNull(gsonConverter9);
    }

    @Test
    public void test1479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1479");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        java.util.concurrent.Executor executor2 = null;
        builder0.httpExecutor = executor2;
        java.util.concurrent.Executor executor4 = null;
        builder0.callbackExecutor = executor4;
        retrofit.RestAdapter.Log log6 = builder0.log;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = builder7.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor9 = null;
        builder7.requestInterceptor = requestInterceptor9;
        java.util.concurrent.Executor executor11 = null;
        builder7.setcallbackExecutor(executor11);
        retrofit.Server server14 = new retrofit.Server("POST");
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.Server server19 = null;
        retrofit.client.Client.Provider provider20 = null;
        java.util.concurrent.Executor executor21 = null;
        java.util.concurrent.Executor executor22 = null;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        retrofit.converter.Converter converter24 = null;
        retrofit.Profiler profiler25 = null;
        retrofit.ErrorHandler errorHandler26 = null;
        retrofit.RestAdapter.Log log27 = null;
        retrofit.RestAdapter.LogLevel logLevel28 = null;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server19, provider20, executor21, executor22, requestInterceptor23, converter24, profiler25, errorHandler26, log27, logLevel28);
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request31 = serializedObjectSupporter30.deserializeObjectRequest6();
        restAdapter29.serializedObjectSupporter = serializedObjectSupporter30;
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter30.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter34 = serializedObjectSupporter30.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter35 = serializedObjectSupporter30.deserializeObjectConverter1();
        retrofit.Profiler profiler36 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter37 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request38 = serializedObjectSupporter37.deserializeObjectRequest6();
        java.lang.String str39 = serializedObjectSupporter37.deserializeObjectString4();
        java.lang.String str40 = serializedObjectSupporter37.deserializeObjectString5();
        retrofit.ErrorHandler errorHandler41 = serializedObjectSupporter37.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor43 = builder42.getcallbackExecutor();
        retrofit.Server server44 = builder42.server;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider46 = null;
        builder45.setclientProvider(provider46);
        retrofit.Server server49 = new retrofit.Server("Retrofit-");
        java.lang.String str50 = server49.name;
        retrofit.client.Client.Provider provider51 = null;
        java.util.concurrent.Executor executor52 = null;
        java.util.concurrent.Executor executor53 = null;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        retrofit.converter.Converter converter55 = null;
        retrofit.Profiler profiler56 = null;
        retrofit.ErrorHandler errorHandler57 = null;
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.Server server60 = builder59.server;
        java.util.concurrent.Executor executor61 = null;
        builder59.httpExecutor = executor61;
        java.util.concurrent.Executor executor63 = builder59.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel64 = retrofit.RestAdapter.LogLevel.FULL;
        builder59.logLevel = logLevel64;
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter(server49, provider51, executor52, executor53, requestInterceptor54, converter55, profiler56, errorHandler57, log58, logLevel64);
        retrofit.RestAdapter.Builder builder67 = builder45.setLog(log58);
        retrofit.RestAdapter.Builder builder68 = builder42.setLog(log58);
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        retrofit.Server server70 = builder69.server;
        retrofit.converter.Converter converter71 = null;
        builder69.converter = converter71;
        retrofit.RestAdapter.Log log73 = builder69.log;
        retrofit.RestAdapter.LogLevel logLevel74 = builder69.logLevel;
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, (retrofit.converter.Converter) gsonConverter35, profiler36, errorHandler41, log58, logLevel74);
        builder7.errorHandler = errorHandler41;
        java.util.concurrent.Executor executor77 = null;
        builder7.callbackExecutor = executor77;
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        retrofit.Server server80 = builder79.server;
        java.util.concurrent.Executor executor81 = null;
        builder79.httpExecutor = executor81;
        java.util.concurrent.Executor executor83 = null;
        builder79.callbackExecutor = executor83;
        java.util.concurrent.Executor executor85 = null;
        builder79.callbackExecutor = executor85;
        builder79.ensureSaneDefaults();
        retrofit.client.Client.Provider provider88 = builder79.clientProvider;
        builder7.clientProvider = provider88;
        builder0.clientProvider = provider88;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(log6);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNotNull(request31);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(gsonConverter34);
        org.junit.Assert.assertNotNull(gsonConverter35);
        org.junit.Assert.assertNotNull(request38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "http://example.com/" + "'", str39, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "POST" + "'", str40, "POST");
        org.junit.Assert.assertNotNull(errorHandler41);
        org.junit.Assert.assertNull(executor43);
        org.junit.Assert.assertNull(server44);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "default" + "'", str50, "default");
        org.junit.Assert.assertNotNull(log58);
        org.junit.Assert.assertNull(server60);
        org.junit.Assert.assertNull(executor63);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNull(server70);
        org.junit.Assert.assertNull(log73);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server80);
        org.junit.Assert.assertNotNull(provider88);
    }

    @Test
    public void test1480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1480");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request16 = serializedObjectSupporter15.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter15.deserializeObjectConverter1();
        java.lang.String str18 = serializedObjectSupporter15.deserializeObjectString4();
        java.lang.String str19 = serializedObjectSupporter15.deserializeObjectString4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter15;
        retrofit.ErrorHandler errorHandler21 = restAdapter10.geterrorHandler();
        retrofit.Profiler profiler22 = restAdapter10.profiler;
        retrofit.converter.Converter converter23 = restAdapter10.converter;
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter10.new RestHandler();
        java.util.concurrent.Executor executor25 = restAdapter10.getcallbackExecutor();
        java.util.concurrent.Executor executor26 = restAdapter10.getcallbackExecutor();
        java.util.concurrent.Executor executor27 = restAdapter10.getcallbackExecutor();
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(converter23);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(executor27);
    }

    @Test
    public void test1481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1481");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request16 = serializedObjectSupporter15.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter15.deserializeObjectConverter1();
        java.lang.String str18 = serializedObjectSupporter15.deserializeObjectString4();
        java.lang.String str19 = serializedObjectSupporter15.deserializeObjectString4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter15;
        java.lang.String str21 = restAdapter10.getTHREAD_PREFIX();
        retrofit.Profiler profiler22 = restAdapter10.profiler;
        retrofit.Server server23 = restAdapter10.getserver();
        java.lang.Class<?> wildcardClass24 = restAdapter10.getClass();
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Retrofit-" + "'", str21, "Retrofit-");
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(server23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test1482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1482");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request12 = serializedObjectSupporter11.deserializeObjectRequest6();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter11;
        retrofit.Server server14 = restAdapter10.server;
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter10.getrequestInterceptor();
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNull(server14);
        org.junit.Assert.assertNull(requestInterceptor15);
    }

    @Test
    public void test1483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1483");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request16 = serializedObjectSupporter15.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter15.deserializeObjectConverter1();
        java.lang.String str18 = serializedObjectSupporter15.deserializeObjectString4();
        java.lang.String str19 = serializedObjectSupporter15.deserializeObjectString4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter15;
        retrofit.client.Request request21 = serializedObjectSupporter15.deserializeObjectRequest4();
        java.lang.String str22 = serializedObjectSupporter15.deserializeObjectString4();
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertNotNull(request21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "http://example.com/" + "'", str22, "http://example.com/");
    }

    @Test
    public void test1484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1484");
        retrofit.Server server2 = new retrofit.Server("http://example.com/", "hi!");
        java.lang.String str3 = server2.apiUrl;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
    }

    @Test
    public void test1485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1485");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        java.util.concurrent.Executor executor2 = null;
        builder0.httpExecutor = executor2;
        java.util.concurrent.Executor executor4 = null;
        builder0.callbackExecutor = executor4;
        java.util.concurrent.Executor executor6 = null;
        builder0.callbackExecutor = executor6;
        builder0.ensureSaneDefaults();
        retrofit.client.Client.Provider provider9 = builder0.clientProvider;
        retrofit.Profiler profiler10 = builder0.profiler;
        java.util.concurrent.Executor executor11 = null;
        builder0.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder14 = builder0.setServer("http://example.com");
        retrofit.client.Client client15 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder16 = builder0.setClient(client15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNotNull(provider9);
        org.junit.Assert.assertNull(profiler10);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1486");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request12 = serializedObjectSupporter11.deserializeObjectRequest6();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter11;
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter11.deserializeObjectConverter7();
        java.lang.String str15 = serializedObjectSupporter11.deserializeObjectString1();
        retrofit.Server server16 = serializedObjectSupporter11.deserializeObjectServer1();
        retrofit.Server server17 = serializedObjectSupporter11.deserializeObjectServer1();
        retrofit.converter.GsonConverter gsonConverter18 = serializedObjectSupporter11.deserializeObjectConverter6();
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Retrofit-" + "'", str15, "Retrofit-");
        org.junit.Assert.assertNotNull(server16);
        org.junit.Assert.assertNotNull(server17);
        org.junit.Assert.assertNotNull(gsonConverter18);
    }

    @Test
    public void test1487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1487");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.requestInterceptor;
        retrofit.client.Response response16 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response18 = restAdapter10.logAndReplaceResponse("POST", response16, (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(requestInterceptor14);
    }

    @Test
    public void test1488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1488");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest8();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest3();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter8();
        retrofit.client.Request request6 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.client.Request request7 = serializedObjectSupporter0.deserializeObjectRequest4();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(request6);
        org.junit.Assert.assertNotNull(request7);
    }

    @Test
    public void test1489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1489");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.converter.Converter converter2 = null;
        builder0.converter = converter2;
        retrofit.RestAdapter.Log log4 = builder0.log;
        retrofit.client.Client.Provider provider5 = null;
        builder0.clientProvider = provider5;
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = null;
        retrofit.RestAdapter.LogLevel logLevel16 = null;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel16);
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request19 = serializedObjectSupporter18.deserializeObjectRequest6();
        restAdapter17.serializedObjectSupporter = serializedObjectSupporter18;
        retrofit.converter.GsonConverter gsonConverter21 = serializedObjectSupporter18.deserializeObjectConverter7();
        builder0.converter = gsonConverter21;
        retrofit.RestAdapter.Log log23 = builder0.log;
        retrofit.client.Client.Provider provider24 = builder0.clientProvider;
        retrofit.Server server26 = new retrofit.Server("Retrofit-");
        java.lang.String str27 = server26.name;
        java.lang.String str28 = server26.apiUrl;
        java.lang.String str29 = server26.getUrl();
        java.lang.String str30 = server26.name;
        retrofit.RestAdapter.Builder builder31 = builder0.setServer(server26);
        retrofit.SerializedObjectSupporter serializedObjectSupporter32 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request33 = serializedObjectSupporter32.deserializeObjectRequest6();
        java.lang.String str34 = serializedObjectSupporter32.deserializeObjectString4();
        java.lang.String str35 = serializedObjectSupporter32.deserializeObjectString2();
        java.lang.String str36 = serializedObjectSupporter32.deserializeObjectString5();
        retrofit.client.Request request37 = serializedObjectSupporter32.deserializeObjectRequest2();
        retrofit.ErrorHandler errorHandler38 = serializedObjectSupporter32.deserializeObjectErrorHandler1();
        retrofit.converter.GsonConverter gsonConverter39 = serializedObjectSupporter32.deserializeObjectConverter6();
        retrofit.RestAdapter.Builder builder40 = builder0.setConverter((retrofit.converter.Converter) gsonConverter39);
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter42 = new retrofit.SerializedObjectSupporter();
        java.lang.String str43 = serializedObjectSupporter42.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter44 = serializedObjectSupporter42.deserializeObjectConverter3();
        builder41.serializedObjectSupporter = serializedObjectSupporter42;
        java.util.concurrent.Executor executor46 = null;
        builder41.callbackExecutor = executor46;
        retrofit.SerializedObjectSupporter serializedObjectSupporter48 = builder41.serializedObjectSupporter;
        retrofit.mime.TypedString typedString49 = serializedObjectSupporter48.deserializeObjectTypedOutput2();
        retrofit.Server server50 = serializedObjectSupporter48.deserializeObjectServer1();
        retrofit.converter.GsonConverter gsonConverter51 = serializedObjectSupporter48.deserializeObjectConverter2();
        retrofit.converter.GsonConverter gsonConverter52 = serializedObjectSupporter48.deserializeObjectConverter1();
        builder0.converter = gsonConverter52;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertNotNull(request19);
        org.junit.Assert.assertNotNull(gsonConverter21);
        org.junit.Assert.assertNull(log23);
        org.junit.Assert.assertNull(provider24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "default" + "'", str27, "default");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Retrofit-" + "'", str28, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Retrofit-" + "'", str29, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "default" + "'", str30, "default");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(request33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "http://example.com/" + "'", str34, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Retrofit-Idle" + "'", str35, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "POST" + "'", str36, "POST");
        org.junit.Assert.assertNotNull(request37);
        org.junit.Assert.assertNotNull(errorHandler38);
        org.junit.Assert.assertNotNull(gsonConverter39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Retrofit-Idle" + "'", str43, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter44);
        org.junit.Assert.assertNotNull(serializedObjectSupporter48);
        org.junit.Assert.assertNotNull(typedString49);
        org.junit.Assert.assertNotNull(server50);
        org.junit.Assert.assertNotNull(gsonConverter51);
        org.junit.Assert.assertNotNull(gsonConverter52);
    }

    @Test
    public void test1490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1490");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request12 = serializedObjectSupporter11.deserializeObjectRequest6();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter11;
        retrofit.RequestInterceptor requestInterceptor14 = serializedObjectSupporter11.deserializeObjectRequestInterceptor1();
        java.lang.String str15 = serializedObjectSupporter11.deserializeObjectString2();
        java.lang.String str16 = serializedObjectSupporter11.deserializeObjectString4();
        java.lang.String str17 = serializedObjectSupporter11.deserializeObjectString5();
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(requestInterceptor14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Retrofit-Idle" + "'", str15, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "http://example.com/" + "'", str16, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "POST" + "'", str17, "POST");
    }

    @Test
    public void test1491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1491");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        java.lang.String str2 = serializedObjectSupporter1.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter1.deserializeObjectConverter3();
        builder0.serializedObjectSupporter = serializedObjectSupporter1;
        java.util.concurrent.Executor executor5 = null;
        builder0.callbackExecutor = executor5;
        retrofit.SerializedObjectSupporter serializedObjectSupporter7 = builder0.serializedObjectSupporter;
        java.lang.String str8 = serializedObjectSupporter7.deserializeObjectString1();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter7.deserializeObjectConverter1();
        retrofit.client.Request request10 = serializedObjectSupporter7.deserializeObjectRequest2();
        retrofit.converter.GsonConverter gsonConverter11 = serializedObjectSupporter7.deserializeObjectConverter1();
        retrofit.Server server12 = serializedObjectSupporter7.deserializeObjectServer1();
        java.lang.String str13 = server12.getDEFAULT_NAME();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Retrofit-Idle" + "'", str2, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(serializedObjectSupporter7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Retrofit-" + "'", str8, "Retrofit-");
        org.junit.Assert.assertNotNull(gsonConverter9);
        org.junit.Assert.assertNotNull(request10);
        org.junit.Assert.assertNotNull(gsonConverter11);
        org.junit.Assert.assertNotNull(server12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "default" + "'", str13, "default");
    }

    @Test
    public void test1492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1492");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter10.new RestHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter10.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter10.getrequestInterceptor();
        java.lang.String str17 = restAdapter10.getTHREAD_PREFIX();
        retrofit.client.Client.Provider provider18 = restAdapter10.clientProvider;
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-" + "'", str17, "Retrofit-");
        org.junit.Assert.assertNull(provider18);
    }

    @Test
    public void test1493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1493");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request12 = serializedObjectSupporter11.deserializeObjectRequest6();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter11;
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter11.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter15 = serializedObjectSupporter11.deserializeObjectConverter7();
        java.lang.String str16 = serializedObjectSupporter11.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter11.deserializeObjectConverter1();
        retrofit.client.Request request18 = serializedObjectSupporter11.deserializeObjectRequest1();
        java.util.List<retrofit.client.Header> headerList19 = request18.getHeaders();
        java.util.List<retrofit.client.Header> headerList20 = request18.headers;
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(gsonConverter15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Retrofit-Idle" + "'", str16, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertNotNull(request18);
        org.junit.Assert.assertNotNull(headerList19);
        org.junit.Assert.assertNotNull(headerList20);
    }

    @Test
    public void test1494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1494");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor2 = null;
        builder0.requestInterceptor = requestInterceptor2;
        java.util.concurrent.Executor executor4 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor6 = builder5.getcallbackExecutor();
        retrofit.ErrorHandler errorHandler7 = builder5.errorHandler;
        java.util.concurrent.Executor executor8 = null;
        builder5.setcallbackExecutor(executor8);
        builder5.ensureSaneDefaults();
        java.util.concurrent.Executor executor11 = builder5.getcallbackExecutor();
        builder0.callbackExecutor = executor11;
        retrofit.RestAdapter.Log log13 = builder0.log;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNull(log13);
    }

    @Test
    public void test1495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1495");
        retrofit.Server server1 = new retrofit.Server("Retrofit-");
        java.lang.String str2 = server1.name;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.Server server12 = builder11.server;
        java.util.concurrent.Executor executor13 = null;
        builder11.httpExecutor = executor13;
        java.util.concurrent.Executor executor15 = builder11.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.FULL;
        builder11.logLevel = logLevel16;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter(server1, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log10, logLevel16);
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter18.new RestHandler();
        java.util.List<retrofit.client.Header> headerList22 = null;
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "", headerList22, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = request24.getBody();
        java.lang.String str26 = request24.url;
        java.util.List<retrofit.client.Header> headerList27 = request24.headers;
        retrofit.client.Request request28 = restAdapter18.logAndReplaceRequest(request24);
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor30 = builder29.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor31 = null;
        builder29.requestInterceptor = requestInterceptor31;
        retrofit.Server server33 = null;
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.RestAdapter.Log log41 = null;
        retrofit.RestAdapter.LogLevel logLevel42 = null;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter(server33, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log41, logLevel42);
        retrofit.SerializedObjectSupporter serializedObjectSupporter44 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request45 = serializedObjectSupporter44.deserializeObjectRequest6();
        restAdapter43.serializedObjectSupporter = serializedObjectSupporter44;
        retrofit.converter.GsonConverter gsonConverter47 = serializedObjectSupporter44.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter48 = serializedObjectSupporter44.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter49 = serializedObjectSupporter44.deserializeObjectConverter1();
        retrofit.ErrorHandler errorHandler50 = serializedObjectSupporter44.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder51 = builder29.setErrorHandler(errorHandler50);
        java.util.concurrent.Executor executor52 = null;
        builder29.sethttpExecutor(executor52);
        retrofit.RestAdapter.LogLevel logLevel54 = builder29.logLevel;
        restAdapter18.setLogLevel(logLevel54);
        retrofit.SerializedObjectSupporter serializedObjectSupporter56 = restAdapter18.serializedObjectSupporter;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "default" + "'", str2, "default");
        org.junit.Assert.assertNotNull(log10);
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(typedOutput25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(headerList27);
        org.junit.Assert.assertNotNull(request28);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNotNull(request45);
        org.junit.Assert.assertNotNull(gsonConverter47);
        org.junit.Assert.assertNotNull(gsonConverter48);
        org.junit.Assert.assertNotNull(gsonConverter49);
        org.junit.Assert.assertNotNull(errorHandler50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(serializedObjectSupporter56);
    }

    @Test
    public void test1496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1496");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        java.lang.String str2 = serializedObjectSupporter1.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter1.deserializeObjectConverter3();
        builder0.serializedObjectSupporter = serializedObjectSupporter1;
        java.util.concurrent.Executor executor5 = null;
        builder0.callbackExecutor = executor5;
        retrofit.SerializedObjectSupporter serializedObjectSupporter7 = builder0.serializedObjectSupporter;
        java.util.concurrent.Executor executor8 = null;
        builder0.callbackExecutor = executor8;
        retrofit.ErrorHandler errorHandler10 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.Server server12 = builder11.server;
        retrofit.converter.Converter converter13 = null;
        builder11.converter = converter13;
        retrofit.RestAdapter.Log log15 = builder11.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request17 = serializedObjectSupporter16.deserializeObjectRequest6();
        java.lang.String str18 = serializedObjectSupporter16.deserializeObjectString4();
        java.lang.String str19 = serializedObjectSupporter16.deserializeObjectString4();
        retrofit.ErrorHandler errorHandler20 = serializedObjectSupporter16.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder21 = builder11.setErrorHandler(errorHandler20);
        retrofit.Server server22 = null;
        retrofit.client.Client.Provider provider23 = null;
        java.util.concurrent.Executor executor24 = null;
        java.util.concurrent.Executor executor25 = null;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        retrofit.converter.Converter converter27 = null;
        retrofit.Profiler profiler28 = null;
        retrofit.ErrorHandler errorHandler29 = null;
        retrofit.RestAdapter.Log log30 = null;
        retrofit.RestAdapter.LogLevel logLevel31 = null;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server22, provider23, executor24, executor25, requestInterceptor26, converter27, profiler28, errorHandler29, log30, logLevel31);
        retrofit.SerializedObjectSupporter serializedObjectSupporter33 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request34 = serializedObjectSupporter33.deserializeObjectRequest6();
        restAdapter32.serializedObjectSupporter = serializedObjectSupporter33;
        retrofit.RequestInterceptor requestInterceptor36 = serializedObjectSupporter33.deserializeObjectRequestInterceptor1();
        java.lang.String str37 = serializedObjectSupporter33.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter38 = serializedObjectSupporter33.deserializeObjectConverter6();
        retrofit.RestAdapter.Builder builder39 = builder21.setConverter((retrofit.converter.Converter) gsonConverter38);
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor41 = builder40.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor42 = null;
        builder40.requestInterceptor = requestInterceptor42;
        java.util.concurrent.Executor executor44 = null;
        builder40.setcallbackExecutor(executor44);
        retrofit.ErrorHandler errorHandler46 = builder40.errorHandler;
        java.util.concurrent.Executor executor47 = null;
        builder40.callbackExecutor = executor47;
        retrofit.Profiler profiler49 = null;
        builder40.profiler = profiler49;
        retrofit.Server server51 = null;
        retrofit.client.Client.Provider provider52 = null;
        java.util.concurrent.Executor executor53 = null;
        java.util.concurrent.Executor executor54 = null;
        retrofit.RequestInterceptor requestInterceptor55 = null;
        retrofit.converter.Converter converter56 = null;
        retrofit.Profiler profiler57 = null;
        retrofit.ErrorHandler errorHandler58 = null;
        retrofit.RestAdapter.Log log59 = null;
        retrofit.RestAdapter.LogLevel logLevel60 = null;
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter(server51, provider52, executor53, executor54, requestInterceptor55, converter56, profiler57, errorHandler58, log59, logLevel60);
        retrofit.SerializedObjectSupporter serializedObjectSupporter62 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request63 = serializedObjectSupporter62.deserializeObjectRequest6();
        restAdapter61.serializedObjectSupporter = serializedObjectSupporter62;
        retrofit.converter.GsonConverter gsonConverter65 = serializedObjectSupporter62.deserializeObjectConverter7();
        java.lang.String str66 = serializedObjectSupporter62.deserializeObjectString1();
        retrofit.client.Request request67 = serializedObjectSupporter62.deserializeObjectRequest6();
        retrofit.Server server68 = serializedObjectSupporter62.deserializeObjectServer1();
        java.lang.String str69 = server68.getUrl();
        retrofit.RestAdapter.Builder builder70 = builder40.setServer(server68);
        java.util.concurrent.Executor executor71 = builder70.callbackExecutor;
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider73 = null;
        builder72.setclientProvider(provider73);
        retrofit.ErrorHandler errorHandler75 = builder72.errorHandler;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        retrofit.Server server77 = builder76.server;
        retrofit.Profiler profiler78 = builder76.profiler;
        retrofit.client.Client.Provider provider79 = null;
        builder76.setclientProvider(provider79);
        java.util.concurrent.Executor executor81 = builder76.getcallbackExecutor();
        retrofit.client.Client.Provider provider82 = null;
        builder76.clientProvider = provider82;
        retrofit.RestAdapter.Log log84 = builder76.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter85 = builder76.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter86 = new retrofit.SerializedObjectSupporter();
        java.lang.String str87 = serializedObjectSupporter86.deserializeObjectString2();
        retrofit.client.Request request88 = serializedObjectSupporter86.deserializeObjectRequest7();
        retrofit.ErrorHandler errorHandler89 = serializedObjectSupporter86.deserializeObjectErrorHandler1();
        builder76.errorHandler = errorHandler89;
        builder72.errorHandler = errorHandler89;
        retrofit.RestAdapter.Builder builder92 = builder70.setErrorHandler(errorHandler89);
        retrofit.RestAdapter.Builder builder93 = builder39.setErrorHandler(errorHandler89);
        retrofit.RestAdapter.Builder builder94 = builder0.setErrorHandler(errorHandler89);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Retrofit-Idle" + "'", str2, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(serializedObjectSupporter7);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(log15);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(request34);
        org.junit.Assert.assertNotNull(requestInterceptor36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Retrofit-Idle" + "'", str37, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(executor41);
        org.junit.Assert.assertNull(errorHandler46);
        org.junit.Assert.assertNotNull(request63);
        org.junit.Assert.assertNotNull(gsonConverter65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Retrofit-" + "'", str66, "Retrofit-");
        org.junit.Assert.assertNotNull(request67);
        org.junit.Assert.assertNotNull(server68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "http://example.com" + "'", str69, "http://example.com");
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(executor71);
        org.junit.Assert.assertNull(errorHandler75);
        org.junit.Assert.assertNull(server77);
        org.junit.Assert.assertNull(profiler78);
        org.junit.Assert.assertNull(executor81);
        org.junit.Assert.assertNull(log84);
        org.junit.Assert.assertNull(serializedObjectSupporter85);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "Retrofit-Idle" + "'", str87, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(request88);
        org.junit.Assert.assertNotNull(errorHandler89);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder94);
    }

    @Test
    public void test1497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1497");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString4();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest7();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter5 = serializedObjectSupporter0.deserializeObjectLogLevel1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "http://example.com/" + "'", str2, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertNotNull(request4);
    }

    @Test
    public void test1498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1498");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        java.lang.String str2 = serializedObjectSupporter1.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter1.deserializeObjectConverter3();
        builder0.serializedObjectSupporter = serializedObjectSupporter1;
        java.util.concurrent.Executor executor5 = null;
        builder0.callbackExecutor = executor5;
        retrofit.SerializedObjectSupporter serializedObjectSupporter7 = builder0.serializedObjectSupporter;
        retrofit.mime.TypedString typedString8 = serializedObjectSupporter7.deserializeObjectTypedOutput2();
        retrofit.Server server9 = serializedObjectSupporter7.deserializeObjectServer1();
        java.lang.String str10 = server9.name;
        java.lang.String str11 = server9.getDEFAULT_NAME();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Retrofit-Idle" + "'", str2, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(serializedObjectSupporter7);
        org.junit.Assert.assertNotNull(typedString8);
        org.junit.Assert.assertNotNull(server9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "default" + "'", str10, "default");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "default" + "'", str11, "default");
    }

    @Test
    public void test1499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1499");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter1();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString1();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest5();
        retrofit.Server server6 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter0.deserializeObjectConverter8();
        java.lang.String str8 = serializedObjectSupporter0.deserializeObjectString5();
        retrofit.Server server9 = serializedObjectSupporter0.deserializeObjectServer1();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Retrofit-" + "'", str4, "Retrofit-");
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(server6);
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "POST" + "'", str8, "POST");
        org.junit.Assert.assertNotNull(server9);
    }

    @Test
    public void test1500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1500");
        retrofit.Server server2 = new retrofit.Server("http://example.com", "");
    }
}

