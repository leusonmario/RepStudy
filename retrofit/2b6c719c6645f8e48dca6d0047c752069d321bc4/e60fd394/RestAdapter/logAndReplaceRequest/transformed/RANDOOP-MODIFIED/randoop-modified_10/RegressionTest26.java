import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest26 {

    public static boolean debug = false;

    @Test
    public void test13001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13001");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.Server server5 = new retrofit.Server("hi!", "hi!");
        restAdapter0.server = server5;
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter0.getLogLevel();
        retrofit.Profiler profiler8 = restAdapter0.profiler;
        retrofit.RestAdapter.LogLevel logLevel9 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler10 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(logLevel7);
        org.junit.Assert.assertNull(profiler8);
        org.junit.Assert.assertNull(logLevel9);
    }

    @Test
    public void test13002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13002");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.converter.Converter converter2 = null;
        restAdapter0.converter = converter2;
        retrofit.ErrorHandler errorHandler4 = restAdapter0.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter0.logLevel;
        retrofit.RestAdapter.Log log6 = restAdapter0.log;
        retrofit.RestAdapter.RestHandler restHandler7 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(errorHandler4);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log6);
    }

    @Test
    public void test13003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13003");
        retrofit.client.Header[] headerArray14 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList15 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList15, headerArray14);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList15, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList15, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList15, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("default", "default", (java.util.List<retrofit.client.Header>) headerList15, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("default", "hi!", (java.util.List<retrofit.client.Header>) headerList15, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("default", "default", (java.util.List<retrofit.client.Header>) headerList15, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList15, typedOutput29);
        org.junit.Assert.assertNotNull(headerArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test13004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13004");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        builder0.requestInterceptor = requestInterceptor2;
        java.util.concurrent.Executor executor4 = builder0.httpExecutor;
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        log5.log("default");
        builder0.log = log5;
        retrofit.converter.Converter converter9 = null;
        builder0.converter = converter9;
        retrofit.RestAdapter.Builder builder12 = builder0.setServer("default");
        retrofit.Profiler profiler13 = null;
        builder12.profiler = profiler13;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.Server server18 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder19 = builder15.setServer(server18);
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor21 = restAdapter20.callbackExecutor;
        java.util.concurrent.Executor executor22 = restAdapter20.callbackExecutor;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler24 = restAdapter23.errorHandler;
        retrofit.Server server27 = new retrofit.Server("", "");
        restAdapter23.server = server27;
        restAdapter20.server = server27;
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        restAdapter20.log = log30;
        retrofit.RestAdapter.Builder builder32 = builder19.setLog(log30);
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder34 = builder19.setLogLevel(logLevel33);
        retrofit.Profiler profiler35 = null;
        builder34.profiler = profiler35;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.Server server40 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder41 = builder37.setServer(server40);
        retrofit.RestAdapter.LogLevel logLevel42 = builder41.logLevel;
        retrofit.RestAdapter.Builder builder43 = builder34.setLogLevel(logLevel42);
        java.util.concurrent.Executor executor44 = builder43.callbackExecutor;
        retrofit.RestAdapter.Log log45 = builder43.log;
        retrofit.RestAdapter.Builder builder46 = builder12.setLog(log45);
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor48 = restAdapter47.callbackExecutor;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor50 = restAdapter49.callbackExecutor;
        java.util.concurrent.Executor executor51 = restAdapter49.callbackExecutor;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler53 = restAdapter52.errorHandler;
        retrofit.Server server56 = new retrofit.Server("", "");
        restAdapter52.server = server56;
        restAdapter49.server = server56;
        restAdapter47.server = server56;
        retrofit.Profiler profiler60 = restAdapter47.profiler;
        retrofit.ErrorHandler errorHandler61 = null;
        restAdapter47.errorHandler = errorHandler61;
        retrofit.Profiler profiler63 = null;
        restAdapter47.profiler = profiler63;
        retrofit.RestAdapter.LogLevel logLevel65 = restAdapter47.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel66 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter47.logLevel = logLevel66;
        retrofit.RestAdapter.Builder builder68 = builder12.setLogLevel(logLevel66);
        java.util.concurrent.Executor executor69 = builder12.httpExecutor;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(executor44);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(executor48);
        org.junit.Assert.assertNull(executor50);
        org.junit.Assert.assertNull(executor51);
        org.junit.Assert.assertNull(errorHandler53);
        org.junit.Assert.assertNull(profiler60);
        org.junit.Assert.assertNull(logLevel65);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNull(executor69);
    }

    @Test
    public void test13005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13005");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.converter.Converter converter4 = builder0.converter;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor8 = restAdapter7.callbackExecutor;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor10 = restAdapter9.callbackExecutor;
        java.util.concurrent.Executor executor11 = restAdapter9.callbackExecutor;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler13 = restAdapter12.errorHandler;
        retrofit.Server server16 = new retrofit.Server("", "");
        restAdapter12.server = server16;
        restAdapter9.server = server16;
        restAdapter7.server = server16;
        retrofit.client.Client.Provider provider20 = null;
        java.util.concurrent.Executor executor21 = null;
        java.util.concurrent.Executor executor22 = null;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        retrofit.converter.Converter converter24 = null;
        retrofit.Profiler profiler25 = null;
        retrofit.ErrorHandler errorHandler26 = null;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler28 = builder27.errorHandler;
        retrofit.Server server31 = new retrofit.Server("", "");
        builder27.server = server31;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler41 = builder40.errorHandler;
        retrofit.Server server44 = new retrofit.Server("", "");
        builder40.server = server44;
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        builder40.log = log46;
        retrofit.Server server48 = null;
        retrofit.client.Client.Provider provider49 = null;
        java.util.concurrent.Executor executor50 = null;
        java.util.concurrent.Executor executor51 = null;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        retrofit.converter.Converter converter53 = null;
        retrofit.Profiler profiler54 = null;
        retrofit.ErrorHandler errorHandler55 = null;
        retrofit.RestAdapter.Log log56 = retrofit.RestAdapter.Log.NONE;
        log56.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter(server48, provider49, executor50, executor51, requestInterceptor52, converter53, profiler54, errorHandler55, log56, logLevel59);
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter(server31, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log46, logLevel59);
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.Server server65 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder66 = builder62.setServer(server65);
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor68 = restAdapter67.callbackExecutor;
        java.util.concurrent.Executor executor69 = restAdapter67.callbackExecutor;
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler71 = restAdapter70.errorHandler;
        retrofit.Server server74 = new retrofit.Server("", "");
        restAdapter70.server = server74;
        restAdapter67.server = server74;
        retrofit.RestAdapter.Log log77 = retrofit.RestAdapter.Log.NONE;
        restAdapter67.log = log77;
        retrofit.RestAdapter.Builder builder79 = builder66.setLog(log77);
        retrofit.RestAdapter.LogLevel logLevel80 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder81 = builder66.setLogLevel(logLevel80);
        retrofit.RestAdapter restAdapter82 = new retrofit.RestAdapter(server16, provider20, executor21, executor22, requestInterceptor23, converter24, profiler25, errorHandler26, log46, logLevel80);
        builder0.logLevel = logLevel80;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter85 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor86 = restAdapter85.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel87 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean88 = logLevel87.log();
        restAdapter85.logLevel = logLevel87;
        retrofit.RestAdapter.Builder builder90 = builder0.setLogLevel(logLevel87);
        java.util.concurrent.Executor executor91 = builder0.callbackExecutor;
        java.util.concurrent.Executor executor92 = builder0.httpExecutor;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter93 = builder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertNull(errorHandler41);
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(executor68);
        org.junit.Assert.assertNull(executor69);
        org.junit.Assert.assertNull(errorHandler71);
        org.junit.Assert.assertNotNull(log77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertTrue("'" + logLevel80 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel80.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNull(executor86);
        org.junit.Assert.assertTrue("'" + logLevel87 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel87.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(executor91);
        org.junit.Assert.assertNotNull(executor92);
    }

    @Test
    public void test13006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13006");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.ErrorHandler errorHandler3 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder7 = builder5.setServer("hi!");
        retrofit.ErrorHandler errorHandler8 = builder5.errorHandler;
        retrofit.Server server11 = new retrofit.Server("", "");
        builder5.server = server11;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor14 = restAdapter13.callbackExecutor;
        java.util.concurrent.Executor executor15 = restAdapter13.callbackExecutor;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler17 = restAdapter16.errorHandler;
        retrofit.Server server20 = new retrofit.Server("", "");
        restAdapter16.server = server20;
        restAdapter13.server = server20;
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter13.logLevel;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        restAdapter13.requestInterceptor = requestInterceptor24;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler27 = builder26.errorHandler;
        retrofit.ErrorHandler errorHandler28 = builder26.errorHandler;
        retrofit.RestAdapter.Log log29 = null;
        builder26.log = log29;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean32 = logLevel31.log();
        builder26.logLevel = logLevel31;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler35 = restAdapter34.new RestHandler();
        java.util.concurrent.Executor executor36 = null;
        restAdapter34.callbackExecutor = executor36;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor39 = restAdapter38.callbackExecutor;
        java.util.concurrent.Executor executor40 = restAdapter38.callbackExecutor;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler42 = restAdapter41.errorHandler;
        retrofit.Server server45 = new retrofit.Server("", "");
        restAdapter41.server = server45;
        restAdapter38.server = server45;
        restAdapter34.server = server45;
        retrofit.RestAdapter.Builder builder49 = builder26.setServer(server45);
        java.lang.String str50 = server45.getUrl();
        restAdapter13.server = server45;
        retrofit.RestAdapter.Builder builder52 = builder5.setServer(server45);
        java.util.concurrent.Executor executor53 = builder52.httpExecutor;
        retrofit.RestAdapter.Log log54 = builder52.log;
        retrofit.Profiler profiler55 = null;
        builder52.profiler = profiler55;
        retrofit.Profiler profiler57 = null;
        builder52.profiler = profiler57;
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNull(executor40);
        org.junit.Assert.assertNull(errorHandler42);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(executor53);
        org.junit.Assert.assertNull(log54);
    }

    @Test
    public void test13007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13007");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = null;
        restAdapter0.requestInterceptor = requestInterceptor1;
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter0.new RestHandler();
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor5 = restAdapter4.callbackExecutor;
        retrofit.RestAdapter restAdapter6 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor7 = restAdapter6.callbackExecutor;
        java.util.concurrent.Executor executor8 = restAdapter6.callbackExecutor;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler10 = restAdapter9.errorHandler;
        retrofit.Server server13 = new retrofit.Server("", "");
        restAdapter9.server = server13;
        restAdapter6.server = server13;
        restAdapter4.server = server13;
        retrofit.Profiler profiler17 = restAdapter4.profiler;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter4.errorHandler = errorHandler18;
        retrofit.Profiler profiler20 = null;
        restAdapter4.profiler = profiler20;
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter4.getLogLevel();
        retrofit.ErrorHandler errorHandler24 = null;
        restAdapter4.errorHandler = errorHandler24;
        retrofit.client.Client.Provider provider26 = null;
        restAdapter4.clientProvider = provider26;
        retrofit.ErrorHandler errorHandler28 = restAdapter4.errorHandler;
        retrofit.Server server29 = restAdapter4.server;
        java.lang.String str30 = server29.getName();
        restAdapter0.server = server29;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler33 = builder32.errorHandler;
        retrofit.ErrorHandler errorHandler34 = builder32.errorHandler;
        retrofit.RestAdapter.Log log35 = null;
        builder32.log = log35;
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean38 = logLevel37.log();
        builder32.logLevel = logLevel37;
        retrofit.ErrorHandler errorHandler40 = builder32.errorHandler;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler42 = null;
        builder41.errorHandler = errorHandler42;
        retrofit.ErrorHandler errorHandler44 = builder41.errorHandler;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler46 = builder45.errorHandler;
        retrofit.Server server49 = new retrofit.Server("", "");
        builder45.server = server49;
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        builder45.log = log51;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler54 = builder53.errorHandler;
        retrofit.client.Client.Provider provider55 = null;
        builder53.clientProvider = provider55;
        retrofit.Server server59 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder60 = builder53.setServer(server59);
        retrofit.converter.Converter converter61 = null;
        builder60.converter = converter61;
        retrofit.RestAdapter restAdapter63 = builder60.build();
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler65 = builder64.errorHandler;
        java.util.concurrent.Executor executor66 = null;
        builder64.callbackExecutor = executor66;
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider69 = builder68.clientProvider;
        java.util.concurrent.Executor executor70 = null;
        builder68.callbackExecutor = executor70;
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        retrofit.Server server75 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder76 = builder72.setServer(server75);
        java.lang.String str77 = server75.getUrl();
        retrofit.RestAdapter.Builder builder78 = builder68.setServer(server75);
        retrofit.RestAdapter.Builder builder79 = builder64.setServer(server75);
        restAdapter63.server = server75;
        java.util.concurrent.Executor executor81 = restAdapter63.httpExecutor;
        builder45.httpExecutor = executor81;
        builder41.httpExecutor = executor81;
        builder32.httpExecutor = executor81;
        restAdapter0.callbackExecutor = executor81;
        retrofit.Profiler profiler86 = null;
        restAdapter0.profiler = profiler86;
        retrofit.Profiler profiler88 = null;
        restAdapter0.profiler = profiler88;
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNull(profiler17);
        org.junit.Assert.assertNull(logLevel22);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertNotNull(server29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNull(errorHandler33);
        org.junit.Assert.assertNull(errorHandler34);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNull(errorHandler44);
        org.junit.Assert.assertNull(errorHandler46);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNull(errorHandler54);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(restAdapter63);
        org.junit.Assert.assertNull(errorHandler65);
        org.junit.Assert.assertNull(provider69);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "hi!" + "'", str77, "hi!");
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(executor81);
    }

    @Test
    public void test13008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13008");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        java.util.concurrent.Executor executor3 = builder0.callbackExecutor;
        java.util.concurrent.Executor executor4 = null;
        builder0.callbackExecutor = executor4;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler7 = builder6.errorHandler;
        retrofit.Server server10 = new retrofit.Server("", "");
        builder6.server = server10;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        builder6.log = log12;
        retrofit.RestAdapter.LogLevel logLevel14 = builder6.logLevel;
        retrofit.RestAdapter.Builder builder15 = builder0.setLogLevel(logLevel14);
        retrofit.converter.Converter converter16 = null;
        builder0.converter = converter16;
        retrofit.Profiler profiler18 = builder0.profiler;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor20 = restAdapter19.callbackExecutor;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor22 = restAdapter21.callbackExecutor;
        java.util.concurrent.Executor executor23 = restAdapter21.callbackExecutor;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler25 = restAdapter24.errorHandler;
        retrofit.Server server28 = new retrofit.Server("", "");
        restAdapter24.server = server28;
        restAdapter21.server = server28;
        restAdapter19.server = server28;
        retrofit.Profiler profiler32 = restAdapter19.profiler;
        retrofit.ErrorHandler errorHandler33 = null;
        restAdapter19.errorHandler = errorHandler33;
        retrofit.Profiler profiler35 = null;
        restAdapter19.profiler = profiler35;
        java.util.concurrent.Executor executor37 = null;
        restAdapter19.httpExecutor = executor37;
        retrofit.Profiler profiler39 = restAdapter19.profiler;
        retrofit.RestAdapter.LogLevel logLevel40 = restAdapter19.getLogLevel();
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor42 = restAdapter41.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler43 = restAdapter41.new RestHandler();
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor45 = restAdapter44.callbackExecutor;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor47 = restAdapter46.callbackExecutor;
        java.util.concurrent.Executor executor48 = restAdapter46.callbackExecutor;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler50 = restAdapter49.errorHandler;
        retrofit.Server server53 = new retrofit.Server("", "");
        restAdapter49.server = server53;
        restAdapter46.server = server53;
        restAdapter44.server = server53;
        retrofit.Profiler profiler57 = restAdapter44.profiler;
        retrofit.ErrorHandler errorHandler58 = null;
        restAdapter44.errorHandler = errorHandler58;
        retrofit.Profiler profiler60 = null;
        restAdapter44.profiler = profiler60;
        retrofit.RestAdapter.LogLevel logLevel62 = restAdapter44.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter44.logLevel = logLevel63;
        restAdapter41.logLevel = logLevel63;
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        retrofit.Server server69 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder70 = builder66.setServer(server69);
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor72 = restAdapter71.callbackExecutor;
        java.util.concurrent.Executor executor73 = restAdapter71.callbackExecutor;
        retrofit.RestAdapter restAdapter74 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler75 = restAdapter74.errorHandler;
        retrofit.Server server78 = new retrofit.Server("", "");
        restAdapter74.server = server78;
        restAdapter71.server = server78;
        retrofit.RestAdapter.Log log81 = retrofit.RestAdapter.Log.NONE;
        restAdapter71.log = log81;
        retrofit.RestAdapter.Builder builder83 = builder70.setLog(log81);
        retrofit.RestAdapter.LogLevel logLevel84 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder85 = builder70.setLogLevel(logLevel84);
        retrofit.Profiler profiler86 = null;
        builder85.profiler = profiler86;
        retrofit.converter.Converter converter88 = null;
        builder85.converter = converter88;
        retrofit.ErrorHandler errorHandler90 = null;
        builder85.errorHandler = errorHandler90;
        retrofit.RestAdapter restAdapter92 = builder85.build();
        retrofit.ErrorHandler errorHandler93 = builder85.errorHandler;
        restAdapter41.errorHandler = errorHandler93;
        restAdapter19.errorHandler = errorHandler93;
        retrofit.RestAdapter.Builder builder96 = builder0.setErrorHandler(errorHandler93);
        retrofit.converter.Converter converter97 = builder0.converter;
        retrofit.converter.Converter converter98 = builder0.converter;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(profiler18);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNull(errorHandler25);
        org.junit.Assert.assertNull(profiler32);
        org.junit.Assert.assertNull(profiler39);
        org.junit.Assert.assertNull(logLevel40);
        org.junit.Assert.assertNull(executor42);
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertNull(executor47);
        org.junit.Assert.assertNull(executor48);
        org.junit.Assert.assertNull(errorHandler50);
        org.junit.Assert.assertNull(profiler57);
        org.junit.Assert.assertNull(logLevel62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(executor72);
        org.junit.Assert.assertNull(executor73);
        org.junit.Assert.assertNull(errorHandler75);
        org.junit.Assert.assertNotNull(log81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertTrue("'" + logLevel84 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel84.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(restAdapter92);
        org.junit.Assert.assertNotNull(errorHandler93);
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNull(converter97);
        org.junit.Assert.assertNull(converter98);
    }

    @Test
    public void test13009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13009");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        java.util.concurrent.Executor executor4 = null;
        builder0.httpExecutor = executor4;
        retrofit.Profiler profiler6 = null;
        builder0.profiler = profiler6;
        retrofit.RestAdapter.Builder builder9 = builder0.setServer("hi!");
        retrofit.Profiler profiler10 = builder0.profiler;
        java.util.concurrent.Executor executor11 = builder0.httpExecutor;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler13 = builder12.errorHandler;
        java.util.concurrent.Executor executor14 = builder12.callbackExecutor;
        retrofit.RestAdapter.Builder builder16 = builder12.setServer("hi!");
        retrofit.Server server19 = new retrofit.Server("default", "hi!");
        java.lang.String str20 = server19.getUrl();
        retrofit.RestAdapter.Builder builder21 = builder16.setServer(server19);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler23 = builder22.errorHandler;
        retrofit.ErrorHandler errorHandler24 = builder22.errorHandler;
        java.util.concurrent.Executor executor25 = builder22.callbackExecutor;
        java.util.concurrent.Executor executor26 = null;
        builder22.callbackExecutor = executor26;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler29 = builder28.errorHandler;
        retrofit.Server server32 = new retrofit.Server("", "");
        builder28.server = server32;
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        builder28.log = log34;
        retrofit.RestAdapter.LogLevel logLevel36 = builder28.logLevel;
        retrofit.RestAdapter.Builder builder37 = builder22.setLogLevel(logLevel36);
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler39 = builder38.errorHandler;
        retrofit.client.Client.Provider provider40 = null;
        builder38.clientProvider = provider40;
        retrofit.Server server44 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder45 = builder38.setServer(server44);
        retrofit.converter.Converter converter46 = null;
        builder45.converter = converter46;
        retrofit.RestAdapter restAdapter48 = builder45.build();
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler50 = builder49.errorHandler;
        java.util.concurrent.Executor executor51 = null;
        builder49.callbackExecutor = executor51;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider54 = builder53.clientProvider;
        java.util.concurrent.Executor executor55 = null;
        builder53.callbackExecutor = executor55;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.Server server60 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder61 = builder57.setServer(server60);
        java.lang.String str62 = server60.getUrl();
        retrofit.RestAdapter.Builder builder63 = builder53.setServer(server60);
        retrofit.RestAdapter.Builder builder64 = builder49.setServer(server60);
        restAdapter48.server = server60;
        retrofit.client.Client.Provider provider66 = restAdapter48.clientProvider;
        retrofit.RestAdapter.Builder builder67 = builder37.setClient(provider66);
        retrofit.RestAdapter.Builder builder68 = builder21.setClient(provider66);
        retrofit.RestAdapter.Builder builder69 = builder0.setClient(provider66);
        retrofit.RequestInterceptor requestInterceptor70 = builder69.requestInterceptor;
        java.util.concurrent.Executor executor71 = builder69.httpExecutor;
        retrofit.RestAdapter restAdapter72 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel73 = restAdapter72.logLevel;
        retrofit.RestAdapter.RestHandler restHandler74 = restAdapter72.new RestHandler();
        retrofit.RestAdapter.Log log75 = retrofit.RestAdapter.Log.NONE;
        log75.log("");
        restAdapter72.log = log75;
        retrofit.RestAdapter.Builder builder79 = builder69.setLog(log75);
        retrofit.RestAdapter.Builder builder81 = builder79.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel82 = builder81.logLevel;
        retrofit.client.Client.Provider provider83 = builder81.clientProvider;
        retrofit.ErrorHandler errorHandler84 = builder81.errorHandler;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(profiler10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "default" + "'", str20, "default");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(restAdapter48);
        org.junit.Assert.assertNull(errorHandler50);
        org.junit.Assert.assertNull(provider54);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(provider66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNull(requestInterceptor70);
        org.junit.Assert.assertNull(executor71);
        org.junit.Assert.assertNull(logLevel73);
        org.junit.Assert.assertNotNull(log75);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(provider83);
        org.junit.Assert.assertNull(errorHandler84);
    }

    @Test
    public void test13010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13010");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.ErrorHandler errorHandler3 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder7 = builder5.setServer("hi!");
        retrofit.ErrorHandler errorHandler8 = builder5.errorHandler;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RequestInterceptor requestInterceptor10 = null;
        builder9.requestInterceptor = requestInterceptor10;
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        log20.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel23);
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter24.new RestHandler();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        restAdapter24.log = log26;
        retrofit.converter.Converter converter28 = null;
        restAdapter24.converter = converter28;
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter24.getLogLevel();
        builder9.logLevel = logLevel30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler33 = builder32.errorHandler;
        retrofit.client.Client.Provider provider34 = null;
        builder32.clientProvider = provider34;
        retrofit.Server server38 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder39 = builder32.setServer(server38);
        retrofit.converter.Converter converter40 = null;
        builder39.converter = converter40;
        retrofit.RestAdapter restAdapter42 = builder39.build();
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler44 = builder43.errorHandler;
        java.util.concurrent.Executor executor45 = null;
        builder43.callbackExecutor = executor45;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider48 = builder47.clientProvider;
        java.util.concurrent.Executor executor49 = null;
        builder47.callbackExecutor = executor49;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.Server server54 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder55 = builder51.setServer(server54);
        java.lang.String str56 = server54.getUrl();
        retrofit.RestAdapter.Builder builder57 = builder47.setServer(server54);
        retrofit.RestAdapter.Builder builder58 = builder43.setServer(server54);
        restAdapter42.server = server54;
        retrofit.Server server60 = restAdapter42.server;
        retrofit.RestAdapter.RestHandler restHandler61 = restAdapter42.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel62 = restAdapter42.getLogLevel();
        retrofit.client.Header[] headerArray65 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList66 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList66, headerArray65);
        retrofit.mime.TypedOutput typedOutput68 = null;
        retrofit.client.Request request69 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList66, typedOutput68);
        java.util.List<retrofit.client.Header> headerList70 = request69.getHeaders();
        java.util.List<retrofit.client.Header> headerList71 = request69.getHeaders();
        retrofit.mime.TypedOutput typedOutput72 = request69.getBody();
        retrofit.client.Request request73 = restAdapter42.logAndReplaceRequest(request69);
        java.util.concurrent.Executor executor74 = restAdapter42.httpExecutor;
        builder9.callbackExecutor = executor74;
        builder5.callbackExecutor = executor74;
        retrofit.RestAdapter.Builder builder77 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler78 = builder77.errorHandler;
        retrofit.client.Client.Provider provider79 = null;
        builder77.clientProvider = provider79;
        retrofit.Server server83 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder84 = builder77.setServer(server83);
        retrofit.converter.Converter converter85 = null;
        builder84.converter = converter85;
        retrofit.RestAdapter restAdapter87 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor88 = restAdapter87.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler89 = restAdapter87.new RestHandler();
        retrofit.Server server92 = new retrofit.Server("hi!", "hi!");
        restAdapter87.server = server92;
        retrofit.Server server94 = restAdapter87.server;
        builder84.server = server94;
        java.lang.String str96 = server94.getUrl();
        builder5.server = server94;
        java.util.concurrent.Executor executor98 = builder5.callbackExecutor;
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler33);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(restAdapter42);
        org.junit.Assert.assertNull(errorHandler44);
        org.junit.Assert.assertNull(provider48);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(server60);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(headerArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(headerList70);
        org.junit.Assert.assertNotNull(headerList71);
        org.junit.Assert.assertNull(typedOutput72);
        org.junit.Assert.assertNotNull(request73);
        org.junit.Assert.assertNotNull(executor74);
        org.junit.Assert.assertNull(errorHandler78);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNull(executor88);
        org.junit.Assert.assertNotNull(server94);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "hi!" + "'", str96, "hi!");
        org.junit.Assert.assertNotNull(executor98);
    }

    @Test
    public void test13011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13011");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter0.requestInterceptor;
        retrofit.ErrorHandler errorHandler17 = restAdapter0.errorHandler;
        retrofit.Profiler profiler18 = restAdapter0.profiler;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler20 = builder19.errorHandler;
        retrofit.client.Client.Provider provider21 = null;
        builder19.clientProvider = provider21;
        retrofit.Server server25 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder26 = builder19.setServer(server25);
        retrofit.converter.Converter converter27 = null;
        builder26.converter = converter27;
        retrofit.RestAdapter restAdapter29 = builder26.build();
        java.util.concurrent.Executor executor30 = restAdapter29.httpExecutor;
        restAdapter0.httpExecutor = executor30;
        retrofit.client.Client.Provider provider32 = restAdapter0.clientProvider;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor34 = restAdapter33.callbackExecutor;
        java.util.concurrent.Executor executor35 = restAdapter33.callbackExecutor;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler37 = restAdapter36.errorHandler;
        retrofit.Server server40 = new retrofit.Server("", "");
        restAdapter36.server = server40;
        restAdapter33.server = server40;
        retrofit.RestAdapter.RestHandler restHandler43 = restAdapter33.new RestHandler();
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor45 = restAdapter44.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler46 = restAdapter44.new RestHandler();
        retrofit.Server server49 = new retrofit.Server("hi!", "hi!");
        restAdapter44.server = server49;
        retrofit.Server server51 = restAdapter44.server;
        restAdapter33.server = server51;
        restAdapter0.server = server51;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler55 = builder54.errorHandler;
        retrofit.client.Client.Provider provider56 = null;
        builder54.clientProvider = provider56;
        retrofit.Server server60 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder61 = builder54.setServer(server60);
        retrofit.converter.Converter converter62 = null;
        builder61.converter = converter62;
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor65 = restAdapter64.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler66 = restAdapter64.new RestHandler();
        retrofit.Server server69 = new retrofit.Server("hi!", "hi!");
        restAdapter64.server = server69;
        retrofit.Server server71 = restAdapter64.server;
        builder61.server = server71;
        restAdapter0.server = server71;
        java.lang.String str74 = server71.getName();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(profiler18);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(restAdapter29);
        org.junit.Assert.assertNotNull(executor30);
        org.junit.Assert.assertNull(provider32);
        org.junit.Assert.assertNull(executor34);
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertNotNull(server51);
        org.junit.Assert.assertNull(errorHandler55);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(executor65);
        org.junit.Assert.assertNotNull(server71);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "hi!" + "'", str74, "hi!");
    }

    @Test
    public void test13012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13012");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        restAdapter5.log = log15;
        retrofit.RestAdapter.Builder builder17 = builder4.setLog(log15);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder19 = builder4.setLogLevel(logLevel18);
        retrofit.Profiler profiler20 = null;
        builder19.profiler = profiler20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.Server server25 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder26 = builder22.setServer(server25);
        retrofit.RestAdapter.LogLevel logLevel27 = builder26.logLevel;
        retrofit.RestAdapter.Builder builder28 = builder19.setLogLevel(logLevel27);
        retrofit.RequestInterceptor requestInterceptor29 = builder28.requestInterceptor;
        retrofit.RestAdapter restAdapter30 = builder28.build();
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider32 = builder31.clientProvider;
        java.util.concurrent.Executor executor33 = null;
        builder31.callbackExecutor = executor33;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.Server server38 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder39 = builder35.setServer(server38);
        java.lang.String str40 = server38.getUrl();
        retrofit.RestAdapter.Builder builder41 = builder31.setServer(server38);
        builder31.ensureSaneDefaults();
        retrofit.Server server43 = null;
        retrofit.client.Client.Provider provider44 = null;
        java.util.concurrent.Executor executor45 = null;
        java.util.concurrent.Executor executor46 = null;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        retrofit.converter.Converter converter48 = null;
        retrofit.Profiler profiler49 = null;
        retrofit.ErrorHandler errorHandler50 = null;
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        log51.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter(server43, provider44, executor45, executor46, requestInterceptor47, converter48, profiler49, errorHandler50, log51, logLevel54);
        retrofit.RestAdapter.RestHandler restHandler56 = restAdapter55.new RestHandler();
        retrofit.RestAdapter.Log log57 = retrofit.RestAdapter.Log.NONE;
        restAdapter55.log = log57;
        retrofit.RestAdapter.Builder builder59 = builder31.setLog(log57);
        retrofit.Profiler profiler60 = null;
        builder59.profiler = profiler60;
        retrofit.RequestInterceptor requestInterceptor62 = builder59.requestInterceptor;
        retrofit.RestAdapter restAdapter63 = builder59.build();
        retrofit.ErrorHandler errorHandler64 = restAdapter63.errorHandler;
        restAdapter30.errorHandler = errorHandler64;
        retrofit.RestAdapter.LogLevel logLevel66 = restAdapter30.logLevel;
        boolean boolean67 = logLevel66.log();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(requestInterceptor29);
        org.junit.Assert.assertNotNull(restAdapter30);
        org.junit.Assert.assertNull(provider32);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(requestInterceptor62);
        org.junit.Assert.assertNotNull(restAdapter63);
        org.junit.Assert.assertNotNull(errorHandler64);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test13013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13013");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server6 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder7 = builder0.setServer(server6);
        retrofit.converter.Converter converter8 = null;
        builder7.converter = converter8;
        retrofit.RestAdapter restAdapter10 = builder7.build();
        retrofit.Server server11 = builder7.server;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.Server server15 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder16 = builder12.setServer(server15);
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor18 = restAdapter17.callbackExecutor;
        java.util.concurrent.Executor executor19 = restAdapter17.callbackExecutor;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler21 = restAdapter20.errorHandler;
        retrofit.Server server24 = new retrofit.Server("", "");
        restAdapter20.server = server24;
        restAdapter17.server = server24;
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        restAdapter17.log = log27;
        retrofit.RestAdapter.Builder builder29 = builder16.setLog(log27);
        retrofit.converter.Converter converter30 = null;
        builder29.converter = converter30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler33 = builder32.errorHandler;
        retrofit.ErrorHandler errorHandler34 = builder32.errorHandler;
        retrofit.Profiler profiler35 = builder32.profiler;
        retrofit.RestAdapter.Log log36 = builder32.log;
        retrofit.Server server37 = null;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        log45.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log45, logLevel48);
        builder32.log = log45;
        retrofit.RestAdapter.Builder builder51 = builder29.setLog(log45);
        retrofit.ErrorHandler errorHandler52 = null;
        builder29.errorHandler = errorHandler52;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler55 = builder54.errorHandler;
        java.util.concurrent.Executor executor56 = null;
        builder54.callbackExecutor = executor56;
        retrofit.converter.Converter converter58 = builder54.converter;
        retrofit.converter.Converter converter59 = builder54.converter;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler61 = builder60.errorHandler;
        retrofit.Server server64 = new retrofit.Server("", "");
        builder60.server = server64;
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        builder60.log = log66;
        retrofit.RestAdapter.LogLevel logLevel68 = builder60.logLevel;
        builder54.logLevel = logLevel68;
        builder29.logLevel = logLevel68;
        retrofit.Profiler profiler71 = builder29.profiler;
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler73 = builder72.errorHandler;
        retrofit.ErrorHandler errorHandler74 = builder72.errorHandler;
        java.util.concurrent.Executor executor75 = builder72.callbackExecutor;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler77 = builder76.errorHandler;
        retrofit.Server server80 = new retrofit.Server("", "");
        builder76.server = server80;
        retrofit.RestAdapter.LogLevel logLevel82 = builder76.logLevel;
        retrofit.RestAdapter.Builder builder83 = builder72.setLogLevel(logLevel82);
        retrofit.RestAdapter.Builder builder84 = builder29.setLogLevel(logLevel82);
        builder7.logLevel = logLevel82;
        retrofit.RestAdapter restAdapter86 = builder7.build();
        retrofit.RestAdapter.Log log87 = restAdapter86.log;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(restAdapter10);
        org.junit.Assert.assertNotNull(server11);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(errorHandler33);
        org.junit.Assert.assertNull(errorHandler34);
        org.junit.Assert.assertNull(profiler35);
        org.junit.Assert.assertNull(log36);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(errorHandler55);
        org.junit.Assert.assertNull(converter58);
        org.junit.Assert.assertNull(converter59);
        org.junit.Assert.assertNull(errorHandler61);
        org.junit.Assert.assertNotNull(log66);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler71);
        org.junit.Assert.assertNull(errorHandler73);
        org.junit.Assert.assertNull(errorHandler74);
        org.junit.Assert.assertNull(executor75);
        org.junit.Assert.assertNull(errorHandler77);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(restAdapter86);
        org.junit.Assert.assertNotNull(log87);
    }

    @Test
    public void test13014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13014");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        java.util.concurrent.Executor executor3 = builder0.callbackExecutor;
        retrofit.Server server4 = builder0.server;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler6 = builder5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        builder5.server = server9;
        retrofit.RestAdapter.Log log11 = retrofit.RestAdapter.Log.NONE;
        builder5.log = log11;
        retrofit.RequestInterceptor requestInterceptor13 = builder5.requestInterceptor;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        log14.log("hi!");
        log14.log("hi!");
        builder5.log = log14;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler21 = builder20.errorHandler;
        retrofit.Server server24 = new retrofit.Server("", "");
        builder20.server = server24;
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler34 = builder33.errorHandler;
        retrofit.Server server37 = new retrofit.Server("", "");
        builder33.server = server37;
        retrofit.RestAdapter.Log log39 = retrofit.RestAdapter.Log.NONE;
        builder33.log = log39;
        retrofit.Server server41 = null;
        retrofit.client.Client.Provider provider42 = null;
        java.util.concurrent.Executor executor43 = null;
        java.util.concurrent.Executor executor44 = null;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        retrofit.converter.Converter converter46 = null;
        retrofit.Profiler profiler47 = null;
        retrofit.ErrorHandler errorHandler48 = null;
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        log49.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server41, provider42, executor43, executor44, requestInterceptor45, converter46, profiler47, errorHandler48, log49, logLevel52);
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter(server24, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log39, logLevel52);
        retrofit.ErrorHandler errorHandler55 = null;
        restAdapter54.errorHandler = errorHandler55;
        retrofit.RestAdapter.RestHandler restHandler57 = restAdapter54.new RestHandler();
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler59 = builder58.errorHandler;
        retrofit.Server server62 = new retrofit.Server("", "");
        builder58.server = server62;
        retrofit.RestAdapter.Log log64 = retrofit.RestAdapter.Log.NONE;
        builder58.log = log64;
        restAdapter54.log = log64;
        builder5.log = log64;
        builder0.log = log64;
        retrofit.Profiler profiler69 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder70 = builder0.setProfiler(profiler69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(server4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNotNull(log11);
        org.junit.Assert.assertNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(errorHandler34);
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler59);
        org.junit.Assert.assertNotNull(log64);
    }

    @Test
    public void test13015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13015");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.Profiler profiler3 = builder0.profiler;
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor5 = restAdapter4.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.Server server9 = new retrofit.Server("hi!", "hi!");
        restAdapter4.server = server9;
        retrofit.RestAdapter.Builder builder11 = builder0.setServer(server9);
        retrofit.converter.Converter converter12 = null;
        builder11.converter = converter12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        log22.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel25);
        builder11.logLevel = logLevel25;
        java.util.concurrent.Executor executor28 = builder11.callbackExecutor;
        retrofit.RestAdapter.Builder builder30 = builder11.setServer("default");
        retrofit.client.Client.Provider provider31 = builder30.clientProvider;
        retrofit.Profiler profiler32 = null;
        builder30.profiler = profiler32;
        retrofit.Profiler profiler34 = builder30.profiler;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor36 = restAdapter35.callbackExecutor;
        java.util.concurrent.Executor executor37 = restAdapter35.callbackExecutor;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler39 = restAdapter38.errorHandler;
        retrofit.Server server42 = new retrofit.Server("", "");
        restAdapter38.server = server42;
        restAdapter35.server = server42;
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        restAdapter35.log = log45;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler48 = builder47.errorHandler;
        retrofit.Server server51 = new retrofit.Server("", "");
        builder47.server = server51;
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        builder47.log = log53;
        log53.log("default");
        restAdapter35.log = log53;
        retrofit.RestAdapter.Builder builder58 = builder30.setLog(log53);
        retrofit.Profiler profiler59 = builder58.profiler;
        retrofit.Profiler profiler60 = null;
        builder58.profiler = profiler60;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(provider31);
        org.junit.Assert.assertNull(profiler34);
        org.junit.Assert.assertNull(executor36);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNull(errorHandler48);
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(profiler59);
    }

    @Test
    public void test13016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13016");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.converter.Converter converter4 = builder0.converter;
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor9 = restAdapter8.callbackExecutor;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor11 = restAdapter10.callbackExecutor;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler14 = restAdapter13.errorHandler;
        retrofit.Server server17 = new retrofit.Server("", "");
        restAdapter13.server = server17;
        restAdapter10.server = server17;
        restAdapter8.server = server17;
        java.lang.String str21 = server17.getName();
        builder0.server = server17;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler24 = builder23.errorHandler;
        retrofit.Server server27 = new retrofit.Server("", "");
        builder23.server = server27;
        retrofit.RestAdapter.LogLevel logLevel29 = builder23.logLevel;
        builder0.logLevel = logLevel29;
        retrofit.RequestInterceptor requestInterceptor31 = builder0.requestInterceptor;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(requestInterceptor31);
    }

    @Test
    public void test13017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13017");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        builder0.requestInterceptor = requestInterceptor2;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("default");
        retrofit.RequestInterceptor requestInterceptor6 = builder5.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel7 = builder5.logLevel;
        retrofit.Profiler profiler8 = null;
        builder5.profiler = profiler8;
        retrofit.RestAdapter.Builder builder11 = builder5.setServer("default");
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertTrue("'" + logLevel7 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel7.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test13018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13018");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server4 = new retrofit.Server("", "");
        builder0.server = server4;
        retrofit.client.Client.Provider provider6 = null;
        java.util.concurrent.Executor executor7 = null;
        java.util.concurrent.Executor executor8 = null;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        retrofit.converter.Converter converter10 = null;
        retrofit.Profiler profiler11 = null;
        retrofit.ErrorHandler errorHandler12 = null;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler14 = builder13.errorHandler;
        retrofit.Server server17 = new retrofit.Server("", "");
        builder13.server = server17;
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        builder13.log = log19;
        retrofit.Server server21 = null;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        log29.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel32);
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server4, provider6, executor7, executor8, requestInterceptor9, converter10, profiler11, errorHandler12, log19, logLevel32);
        retrofit.ErrorHandler errorHandler35 = null;
        restAdapter34.errorHandler = errorHandler35;
        retrofit.RestAdapter.RestHandler restHandler37 = restAdapter34.new RestHandler();
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler39 = builder38.errorHandler;
        retrofit.Server server42 = new retrofit.Server("", "");
        builder38.server = server42;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        builder38.log = log44;
        restAdapter34.log = log44;
        java.util.concurrent.Executor executor47 = restAdapter34.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel48 = null;
        restAdapter34.setLogLevel(logLevel48);
        retrofit.RestAdapter.RestHandler restHandler50 = restAdapter34.new RestHandler();
        retrofit.converter.Converter converter51 = restAdapter34.converter;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNull(executor47);
        org.junit.Assert.assertNull(converter51);
    }

    @Test
    public void test13019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13019");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.Profiler profiler19 = restAdapter0.profiler;
        java.util.concurrent.Executor executor20 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel21 = restAdapter0.getLogLevel();
        retrofit.Server server22 = restAdapter0.server;
        retrofit.Server server23 = null;
        retrofit.client.Client.Provider provider24 = null;
        java.util.concurrent.Executor executor25 = null;
        java.util.concurrent.Executor executor26 = null;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        retrofit.converter.Converter converter28 = null;
        retrofit.Profiler profiler29 = null;
        retrofit.ErrorHandler errorHandler30 = null;
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        log31.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server23, provider24, executor25, executor26, requestInterceptor27, converter28, profiler29, errorHandler30, log31, logLevel34);
        retrofit.RestAdapter.RestHandler restHandler36 = restAdapter35.new RestHandler();
        retrofit.client.Header[] headerArray45 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList46 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList46, headerArray45);
        retrofit.mime.TypedOutput typedOutput48 = null;
        retrofit.client.Request request49 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList46, typedOutput48);
        retrofit.mime.TypedOutput typedOutput50 = null;
        retrofit.client.Request request51 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList46, typedOutput50);
        retrofit.mime.TypedOutput typedOutput52 = null;
        retrofit.client.Request request53 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList46, typedOutput52);
        retrofit.mime.TypedOutput typedOutput54 = null;
        retrofit.client.Request request55 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList46, typedOutput54);
        retrofit.mime.TypedOutput typedOutput56 = request55.getBody();
        retrofit.client.Request request57 = restAdapter35.logAndReplaceRequest(request55);
        retrofit.RestAdapter.RestHandler restHandler58 = restAdapter35.new RestHandler();
        retrofit.client.Client.Provider provider59 = restAdapter35.clientProvider;
        retrofit.RestAdapter.RestHandler restHandler60 = restAdapter35.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel61 = restAdapter35.logLevel;
        restAdapter0.logLevel = logLevel61;
        retrofit.Profiler profiler63 = restAdapter0.profiler;
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler65 = builder64.errorHandler;
        retrofit.RequestInterceptor requestInterceptor66 = null;
        builder64.requestInterceptor = requestInterceptor66;
        retrofit.RestAdapter.Builder builder69 = builder64.setServer("default");
        builder64.ensureSaneDefaults();
        retrofit.Server server71 = builder64.server;
        retrofit.client.Client.Provider provider72 = builder64.clientProvider;
        restAdapter0.clientProvider = provider72;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(profiler19);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(logLevel21);
        org.junit.Assert.assertNotNull(server22);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(typedOutput56);
        org.junit.Assert.assertNotNull(request57);
        org.junit.Assert.assertNull(provider59);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler63);
        org.junit.Assert.assertNull(errorHandler65);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(server71);
        org.junit.Assert.assertNotNull(provider72);
    }

    @Test
    public void test13020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13020");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        java.util.concurrent.Executor executor14 = null;
        restAdapter12.callbackExecutor = executor14;
        retrofit.client.Header[] headerArray32 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList33 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList33, headerArray32);
        retrofit.mime.TypedOutput typedOutput35 = null;
        retrofit.client.Request request36 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList33, typedOutput35);
        retrofit.mime.TypedOutput typedOutput37 = null;
        retrofit.client.Request request38 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList33, typedOutput37);
        retrofit.mime.TypedOutput typedOutput39 = null;
        retrofit.client.Request request40 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList33, typedOutput39);
        retrofit.mime.TypedOutput typedOutput41 = null;
        retrofit.client.Request request42 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList33, typedOutput41);
        retrofit.mime.TypedOutput typedOutput43 = null;
        retrofit.client.Request request44 = new retrofit.client.Request("default", "hi!", (java.util.List<retrofit.client.Header>) headerList33, typedOutput43);
        retrofit.mime.TypedOutput typedOutput45 = null;
        retrofit.client.Request request46 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList33, typedOutput45);
        retrofit.mime.TypedOutput typedOutput47 = null;
        retrofit.client.Request request48 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList33, typedOutput47);
        retrofit.mime.TypedOutput typedOutput49 = null;
        retrofit.client.Request request50 = new retrofit.client.Request("hi!", "default", (java.util.List<retrofit.client.Header>) headerList33, typedOutput49);
        retrofit.client.Request request51 = restAdapter12.logAndReplaceRequest(request50);
        retrofit.ErrorHandler errorHandler52 = restAdapter12.errorHandler;
        retrofit.Server server53 = restAdapter12.server;
        retrofit.RestAdapter.LogLevel logLevel54 = restAdapter12.getLogLevel();
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(request51);
        org.junit.Assert.assertNull(errorHandler52);
        org.junit.Assert.assertNull(server53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test13021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13021");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server4 = new retrofit.Server("", "");
        builder0.server = server4;
        retrofit.client.Client.Provider provider6 = null;
        java.util.concurrent.Executor executor7 = null;
        java.util.concurrent.Executor executor8 = null;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        retrofit.converter.Converter converter10 = null;
        retrofit.Profiler profiler11 = null;
        retrofit.ErrorHandler errorHandler12 = null;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler14 = builder13.errorHandler;
        retrofit.Server server17 = new retrofit.Server("", "");
        builder13.server = server17;
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        builder13.log = log19;
        retrofit.Server server21 = null;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        log29.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel32);
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server4, provider6, executor7, executor8, requestInterceptor9, converter10, profiler11, errorHandler12, log19, logLevel32);
        retrofit.client.Header[] headerArray41 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList42 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList42, headerArray41);
        retrofit.mime.TypedOutput typedOutput44 = null;
        retrofit.client.Request request45 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList42, typedOutput44);
        retrofit.mime.TypedOutput typedOutput46 = null;
        retrofit.client.Request request47 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList42, typedOutput46);
        retrofit.mime.TypedOutput typedOutput48 = null;
        retrofit.client.Request request49 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList42, typedOutput48);
        retrofit.mime.TypedOutput typedOutput50 = request49.getBody();
        java.util.List<retrofit.client.Header> headerList51 = request49.getHeaders();
        retrofit.client.Request request52 = restAdapter34.logAndReplaceRequest(request49);
        retrofit.RestAdapter.RestHandler restHandler53 = restAdapter34.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel54 = null;
        restAdapter34.setLogLevel(logLevel54);
        retrofit.Profiler profiler56 = restAdapter34.profiler;
        java.util.concurrent.Executor executor57 = restAdapter34.httpExecutor;
        retrofit.RestAdapter.Log log58 = restAdapter34.log;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(typedOutput50);
        org.junit.Assert.assertNotNull(headerList51);
        org.junit.Assert.assertNotNull(request52);
        org.junit.Assert.assertNull(profiler56);
        org.junit.Assert.assertNull(executor57);
        org.junit.Assert.assertNotNull(log58);
    }

    @Test
    public void test13022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13022");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.client.Client.Provider provider14 = restAdapter12.clientProvider;
        retrofit.RestAdapter.Log log15 = restAdapter12.log;
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter12.new RestHandler();
        retrofit.Profiler profiler17 = restAdapter12.profiler;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor19 = restAdapter18.callbackExecutor;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor21 = restAdapter20.callbackExecutor;
        java.util.concurrent.Executor executor22 = restAdapter20.callbackExecutor;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler24 = restAdapter23.errorHandler;
        retrofit.Server server27 = new retrofit.Server("", "");
        restAdapter23.server = server27;
        restAdapter20.server = server27;
        restAdapter18.server = server27;
        retrofit.Profiler profiler31 = restAdapter18.profiler;
        retrofit.ErrorHandler errorHandler32 = null;
        restAdapter18.errorHandler = errorHandler32;
        retrofit.Profiler profiler34 = null;
        restAdapter18.profiler = profiler34;
        retrofit.RestAdapter.RestHandler restHandler36 = restAdapter18.new RestHandler();
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.Server server40 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder41 = builder37.setServer(server40);
        retrofit.converter.Converter converter42 = builder37.converter;
        retrofit.RequestInterceptor requestInterceptor43 = builder37.requestInterceptor;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider45 = builder44.clientProvider;
        java.util.concurrent.Executor executor46 = null;
        builder44.callbackExecutor = executor46;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.Server server51 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder52 = builder48.setServer(server51);
        java.lang.String str53 = server51.getUrl();
        retrofit.RestAdapter.Builder builder54 = builder44.setServer(server51);
        builder44.ensureSaneDefaults();
        retrofit.Server server56 = null;
        retrofit.client.Client.Provider provider57 = null;
        java.util.concurrent.Executor executor58 = null;
        java.util.concurrent.Executor executor59 = null;
        retrofit.RequestInterceptor requestInterceptor60 = null;
        retrofit.converter.Converter converter61 = null;
        retrofit.Profiler profiler62 = null;
        retrofit.ErrorHandler errorHandler63 = null;
        retrofit.RestAdapter.Log log64 = retrofit.RestAdapter.Log.NONE;
        log64.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel67 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter(server56, provider57, executor58, executor59, requestInterceptor60, converter61, profiler62, errorHandler63, log64, logLevel67);
        retrofit.RestAdapter.RestHandler restHandler69 = restAdapter68.new RestHandler();
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        restAdapter68.log = log70;
        retrofit.RestAdapter.Builder builder72 = builder44.setLog(log70);
        retrofit.RestAdapter.Builder builder74 = builder44.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor75 = builder44.requestInterceptor;
        builder37.requestInterceptor = requestInterceptor75;
        restAdapter18.requestInterceptor = requestInterceptor75;
        restAdapter12.requestInterceptor = requestInterceptor75;
        retrofit.ErrorHandler errorHandler79 = restAdapter12.errorHandler;
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNull(profiler17);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNull(profiler31);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(converter42);
        org.junit.Assert.assertNull(requestInterceptor43);
        org.junit.Assert.assertNull(provider45);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(log64);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(requestInterceptor75);
        org.junit.Assert.assertNull(errorHandler79);
    }

    @Test
    public void test13023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13023");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter3 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler4 = restAdapter3.errorHandler;
        retrofit.Server server7 = new retrofit.Server("", "");
        restAdapter3.server = server7;
        restAdapter0.server = server7;
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter0.logLevel;
        retrofit.Profiler profiler11 = null;
        restAdapter0.profiler = profiler11;
        java.util.concurrent.Executor executor13 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler15 = builder14.errorHandler;
        retrofit.ErrorHandler errorHandler16 = builder14.errorHandler;
        retrofit.Profiler profiler17 = builder14.profiler;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor19 = restAdapter18.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter18.new RestHandler();
        retrofit.Server server23 = new retrofit.Server("hi!", "hi!");
        restAdapter18.server = server23;
        retrofit.RestAdapter.Builder builder25 = builder14.setServer(server23);
        retrofit.converter.Converter converter26 = null;
        builder25.converter = converter26;
        builder25.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter29 = builder25.build();
        retrofit.Profiler profiler30 = builder25.profiler;
        retrofit.converter.Converter converter31 = builder25.converter;
        retrofit.RequestInterceptor requestInterceptor32 = builder25.requestInterceptor;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler34 = builder33.errorHandler;
        java.util.concurrent.Executor executor35 = null;
        builder33.callbackExecutor = executor35;
        java.util.concurrent.Executor executor37 = null;
        builder33.httpExecutor = executor37;
        retrofit.Profiler profiler39 = null;
        builder33.profiler = profiler39;
        retrofit.RestAdapter.Builder builder42 = builder33.setServer("hi!");
        retrofit.Profiler profiler43 = builder33.profiler;
        retrofit.client.Client.Provider provider44 = builder33.clientProvider;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider46 = builder45.clientProvider;
        java.util.concurrent.Executor executor47 = null;
        builder45.callbackExecutor = executor47;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.Server server52 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder53 = builder49.setServer(server52);
        java.lang.String str54 = server52.getUrl();
        retrofit.RestAdapter.Builder builder55 = builder45.setServer(server52);
        builder45.ensureSaneDefaults();
        retrofit.Server server57 = null;
        retrofit.client.Client.Provider provider58 = null;
        java.util.concurrent.Executor executor59 = null;
        java.util.concurrent.Executor executor60 = null;
        retrofit.RequestInterceptor requestInterceptor61 = null;
        retrofit.converter.Converter converter62 = null;
        retrofit.Profiler profiler63 = null;
        retrofit.ErrorHandler errorHandler64 = null;
        retrofit.RestAdapter.Log log65 = retrofit.RestAdapter.Log.NONE;
        log65.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel68 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter(server57, provider58, executor59, executor60, requestInterceptor61, converter62, profiler63, errorHandler64, log65, logLevel68);
        retrofit.RestAdapter.RestHandler restHandler70 = restAdapter69.new RestHandler();
        retrofit.RestAdapter.Log log71 = retrofit.RestAdapter.Log.NONE;
        restAdapter69.log = log71;
        retrofit.RestAdapter.Builder builder73 = builder45.setLog(log71);
        retrofit.RestAdapter.Builder builder75 = builder45.setServer("hi!");
        retrofit.RestAdapter restAdapter76 = builder45.build();
        retrofit.RestAdapter.RestHandler restHandler77 = restAdapter76.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel78 = restAdapter76.logLevel;
        boolean boolean79 = logLevel78.log();
        builder33.logLevel = logLevel78;
        retrofit.RestAdapter.Builder builder81 = builder25.setLogLevel(logLevel78);
        restAdapter0.logLevel = logLevel78;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(errorHandler4);
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNull(profiler17);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(restAdapter29);
        org.junit.Assert.assertNull(profiler30);
        org.junit.Assert.assertNotNull(converter31);
        org.junit.Assert.assertNotNull(requestInterceptor32);
        org.junit.Assert.assertNull(errorHandler34);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(profiler43);
        org.junit.Assert.assertNull(provider44);
        org.junit.Assert.assertNull(provider46);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(log65);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(restAdapter76);
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(builder81);
    }

    @Test
    public void test13024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13024");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server6 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder7 = builder0.setServer(server6);
        retrofit.converter.Converter converter8 = null;
        builder7.converter = converter8;
        retrofit.RestAdapter restAdapter10 = builder7.build();
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler12 = builder11.errorHandler;
        java.util.concurrent.Executor executor13 = null;
        builder11.callbackExecutor = executor13;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider16 = builder15.clientProvider;
        java.util.concurrent.Executor executor17 = null;
        builder15.callbackExecutor = executor17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.Server server22 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder23 = builder19.setServer(server22);
        java.lang.String str24 = server22.getUrl();
        retrofit.RestAdapter.Builder builder25 = builder15.setServer(server22);
        retrofit.RestAdapter.Builder builder26 = builder11.setServer(server22);
        restAdapter10.server = server22;
        java.util.concurrent.Executor executor28 = restAdapter10.httpExecutor;
        java.util.concurrent.Executor executor29 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler30 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler31 = restAdapter10.new RestHandler();
        retrofit.Server server32 = null;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        log40.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log40, logLevel43);
        retrofit.RestAdapter.RestHandler restHandler45 = restAdapter44.new RestHandler();
        retrofit.Profiler profiler46 = null;
        restAdapter44.profiler = profiler46;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler49 = builder48.errorHandler;
        retrofit.ErrorHandler errorHandler50 = builder48.errorHandler;
        retrofit.Profiler profiler51 = builder48.profiler;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor53 = restAdapter52.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler54 = restAdapter52.new RestHandler();
        retrofit.Server server57 = new retrofit.Server("hi!", "hi!");
        restAdapter52.server = server57;
        retrofit.RestAdapter.Builder builder59 = builder48.setServer(server57);
        retrofit.RestAdapter restAdapter60 = builder59.build();
        java.util.concurrent.Executor executor61 = builder59.callbackExecutor;
        retrofit.RestAdapter.Log log62 = builder59.log;
        retrofit.RestAdapter restAdapter63 = builder59.build();
        retrofit.converter.Converter converter64 = restAdapter63.converter;
        restAdapter44.converter = converter64;
        restAdapter10.converter = converter64;
        retrofit.RestAdapter.RestHandler restHandler67 = restAdapter10.new RestHandler();
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(restAdapter10);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(provider16);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(executor28);
        org.junit.Assert.assertNotNull(executor29);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler49);
        org.junit.Assert.assertNull(errorHandler50);
        org.junit.Assert.assertNull(profiler51);
        org.junit.Assert.assertNull(executor53);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(restAdapter60);
        org.junit.Assert.assertNotNull(executor61);
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertNotNull(restAdapter63);
        org.junit.Assert.assertNotNull(converter64);
    }

    @Test
    public void test13025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13025");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider5 = builder4.clientProvider;
        java.util.concurrent.Executor executor6 = null;
        builder4.callbackExecutor = executor6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.Server server11 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder12 = builder8.setServer(server11);
        java.lang.String str13 = server11.getUrl();
        retrofit.RestAdapter.Builder builder14 = builder4.setServer(server11);
        retrofit.RestAdapter.Builder builder15 = builder0.setServer(server11);
        retrofit.Server server16 = builder15.server;
        retrofit.RestAdapter.Log log17 = builder15.log;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(server16);
        org.junit.Assert.assertNull(log17);
    }

    @Test
    public void test13026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13026");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        java.util.concurrent.Executor executor4 = null;
        builder0.httpExecutor = executor4;
        retrofit.Profiler profiler6 = null;
        builder0.profiler = profiler6;
        retrofit.RestAdapter.Builder builder9 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler11 = null;
        builder10.errorHandler = errorHandler11;
        retrofit.ErrorHandler errorHandler13 = builder10.errorHandler;
        retrofit.RestAdapter.Builder builder15 = builder10.setServer("hi!");
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler17 = builder16.errorHandler;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server21 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder22 = builder18.setServer(server21);
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor24 = restAdapter23.callbackExecutor;
        java.util.concurrent.Executor executor25 = restAdapter23.callbackExecutor;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler27 = restAdapter26.errorHandler;
        retrofit.Server server30 = new retrofit.Server("", "");
        restAdapter26.server = server30;
        restAdapter23.server = server30;
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        restAdapter23.log = log33;
        retrofit.RestAdapter.Builder builder35 = builder22.setLog(log33);
        retrofit.RestAdapter.Builder builder36 = builder16.setLog(log33);
        builder10.log = log33;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler39 = builder38.errorHandler;
        retrofit.client.Client.Provider provider40 = null;
        builder38.clientProvider = provider40;
        retrofit.Server server44 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder45 = builder38.setServer(server44);
        retrofit.converter.Converter converter46 = null;
        builder45.converter = converter46;
        retrofit.RestAdapter restAdapter48 = builder45.build();
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler50 = builder49.errorHandler;
        java.util.concurrent.Executor executor51 = null;
        builder49.callbackExecutor = executor51;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider54 = builder53.clientProvider;
        java.util.concurrent.Executor executor55 = null;
        builder53.callbackExecutor = executor55;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.Server server60 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder61 = builder57.setServer(server60);
        java.lang.String str62 = server60.getUrl();
        retrofit.RestAdapter.Builder builder63 = builder53.setServer(server60);
        retrofit.RestAdapter.Builder builder64 = builder49.setServer(server60);
        restAdapter48.server = server60;
        retrofit.client.Client.Provider provider66 = restAdapter48.clientProvider;
        retrofit.RestAdapter.Builder builder67 = builder10.setClient(provider66);
        retrofit.client.Client.Provider provider68 = builder67.clientProvider;
        builder0.clientProvider = provider68;
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler71 = restAdapter70.new RestHandler();
        java.util.concurrent.Executor executor72 = null;
        restAdapter70.callbackExecutor = executor72;
        retrofit.RestAdapter restAdapter74 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor75 = restAdapter74.callbackExecutor;
        java.util.concurrent.Executor executor76 = restAdapter74.callbackExecutor;
        retrofit.RestAdapter restAdapter77 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler78 = restAdapter77.errorHandler;
        retrofit.Server server81 = new retrofit.Server("", "");
        restAdapter77.server = server81;
        restAdapter74.server = server81;
        restAdapter70.server = server81;
        retrofit.RestAdapter.Builder builder85 = builder0.setServer(server81);
        retrofit.Profiler profiler86 = builder0.profiler;
        java.util.concurrent.Executor executor87 = builder0.httpExecutor;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass88 = executor87.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(restAdapter48);
        org.junit.Assert.assertNull(errorHandler50);
        org.junit.Assert.assertNull(provider54);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(provider66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(provider68);
        org.junit.Assert.assertNull(executor75);
        org.junit.Assert.assertNull(executor76);
        org.junit.Assert.assertNull(errorHandler78);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNull(profiler86);
        org.junit.Assert.assertNull(executor87);
    }

    @Test
    public void test13027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13027");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        restAdapter5.log = log15;
        retrofit.RestAdapter.Builder builder17 = builder4.setLog(log15);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder19 = builder4.setLogLevel(logLevel18);
        retrofit.RestAdapter.Log log20 = builder4.log;
        retrofit.RestAdapter restAdapter21 = builder4.build();
        retrofit.Server server22 = null;
        retrofit.client.Client.Provider provider23 = null;
        java.util.concurrent.Executor executor24 = null;
        java.util.concurrent.Executor executor25 = null;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        retrofit.converter.Converter converter27 = null;
        retrofit.Profiler profiler28 = null;
        retrofit.ErrorHandler errorHandler29 = null;
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        log30.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server22, provider23, executor24, executor25, requestInterceptor26, converter27, profiler28, errorHandler29, log30, logLevel33);
        retrofit.RestAdapter.RestHandler restHandler35 = restAdapter34.new RestHandler();
        retrofit.client.Client.Provider provider36 = restAdapter34.clientProvider;
        retrofit.RestAdapter.Log log37 = restAdapter34.log;
        retrofit.RestAdapter.RestHandler restHandler38 = restAdapter34.new RestHandler();
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler40 = builder39.errorHandler;
        java.util.concurrent.Executor executor41 = builder39.callbackExecutor;
        retrofit.RestAdapter.Builder builder43 = builder39.setServer("hi!");
        builder43.ensureSaneDefaults();
        java.util.concurrent.Executor executor45 = builder43.callbackExecutor;
        restAdapter34.callbackExecutor = executor45;
        builder4.callbackExecutor = executor45;
        builder4.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider50 = builder49.clientProvider;
        java.util.concurrent.Executor executor51 = null;
        builder49.callbackExecutor = executor51;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.Server server56 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder57 = builder53.setServer(server56);
        java.lang.String str58 = server56.getUrl();
        retrofit.RestAdapter.Builder builder59 = builder49.setServer(server56);
        builder49.ensureSaneDefaults();
        retrofit.Server server61 = null;
        retrofit.client.Client.Provider provider62 = null;
        java.util.concurrent.Executor executor63 = null;
        java.util.concurrent.Executor executor64 = null;
        retrofit.RequestInterceptor requestInterceptor65 = null;
        retrofit.converter.Converter converter66 = null;
        retrofit.Profiler profiler67 = null;
        retrofit.ErrorHandler errorHandler68 = null;
        retrofit.RestAdapter.Log log69 = retrofit.RestAdapter.Log.NONE;
        log69.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel72 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter73 = new retrofit.RestAdapter(server61, provider62, executor63, executor64, requestInterceptor65, converter66, profiler67, errorHandler68, log69, logLevel72);
        retrofit.RestAdapter.RestHandler restHandler74 = restAdapter73.new RestHandler();
        retrofit.RestAdapter.Log log75 = retrofit.RestAdapter.Log.NONE;
        restAdapter73.log = log75;
        retrofit.RestAdapter.Builder builder77 = builder49.setLog(log75);
        retrofit.RestAdapter.Builder builder79 = builder49.setServer("hi!");
        retrofit.Profiler profiler80 = null;
        builder49.profiler = profiler80;
        builder49.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor83 = builder49.requestInterceptor;
        retrofit.ErrorHandler errorHandler84 = builder49.errorHandler;
        retrofit.RestAdapter.Builder builder85 = builder4.setErrorHandler(errorHandler84);
        retrofit.Profiler profiler86 = null;
        builder85.profiler = profiler86;
        retrofit.RestAdapter restAdapter88 = builder85.build();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(restAdapter21);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(provider36);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNull(executor41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(executor45);
        org.junit.Assert.assertNull(provider50);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(log69);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(requestInterceptor83);
        org.junit.Assert.assertNotNull(errorHandler84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(restAdapter88);
    }

    @Test
    public void test13028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13028");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        java.util.concurrent.Executor executor4 = null;
        builder0.httpExecutor = executor4;
        retrofit.Profiler profiler6 = null;
        builder0.profiler = profiler6;
        retrofit.RestAdapter.Builder builder9 = builder0.setServer("hi!");
        retrofit.Profiler profiler10 = builder0.profiler;
        java.util.concurrent.Executor executor11 = builder0.httpExecutor;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler13 = builder12.errorHandler;
        java.util.concurrent.Executor executor14 = builder12.callbackExecutor;
        retrofit.RestAdapter.Builder builder16 = builder12.setServer("hi!");
        retrofit.Server server19 = new retrofit.Server("default", "hi!");
        java.lang.String str20 = server19.getUrl();
        retrofit.RestAdapter.Builder builder21 = builder16.setServer(server19);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler23 = builder22.errorHandler;
        retrofit.ErrorHandler errorHandler24 = builder22.errorHandler;
        java.util.concurrent.Executor executor25 = builder22.callbackExecutor;
        java.util.concurrent.Executor executor26 = null;
        builder22.callbackExecutor = executor26;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler29 = builder28.errorHandler;
        retrofit.Server server32 = new retrofit.Server("", "");
        builder28.server = server32;
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        builder28.log = log34;
        retrofit.RestAdapter.LogLevel logLevel36 = builder28.logLevel;
        retrofit.RestAdapter.Builder builder37 = builder22.setLogLevel(logLevel36);
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler39 = builder38.errorHandler;
        retrofit.client.Client.Provider provider40 = null;
        builder38.clientProvider = provider40;
        retrofit.Server server44 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder45 = builder38.setServer(server44);
        retrofit.converter.Converter converter46 = null;
        builder45.converter = converter46;
        retrofit.RestAdapter restAdapter48 = builder45.build();
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler50 = builder49.errorHandler;
        java.util.concurrent.Executor executor51 = null;
        builder49.callbackExecutor = executor51;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider54 = builder53.clientProvider;
        java.util.concurrent.Executor executor55 = null;
        builder53.callbackExecutor = executor55;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.Server server60 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder61 = builder57.setServer(server60);
        java.lang.String str62 = server60.getUrl();
        retrofit.RestAdapter.Builder builder63 = builder53.setServer(server60);
        retrofit.RestAdapter.Builder builder64 = builder49.setServer(server60);
        restAdapter48.server = server60;
        retrofit.client.Client.Provider provider66 = restAdapter48.clientProvider;
        retrofit.RestAdapter.Builder builder67 = builder37.setClient(provider66);
        retrofit.RestAdapter.Builder builder68 = builder21.setClient(provider66);
        retrofit.RestAdapter.Builder builder69 = builder0.setClient(provider66);
        retrofit.RestAdapter.LogLevel logLevel70 = builder0.logLevel;
        retrofit.Server server71 = builder0.server;
        retrofit.converter.Converter converter72 = builder0.converter;
        builder0.ensureSaneDefaults();
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(profiler10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "default" + "'", str20, "default");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(restAdapter48);
        org.junit.Assert.assertNull(errorHandler50);
        org.junit.Assert.assertNull(provider54);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(provider66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(server71);
        org.junit.Assert.assertNull(converter72);
    }

    @Test
    public void test13029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13029");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.converter.Converter converter5 = builder0.converter;
        retrofit.RequestInterceptor requestInterceptor6 = builder0.requestInterceptor;
        java.util.concurrent.Executor executor7 = builder0.callbackExecutor;
        retrofit.Profiler profiler8 = builder0.profiler;
        java.util.concurrent.Executor executor9 = builder0.httpExecutor;
        java.util.concurrent.Executor executor10 = builder0.httpExecutor;
        retrofit.ErrorHandler errorHandler11 = builder0.errorHandler;
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        log20.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel23);
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter24.new RestHandler();
        retrofit.client.Client.Provider provider26 = restAdapter24.clientProvider;
        retrofit.RestAdapter.Log log27 = restAdapter24.log;
        retrofit.RestAdapter.RestHandler restHandler28 = restAdapter24.new RestHandler();
        retrofit.Profiler profiler29 = restAdapter24.profiler;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor31 = restAdapter30.callbackExecutor;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor33 = restAdapter32.callbackExecutor;
        java.util.concurrent.Executor executor34 = restAdapter32.callbackExecutor;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler36 = restAdapter35.errorHandler;
        retrofit.Server server39 = new retrofit.Server("", "");
        restAdapter35.server = server39;
        restAdapter32.server = server39;
        restAdapter30.server = server39;
        retrofit.Profiler profiler43 = restAdapter30.profiler;
        retrofit.ErrorHandler errorHandler44 = null;
        restAdapter30.errorHandler = errorHandler44;
        retrofit.Profiler profiler46 = null;
        restAdapter30.profiler = profiler46;
        retrofit.RestAdapter.RestHandler restHandler48 = restAdapter30.new RestHandler();
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.Server server52 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder53 = builder49.setServer(server52);
        retrofit.converter.Converter converter54 = builder49.converter;
        retrofit.RequestInterceptor requestInterceptor55 = builder49.requestInterceptor;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider57 = builder56.clientProvider;
        java.util.concurrent.Executor executor58 = null;
        builder56.callbackExecutor = executor58;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.Server server63 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder64 = builder60.setServer(server63);
        java.lang.String str65 = server63.getUrl();
        retrofit.RestAdapter.Builder builder66 = builder56.setServer(server63);
        builder56.ensureSaneDefaults();
        retrofit.Server server68 = null;
        retrofit.client.Client.Provider provider69 = null;
        java.util.concurrent.Executor executor70 = null;
        java.util.concurrent.Executor executor71 = null;
        retrofit.RequestInterceptor requestInterceptor72 = null;
        retrofit.converter.Converter converter73 = null;
        retrofit.Profiler profiler74 = null;
        retrofit.ErrorHandler errorHandler75 = null;
        retrofit.RestAdapter.Log log76 = retrofit.RestAdapter.Log.NONE;
        log76.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel79 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter80 = new retrofit.RestAdapter(server68, provider69, executor70, executor71, requestInterceptor72, converter73, profiler74, errorHandler75, log76, logLevel79);
        retrofit.RestAdapter.RestHandler restHandler81 = restAdapter80.new RestHandler();
        retrofit.RestAdapter.Log log82 = retrofit.RestAdapter.Log.NONE;
        restAdapter80.log = log82;
        retrofit.RestAdapter.Builder builder84 = builder56.setLog(log82);
        retrofit.RestAdapter.Builder builder86 = builder56.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor87 = builder56.requestInterceptor;
        builder49.requestInterceptor = requestInterceptor87;
        restAdapter30.requestInterceptor = requestInterceptor87;
        restAdapter24.requestInterceptor = requestInterceptor87;
        builder0.requestInterceptor = requestInterceptor87;
        retrofit.RestAdapter restAdapter92 = builder0.build();
        retrofit.converter.Converter converter93 = builder0.converter;
        retrofit.RequestInterceptor requestInterceptor94 = builder0.requestInterceptor;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(converter5);
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(profiler8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(provider26);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNull(profiler29);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertNull(executor34);
        org.junit.Assert.assertNull(errorHandler36);
        org.junit.Assert.assertNull(profiler43);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(converter54);
        org.junit.Assert.assertNull(requestInterceptor55);
        org.junit.Assert.assertNull(provider57);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "hi!" + "'", str65, "hi!");
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(log76);
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(requestInterceptor87);
        org.junit.Assert.assertNotNull(restAdapter92);
        org.junit.Assert.assertNotNull(converter93);
        org.junit.Assert.assertNotNull(requestInterceptor94);
    }

    @Test
    public void test13030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13030");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter0.getLogLevel();
        retrofit.client.Client.Provider provider20 = null;
        restAdapter0.clientProvider = provider20;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean23 = logLevel22.log();
        restAdapter0.logLevel = logLevel22;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        restAdapter0.requestInterceptor = requestInterceptor25;
        retrofit.ErrorHandler errorHandler27 = restAdapter0.errorHandler;
        retrofit.Profiler profiler28 = null;
        restAdapter0.profiler = profiler28;
        retrofit.RestAdapter.RestHandler restHandler30 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler31 = restAdapter0.new RestHandler();
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor33 = restAdapter32.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler34 = restAdapter32.new RestHandler();
        retrofit.Server server37 = new retrofit.Server("hi!", "hi!");
        restAdapter32.server = server37;
        retrofit.RestAdapter.RestHandler restHandler39 = restAdapter32.new RestHandler();
        retrofit.RestAdapter.Log log40 = restAdapter32.log;
        retrofit.converter.Converter converter41 = restAdapter32.converter;
        retrofit.RestAdapter.RestHandler restHandler42 = restAdapter32.new RestHandler();
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.Server server46 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder47 = builder43.setServer(server46);
        retrofit.RestAdapter.LogLevel logLevel48 = builder47.logLevel;
        java.util.concurrent.Executor executor49 = builder47.httpExecutor;
        retrofit.RestAdapter restAdapter50 = builder47.build();
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler52 = builder51.errorHandler;
        java.util.concurrent.Executor executor53 = null;
        builder51.callbackExecutor = executor53;
        retrofit.converter.Converter converter55 = builder51.converter;
        retrofit.RestAdapter.Builder builder57 = builder51.setServer("hi!");
        builder51.ensureSaneDefaults();
        retrofit.Profiler profiler59 = builder51.profiler;
        java.util.concurrent.Executor executor60 = builder51.httpExecutor;
        builder47.httpExecutor = executor60;
        restAdapter32.callbackExecutor = executor60;
        restAdapter0.httpExecutor = executor60;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertNull(log40);
        org.junit.Assert.assertNull(converter41);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor49);
        org.junit.Assert.assertNotNull(restAdapter50);
        org.junit.Assert.assertNull(errorHandler52);
        org.junit.Assert.assertNull(converter55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(profiler59);
        org.junit.Assert.assertNotNull(executor60);
    }

    @Test
    public void test13031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13031");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        restAdapter5.log = log15;
        retrofit.RestAdapter.Builder builder17 = builder4.setLog(log15);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder19 = builder4.setLogLevel(logLevel18);
        retrofit.Profiler profiler20 = null;
        builder19.profiler = profiler20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.Server server25 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder26 = builder22.setServer(server25);
        retrofit.RestAdapter.LogLevel logLevel27 = builder26.logLevel;
        retrofit.RestAdapter.Builder builder28 = builder19.setLogLevel(logLevel27);
        retrofit.RestAdapter restAdapter29 = builder19.build();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler32 = null;
        builder31.errorHandler = errorHandler32;
        retrofit.ErrorHandler errorHandler34 = builder31.errorHandler;
        java.util.concurrent.Executor executor35 = builder31.callbackExecutor;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler37 = builder36.errorHandler;
        java.util.concurrent.Executor executor38 = null;
        builder36.callbackExecutor = executor38;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.Server server43 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder44 = builder40.setServer(server43);
        retrofit.converter.Converter converter45 = builder40.converter;
        retrofit.RequestInterceptor requestInterceptor46 = builder40.requestInterceptor;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider48 = builder47.clientProvider;
        java.util.concurrent.Executor executor49 = null;
        builder47.callbackExecutor = executor49;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.Server server54 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder55 = builder51.setServer(server54);
        java.lang.String str56 = server54.getUrl();
        retrofit.RestAdapter.Builder builder57 = builder47.setServer(server54);
        builder47.ensureSaneDefaults();
        retrofit.Server server59 = null;
        retrofit.client.Client.Provider provider60 = null;
        java.util.concurrent.Executor executor61 = null;
        java.util.concurrent.Executor executor62 = null;
        retrofit.RequestInterceptor requestInterceptor63 = null;
        retrofit.converter.Converter converter64 = null;
        retrofit.Profiler profiler65 = null;
        retrofit.ErrorHandler errorHandler66 = null;
        retrofit.RestAdapter.Log log67 = retrofit.RestAdapter.Log.NONE;
        log67.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter(server59, provider60, executor61, executor62, requestInterceptor63, converter64, profiler65, errorHandler66, log67, logLevel70);
        retrofit.RestAdapter.RestHandler restHandler72 = restAdapter71.new RestHandler();
        retrofit.RestAdapter.Log log73 = retrofit.RestAdapter.Log.NONE;
        restAdapter71.log = log73;
        retrofit.RestAdapter.Builder builder75 = builder47.setLog(log73);
        retrofit.RestAdapter.Builder builder77 = builder47.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor78 = builder47.requestInterceptor;
        builder40.requestInterceptor = requestInterceptor78;
        builder36.requestInterceptor = requestInterceptor78;
        retrofit.RestAdapter.Builder builder81 = builder31.setRequestInterceptor(requestInterceptor78);
        retrofit.RestAdapter.Builder builder82 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler83 = builder82.errorHandler;
        retrofit.client.Client.Provider provider84 = null;
        builder82.clientProvider = provider84;
        retrofit.Server server88 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder89 = builder82.setServer(server88);
        retrofit.converter.Converter converter90 = null;
        builder89.converter = converter90;
        retrofit.RestAdapter restAdapter92 = builder89.build();
        java.util.concurrent.Executor executor93 = restAdapter92.httpExecutor;
        builder81.callbackExecutor = executor93;
        retrofit.RestAdapter.LogLevel logLevel95 = builder81.logLevel;
        restAdapter29.setLogLevel(logLevel95);
        retrofit.RestAdapter.RestHandler restHandler97 = restAdapter29.new RestHandler();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(restAdapter29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler34);
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(converter45);
        org.junit.Assert.assertNull(requestInterceptor46);
        org.junit.Assert.assertNull(provider48);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(log67);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(requestInterceptor78);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNull(errorHandler83);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(restAdapter92);
        org.junit.Assert.assertNotNull(executor93);
        org.junit.Assert.assertTrue("'" + logLevel95 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel95.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test13032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13032");
        retrofit.client.Header[] headerArray22 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList23 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList23, headerArray22);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList23, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList23, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList23, typedOutput29);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList23, typedOutput31);
        retrofit.mime.TypedOutput typedOutput33 = null;
        retrofit.client.Request request34 = new retrofit.client.Request("default", "hi!", (java.util.List<retrofit.client.Header>) headerList23, typedOutput33);
        java.util.List<retrofit.client.Header> headerList35 = request34.getHeaders();
        retrofit.mime.TypedOutput typedOutput36 = null;
        retrofit.client.Request request37 = new retrofit.client.Request("hi!", "", headerList35, typedOutput36);
        retrofit.mime.TypedOutput typedOutput38 = null;
        retrofit.client.Request request39 = new retrofit.client.Request("", "", headerList35, typedOutput38);
        java.util.List<retrofit.client.Header> headerList40 = request39.getHeaders();
        retrofit.mime.TypedOutput typedOutput41 = null;
        retrofit.client.Request request42 = new retrofit.client.Request("", "hi!", headerList40, typedOutput41);
        retrofit.mime.TypedOutput typedOutput43 = null;
        retrofit.client.Request request44 = new retrofit.client.Request("hi!", "", headerList40, typedOutput43);
        retrofit.mime.TypedOutput typedOutput45 = null;
        retrofit.client.Request request46 = new retrofit.client.Request("default", "", headerList40, typedOutput45);
        retrofit.mime.TypedOutput typedOutput47 = null;
        retrofit.client.Request request48 = new retrofit.client.Request("hi!", "", headerList40, typedOutput47);
        org.junit.Assert.assertNotNull(headerArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(headerList35);
        org.junit.Assert.assertNotNull(headerList40);
    }

    @Test
    public void test13033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13033");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.Profiler profiler13 = restAdapter12.profiler;
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter12.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter12.new RestHandler();
        retrofit.converter.Converter converter16 = restAdapter12.converter;
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter12.new RestHandler();
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter16);
    }

    @Test
    public void test13034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13034");
        retrofit.client.Header[] headerArray14 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList15 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList15, headerArray14);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList15, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList15, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList15, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("default", "hi!", (java.util.List<retrofit.client.Header>) headerList15, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("default", "hi!", (java.util.List<retrofit.client.Header>) headerList15, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("default", "", (java.util.List<retrofit.client.Header>) headerList15, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList15, typedOutput29);
        org.junit.Assert.assertNotNull(headerArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test13035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13035");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.Server server5 = builder0.server;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.Server server9 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder10 = builder6.setServer(server9);
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor12 = restAdapter11.callbackExecutor;
        java.util.concurrent.Executor executor13 = restAdapter11.callbackExecutor;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler15 = restAdapter14.errorHandler;
        retrofit.Server server18 = new retrofit.Server("", "");
        restAdapter14.server = server18;
        restAdapter11.server = server18;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        restAdapter11.log = log21;
        retrofit.RestAdapter.Builder builder23 = builder10.setLog(log21);
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder25 = builder10.setLogLevel(logLevel24);
        builder0.logLevel = logLevel24;
        java.util.concurrent.Executor executor27 = builder0.callbackExecutor;
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        log28.log("");
        retrofit.RestAdapter.Builder builder31 = builder0.setLog(log28);
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler33 = builder32.errorHandler;
        retrofit.ErrorHandler errorHandler34 = builder32.errorHandler;
        retrofit.RestAdapter.Log log35 = null;
        builder32.log = log35;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        builder32.requestInterceptor = requestInterceptor37;
        retrofit.client.Client.Provider provider39 = null;
        builder32.clientProvider = provider39;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.Server server44 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder45 = builder41.setServer(server44);
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor47 = restAdapter46.callbackExecutor;
        java.util.concurrent.Executor executor48 = restAdapter46.callbackExecutor;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler50 = restAdapter49.errorHandler;
        retrofit.Server server53 = new retrofit.Server("", "");
        restAdapter49.server = server53;
        restAdapter46.server = server53;
        retrofit.RestAdapter.Log log56 = retrofit.RestAdapter.Log.NONE;
        restAdapter46.log = log56;
        retrofit.RestAdapter.Builder builder58 = builder45.setLog(log56);
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder60 = builder45.setLogLevel(logLevel59);
        retrofit.RestAdapter.Log log61 = builder45.log;
        retrofit.RestAdapter.Builder builder62 = builder32.setLog(log61);
        retrofit.RestAdapter.Builder builder63 = builder31.setLog(log61);
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.Server server67 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder68 = builder64.setServer(server67);
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor70 = restAdapter69.callbackExecutor;
        java.util.concurrent.Executor executor71 = restAdapter69.callbackExecutor;
        retrofit.RestAdapter restAdapter72 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler73 = restAdapter72.errorHandler;
        retrofit.Server server76 = new retrofit.Server("", "");
        restAdapter72.server = server76;
        restAdapter69.server = server76;
        retrofit.RestAdapter.Log log79 = retrofit.RestAdapter.Log.NONE;
        restAdapter69.log = log79;
        retrofit.RestAdapter.Builder builder81 = builder68.setLog(log79);
        retrofit.RestAdapter.LogLevel logLevel82 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder83 = builder68.setLogLevel(logLevel82);
        retrofit.Profiler profiler84 = null;
        builder83.profiler = profiler84;
        retrofit.RestAdapter.Builder builder86 = new retrofit.RestAdapter.Builder();
        retrofit.Server server89 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder90 = builder86.setServer(server89);
        retrofit.RestAdapter.LogLevel logLevel91 = builder90.logLevel;
        retrofit.RestAdapter.Builder builder92 = builder83.setLogLevel(logLevel91);
        java.util.concurrent.Executor executor93 = builder92.callbackExecutor;
        retrofit.RestAdapter.Log log94 = builder92.log;
        retrofit.RestAdapter.Builder builder95 = builder31.setLog(log94);
        builder31.ensureSaneDefaults();
        retrofit.Profiler profiler97 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder98 = builder31.setProfiler(profiler97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(server5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(errorHandler33);
        org.junit.Assert.assertNull(errorHandler34);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(executor47);
        org.junit.Assert.assertNull(executor48);
        org.junit.Assert.assertNull(errorHandler50);
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(log61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNull(executor70);
        org.junit.Assert.assertNull(executor71);
        org.junit.Assert.assertNull(errorHandler73);
        org.junit.Assert.assertNotNull(log79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertTrue("'" + logLevel91 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel91.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNull(executor93);
        org.junit.Assert.assertNotNull(log94);
        org.junit.Assert.assertNotNull(builder95);
    }

    @Test
    public void test13036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13036");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.converter.Converter converter2 = null;
        restAdapter0.converter = converter2;
        retrofit.RestAdapter.RestHandler restHandler4 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel6 = restAdapter0.getLogLevel();
        java.util.concurrent.Executor executor7 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel8 = restAdapter0.logLevel;
        retrofit.client.Response response10 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response12 = restAdapter0.logAndReplaceResponse("default", response10, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(logLevel6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(logLevel8);
    }

    @Test
    public void test13037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13037");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server4 = new retrofit.Server("", "");
        builder0.server = server4;
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        builder0.log = log6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler9 = builder8.errorHandler;
        retrofit.client.Client.Provider provider10 = null;
        builder8.clientProvider = provider10;
        retrofit.Server server14 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder15 = builder8.setServer(server14);
        retrofit.converter.Converter converter16 = null;
        builder15.converter = converter16;
        retrofit.RestAdapter restAdapter18 = builder15.build();
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler20 = builder19.errorHandler;
        java.util.concurrent.Executor executor21 = null;
        builder19.callbackExecutor = executor21;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider24 = builder23.clientProvider;
        java.util.concurrent.Executor executor25 = null;
        builder23.callbackExecutor = executor25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.Server server30 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder31 = builder27.setServer(server30);
        java.lang.String str32 = server30.getUrl();
        retrofit.RestAdapter.Builder builder33 = builder23.setServer(server30);
        retrofit.RestAdapter.Builder builder34 = builder19.setServer(server30);
        restAdapter18.server = server30;
        java.util.concurrent.Executor executor36 = restAdapter18.httpExecutor;
        builder0.httpExecutor = executor36;
        retrofit.Server server38 = null;
        retrofit.client.Client.Provider provider39 = null;
        java.util.concurrent.Executor executor40 = null;
        java.util.concurrent.Executor executor41 = null;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        retrofit.converter.Converter converter43 = null;
        retrofit.Profiler profiler44 = null;
        retrofit.ErrorHandler errorHandler45 = null;
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        log46.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter(server38, provider39, executor40, executor41, requestInterceptor42, converter43, profiler44, errorHandler45, log46, logLevel49);
        retrofit.RestAdapter.RestHandler restHandler51 = restAdapter50.new RestHandler();
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        restAdapter50.log = log52;
        retrofit.converter.Converter converter54 = null;
        restAdapter50.converter = converter54;
        retrofit.RestAdapter.LogLevel logLevel56 = restAdapter50.getLogLevel();
        retrofit.ErrorHandler errorHandler57 = restAdapter50.errorHandler;
        retrofit.Profiler profiler58 = restAdapter50.profiler;
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler60 = null;
        builder59.errorHandler = errorHandler60;
        retrofit.ErrorHandler errorHandler62 = builder59.errorHandler;
        retrofit.RestAdapter.Builder builder64 = builder59.setServer("hi!");
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler66 = builder65.errorHandler;
        retrofit.ErrorHandler errorHandler67 = builder65.errorHandler;
        retrofit.Profiler profiler68 = builder65.profiler;
        retrofit.RestAdapter.Log log69 = builder65.log;
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.FULL;
        builder65.logLevel = logLevel70;
        retrofit.RestAdapter.Builder builder72 = builder64.setLogLevel(logLevel70);
        retrofit.Server server73 = null;
        retrofit.client.Client.Provider provider74 = null;
        java.util.concurrent.Executor executor75 = null;
        java.util.concurrent.Executor executor76 = null;
        retrofit.RequestInterceptor requestInterceptor77 = null;
        retrofit.converter.Converter converter78 = null;
        retrofit.Profiler profiler79 = null;
        retrofit.ErrorHandler errorHandler80 = null;
        retrofit.RestAdapter.Log log81 = retrofit.RestAdapter.Log.NONE;
        log81.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel84 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter85 = new retrofit.RestAdapter(server73, provider74, executor75, executor76, requestInterceptor77, converter78, profiler79, errorHandler80, log81, logLevel84);
        log81.log("");
        retrofit.RestAdapter.Builder builder88 = builder72.setLog(log81);
        restAdapter50.log = log81;
        log81.log("");
        builder0.log = log81;
        builder0.ensureSaneDefaults();
        retrofit.Server server94 = builder0.server;
        builder0.ensureSaneDefaults();
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(restAdapter18);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNull(provider24);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(executor36);
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler57);
        org.junit.Assert.assertNull(profiler58);
        org.junit.Assert.assertNull(errorHandler62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(errorHandler66);
        org.junit.Assert.assertNull(errorHandler67);
        org.junit.Assert.assertNull(profiler68);
        org.junit.Assert.assertNull(log69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(log81);
        org.junit.Assert.assertTrue("'" + logLevel84 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel84.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(server94);
    }

    @Test
    public void test13038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13038");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.converter.Converter converter4 = builder0.converter;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider6 = builder5.clientProvider;
        java.util.concurrent.Executor executor7 = null;
        builder5.callbackExecutor = executor7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.Server server12 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder13 = builder9.setServer(server12);
        java.lang.String str14 = server12.getUrl();
        retrofit.RestAdapter.Builder builder15 = builder5.setServer(server12);
        builder5.ensureSaneDefaults();
        retrofit.Server server17 = null;
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Log log25 = retrofit.RestAdapter.Log.NONE;
        log25.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server17, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log25, logLevel28);
        retrofit.RestAdapter.RestHandler restHandler30 = restAdapter29.new RestHandler();
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        restAdapter29.log = log31;
        retrofit.RestAdapter.Builder builder33 = builder5.setLog(log31);
        retrofit.RestAdapter.Builder builder35 = builder5.setServer("hi!");
        retrofit.RestAdapter.Builder builder37 = builder35.setServer("hi!");
        retrofit.ErrorHandler errorHandler38 = builder35.errorHandler;
        retrofit.converter.Converter converter39 = builder35.converter;
        retrofit.RestAdapter.Builder builder40 = builder0.setConverter(converter39);
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler42 = builder41.errorHandler;
        java.util.concurrent.Executor executor43 = builder41.callbackExecutor;
        retrofit.RestAdapter.Builder builder45 = builder41.setServer("hi!");
        builder45.ensureSaneDefaults();
        java.util.concurrent.Executor executor47 = builder45.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel48 = builder45.logLevel;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler50 = builder49.errorHandler;
        retrofit.client.Client.Provider provider51 = null;
        builder49.clientProvider = provider51;
        retrofit.Server server55 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder56 = builder49.setServer(server55);
        retrofit.converter.Converter converter57 = null;
        builder56.converter = converter57;
        retrofit.RestAdapter restAdapter59 = builder56.build();
        retrofit.RestAdapter restAdapter60 = builder56.build();
        retrofit.client.Client.Provider provider61 = builder56.clientProvider;
        retrofit.RestAdapter.Builder builder62 = builder45.setClient(provider61);
        retrofit.client.Client.Provider provider63 = builder62.clientProvider;
        retrofit.RestAdapter.Builder builder64 = builder40.setClient(provider63);
        retrofit.Server server65 = builder64.server;
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor67 = restAdapter66.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler68 = restAdapter66.new RestHandler();
        retrofit.Server server71 = new retrofit.Server("hi!", "hi!");
        restAdapter66.server = server71;
        retrofit.RequestInterceptor requestInterceptor73 = restAdapter66.requestInterceptor;
        retrofit.client.Client.Provider provider74 = restAdapter66.clientProvider;
        java.util.concurrent.Executor executor75 = restAdapter66.callbackExecutor;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler77 = builder76.errorHandler;
        retrofit.Server server80 = new retrofit.Server("", "");
        builder76.server = server80;
        java.util.concurrent.Executor executor82 = builder76.callbackExecutor;
        retrofit.Server server83 = builder76.server;
        restAdapter66.server = server83;
        java.lang.String str85 = server83.getName();
        java.lang.String str86 = server83.getName();
        builder64.server = server83;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertNull(provider6);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(log25);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(errorHandler38);
        org.junit.Assert.assertNotNull(converter39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(errorHandler42);
        org.junit.Assert.assertNull(executor43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(executor47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler50);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(restAdapter59);
        org.junit.Assert.assertNotNull(restAdapter60);
        org.junit.Assert.assertNotNull(provider61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(provider63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(server65);
        org.junit.Assert.assertNull(executor67);
        org.junit.Assert.assertNull(requestInterceptor73);
        org.junit.Assert.assertNull(provider74);
        org.junit.Assert.assertNull(executor75);
        org.junit.Assert.assertNull(errorHandler77);
        org.junit.Assert.assertNull(executor82);
        org.junit.Assert.assertNotNull(server83);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
    }

    @Test
    public void test13039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13039");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.converter.Converter converter3 = null;
        builder0.converter = converter3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        builder0.requestInterceptor = requestInterceptor5;
        retrofit.client.Client.Provider provider7 = builder0.clientProvider;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler10 = restAdapter9.errorHandler;
        retrofit.Server server13 = new retrofit.Server("", "");
        restAdapter9.server = server13;
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter9.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter9.logLevel;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor18 = restAdapter17.callbackExecutor;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor20 = restAdapter19.callbackExecutor;
        java.util.concurrent.Executor executor21 = restAdapter19.callbackExecutor;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler23 = restAdapter22.errorHandler;
        retrofit.Server server26 = new retrofit.Server("", "");
        restAdapter22.server = server26;
        restAdapter19.server = server26;
        restAdapter17.server = server26;
        retrofit.Profiler profiler30 = restAdapter17.profiler;
        retrofit.ErrorHandler errorHandler31 = null;
        restAdapter17.errorHandler = errorHandler31;
        retrofit.Profiler profiler33 = null;
        restAdapter17.profiler = profiler33;
        java.util.concurrent.Executor executor35 = null;
        restAdapter17.httpExecutor = executor35;
        retrofit.RestAdapter.LogLevel logLevel37 = restAdapter17.logLevel;
        retrofit.converter.Converter converter38 = restAdapter17.converter;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler40 = builder39.errorHandler;
        retrofit.ErrorHandler errorHandler41 = builder39.errorHandler;
        retrofit.Profiler profiler42 = builder39.profiler;
        retrofit.RestAdapter.Log log43 = builder39.log;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.FULL;
        builder39.logLevel = logLevel44;
        retrofit.Profiler profiler46 = builder39.profiler;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler48 = null;
        builder47.errorHandler = errorHandler48;
        retrofit.ErrorHandler errorHandler50 = builder47.errorHandler;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler52 = builder51.errorHandler;
        retrofit.Server server55 = new retrofit.Server("", "");
        builder51.server = server55;
        retrofit.RestAdapter.Log log57 = retrofit.RestAdapter.Log.NONE;
        builder51.log = log57;
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler60 = builder59.errorHandler;
        retrofit.client.Client.Provider provider61 = null;
        builder59.clientProvider = provider61;
        retrofit.Server server65 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder66 = builder59.setServer(server65);
        retrofit.converter.Converter converter67 = null;
        builder66.converter = converter67;
        retrofit.RestAdapter restAdapter69 = builder66.build();
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler71 = builder70.errorHandler;
        java.util.concurrent.Executor executor72 = null;
        builder70.callbackExecutor = executor72;
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider75 = builder74.clientProvider;
        java.util.concurrent.Executor executor76 = null;
        builder74.callbackExecutor = executor76;
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        retrofit.Server server81 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder82 = builder78.setServer(server81);
        java.lang.String str83 = server81.getUrl();
        retrofit.RestAdapter.Builder builder84 = builder74.setServer(server81);
        retrofit.RestAdapter.Builder builder85 = builder70.setServer(server81);
        restAdapter69.server = server81;
        java.util.concurrent.Executor executor87 = restAdapter69.httpExecutor;
        builder51.httpExecutor = executor87;
        builder47.httpExecutor = executor87;
        builder39.httpExecutor = executor87;
        restAdapter17.httpExecutor = executor87;
        restAdapter9.httpExecutor = executor87;
        builder0.callbackExecutor = executor87;
        retrofit.client.Client.Provider provider94 = builder0.clientProvider;
        retrofit.ErrorHandler errorHandler95 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler96 = builder0.errorHandler;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder98 = builder0.setServer("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be blank.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(provider7);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNull(logLevel16);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNull(profiler30);
        org.junit.Assert.assertNull(logLevel37);
        org.junit.Assert.assertNull(converter38);
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNull(errorHandler41);
        org.junit.Assert.assertNull(profiler42);
        org.junit.Assert.assertNull(log43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler46);
        org.junit.Assert.assertNull(errorHandler50);
        org.junit.Assert.assertNull(errorHandler52);
        org.junit.Assert.assertNotNull(log57);
        org.junit.Assert.assertNull(errorHandler60);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(restAdapter69);
        org.junit.Assert.assertNull(errorHandler71);
        org.junit.Assert.assertNull(provider75);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "hi!" + "'", str83, "hi!");
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(executor87);
        org.junit.Assert.assertNotNull(provider94);
        org.junit.Assert.assertNotNull(errorHandler95);
        org.junit.Assert.assertNotNull(errorHandler96);
    }

    @Test
    public void test13040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13040");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.Profiler profiler3 = builder0.profiler;
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor5 = restAdapter4.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.Server server9 = new retrofit.Server("hi!", "hi!");
        restAdapter4.server = server9;
        retrofit.RestAdapter.Builder builder11 = builder0.setServer(server9);
        retrofit.Server server12 = builder0.server;
        retrofit.Profiler profiler13 = null;
        builder0.profiler = profiler13;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider16 = builder15.clientProvider;
        java.util.concurrent.Executor executor17 = null;
        builder15.callbackExecutor = executor17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.Server server22 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder23 = builder19.setServer(server22);
        java.lang.String str24 = server22.getUrl();
        retrofit.RestAdapter.Builder builder25 = builder15.setServer(server22);
        builder15.ensureSaneDefaults();
        retrofit.Server server27 = null;
        retrofit.client.Client.Provider provider28 = null;
        java.util.concurrent.Executor executor29 = null;
        java.util.concurrent.Executor executor30 = null;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        retrofit.converter.Converter converter32 = null;
        retrofit.Profiler profiler33 = null;
        retrofit.ErrorHandler errorHandler34 = null;
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        log35.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter(server27, provider28, executor29, executor30, requestInterceptor31, converter32, profiler33, errorHandler34, log35, logLevel38);
        retrofit.RestAdapter.RestHandler restHandler40 = restAdapter39.new RestHandler();
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        restAdapter39.log = log41;
        retrofit.RestAdapter.Builder builder43 = builder15.setLog(log41);
        retrofit.RestAdapter.Builder builder45 = builder15.setServer("hi!");
        retrofit.RestAdapter restAdapter46 = builder15.build();
        retrofit.RestAdapter.RestHandler restHandler47 = restAdapter46.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter46.logLevel;
        java.util.concurrent.Executor executor49 = restAdapter46.callbackExecutor;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider51 = builder50.clientProvider;
        retrofit.RestAdapter.Builder builder53 = builder50.setServer("default");
        retrofit.RestAdapter restAdapter54 = builder50.build();
        retrofit.client.Client.Provider provider55 = builder50.clientProvider;
        restAdapter46.clientProvider = provider55;
        retrofit.RestAdapter.Builder builder57 = builder0.setClient(provider55);
        builder57.ensureSaneDefaults();
        retrofit.Server server59 = null;
        retrofit.client.Client.Provider provider60 = null;
        java.util.concurrent.Executor executor61 = null;
        java.util.concurrent.Executor executor62 = null;
        retrofit.RequestInterceptor requestInterceptor63 = null;
        retrofit.converter.Converter converter64 = null;
        retrofit.Profiler profiler65 = null;
        retrofit.ErrorHandler errorHandler66 = null;
        retrofit.RestAdapter.Log log67 = retrofit.RestAdapter.Log.NONE;
        log67.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter(server59, provider60, executor61, executor62, requestInterceptor63, converter64, profiler65, errorHandler66, log67, logLevel70);
        retrofit.RestAdapter.RestHandler restHandler72 = restAdapter71.new RestHandler();
        retrofit.client.Client.Provider provider73 = restAdapter71.clientProvider;
        retrofit.RestAdapter.Log log74 = restAdapter71.log;
        retrofit.RestAdapter.RestHandler restHandler75 = restAdapter71.new RestHandler();
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler77 = builder76.errorHandler;
        java.util.concurrent.Executor executor78 = builder76.callbackExecutor;
        retrofit.RestAdapter.Builder builder80 = builder76.setServer("hi!");
        builder80.ensureSaneDefaults();
        java.util.concurrent.Executor executor82 = builder80.callbackExecutor;
        restAdapter71.callbackExecutor = executor82;
        builder57.httpExecutor = executor82;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(server12);
        org.junit.Assert.assertNull(provider16);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(restAdapter46);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(executor49);
        org.junit.Assert.assertNull(provider51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(restAdapter54);
        org.junit.Assert.assertNotNull(provider55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(log67);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(provider73);
        org.junit.Assert.assertNotNull(log74);
        org.junit.Assert.assertNull(errorHandler77);
        org.junit.Assert.assertNull(executor78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(executor82);
    }

    @Test
    public void test13041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13041");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.client.Client.Provider provider2 = restAdapter0.clientProvider;
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler5 = builder4.errorHandler;
        retrofit.ErrorHandler errorHandler6 = builder4.errorHandler;
        retrofit.Profiler profiler7 = builder4.profiler;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor9 = restAdapter8.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler10 = restAdapter8.new RestHandler();
        retrofit.Server server13 = new retrofit.Server("hi!", "hi!");
        restAdapter8.server = server13;
        retrofit.RestAdapter.Builder builder15 = builder4.setServer(server13);
        retrofit.converter.Converter converter16 = null;
        builder15.converter = converter16;
        retrofit.Server server20 = new retrofit.Server("hi!", "");
        builder15.server = server20;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor23 = restAdapter22.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter22.new RestHandler();
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor26 = restAdapter25.callbackExecutor;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor28 = restAdapter27.callbackExecutor;
        java.util.concurrent.Executor executor29 = restAdapter27.callbackExecutor;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler31 = restAdapter30.errorHandler;
        retrofit.Server server34 = new retrofit.Server("", "");
        restAdapter30.server = server34;
        restAdapter27.server = server34;
        restAdapter25.server = server34;
        retrofit.Profiler profiler38 = restAdapter25.profiler;
        retrofit.ErrorHandler errorHandler39 = null;
        restAdapter25.errorHandler = errorHandler39;
        retrofit.Profiler profiler41 = null;
        restAdapter25.profiler = profiler41;
        retrofit.RestAdapter.LogLevel logLevel43 = restAdapter25.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter25.logLevel = logLevel44;
        restAdapter22.logLevel = logLevel44;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.Server server50 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder51 = builder47.setServer(server50);
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor53 = restAdapter52.callbackExecutor;
        java.util.concurrent.Executor executor54 = restAdapter52.callbackExecutor;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler56 = restAdapter55.errorHandler;
        retrofit.Server server59 = new retrofit.Server("", "");
        restAdapter55.server = server59;
        restAdapter52.server = server59;
        retrofit.RestAdapter.Log log62 = retrofit.RestAdapter.Log.NONE;
        restAdapter52.log = log62;
        retrofit.RestAdapter.Builder builder64 = builder51.setLog(log62);
        retrofit.RestAdapter.LogLevel logLevel65 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder66 = builder51.setLogLevel(logLevel65);
        retrofit.Profiler profiler67 = null;
        builder66.profiler = profiler67;
        retrofit.converter.Converter converter69 = null;
        builder66.converter = converter69;
        retrofit.ErrorHandler errorHandler71 = null;
        builder66.errorHandler = errorHandler71;
        retrofit.RestAdapter restAdapter73 = builder66.build();
        retrofit.ErrorHandler errorHandler74 = builder66.errorHandler;
        restAdapter22.errorHandler = errorHandler74;
        retrofit.RestAdapter.Builder builder76 = builder15.setErrorHandler(errorHandler74);
        retrofit.client.Client.Provider provider77 = builder76.clientProvider;
        retrofit.Profiler profiler78 = null;
        builder76.profiler = profiler78;
        retrofit.ErrorHandler errorHandler80 = builder76.errorHandler;
        restAdapter0.errorHandler = errorHandler80;
        org.junit.Assert.assertNull(provider2);
        org.junit.Assert.assertNull(errorHandler5);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(errorHandler31);
        org.junit.Assert.assertNull(profiler38);
        org.junit.Assert.assertNull(logLevel43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(executor53);
        org.junit.Assert.assertNull(executor54);
        org.junit.Assert.assertNull(errorHandler56);
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(restAdapter73);
        org.junit.Assert.assertNotNull(errorHandler74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNull(provider77);
        org.junit.Assert.assertNotNull(errorHandler80);
    }
}

