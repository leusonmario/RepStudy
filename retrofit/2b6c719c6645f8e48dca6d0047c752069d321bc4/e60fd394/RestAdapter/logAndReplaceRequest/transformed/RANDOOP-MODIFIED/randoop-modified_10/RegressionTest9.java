import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest9 {

    public static boolean debug = false;

    @Test
    public void test04501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04501");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.ErrorHandler errorHandler2 = restAdapter0.errorHandler;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler4 = builder3.errorHandler;
        retrofit.Server server7 = new retrofit.Server("", "");
        builder3.server = server7;
        retrofit.RestAdapter.LogLevel logLevel9 = builder3.logLevel;
        restAdapter0.logLevel = logLevel9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler12 = builder11.errorHandler;
        java.util.concurrent.Executor executor13 = null;
        builder11.callbackExecutor = executor13;
        retrofit.converter.Converter converter15 = builder11.converter;
        retrofit.RestAdapter.Builder builder17 = builder11.setServer("default");
        retrofit.Profiler profiler18 = null;
        builder11.profiler = profiler18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider21 = builder20.clientProvider;
        java.util.concurrent.Executor executor22 = null;
        builder20.callbackExecutor = executor22;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.Server server27 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder28 = builder24.setServer(server27);
        java.lang.String str29 = server27.getUrl();
        retrofit.RestAdapter.Builder builder30 = builder20.setServer(server27);
        builder20.ensureSaneDefaults();
        retrofit.Server server32 = null;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        log40.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log40, logLevel43);
        retrofit.RestAdapter.RestHandler restHandler45 = restAdapter44.new RestHandler();
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        restAdapter44.log = log46;
        retrofit.RestAdapter.Builder builder48 = builder20.setLog(log46);
        retrofit.RestAdapter.Builder builder50 = builder20.setServer("hi!");
        retrofit.Profiler profiler51 = null;
        builder50.profiler = profiler51;
        retrofit.RestAdapter restAdapter53 = builder50.build();
        retrofit.ErrorHandler errorHandler54 = restAdapter53.errorHandler;
        retrofit.RestAdapter.Builder builder55 = builder11.setErrorHandler(errorHandler54);
        restAdapter0.errorHandler = errorHandler54;
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(errorHandler4);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(converter15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(provider21);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(restAdapter53);
        org.junit.Assert.assertNotNull(errorHandler54);
        org.junit.Assert.assertNotNull(builder55);
    }

    @Test
    public void test04502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04502");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean6 = logLevel5.log();
        builder0.logLevel = logLevel5;
        retrofit.ErrorHandler errorHandler8 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder10 = builder0.setServer("hi!");
        retrofit.ErrorHandler errorHandler11 = builder0.errorHandler;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Log log13 = builder0.log;
        retrofit.Profiler profiler14 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder15 = builder0.setProfiler(profiler14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNotNull(log13);
    }

    @Test
    public void test04503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04503");
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        log14.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel17);
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter18.new RestHandler();
        retrofit.client.Header[] headerArray28 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList29 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList29, headerArray28);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList29, typedOutput31);
        retrofit.mime.TypedOutput typedOutput33 = null;
        retrofit.client.Request request34 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList29, typedOutput33);
        retrofit.mime.TypedOutput typedOutput35 = null;
        retrofit.client.Request request36 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList29, typedOutput35);
        retrofit.mime.TypedOutput typedOutput37 = null;
        retrofit.client.Request request38 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList29, typedOutput37);
        retrofit.mime.TypedOutput typedOutput39 = request38.getBody();
        retrofit.client.Request request40 = restAdapter18.logAndReplaceRequest(request38);
        java.util.List<retrofit.client.Header> headerList41 = request38.getHeaders();
        retrofit.mime.TypedOutput typedOutput42 = null;
        retrofit.client.Request request43 = new retrofit.client.Request("", "default", headerList41, typedOutput42);
        retrofit.mime.TypedOutput typedOutput44 = null;
        retrofit.client.Request request45 = new retrofit.client.Request("default", "default", headerList41, typedOutput44);
        retrofit.mime.TypedOutput typedOutput46 = null;
        retrofit.client.Request request47 = new retrofit.client.Request("hi!", "", headerList41, typedOutput46);
        retrofit.mime.TypedOutput typedOutput48 = request47.getBody();
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(typedOutput39);
        org.junit.Assert.assertNotNull(request40);
        org.junit.Assert.assertNotNull(headerList41);
        org.junit.Assert.assertNull(typedOutput48);
    }

    @Test
    public void test04504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04504");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        restAdapter5.log = log15;
        retrofit.RestAdapter.Builder builder17 = builder4.setLog(log15);
        retrofit.converter.Converter converter18 = null;
        builder17.converter = converter18;
        retrofit.converter.Converter converter20 = builder17.converter;
        retrofit.Profiler profiler21 = null;
        builder17.profiler = profiler21;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler24 = builder23.errorHandler;
        retrofit.Server server27 = new retrofit.Server("", "");
        builder23.server = server27;
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        builder23.log = log29;
        retrofit.RestAdapter.LogLevel logLevel31 = builder23.logLevel;
        java.util.concurrent.Executor executor32 = builder23.callbackExecutor;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler34 = null;
        builder33.errorHandler = errorHandler34;
        retrofit.ErrorHandler errorHandler36 = builder33.errorHandler;
        retrofit.RestAdapter.Builder builder38 = builder33.setServer("hi!");
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler40 = builder39.errorHandler;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.Server server44 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder45 = builder41.setServer(server44);
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor47 = restAdapter46.callbackExecutor;
        java.util.concurrent.Executor executor48 = restAdapter46.callbackExecutor;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler50 = restAdapter49.errorHandler;
        retrofit.Server server53 = new retrofit.Server("", "");
        restAdapter49.server = server53;
        restAdapter46.server = server53;
        retrofit.RestAdapter.Log log56 = retrofit.RestAdapter.Log.NONE;
        restAdapter46.log = log56;
        retrofit.RestAdapter.Builder builder58 = builder45.setLog(log56);
        retrofit.RestAdapter.Builder builder59 = builder39.setLog(log56);
        builder33.log = log56;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler62 = builder61.errorHandler;
        retrofit.client.Client.Provider provider63 = null;
        builder61.clientProvider = provider63;
        retrofit.Server server67 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder68 = builder61.setServer(server67);
        retrofit.converter.Converter converter69 = null;
        builder68.converter = converter69;
        retrofit.RestAdapter restAdapter71 = builder68.build();
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler73 = builder72.errorHandler;
        java.util.concurrent.Executor executor74 = null;
        builder72.callbackExecutor = executor74;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider77 = builder76.clientProvider;
        java.util.concurrent.Executor executor78 = null;
        builder76.callbackExecutor = executor78;
        retrofit.RestAdapter.Builder builder80 = new retrofit.RestAdapter.Builder();
        retrofit.Server server83 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder84 = builder80.setServer(server83);
        java.lang.String str85 = server83.getUrl();
        retrofit.RestAdapter.Builder builder86 = builder76.setServer(server83);
        retrofit.RestAdapter.Builder builder87 = builder72.setServer(server83);
        restAdapter71.server = server83;
        retrofit.client.Client.Provider provider89 = restAdapter71.clientProvider;
        retrofit.RestAdapter.Builder builder90 = builder33.setClient(provider89);
        retrofit.RestAdapter.Builder builder91 = builder23.setClient(provider89);
        retrofit.RestAdapter.Builder builder92 = builder17.setClient(provider89);
        builder17.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor94 = builder17.requestInterceptor;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(converter20);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(errorHandler36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(executor47);
        org.junit.Assert.assertNull(executor48);
        org.junit.Assert.assertNull(errorHandler50);
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(errorHandler62);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(restAdapter71);
        org.junit.Assert.assertNull(errorHandler73);
        org.junit.Assert.assertNull(provider77);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "hi!" + "'", str85, "hi!");
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(provider89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(requestInterceptor94);
    }

    @Test
    public void test04505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04505");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        java.util.concurrent.Executor executor4 = null;
        builder0.httpExecutor = executor4;
        retrofit.Profiler profiler6 = null;
        builder0.profiler = profiler6;
        retrofit.RestAdapter.Builder builder9 = builder0.setServer("hi!");
        retrofit.Profiler profiler10 = builder0.profiler;
        java.util.concurrent.Executor executor11 = builder0.httpExecutor;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler13 = builder12.errorHandler;
        java.util.concurrent.Executor executor14 = builder12.callbackExecutor;
        retrofit.RestAdapter.Builder builder16 = builder12.setServer("hi!");
        retrofit.Server server19 = new retrofit.Server("default", "hi!");
        java.lang.String str20 = server19.getUrl();
        retrofit.RestAdapter.Builder builder21 = builder16.setServer(server19);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler23 = builder22.errorHandler;
        retrofit.ErrorHandler errorHandler24 = builder22.errorHandler;
        java.util.concurrent.Executor executor25 = builder22.callbackExecutor;
        java.util.concurrent.Executor executor26 = null;
        builder22.callbackExecutor = executor26;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler29 = builder28.errorHandler;
        retrofit.Server server32 = new retrofit.Server("", "");
        builder28.server = server32;
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        builder28.log = log34;
        retrofit.RestAdapter.LogLevel logLevel36 = builder28.logLevel;
        retrofit.RestAdapter.Builder builder37 = builder22.setLogLevel(logLevel36);
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler39 = builder38.errorHandler;
        retrofit.client.Client.Provider provider40 = null;
        builder38.clientProvider = provider40;
        retrofit.Server server44 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder45 = builder38.setServer(server44);
        retrofit.converter.Converter converter46 = null;
        builder45.converter = converter46;
        retrofit.RestAdapter restAdapter48 = builder45.build();
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler50 = builder49.errorHandler;
        java.util.concurrent.Executor executor51 = null;
        builder49.callbackExecutor = executor51;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider54 = builder53.clientProvider;
        java.util.concurrent.Executor executor55 = null;
        builder53.callbackExecutor = executor55;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.Server server60 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder61 = builder57.setServer(server60);
        java.lang.String str62 = server60.getUrl();
        retrofit.RestAdapter.Builder builder63 = builder53.setServer(server60);
        retrofit.RestAdapter.Builder builder64 = builder49.setServer(server60);
        restAdapter48.server = server60;
        retrofit.client.Client.Provider provider66 = restAdapter48.clientProvider;
        retrofit.RestAdapter.Builder builder67 = builder37.setClient(provider66);
        retrofit.RestAdapter.Builder builder68 = builder21.setClient(provider66);
        retrofit.RestAdapter.Builder builder69 = builder0.setClient(provider66);
        retrofit.RequestInterceptor requestInterceptor70 = builder69.requestInterceptor;
        java.util.concurrent.Executor executor71 = builder69.httpExecutor;
        retrofit.RestAdapter restAdapter72 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel73 = restAdapter72.logLevel;
        retrofit.RestAdapter.RestHandler restHandler74 = restAdapter72.new RestHandler();
        retrofit.RestAdapter.Log log75 = retrofit.RestAdapter.Log.NONE;
        log75.log("");
        restAdapter72.log = log75;
        retrofit.RestAdapter.Builder builder79 = builder69.setLog(log75);
        retrofit.RestAdapter.LogLevel logLevel80 = builder69.logLevel;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(profiler10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "default" + "'", str20, "default");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(restAdapter48);
        org.junit.Assert.assertNull(errorHandler50);
        org.junit.Assert.assertNull(provider54);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(provider66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNull(requestInterceptor70);
        org.junit.Assert.assertNull(executor71);
        org.junit.Assert.assertNull(logLevel73);
        org.junit.Assert.assertNotNull(log75);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertTrue("'" + logLevel80 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel80.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test04506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04506");
        retrofit.client.Header[] headerArray20 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList21 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList21, headerArray20);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList21, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList21, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList21, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList21, typedOutput29);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("default", "hi!", (java.util.List<retrofit.client.Header>) headerList21, typedOutput31);
        retrofit.mime.TypedOutput typedOutput33 = null;
        retrofit.client.Request request34 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList21, typedOutput33);
        retrofit.mime.TypedOutput typedOutput35 = null;
        retrofit.client.Request request36 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList21, typedOutput35);
        retrofit.mime.TypedOutput typedOutput37 = null;
        retrofit.client.Request request38 = new retrofit.client.Request("hi!", "default", (java.util.List<retrofit.client.Header>) headerList21, typedOutput37);
        retrofit.mime.TypedOutput typedOutput39 = null;
        retrofit.client.Request request40 = new retrofit.client.Request("default", "hi!", (java.util.List<retrofit.client.Header>) headerList21, typedOutput39);
        retrofit.mime.TypedOutput typedOutput41 = null;
        retrofit.client.Request request42 = new retrofit.client.Request("hi!", "default", (java.util.List<retrofit.client.Header>) headerList21, typedOutput41);
        java.util.List<retrofit.client.Header> headerList43 = request42.getHeaders();
        org.junit.Assert.assertNotNull(headerArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(headerList43);
    }

    @Test
    public void test04507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04507");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler19 = builder18.errorHandler;
        retrofit.ErrorHandler errorHandler20 = builder18.errorHandler;
        retrofit.converter.Converter converter21 = null;
        builder18.converter = converter21;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        builder18.requestInterceptor = requestInterceptor23;
        retrofit.client.Client.Provider provider25 = builder18.clientProvider;
        builder18.ensureSaneDefaults();
        retrofit.client.Client.Provider provider27 = builder18.clientProvider;
        restAdapter0.clientProvider = provider27;
        retrofit.converter.Converter converter29 = restAdapter0.converter;
        java.util.concurrent.Executor executor30 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter0.getLogLevel();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNull(provider25);
        org.junit.Assert.assertNotNull(provider27);
        org.junit.Assert.assertNull(converter29);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNull(logLevel31);
    }

    @Test
    public void test04508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04508");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.Profiler profiler3 = builder0.profiler;
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor5 = restAdapter4.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.Server server9 = new retrofit.Server("hi!", "hi!");
        restAdapter4.server = server9;
        retrofit.RestAdapter.Builder builder11 = builder0.setServer(server9);
        retrofit.converter.Converter converter12 = null;
        builder11.converter = converter12;
        retrofit.Profiler profiler14 = null;
        builder11.profiler = profiler14;
        retrofit.RestAdapter restAdapter16 = builder11.build();
        java.util.concurrent.Executor executor17 = builder11.callbackExecutor;
        retrofit.RestAdapter.Builder builder19 = builder11.setServer("default");
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor21 = restAdapter20.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean23 = logLevel22.log();
        restAdapter20.logLevel = logLevel22;
        retrofit.Profiler profiler25 = restAdapter20.profiler;
        retrofit.RestAdapter.RestHandler restHandler26 = restAdapter20.new RestHandler();
        retrofit.Server server27 = restAdapter20.server;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor29 = restAdapter28.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler30 = restAdapter28.new RestHandler();
        retrofit.Server server33 = new retrofit.Server("hi!", "hi!");
        restAdapter28.server = server33;
        retrofit.Server server35 = restAdapter28.server;
        retrofit.converter.Converter converter36 = restAdapter28.converter;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider38 = builder37.clientProvider;
        java.util.concurrent.Executor executor39 = null;
        builder37.callbackExecutor = executor39;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.Server server44 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder45 = builder41.setServer(server44);
        java.lang.String str46 = server44.getUrl();
        retrofit.RestAdapter.Builder builder47 = builder37.setServer(server44);
        builder37.ensureSaneDefaults();
        retrofit.Server server49 = null;
        retrofit.client.Client.Provider provider50 = null;
        java.util.concurrent.Executor executor51 = null;
        java.util.concurrent.Executor executor52 = null;
        retrofit.RequestInterceptor requestInterceptor53 = null;
        retrofit.converter.Converter converter54 = null;
        retrofit.Profiler profiler55 = null;
        retrofit.ErrorHandler errorHandler56 = null;
        retrofit.RestAdapter.Log log57 = retrofit.RestAdapter.Log.NONE;
        log57.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter(server49, provider50, executor51, executor52, requestInterceptor53, converter54, profiler55, errorHandler56, log57, logLevel60);
        retrofit.RestAdapter.RestHandler restHandler62 = restAdapter61.new RestHandler();
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        restAdapter61.log = log63;
        retrofit.RestAdapter.Builder builder65 = builder37.setLog(log63);
        retrofit.RestAdapter.LogLevel logLevel66 = builder37.logLevel;
        boolean boolean67 = logLevel66.log();
        restAdapter28.logLevel = logLevel66;
        restAdapter20.logLevel = logLevel66;
        boolean boolean70 = logLevel66.log();
        boolean boolean71 = logLevel66.log();
        retrofit.RestAdapter.Builder builder72 = builder11.setLogLevel(logLevel66);
        java.util.concurrent.Executor executor73 = builder72.httpExecutor;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(restAdapter16);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(profiler25);
        org.junit.Assert.assertNull(server27);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNotNull(server35);
        org.junit.Assert.assertNull(converter36);
        org.junit.Assert.assertNull(provider38);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(log57);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(executor73);
    }

    @Test
    public void test04509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04509");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter3 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler4 = restAdapter3.errorHandler;
        retrofit.Server server7 = new retrofit.Server("", "");
        restAdapter3.server = server7;
        restAdapter0.server = server7;
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter0.logLevel;
        retrofit.Server server11 = restAdapter0.server;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor13 = restAdapter12.callbackExecutor;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor15 = restAdapter14.callbackExecutor;
        java.util.concurrent.Executor executor16 = restAdapter14.callbackExecutor;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler18 = restAdapter17.errorHandler;
        retrofit.Server server21 = new retrofit.Server("", "");
        restAdapter17.server = server21;
        restAdapter14.server = server21;
        restAdapter12.server = server21;
        retrofit.Profiler profiler25 = restAdapter12.profiler;
        retrofit.ErrorHandler errorHandler26 = null;
        restAdapter12.errorHandler = errorHandler26;
        retrofit.Profiler profiler28 = null;
        restAdapter12.profiler = profiler28;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        restAdapter12.requestInterceptor = requestInterceptor30;
        java.util.concurrent.Executor executor32 = restAdapter12.callbackExecutor;
        retrofit.converter.Converter converter33 = null;
        restAdapter12.converter = converter33;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor36 = restAdapter35.callbackExecutor;
        java.util.concurrent.Executor executor37 = restAdapter35.callbackExecutor;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler39 = restAdapter38.errorHandler;
        retrofit.Server server42 = new retrofit.Server("", "");
        restAdapter38.server = server42;
        restAdapter35.server = server42;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler46 = restAdapter45.errorHandler;
        retrofit.Server server49 = new retrofit.Server("", "");
        restAdapter45.server = server49;
        restAdapter35.server = server49;
        retrofit.RestAdapter.Log log52 = restAdapter35.log;
        retrofit.Profiler profiler53 = restAdapter35.profiler;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.Server server57 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder58 = builder54.setServer(server57);
        java.lang.String str59 = server57.getUrl();
        restAdapter35.server = server57;
        retrofit.client.Client.Provider provider61 = restAdapter35.clientProvider;
        retrofit.RestAdapter.RestHandler restHandler62 = restAdapter35.new RestHandler();
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler64 = builder63.errorHandler;
        retrofit.ErrorHandler errorHandler65 = builder63.errorHandler;
        retrofit.RestAdapter.Log log66 = null;
        builder63.log = log66;
        retrofit.Server server70 = new retrofit.Server("hi!", "hi!");
        builder63.server = server70;
        retrofit.Server server72 = null;
        retrofit.client.Client.Provider provider73 = null;
        java.util.concurrent.Executor executor74 = null;
        java.util.concurrent.Executor executor75 = null;
        retrofit.RequestInterceptor requestInterceptor76 = null;
        retrofit.converter.Converter converter77 = null;
        retrofit.Profiler profiler78 = null;
        retrofit.ErrorHandler errorHandler79 = null;
        retrofit.RestAdapter.Log log80 = retrofit.RestAdapter.Log.NONE;
        log80.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel83 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter84 = new retrofit.RestAdapter(server72, provider73, executor74, executor75, requestInterceptor76, converter77, profiler78, errorHandler79, log80, logLevel83);
        retrofit.RestAdapter.RestHandler restHandler85 = restAdapter84.new RestHandler();
        retrofit.RestAdapter.Log log86 = retrofit.RestAdapter.Log.NONE;
        restAdapter84.log = log86;
        retrofit.converter.Converter converter88 = restAdapter84.converter;
        retrofit.RestAdapter.LogLevel logLevel89 = restAdapter84.logLevel;
        builder63.logLevel = logLevel89;
        restAdapter35.logLevel = logLevel89;
        restAdapter12.logLevel = logLevel89;
        restAdapter0.logLevel = logLevel89;
        java.lang.Throwable throwable94 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable94, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(errorHandler4);
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertNotNull(server11);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(errorHandler18);
        org.junit.Assert.assertNull(profiler25);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(executor36);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNull(errorHandler46);
        org.junit.Assert.assertNull(log52);
        org.junit.Assert.assertNull(profiler53);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertNull(provider61);
        org.junit.Assert.assertNull(errorHandler64);
        org.junit.Assert.assertNull(errorHandler65);
        org.junit.Assert.assertNotNull(log80);
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log86);
        org.junit.Assert.assertNull(converter88);
        org.junit.Assert.assertTrue("'" + logLevel89 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel89.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test04510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04510");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        restAdapter12.log = log14;
        retrofit.converter.Converter converter16 = null;
        restAdapter12.converter = converter16;
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter12.new RestHandler();
        retrofit.Profiler profiler19 = null;
        restAdapter12.profiler = profiler19;
        retrofit.Profiler profiler21 = null;
        restAdapter12.profiler = profiler21;
        retrofit.Server server23 = restAdapter12.server;
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter12.getLogLevel();
        java.util.List<retrofit.client.Header> headerList27 = null;
        retrofit.mime.TypedOutput typedOutput28 = null;
        retrofit.client.Request request29 = new retrofit.client.Request("", "", headerList27, typedOutput28);
        retrofit.mime.TypedOutput typedOutput30 = request29.getBody();
        retrofit.client.Request request31 = restAdapter12.logAndReplaceRequest(request29);
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter12.getLogLevel();
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.Server server36 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder37 = builder33.setServer(server36);
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor39 = restAdapter38.callbackExecutor;
        java.util.concurrent.Executor executor40 = restAdapter38.callbackExecutor;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler42 = restAdapter41.errorHandler;
        retrofit.Server server45 = new retrofit.Server("", "");
        restAdapter41.server = server45;
        restAdapter38.server = server45;
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        restAdapter38.log = log48;
        retrofit.RestAdapter.Builder builder50 = builder37.setLog(log48);
        retrofit.converter.Converter converter51 = null;
        builder50.converter = converter51;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler54 = builder53.errorHandler;
        retrofit.ErrorHandler errorHandler55 = builder53.errorHandler;
        retrofit.Profiler profiler56 = builder53.profiler;
        retrofit.RestAdapter.Log log57 = builder53.log;
        retrofit.Server server58 = null;
        retrofit.client.Client.Provider provider59 = null;
        java.util.concurrent.Executor executor60 = null;
        java.util.concurrent.Executor executor61 = null;
        retrofit.RequestInterceptor requestInterceptor62 = null;
        retrofit.converter.Converter converter63 = null;
        retrofit.Profiler profiler64 = null;
        retrofit.ErrorHandler errorHandler65 = null;
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        log66.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel69 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter(server58, provider59, executor60, executor61, requestInterceptor62, converter63, profiler64, errorHandler65, log66, logLevel69);
        builder53.log = log66;
        retrofit.RestAdapter.Builder builder72 = builder50.setLog(log66);
        retrofit.RestAdapter.LogLevel logLevel73 = builder50.logLevel;
        builder50.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter75 = builder50.build();
        retrofit.RestAdapter.LogLevel logLevel76 = builder50.logLevel;
        restAdapter12.logLevel = logLevel76;
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNull(server23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(typedOutput30);
        org.junit.Assert.assertNotNull(request31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNull(executor40);
        org.junit.Assert.assertNull(errorHandler42);
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(errorHandler54);
        org.junit.Assert.assertNull(errorHandler55);
        org.junit.Assert.assertNull(profiler56);
        org.junit.Assert.assertNull(log57);
        org.junit.Assert.assertNotNull(log66);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(restAdapter75);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test04511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04511");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter3 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler4 = restAdapter3.errorHandler;
        retrofit.Server server7 = new retrofit.Server("", "");
        restAdapter3.server = server7;
        restAdapter0.server = server7;
        retrofit.RestAdapter.RestHandler restHandler10 = restAdapter0.new RestHandler();
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor12 = restAdapter11.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter11.new RestHandler();
        retrofit.Server server16 = new retrofit.Server("hi!", "hi!");
        restAdapter11.server = server16;
        retrofit.Server server18 = restAdapter11.server;
        restAdapter0.server = server18;
        retrofit.ErrorHandler errorHandler20 = restAdapter0.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler21 = restAdapter0.new RestHandler();
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor23 = restAdapter22.callbackExecutor;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor25 = restAdapter24.callbackExecutor;
        java.util.concurrent.Executor executor26 = restAdapter24.callbackExecutor;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler28 = restAdapter27.errorHandler;
        retrofit.Server server31 = new retrofit.Server("", "");
        restAdapter27.server = server31;
        restAdapter24.server = server31;
        restAdapter22.server = server31;
        retrofit.Profiler profiler35 = restAdapter22.profiler;
        retrofit.ErrorHandler errorHandler36 = null;
        restAdapter22.errorHandler = errorHandler36;
        retrofit.RequestInterceptor requestInterceptor38 = restAdapter22.requestInterceptor;
        retrofit.ErrorHandler errorHandler39 = restAdapter22.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler40 = restAdapter22.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler41 = restAdapter22.new RestHandler();
        retrofit.ErrorHandler errorHandler42 = restAdapter22.errorHandler;
        retrofit.client.Client.Provider provider43 = restAdapter22.clientProvider;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.Server server47 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder48 = builder44.setServer(server47);
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor50 = restAdapter49.callbackExecutor;
        java.util.concurrent.Executor executor51 = restAdapter49.callbackExecutor;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler53 = restAdapter52.errorHandler;
        retrofit.Server server56 = new retrofit.Server("", "");
        restAdapter52.server = server56;
        restAdapter49.server = server56;
        retrofit.RestAdapter.Log log59 = retrofit.RestAdapter.Log.NONE;
        restAdapter49.log = log59;
        retrofit.RestAdapter.Builder builder61 = builder48.setLog(log59);
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder63 = builder48.setLogLevel(logLevel62);
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler65 = builder64.errorHandler;
        retrofit.client.Client.Provider provider66 = null;
        builder64.clientProvider = provider66;
        retrofit.Server server70 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder71 = builder64.setServer(server70);
        retrofit.converter.Converter converter72 = null;
        builder71.converter = converter72;
        retrofit.RestAdapter restAdapter74 = builder71.build();
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler76 = builder75.errorHandler;
        java.util.concurrent.Executor executor77 = null;
        builder75.callbackExecutor = executor77;
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider80 = builder79.clientProvider;
        java.util.concurrent.Executor executor81 = null;
        builder79.callbackExecutor = executor81;
        retrofit.RestAdapter.Builder builder83 = new retrofit.RestAdapter.Builder();
        retrofit.Server server86 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder87 = builder83.setServer(server86);
        java.lang.String str88 = server86.getUrl();
        retrofit.RestAdapter.Builder builder89 = builder79.setServer(server86);
        retrofit.RestAdapter.Builder builder90 = builder75.setServer(server86);
        restAdapter74.server = server86;
        java.util.concurrent.Executor executor92 = restAdapter74.httpExecutor;
        builder48.callbackExecutor = executor92;
        restAdapter22.callbackExecutor = executor92;
        restAdapter0.callbackExecutor = executor92;
        retrofit.RestAdapter.RestHandler restHandler96 = restAdapter0.new RestHandler();
        retrofit.converter.Converter converter97 = restAdapter0.converter;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(errorHandler4);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNotNull(server18);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertNull(profiler35);
        org.junit.Assert.assertNull(requestInterceptor38);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNull(errorHandler42);
        org.junit.Assert.assertNull(provider43);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(executor50);
        org.junit.Assert.assertNull(executor51);
        org.junit.Assert.assertNull(errorHandler53);
        org.junit.Assert.assertNotNull(log59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(errorHandler65);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(restAdapter74);
        org.junit.Assert.assertNull(errorHandler76);
        org.junit.Assert.assertNull(provider80);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "hi!" + "'", str88, "hi!");
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(executor92);
        org.junit.Assert.assertNull(converter97);
    }

    @Test
    public void test04512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04512");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.converter.Converter converter4 = builder0.converter;
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("default");
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler8 = builder7.errorHandler;
        retrofit.client.Client.Provider provider9 = null;
        builder7.clientProvider = provider9;
        retrofit.Server server13 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder14 = builder7.setServer(server13);
        retrofit.converter.Converter converter15 = null;
        builder14.converter = converter15;
        retrofit.RestAdapter restAdapter17 = builder14.build();
        retrofit.Profiler profiler18 = builder14.profiler;
        retrofit.Profiler profiler19 = builder14.profiler;
        retrofit.client.Client.Provider provider20 = builder14.clientProvider;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler22 = builder21.errorHandler;
        retrofit.Server server25 = new retrofit.Server("", "");
        builder21.server = server25;
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        builder21.log = log27;
        retrofit.RequestInterceptor requestInterceptor29 = builder21.requestInterceptor;
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        log30.log("hi!");
        log30.log("hi!");
        builder21.log = log30;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider37 = builder36.clientProvider;
        java.util.concurrent.Executor executor38 = null;
        builder36.callbackExecutor = executor38;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.Server server43 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder44 = builder40.setServer(server43);
        java.lang.String str45 = server43.getUrl();
        retrofit.RestAdapter.Builder builder46 = builder36.setServer(server43);
        builder36.ensureSaneDefaults();
        retrofit.Server server48 = null;
        retrofit.client.Client.Provider provider49 = null;
        java.util.concurrent.Executor executor50 = null;
        java.util.concurrent.Executor executor51 = null;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        retrofit.converter.Converter converter53 = null;
        retrofit.Profiler profiler54 = null;
        retrofit.ErrorHandler errorHandler55 = null;
        retrofit.RestAdapter.Log log56 = retrofit.RestAdapter.Log.NONE;
        log56.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter(server48, provider49, executor50, executor51, requestInterceptor52, converter53, profiler54, errorHandler55, log56, logLevel59);
        retrofit.RestAdapter.RestHandler restHandler61 = restAdapter60.new RestHandler();
        retrofit.RestAdapter.Log log62 = retrofit.RestAdapter.Log.NONE;
        restAdapter60.log = log62;
        retrofit.RestAdapter.Builder builder64 = builder36.setLog(log62);
        retrofit.RestAdapter.LogLevel logLevel65 = builder36.logLevel;
        boolean boolean66 = logLevel65.log();
        retrofit.RestAdapter.Builder builder67 = builder21.setLogLevel(logLevel65);
        retrofit.RestAdapter.Builder builder68 = builder14.setLogLevel(logLevel65);
        builder6.logLevel = logLevel65;
        retrofit.Server server70 = builder6.server;
        java.lang.String str71 = server70.getName();
        java.lang.String str72 = server70.getName();
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(restAdapter17);
        org.junit.Assert.assertNull(profiler18);
        org.junit.Assert.assertNull(profiler19);
        org.junit.Assert.assertNotNull(provider20);
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNull(requestInterceptor29);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertNull(provider37);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(server70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "default" + "'", str71, "default");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "default" + "'", str72, "default");
    }

    @Test
    public void test04513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04513");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.ErrorHandler errorHandler3 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler7 = builder6.errorHandler;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.Server server11 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder12 = builder8.setServer(server11);
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor14 = restAdapter13.callbackExecutor;
        java.util.concurrent.Executor executor15 = restAdapter13.callbackExecutor;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler17 = restAdapter16.errorHandler;
        retrofit.Server server20 = new retrofit.Server("", "");
        restAdapter16.server = server20;
        restAdapter13.server = server20;
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        restAdapter13.log = log23;
        retrofit.RestAdapter.Builder builder25 = builder12.setLog(log23);
        retrofit.RestAdapter.Builder builder26 = builder6.setLog(log23);
        builder0.log = log23;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler29 = builder28.errorHandler;
        retrofit.client.Client.Provider provider30 = null;
        builder28.clientProvider = provider30;
        retrofit.Server server34 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder35 = builder28.setServer(server34);
        retrofit.converter.Converter converter36 = null;
        builder35.converter = converter36;
        retrofit.RestAdapter restAdapter38 = builder35.build();
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler40 = builder39.errorHandler;
        java.util.concurrent.Executor executor41 = null;
        builder39.callbackExecutor = executor41;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider44 = builder43.clientProvider;
        java.util.concurrent.Executor executor45 = null;
        builder43.callbackExecutor = executor45;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.Server server50 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder51 = builder47.setServer(server50);
        java.lang.String str52 = server50.getUrl();
        retrofit.RestAdapter.Builder builder53 = builder43.setServer(server50);
        retrofit.RestAdapter.Builder builder54 = builder39.setServer(server50);
        restAdapter38.server = server50;
        retrofit.client.Client.Provider provider56 = restAdapter38.clientProvider;
        retrofit.RestAdapter.Builder builder57 = builder0.setClient(provider56);
        retrofit.client.Client.Provider provider58 = builder57.clientProvider;
        retrofit.RestAdapter.Log log59 = builder57.log;
        java.util.concurrent.Executor executor60 = builder57.callbackExecutor;
        java.util.concurrent.Executor executor61 = builder57.callbackExecutor;
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor63 = null;
        restAdapter62.requestInterceptor = requestInterceptor63;
        retrofit.RestAdapter.RestHandler restHandler65 = restAdapter62.new RestHandler();
        retrofit.Server server67 = new retrofit.Server("");
        restAdapter62.server = server67;
        builder57.server = server67;
        java.lang.String str70 = server67.getUrl();
        java.lang.String str71 = server67.getName();
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(restAdapter38);
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNull(provider44);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(provider56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(provider58);
        org.junit.Assert.assertNotNull(log59);
        org.junit.Assert.assertNull(executor60);
        org.junit.Assert.assertNull(executor61);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "default" + "'", str71, "default");
    }

    @Test
    public void test04514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04514");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server6 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder7 = builder0.setServer(server6);
        retrofit.converter.Converter converter8 = null;
        builder7.converter = converter8;
        retrofit.RestAdapter restAdapter10 = builder7.build();
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler12 = builder11.errorHandler;
        java.util.concurrent.Executor executor13 = null;
        builder11.callbackExecutor = executor13;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider16 = builder15.clientProvider;
        java.util.concurrent.Executor executor17 = null;
        builder15.callbackExecutor = executor17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.Server server22 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder23 = builder19.setServer(server22);
        java.lang.String str24 = server22.getUrl();
        retrofit.RestAdapter.Builder builder25 = builder15.setServer(server22);
        retrofit.RestAdapter.Builder builder26 = builder11.setServer(server22);
        restAdapter10.server = server22;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler29 = builder28.errorHandler;
        retrofit.client.Client.Provider provider30 = null;
        builder28.clientProvider = provider30;
        retrofit.Server server34 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder35 = builder28.setServer(server34);
        retrofit.client.Client.Provider provider36 = null;
        java.util.concurrent.Executor executor37 = null;
        java.util.concurrent.Executor executor38 = null;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        retrofit.converter.Converter converter40 = null;
        retrofit.Profiler profiler41 = null;
        retrofit.ErrorHandler errorHandler42 = null;
        retrofit.Server server43 = null;
        retrofit.client.Client.Provider provider44 = null;
        java.util.concurrent.Executor executor45 = null;
        java.util.concurrent.Executor executor46 = null;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        retrofit.converter.Converter converter48 = null;
        retrofit.Profiler profiler49 = null;
        retrofit.ErrorHandler errorHandler50 = null;
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        log51.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter(server43, provider44, executor45, executor46, requestInterceptor47, converter48, profiler49, errorHandler50, log51, logLevel54);
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter(server34, provider36, executor37, executor38, requestInterceptor39, converter40, profiler41, errorHandler42, log51, logLevel56);
        boolean boolean58 = logLevel56.log();
        boolean boolean59 = logLevel56.log();
        restAdapter10.setLogLevel(logLevel56);
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler62 = builder61.errorHandler;
        retrofit.RequestInterceptor requestInterceptor63 = null;
        builder61.requestInterceptor = requestInterceptor63;
        java.util.concurrent.Executor executor65 = builder61.httpExecutor;
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        log66.log("default");
        builder61.log = log66;
        restAdapter10.log = log66;
        retrofit.client.Client.Provider provider71 = restAdapter10.clientProvider;
        java.util.List<retrofit.client.Header> headerList74 = null;
        retrofit.mime.TypedOutput typedOutput75 = null;
        retrofit.client.Request request76 = new retrofit.client.Request("", "hi!", headerList74, typedOutput75);
        java.lang.String str77 = request76.getUrl();
        java.lang.String str78 = request76.getMethod();
        java.lang.String str79 = request76.getMethod();
        retrofit.client.Request request80 = restAdapter10.logAndReplaceRequest(request76);
        retrofit.mime.TypedOutput typedOutput81 = request80.getBody();
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(restAdapter10);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(provider16);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNull(errorHandler62);
        org.junit.Assert.assertNull(executor65);
        org.junit.Assert.assertNotNull(log66);
        org.junit.Assert.assertNotNull(provider71);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "hi!" + "'", str77, "hi!");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(request80);
        org.junit.Assert.assertNull(typedOutput81);
    }

    @Test
    public void test04515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04515");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.converter.Converter converter5 = builder0.converter;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler8 = builder7.errorHandler;
        retrofit.Server server11 = new retrofit.Server("", "");
        builder7.server = server11;
        retrofit.RestAdapter restAdapter13 = builder7.build();
        retrofit.Server server14 = restAdapter13.server;
        retrofit.RestAdapter.Builder builder15 = builder0.setServer(server14);
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor17 = restAdapter16.callbackExecutor;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor19 = restAdapter18.callbackExecutor;
        java.util.concurrent.Executor executor20 = restAdapter18.callbackExecutor;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler22 = restAdapter21.errorHandler;
        retrofit.Server server25 = new retrofit.Server("", "");
        restAdapter21.server = server25;
        restAdapter18.server = server25;
        restAdapter16.server = server25;
        retrofit.Profiler profiler29 = restAdapter16.profiler;
        retrofit.ErrorHandler errorHandler30 = null;
        restAdapter16.errorHandler = errorHandler30;
        retrofit.Profiler profiler32 = null;
        restAdapter16.profiler = profiler32;
        retrofit.RestAdapter.LogLevel logLevel34 = restAdapter16.getLogLevel();
        retrofit.Profiler profiler35 = restAdapter16.profiler;
        retrofit.Profiler profiler36 = null;
        restAdapter16.profiler = profiler36;
        retrofit.Profiler profiler38 = restAdapter16.profiler;
        retrofit.ErrorHandler errorHandler39 = restAdapter16.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler40 = restAdapter16.new RestHandler();
        retrofit.Server server42 = new retrofit.Server("");
        restAdapter16.server = server42;
        retrofit.RestAdapter.Builder builder44 = builder15.setServer(server42);
        retrofit.RestAdapter.Log log45 = builder15.log;
        java.lang.Class<?> wildcardClass46 = builder15.getClass();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(converter5);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNotNull(restAdapter13);
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNull(profiler29);
        org.junit.Assert.assertNull(logLevel34);
        org.junit.Assert.assertNull(profiler35);
        org.junit.Assert.assertNull(profiler38);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test04516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04516");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter0.getLogLevel();
        retrofit.client.Client.Provider provider20 = null;
        restAdapter0.clientProvider = provider20;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean23 = logLevel22.log();
        restAdapter0.logLevel = logLevel22;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        restAdapter0.requestInterceptor = requestInterceptor25;
        retrofit.RestAdapter.Log log27 = restAdapter0.log;
        retrofit.converter.Converter converter28 = null;
        restAdapter0.converter = converter28;
        java.util.concurrent.Executor executor30 = restAdapter0.callbackExecutor;
        retrofit.converter.Converter converter31 = restAdapter0.converter;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(log27);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNull(converter31);
    }

    @Test
    public void test04517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04517");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.converter.Converter converter5 = builder0.converter;
        retrofit.RequestInterceptor requestInterceptor6 = builder0.requestInterceptor;
        java.util.concurrent.Executor executor7 = builder0.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = builder0.build();
        retrofit.Profiler profiler9 = null;
        restAdapter8.profiler = profiler9;
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel12 = restAdapter11.logLevel;
        retrofit.RestAdapter.Log log13 = restAdapter11.log;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler15 = null;
        builder14.errorHandler = errorHandler15;
        retrofit.ErrorHandler errorHandler17 = builder14.errorHandler;
        java.util.concurrent.Executor executor18 = builder14.callbackExecutor;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider20 = builder19.clientProvider;
        java.util.concurrent.Executor executor21 = null;
        builder19.callbackExecutor = executor21;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.Server server26 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder27 = builder23.setServer(server26);
        java.lang.String str28 = server26.getUrl();
        retrofit.RestAdapter.Builder builder29 = builder19.setServer(server26);
        builder19.ensureSaneDefaults();
        retrofit.Server server31 = null;
        retrofit.client.Client.Provider provider32 = null;
        java.util.concurrent.Executor executor33 = null;
        java.util.concurrent.Executor executor34 = null;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        retrofit.converter.Converter converter36 = null;
        retrofit.Profiler profiler37 = null;
        retrofit.ErrorHandler errorHandler38 = null;
        retrofit.RestAdapter.Log log39 = retrofit.RestAdapter.Log.NONE;
        log39.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter(server31, provider32, executor33, executor34, requestInterceptor35, converter36, profiler37, errorHandler38, log39, logLevel42);
        retrofit.RestAdapter.RestHandler restHandler44 = restAdapter43.new RestHandler();
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        restAdapter43.log = log45;
        retrofit.RestAdapter.Builder builder47 = builder19.setLog(log45);
        retrofit.RestAdapter.Builder builder49 = builder19.setServer("hi!");
        retrofit.Profiler profiler50 = null;
        builder19.profiler = profiler50;
        builder19.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor53 = builder19.requestInterceptor;
        builder14.requestInterceptor = requestInterceptor53;
        restAdapter11.requestInterceptor = requestInterceptor53;
        restAdapter8.requestInterceptor = requestInterceptor53;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(converter5);
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNotNull(restAdapter8);
        org.junit.Assert.assertNull(logLevel12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(provider20);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(requestInterceptor53);
    }

    @Test
    public void test04518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04518");
        retrofit.client.Header[] headerArray10 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList11 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList11, headerArray10);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList11, typedOutput13);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList11, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList11, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "default", (java.util.List<retrofit.client.Header>) headerList11, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("default", "default", (java.util.List<retrofit.client.Header>) headerList11, typedOutput21);
        java.lang.Class<?> wildcardClass23 = request22.getClass();
        org.junit.Assert.assertNotNull(headerArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test04519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04519");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter3 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler4 = restAdapter3.errorHandler;
        retrofit.Server server7 = new retrofit.Server("", "");
        restAdapter3.server = server7;
        restAdapter0.server = server7;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor11 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor13 = restAdapter12.callbackExecutor;
        java.util.concurrent.Executor executor14 = restAdapter12.callbackExecutor;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler16 = restAdapter15.errorHandler;
        retrofit.Server server19 = new retrofit.Server("", "");
        restAdapter15.server = server19;
        restAdapter12.server = server19;
        restAdapter10.server = server19;
        retrofit.Profiler profiler23 = restAdapter10.profiler;
        retrofit.ErrorHandler errorHandler24 = null;
        restAdapter10.errorHandler = errorHandler24;
        retrofit.Profiler profiler26 = null;
        restAdapter10.profiler = profiler26;
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel29 = restAdapter10.getLogLevel();
        retrofit.client.Client.Provider provider30 = null;
        restAdapter10.clientProvider = provider30;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean33 = logLevel32.log();
        restAdapter10.logLevel = logLevel32;
        restAdapter0.logLevel = logLevel32;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler37 = builder36.errorHandler;
        retrofit.ErrorHandler errorHandler38 = builder36.errorHandler;
        java.util.concurrent.Executor executor39 = builder36.callbackExecutor;
        retrofit.Profiler profiler40 = builder36.profiler;
        builder36.ensureSaneDefaults();
        builder36.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider44 = builder43.clientProvider;
        java.util.concurrent.Executor executor45 = null;
        builder43.callbackExecutor = executor45;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.Server server50 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder51 = builder47.setServer(server50);
        java.lang.String str52 = server50.getUrl();
        retrofit.RestAdapter.Builder builder53 = builder43.setServer(server50);
        builder43.ensureSaneDefaults();
        retrofit.Server server55 = null;
        retrofit.client.Client.Provider provider56 = null;
        java.util.concurrent.Executor executor57 = null;
        java.util.concurrent.Executor executor58 = null;
        retrofit.RequestInterceptor requestInterceptor59 = null;
        retrofit.converter.Converter converter60 = null;
        retrofit.Profiler profiler61 = null;
        retrofit.ErrorHandler errorHandler62 = null;
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        log63.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel66 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter(server55, provider56, executor57, executor58, requestInterceptor59, converter60, profiler61, errorHandler62, log63, logLevel66);
        retrofit.RestAdapter.RestHandler restHandler68 = restAdapter67.new RestHandler();
        retrofit.RestAdapter.Log log69 = retrofit.RestAdapter.Log.NONE;
        restAdapter67.log = log69;
        retrofit.RestAdapter.Builder builder71 = builder43.setLog(log69);
        retrofit.RestAdapter.Builder builder73 = builder43.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor74 = builder43.requestInterceptor;
        retrofit.RestAdapter.Builder builder75 = builder36.setRequestInterceptor(requestInterceptor74);
        retrofit.Server server78 = new retrofit.Server("default", "default");
        java.lang.String str79 = server78.getName();
        retrofit.RestAdapter.Builder builder80 = builder75.setServer(server78);
        retrofit.RequestInterceptor requestInterceptor81 = builder80.requestInterceptor;
        java.util.concurrent.Executor executor82 = builder80.httpExecutor;
        restAdapter0.callbackExecutor = executor82;
        retrofit.converter.Converter converter84 = restAdapter0.converter;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(errorHandler4);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNull(profiler23);
        org.junit.Assert.assertNull(logLevel28);
        org.junit.Assert.assertNull(logLevel29);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNull(errorHandler38);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNull(profiler40);
        org.junit.Assert.assertNull(provider44);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(requestInterceptor74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "default" + "'", str79, "default");
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(requestInterceptor81);
        org.junit.Assert.assertNotNull(executor82);
        org.junit.Assert.assertNull(converter84);
    }

    @Test
    public void test04520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04520");
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        log12.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel15);
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter16.new RestHandler();
        retrofit.client.Header[] headerArray26 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList27 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList27, headerArray26);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList27, typedOutput29);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList27, typedOutput31);
        retrofit.mime.TypedOutput typedOutput33 = null;
        retrofit.client.Request request34 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList27, typedOutput33);
        retrofit.mime.TypedOutput typedOutput35 = null;
        retrofit.client.Request request36 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList27, typedOutput35);
        retrofit.mime.TypedOutput typedOutput37 = request36.getBody();
        retrofit.client.Request request38 = restAdapter16.logAndReplaceRequest(request36);
        retrofit.RestAdapter.RestHandler restHandler39 = restAdapter16.new RestHandler();
        retrofit.client.Client.Provider provider40 = restAdapter16.clientProvider;
        retrofit.converter.Converter converter41 = null;
        restAdapter16.converter = converter41;
        retrofit.client.Header[] headerArray51 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList52 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList52, headerArray51);
        retrofit.mime.TypedOutput typedOutput54 = null;
        retrofit.client.Request request55 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList52, typedOutput54);
        retrofit.mime.TypedOutput typedOutput56 = null;
        retrofit.client.Request request57 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList52, typedOutput56);
        retrofit.mime.TypedOutput typedOutput58 = null;
        retrofit.client.Request request59 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList52, typedOutput58);
        retrofit.mime.TypedOutput typedOutput60 = request59.getBody();
        java.util.List<retrofit.client.Header> headerList61 = request59.getHeaders();
        retrofit.mime.TypedOutput typedOutput62 = null;
        retrofit.client.Request request63 = new retrofit.client.Request("default", "", headerList61, typedOutput62);
        retrofit.client.Request request64 = restAdapter16.logAndReplaceRequest(request63);
        retrofit.mime.TypedOutput typedOutput65 = request63.getBody();
        java.util.List<retrofit.client.Header> headerList66 = request63.getHeaders();
        retrofit.mime.TypedOutput typedOutput67 = null;
        retrofit.client.Request request68 = new retrofit.client.Request("", "hi!", headerList66, typedOutput67);
        retrofit.mime.TypedOutput typedOutput69 = null;
        retrofit.client.Request request70 = new retrofit.client.Request("default", "", headerList66, typedOutput69);
        java.lang.Class<?> wildcardClass71 = request70.getClass();
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(typedOutput37);
        org.junit.Assert.assertNotNull(request38);
        org.junit.Assert.assertNull(provider40);
        org.junit.Assert.assertNotNull(headerArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(typedOutput60);
        org.junit.Assert.assertNotNull(headerList61);
        org.junit.Assert.assertNotNull(request64);
        org.junit.Assert.assertNull(typedOutput65);
        org.junit.Assert.assertNotNull(headerList66);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test04521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04521");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter14.new RestHandler();
        retrofit.ErrorHandler errorHandler16 = restAdapter14.errorHandler;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider18 = builder17.clientProvider;
        java.util.concurrent.Executor executor19 = null;
        builder17.callbackExecutor = executor19;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.Server server24 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder25 = builder21.setServer(server24);
        java.lang.String str26 = server24.getUrl();
        retrofit.RestAdapter.Builder builder27 = builder17.setServer(server24);
        builder17.ensureSaneDefaults();
        java.util.concurrent.Executor executor29 = builder17.callbackExecutor;
        restAdapter14.httpExecutor = executor29;
        restAdapter12.httpExecutor = executor29;
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter12.logLevel;
        boolean boolean33 = logLevel32.log();
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNull(provider18);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(executor29);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test04522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04522");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = builder0.clientProvider;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server7 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder8 = builder4.setServer(server7);
        java.lang.String str9 = server7.getUrl();
        retrofit.RestAdapter.Builder builder10 = builder0.setServer(server7);
        builder0.ensureSaneDefaults();
        java.util.concurrent.Executor executor12 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.Server server16 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder17 = builder13.setServer(server16);
        retrofit.Server server18 = builder13.server;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.Server server22 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder23 = builder19.setServer(server22);
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor25 = restAdapter24.callbackExecutor;
        java.util.concurrent.Executor executor26 = restAdapter24.callbackExecutor;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler28 = restAdapter27.errorHandler;
        retrofit.Server server31 = new retrofit.Server("", "");
        restAdapter27.server = server31;
        restAdapter24.server = server31;
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        restAdapter24.log = log34;
        retrofit.RestAdapter.Builder builder36 = builder23.setLog(log34);
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder38 = builder23.setLogLevel(logLevel37);
        builder13.logLevel = logLevel37;
        java.util.concurrent.Executor executor40 = builder13.callbackExecutor;
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        log41.log("");
        retrofit.RestAdapter.Builder builder44 = builder13.setLog(log41);
        retrofit.RestAdapter restAdapter45 = builder44.build();
        retrofit.client.Client.Provider provider46 = restAdapter45.clientProvider;
        retrofit.RestAdapter.Builder builder47 = builder0.setClient(provider46);
        retrofit.converter.Converter converter48 = builder0.converter;
        org.junit.Assert.assertNull(provider1);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(executor12);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(server18);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(executor40);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(restAdapter45);
        org.junit.Assert.assertNotNull(provider46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(converter48);
    }

    @Test
    public void test04523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04523");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        restAdapter12.log = log14;
        retrofit.converter.Converter converter16 = null;
        restAdapter12.converter = converter16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter12.getLogLevel();
        retrofit.ErrorHandler errorHandler19 = restAdapter12.errorHandler;
        retrofit.Profiler profiler20 = restAdapter12.profiler;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler22 = null;
        builder21.errorHandler = errorHandler22;
        retrofit.ErrorHandler errorHandler24 = builder21.errorHandler;
        retrofit.RestAdapter.Builder builder26 = builder21.setServer("hi!");
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler28 = builder27.errorHandler;
        retrofit.ErrorHandler errorHandler29 = builder27.errorHandler;
        retrofit.Profiler profiler30 = builder27.profiler;
        retrofit.RestAdapter.Log log31 = builder27.log;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.FULL;
        builder27.logLevel = logLevel32;
        retrofit.RestAdapter.Builder builder34 = builder26.setLogLevel(logLevel32);
        retrofit.Server server35 = null;
        retrofit.client.Client.Provider provider36 = null;
        java.util.concurrent.Executor executor37 = null;
        java.util.concurrent.Executor executor38 = null;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        retrofit.converter.Converter converter40 = null;
        retrofit.Profiler profiler41 = null;
        retrofit.ErrorHandler errorHandler42 = null;
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        log43.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter(server35, provider36, executor37, executor38, requestInterceptor39, converter40, profiler41, errorHandler42, log43, logLevel46);
        log43.log("");
        retrofit.RestAdapter.Builder builder50 = builder34.setLog(log43);
        restAdapter12.log = log43;
        retrofit.RestAdapter.RestHandler restHandler52 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.Server server56 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder57 = builder53.setServer(server56);
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor59 = restAdapter58.callbackExecutor;
        java.util.concurrent.Executor executor60 = restAdapter58.callbackExecutor;
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler62 = restAdapter61.errorHandler;
        retrofit.Server server65 = new retrofit.Server("", "");
        restAdapter61.server = server65;
        restAdapter58.server = server65;
        retrofit.RestAdapter.Log log68 = retrofit.RestAdapter.Log.NONE;
        restAdapter58.log = log68;
        retrofit.RestAdapter.Builder builder70 = builder57.setLog(log68);
        restAdapter12.log = log68;
        retrofit.RestAdapter.LogLevel logLevel72 = restAdapter12.logLevel;
        retrofit.RequestInterceptor requestInterceptor73 = restAdapter12.requestInterceptor;
        java.util.concurrent.Executor executor74 = restAdapter12.httpExecutor;
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(profiler20);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNull(profiler30);
        org.junit.Assert.assertNull(log31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(executor59);
        org.junit.Assert.assertNull(executor60);
        org.junit.Assert.assertNull(errorHandler62);
        org.junit.Assert.assertNotNull(log68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(requestInterceptor73);
        org.junit.Assert.assertNull(executor74);
    }

    @Test
    public void test04524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04524");
        retrofit.client.Header[] headerArray16 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList17 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList17, headerArray16);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList17, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList17, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList17, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList17, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("default", "hi!", (java.util.List<retrofit.client.Header>) headerList17, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList17, typedOutput29);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("", "default", (java.util.List<retrofit.client.Header>) headerList17, typedOutput31);
        retrofit.mime.TypedOutput typedOutput33 = null;
        retrofit.client.Request request34 = new retrofit.client.Request("default", "default", (java.util.List<retrofit.client.Header>) headerList17, typedOutput33);
        org.junit.Assert.assertNotNull(headerArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test04525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04525");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        java.util.concurrent.Executor executor14 = null;
        restAdapter12.callbackExecutor = executor14;
        retrofit.Profiler profiler16 = null;
        restAdapter12.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter12.logLevel;
        java.util.concurrent.Executor executor19 = restAdapter12.httpExecutor;
        retrofit.Server server20 = restAdapter12.server;
        retrofit.ErrorHandler errorHandler21 = restAdapter12.errorHandler;
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(server20);
        org.junit.Assert.assertNull(errorHandler21);
    }

    @Test
    public void test04526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04526");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.client.Client.Provider provider3 = null;
        restAdapter0.clientProvider = provider3;
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Log log6 = restAdapter0.log;
        retrofit.RestAdapter.RestHandler restHandler7 = restAdapter0.new RestHandler();
        retrofit.client.Header[] headerArray12 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList13 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList13, headerArray12);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList13, typedOutput15);
        java.util.List<retrofit.client.Header> headerList17 = request16.getHeaders();
        retrofit.mime.TypedOutput typedOutput18 = null;
        retrofit.client.Request request19 = new retrofit.client.Request("", "", headerList17, typedOutput18);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request20 = restAdapter0.logAndReplaceRequest(request19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(log6);
        org.junit.Assert.assertNotNull(headerArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(headerList17);
    }

    @Test
    public void test04527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04527");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        restAdapter12.log = log14;
        retrofit.converter.Converter converter16 = null;
        restAdapter12.converter = converter16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter12.getLogLevel();
        retrofit.ErrorHandler errorHandler19 = restAdapter12.errorHandler;
        retrofit.Profiler profiler20 = restAdapter12.profiler;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler22 = null;
        builder21.errorHandler = errorHandler22;
        retrofit.ErrorHandler errorHandler24 = builder21.errorHandler;
        retrofit.RestAdapter.Builder builder26 = builder21.setServer("hi!");
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler28 = builder27.errorHandler;
        retrofit.ErrorHandler errorHandler29 = builder27.errorHandler;
        retrofit.Profiler profiler30 = builder27.profiler;
        retrofit.RestAdapter.Log log31 = builder27.log;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.FULL;
        builder27.logLevel = logLevel32;
        retrofit.RestAdapter.Builder builder34 = builder26.setLogLevel(logLevel32);
        retrofit.Server server35 = null;
        retrofit.client.Client.Provider provider36 = null;
        java.util.concurrent.Executor executor37 = null;
        java.util.concurrent.Executor executor38 = null;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        retrofit.converter.Converter converter40 = null;
        retrofit.Profiler profiler41 = null;
        retrofit.ErrorHandler errorHandler42 = null;
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        log43.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter(server35, provider36, executor37, executor38, requestInterceptor39, converter40, profiler41, errorHandler42, log43, logLevel46);
        log43.log("");
        retrofit.RestAdapter.Builder builder50 = builder34.setLog(log43);
        restAdapter12.log = log43;
        retrofit.RestAdapter.RestHandler restHandler52 = restAdapter12.new RestHandler();
        java.util.concurrent.Executor executor53 = restAdapter12.httpExecutor;
        retrofit.Server server54 = restAdapter12.server;
        retrofit.client.Header[] headerArray71 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList72 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList72, headerArray71);
        retrofit.mime.TypedOutput typedOutput74 = null;
        retrofit.client.Request request75 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList72, typedOutput74);
        retrofit.mime.TypedOutput typedOutput76 = null;
        retrofit.client.Request request77 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList72, typedOutput76);
        retrofit.mime.TypedOutput typedOutput78 = null;
        retrofit.client.Request request79 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList72, typedOutput78);
        retrofit.mime.TypedOutput typedOutput80 = null;
        retrofit.client.Request request81 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList72, typedOutput80);
        retrofit.mime.TypedOutput typedOutput82 = null;
        retrofit.client.Request request83 = new retrofit.client.Request("default", "hi!", (java.util.List<retrofit.client.Header>) headerList72, typedOutput82);
        java.util.List<retrofit.client.Header> headerList84 = request83.getHeaders();
        retrofit.mime.TypedOutput typedOutput85 = null;
        retrofit.client.Request request86 = new retrofit.client.Request("default", "hi!", headerList84, typedOutput85);
        java.util.List<retrofit.client.Header> headerList87 = request86.getHeaders();
        retrofit.mime.TypedOutput typedOutput88 = null;
        retrofit.client.Request request89 = new retrofit.client.Request("", "", headerList87, typedOutput88);
        retrofit.mime.TypedOutput typedOutput90 = null;
        retrofit.client.Request request91 = new retrofit.client.Request("hi!", "default", headerList87, typedOutput90);
        retrofit.client.Request request92 = restAdapter12.logAndReplaceRequest(request91);
        java.lang.String str93 = request92.getMethod();
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(profiler20);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNull(profiler30);
        org.junit.Assert.assertNull(log31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(executor53);
        org.junit.Assert.assertNull(server54);
        org.junit.Assert.assertNotNull(headerArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(headerList84);
        org.junit.Assert.assertNotNull(headerList87);
        org.junit.Assert.assertNotNull(request92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "hi!" + "'", str93, "hi!");
    }

    @Test
    public void test04528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04528");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.ErrorHandler errorHandler3 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler7 = builder6.errorHandler;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.Server server11 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder12 = builder8.setServer(server11);
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor14 = restAdapter13.callbackExecutor;
        java.util.concurrent.Executor executor15 = restAdapter13.callbackExecutor;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler17 = restAdapter16.errorHandler;
        retrofit.Server server20 = new retrofit.Server("", "");
        restAdapter16.server = server20;
        restAdapter13.server = server20;
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        restAdapter13.log = log23;
        retrofit.RestAdapter.Builder builder25 = builder12.setLog(log23);
        retrofit.RestAdapter.Builder builder26 = builder6.setLog(log23);
        builder0.log = log23;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler29 = builder28.errorHandler;
        retrofit.client.Client.Provider provider30 = null;
        builder28.clientProvider = provider30;
        retrofit.Server server34 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder35 = builder28.setServer(server34);
        retrofit.converter.Converter converter36 = null;
        builder35.converter = converter36;
        retrofit.RestAdapter restAdapter38 = builder35.build();
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler40 = builder39.errorHandler;
        java.util.concurrent.Executor executor41 = null;
        builder39.callbackExecutor = executor41;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider44 = builder43.clientProvider;
        java.util.concurrent.Executor executor45 = null;
        builder43.callbackExecutor = executor45;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.Server server50 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder51 = builder47.setServer(server50);
        java.lang.String str52 = server50.getUrl();
        retrofit.RestAdapter.Builder builder53 = builder43.setServer(server50);
        retrofit.RestAdapter.Builder builder54 = builder39.setServer(server50);
        restAdapter38.server = server50;
        retrofit.client.Client.Provider provider56 = restAdapter38.clientProvider;
        retrofit.RestAdapter.Builder builder57 = builder0.setClient(provider56);
        retrofit.client.Client.Provider provider58 = builder57.clientProvider;
        retrofit.RestAdapter.Log log59 = builder57.log;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider61 = builder60.clientProvider;
        java.util.concurrent.Executor executor62 = null;
        builder60.callbackExecutor = executor62;
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.Server server67 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder68 = builder64.setServer(server67);
        java.lang.String str69 = server67.getUrl();
        retrofit.RestAdapter.Builder builder70 = builder60.setServer(server67);
        builder60.ensureSaneDefaults();
        retrofit.Server server72 = null;
        retrofit.client.Client.Provider provider73 = null;
        java.util.concurrent.Executor executor74 = null;
        java.util.concurrent.Executor executor75 = null;
        retrofit.RequestInterceptor requestInterceptor76 = null;
        retrofit.converter.Converter converter77 = null;
        retrofit.Profiler profiler78 = null;
        retrofit.ErrorHandler errorHandler79 = null;
        retrofit.RestAdapter.Log log80 = retrofit.RestAdapter.Log.NONE;
        log80.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel83 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter84 = new retrofit.RestAdapter(server72, provider73, executor74, executor75, requestInterceptor76, converter77, profiler78, errorHandler79, log80, logLevel83);
        retrofit.RestAdapter.RestHandler restHandler85 = restAdapter84.new RestHandler();
        retrofit.RestAdapter.Log log86 = retrofit.RestAdapter.Log.NONE;
        restAdapter84.log = log86;
        retrofit.RestAdapter.Builder builder88 = builder60.setLog(log86);
        retrofit.RestAdapter.Builder builder89 = builder57.setLog(log86);
        retrofit.Profiler profiler90 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder91 = builder57.setProfiler(profiler90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(restAdapter38);
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNull(provider44);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(provider56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(provider58);
        org.junit.Assert.assertNotNull(log59);
        org.junit.Assert.assertNull(provider61);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(log80);
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder89);
    }

    @Test
    public void test04529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04529");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        restAdapter5.log = log15;
        retrofit.RestAdapter.Builder builder17 = builder4.setLog(log15);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder19 = builder4.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider21 = builder20.clientProvider;
        java.util.concurrent.Executor executor22 = null;
        builder20.callbackExecutor = executor22;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.Server server27 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder28 = builder24.setServer(server27);
        java.lang.String str29 = server27.getUrl();
        retrofit.RestAdapter.Builder builder30 = builder20.setServer(server27);
        builder20.ensureSaneDefaults();
        retrofit.Server server32 = null;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        log40.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log40, logLevel43);
        retrofit.RestAdapter.RestHandler restHandler45 = restAdapter44.new RestHandler();
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        restAdapter44.log = log46;
        retrofit.RestAdapter.Builder builder48 = builder20.setLog(log46);
        retrofit.RestAdapter.Builder builder50 = builder20.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor51 = builder20.requestInterceptor;
        builder19.requestInterceptor = requestInterceptor51;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.Server server56 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder57 = builder53.setServer(server56);
        retrofit.converter.Converter converter58 = builder53.converter;
        retrofit.RequestInterceptor requestInterceptor59 = builder53.requestInterceptor;
        java.util.concurrent.Executor executor60 = builder53.callbackExecutor;
        retrofit.Profiler profiler61 = builder53.profiler;
        java.util.concurrent.Executor executor62 = builder53.httpExecutor;
        java.util.concurrent.Executor executor63 = builder53.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel64 = builder53.logLevel;
        retrofit.RestAdapter.Builder builder65 = builder19.setLogLevel(logLevel64);
        retrofit.Profiler profiler66 = builder19.profiler;
        retrofit.Profiler profiler67 = builder19.profiler;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(provider21);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(requestInterceptor51);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(converter58);
        org.junit.Assert.assertNull(requestInterceptor59);
        org.junit.Assert.assertNull(executor60);
        org.junit.Assert.assertNull(profiler61);
        org.junit.Assert.assertNull(executor62);
        org.junit.Assert.assertNull(executor63);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(profiler66);
        org.junit.Assert.assertNull(profiler67);
    }

    @Test
    public void test04530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04530");
        retrofit.client.Header[] headerArray12 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList13 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList13, headerArray12);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList13, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList13, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList13, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList13, typedOutput21);
        java.util.List<retrofit.client.Header> headerList23 = request22.getHeaders();
        retrofit.mime.TypedOutput typedOutput24 = null;
        retrofit.client.Request request25 = new retrofit.client.Request("hi!", "hi!", headerList23, typedOutput24);
        java.util.List<retrofit.client.Header> headerList26 = request25.getHeaders();
        java.util.List<retrofit.client.Header> headerList27 = request25.getHeaders();
        retrofit.mime.TypedOutput typedOutput28 = null;
        retrofit.client.Request request29 = new retrofit.client.Request("", "default", headerList27, typedOutput28);
        java.util.List<retrofit.client.Header> headerList30 = request29.getHeaders();
        org.junit.Assert.assertNotNull(headerArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(headerList23);
        org.junit.Assert.assertNotNull(headerList26);
        org.junit.Assert.assertNotNull(headerList27);
        org.junit.Assert.assertNotNull(headerList30);
    }

    @Test
    public void test04531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04531");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.Server server7 = new retrofit.Server("default", "hi!");
        java.lang.String str8 = server7.getUrl();
        retrofit.RestAdapter.Builder builder9 = builder4.setServer(server7);
        retrofit.RestAdapter.LogLevel logLevel10 = builder9.logLevel;
        retrofit.ErrorHandler errorHandler11 = builder9.errorHandler;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler13 = builder12.errorHandler;
        java.util.concurrent.Executor executor14 = null;
        builder12.callbackExecutor = executor14;
        java.util.concurrent.Executor executor16 = null;
        builder12.httpExecutor = executor16;
        retrofit.Profiler profiler18 = null;
        builder12.profiler = profiler18;
        retrofit.RestAdapter.Builder builder21 = builder12.setServer("hi!");
        retrofit.Profiler profiler22 = builder12.profiler;
        retrofit.RequestInterceptor requestInterceptor23 = builder12.requestInterceptor;
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        log24.log("hi!");
        log24.log("hi!");
        retrofit.RestAdapter.Builder builder29 = builder12.setLog(log24);
        retrofit.RestAdapter.Builder builder30 = builder9.setLog(log24);
        retrofit.converter.Converter converter31 = builder9.converter;
        retrofit.Server server32 = builder9.server;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "default" + "'", str8, "default");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(log24);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(converter31);
        org.junit.Assert.assertNotNull(server32);
    }

    @Test
    public void test04532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04532");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = builder0.clientProvider;
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("default");
        retrofit.converter.Converter converter4 = builder3.converter;
        retrofit.RequestInterceptor requestInterceptor5 = builder3.requestInterceptor;
        retrofit.ErrorHandler errorHandler6 = builder3.errorHandler;
        org.junit.Assert.assertNull(provider1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertNull(errorHandler6);
    }

    @Test
    public void test04533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04533");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter0.getLogLevel();
        retrofit.client.Client.Provider provider20 = null;
        restAdapter0.clientProvider = provider20;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean23 = logLevel22.log();
        restAdapter0.logLevel = logLevel22;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        restAdapter0.requestInterceptor = requestInterceptor25;
        retrofit.RestAdapter.Log log27 = restAdapter0.log;
        retrofit.converter.Converter converter28 = null;
        restAdapter0.converter = converter28;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter30.logLevel;
        retrofit.RestAdapter.RestHandler restHandler32 = restAdapter30.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler33 = restAdapter30.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler34 = restAdapter30.new RestHandler();
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler36 = restAdapter35.new RestHandler();
        retrofit.client.Client.Provider provider37 = restAdapter35.clientProvider;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler39 = builder38.errorHandler;
        retrofit.Server server42 = new retrofit.Server("", "");
        builder38.server = server42;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        builder38.log = log44;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler47 = builder46.errorHandler;
        retrofit.client.Client.Provider provider48 = null;
        builder46.clientProvider = provider48;
        retrofit.Server server52 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder53 = builder46.setServer(server52);
        retrofit.converter.Converter converter54 = null;
        builder53.converter = converter54;
        retrofit.RestAdapter restAdapter56 = builder53.build();
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler58 = builder57.errorHandler;
        java.util.concurrent.Executor executor59 = null;
        builder57.callbackExecutor = executor59;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider62 = builder61.clientProvider;
        java.util.concurrent.Executor executor63 = null;
        builder61.callbackExecutor = executor63;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.Server server68 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder69 = builder65.setServer(server68);
        java.lang.String str70 = server68.getUrl();
        retrofit.RestAdapter.Builder builder71 = builder61.setServer(server68);
        retrofit.RestAdapter.Builder builder72 = builder57.setServer(server68);
        restAdapter56.server = server68;
        java.util.concurrent.Executor executor74 = restAdapter56.httpExecutor;
        builder38.httpExecutor = executor74;
        restAdapter35.callbackExecutor = executor74;
        restAdapter30.callbackExecutor = executor74;
        restAdapter0.httpExecutor = executor74;
        retrofit.RestAdapter.RestHandler restHandler79 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel80 = restAdapter0.getLogLevel();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(log27);
        org.junit.Assert.assertNull(logLevel31);
        org.junit.Assert.assertNull(provider37);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNull(errorHandler47);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(restAdapter56);
        org.junit.Assert.assertNull(errorHandler58);
        org.junit.Assert.assertNull(provider62);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hi!" + "'", str70, "hi!");
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(executor74);
        org.junit.Assert.assertTrue("'" + logLevel80 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel80.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test04534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04534");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        restAdapter12.log = log14;
        retrofit.converter.Converter converter16 = null;
        restAdapter12.converter = converter16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server21 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder22 = builder18.setServer(server21);
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor24 = restAdapter23.callbackExecutor;
        java.util.concurrent.Executor executor25 = restAdapter23.callbackExecutor;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler27 = restAdapter26.errorHandler;
        retrofit.Server server30 = new retrofit.Server("", "");
        restAdapter26.server = server30;
        restAdapter23.server = server30;
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        restAdapter23.log = log33;
        retrofit.RestAdapter.Builder builder35 = builder22.setLog(log33);
        restAdapter12.log = log33;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler38 = builder37.errorHandler;
        retrofit.Server server41 = new retrofit.Server("", "");
        builder37.server = server41;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor44 = restAdapter43.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler45 = restAdapter43.new RestHandler();
        retrofit.Server server48 = new retrofit.Server("hi!", "hi!");
        restAdapter43.server = server48;
        retrofit.RestAdapter.Builder builder50 = builder37.setServer(server48);
        restAdapter12.server = server48;
        retrofit.RestAdapter.RestHandler restHandler52 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter12.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler54 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Log log55 = restAdapter12.log;
        java.util.concurrent.Executor executor56 = restAdapter12.callbackExecutor;
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(errorHandler38);
        org.junit.Assert.assertNull(executor44);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertNull(executor56);
    }

    @Test
    public void test04535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04535");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.converter.Converter converter14 = restAdapter0.converter;
        retrofit.ErrorHandler errorHandler15 = null;
        restAdapter0.errorHandler = errorHandler15;
        retrofit.converter.Converter converter17 = restAdapter0.converter;
        retrofit.RestAdapter.Log log18 = restAdapter0.log;
        retrofit.Server server19 = restAdapter0.server;
        retrofit.ErrorHandler errorHandler20 = restAdapter0.errorHandler;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler22 = builder21.errorHandler;
        java.util.concurrent.Executor executor23 = builder21.callbackExecutor;
        retrofit.RestAdapter.Builder builder25 = builder21.setServer("hi!");
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider27 = builder26.clientProvider;
        java.util.concurrent.Executor executor28 = null;
        builder26.callbackExecutor = executor28;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.Server server33 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder34 = builder30.setServer(server33);
        java.lang.String str35 = server33.getUrl();
        retrofit.RestAdapter.Builder builder36 = builder26.setServer(server33);
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler38 = builder37.errorHandler;
        retrofit.client.Client.Provider provider39 = null;
        builder37.clientProvider = provider39;
        retrofit.Server server43 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder44 = builder37.setServer(server43);
        retrofit.converter.Converter converter45 = null;
        builder44.converter = converter45;
        retrofit.RestAdapter restAdapter47 = builder44.build();
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler49 = builder48.errorHandler;
        java.util.concurrent.Executor executor50 = null;
        builder48.callbackExecutor = executor50;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider53 = builder52.clientProvider;
        java.util.concurrent.Executor executor54 = null;
        builder52.callbackExecutor = executor54;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.Server server59 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder60 = builder56.setServer(server59);
        java.lang.String str61 = server59.getUrl();
        retrofit.RestAdapter.Builder builder62 = builder52.setServer(server59);
        retrofit.RestAdapter.Builder builder63 = builder48.setServer(server59);
        restAdapter47.server = server59;
        retrofit.Server server65 = restAdapter47.server;
        retrofit.RestAdapter.RestHandler restHandler66 = restAdapter47.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel67 = restAdapter47.getLogLevel();
        builder26.logLevel = logLevel67;
        retrofit.RestAdapter.LogLevel logLevel69 = builder26.logLevel;
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler71 = builder70.errorHandler;
        retrofit.ErrorHandler errorHandler72 = builder70.errorHandler;
        retrofit.Profiler profiler73 = builder70.profiler;
        retrofit.RestAdapter restAdapter74 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor75 = restAdapter74.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler76 = restAdapter74.new RestHandler();
        retrofit.Server server79 = new retrofit.Server("hi!", "hi!");
        restAdapter74.server = server79;
        retrofit.RestAdapter.Builder builder81 = builder70.setServer(server79);
        retrofit.converter.Converter converter82 = null;
        builder81.converter = converter82;
        builder81.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter85 = builder81.build();
        retrofit.RequestInterceptor requestInterceptor86 = builder81.requestInterceptor;
        retrofit.converter.Converter converter87 = builder81.converter;
        retrofit.RestAdapter.Builder builder88 = builder26.setConverter(converter87);
        builder21.converter = converter87;
        restAdapter0.converter = converter87;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(converter17);
        org.junit.Assert.assertNull(log18);
        org.junit.Assert.assertNotNull(server19);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(provider27);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(errorHandler38);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(restAdapter47);
        org.junit.Assert.assertNull(errorHandler49);
        org.junit.Assert.assertNull(provider53);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(server65);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler71);
        org.junit.Assert.assertNull(errorHandler72);
        org.junit.Assert.assertNull(profiler73);
        org.junit.Assert.assertNull(executor75);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(restAdapter85);
        org.junit.Assert.assertNotNull(requestInterceptor86);
        org.junit.Assert.assertNotNull(converter87);
        org.junit.Assert.assertNotNull(builder88);
    }

    @Test
    public void test04536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04536");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = null;
        restAdapter0.httpExecutor = executor2;
        retrofit.client.Client.Provider provider4 = null;
        restAdapter0.clientProvider = provider4;
        java.util.concurrent.Executor executor6 = null;
        restAdapter0.httpExecutor = executor6;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        restAdapter0.requestInterceptor = requestInterceptor8;
        retrofit.Server server10 = restAdapter0.server;
        retrofit.Profiler profiler11 = restAdapter0.profiler;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor13 = restAdapter12.callbackExecutor;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor15 = restAdapter14.callbackExecutor;
        java.util.concurrent.Executor executor16 = restAdapter14.callbackExecutor;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler18 = restAdapter17.errorHandler;
        retrofit.Server server21 = new retrofit.Server("", "");
        restAdapter17.server = server21;
        restAdapter14.server = server21;
        restAdapter12.server = server21;
        retrofit.Profiler profiler25 = restAdapter12.profiler;
        retrofit.ErrorHandler errorHandler26 = null;
        restAdapter12.errorHandler = errorHandler26;
        retrofit.RequestInterceptor requestInterceptor28 = restAdapter12.requestInterceptor;
        retrofit.ErrorHandler errorHandler29 = restAdapter12.errorHandler;
        java.util.concurrent.Executor executor30 = null;
        restAdapter12.callbackExecutor = executor30;
        java.util.concurrent.Executor executor32 = restAdapter12.httpExecutor;
        retrofit.client.Client.Provider provider33 = restAdapter12.clientProvider;
        retrofit.RestAdapter.Log log34 = restAdapter12.log;
        java.util.concurrent.Executor executor35 = restAdapter12.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler36 = restAdapter12.new RestHandler();
        retrofit.Server server37 = restAdapter12.server;
        restAdapter0.server = server37;
        retrofit.Server server39 = restAdapter0.server;
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertNull(profiler11);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(errorHandler18);
        org.junit.Assert.assertNull(profiler25);
        org.junit.Assert.assertNull(requestInterceptor28);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(provider33);
        org.junit.Assert.assertNull(log34);
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertNotNull(server37);
        org.junit.Assert.assertNotNull(server39);
    }

    @Test
    public void test04537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04537");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.converter.Converter converter2 = null;
        restAdapter0.converter = converter2;
        retrofit.ErrorHandler errorHandler4 = null;
        restAdapter0.errorHandler = errorHandler4;
        retrofit.RestAdapter restAdapter6 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor7 = restAdapter6.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler8 = restAdapter6.new RestHandler();
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor10 = restAdapter9.callbackExecutor;
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor12 = restAdapter11.callbackExecutor;
        java.util.concurrent.Executor executor13 = restAdapter11.callbackExecutor;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler15 = restAdapter14.errorHandler;
        retrofit.Server server18 = new retrofit.Server("", "");
        restAdapter14.server = server18;
        restAdapter11.server = server18;
        restAdapter9.server = server18;
        retrofit.Profiler profiler22 = restAdapter9.profiler;
        retrofit.ErrorHandler errorHandler23 = null;
        restAdapter9.errorHandler = errorHandler23;
        retrofit.Profiler profiler25 = null;
        restAdapter9.profiler = profiler25;
        retrofit.RestAdapter.LogLevel logLevel27 = restAdapter9.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter9.logLevel = logLevel28;
        restAdapter6.logLevel = logLevel28;
        restAdapter0.logLevel = logLevel28;
        retrofit.Profiler profiler32 = restAdapter0.profiler;
        retrofit.converter.Converter converter33 = restAdapter0.converter;
        retrofit.RestAdapter.RestHandler restHandler34 = restAdapter0.new RestHandler();
        retrofit.Server server35 = restAdapter0.server;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(logLevel27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(profiler32);
        org.junit.Assert.assertNull(converter33);
        org.junit.Assert.assertNull(server35);
    }

    @Test
    public void test04538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04538");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        builder0.requestInterceptor = requestInterceptor5;
        retrofit.client.Client.Provider provider7 = null;
        builder0.clientProvider = provider7;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor10 = restAdapter9.callbackExecutor;
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor12 = restAdapter11.callbackExecutor;
        java.util.concurrent.Executor executor13 = restAdapter11.callbackExecutor;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler15 = restAdapter14.errorHandler;
        retrofit.Server server18 = new retrofit.Server("", "");
        restAdapter14.server = server18;
        restAdapter11.server = server18;
        restAdapter9.server = server18;
        retrofit.Profiler profiler22 = restAdapter9.profiler;
        retrofit.ErrorHandler errorHandler23 = null;
        restAdapter9.errorHandler = errorHandler23;
        retrofit.RequestInterceptor requestInterceptor25 = restAdapter9.requestInterceptor;
        retrofit.ErrorHandler errorHandler26 = restAdapter9.errorHandler;
        java.util.concurrent.Executor executor27 = null;
        restAdapter9.callbackExecutor = executor27;
        java.util.concurrent.Executor executor29 = restAdapter9.httpExecutor;
        retrofit.client.Client.Provider provider30 = restAdapter9.clientProvider;
        retrofit.converter.Converter converter31 = restAdapter9.converter;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler33 = builder32.errorHandler;
        retrofit.Server server36 = new retrofit.Server("", "");
        builder32.server = server36;
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        builder32.log = log38;
        retrofit.RequestInterceptor requestInterceptor40 = builder32.requestInterceptor;
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        log41.log("hi!");
        log41.log("hi!");
        builder32.log = log41;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider48 = builder47.clientProvider;
        java.util.concurrent.Executor executor49 = null;
        builder47.callbackExecutor = executor49;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.Server server54 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder55 = builder51.setServer(server54);
        java.lang.String str56 = server54.getUrl();
        retrofit.RestAdapter.Builder builder57 = builder47.setServer(server54);
        builder47.ensureSaneDefaults();
        retrofit.Server server59 = null;
        retrofit.client.Client.Provider provider60 = null;
        java.util.concurrent.Executor executor61 = null;
        java.util.concurrent.Executor executor62 = null;
        retrofit.RequestInterceptor requestInterceptor63 = null;
        retrofit.converter.Converter converter64 = null;
        retrofit.Profiler profiler65 = null;
        retrofit.ErrorHandler errorHandler66 = null;
        retrofit.RestAdapter.Log log67 = retrofit.RestAdapter.Log.NONE;
        log67.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter(server59, provider60, executor61, executor62, requestInterceptor63, converter64, profiler65, errorHandler66, log67, logLevel70);
        retrofit.RestAdapter.RestHandler restHandler72 = restAdapter71.new RestHandler();
        retrofit.RestAdapter.Log log73 = retrofit.RestAdapter.Log.NONE;
        restAdapter71.log = log73;
        retrofit.RestAdapter.Builder builder75 = builder47.setLog(log73);
        retrofit.RestAdapter.LogLevel logLevel76 = builder47.logLevel;
        boolean boolean77 = logLevel76.log();
        retrofit.RestAdapter.Builder builder78 = builder32.setLogLevel(logLevel76);
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider80 = builder79.clientProvider;
        retrofit.RestAdapter.Builder builder82 = builder79.setServer("default");
        retrofit.RestAdapter restAdapter83 = builder79.build();
        retrofit.client.Client.Provider provider84 = restAdapter83.clientProvider;
        retrofit.RestAdapter.Builder builder85 = builder78.setClient(provider84);
        restAdapter9.clientProvider = provider84;
        retrofit.RestAdapter.Builder builder87 = builder0.setClient(provider84);
        java.util.concurrent.Executor executor88 = builder87.callbackExecutor;
        retrofit.converter.Converter converter89 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder90 = builder87.setConverter(converter89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Converter may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(requestInterceptor25);
        org.junit.Assert.assertNull(errorHandler26);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(provider30);
        org.junit.Assert.assertNull(converter31);
        org.junit.Assert.assertNull(errorHandler33);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNull(requestInterceptor40);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertNull(provider48);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(log67);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNull(provider80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(restAdapter83);
        org.junit.Assert.assertNotNull(provider84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNull(executor88);
    }

    @Test
    public void test04539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04539");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = builder0.clientProvider;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server7 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder8 = builder4.setServer(server7);
        java.lang.String str9 = server7.getUrl();
        retrofit.RestAdapter.Builder builder10 = builder0.setServer(server7);
        builder0.ensureSaneDefaults();
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        log20.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel23);
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter24.new RestHandler();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        restAdapter24.log = log26;
        retrofit.RestAdapter.Builder builder28 = builder0.setLog(log26);
        retrofit.RestAdapter.LogLevel logLevel29 = builder0.logLevel;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler31 = builder30.errorHandler;
        retrofit.ErrorHandler errorHandler32 = builder30.errorHandler;
        retrofit.RestAdapter.Log log33 = null;
        builder30.log = log33;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean36 = logLevel35.log();
        builder30.logLevel = logLevel35;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler39 = restAdapter38.new RestHandler();
        java.util.concurrent.Executor executor40 = null;
        restAdapter38.callbackExecutor = executor40;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor43 = restAdapter42.callbackExecutor;
        java.util.concurrent.Executor executor44 = restAdapter42.callbackExecutor;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler46 = restAdapter45.errorHandler;
        retrofit.Server server49 = new retrofit.Server("", "");
        restAdapter45.server = server49;
        restAdapter42.server = server49;
        restAdapter38.server = server49;
        retrofit.RestAdapter.Builder builder53 = builder30.setServer(server49);
        retrofit.RestAdapter.Builder builder54 = builder0.setServer(server49);
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.Server server58 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder59 = builder55.setServer(server58);
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor61 = restAdapter60.callbackExecutor;
        java.util.concurrent.Executor executor62 = restAdapter60.callbackExecutor;
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler64 = restAdapter63.errorHandler;
        retrofit.Server server67 = new retrofit.Server("", "");
        restAdapter63.server = server67;
        restAdapter60.server = server67;
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        restAdapter60.log = log70;
        retrofit.RestAdapter.Builder builder72 = builder59.setLog(log70);
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder74 = builder59.setLogLevel(logLevel73);
        retrofit.RestAdapter.Log log75 = builder59.log;
        retrofit.RestAdapter.Builder builder76 = builder54.setLog(log75);
        retrofit.Profiler profiler77 = builder54.profiler;
        org.junit.Assert.assertNull(provider1);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler31);
        org.junit.Assert.assertNull(errorHandler32);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(executor43);
        org.junit.Assert.assertNull(executor44);
        org.junit.Assert.assertNull(errorHandler46);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(executor61);
        org.junit.Assert.assertNull(executor62);
        org.junit.Assert.assertNull(errorHandler64);
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(log75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNull(profiler77);
    }

    @Test
    public void test04540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04540");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        java.util.concurrent.Executor executor4 = null;
        builder0.httpExecutor = executor4;
        retrofit.Profiler profiler6 = null;
        builder0.profiler = profiler6;
        retrofit.RestAdapter.Builder builder9 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel10 = builder0.logLevel;
        retrofit.Profiler profiler11 = null;
        builder0.profiler = profiler11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler14 = builder13.errorHandler;
        retrofit.ErrorHandler errorHandler15 = builder13.errorHandler;
        retrofit.Profiler profiler16 = builder13.profiler;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor18 = restAdapter17.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter17.new RestHandler();
        retrofit.Server server22 = new retrofit.Server("hi!", "hi!");
        restAdapter17.server = server22;
        retrofit.RestAdapter.Builder builder24 = builder13.setServer(server22);
        retrofit.converter.Converter converter25 = null;
        builder24.converter = converter25;
        retrofit.Server server29 = new retrofit.Server("hi!", "");
        builder24.server = server29;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor32 = restAdapter31.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler33 = restAdapter31.new RestHandler();
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor35 = restAdapter34.callbackExecutor;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor37 = restAdapter36.callbackExecutor;
        java.util.concurrent.Executor executor38 = restAdapter36.callbackExecutor;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler40 = restAdapter39.errorHandler;
        retrofit.Server server43 = new retrofit.Server("", "");
        restAdapter39.server = server43;
        restAdapter36.server = server43;
        restAdapter34.server = server43;
        retrofit.Profiler profiler47 = restAdapter34.profiler;
        retrofit.ErrorHandler errorHandler48 = null;
        restAdapter34.errorHandler = errorHandler48;
        retrofit.Profiler profiler50 = null;
        restAdapter34.profiler = profiler50;
        retrofit.RestAdapter.LogLevel logLevel52 = restAdapter34.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter34.logLevel = logLevel53;
        restAdapter31.logLevel = logLevel53;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.Server server59 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder60 = builder56.setServer(server59);
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor62 = restAdapter61.callbackExecutor;
        java.util.concurrent.Executor executor63 = restAdapter61.callbackExecutor;
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler65 = restAdapter64.errorHandler;
        retrofit.Server server68 = new retrofit.Server("", "");
        restAdapter64.server = server68;
        restAdapter61.server = server68;
        retrofit.RestAdapter.Log log71 = retrofit.RestAdapter.Log.NONE;
        restAdapter61.log = log71;
        retrofit.RestAdapter.Builder builder73 = builder60.setLog(log71);
        retrofit.RestAdapter.LogLevel logLevel74 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder75 = builder60.setLogLevel(logLevel74);
        retrofit.Profiler profiler76 = null;
        builder75.profiler = profiler76;
        retrofit.converter.Converter converter78 = null;
        builder75.converter = converter78;
        retrofit.ErrorHandler errorHandler80 = null;
        builder75.errorHandler = errorHandler80;
        retrofit.RestAdapter restAdapter82 = builder75.build();
        retrofit.ErrorHandler errorHandler83 = builder75.errorHandler;
        restAdapter31.errorHandler = errorHandler83;
        retrofit.RestAdapter.Builder builder85 = builder24.setErrorHandler(errorHandler83);
        retrofit.RestAdapter.Builder builder86 = builder0.setErrorHandler(errorHandler83);
        retrofit.RestAdapter.Builder builder87 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler88 = builder87.errorHandler;
        java.util.concurrent.Executor executor89 = builder87.callbackExecutor;
        retrofit.RestAdapter.Builder builder91 = builder87.setServer("hi!");
        retrofit.Server server94 = new retrofit.Server("default", "hi!");
        java.lang.String str95 = server94.getUrl();
        retrofit.RestAdapter.Builder builder96 = builder91.setServer(server94);
        java.lang.String str97 = server94.getName();
        retrofit.RestAdapter.Builder builder98 = builder86.setServer(server94);
        retrofit.client.Client.Provider provider99 = builder86.clientProvider;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNull(profiler16);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNull(profiler47);
        org.junit.Assert.assertNull(logLevel52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(executor62);
        org.junit.Assert.assertNull(executor63);
        org.junit.Assert.assertNull(errorHandler65);
        org.junit.Assert.assertNotNull(log71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(restAdapter82);
        org.junit.Assert.assertNotNull(errorHandler83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNull(errorHandler88);
        org.junit.Assert.assertNull(executor89);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "default" + "'", str95, "default");
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "hi!" + "'", str97, "hi!");
        org.junit.Assert.assertNotNull(builder98);
        org.junit.Assert.assertNull(provider99);
    }

    @Test
    public void test04541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04541");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter3 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler4 = restAdapter3.errorHandler;
        retrofit.Server server7 = new retrofit.Server("", "");
        restAdapter3.server = server7;
        restAdapter0.server = server7;
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter0.logLevel;
        retrofit.Profiler profiler11 = null;
        restAdapter0.profiler = profiler11;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter0.logLevel;
        retrofit.Server server14 = restAdapter0.server;
        java.lang.String str15 = server14.getName();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(errorHandler4);
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test04542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04542");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter0.getLogLevel();
        retrofit.client.Client.Provider provider20 = null;
        restAdapter0.clientProvider = provider20;
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter0.logLevel;
        retrofit.RestAdapter.RestHandler restHandler23 = restAdapter0.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor24 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler27 = builder26.errorHandler;
        java.util.concurrent.Executor executor28 = builder26.callbackExecutor;
        retrofit.RestAdapter.Builder builder30 = builder26.setServer("hi!");
        builder30.ensureSaneDefaults();
        java.util.concurrent.Executor executor32 = builder30.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel33 = builder30.logLevel;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler35 = builder34.errorHandler;
        retrofit.client.Client.Provider provider36 = null;
        builder34.clientProvider = provider36;
        retrofit.Server server40 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder41 = builder34.setServer(server40);
        retrofit.converter.Converter converter42 = null;
        builder41.converter = converter42;
        retrofit.RestAdapter restAdapter44 = builder41.build();
        retrofit.RestAdapter restAdapter45 = builder41.build();
        retrofit.client.Client.Provider provider46 = builder41.clientProvider;
        retrofit.RestAdapter.Builder builder47 = builder30.setClient(provider46);
        retrofit.client.Client.Provider provider48 = builder47.clientProvider;
        restAdapter0.clientProvider = provider48;
        retrofit.RequestInterceptor requestInterceptor50 = restAdapter0.requestInterceptor;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(logLevel22);
        org.junit.Assert.assertNull(requestInterceptor24);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(executor32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler35);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(restAdapter44);
        org.junit.Assert.assertNotNull(restAdapter45);
        org.junit.Assert.assertNotNull(provider46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(provider48);
        org.junit.Assert.assertNull(requestInterceptor50);
    }

    @Test
    public void test04543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04543");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.converter.Converter converter4 = builder0.converter;
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        builder0.ensureSaneDefaults();
        retrofit.Profiler profiler8 = builder0.profiler;
        retrofit.RequestInterceptor requestInterceptor9 = builder0.requestInterceptor;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor11 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor13 = restAdapter12.callbackExecutor;
        java.util.concurrent.Executor executor14 = restAdapter12.callbackExecutor;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler16 = restAdapter15.errorHandler;
        retrofit.Server server19 = new retrofit.Server("", "");
        restAdapter15.server = server19;
        restAdapter12.server = server19;
        restAdapter10.server = server19;
        retrofit.Profiler profiler23 = restAdapter10.profiler;
        retrofit.ErrorHandler errorHandler24 = null;
        restAdapter10.errorHandler = errorHandler24;
        retrofit.RequestInterceptor requestInterceptor26 = restAdapter10.requestInterceptor;
        retrofit.ErrorHandler errorHandler27 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor28 = null;
        restAdapter10.callbackExecutor = executor28;
        java.util.concurrent.Executor executor30 = restAdapter10.httpExecutor;
        retrofit.client.Client.Provider provider31 = restAdapter10.clientProvider;
        retrofit.RestAdapter.RestHandler restHandler32 = restAdapter10.new RestHandler();
        retrofit.client.Client.Provider provider33 = restAdapter10.clientProvider;
        retrofit.client.Client.Provider provider34 = restAdapter10.clientProvider;
        retrofit.converter.Converter converter35 = null;
        restAdapter10.converter = converter35;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.Server server40 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder41 = builder37.setServer(server40);
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor43 = restAdapter42.callbackExecutor;
        java.util.concurrent.Executor executor44 = restAdapter42.callbackExecutor;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler46 = restAdapter45.errorHandler;
        retrofit.Server server49 = new retrofit.Server("", "");
        restAdapter45.server = server49;
        restAdapter42.server = server49;
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        restAdapter42.log = log52;
        retrofit.RestAdapter.Builder builder54 = builder41.setLog(log52);
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder56 = builder41.setLogLevel(logLevel55);
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider58 = builder57.clientProvider;
        java.util.concurrent.Executor executor59 = null;
        builder57.callbackExecutor = executor59;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.Server server64 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder65 = builder61.setServer(server64);
        java.lang.String str66 = server64.getUrl();
        retrofit.RestAdapter.Builder builder67 = builder57.setServer(server64);
        builder57.ensureSaneDefaults();
        retrofit.Server server69 = null;
        retrofit.client.Client.Provider provider70 = null;
        java.util.concurrent.Executor executor71 = null;
        java.util.concurrent.Executor executor72 = null;
        retrofit.RequestInterceptor requestInterceptor73 = null;
        retrofit.converter.Converter converter74 = null;
        retrofit.Profiler profiler75 = null;
        retrofit.ErrorHandler errorHandler76 = null;
        retrofit.RestAdapter.Log log77 = retrofit.RestAdapter.Log.NONE;
        log77.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel80 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter81 = new retrofit.RestAdapter(server69, provider70, executor71, executor72, requestInterceptor73, converter74, profiler75, errorHandler76, log77, logLevel80);
        retrofit.RestAdapter.RestHandler restHandler82 = restAdapter81.new RestHandler();
        retrofit.RestAdapter.Log log83 = retrofit.RestAdapter.Log.NONE;
        restAdapter81.log = log83;
        retrofit.RestAdapter.Builder builder85 = builder57.setLog(log83);
        retrofit.RestAdapter.Builder builder87 = builder57.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor88 = builder57.requestInterceptor;
        builder56.requestInterceptor = requestInterceptor88;
        restAdapter10.requestInterceptor = requestInterceptor88;
        retrofit.RestAdapter.Builder builder91 = builder0.setRequestInterceptor(requestInterceptor88);
        retrofit.Profiler profiler92 = builder91.profiler;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(profiler8);
        org.junit.Assert.assertNotNull(requestInterceptor9);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNull(profiler23);
        org.junit.Assert.assertNull(requestInterceptor26);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNull(provider31);
        org.junit.Assert.assertNull(provider33);
        org.junit.Assert.assertNull(provider34);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(executor43);
        org.junit.Assert.assertNull(executor44);
        org.junit.Assert.assertNull(errorHandler46);
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(provider58);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hi!" + "'", str66, "hi!");
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(log77);
        org.junit.Assert.assertTrue("'" + logLevel80 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel80.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(requestInterceptor88);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNull(profiler92);
    }

    @Test
    public void test04544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04544");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.client.Client.Provider provider2 = restAdapter0.clientProvider;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler4 = builder3.errorHandler;
        retrofit.Server server7 = new retrofit.Server("", "");
        builder3.server = server7;
        retrofit.RestAdapter.Log log9 = retrofit.RestAdapter.Log.NONE;
        builder3.log = log9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler12 = builder11.errorHandler;
        retrofit.client.Client.Provider provider13 = null;
        builder11.clientProvider = provider13;
        retrofit.Server server17 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder18 = builder11.setServer(server17);
        retrofit.converter.Converter converter19 = null;
        builder18.converter = converter19;
        retrofit.RestAdapter restAdapter21 = builder18.build();
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler23 = builder22.errorHandler;
        java.util.concurrent.Executor executor24 = null;
        builder22.callbackExecutor = executor24;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider27 = builder26.clientProvider;
        java.util.concurrent.Executor executor28 = null;
        builder26.callbackExecutor = executor28;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.Server server33 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder34 = builder30.setServer(server33);
        java.lang.String str35 = server33.getUrl();
        retrofit.RestAdapter.Builder builder36 = builder26.setServer(server33);
        retrofit.RestAdapter.Builder builder37 = builder22.setServer(server33);
        restAdapter21.server = server33;
        java.util.concurrent.Executor executor39 = restAdapter21.httpExecutor;
        builder3.httpExecutor = executor39;
        restAdapter0.callbackExecutor = executor39;
        java.util.concurrent.Executor executor42 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler43 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(provider2);
        org.junit.Assert.assertNull(errorHandler4);
        org.junit.Assert.assertNotNull(log9);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(restAdapter21);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNull(provider27);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(executor39);
        org.junit.Assert.assertNull(executor42);
    }

    @Test
    public void test04545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04545");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.converter.Converter converter4 = builder0.converter;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor8 = restAdapter7.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean10 = logLevel9.log();
        restAdapter7.logLevel = logLevel9;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler13 = builder12.errorHandler;
        retrofit.client.Client.Provider provider14 = null;
        builder12.clientProvider = provider14;
        retrofit.Server server18 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder19 = builder12.setServer(server18);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler21 = builder20.errorHandler;
        retrofit.client.Client.Provider provider22 = null;
        builder20.clientProvider = provider22;
        retrofit.converter.Converter converter24 = builder20.converter;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder26 = builder20.setLogLevel(logLevel25);
        builder12.logLevel = logLevel25;
        boolean boolean28 = logLevel25.log();
        restAdapter7.logLevel = logLevel25;
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider32 = builder31.clientProvider;
        java.util.concurrent.Executor executor33 = null;
        builder31.callbackExecutor = executor33;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.Server server38 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder39 = builder35.setServer(server38);
        java.lang.String str40 = server38.getUrl();
        retrofit.RestAdapter.Builder builder41 = builder31.setServer(server38);
        builder31.ensureSaneDefaults();
        retrofit.Server server43 = null;
        retrofit.client.Client.Provider provider44 = null;
        java.util.concurrent.Executor executor45 = null;
        java.util.concurrent.Executor executor46 = null;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        retrofit.converter.Converter converter48 = null;
        retrofit.Profiler profiler49 = null;
        retrofit.ErrorHandler errorHandler50 = null;
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        log51.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter(server43, provider44, executor45, executor46, requestInterceptor47, converter48, profiler49, errorHandler50, log51, logLevel54);
        retrofit.RestAdapter.RestHandler restHandler56 = restAdapter55.new RestHandler();
        retrofit.RestAdapter.Log log57 = retrofit.RestAdapter.Log.NONE;
        restAdapter55.log = log57;
        retrofit.RestAdapter.Builder builder59 = builder31.setLog(log57);
        retrofit.RestAdapter.Builder builder61 = builder31.setServer("hi!");
        retrofit.RestAdapter.Builder builder63 = builder61.setServer("hi!");
        retrofit.ErrorHandler errorHandler64 = builder61.errorHandler;
        retrofit.converter.Converter converter65 = builder61.converter;
        builder6.converter = converter65;
        retrofit.Profiler profiler67 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder68 = builder6.setProfiler(profiler67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(converter24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(provider32);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(errorHandler64);
        org.junit.Assert.assertNotNull(converter65);
    }

    @Test
    public void test04546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04546");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        restAdapter5.log = log15;
        retrofit.RestAdapter.Builder builder17 = builder4.setLog(log15);
        retrofit.RestAdapter.Builder builder19 = builder4.setServer("hi!");
        java.util.concurrent.Executor executor20 = builder19.callbackExecutor;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel22 = builder21.logLevel;
        retrofit.RestAdapter.Builder builder23 = builder19.setLogLevel(logLevel22);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.Server server27 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder28 = builder24.setServer(server27);
        retrofit.converter.Converter converter29 = builder24.converter;
        retrofit.RequestInterceptor requestInterceptor30 = builder24.requestInterceptor;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider32 = builder31.clientProvider;
        java.util.concurrent.Executor executor33 = null;
        builder31.callbackExecutor = executor33;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.Server server38 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder39 = builder35.setServer(server38);
        java.lang.String str40 = server38.getUrl();
        retrofit.RestAdapter.Builder builder41 = builder31.setServer(server38);
        builder31.ensureSaneDefaults();
        retrofit.Server server43 = null;
        retrofit.client.Client.Provider provider44 = null;
        java.util.concurrent.Executor executor45 = null;
        java.util.concurrent.Executor executor46 = null;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        retrofit.converter.Converter converter48 = null;
        retrofit.Profiler profiler49 = null;
        retrofit.ErrorHandler errorHandler50 = null;
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        log51.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter(server43, provider44, executor45, executor46, requestInterceptor47, converter48, profiler49, errorHandler50, log51, logLevel54);
        retrofit.RestAdapter.RestHandler restHandler56 = restAdapter55.new RestHandler();
        retrofit.RestAdapter.Log log57 = retrofit.RestAdapter.Log.NONE;
        restAdapter55.log = log57;
        retrofit.RestAdapter.Builder builder59 = builder31.setLog(log57);
        retrofit.RestAdapter.Builder builder61 = builder31.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor62 = builder31.requestInterceptor;
        builder24.requestInterceptor = requestInterceptor62;
        retrofit.RestAdapter.Builder builder64 = builder23.setRequestInterceptor(requestInterceptor62);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(converter29);
        org.junit.Assert.assertNull(requestInterceptor30);
        org.junit.Assert.assertNull(provider32);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(requestInterceptor62);
        org.junit.Assert.assertNotNull(builder64);
    }

    @Test
    public void test04547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04547");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler1 = restAdapter0.errorHandler;
        retrofit.Server server4 = new retrofit.Server("", "");
        restAdapter0.server = server4;
        retrofit.Profiler profiler6 = null;
        restAdapter0.profiler = profiler6;
        retrofit.Profiler profiler8 = null;
        restAdapter0.profiler = profiler8;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.client.Client.Provider provider12 = restAdapter10.clientProvider;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler14 = builder13.errorHandler;
        retrofit.Server server17 = new retrofit.Server("", "");
        builder13.server = server17;
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        builder13.log = log19;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler22 = builder21.errorHandler;
        retrofit.client.Client.Provider provider23 = null;
        builder21.clientProvider = provider23;
        retrofit.Server server27 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder28 = builder21.setServer(server27);
        retrofit.converter.Converter converter29 = null;
        builder28.converter = converter29;
        retrofit.RestAdapter restAdapter31 = builder28.build();
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler33 = builder32.errorHandler;
        java.util.concurrent.Executor executor34 = null;
        builder32.callbackExecutor = executor34;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider37 = builder36.clientProvider;
        java.util.concurrent.Executor executor38 = null;
        builder36.callbackExecutor = executor38;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.Server server43 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder44 = builder40.setServer(server43);
        java.lang.String str45 = server43.getUrl();
        retrofit.RestAdapter.Builder builder46 = builder36.setServer(server43);
        retrofit.RestAdapter.Builder builder47 = builder32.setServer(server43);
        restAdapter31.server = server43;
        java.util.concurrent.Executor executor49 = restAdapter31.httpExecutor;
        builder13.httpExecutor = executor49;
        restAdapter10.callbackExecutor = executor49;
        restAdapter0.callbackExecutor = executor49;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler54 = builder53.errorHandler;
        retrofit.client.Client.Provider provider55 = null;
        builder53.clientProvider = provider55;
        retrofit.Server server59 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder60 = builder53.setServer(server59);
        retrofit.Server server63 = new retrofit.Server("", "");
        builder60.server = server63;
        builder60.ensureSaneDefaults();
        java.util.concurrent.Executor executor66 = builder60.callbackExecutor;
        restAdapter0.httpExecutor = executor66;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(restAdapter31);
        org.junit.Assert.assertNull(errorHandler33);
        org.junit.Assert.assertNull(provider37);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(executor49);
        org.junit.Assert.assertNull(errorHandler54);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(executor66);
    }

    @Test
    public void test04548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04548");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        java.util.concurrent.Executor executor6 = builder4.httpExecutor;
        retrofit.RestAdapter restAdapter7 = builder4.build();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider9 = builder8.clientProvider;
        java.util.concurrent.Executor executor10 = null;
        builder8.callbackExecutor = executor10;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.Server server15 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder16 = builder12.setServer(server15);
        java.lang.String str17 = server15.getUrl();
        retrofit.RestAdapter.Builder builder18 = builder8.setServer(server15);
        builder8.ensureSaneDefaults();
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        log28.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log28, logLevel31);
        retrofit.RestAdapter.RestHandler restHandler33 = restAdapter32.new RestHandler();
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        restAdapter32.log = log34;
        retrofit.RestAdapter.Builder builder36 = builder8.setLog(log34);
        retrofit.RestAdapter.Builder builder38 = builder8.setServer("hi!");
        retrofit.RestAdapter restAdapter39 = builder8.build();
        retrofit.RestAdapter.RestHandler restHandler40 = restAdapter39.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter39.logLevel;
        java.util.concurrent.Executor executor42 = restAdapter39.callbackExecutor;
        restAdapter7.callbackExecutor = executor42;
        java.util.concurrent.Executor executor44 = restAdapter7.httpExecutor;
        retrofit.Server server45 = restAdapter7.server;
        retrofit.client.Header[] headerArray56 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList57 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList57, headerArray56);
        retrofit.mime.TypedOutput typedOutput59 = null;
        retrofit.client.Request request60 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList57, typedOutput59);
        retrofit.mime.TypedOutput typedOutput61 = null;
        retrofit.client.Request request62 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList57, typedOutput61);
        retrofit.mime.TypedOutput typedOutput63 = null;
        retrofit.client.Request request64 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList57, typedOutput63);
        retrofit.mime.TypedOutput typedOutput65 = null;
        retrofit.client.Request request66 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList57, typedOutput65);
        retrofit.mime.TypedOutput typedOutput67 = null;
        retrofit.client.Request request68 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList57, typedOutput67);
        retrofit.client.Request request69 = restAdapter7.logAndReplaceRequest(request68);
        retrofit.Server server70 = restAdapter7.server;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNull(provider9);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(restAdapter39);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(executor42);
        org.junit.Assert.assertNotNull(executor44);
        org.junit.Assert.assertNotNull(server45);
        org.junit.Assert.assertNotNull(headerArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(request69);
        org.junit.Assert.assertNotNull(server70);
    }

    @Test
    public void test04549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04549");
        retrofit.client.Header[] headerArray18 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList19 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList19, headerArray18);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList19, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList19, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList19, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList19, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("default", "hi!", (java.util.List<retrofit.client.Header>) headerList19, typedOutput29);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("default", "", (java.util.List<retrofit.client.Header>) headerList19, typedOutput31);
        retrofit.mime.TypedOutput typedOutput33 = null;
        retrofit.client.Request request34 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList19, typedOutput33);
        retrofit.mime.TypedOutput typedOutput35 = null;
        retrofit.client.Request request36 = new retrofit.client.Request("default", "hi!", (java.util.List<retrofit.client.Header>) headerList19, typedOutput35);
        retrofit.mime.TypedOutput typedOutput37 = null;
        retrofit.client.Request request38 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList19, typedOutput37);
        java.lang.String str39 = request38.getMethod();
        retrofit.mime.TypedOutput typedOutput40 = request38.getBody();
        org.junit.Assert.assertNotNull(headerArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNull(typedOutput40);
    }

    @Test
    public void test04550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04550");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean6 = logLevel5.log();
        builder0.logLevel = logLevel5;
        retrofit.ErrorHandler errorHandler8 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder10 = builder0.setServer("hi!");
        retrofit.ErrorHandler errorHandler11 = builder0.errorHandler;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.Server server16 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder17 = builder13.setServer(server16);
        retrofit.RestAdapter.LogLevel logLevel18 = builder17.logLevel;
        java.util.concurrent.Executor executor19 = builder17.httpExecutor;
        retrofit.RestAdapter restAdapter20 = builder17.build();
        retrofit.ErrorHandler errorHandler21 = builder17.errorHandler;
        retrofit.RestAdapter.Builder builder22 = builder0.setErrorHandler(errorHandler21);
        retrofit.RestAdapter.Builder builder24 = builder0.setServer("hi!");
        retrofit.converter.Converter converter25 = builder0.converter;
        retrofit.Profiler profiler26 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder27 = builder0.setProfiler(profiler26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNotNull(restAdapter20);
        org.junit.Assert.assertNotNull(errorHandler21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(converter25);
    }

    @Test
    public void test04551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04551");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = null;
        restAdapter0.httpExecutor = executor2;
        retrofit.client.Client.Provider provider4 = null;
        restAdapter0.clientProvider = provider4;
        java.util.concurrent.Executor executor6 = null;
        restAdapter0.httpExecutor = executor6;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        restAdapter0.requestInterceptor = requestInterceptor8;
        retrofit.RestAdapter.Log log10 = restAdapter0.log;
        java.util.concurrent.Executor executor11 = restAdapter0.httpExecutor;
        org.junit.Assert.assertNull(log10);
        org.junit.Assert.assertNull(executor11);
    }

    @Test
    public void test04552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04552");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = null;
        restAdapter0.requestInterceptor = requestInterceptor1;
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter0.new RestHandler();
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor5 = restAdapter4.callbackExecutor;
        retrofit.RestAdapter restAdapter6 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor7 = restAdapter6.callbackExecutor;
        java.util.concurrent.Executor executor8 = restAdapter6.callbackExecutor;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler10 = restAdapter9.errorHandler;
        retrofit.Server server13 = new retrofit.Server("", "");
        restAdapter9.server = server13;
        restAdapter6.server = server13;
        restAdapter4.server = server13;
        retrofit.Profiler profiler17 = restAdapter4.profiler;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter4.errorHandler = errorHandler18;
        retrofit.Profiler profiler20 = null;
        restAdapter4.profiler = profiler20;
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter4.getLogLevel();
        retrofit.ErrorHandler errorHandler24 = null;
        restAdapter4.errorHandler = errorHandler24;
        retrofit.client.Client.Provider provider26 = null;
        restAdapter4.clientProvider = provider26;
        retrofit.ErrorHandler errorHandler28 = restAdapter4.errorHandler;
        retrofit.Server server29 = restAdapter4.server;
        java.lang.String str30 = server29.getName();
        restAdapter0.server = server29;
        retrofit.Server server32 = restAdapter0.server;
        retrofit.RestAdapter.RestHandler restHandler33 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel34 = restAdapter0.getLogLevel();
        retrofit.Profiler profiler35 = null;
        restAdapter0.profiler = profiler35;
        retrofit.ErrorHandler errorHandler37 = restAdapter0.errorHandler;
        retrofit.converter.Converter converter38 = restAdapter0.converter;
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNull(profiler17);
        org.junit.Assert.assertNull(logLevel22);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertNotNull(server29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(server32);
        org.junit.Assert.assertNull(logLevel34);
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNull(converter38);
    }

    @Test
    public void test04553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04553");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = builder0.clientProvider;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server7 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder8 = builder4.setServer(server7);
        java.lang.String str9 = server7.getUrl();
        retrofit.RestAdapter.Builder builder10 = builder0.setServer(server7);
        builder0.ensureSaneDefaults();
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        log20.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel23);
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter24.new RestHandler();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        restAdapter24.log = log26;
        retrofit.RestAdapter.Builder builder28 = builder0.setLog(log26);
        retrofit.RestAdapter.Builder builder30 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter31 = builder0.build();
        retrofit.RestAdapter.RestHandler restHandler32 = restAdapter31.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter31.logLevel;
        java.util.concurrent.Executor executor34 = restAdapter31.callbackExecutor;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider36 = builder35.clientProvider;
        retrofit.RestAdapter.Builder builder38 = builder35.setServer("default");
        retrofit.RestAdapter restAdapter39 = builder35.build();
        retrofit.client.Client.Provider provider40 = builder35.clientProvider;
        restAdapter31.clientProvider = provider40;
        java.lang.Throwable throwable42 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter31.logException(throwable42, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(provider1);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(restAdapter31);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(executor34);
        org.junit.Assert.assertNull(provider36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(restAdapter39);
        org.junit.Assert.assertNotNull(provider40);
    }

    @Test
    public void test04554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04554");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        restAdapter5.log = log15;
        retrofit.RestAdapter.Builder builder17 = builder4.setLog(log15);
        retrofit.RestAdapter.Builder builder19 = builder4.setServer("hi!");
        retrofit.RestAdapter.Log log20 = builder19.log;
        retrofit.Server server23 = new retrofit.Server("default", "");
        builder19.server = server23;
        java.lang.String str25 = server23.getName();
        java.lang.String str26 = server23.getUrl();
        java.lang.String str27 = server23.getName();
        java.lang.String str28 = server23.getName();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "default" + "'", str26, "default");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
    }

    @Test
    public void test04555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04555");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.ErrorHandler errorHandler3 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler7 = builder6.errorHandler;
        retrofit.ErrorHandler errorHandler8 = builder6.errorHandler;
        retrofit.Profiler profiler9 = builder6.profiler;
        retrofit.RestAdapter.Log log10 = builder6.log;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.FULL;
        builder6.logLevel = logLevel11;
        retrofit.RestAdapter.Builder builder13 = builder5.setLogLevel(logLevel11);
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        log22.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel25);
        log22.log("");
        retrofit.RestAdapter.Builder builder29 = builder13.setLog(log22);
        java.util.concurrent.Executor executor30 = builder29.callbackExecutor;
        retrofit.client.Client.Provider provider31 = builder29.clientProvider;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler33 = builder32.errorHandler;
        java.util.concurrent.Executor executor34 = null;
        builder32.callbackExecutor = executor34;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.Server server39 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder40 = builder36.setServer(server39);
        retrofit.converter.Converter converter41 = builder36.converter;
        retrofit.RequestInterceptor requestInterceptor42 = builder36.requestInterceptor;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider44 = builder43.clientProvider;
        java.util.concurrent.Executor executor45 = null;
        builder43.callbackExecutor = executor45;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.Server server50 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder51 = builder47.setServer(server50);
        java.lang.String str52 = server50.getUrl();
        retrofit.RestAdapter.Builder builder53 = builder43.setServer(server50);
        builder43.ensureSaneDefaults();
        retrofit.Server server55 = null;
        retrofit.client.Client.Provider provider56 = null;
        java.util.concurrent.Executor executor57 = null;
        java.util.concurrent.Executor executor58 = null;
        retrofit.RequestInterceptor requestInterceptor59 = null;
        retrofit.converter.Converter converter60 = null;
        retrofit.Profiler profiler61 = null;
        retrofit.ErrorHandler errorHandler62 = null;
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        log63.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel66 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter(server55, provider56, executor57, executor58, requestInterceptor59, converter60, profiler61, errorHandler62, log63, logLevel66);
        retrofit.RestAdapter.RestHandler restHandler68 = restAdapter67.new RestHandler();
        retrofit.RestAdapter.Log log69 = retrofit.RestAdapter.Log.NONE;
        restAdapter67.log = log69;
        retrofit.RestAdapter.Builder builder71 = builder43.setLog(log69);
        retrofit.RestAdapter.Builder builder73 = builder43.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor74 = builder43.requestInterceptor;
        builder36.requestInterceptor = requestInterceptor74;
        builder32.requestInterceptor = requestInterceptor74;
        retrofit.RestAdapter.Builder builder77 = builder29.setRequestInterceptor(requestInterceptor74);
        builder77.ensureSaneDefaults();
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNull(profiler9);
        org.junit.Assert.assertNull(log10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNull(provider31);
        org.junit.Assert.assertNull(errorHandler33);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(converter41);
        org.junit.Assert.assertNull(requestInterceptor42);
        org.junit.Assert.assertNull(provider44);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(requestInterceptor74);
        org.junit.Assert.assertNotNull(builder77);
    }

    @Test
    public void test04556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04556");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter0.requestInterceptor;
        retrofit.ErrorHandler errorHandler17 = restAdapter0.errorHandler;
        java.util.concurrent.Executor executor18 = null;
        restAdapter0.callbackExecutor = executor18;
        java.util.concurrent.Executor executor20 = restAdapter0.httpExecutor;
        retrofit.client.Client.Provider provider21 = restAdapter0.clientProvider;
        retrofit.RestAdapter.Log log22 = restAdapter0.log;
        retrofit.converter.Converter converter23 = null;
        restAdapter0.converter = converter23;
        retrofit.Profiler profiler25 = null;
        restAdapter0.profiler = profiler25;
        retrofit.RestAdapter.RestHandler restHandler27 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(provider21);
        org.junit.Assert.assertNull(log22);
    }

    @Test
    public void test04557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04557");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = restAdapter0.errorHandler;
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter0.requestInterceptor;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(requestInterceptor15);
    }

    @Test
    public void test04558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04558");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.ErrorHandler errorHandler3 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder7 = builder5.setServer("hi!");
        retrofit.ErrorHandler errorHandler8 = builder5.errorHandler;
        retrofit.Server server11 = new retrofit.Server("", "");
        builder5.server = server11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler14 = builder13.errorHandler;
        retrofit.ErrorHandler errorHandler15 = builder13.errorHandler;
        retrofit.RestAdapter.Log log16 = null;
        builder13.log = log16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler19 = builder18.errorHandler;
        retrofit.client.Client.Provider provider20 = null;
        builder18.clientProvider = provider20;
        retrofit.Server server24 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder25 = builder18.setServer(server24);
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.Server server33 = null;
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        log41.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter(server33, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log41, logLevel44);
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter(server24, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log41, logLevel46);
        builder13.logLevel = logLevel46;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider50 = builder49.clientProvider;
        java.util.concurrent.Executor executor51 = null;
        builder49.callbackExecutor = executor51;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.Server server56 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder57 = builder53.setServer(server56);
        java.lang.String str58 = server56.getUrl();
        retrofit.RestAdapter.Builder builder59 = builder49.setServer(server56);
        builder49.ensureSaneDefaults();
        retrofit.Server server61 = null;
        retrofit.client.Client.Provider provider62 = null;
        java.util.concurrent.Executor executor63 = null;
        java.util.concurrent.Executor executor64 = null;
        retrofit.RequestInterceptor requestInterceptor65 = null;
        retrofit.converter.Converter converter66 = null;
        retrofit.Profiler profiler67 = null;
        retrofit.ErrorHandler errorHandler68 = null;
        retrofit.RestAdapter.Log log69 = retrofit.RestAdapter.Log.NONE;
        log69.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel72 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter73 = new retrofit.RestAdapter(server61, provider62, executor63, executor64, requestInterceptor65, converter66, profiler67, errorHandler68, log69, logLevel72);
        retrofit.RestAdapter.RestHandler restHandler74 = restAdapter73.new RestHandler();
        retrofit.RestAdapter.Log log75 = retrofit.RestAdapter.Log.NONE;
        restAdapter73.log = log75;
        retrofit.RestAdapter.Builder builder77 = builder49.setLog(log75);
        retrofit.RestAdapter.Builder builder79 = builder49.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor80 = builder49.requestInterceptor;
        retrofit.RestAdapter.Builder builder81 = builder13.setRequestInterceptor(requestInterceptor80);
        builder81.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor83 = builder81.requestInterceptor;
        retrofit.RestAdapter.Builder builder84 = builder5.setRequestInterceptor(requestInterceptor83);
        retrofit.client.Client.Provider provider85 = builder5.clientProvider;
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(provider50);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(log69);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(requestInterceptor80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(requestInterceptor83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNull(provider85);
    }

    @Test
    public void test04559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04559");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server6 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder7 = builder0.setServer(server6);
        retrofit.Server server10 = new retrofit.Server("", "");
        builder7.server = server10;
        retrofit.converter.Converter converter12 = null;
        builder7.converter = converter12;
        retrofit.Server server15 = new retrofit.Server("default");
        retrofit.RestAdapter.Builder builder16 = builder7.setServer(server15);
        java.util.concurrent.Executor executor17 = builder7.httpExecutor;
        retrofit.converter.Converter converter18 = builder7.converter;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler20 = builder19.errorHandler;
        retrofit.ErrorHandler errorHandler21 = builder19.errorHandler;
        retrofit.Profiler profiler22 = builder19.profiler;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor24 = restAdapter23.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter23.new RestHandler();
        retrofit.Server server28 = new retrofit.Server("hi!", "hi!");
        restAdapter23.server = server28;
        retrofit.RestAdapter.Builder builder30 = builder19.setServer(server28);
        retrofit.converter.Converter converter31 = null;
        builder30.converter = converter31;
        builder30.ensureSaneDefaults();
        retrofit.RestAdapter.Log log34 = null;
        builder30.log = log34;
        retrofit.RequestInterceptor requestInterceptor36 = builder30.requestInterceptor;
        java.util.concurrent.Executor executor37 = builder30.httpExecutor;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler39 = builder38.errorHandler;
        retrofit.ErrorHandler errorHandler40 = builder38.errorHandler;
        retrofit.RestAdapter.Log log41 = null;
        builder38.log = log41;
        retrofit.RequestInterceptor requestInterceptor43 = null;
        builder38.requestInterceptor = requestInterceptor43;
        retrofit.client.Client.Provider provider45 = null;
        builder38.clientProvider = provider45;
        builder38.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.Server server51 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder52 = builder48.setServer(server51);
        retrofit.Server server53 = builder48.server;
        java.lang.String str54 = server53.getName();
        builder38.server = server53;
        retrofit.RestAdapter.Log log56 = retrofit.RestAdapter.Log.NONE;
        builder38.log = log56;
        builder30.log = log56;
        retrofit.RestAdapter.Builder builder59 = builder7.setLog(log56);
        retrofit.RestAdapter restAdapter60 = builder7.build();
        retrofit.converter.Converter converter61 = builder7.converter;
        retrofit.Profiler profiler62 = builder7.profiler;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(converter18);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(requestInterceptor36);
        org.junit.Assert.assertNotNull(executor37);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(server53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(restAdapter60);
        org.junit.Assert.assertNotNull(converter61);
        org.junit.Assert.assertNull(profiler62);
    }

    @Test
    public void test04560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04560");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server4 = new retrofit.Server("", "");
        builder0.server = server4;
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        builder0.log = log6;
        retrofit.RequestInterceptor requestInterceptor8 = builder0.requestInterceptor;
        retrofit.RestAdapter.Log log9 = retrofit.RestAdapter.Log.NONE;
        log9.log("hi!");
        log9.log("hi!");
        builder0.log = log9;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider16 = builder15.clientProvider;
        java.util.concurrent.Executor executor17 = null;
        builder15.callbackExecutor = executor17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.Server server22 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder23 = builder19.setServer(server22);
        java.lang.String str24 = server22.getUrl();
        retrofit.RestAdapter.Builder builder25 = builder15.setServer(server22);
        builder15.ensureSaneDefaults();
        retrofit.Server server27 = null;
        retrofit.client.Client.Provider provider28 = null;
        java.util.concurrent.Executor executor29 = null;
        java.util.concurrent.Executor executor30 = null;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        retrofit.converter.Converter converter32 = null;
        retrofit.Profiler profiler33 = null;
        retrofit.ErrorHandler errorHandler34 = null;
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        log35.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter(server27, provider28, executor29, executor30, requestInterceptor31, converter32, profiler33, errorHandler34, log35, logLevel38);
        retrofit.RestAdapter.RestHandler restHandler40 = restAdapter39.new RestHandler();
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        restAdapter39.log = log41;
        retrofit.RestAdapter.Builder builder43 = builder15.setLog(log41);
        retrofit.RestAdapter.LogLevel logLevel44 = builder15.logLevel;
        boolean boolean45 = logLevel44.log();
        retrofit.RestAdapter.Builder builder46 = builder0.setLogLevel(logLevel44);
        retrofit.RequestInterceptor requestInterceptor47 = builder46.requestInterceptor;
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        log48.log("hi!");
        log48.log("hi!");
        log48.log("hi!");
        builder46.log = log48;
        retrofit.RestAdapter restAdapter56 = builder46.build();
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler58 = builder57.errorHandler;
        retrofit.client.Client.Provider provider59 = null;
        builder57.clientProvider = provider59;
        retrofit.Server server63 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder64 = builder57.setServer(server63);
        restAdapter56.server = server63;
        retrofit.Server server66 = restAdapter56.server;
        retrofit.Server server67 = restAdapter56.server;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertNotNull(log9);
        org.junit.Assert.assertNull(provider16);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(requestInterceptor47);
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertNotNull(restAdapter56);
        org.junit.Assert.assertNull(errorHandler58);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(server66);
        org.junit.Assert.assertNotNull(server67);
    }

    @Test
    public void test04561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04561");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel3 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Log log4 = restAdapter0.log;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(logLevel3);
        org.junit.Assert.assertNull(log4);
    }

    @Test
    public void test04562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04562");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter0.getLogLevel();
        retrofit.ErrorHandler errorHandler20 = null;
        restAdapter0.errorHandler = errorHandler20;
        retrofit.client.Client.Provider provider22 = null;
        restAdapter0.clientProvider = provider22;
        retrofit.converter.Converter converter24 = restAdapter0.converter;
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler26 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler27 = restAdapter0.new RestHandler();
        retrofit.Profiler profiler28 = null;
        restAdapter0.profiler = profiler28;
        retrofit.Server server30 = restAdapter0.server;
        retrofit.Profiler profiler31 = null;
        restAdapter0.profiler = profiler31;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(converter24);
        org.junit.Assert.assertNotNull(server30);
    }

    @Test
    public void test04563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04563");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = null;
        restAdapter0.httpExecutor = executor2;
        retrofit.RequestInterceptor requestInterceptor4 = restAdapter0.requestInterceptor;
        retrofit.ErrorHandler errorHandler5 = restAdapter0.errorHandler;
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNull(errorHandler5);
    }

    @Test
    public void test04564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04564");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.converter.Converter converter4 = builder0.converter;
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        builder0.ensureSaneDefaults();
        retrofit.Profiler profiler8 = builder0.profiler;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler11 = builder10.errorHandler;
        java.util.concurrent.Executor executor12 = builder10.callbackExecutor;
        retrofit.RestAdapter.Builder builder14 = builder10.setServer("hi!");
        retrofit.Server server17 = new retrofit.Server("default", "hi!");
        java.lang.String str18 = server17.getUrl();
        retrofit.RestAdapter.Builder builder19 = builder14.setServer(server17);
        retrofit.RestAdapter.LogLevel logLevel20 = builder19.logLevel;
        retrofit.ErrorHandler errorHandler21 = builder19.errorHandler;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler23 = builder22.errorHandler;
        java.util.concurrent.Executor executor24 = null;
        builder22.callbackExecutor = executor24;
        java.util.concurrent.Executor executor26 = null;
        builder22.httpExecutor = executor26;
        retrofit.Profiler profiler28 = null;
        builder22.profiler = profiler28;
        retrofit.RestAdapter.Builder builder31 = builder22.setServer("hi!");
        retrofit.Profiler profiler32 = builder22.profiler;
        retrofit.RequestInterceptor requestInterceptor33 = builder22.requestInterceptor;
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        log34.log("hi!");
        log34.log("hi!");
        retrofit.RestAdapter.Builder builder39 = builder22.setLog(log34);
        retrofit.RestAdapter.Builder builder40 = builder19.setLog(log34);
        builder0.log = log34;
        log34.log("hi!");
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(profiler8);
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "default" + "'", str18, "default");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(profiler32);
        org.junit.Assert.assertNull(requestInterceptor33);
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test04565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04565");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = builder0.clientProvider;
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("default");
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler5 = builder4.errorHandler;
        retrofit.ErrorHandler errorHandler6 = builder4.errorHandler;
        retrofit.Profiler profiler7 = builder4.profiler;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor9 = restAdapter8.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler10 = restAdapter8.new RestHandler();
        retrofit.Server server13 = new retrofit.Server("hi!", "hi!");
        restAdapter8.server = server13;
        retrofit.RestAdapter.Builder builder15 = builder4.setServer(server13);
        retrofit.converter.Converter converter16 = null;
        builder15.converter = converter16;
        retrofit.Profiler profiler18 = null;
        builder15.profiler = profiler18;
        retrofit.RestAdapter restAdapter20 = builder15.build();
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor22 = restAdapter21.callbackExecutor;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor24 = restAdapter23.callbackExecutor;
        java.util.concurrent.Executor executor25 = restAdapter23.callbackExecutor;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler27 = restAdapter26.errorHandler;
        retrofit.Server server30 = new retrofit.Server("", "");
        restAdapter26.server = server30;
        restAdapter23.server = server30;
        restAdapter21.server = server30;
        retrofit.Profiler profiler34 = restAdapter21.profiler;
        retrofit.ErrorHandler errorHandler35 = null;
        restAdapter21.errorHandler = errorHandler35;
        retrofit.Profiler profiler37 = null;
        restAdapter21.profiler = profiler37;
        retrofit.RestAdapter.RestHandler restHandler39 = restAdapter21.new RestHandler();
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.Server server43 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder44 = builder40.setServer(server43);
        retrofit.converter.Converter converter45 = builder40.converter;
        retrofit.RequestInterceptor requestInterceptor46 = builder40.requestInterceptor;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider48 = builder47.clientProvider;
        java.util.concurrent.Executor executor49 = null;
        builder47.callbackExecutor = executor49;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.Server server54 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder55 = builder51.setServer(server54);
        java.lang.String str56 = server54.getUrl();
        retrofit.RestAdapter.Builder builder57 = builder47.setServer(server54);
        builder47.ensureSaneDefaults();
        retrofit.Server server59 = null;
        retrofit.client.Client.Provider provider60 = null;
        java.util.concurrent.Executor executor61 = null;
        java.util.concurrent.Executor executor62 = null;
        retrofit.RequestInterceptor requestInterceptor63 = null;
        retrofit.converter.Converter converter64 = null;
        retrofit.Profiler profiler65 = null;
        retrofit.ErrorHandler errorHandler66 = null;
        retrofit.RestAdapter.Log log67 = retrofit.RestAdapter.Log.NONE;
        log67.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter(server59, provider60, executor61, executor62, requestInterceptor63, converter64, profiler65, errorHandler66, log67, logLevel70);
        retrofit.RestAdapter.RestHandler restHandler72 = restAdapter71.new RestHandler();
        retrofit.RestAdapter.Log log73 = retrofit.RestAdapter.Log.NONE;
        restAdapter71.log = log73;
        retrofit.RestAdapter.Builder builder75 = builder47.setLog(log73);
        retrofit.RestAdapter.Builder builder77 = builder47.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor78 = builder47.requestInterceptor;
        builder40.requestInterceptor = requestInterceptor78;
        restAdapter21.requestInterceptor = requestInterceptor78;
        restAdapter20.requestInterceptor = requestInterceptor78;
        builder0.requestInterceptor = requestInterceptor78;
        java.util.concurrent.Executor executor83 = builder0.callbackExecutor;
        org.junit.Assert.assertNull(provider1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(errorHandler5);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(restAdapter20);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNull(profiler34);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(converter45);
        org.junit.Assert.assertNull(requestInterceptor46);
        org.junit.Assert.assertNull(provider48);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(log67);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(requestInterceptor78);
        org.junit.Assert.assertNull(executor83);
    }

    @Test
    public void test04566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04566");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        restAdapter5.log = log15;
        retrofit.RestAdapter.Builder builder17 = builder4.setLog(log15);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder19 = builder4.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler21 = builder20.errorHandler;
        retrofit.Server server24 = new retrofit.Server("", "");
        builder20.server = server24;
        java.util.concurrent.Executor executor26 = builder20.callbackExecutor;
        retrofit.Server server27 = null;
        builder20.server = server27;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.NONE;
        builder20.logLevel = logLevel29;
        builder19.logLevel = logLevel29;
        retrofit.RestAdapter.Builder builder33 = builder19.setServer("default");
        retrofit.Server server34 = null;
        retrofit.client.Client.Provider provider35 = null;
        java.util.concurrent.Executor executor36 = null;
        java.util.concurrent.Executor executor37 = null;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        retrofit.converter.Converter converter39 = null;
        retrofit.Profiler profiler40 = null;
        retrofit.ErrorHandler errorHandler41 = null;
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        log42.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter(server34, provider35, executor36, executor37, requestInterceptor38, converter39, profiler40, errorHandler41, log42, logLevel45);
        retrofit.RestAdapter.RestHandler restHandler47 = restAdapter46.new RestHandler();
        retrofit.client.Client.Provider provider48 = restAdapter46.clientProvider;
        retrofit.RestAdapter.Log log49 = restAdapter46.log;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor51 = restAdapter50.callbackExecutor;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor53 = restAdapter52.callbackExecutor;
        java.util.concurrent.Executor executor54 = restAdapter52.callbackExecutor;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler56 = restAdapter55.errorHandler;
        retrofit.Server server59 = new retrofit.Server("", "");
        restAdapter55.server = server59;
        restAdapter52.server = server59;
        restAdapter50.server = server59;
        retrofit.Profiler profiler63 = restAdapter50.profiler;
        retrofit.ErrorHandler errorHandler64 = null;
        restAdapter50.errorHandler = errorHandler64;
        retrofit.RequestInterceptor requestInterceptor66 = restAdapter50.requestInterceptor;
        retrofit.ErrorHandler errorHandler67 = restAdapter50.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler68 = restAdapter50.new RestHandler();
        retrofit.RestAdapter.Log log69 = retrofit.RestAdapter.Log.NONE;
        log69.log("default");
        restAdapter50.log = log69;
        retrofit.RestAdapter.RestHandler restHandler73 = restAdapter50.new RestHandler();
        retrofit.RestAdapter.Log log74 = restAdapter50.log;
        restAdapter46.log = log74;
        log74.log("hi!");
        retrofit.RestAdapter.Builder builder78 = builder33.setLog(log74);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(provider48);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertNull(executor51);
        org.junit.Assert.assertNull(executor53);
        org.junit.Assert.assertNull(executor54);
        org.junit.Assert.assertNull(errorHandler56);
        org.junit.Assert.assertNull(profiler63);
        org.junit.Assert.assertNull(requestInterceptor66);
        org.junit.Assert.assertNull(errorHandler67);
        org.junit.Assert.assertNotNull(log69);
        org.junit.Assert.assertNotNull(log74);
        org.junit.Assert.assertNotNull(builder78);
    }

    @Test
    public void test04567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04567");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler22 = builder21.errorHandler;
        java.util.concurrent.Executor executor23 = null;
        builder21.callbackExecutor = executor23;
        retrofit.converter.Converter converter25 = builder21.converter;
        retrofit.RestAdapter.Builder builder27 = builder21.setServer("hi!");
        builder21.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor30 = restAdapter29.callbackExecutor;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor32 = restAdapter31.callbackExecutor;
        java.util.concurrent.Executor executor33 = restAdapter31.callbackExecutor;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler35 = restAdapter34.errorHandler;
        retrofit.Server server38 = new retrofit.Server("", "");
        restAdapter34.server = server38;
        restAdapter31.server = server38;
        restAdapter29.server = server38;
        java.lang.String str42 = server38.getName();
        builder21.server = server38;
        java.lang.String str44 = server38.getName();
        restAdapter0.server = server38;
        java.lang.String str46 = server38.getName();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNull(converter25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertNull(errorHandler35);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
    }

    @Test
    public void test04568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04568");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        java.util.concurrent.Executor executor18 = null;
        restAdapter0.httpExecutor = executor18;
        retrofit.Profiler profiler20 = restAdapter0.profiler;
        retrofit.RestAdapter.LogLevel logLevel21 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler22 = restAdapter0.new RestHandler();
        retrofit.Profiler profiler23 = null;
        restAdapter0.profiler = profiler23;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(profiler20);
        org.junit.Assert.assertNull(logLevel21);
    }

    @Test
    public void test04569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04569");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.Profiler profiler3 = builder0.profiler;
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor5 = restAdapter4.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.Server server9 = new retrofit.Server("hi!", "hi!");
        restAdapter4.server = server9;
        retrofit.RestAdapter.Builder builder11 = builder0.setServer(server9);
        retrofit.converter.Converter converter12 = null;
        builder11.converter = converter12;
        retrofit.Profiler profiler14 = null;
        builder11.profiler = profiler14;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor17 = restAdapter16.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter16.new RestHandler();
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor20 = restAdapter19.callbackExecutor;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor22 = restAdapter21.callbackExecutor;
        java.util.concurrent.Executor executor23 = restAdapter21.callbackExecutor;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler25 = restAdapter24.errorHandler;
        retrofit.Server server28 = new retrofit.Server("", "");
        restAdapter24.server = server28;
        restAdapter21.server = server28;
        restAdapter19.server = server28;
        retrofit.Profiler profiler32 = restAdapter19.profiler;
        retrofit.ErrorHandler errorHandler33 = null;
        restAdapter19.errorHandler = errorHandler33;
        retrofit.Profiler profiler35 = null;
        restAdapter19.profiler = profiler35;
        retrofit.RestAdapter.LogLevel logLevel37 = restAdapter19.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter19.logLevel = logLevel38;
        restAdapter16.logLevel = logLevel38;
        boolean boolean41 = logLevel38.log();
        retrofit.RestAdapter.Builder builder42 = builder11.setLogLevel(logLevel38);
        retrofit.RestAdapter restAdapter43 = builder42.build();
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler45 = builder44.errorHandler;
        retrofit.ErrorHandler errorHandler46 = builder44.errorHandler;
        retrofit.RestAdapter.Log log47 = null;
        builder44.log = log47;
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean50 = logLevel49.log();
        builder44.logLevel = logLevel49;
        retrofit.ErrorHandler errorHandler52 = builder44.errorHandler;
        retrofit.RestAdapter.Builder builder54 = builder44.setServer("hi!");
        retrofit.ErrorHandler errorHandler55 = builder44.errorHandler;
        builder44.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.Server server60 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder61 = builder57.setServer(server60);
        retrofit.RestAdapter.LogLevel logLevel62 = builder61.logLevel;
        java.util.concurrent.Executor executor63 = builder61.httpExecutor;
        retrofit.RestAdapter restAdapter64 = builder61.build();
        retrofit.ErrorHandler errorHandler65 = builder61.errorHandler;
        retrofit.RestAdapter.Builder builder66 = builder44.setErrorHandler(errorHandler65);
        builder42.errorHandler = errorHandler65;
        retrofit.RestAdapter.Log log68 = builder42.log;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNull(errorHandler25);
        org.junit.Assert.assertNull(profiler32);
        org.junit.Assert.assertNull(logLevel37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(restAdapter43);
        org.junit.Assert.assertNull(errorHandler45);
        org.junit.Assert.assertNull(errorHandler46);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(errorHandler52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(errorHandler55);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor63);
        org.junit.Assert.assertNotNull(restAdapter64);
        org.junit.Assert.assertNotNull(errorHandler65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(log68);
    }

    @Test
    public void test04570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04570");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.util.List<retrofit.client.Header> headerList7 = request6.getHeaders();
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(headerList7);
    }

    @Test
    public void test04571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04571");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.RestAdapter.Log log4 = null;
        builder0.log = log4;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler7 = builder6.errorHandler;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        builder6.requestInterceptor = requestInterceptor8;
        retrofit.RestAdapter.Builder builder11 = builder6.setServer("default");
        retrofit.Server server12 = builder6.server;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler14 = builder13.errorHandler;
        retrofit.client.Client.Provider provider15 = null;
        builder13.clientProvider = provider15;
        retrofit.Server server19 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder20 = builder13.setServer(server19);
        retrofit.converter.Converter converter21 = null;
        builder20.converter = converter21;
        retrofit.RestAdapter restAdapter23 = builder20.build();
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler25 = builder24.errorHandler;
        java.util.concurrent.Executor executor26 = null;
        builder24.callbackExecutor = executor26;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider29 = builder28.clientProvider;
        java.util.concurrent.Executor executor30 = null;
        builder28.callbackExecutor = executor30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.Server server35 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder36 = builder32.setServer(server35);
        java.lang.String str37 = server35.getUrl();
        retrofit.RestAdapter.Builder builder38 = builder28.setServer(server35);
        retrofit.RestAdapter.Builder builder39 = builder24.setServer(server35);
        restAdapter23.server = server35;
        retrofit.Server server41 = restAdapter23.server;
        retrofit.converter.Converter converter42 = restAdapter23.converter;
        builder6.converter = converter42;
        retrofit.RestAdapter.Builder builder44 = builder0.setConverter(converter42);
        retrofit.RestAdapter.LogLevel logLevel45 = builder44.logLevel;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(server12);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(restAdapter23);
        org.junit.Assert.assertNull(errorHandler25);
        org.junit.Assert.assertNull(provider29);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(server41);
        org.junit.Assert.assertNotNull(converter42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test04572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04572");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.converter.Converter converter14 = restAdapter0.converter;
        retrofit.ErrorHandler errorHandler15 = null;
        restAdapter0.errorHandler = errorHandler15;
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter0.new RestHandler();
        retrofit.converter.Converter converter19 = restAdapter0.converter;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.Server server23 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder24 = builder20.setServer(server23);
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor26 = restAdapter25.callbackExecutor;
        java.util.concurrent.Executor executor27 = restAdapter25.callbackExecutor;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler29 = restAdapter28.errorHandler;
        retrofit.Server server32 = new retrofit.Server("", "");
        restAdapter28.server = server32;
        restAdapter25.server = server32;
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        restAdapter25.log = log35;
        retrofit.RestAdapter.Builder builder37 = builder24.setLog(log35);
        log35.log("");
        restAdapter0.log = log35;
        retrofit.RequestInterceptor requestInterceptor41 = restAdapter0.requestInterceptor;
        retrofit.client.Header[] headerArray66 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList67 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList67, headerArray66);
        retrofit.mime.TypedOutput typedOutput69 = null;
        retrofit.client.Request request70 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList67, typedOutput69);
        retrofit.mime.TypedOutput typedOutput71 = null;
        retrofit.client.Request request72 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList67, typedOutput71);
        retrofit.mime.TypedOutput typedOutput73 = null;
        retrofit.client.Request request74 = new retrofit.client.Request("default", "", (java.util.List<retrofit.client.Header>) headerList67, typedOutput73);
        retrofit.mime.TypedOutput typedOutput75 = null;
        retrofit.client.Request request76 = new retrofit.client.Request("default", "", (java.util.List<retrofit.client.Header>) headerList67, typedOutput75);
        java.util.List<retrofit.client.Header> headerList77 = request76.getHeaders();
        retrofit.mime.TypedOutput typedOutput78 = null;
        retrofit.client.Request request79 = new retrofit.client.Request("", "hi!", headerList77, typedOutput78);
        retrofit.mime.TypedOutput typedOutput80 = null;
        retrofit.client.Request request81 = new retrofit.client.Request("hi!", "default", headerList77, typedOutput80);
        retrofit.mime.TypedOutput typedOutput82 = null;
        retrofit.client.Request request83 = new retrofit.client.Request("default", "hi!", headerList77, typedOutput82);
        java.util.List<retrofit.client.Header> headerList84 = request83.getHeaders();
        retrofit.mime.TypedOutput typedOutput85 = null;
        retrofit.client.Request request86 = new retrofit.client.Request("", "hi!", headerList84, typedOutput85);
        retrofit.mime.TypedOutput typedOutput87 = null;
        retrofit.client.Request request88 = new retrofit.client.Request("hi!", "", headerList84, typedOutput87);
        retrofit.mime.TypedOutput typedOutput89 = null;
        retrofit.client.Request request90 = new retrofit.client.Request("", "default", headerList84, typedOutput89);
        retrofit.mime.TypedOutput typedOutput91 = null;
        retrofit.client.Request request92 = new retrofit.client.Request("default", "", headerList84, typedOutput91);
        retrofit.mime.TypedOutput typedOutput93 = null;
        retrofit.client.Request request94 = new retrofit.client.Request("hi!", "", headerList84, typedOutput93);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request95 = restAdapter0.logAndReplaceRequest(request94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(requestInterceptor41);
        org.junit.Assert.assertNotNull(headerArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(headerList77);
        org.junit.Assert.assertNotNull(headerList84);
    }

    @Test
    public void test04573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04573");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.Server server5 = builder0.server;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.Server server9 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder10 = builder6.setServer(server9);
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor12 = restAdapter11.callbackExecutor;
        java.util.concurrent.Executor executor13 = restAdapter11.callbackExecutor;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler15 = restAdapter14.errorHandler;
        retrofit.Server server18 = new retrofit.Server("", "");
        restAdapter14.server = server18;
        restAdapter11.server = server18;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        restAdapter11.log = log21;
        retrofit.RestAdapter.Builder builder23 = builder10.setLog(log21);
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder25 = builder10.setLogLevel(logLevel24);
        builder0.logLevel = logLevel24;
        java.util.concurrent.Executor executor27 = builder0.httpExecutor;
        retrofit.RestAdapter.Log log28 = builder0.log;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.Server server32 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder33 = builder29.setServer(server32);
        retrofit.converter.Converter converter34 = builder29.converter;
        retrofit.RequestInterceptor requestInterceptor35 = builder29.requestInterceptor;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider37 = builder36.clientProvider;
        java.util.concurrent.Executor executor38 = null;
        builder36.callbackExecutor = executor38;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.Server server43 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder44 = builder40.setServer(server43);
        java.lang.String str45 = server43.getUrl();
        retrofit.RestAdapter.Builder builder46 = builder36.setServer(server43);
        builder36.ensureSaneDefaults();
        retrofit.Server server48 = null;
        retrofit.client.Client.Provider provider49 = null;
        java.util.concurrent.Executor executor50 = null;
        java.util.concurrent.Executor executor51 = null;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        retrofit.converter.Converter converter53 = null;
        retrofit.Profiler profiler54 = null;
        retrofit.ErrorHandler errorHandler55 = null;
        retrofit.RestAdapter.Log log56 = retrofit.RestAdapter.Log.NONE;
        log56.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter(server48, provider49, executor50, executor51, requestInterceptor52, converter53, profiler54, errorHandler55, log56, logLevel59);
        retrofit.RestAdapter.RestHandler restHandler61 = restAdapter60.new RestHandler();
        retrofit.RestAdapter.Log log62 = retrofit.RestAdapter.Log.NONE;
        restAdapter60.log = log62;
        retrofit.RestAdapter.Builder builder64 = builder36.setLog(log62);
        retrofit.RestAdapter.Builder builder66 = builder36.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor67 = builder36.requestInterceptor;
        builder29.requestInterceptor = requestInterceptor67;
        retrofit.RestAdapter.Builder builder69 = builder0.setRequestInterceptor(requestInterceptor67);
        retrofit.RestAdapter.LogLevel logLevel70 = builder0.logLevel;
        retrofit.RequestInterceptor requestInterceptor71 = builder0.requestInterceptor;
        retrofit.converter.Converter converter72 = builder0.converter;
        retrofit.RestAdapter.Log log73 = builder0.log;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(server5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(log28);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(converter34);
        org.junit.Assert.assertNull(requestInterceptor35);
        org.junit.Assert.assertNull(provider37);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(requestInterceptor67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(requestInterceptor71);
        org.junit.Assert.assertNull(converter72);
        org.junit.Assert.assertNull(log73);
    }

    @Test
    public void test04574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04574");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        java.util.concurrent.Executor executor4 = null;
        builder0.httpExecutor = executor4;
        retrofit.Profiler profiler6 = null;
        builder0.profiler = profiler6;
        retrofit.RestAdapter.Builder builder9 = builder0.setServer("hi!");
        retrofit.Profiler profiler10 = builder0.profiler;
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler12 = restAdapter11.errorHandler;
        retrofit.Server server15 = new retrofit.Server("", "");
        restAdapter11.server = server15;
        retrofit.Profiler profiler17 = null;
        restAdapter11.profiler = profiler17;
        retrofit.Profiler profiler19 = null;
        restAdapter11.profiler = profiler19;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler22 = builder21.errorHandler;
        retrofit.ErrorHandler errorHandler23 = builder21.errorHandler;
        retrofit.Profiler profiler24 = builder21.profiler;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor26 = restAdapter25.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler27 = restAdapter25.new RestHandler();
        retrofit.Server server30 = new retrofit.Server("hi!", "hi!");
        restAdapter25.server = server30;
        retrofit.RestAdapter.Builder builder32 = builder21.setServer(server30);
        retrofit.converter.Converter converter33 = null;
        builder32.converter = converter33;
        retrofit.Server server35 = null;
        retrofit.client.Client.Provider provider36 = null;
        java.util.concurrent.Executor executor37 = null;
        java.util.concurrent.Executor executor38 = null;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        retrofit.converter.Converter converter40 = null;
        retrofit.Profiler profiler41 = null;
        retrofit.ErrorHandler errorHandler42 = null;
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        log43.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter(server35, provider36, executor37, executor38, requestInterceptor39, converter40, profiler41, errorHandler42, log43, logLevel46);
        builder32.logLevel = logLevel46;
        builder32.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor50 = builder32.requestInterceptor;
        java.util.concurrent.Executor executor51 = null;
        builder32.callbackExecutor = executor51;
        retrofit.converter.Converter converter53 = builder32.converter;
        restAdapter11.converter = converter53;
        builder0.converter = converter53;
        retrofit.RestAdapter.LogLevel logLevel56 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder57 = builder0.setLogLevel(logLevel56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log level may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(profiler10);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNull(profiler24);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(requestInterceptor50);
        org.junit.Assert.assertNotNull(converter53);
    }

    @Test
    public void test04575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04575");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server4 = new retrofit.Server("", "");
        builder0.server = server4;
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        builder0.log = log6;
        retrofit.RequestInterceptor requestInterceptor8 = builder0.requestInterceptor;
        retrofit.RestAdapter.Log log9 = retrofit.RestAdapter.Log.NONE;
        log9.log("hi!");
        log9.log("hi!");
        builder0.log = log9;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider16 = builder15.clientProvider;
        java.util.concurrent.Executor executor17 = null;
        builder15.callbackExecutor = executor17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.Server server22 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder23 = builder19.setServer(server22);
        java.lang.String str24 = server22.getUrl();
        retrofit.RestAdapter.Builder builder25 = builder15.setServer(server22);
        builder15.ensureSaneDefaults();
        retrofit.Server server27 = null;
        retrofit.client.Client.Provider provider28 = null;
        java.util.concurrent.Executor executor29 = null;
        java.util.concurrent.Executor executor30 = null;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        retrofit.converter.Converter converter32 = null;
        retrofit.Profiler profiler33 = null;
        retrofit.ErrorHandler errorHandler34 = null;
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        log35.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter(server27, provider28, executor29, executor30, requestInterceptor31, converter32, profiler33, errorHandler34, log35, logLevel38);
        retrofit.RestAdapter.RestHandler restHandler40 = restAdapter39.new RestHandler();
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        restAdapter39.log = log41;
        retrofit.RestAdapter.Builder builder43 = builder15.setLog(log41);
        retrofit.RestAdapter.LogLevel logLevel44 = builder15.logLevel;
        boolean boolean45 = logLevel44.log();
        retrofit.RestAdapter.Builder builder46 = builder0.setLogLevel(logLevel44);
        retrofit.ErrorHandler errorHandler47 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder49 = builder0.setServer("default");
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertNotNull(log9);
        org.junit.Assert.assertNull(provider16);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(errorHandler47);
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test04576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04576");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter3 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler4 = restAdapter3.errorHandler;
        retrofit.Server server7 = new retrofit.Server("", "");
        restAdapter3.server = server7;
        restAdapter0.server = server7;
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter0.logLevel;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        restAdapter0.requestInterceptor = requestInterceptor11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler14 = builder13.errorHandler;
        retrofit.ErrorHandler errorHandler15 = builder13.errorHandler;
        java.util.concurrent.Executor executor16 = builder13.callbackExecutor;
        retrofit.Profiler profiler17 = builder13.profiler;
        builder13.ensureSaneDefaults();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider21 = builder20.clientProvider;
        java.util.concurrent.Executor executor22 = null;
        builder20.callbackExecutor = executor22;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.Server server27 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder28 = builder24.setServer(server27);
        java.lang.String str29 = server27.getUrl();
        retrofit.RestAdapter.Builder builder30 = builder20.setServer(server27);
        builder20.ensureSaneDefaults();
        retrofit.Server server32 = null;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        log40.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log40, logLevel43);
        retrofit.RestAdapter.RestHandler restHandler45 = restAdapter44.new RestHandler();
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        restAdapter44.log = log46;
        retrofit.RestAdapter.Builder builder48 = builder20.setLog(log46);
        retrofit.RestAdapter.Builder builder50 = builder20.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor51 = builder20.requestInterceptor;
        retrofit.RestAdapter.Builder builder52 = builder13.setRequestInterceptor(requestInterceptor51);
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler54 = builder53.errorHandler;
        retrofit.ErrorHandler errorHandler55 = builder53.errorHandler;
        retrofit.converter.Converter converter56 = null;
        builder53.converter = converter56;
        retrofit.RequestInterceptor requestInterceptor58 = null;
        builder53.requestInterceptor = requestInterceptor58;
        retrofit.client.Client.Provider provider60 = builder53.clientProvider;
        builder53.ensureSaneDefaults();
        retrofit.client.Client.Provider provider62 = builder53.clientProvider;
        builder52.clientProvider = provider62;
        restAdapter0.clientProvider = provider62;
        retrofit.RestAdapter.RestHandler restHandler65 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel66 = restAdapter0.getLogLevel();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(errorHandler4);
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(profiler17);
        org.junit.Assert.assertNull(provider21);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(requestInterceptor51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(errorHandler54);
        org.junit.Assert.assertNull(errorHandler55);
        org.junit.Assert.assertNull(provider60);
        org.junit.Assert.assertNotNull(provider62);
        org.junit.Assert.assertNull(logLevel66);
    }

    @Test
    public void test04577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04577");
        retrofit.client.Header[] headerArray14 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList15 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList15, headerArray14);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList15, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList15, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList15, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("default", "hi!", (java.util.List<retrofit.client.Header>) headerList15, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList15, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList15, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList15, typedOutput29);
        org.junit.Assert.assertNotNull(headerArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test04578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04578");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        restAdapter5.log = log15;
        retrofit.RestAdapter.Builder builder17 = builder4.setLog(log15);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder19 = builder4.setLogLevel(logLevel18);
        retrofit.Profiler profiler20 = null;
        builder19.profiler = profiler20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.Server server25 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder26 = builder22.setServer(server25);
        retrofit.RestAdapter.LogLevel logLevel27 = builder26.logLevel;
        retrofit.RestAdapter.Builder builder28 = builder19.setLogLevel(logLevel27);
        java.util.concurrent.Executor executor29 = builder28.callbackExecutor;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.Server server33 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder34 = builder30.setServer(server33);
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor36 = restAdapter35.callbackExecutor;
        java.util.concurrent.Executor executor37 = restAdapter35.callbackExecutor;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler39 = restAdapter38.errorHandler;
        retrofit.Server server42 = new retrofit.Server("", "");
        restAdapter38.server = server42;
        restAdapter35.server = server42;
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        restAdapter35.log = log45;
        retrofit.RestAdapter.Builder builder47 = builder34.setLog(log45);
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder49 = builder34.setLogLevel(logLevel48);
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler51 = builder50.errorHandler;
        retrofit.ErrorHandler errorHandler52 = builder50.errorHandler;
        retrofit.Profiler profiler53 = builder50.profiler;
        retrofit.RestAdapter.Log log54 = builder50.log;
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.FULL;
        builder50.logLevel = logLevel55;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.Server server60 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder61 = builder57.setServer(server60);
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor63 = restAdapter62.callbackExecutor;
        java.util.concurrent.Executor executor64 = restAdapter62.callbackExecutor;
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler66 = restAdapter65.errorHandler;
        retrofit.Server server69 = new retrofit.Server("", "");
        restAdapter65.server = server69;
        restAdapter62.server = server69;
        retrofit.RestAdapter.Log log72 = retrofit.RestAdapter.Log.NONE;
        restAdapter62.log = log72;
        retrofit.RestAdapter.Builder builder74 = builder61.setLog(log72);
        retrofit.RestAdapter.LogLevel logLevel75 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder76 = builder61.setLogLevel(logLevel75);
        retrofit.Profiler profiler77 = null;
        builder76.profiler = profiler77;
        retrofit.converter.Converter converter79 = null;
        builder76.converter = converter79;
        retrofit.ErrorHandler errorHandler81 = null;
        builder76.errorHandler = errorHandler81;
        retrofit.RestAdapter restAdapter83 = builder76.build();
        retrofit.ErrorHandler errorHandler84 = builder76.errorHandler;
        retrofit.RestAdapter.Builder builder85 = builder50.setErrorHandler(errorHandler84);
        builder34.errorHandler = errorHandler84;
        builder28.errorHandler = errorHandler84;
        retrofit.RequestInterceptor requestInterceptor88 = builder28.requestInterceptor;
        retrofit.RestAdapter restAdapter89 = builder28.build();
        retrofit.converter.Converter converter90 = null;
        restAdapter89.converter = converter90;
        retrofit.RestAdapter.RestHandler restHandler92 = restAdapter89.new RestHandler();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(executor36);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(errorHandler51);
        org.junit.Assert.assertNull(errorHandler52);
        org.junit.Assert.assertNull(profiler53);
        org.junit.Assert.assertNull(log54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(executor63);
        org.junit.Assert.assertNull(executor64);
        org.junit.Assert.assertNull(errorHandler66);
        org.junit.Assert.assertNotNull(log72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(restAdapter83);
        org.junit.Assert.assertNotNull(errorHandler84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNull(requestInterceptor88);
        org.junit.Assert.assertNotNull(restAdapter89);
    }

    @Test
    public void test04579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04579");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = null;
        restAdapter0.httpExecutor = executor2;
        retrofit.RestAdapter.RestHandler restHandler4 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter0.logLevel;
        retrofit.ErrorHandler errorHandler6 = null;
        restAdapter0.errorHandler = errorHandler6;
        retrofit.Server server8 = restAdapter0.server;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler10 = null;
        builder9.errorHandler = errorHandler10;
        retrofit.ErrorHandler errorHandler12 = builder9.errorHandler;
        retrofit.RestAdapter.Builder builder14 = builder9.setServer("hi!");
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler16 = builder15.errorHandler;
        retrofit.ErrorHandler errorHandler17 = builder15.errorHandler;
        retrofit.Profiler profiler18 = builder15.profiler;
        retrofit.RestAdapter.Log log19 = builder15.log;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.FULL;
        builder15.logLevel = logLevel20;
        retrofit.RestAdapter.Builder builder22 = builder14.setLogLevel(logLevel20);
        retrofit.Server server25 = new retrofit.Server("hi!", "default");
        retrofit.RestAdapter.Builder builder26 = builder14.setServer(server25);
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler28 = builder27.errorHandler;
        retrofit.client.Client.Provider provider29 = null;
        builder27.clientProvider = provider29;
        retrofit.Server server33 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder34 = builder27.setServer(server33);
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor36 = restAdapter35.callbackExecutor;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor38 = restAdapter37.callbackExecutor;
        java.util.concurrent.Executor executor39 = restAdapter37.callbackExecutor;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler41 = restAdapter40.errorHandler;
        retrofit.Server server44 = new retrofit.Server("", "");
        restAdapter40.server = server44;
        restAdapter37.server = server44;
        restAdapter35.server = server44;
        retrofit.Profiler profiler48 = restAdapter35.profiler;
        retrofit.ErrorHandler errorHandler49 = null;
        restAdapter35.errorHandler = errorHandler49;
        retrofit.Profiler profiler51 = null;
        restAdapter35.profiler = profiler51;
        retrofit.RestAdapter.RestHandler restHandler53 = restAdapter35.new RestHandler();
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.Server server57 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder58 = builder54.setServer(server57);
        retrofit.converter.Converter converter59 = builder54.converter;
        retrofit.RequestInterceptor requestInterceptor60 = builder54.requestInterceptor;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider62 = builder61.clientProvider;
        java.util.concurrent.Executor executor63 = null;
        builder61.callbackExecutor = executor63;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.Server server68 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder69 = builder65.setServer(server68);
        java.lang.String str70 = server68.getUrl();
        retrofit.RestAdapter.Builder builder71 = builder61.setServer(server68);
        builder61.ensureSaneDefaults();
        retrofit.Server server73 = null;
        retrofit.client.Client.Provider provider74 = null;
        java.util.concurrent.Executor executor75 = null;
        java.util.concurrent.Executor executor76 = null;
        retrofit.RequestInterceptor requestInterceptor77 = null;
        retrofit.converter.Converter converter78 = null;
        retrofit.Profiler profiler79 = null;
        retrofit.ErrorHandler errorHandler80 = null;
        retrofit.RestAdapter.Log log81 = retrofit.RestAdapter.Log.NONE;
        log81.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel84 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter85 = new retrofit.RestAdapter(server73, provider74, executor75, executor76, requestInterceptor77, converter78, profiler79, errorHandler80, log81, logLevel84);
        retrofit.RestAdapter.RestHandler restHandler86 = restAdapter85.new RestHandler();
        retrofit.RestAdapter.Log log87 = retrofit.RestAdapter.Log.NONE;
        restAdapter85.log = log87;
        retrofit.RestAdapter.Builder builder89 = builder61.setLog(log87);
        retrofit.RestAdapter.Builder builder91 = builder61.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor92 = builder61.requestInterceptor;
        builder54.requestInterceptor = requestInterceptor92;
        restAdapter35.requestInterceptor = requestInterceptor92;
        builder27.requestInterceptor = requestInterceptor92;
        builder14.requestInterceptor = requestInterceptor92;
        restAdapter0.requestInterceptor = requestInterceptor92;
        retrofit.RestAdapter.RestHandler restHandler98 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel99 = restAdapter0.logLevel;
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(server8);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(profiler18);
        org.junit.Assert.assertNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(executor36);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNull(errorHandler41);
        org.junit.Assert.assertNull(profiler48);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(converter59);
        org.junit.Assert.assertNull(requestInterceptor60);
        org.junit.Assert.assertNull(provider62);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hi!" + "'", str70, "hi!");
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(log81);
        org.junit.Assert.assertTrue("'" + logLevel84 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel84.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log87);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(requestInterceptor92);
        org.junit.Assert.assertNull(logLevel99);
    }

    @Test
    public void test04580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04580");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter3 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler4 = restAdapter3.errorHandler;
        retrofit.Server server7 = new retrofit.Server("", "");
        restAdapter3.server = server7;
        restAdapter0.server = server7;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.Server server14 = new retrofit.Server("", "");
        restAdapter10.server = server14;
        restAdapter0.server = server14;
        retrofit.RestAdapter.Log log17 = restAdapter0.log;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor19 = restAdapter18.callbackExecutor;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor21 = restAdapter20.callbackExecutor;
        java.util.concurrent.Executor executor22 = restAdapter20.callbackExecutor;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler24 = restAdapter23.errorHandler;
        retrofit.Server server27 = new retrofit.Server("", "");
        restAdapter23.server = server27;
        restAdapter20.server = server27;
        restAdapter18.server = server27;
        retrofit.Profiler profiler31 = restAdapter18.profiler;
        retrofit.ErrorHandler errorHandler32 = null;
        restAdapter18.errorHandler = errorHandler32;
        retrofit.Profiler profiler34 = null;
        restAdapter18.profiler = profiler34;
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter18.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel37 = restAdapter18.getLogLevel();
        retrofit.client.Client.Provider provider38 = null;
        restAdapter18.clientProvider = provider38;
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean41 = logLevel40.log();
        restAdapter18.logLevel = logLevel40;
        retrofit.RestAdapter.Log log43 = restAdapter18.log;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler45 = builder44.errorHandler;
        retrofit.ErrorHandler errorHandler46 = builder44.errorHandler;
        retrofit.RestAdapter.Log log47 = null;
        builder44.log = log47;
        retrofit.RequestInterceptor requestInterceptor49 = null;
        builder44.requestInterceptor = requestInterceptor49;
        retrofit.client.Client.Provider provider51 = null;
        builder44.clientProvider = provider51;
        builder44.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.Server server57 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder58 = builder54.setServer(server57);
        retrofit.Server server59 = builder54.server;
        java.lang.String str60 = server59.getName();
        builder44.server = server59;
        restAdapter18.server = server59;
        restAdapter0.server = server59;
        retrofit.client.Client.Provider provider64 = restAdapter0.clientProvider;
        retrofit.RestAdapter.Log log65 = restAdapter0.log;
        retrofit.RestAdapter.RestHandler restHandler66 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(errorHandler4);
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(log17);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNull(profiler31);
        org.junit.Assert.assertNull(logLevel36);
        org.junit.Assert.assertNull(logLevel37);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(log43);
        org.junit.Assert.assertNull(errorHandler45);
        org.junit.Assert.assertNull(errorHandler46);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(server59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertNull(provider64);
        org.junit.Assert.assertNull(log65);
    }

    @Test
    public void test04581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04581");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.Server server5 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder6 = builder2.setServer(server5);
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor8 = restAdapter7.callbackExecutor;
        java.util.concurrent.Executor executor9 = restAdapter7.callbackExecutor;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.Server server14 = new retrofit.Server("", "");
        restAdapter10.server = server14;
        restAdapter7.server = server14;
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        restAdapter7.log = log17;
        retrofit.RestAdapter.Builder builder19 = builder6.setLog(log17);
        retrofit.RestAdapter.Builder builder20 = builder0.setLog(log17);
        retrofit.RestAdapter.Log log21 = builder20.log;
        retrofit.Profiler profiler22 = null;
        builder20.profiler = profiler22;
        retrofit.Profiler profiler24 = builder20.profiler;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler26 = builder25.errorHandler;
        retrofit.client.Client.Provider provider27 = null;
        builder25.clientProvider = provider27;
        retrofit.Server server31 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder32 = builder25.setServer(server31);
        retrofit.Server server35 = new retrofit.Server("", "");
        builder32.server = server35;
        builder32.ensureSaneDefaults();
        retrofit.converter.Converter converter38 = builder32.converter;
        retrofit.RestAdapter.Log log39 = builder32.log;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor41 = restAdapter40.callbackExecutor;
        java.util.concurrent.Executor executor42 = restAdapter40.callbackExecutor;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler44 = restAdapter43.errorHandler;
        retrofit.Server server47 = new retrofit.Server("", "");
        restAdapter43.server = server47;
        restAdapter40.server = server47;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler51 = restAdapter50.errorHandler;
        retrofit.Server server54 = new retrofit.Server("", "");
        restAdapter50.server = server54;
        restAdapter40.server = server54;
        retrofit.RestAdapter.Log log57 = restAdapter40.log;
        retrofit.Profiler profiler58 = restAdapter40.profiler;
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.Server server62 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder63 = builder59.setServer(server62);
        java.lang.String str64 = server62.getUrl();
        restAdapter40.server = server62;
        retrofit.RestAdapter.Builder builder66 = builder32.setServer(server62);
        java.lang.String str67 = server62.getName();
        retrofit.RestAdapter.Builder builder68 = builder20.setServer(server62);
        retrofit.Profiler profiler69 = builder68.profiler;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertNull(profiler24);
        org.junit.Assert.assertNull(errorHandler26);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(converter38);
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertNull(executor41);
        org.junit.Assert.assertNull(executor42);
        org.junit.Assert.assertNull(errorHandler44);
        org.junit.Assert.assertNull(errorHandler51);
        org.junit.Assert.assertNull(log57);
        org.junit.Assert.assertNull(profiler58);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hi!" + "'", str64, "hi!");
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hi!" + "'", str67, "hi!");
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNull(profiler69);
    }

    @Test
    public void test04582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04582");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        restAdapter12.log = log14;
        retrofit.converter.Converter converter16 = null;
        restAdapter12.converter = converter16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter12.getLogLevel();
        retrofit.ErrorHandler errorHandler19 = restAdapter12.errorHandler;
        retrofit.Profiler profiler20 = restAdapter12.profiler;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler22 = null;
        builder21.errorHandler = errorHandler22;
        retrofit.ErrorHandler errorHandler24 = builder21.errorHandler;
        retrofit.RestAdapter.Builder builder26 = builder21.setServer("hi!");
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler28 = builder27.errorHandler;
        retrofit.ErrorHandler errorHandler29 = builder27.errorHandler;
        retrofit.Profiler profiler30 = builder27.profiler;
        retrofit.RestAdapter.Log log31 = builder27.log;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.FULL;
        builder27.logLevel = logLevel32;
        retrofit.RestAdapter.Builder builder34 = builder26.setLogLevel(logLevel32);
        retrofit.Server server35 = null;
        retrofit.client.Client.Provider provider36 = null;
        java.util.concurrent.Executor executor37 = null;
        java.util.concurrent.Executor executor38 = null;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        retrofit.converter.Converter converter40 = null;
        retrofit.Profiler profiler41 = null;
        retrofit.ErrorHandler errorHandler42 = null;
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        log43.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter(server35, provider36, executor37, executor38, requestInterceptor39, converter40, profiler41, errorHandler42, log43, logLevel46);
        log43.log("");
        retrofit.RestAdapter.Builder builder50 = builder34.setLog(log43);
        restAdapter12.log = log43;
        retrofit.ErrorHandler errorHandler52 = restAdapter12.errorHandler;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler54 = builder53.errorHandler;
        retrofit.Server server57 = new retrofit.Server("", "");
        builder53.server = server57;
        java.util.concurrent.Executor executor59 = builder53.callbackExecutor;
        retrofit.converter.Converter converter60 = null;
        builder53.converter = converter60;
        retrofit.RestAdapter.Log log62 = builder53.log;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        retrofit.Server server66 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder67 = builder63.setServer(server66);
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor69 = restAdapter68.callbackExecutor;
        java.util.concurrent.Executor executor70 = restAdapter68.callbackExecutor;
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler72 = restAdapter71.errorHandler;
        retrofit.Server server75 = new retrofit.Server("", "");
        restAdapter71.server = server75;
        restAdapter68.server = server75;
        retrofit.RestAdapter.Log log78 = retrofit.RestAdapter.Log.NONE;
        restAdapter68.log = log78;
        retrofit.RestAdapter.Builder builder80 = builder67.setLog(log78);
        retrofit.RequestInterceptor requestInterceptor81 = builder67.requestInterceptor;
        retrofit.converter.Converter converter82 = builder67.converter;
        retrofit.RestAdapter restAdapter83 = builder67.build();
        retrofit.RestAdapter.RestHandler restHandler84 = restAdapter83.new RestHandler();
        java.util.concurrent.Executor executor85 = restAdapter83.callbackExecutor;
        builder53.callbackExecutor = executor85;
        restAdapter12.httpExecutor = executor85;
        retrofit.Profiler profiler88 = restAdapter12.profiler;
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(profiler20);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNull(profiler30);
        org.junit.Assert.assertNull(log31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(errorHandler52);
        org.junit.Assert.assertNull(errorHandler54);
        org.junit.Assert.assertNull(executor59);
        org.junit.Assert.assertNull(log62);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNull(executor69);
        org.junit.Assert.assertNull(executor70);
        org.junit.Assert.assertNull(errorHandler72);
        org.junit.Assert.assertNotNull(log78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNull(requestInterceptor81);
        org.junit.Assert.assertNull(converter82);
        org.junit.Assert.assertNotNull(restAdapter83);
        org.junit.Assert.assertNotNull(executor85);
        org.junit.Assert.assertNull(profiler88);
    }

    @Test
    public void test04583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04583");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server6 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder7 = builder0.setServer(server6);
        retrofit.converter.Converter converter8 = null;
        builder7.converter = converter8;
        retrofit.RestAdapter restAdapter10 = builder7.build();
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler12 = builder11.errorHandler;
        retrofit.ErrorHandler errorHandler13 = builder11.errorHandler;
        retrofit.Profiler profiler14 = builder11.profiler;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor16 = restAdapter15.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter15.new RestHandler();
        retrofit.Server server20 = new retrofit.Server("hi!", "hi!");
        restAdapter15.server = server20;
        retrofit.RestAdapter.Builder builder22 = builder11.setServer(server20);
        retrofit.converter.Converter converter23 = null;
        builder22.converter = converter23;
        builder22.ensureSaneDefaults();
        retrofit.RestAdapter.Log log26 = null;
        builder22.log = log26;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler29 = builder28.errorHandler;
        retrofit.ErrorHandler errorHandler30 = builder28.errorHandler;
        retrofit.RestAdapter.Log log31 = null;
        builder28.log = log31;
        retrofit.Server server35 = new retrofit.Server("hi!", "hi!");
        builder28.server = server35;
        retrofit.client.Client.Provider provider37 = null;
        builder28.clientProvider = provider37;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor40 = restAdapter39.callbackExecutor;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor42 = restAdapter41.callbackExecutor;
        java.util.concurrent.Executor executor43 = restAdapter41.callbackExecutor;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler45 = restAdapter44.errorHandler;
        retrofit.Server server48 = new retrofit.Server("", "");
        restAdapter44.server = server48;
        restAdapter41.server = server48;
        restAdapter39.server = server48;
        retrofit.Profiler profiler52 = restAdapter39.profiler;
        retrofit.ErrorHandler errorHandler53 = null;
        restAdapter39.errorHandler = errorHandler53;
        retrofit.RequestInterceptor requestInterceptor55 = restAdapter39.requestInterceptor;
        retrofit.RestAdapter.RestHandler restHandler56 = restAdapter39.new RestHandler();
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler58 = builder57.errorHandler;
        retrofit.client.Client.Provider provider59 = null;
        builder57.clientProvider = provider59;
        retrofit.Server server63 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder64 = builder57.setServer(server63);
        retrofit.converter.Converter converter65 = null;
        builder64.converter = converter65;
        retrofit.RestAdapter restAdapter67 = builder64.build();
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler69 = builder68.errorHandler;
        java.util.concurrent.Executor executor70 = null;
        builder68.callbackExecutor = executor70;
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider73 = builder72.clientProvider;
        java.util.concurrent.Executor executor74 = null;
        builder72.callbackExecutor = executor74;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        retrofit.Server server79 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder80 = builder76.setServer(server79);
        java.lang.String str81 = server79.getUrl();
        retrofit.RestAdapter.Builder builder82 = builder72.setServer(server79);
        retrofit.RestAdapter.Builder builder83 = builder68.setServer(server79);
        restAdapter67.server = server79;
        java.util.concurrent.Executor executor85 = restAdapter67.httpExecutor;
        restAdapter39.httpExecutor = executor85;
        builder28.httpExecutor = executor85;
        builder22.callbackExecutor = executor85;
        retrofit.RestAdapter.Log log89 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder90 = builder22.setLog(log89);
        restAdapter10.log = log89;
        retrofit.RestAdapter.RestHandler restHandler92 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler93 = restAdapter10.new RestHandler();
        retrofit.Server server94 = null;
        restAdapter10.server = server94;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(restAdapter10);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(profiler14);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNull(errorHandler30);
        org.junit.Assert.assertNull(executor40);
        org.junit.Assert.assertNull(executor42);
        org.junit.Assert.assertNull(executor43);
        org.junit.Assert.assertNull(errorHandler45);
        org.junit.Assert.assertNull(profiler52);
        org.junit.Assert.assertNull(requestInterceptor55);
        org.junit.Assert.assertNull(errorHandler58);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(restAdapter67);
        org.junit.Assert.assertNull(errorHandler69);
        org.junit.Assert.assertNull(provider73);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "hi!" + "'", str81, "hi!");
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(executor85);
        org.junit.Assert.assertNotNull(log89);
        org.junit.Assert.assertNotNull(builder90);
    }

    @Test
    public void test04584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04584");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = null;
        restAdapter0.requestInterceptor = requestInterceptor1;
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter0.new RestHandler();
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor5 = restAdapter4.callbackExecutor;
        retrofit.RestAdapter restAdapter6 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor7 = restAdapter6.callbackExecutor;
        java.util.concurrent.Executor executor8 = restAdapter6.callbackExecutor;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler10 = restAdapter9.errorHandler;
        retrofit.Server server13 = new retrofit.Server("", "");
        restAdapter9.server = server13;
        restAdapter6.server = server13;
        restAdapter4.server = server13;
        retrofit.Profiler profiler17 = restAdapter4.profiler;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter4.errorHandler = errorHandler18;
        retrofit.Profiler profiler20 = null;
        restAdapter4.profiler = profiler20;
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter4.getLogLevel();
        retrofit.ErrorHandler errorHandler24 = null;
        restAdapter4.errorHandler = errorHandler24;
        retrofit.client.Client.Provider provider26 = null;
        restAdapter4.clientProvider = provider26;
        retrofit.ErrorHandler errorHandler28 = restAdapter4.errorHandler;
        retrofit.Server server29 = restAdapter4.server;
        java.lang.String str30 = server29.getName();
        restAdapter0.server = server29;
        retrofit.Server server32 = restAdapter0.server;
        retrofit.RestAdapter.RestHandler restHandler33 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler34 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel35 = restAdapter0.logLevel;
        retrofit.client.Client.Provider provider36 = restAdapter0.clientProvider;
        java.lang.Throwable throwable37 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable37, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNull(profiler17);
        org.junit.Assert.assertNull(logLevel22);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertNotNull(server29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(server32);
        org.junit.Assert.assertNull(logLevel35);
        org.junit.Assert.assertNull(provider36);
    }

    @Test
    public void test04585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04585");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.ErrorHandler errorHandler2 = restAdapter0.errorHandler;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider4 = builder3.clientProvider;
        java.util.concurrent.Executor executor5 = null;
        builder3.callbackExecutor = executor5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.Server server10 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder11 = builder7.setServer(server10);
        java.lang.String str12 = server10.getUrl();
        retrofit.RestAdapter.Builder builder13 = builder3.setServer(server10);
        builder3.ensureSaneDefaults();
        java.util.concurrent.Executor executor15 = builder3.callbackExecutor;
        restAdapter0.httpExecutor = executor15;
        retrofit.Server server17 = restAdapter0.server;
        retrofit.ErrorHandler errorHandler18 = restAdapter0.errorHandler;
        retrofit.Server server19 = null;
        retrofit.client.Client.Provider provider20 = null;
        java.util.concurrent.Executor executor21 = null;
        java.util.concurrent.Executor executor22 = null;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        retrofit.converter.Converter converter24 = null;
        retrofit.Profiler profiler25 = null;
        retrofit.ErrorHandler errorHandler26 = null;
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        log27.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter(server19, provider20, executor21, executor22, requestInterceptor23, converter24, profiler25, errorHandler26, log27, logLevel30);
        retrofit.RequestInterceptor requestInterceptor32 = null;
        restAdapter31.requestInterceptor = requestInterceptor32;
        retrofit.RequestInterceptor requestInterceptor34 = restAdapter31.requestInterceptor;
        java.util.concurrent.Executor executor35 = restAdapter31.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter31.getLogLevel();
        restAdapter0.logLevel = logLevel36;
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(provider4);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(executor15);
        org.junit.Assert.assertNull(server17);
        org.junit.Assert.assertNull(errorHandler18);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(requestInterceptor34);
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test04586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04586");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server6 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder7 = builder0.setServer(server6);
        retrofit.Server server10 = new retrofit.Server("", "");
        builder7.server = server10;
        retrofit.converter.Converter converter12 = null;
        builder7.converter = converter12;
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder16 = builder7.setServer("default");
        retrofit.RestAdapter.Builder builder18 = builder7.setServer("hi!");
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test04587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04587");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        java.util.concurrent.Executor executor4 = null;
        builder0.httpExecutor = executor4;
        retrofit.Profiler profiler6 = null;
        builder0.profiler = profiler6;
        retrofit.RestAdapter.Builder builder9 = builder0.setServer("hi!");
        retrofit.Profiler profiler10 = builder0.profiler;
        java.util.concurrent.Executor executor11 = builder0.httpExecutor;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler13 = builder12.errorHandler;
        java.util.concurrent.Executor executor14 = builder12.callbackExecutor;
        retrofit.RestAdapter.Builder builder16 = builder12.setServer("hi!");
        retrofit.Server server19 = new retrofit.Server("default", "hi!");
        java.lang.String str20 = server19.getUrl();
        retrofit.RestAdapter.Builder builder21 = builder16.setServer(server19);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler23 = builder22.errorHandler;
        retrofit.ErrorHandler errorHandler24 = builder22.errorHandler;
        java.util.concurrent.Executor executor25 = builder22.callbackExecutor;
        java.util.concurrent.Executor executor26 = null;
        builder22.callbackExecutor = executor26;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler29 = builder28.errorHandler;
        retrofit.Server server32 = new retrofit.Server("", "");
        builder28.server = server32;
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        builder28.log = log34;
        retrofit.RestAdapter.LogLevel logLevel36 = builder28.logLevel;
        retrofit.RestAdapter.Builder builder37 = builder22.setLogLevel(logLevel36);
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler39 = builder38.errorHandler;
        retrofit.client.Client.Provider provider40 = null;
        builder38.clientProvider = provider40;
        retrofit.Server server44 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder45 = builder38.setServer(server44);
        retrofit.converter.Converter converter46 = null;
        builder45.converter = converter46;
        retrofit.RestAdapter restAdapter48 = builder45.build();
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler50 = builder49.errorHandler;
        java.util.concurrent.Executor executor51 = null;
        builder49.callbackExecutor = executor51;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider54 = builder53.clientProvider;
        java.util.concurrent.Executor executor55 = null;
        builder53.callbackExecutor = executor55;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.Server server60 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder61 = builder57.setServer(server60);
        java.lang.String str62 = server60.getUrl();
        retrofit.RestAdapter.Builder builder63 = builder53.setServer(server60);
        retrofit.RestAdapter.Builder builder64 = builder49.setServer(server60);
        restAdapter48.server = server60;
        retrofit.client.Client.Provider provider66 = restAdapter48.clientProvider;
        retrofit.RestAdapter.Builder builder67 = builder37.setClient(provider66);
        retrofit.RestAdapter.Builder builder68 = builder21.setClient(provider66);
        retrofit.RestAdapter.Builder builder69 = builder0.setClient(provider66);
        retrofit.ErrorHandler errorHandler70 = builder69.errorHandler;
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler72 = builder71.errorHandler;
        retrofit.ErrorHandler errorHandler73 = builder71.errorHandler;
        retrofit.RestAdapter.Log log74 = null;
        builder71.log = log74;
        retrofit.RestAdapter.LogLevel logLevel76 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean77 = logLevel76.log();
        builder71.logLevel = logLevel76;
        retrofit.ErrorHandler errorHandler79 = builder71.errorHandler;
        retrofit.RestAdapter.Builder builder81 = builder71.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor82 = null;
        builder81.requestInterceptor = requestInterceptor82;
        retrofit.RestAdapter.LogLevel logLevel84 = builder81.logLevel;
        builder69.logLevel = logLevel84;
        retrofit.RestAdapter.LogLevel logLevel86 = builder69.logLevel;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(profiler10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "default" + "'", str20, "default");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(restAdapter48);
        org.junit.Assert.assertNull(errorHandler50);
        org.junit.Assert.assertNull(provider54);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(provider66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNull(errorHandler70);
        org.junit.Assert.assertNull(errorHandler72);
        org.junit.Assert.assertNull(errorHandler73);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(errorHandler79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertTrue("'" + logLevel84 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel84.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel86 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel86.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test04588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04588");
        retrofit.Server server8 = null;
        retrofit.client.Client.Provider provider9 = null;
        java.util.concurrent.Executor executor10 = null;
        java.util.concurrent.Executor executor11 = null;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        retrofit.converter.Converter converter13 = null;
        retrofit.Profiler profiler14 = null;
        retrofit.ErrorHandler errorHandler15 = null;
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        log16.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter(server8, provider9, executor10, executor11, requestInterceptor12, converter13, profiler14, errorHandler15, log16, logLevel19);
        retrofit.RestAdapter.RestHandler restHandler21 = restAdapter20.new RestHandler();
        java.util.concurrent.Executor executor22 = null;
        restAdapter20.callbackExecutor = executor22;
        retrofit.client.Header[] headerArray26 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList27 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList27, headerArray26);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList27, typedOutput29);
        retrofit.client.Request request31 = restAdapter20.logAndReplaceRequest(request30);
        java.util.List<retrofit.client.Header> headerList32 = request30.getHeaders();
        retrofit.mime.TypedOutput typedOutput33 = null;
        retrofit.client.Request request34 = new retrofit.client.Request("hi!", "default", headerList32, typedOutput33);
        retrofit.mime.TypedOutput typedOutput35 = null;
        retrofit.client.Request request36 = new retrofit.client.Request("", "hi!", headerList32, typedOutput35);
        retrofit.mime.TypedOutput typedOutput37 = null;
        retrofit.client.Request request38 = new retrofit.client.Request("default", "hi!", headerList32, typedOutput37);
        retrofit.mime.TypedOutput typedOutput39 = null;
        retrofit.client.Request request40 = new retrofit.client.Request("", "hi!", headerList32, typedOutput39);
        org.junit.Assert.assertNotNull(log16);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(request31);
        org.junit.Assert.assertNotNull(headerList32);
    }

    @Test
    public void test04589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04589");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.Server server6 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder7 = builder3.setServer(server6);
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor9 = restAdapter8.callbackExecutor;
        java.util.concurrent.Executor executor10 = restAdapter8.callbackExecutor;
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler12 = restAdapter11.errorHandler;
        retrofit.Server server15 = new retrofit.Server("", "");
        restAdapter11.server = server15;
        restAdapter8.server = server15;
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        restAdapter8.log = log18;
        retrofit.RestAdapter.Builder builder20 = builder7.setLog(log18);
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder22 = builder7.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler24 = builder23.errorHandler;
        retrofit.client.Client.Provider provider25 = null;
        builder23.clientProvider = provider25;
        retrofit.Server server29 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder30 = builder23.setServer(server29);
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor32 = restAdapter31.callbackExecutor;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor34 = restAdapter33.callbackExecutor;
        java.util.concurrent.Executor executor35 = restAdapter33.callbackExecutor;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler37 = restAdapter36.errorHandler;
        retrofit.Server server40 = new retrofit.Server("", "");
        restAdapter36.server = server40;
        restAdapter33.server = server40;
        restAdapter31.server = server40;
        retrofit.Profiler profiler44 = restAdapter31.profiler;
        retrofit.ErrorHandler errorHandler45 = null;
        restAdapter31.errorHandler = errorHandler45;
        retrofit.Profiler profiler47 = null;
        restAdapter31.profiler = profiler47;
        retrofit.RestAdapter.RestHandler restHandler49 = restAdapter31.new RestHandler();
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.Server server53 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder54 = builder50.setServer(server53);
        retrofit.converter.Converter converter55 = builder50.converter;
        retrofit.RequestInterceptor requestInterceptor56 = builder50.requestInterceptor;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider58 = builder57.clientProvider;
        java.util.concurrent.Executor executor59 = null;
        builder57.callbackExecutor = executor59;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.Server server64 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder65 = builder61.setServer(server64);
        java.lang.String str66 = server64.getUrl();
        retrofit.RestAdapter.Builder builder67 = builder57.setServer(server64);
        builder57.ensureSaneDefaults();
        retrofit.Server server69 = null;
        retrofit.client.Client.Provider provider70 = null;
        java.util.concurrent.Executor executor71 = null;
        java.util.concurrent.Executor executor72 = null;
        retrofit.RequestInterceptor requestInterceptor73 = null;
        retrofit.converter.Converter converter74 = null;
        retrofit.Profiler profiler75 = null;
        retrofit.ErrorHandler errorHandler76 = null;
        retrofit.RestAdapter.Log log77 = retrofit.RestAdapter.Log.NONE;
        log77.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel80 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter81 = new retrofit.RestAdapter(server69, provider70, executor71, executor72, requestInterceptor73, converter74, profiler75, errorHandler76, log77, logLevel80);
        retrofit.RestAdapter.RestHandler restHandler82 = restAdapter81.new RestHandler();
        retrofit.RestAdapter.Log log83 = retrofit.RestAdapter.Log.NONE;
        restAdapter81.log = log83;
        retrofit.RestAdapter.Builder builder85 = builder57.setLog(log83);
        retrofit.RestAdapter.Builder builder87 = builder57.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor88 = builder57.requestInterceptor;
        builder50.requestInterceptor = requestInterceptor88;
        restAdapter31.requestInterceptor = requestInterceptor88;
        builder23.requestInterceptor = requestInterceptor88;
        retrofit.RestAdapter.Builder builder92 = builder22.setRequestInterceptor(requestInterceptor88);
        builder0.requestInterceptor = requestInterceptor88;
        retrofit.ErrorHandler errorHandler94 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder96 = builder0.setServer("default");
        retrofit.converter.Converter converter97 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder98 = builder0.setConverter(converter97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Converter may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNotNull(log18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(executor34);
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNull(profiler44);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(converter55);
        org.junit.Assert.assertNull(requestInterceptor56);
        org.junit.Assert.assertNull(provider58);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hi!" + "'", str66, "hi!");
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(log77);
        org.junit.Assert.assertTrue("'" + logLevel80 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel80.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(requestInterceptor88);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNull(errorHandler94);
        org.junit.Assert.assertNotNull(builder96);
    }

    @Test
    public void test04590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04590");
        retrofit.client.Header[] headerArray12 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList13 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList13, headerArray12);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList13, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList13, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList13, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList13, typedOutput21);
        java.util.List<retrofit.client.Header> headerList23 = request22.getHeaders();
        retrofit.mime.TypedOutput typedOutput24 = null;
        retrofit.client.Request request25 = new retrofit.client.Request("hi!", "hi!", headerList23, typedOutput24);
        java.util.List<retrofit.client.Header> headerList26 = request25.getHeaders();
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("hi!", "", headerList26, typedOutput27);
        org.junit.Assert.assertNotNull(headerArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(headerList23);
        org.junit.Assert.assertNotNull(headerList26);
    }

    @Test
    public void test04591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04591");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.converter.Converter converter13 = restAdapter0.converter;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor15 = restAdapter14.callbackExecutor;
        java.util.concurrent.Executor executor16 = restAdapter14.callbackExecutor;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler18 = restAdapter17.errorHandler;
        retrofit.Server server21 = new retrofit.Server("", "");
        restAdapter17.server = server21;
        restAdapter14.server = server21;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler25 = restAdapter24.errorHandler;
        retrofit.Server server28 = new retrofit.Server("", "");
        restAdapter24.server = server28;
        restAdapter14.server = server28;
        retrofit.client.Client.Provider provider31 = null;
        java.util.concurrent.Executor executor32 = null;
        java.util.concurrent.Executor executor33 = null;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        retrofit.converter.Converter converter35 = null;
        retrofit.Profiler profiler36 = null;
        retrofit.ErrorHandler errorHandler37 = null;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider39 = builder38.clientProvider;
        java.util.concurrent.Executor executor40 = null;
        builder38.callbackExecutor = executor40;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.Server server45 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder46 = builder42.setServer(server45);
        java.lang.String str47 = server45.getUrl();
        retrofit.RestAdapter.Builder builder48 = builder38.setServer(server45);
        builder38.ensureSaneDefaults();
        retrofit.Server server50 = null;
        retrofit.client.Client.Provider provider51 = null;
        java.util.concurrent.Executor executor52 = null;
        java.util.concurrent.Executor executor53 = null;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        retrofit.converter.Converter converter55 = null;
        retrofit.Profiler profiler56 = null;
        retrofit.ErrorHandler errorHandler57 = null;
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        log58.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel61 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter(server50, provider51, executor52, executor53, requestInterceptor54, converter55, profiler56, errorHandler57, log58, logLevel61);
        retrofit.RestAdapter.RestHandler restHandler63 = restAdapter62.new RestHandler();
        retrofit.RestAdapter.Log log64 = retrofit.RestAdapter.Log.NONE;
        restAdapter62.log = log64;
        retrofit.RestAdapter.Builder builder66 = builder38.setLog(log64);
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler68 = builder67.errorHandler;
        retrofit.ErrorHandler errorHandler69 = builder67.errorHandler;
        retrofit.RestAdapter.Log log70 = null;
        builder67.log = log70;
        retrofit.RestAdapter.LogLevel logLevel72 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean73 = logLevel72.log();
        builder67.logLevel = logLevel72;
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter(server28, provider31, executor32, executor33, requestInterceptor34, converter35, profiler36, errorHandler37, log64, logLevel72);
        restAdapter0.log = log64;
        retrofit.RestAdapter.Log log77 = restAdapter0.log;
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler79 = builder78.errorHandler;
        retrofit.ErrorHandler errorHandler80 = builder78.errorHandler;
        retrofit.Profiler profiler81 = builder78.profiler;
        retrofit.RestAdapter restAdapter82 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor83 = restAdapter82.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler84 = restAdapter82.new RestHandler();
        retrofit.Server server87 = new retrofit.Server("hi!", "hi!");
        restAdapter82.server = server87;
        retrofit.RestAdapter.Builder builder89 = builder78.setServer(server87);
        retrofit.converter.Converter converter90 = null;
        builder89.converter = converter90;
        builder89.ensureSaneDefaults();
        retrofit.RestAdapter.Log log93 = null;
        builder89.log = log93;
        retrofit.RequestInterceptor requestInterceptor95 = builder89.requestInterceptor;
        java.util.concurrent.Executor executor96 = builder89.httpExecutor;
        restAdapter0.callbackExecutor = executor96;
        java.util.concurrent.Executor executor98 = restAdapter0.callbackExecutor;
        java.lang.Class<?> wildcardClass99 = restAdapter0.getClass();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(errorHandler18);
        org.junit.Assert.assertNull(errorHandler25);
        org.junit.Assert.assertNull(provider39);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(log58);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(errorHandler68);
        org.junit.Assert.assertNull(errorHandler69);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(log77);
        org.junit.Assert.assertNull(errorHandler79);
        org.junit.Assert.assertNull(errorHandler80);
        org.junit.Assert.assertNull(profiler81);
        org.junit.Assert.assertNull(executor83);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(requestInterceptor95);
        org.junit.Assert.assertNotNull(executor96);
        org.junit.Assert.assertNotNull(executor98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test04592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04592");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.converter.Converter converter5 = builder0.converter;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler8 = builder7.errorHandler;
        retrofit.Server server11 = new retrofit.Server("", "");
        builder7.server = server11;
        retrofit.RestAdapter restAdapter13 = builder7.build();
        retrofit.Server server14 = restAdapter13.server;
        retrofit.RestAdapter.Builder builder15 = builder0.setServer(server14);
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor17 = restAdapter16.callbackExecutor;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor19 = restAdapter18.callbackExecutor;
        java.util.concurrent.Executor executor20 = restAdapter18.callbackExecutor;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler22 = restAdapter21.errorHandler;
        retrofit.Server server25 = new retrofit.Server("", "");
        restAdapter21.server = server25;
        restAdapter18.server = server25;
        restAdapter16.server = server25;
        retrofit.Profiler profiler29 = restAdapter16.profiler;
        retrofit.ErrorHandler errorHandler30 = null;
        restAdapter16.errorHandler = errorHandler30;
        retrofit.Profiler profiler32 = null;
        restAdapter16.profiler = profiler32;
        retrofit.RestAdapter.LogLevel logLevel34 = restAdapter16.getLogLevel();
        retrofit.Profiler profiler35 = restAdapter16.profiler;
        retrofit.Profiler profiler36 = null;
        restAdapter16.profiler = profiler36;
        retrofit.Profiler profiler38 = restAdapter16.profiler;
        retrofit.ErrorHandler errorHandler39 = restAdapter16.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler40 = restAdapter16.new RestHandler();
        retrofit.Server server42 = new retrofit.Server("");
        restAdapter16.server = server42;
        retrofit.RestAdapter.Builder builder44 = builder15.setServer(server42);
        retrofit.RestAdapter.Log log45 = builder15.log;
        retrofit.RestAdapter.Log log46 = builder15.log;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(converter5);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNotNull(restAdapter13);
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNull(profiler29);
        org.junit.Assert.assertNull(logLevel34);
        org.junit.Assert.assertNull(profiler35);
        org.junit.Assert.assertNull(profiler38);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNotNull(log46);
    }

    @Test
    public void test04593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04593");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.Profiler profiler3 = builder0.profiler;
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor5 = restAdapter4.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.Server server9 = new retrofit.Server("hi!", "hi!");
        restAdapter4.server = server9;
        retrofit.RestAdapter.Builder builder11 = builder0.setServer(server9);
        retrofit.converter.Converter converter12 = null;
        builder11.converter = converter12;
        builder11.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter15 = builder11.build();
        retrofit.Profiler profiler16 = builder11.profiler;
        retrofit.converter.Converter converter17 = builder11.converter;
        retrofit.Server server18 = builder11.server;
        retrofit.RestAdapter restAdapter19 = builder11.build();
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(restAdapter15);
        org.junit.Assert.assertNull(profiler16);
        org.junit.Assert.assertNotNull(converter17);
        org.junit.Assert.assertNotNull(server18);
        org.junit.Assert.assertNotNull(restAdapter19);
    }

    @Test
    public void test04594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04594");
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        log14.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel17);
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter18.new RestHandler();
        retrofit.client.Header[] headerArray28 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList29 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList29, headerArray28);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList29, typedOutput31);
        retrofit.mime.TypedOutput typedOutput33 = null;
        retrofit.client.Request request34 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList29, typedOutput33);
        retrofit.mime.TypedOutput typedOutput35 = null;
        retrofit.client.Request request36 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList29, typedOutput35);
        retrofit.mime.TypedOutput typedOutput37 = null;
        retrofit.client.Request request38 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList29, typedOutput37);
        retrofit.mime.TypedOutput typedOutput39 = request38.getBody();
        retrofit.client.Request request40 = restAdapter18.logAndReplaceRequest(request38);
        java.util.List<retrofit.client.Header> headerList41 = request38.getHeaders();
        retrofit.mime.TypedOutput typedOutput42 = null;
        retrofit.client.Request request43 = new retrofit.client.Request("hi!", "", headerList41, typedOutput42);
        retrofit.mime.TypedOutput typedOutput44 = null;
        retrofit.client.Request request45 = new retrofit.client.Request("", "default", headerList41, typedOutput44);
        retrofit.mime.TypedOutput typedOutput46 = null;
        retrofit.client.Request request47 = new retrofit.client.Request("default", "default", headerList41, typedOutput46);
        java.lang.String str48 = request47.getUrl();
        java.lang.String str49 = request47.getUrl();
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(typedOutput39);
        org.junit.Assert.assertNotNull(request40);
        org.junit.Assert.assertNotNull(headerList41);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "default" + "'", str48, "default");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "default" + "'", str49, "default");
    }

    @Test
    public void test04595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04595");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server4 = new retrofit.Server("", "");
        builder0.server = server4;
        java.util.concurrent.Executor executor6 = builder0.callbackExecutor;
        retrofit.converter.Converter converter7 = null;
        builder0.converter = converter7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler10 = builder9.errorHandler;
        retrofit.client.Client.Provider provider11 = null;
        builder9.clientProvider = provider11;
        retrofit.converter.Converter converter13 = builder9.converter;
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder15 = builder9.setLogLevel(logLevel14);
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor17 = restAdapter16.callbackExecutor;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor19 = restAdapter18.callbackExecutor;
        java.util.concurrent.Executor executor20 = restAdapter18.callbackExecutor;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler22 = restAdapter21.errorHandler;
        retrofit.Server server25 = new retrofit.Server("", "");
        restAdapter21.server = server25;
        restAdapter18.server = server25;
        restAdapter16.server = server25;
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler37 = builder36.errorHandler;
        retrofit.Server server40 = new retrofit.Server("", "");
        builder36.server = server40;
        retrofit.client.Client.Provider provider42 = null;
        java.util.concurrent.Executor executor43 = null;
        java.util.concurrent.Executor executor44 = null;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        retrofit.converter.Converter converter46 = null;
        retrofit.Profiler profiler47 = null;
        retrofit.ErrorHandler errorHandler48 = null;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler50 = builder49.errorHandler;
        retrofit.Server server53 = new retrofit.Server("", "");
        builder49.server = server53;
        retrofit.RestAdapter.Log log55 = retrofit.RestAdapter.Log.NONE;
        builder49.log = log55;
        retrofit.Server server57 = null;
        retrofit.client.Client.Provider provider58 = null;
        java.util.concurrent.Executor executor59 = null;
        java.util.concurrent.Executor executor60 = null;
        retrofit.RequestInterceptor requestInterceptor61 = null;
        retrofit.converter.Converter converter62 = null;
        retrofit.Profiler profiler63 = null;
        retrofit.ErrorHandler errorHandler64 = null;
        retrofit.RestAdapter.Log log65 = retrofit.RestAdapter.Log.NONE;
        log65.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel68 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter(server57, provider58, executor59, executor60, requestInterceptor61, converter62, profiler63, errorHandler64, log65, logLevel68);
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter(server40, provider42, executor43, executor44, requestInterceptor45, converter46, profiler47, errorHandler48, log55, logLevel68);
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        retrofit.Server server74 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder75 = builder71.setServer(server74);
        retrofit.RestAdapter restAdapter76 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor77 = restAdapter76.callbackExecutor;
        java.util.concurrent.Executor executor78 = restAdapter76.callbackExecutor;
        retrofit.RestAdapter restAdapter79 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler80 = restAdapter79.errorHandler;
        retrofit.Server server83 = new retrofit.Server("", "");
        restAdapter79.server = server83;
        restAdapter76.server = server83;
        retrofit.RestAdapter.Log log86 = retrofit.RestAdapter.Log.NONE;
        restAdapter76.log = log86;
        retrofit.RestAdapter.Builder builder88 = builder75.setLog(log86);
        retrofit.RestAdapter.LogLevel logLevel89 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder90 = builder75.setLogLevel(logLevel89);
        retrofit.RestAdapter restAdapter91 = new retrofit.RestAdapter(server25, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log55, logLevel89);
        builder9.logLevel = logLevel89;
        retrofit.RestAdapter.Builder builder93 = builder0.setLogLevel(logLevel89);
        retrofit.RestAdapter restAdapter94 = builder0.build();
        java.util.concurrent.Executor executor95 = builder0.httpExecutor;
        retrofit.RestAdapter.Builder builder97 = builder0.setServer("default");
        retrofit.RestAdapter restAdapter98 = builder0.build();
        retrofit.RestAdapter.RestHandler restHandler99 = restAdapter98.new RestHandler();
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNull(errorHandler50);
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertNotNull(log65);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNull(executor77);
        org.junit.Assert.assertNull(executor78);
        org.junit.Assert.assertNull(errorHandler80);
        org.junit.Assert.assertNotNull(log86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertTrue("'" + logLevel89 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel89.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(restAdapter94);
        org.junit.Assert.assertNotNull(executor95);
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertNotNull(restAdapter98);
    }

    @Test
    public void test04596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04596");
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("hi!", "default", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        java.util.List<retrofit.client.Header> headerList13 = request12.getHeaders();
        retrofit.mime.TypedOutput typedOutput14 = null;
        retrofit.client.Request request15 = new retrofit.client.Request("hi!", "", headerList13, typedOutput14);
        retrofit.mime.TypedOutput typedOutput16 = null;
        retrofit.client.Request request17 = new retrofit.client.Request("", "hi!", headerList13, typedOutput16);
        retrofit.mime.TypedOutput typedOutput18 = null;
        retrofit.client.Request request19 = new retrofit.client.Request("", "", headerList13, typedOutput18);
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(headerList13);
    }

    @Test
    public void test04597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04597");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        restAdapter5.log = log15;
        retrofit.RestAdapter.Builder builder17 = builder4.setLog(log15);
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server21 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder22 = builder18.setServer(server21);
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor24 = restAdapter23.callbackExecutor;
        java.util.concurrent.Executor executor25 = restAdapter23.callbackExecutor;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler27 = restAdapter26.errorHandler;
        retrofit.Server server30 = new retrofit.Server("", "");
        restAdapter26.server = server30;
        restAdapter23.server = server30;
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        restAdapter23.log = log33;
        retrofit.RestAdapter.Builder builder35 = builder22.setLog(log33);
        retrofit.converter.Converter converter36 = null;
        builder35.converter = converter36;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler39 = builder38.errorHandler;
        retrofit.ErrorHandler errorHandler40 = builder38.errorHandler;
        retrofit.Profiler profiler41 = builder38.profiler;
        retrofit.RestAdapter.Log log42 = builder38.log;
        retrofit.Server server43 = null;
        retrofit.client.Client.Provider provider44 = null;
        java.util.concurrent.Executor executor45 = null;
        java.util.concurrent.Executor executor46 = null;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        retrofit.converter.Converter converter48 = null;
        retrofit.Profiler profiler49 = null;
        retrofit.ErrorHandler errorHandler50 = null;
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        log51.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter(server43, provider44, executor45, executor46, requestInterceptor47, converter48, profiler49, errorHandler50, log51, logLevel54);
        builder38.log = log51;
        retrofit.RestAdapter.Builder builder57 = builder35.setLog(log51);
        retrofit.RestAdapter.LogLevel logLevel58 = builder35.logLevel;
        retrofit.RestAdapter.Builder builder59 = builder17.setLogLevel(logLevel58);
        retrofit.RestAdapter restAdapter60 = builder17.build();
        retrofit.Profiler profiler61 = restAdapter60.profiler;
        retrofit.Profiler profiler62 = restAdapter60.profiler;
        retrofit.RestAdapter.LogLevel logLevel63 = restAdapter60.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler64 = restAdapter60.new RestHandler();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNull(profiler41);
        org.junit.Assert.assertNull(log42);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(restAdapter60);
        org.junit.Assert.assertNull(profiler61);
        org.junit.Assert.assertNull(profiler62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test04598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04598");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server4 = new retrofit.Server("", "");
        builder0.server = server4;
        retrofit.client.Client.Provider provider6 = null;
        java.util.concurrent.Executor executor7 = null;
        java.util.concurrent.Executor executor8 = null;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        retrofit.converter.Converter converter10 = null;
        retrofit.Profiler profiler11 = null;
        retrofit.ErrorHandler errorHandler12 = null;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler14 = builder13.errorHandler;
        retrofit.Server server17 = new retrofit.Server("", "");
        builder13.server = server17;
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        builder13.log = log19;
        retrofit.Server server21 = null;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        log29.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel32);
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server4, provider6, executor7, executor8, requestInterceptor9, converter10, profiler11, errorHandler12, log19, logLevel32);
        retrofit.ErrorHandler errorHandler35 = null;
        restAdapter34.errorHandler = errorHandler35;
        retrofit.RestAdapter.RestHandler restHandler37 = restAdapter34.new RestHandler();
        retrofit.Profiler profiler38 = restAdapter34.profiler;
        retrofit.ErrorHandler errorHandler39 = restAdapter34.errorHandler;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler38);
        org.junit.Assert.assertNull(errorHandler39);
    }

    @Test
    public void test04599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04599");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.converter.Converter converter4 = builder0.converter;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.Server server7 = builder0.server;
        retrofit.converter.Converter converter8 = builder0.converter;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(server7);
        org.junit.Assert.assertNull(converter8);
    }

    @Test
    public void test04600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04600");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean3 = logLevel2.log();
        restAdapter0.logLevel = logLevel2;
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel6 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler8 = null;
        builder7.errorHandler = errorHandler8;
        retrofit.ErrorHandler errorHandler10 = builder7.errorHandler;
        retrofit.RestAdapter.Builder builder12 = builder7.setServer("hi!");
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider14 = builder13.clientProvider;
        java.util.concurrent.Executor executor15 = null;
        builder13.callbackExecutor = executor15;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.Server server20 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder21 = builder17.setServer(server20);
        java.lang.String str22 = server20.getUrl();
        retrofit.RestAdapter.Builder builder23 = builder13.setServer(server20);
        retrofit.RestAdapter.Builder builder24 = builder12.setServer(server20);
        java.lang.String str25 = server20.getName();
        java.lang.String str26 = server20.getUrl();
        restAdapter0.server = server20;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
    }

    @Test
    public void test04601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04601");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.logLevel;
        retrofit.Profiler profiler2 = restAdapter0.profiler;
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        java.util.concurrent.Executor executor5 = null;
        restAdapter0.httpExecutor = executor5;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNull(logLevel4);
    }

    @Test
    public void test04602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04602");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.client.Header[] headerArray22 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList23 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList23, headerArray22);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList23, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList23, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList23, typedOutput29);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList23, typedOutput31);
        retrofit.mime.TypedOutput typedOutput33 = request32.getBody();
        retrofit.client.Request request34 = restAdapter12.logAndReplaceRequest(request32);
        retrofit.ErrorHandler errorHandler35 = restAdapter12.errorHandler;
        retrofit.converter.Converter converter36 = restAdapter12.converter;
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(typedOutput33);
        org.junit.Assert.assertNotNull(request34);
        org.junit.Assert.assertNull(errorHandler35);
        org.junit.Assert.assertNull(converter36);
    }

    @Test
    public void test04603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04603");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        builder0.requestInterceptor = requestInterceptor5;
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor8 = restAdapter7.callbackExecutor;
        java.util.concurrent.Executor executor9 = restAdapter7.callbackExecutor;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.Server server14 = new retrofit.Server("", "");
        restAdapter10.server = server14;
        restAdapter7.server = server14;
        retrofit.RestAdapter.Builder builder17 = builder0.setServer(server14);
        retrofit.RestAdapter.LogLevel logLevel18 = builder0.logLevel;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler20 = builder19.errorHandler;
        retrofit.Server server23 = new retrofit.Server("", "");
        builder19.server = server23;
        retrofit.client.Client.Provider provider25 = null;
        java.util.concurrent.Executor executor26 = null;
        java.util.concurrent.Executor executor27 = null;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        retrofit.converter.Converter converter29 = null;
        retrofit.Profiler profiler30 = null;
        retrofit.ErrorHandler errorHandler31 = null;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler33 = builder32.errorHandler;
        retrofit.Server server36 = new retrofit.Server("", "");
        builder32.server = server36;
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        builder32.log = log38;
        retrofit.Server server40 = null;
        retrofit.client.Client.Provider provider41 = null;
        java.util.concurrent.Executor executor42 = null;
        java.util.concurrent.Executor executor43 = null;
        retrofit.RequestInterceptor requestInterceptor44 = null;
        retrofit.converter.Converter converter45 = null;
        retrofit.Profiler profiler46 = null;
        retrofit.ErrorHandler errorHandler47 = null;
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        log48.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter(server40, provider41, executor42, executor43, requestInterceptor44, converter45, profiler46, errorHandler47, log48, logLevel51);
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server23, provider25, executor26, executor27, requestInterceptor28, converter29, profiler30, errorHandler31, log38, logLevel51);
        retrofit.RestAdapter.Builder builder54 = builder0.setServer(server23);
        retrofit.Server server56 = new retrofit.Server("hi!");
        java.lang.String str57 = server56.getUrl();
        retrofit.RestAdapter.Builder builder58 = builder0.setServer(server56);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder60 = builder0.setServer("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be blank.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNull(errorHandler33);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertNotNull(builder58);
    }

    @Test
    public void test04604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04604");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        restAdapter12.log = log14;
        retrofit.converter.Converter converter16 = null;
        restAdapter12.converter = converter16;
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter12.new RestHandler();
        retrofit.Profiler profiler19 = null;
        restAdapter12.profiler = profiler19;
        retrofit.Profiler profiler21 = null;
        restAdapter12.profiler = profiler21;
        retrofit.Server server23 = restAdapter12.server;
        retrofit.Server server24 = null;
        retrofit.client.Client.Provider provider25 = null;
        java.util.concurrent.Executor executor26 = null;
        java.util.concurrent.Executor executor27 = null;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        retrofit.converter.Converter converter29 = null;
        retrofit.Profiler profiler30 = null;
        retrofit.ErrorHandler errorHandler31 = null;
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        log32.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter(server24, provider25, executor26, executor27, requestInterceptor28, converter29, profiler30, errorHandler31, log32, logLevel35);
        retrofit.RestAdapter.RestHandler restHandler37 = restAdapter36.new RestHandler();
        retrofit.client.Header[] headerArray46 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList47 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList47, headerArray46);
        retrofit.mime.TypedOutput typedOutput49 = null;
        retrofit.client.Request request50 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList47, typedOutput49);
        retrofit.mime.TypedOutput typedOutput51 = null;
        retrofit.client.Request request52 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList47, typedOutput51);
        retrofit.mime.TypedOutput typedOutput53 = null;
        retrofit.client.Request request54 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList47, typedOutput53);
        retrofit.mime.TypedOutput typedOutput55 = null;
        retrofit.client.Request request56 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList47, typedOutput55);
        retrofit.mime.TypedOutput typedOutput57 = request56.getBody();
        retrofit.client.Request request58 = restAdapter36.logAndReplaceRequest(request56);
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor60 = restAdapter59.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel61 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean62 = logLevel61.log();
        restAdapter59.logLevel = logLevel61;
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler65 = builder64.errorHandler;
        retrofit.client.Client.Provider provider66 = null;
        builder64.clientProvider = provider66;
        retrofit.Server server70 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder71 = builder64.setServer(server70);
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler73 = builder72.errorHandler;
        retrofit.client.Client.Provider provider74 = null;
        builder72.clientProvider = provider74;
        retrofit.converter.Converter converter76 = builder72.converter;
        retrofit.RestAdapter.LogLevel logLevel77 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder78 = builder72.setLogLevel(logLevel77);
        builder64.logLevel = logLevel77;
        boolean boolean80 = logLevel77.log();
        restAdapter59.logLevel = logLevel77;
        restAdapter36.logLevel = logLevel77;
        restAdapter12.setLogLevel(logLevel77);
        retrofit.RestAdapter.RestHandler restHandler84 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler85 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Builder builder86 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler87 = builder86.errorHandler;
        retrofit.client.Client.Provider provider88 = null;
        builder86.clientProvider = provider88;
        retrofit.Server server92 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder93 = builder86.setServer(server92);
        retrofit.Server server96 = new retrofit.Server("", "");
        builder93.server = server96;
        restAdapter12.server = server96;
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNull(server23);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(typedOutput57);
        org.junit.Assert.assertNotNull(request58);
        org.junit.Assert.assertNull(executor60);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(errorHandler65);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNull(errorHandler73);
        org.junit.Assert.assertNull(converter76);
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(errorHandler87);
        org.junit.Assert.assertNotNull(builder93);
    }

    @Test
    public void test04605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04605");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        restAdapter5.log = log15;
        retrofit.RestAdapter.Builder builder17 = builder4.setLog(log15);
        retrofit.RequestInterceptor requestInterceptor18 = builder4.requestInterceptor;
        retrofit.converter.Converter converter19 = builder4.converter;
        retrofit.Profiler profiler20 = null;
        builder4.profiler = profiler20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider23 = builder22.clientProvider;
        java.util.concurrent.Executor executor24 = null;
        builder22.callbackExecutor = executor24;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.Server server29 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder30 = builder26.setServer(server29);
        java.lang.String str31 = server29.getUrl();
        retrofit.RestAdapter.Builder builder32 = builder22.setServer(server29);
        builder22.ensureSaneDefaults();
        retrofit.Server server34 = null;
        retrofit.client.Client.Provider provider35 = null;
        java.util.concurrent.Executor executor36 = null;
        java.util.concurrent.Executor executor37 = null;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        retrofit.converter.Converter converter39 = null;
        retrofit.Profiler profiler40 = null;
        retrofit.ErrorHandler errorHandler41 = null;
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        log42.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter(server34, provider35, executor36, executor37, requestInterceptor38, converter39, profiler40, errorHandler41, log42, logLevel45);
        retrofit.RestAdapter.RestHandler restHandler47 = restAdapter46.new RestHandler();
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        restAdapter46.log = log48;
        retrofit.RestAdapter.Builder builder50 = builder22.setLog(log48);
        retrofit.RestAdapter.Builder builder52 = builder22.setServer("hi!");
        retrofit.Profiler profiler53 = null;
        builder52.profiler = profiler53;
        retrofit.RestAdapter restAdapter55 = builder52.build();
        retrofit.RequestInterceptor requestInterceptor56 = builder52.requestInterceptor;
        builder4.requestInterceptor = requestInterceptor56;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(requestInterceptor18);
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNull(provider23);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(restAdapter55);
        org.junit.Assert.assertNotNull(requestInterceptor56);
    }

    @Test
    public void test04606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04606");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.ErrorHandler errorHandler3 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler7 = builder6.errorHandler;
        retrofit.ErrorHandler errorHandler8 = builder6.errorHandler;
        retrofit.Profiler profiler9 = builder6.profiler;
        retrofit.RestAdapter.Log log10 = builder6.log;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.FULL;
        builder6.logLevel = logLevel11;
        retrofit.RestAdapter.Builder builder13 = builder5.setLogLevel(logLevel11);
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        log22.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel25);
        log22.log("");
        retrofit.RestAdapter.Builder builder29 = builder13.setLog(log22);
        retrofit.Profiler profiler30 = null;
        builder29.profiler = profiler30;
        retrofit.RestAdapter.LogLevel logLevel32 = null;
        builder29.logLevel = logLevel32;
        retrofit.RestAdapter.Builder builder35 = builder29.setServer("hi!");
        retrofit.RestAdapter restAdapter36 = builder35.build();
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNull(profiler9);
        org.junit.Assert.assertNull(log10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(restAdapter36);
    }

    @Test
    public void test04607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04607");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter0.new RestHandler();
        retrofit.client.Client.Provider provider4 = restAdapter0.clientProvider;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler6 = builder5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        builder5.server = server9;
        java.util.concurrent.Executor executor11 = null;
        builder5.httpExecutor = executor11;
        retrofit.RestAdapter.Builder builder14 = builder5.setServer("default");
        retrofit.RestAdapter restAdapter15 = builder5.build();
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler17 = builder16.errorHandler;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        builder16.requestInterceptor = requestInterceptor18;
        java.util.concurrent.Executor executor20 = builder16.httpExecutor;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler22 = builder21.errorHandler;
        retrofit.client.Client.Provider provider23 = null;
        builder21.clientProvider = provider23;
        retrofit.Server server27 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder28 = builder21.setServer(server27);
        retrofit.converter.Converter converter29 = null;
        builder28.converter = converter29;
        retrofit.RestAdapter restAdapter31 = builder28.build();
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler33 = builder32.errorHandler;
        java.util.concurrent.Executor executor34 = null;
        builder32.callbackExecutor = executor34;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider37 = builder36.clientProvider;
        java.util.concurrent.Executor executor38 = null;
        builder36.callbackExecutor = executor38;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.Server server43 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder44 = builder40.setServer(server43);
        java.lang.String str45 = server43.getUrl();
        retrofit.RestAdapter.Builder builder46 = builder36.setServer(server43);
        retrofit.RestAdapter.Builder builder47 = builder32.setServer(server43);
        restAdapter31.server = server43;
        retrofit.Server server49 = restAdapter31.server;
        retrofit.RestAdapter.RestHandler restHandler50 = restAdapter31.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel51 = restAdapter31.getLogLevel();
        retrofit.client.Header[] headerArray54 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList55 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList55, headerArray54);
        retrofit.mime.TypedOutput typedOutput57 = null;
        retrofit.client.Request request58 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList55, typedOutput57);
        java.util.List<retrofit.client.Header> headerList59 = request58.getHeaders();
        java.util.List<retrofit.client.Header> headerList60 = request58.getHeaders();
        retrofit.mime.TypedOutput typedOutput61 = request58.getBody();
        retrofit.client.Request request62 = restAdapter31.logAndReplaceRequest(request58);
        java.util.concurrent.Executor executor63 = restAdapter31.httpExecutor;
        builder16.callbackExecutor = executor63;
        builder5.httpExecutor = executor63;
        restAdapter0.httpExecutor = executor63;
        retrofit.RestAdapter.RestHandler restHandler67 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler69 = builder68.errorHandler;
        java.util.concurrent.Executor executor70 = null;
        builder68.callbackExecutor = executor70;
        retrofit.converter.Converter converter72 = builder68.converter;
        retrofit.RestAdapter.Builder builder74 = builder68.setServer("hi!");
        builder68.ensureSaneDefaults();
        retrofit.Profiler profiler76 = builder68.profiler;
        retrofit.RequestInterceptor requestInterceptor77 = builder68.requestInterceptor;
        retrofit.client.Client.Provider provider78 = builder68.clientProvider;
        retrofit.client.Client.Provider provider79 = builder68.clientProvider;
        restAdapter0.clientProvider = provider79;
        retrofit.RestAdapter.RestHandler restHandler81 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder82 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler83 = builder82.errorHandler;
        retrofit.ErrorHandler errorHandler84 = builder82.errorHandler;
        retrofit.RestAdapter.Log log85 = null;
        builder82.log = log85;
        retrofit.Server server89 = new retrofit.Server("hi!", "hi!");
        builder82.server = server89;
        retrofit.client.Client.Provider provider91 = null;
        builder82.clientProvider = provider91;
        retrofit.RestAdapter.LogLevel logLevel93 = builder82.logLevel;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.setLogLevel(logLevel93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log level may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(provider4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(restAdapter15);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(restAdapter31);
        org.junit.Assert.assertNull(errorHandler33);
        org.junit.Assert.assertNull(provider37);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(server49);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(headerArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(headerList59);
        org.junit.Assert.assertNotNull(headerList60);
        org.junit.Assert.assertNull(typedOutput61);
        org.junit.Assert.assertNotNull(request62);
        org.junit.Assert.assertNotNull(executor63);
        org.junit.Assert.assertNull(errorHandler69);
        org.junit.Assert.assertNull(converter72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNull(profiler76);
        org.junit.Assert.assertNotNull(requestInterceptor77);
        org.junit.Assert.assertNotNull(provider78);
        org.junit.Assert.assertNotNull(provider79);
        org.junit.Assert.assertNull(errorHandler83);
        org.junit.Assert.assertNull(errorHandler84);
        org.junit.Assert.assertTrue("'" + logLevel93 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel93.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test04608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04608");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.RestAdapter restAdapter3 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor4 = restAdapter3.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        restAdapter3.server = server12;
        retrofit.Profiler profiler16 = restAdapter3.profiler;
        retrofit.ErrorHandler errorHandler17 = null;
        restAdapter3.errorHandler = errorHandler17;
        retrofit.Profiler profiler19 = null;
        restAdapter3.profiler = profiler19;
        retrofit.RestAdapter.LogLevel logLevel21 = restAdapter3.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter3.logLevel = logLevel22;
        restAdapter0.logLevel = logLevel22;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.Server server28 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder29 = builder25.setServer(server28);
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor31 = restAdapter30.callbackExecutor;
        java.util.concurrent.Executor executor32 = restAdapter30.callbackExecutor;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler34 = restAdapter33.errorHandler;
        retrofit.Server server37 = new retrofit.Server("", "");
        restAdapter33.server = server37;
        restAdapter30.server = server37;
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        restAdapter30.log = log40;
        retrofit.RestAdapter.Builder builder42 = builder29.setLog(log40);
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder44 = builder29.setLogLevel(logLevel43);
        retrofit.Profiler profiler45 = null;
        builder44.profiler = profiler45;
        retrofit.converter.Converter converter47 = null;
        builder44.converter = converter47;
        retrofit.ErrorHandler errorHandler49 = null;
        builder44.errorHandler = errorHandler49;
        retrofit.RestAdapter restAdapter51 = builder44.build();
        retrofit.ErrorHandler errorHandler52 = builder44.errorHandler;
        restAdapter0.errorHandler = errorHandler52;
        retrofit.converter.Converter converter54 = restAdapter0.converter;
        retrofit.RestAdapter.Log log55 = restAdapter0.log;
        java.util.concurrent.Executor executor56 = restAdapter0.httpExecutor;
        retrofit.client.Response response58 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response60 = restAdapter0.logAndReplaceResponse("", response58, (long) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNull(profiler16);
        org.junit.Assert.assertNull(logLevel21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(errorHandler34);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(restAdapter51);
        org.junit.Assert.assertNotNull(errorHandler52);
        org.junit.Assert.assertNull(converter54);
        org.junit.Assert.assertNull(log55);
        org.junit.Assert.assertNull(executor56);
    }

    @Test
    public void test04609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04609");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.converter.Converter converter2 = null;
        restAdapter0.converter = converter2;
        java.util.concurrent.Executor executor4 = restAdapter0.httpExecutor;
        java.util.concurrent.Executor executor5 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(executor5);
    }

    @Test
    public void test04610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04610");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.Profiler profiler3 = builder0.profiler;
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor5 = restAdapter4.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.Server server9 = new retrofit.Server("hi!", "hi!");
        restAdapter4.server = server9;
        retrofit.RestAdapter.Builder builder11 = builder0.setServer(server9);
        retrofit.converter.Converter converter12 = null;
        builder11.converter = converter12;
        retrofit.Profiler profiler14 = null;
        builder11.profiler = profiler14;
        retrofit.RestAdapter restAdapter16 = builder11.build();
        retrofit.client.Header[] headerArray23 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList24 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList24, headerArray23);
        retrofit.mime.TypedOutput typedOutput26 = null;
        retrofit.client.Request request27 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList24, typedOutput26);
        retrofit.mime.TypedOutput typedOutput28 = null;
        retrofit.client.Request request29 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList24, typedOutput28);
        retrofit.mime.TypedOutput typedOutput30 = null;
        retrofit.client.Request request31 = new retrofit.client.Request("", "default", (java.util.List<retrofit.client.Header>) headerList24, typedOutput30);
        retrofit.client.Request request32 = restAdapter16.logAndReplaceRequest(request31);
        retrofit.RestAdapter.RestHandler restHandler33 = restAdapter16.new RestHandler();
        retrofit.Profiler profiler34 = null;
        restAdapter16.profiler = profiler34;
        retrofit.converter.Converter converter36 = restAdapter16.converter;
        retrofit.Server server37 = restAdapter16.server;
        java.lang.String str38 = server37.getUrl();
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(restAdapter16);
        org.junit.Assert.assertNotNull(headerArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(request32);
        org.junit.Assert.assertNotNull(converter36);
        org.junit.Assert.assertNotNull(server37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
    }

    @Test
    public void test04611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04611");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server6 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder7 = builder0.setServer(server6);
        retrofit.converter.Converter converter8 = null;
        builder7.converter = converter8;
        retrofit.RestAdapter restAdapter10 = builder7.build();
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler12 = builder11.errorHandler;
        java.util.concurrent.Executor executor13 = null;
        builder11.callbackExecutor = executor13;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider16 = builder15.clientProvider;
        java.util.concurrent.Executor executor17 = null;
        builder15.callbackExecutor = executor17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.Server server22 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder23 = builder19.setServer(server22);
        java.lang.String str24 = server22.getUrl();
        retrofit.RestAdapter.Builder builder25 = builder15.setServer(server22);
        retrofit.RestAdapter.Builder builder26 = builder11.setServer(server22);
        restAdapter10.server = server22;
        retrofit.Server server28 = restAdapter10.server;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler30 = builder29.errorHandler;
        java.util.concurrent.Executor executor31 = builder29.callbackExecutor;
        retrofit.RestAdapter.Builder builder33 = builder29.setServer("hi!");
        builder33.ensureSaneDefaults();
        retrofit.Server server35 = null;
        retrofit.client.Client.Provider provider36 = null;
        java.util.concurrent.Executor executor37 = null;
        java.util.concurrent.Executor executor38 = null;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        retrofit.converter.Converter converter40 = null;
        retrofit.Profiler profiler41 = null;
        retrofit.ErrorHandler errorHandler42 = null;
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        log43.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter(server35, provider36, executor37, executor38, requestInterceptor39, converter40, profiler41, errorHandler42, log43, logLevel46);
        retrofit.RestAdapter.RestHandler restHandler48 = restAdapter47.new RestHandler();
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        restAdapter47.log = log49;
        retrofit.converter.Converter converter51 = null;
        restAdapter47.converter = converter51;
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter47.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor54 = null;
        restAdapter47.requestInterceptor = requestInterceptor54;
        retrofit.RestAdapter.LogLevel logLevel56 = restAdapter47.logLevel;
        retrofit.RestAdapter.Builder builder57 = builder33.setLogLevel(logLevel56);
        restAdapter10.logLevel = logLevel56;
        retrofit.RestAdapter.Log log59 = null;
        restAdapter10.log = log59;
        retrofit.Server server61 = restAdapter10.server;
        java.lang.String str62 = server61.getName();
        java.lang.String str63 = server61.getUrl();
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(restAdapter10);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(provider16);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(server28);
        org.junit.Assert.assertNull(errorHandler30);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(server61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hi!" + "'", str63, "hi!");
    }

    @Test
    public void test04612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04612");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler6 = builder5.errorHandler;
        retrofit.client.Client.Provider provider7 = null;
        builder5.clientProvider = provider7;
        retrofit.Server server11 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder12 = builder5.setServer(server11);
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        log28.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log28, logLevel31);
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server11, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log28, logLevel33);
        builder0.logLevel = logLevel33;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider37 = builder36.clientProvider;
        java.util.concurrent.Executor executor38 = null;
        builder36.callbackExecutor = executor38;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.Server server43 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder44 = builder40.setServer(server43);
        java.lang.String str45 = server43.getUrl();
        retrofit.RestAdapter.Builder builder46 = builder36.setServer(server43);
        builder36.ensureSaneDefaults();
        retrofit.Server server48 = null;
        retrofit.client.Client.Provider provider49 = null;
        java.util.concurrent.Executor executor50 = null;
        java.util.concurrent.Executor executor51 = null;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        retrofit.converter.Converter converter53 = null;
        retrofit.Profiler profiler54 = null;
        retrofit.ErrorHandler errorHandler55 = null;
        retrofit.RestAdapter.Log log56 = retrofit.RestAdapter.Log.NONE;
        log56.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter(server48, provider49, executor50, executor51, requestInterceptor52, converter53, profiler54, errorHandler55, log56, logLevel59);
        retrofit.RestAdapter.RestHandler restHandler61 = restAdapter60.new RestHandler();
        retrofit.RestAdapter.Log log62 = retrofit.RestAdapter.Log.NONE;
        restAdapter60.log = log62;
        retrofit.RestAdapter.Builder builder64 = builder36.setLog(log62);
        retrofit.RestAdapter.Builder builder66 = builder36.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor67 = builder36.requestInterceptor;
        retrofit.RestAdapter.Builder builder68 = builder0.setRequestInterceptor(requestInterceptor67);
        retrofit.converter.Converter converter69 = builder68.converter;
        builder68.ensureSaneDefaults();
        retrofit.Profiler profiler71 = builder68.profiler;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(provider37);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(requestInterceptor67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNull(converter69);
        org.junit.Assert.assertNull(profiler71);
    }

    @Test
    public void test04613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04613");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        builder0.requestInterceptor = requestInterceptor5;
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor8 = restAdapter7.callbackExecutor;
        java.util.concurrent.Executor executor9 = restAdapter7.callbackExecutor;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.Server server14 = new retrofit.Server("", "");
        restAdapter10.server = server14;
        restAdapter7.server = server14;
        retrofit.RestAdapter.Builder builder17 = builder0.setServer(server14);
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler19 = builder18.errorHandler;
        retrofit.client.Client.Provider provider20 = null;
        builder18.clientProvider = provider20;
        retrofit.Server server24 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder25 = builder18.setServer(server24);
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.Server server33 = null;
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        log41.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter(server33, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log41, logLevel44);
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter(server24, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log41, logLevel46);
        retrofit.RestAdapter.Builder builder48 = builder0.setLogLevel(logLevel46);
        java.util.concurrent.Executor executor49 = builder48.httpExecutor;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler51 = builder50.errorHandler;
        retrofit.ErrorHandler errorHandler52 = builder50.errorHandler;
        retrofit.Profiler profiler53 = builder50.profiler;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler55 = builder54.errorHandler;
        java.util.concurrent.Executor executor56 = null;
        builder54.callbackExecutor = executor56;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider59 = builder58.clientProvider;
        java.util.concurrent.Executor executor60 = null;
        builder58.callbackExecutor = executor60;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.Server server65 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder66 = builder62.setServer(server65);
        java.lang.String str67 = server65.getUrl();
        retrofit.RestAdapter.Builder builder68 = builder58.setServer(server65);
        retrofit.RestAdapter.Builder builder69 = builder54.setServer(server65);
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider71 = builder70.clientProvider;
        java.util.concurrent.Executor executor72 = null;
        builder70.callbackExecutor = executor72;
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        retrofit.Server server77 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder78 = builder74.setServer(server77);
        java.lang.String str79 = server77.getUrl();
        retrofit.RestAdapter.Builder builder80 = builder70.setServer(server77);
        java.lang.String str81 = server77.getUrl();
        builder69.server = server77;
        retrofit.RestAdapter.Builder builder83 = builder50.setServer(server77);
        builder48.server = server77;
        retrofit.client.Client client85 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder86 = builder48.setClient(client85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(executor49);
        org.junit.Assert.assertNull(errorHandler51);
        org.junit.Assert.assertNull(errorHandler52);
        org.junit.Assert.assertNull(profiler53);
        org.junit.Assert.assertNull(errorHandler55);
        org.junit.Assert.assertNull(provider59);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hi!" + "'", str67, "hi!");
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNull(provider71);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "hi!" + "'", str79, "hi!");
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "hi!" + "'", str81, "hi!");
        org.junit.Assert.assertNotNull(builder83);
    }

    @Test
    public void test04614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04614");
        retrofit.client.Header[] headerArray14 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList15 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList15, headerArray14);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList15, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList15, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("", "default", (java.util.List<retrofit.client.Header>) headerList15, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "default", (java.util.List<retrofit.client.Header>) headerList15, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("default", "", (java.util.List<retrofit.client.Header>) headerList15, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("default", "", (java.util.List<retrofit.client.Header>) headerList15, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList15, typedOutput29);
        org.junit.Assert.assertNotNull(headerArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test04615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04615");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.Profiler profiler3 = null;
        restAdapter0.profiler = profiler3;
        retrofit.ErrorHandler errorHandler5 = restAdapter0.errorHandler;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(errorHandler5);
    }

    @Test
    public void test04616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04616");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.ErrorHandler errorHandler3 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel6 = builder0.logLevel;
        retrofit.RestAdapter.Log log7 = builder0.log;
        retrofit.ErrorHandler errorHandler8 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder10 = builder0.setServer("default");
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        log19.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log19, logLevel22);
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter23.new RestHandler();
        retrofit.RestAdapter.Log log25 = retrofit.RestAdapter.Log.NONE;
        restAdapter23.log = log25;
        retrofit.converter.Converter converter27 = null;
        restAdapter23.converter = converter27;
        retrofit.RestAdapter.LogLevel logLevel29 = restAdapter23.getLogLevel();
        retrofit.ErrorHandler errorHandler30 = restAdapter23.errorHandler;
        retrofit.Profiler profiler31 = restAdapter23.profiler;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler33 = null;
        builder32.errorHandler = errorHandler33;
        retrofit.ErrorHandler errorHandler35 = builder32.errorHandler;
        retrofit.RestAdapter.Builder builder37 = builder32.setServer("hi!");
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler39 = builder38.errorHandler;
        retrofit.ErrorHandler errorHandler40 = builder38.errorHandler;
        retrofit.Profiler profiler41 = builder38.profiler;
        retrofit.RestAdapter.Log log42 = builder38.log;
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.FULL;
        builder38.logLevel = logLevel43;
        retrofit.RestAdapter.Builder builder45 = builder37.setLogLevel(logLevel43);
        retrofit.Server server46 = null;
        retrofit.client.Client.Provider provider47 = null;
        java.util.concurrent.Executor executor48 = null;
        java.util.concurrent.Executor executor49 = null;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        retrofit.converter.Converter converter51 = null;
        retrofit.Profiler profiler52 = null;
        retrofit.ErrorHandler errorHandler53 = null;
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        log54.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter(server46, provider47, executor48, executor49, requestInterceptor50, converter51, profiler52, errorHandler53, log54, logLevel57);
        log54.log("");
        retrofit.RestAdapter.Builder builder61 = builder45.setLog(log54);
        restAdapter23.log = log54;
        retrofit.RestAdapter.RestHandler restHandler63 = restAdapter23.new RestHandler();
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.Server server67 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder68 = builder64.setServer(server67);
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor70 = restAdapter69.callbackExecutor;
        java.util.concurrent.Executor executor71 = restAdapter69.callbackExecutor;
        retrofit.RestAdapter restAdapter72 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler73 = restAdapter72.errorHandler;
        retrofit.Server server76 = new retrofit.Server("", "");
        restAdapter72.server = server76;
        restAdapter69.server = server76;
        retrofit.RestAdapter.Log log79 = retrofit.RestAdapter.Log.NONE;
        restAdapter69.log = log79;
        retrofit.RestAdapter.Builder builder81 = builder68.setLog(log79);
        restAdapter23.log = log79;
        retrofit.Server server83 = restAdapter23.server;
        retrofit.RestAdapter.LogLevel logLevel84 = restAdapter23.logLevel;
        builder10.logLevel = logLevel84;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder87 = builder10.setServer("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be blank.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log25);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler30);
        org.junit.Assert.assertNull(profiler31);
        org.junit.Assert.assertNull(errorHandler35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNull(profiler41);
        org.junit.Assert.assertNull(log42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNull(executor70);
        org.junit.Assert.assertNull(executor71);
        org.junit.Assert.assertNull(errorHandler73);
        org.junit.Assert.assertNotNull(log79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNull(server83);
        org.junit.Assert.assertTrue("'" + logLevel84 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel84.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test04617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04617");
        java.util.List<retrofit.client.Header> headerList4 = null;
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("default", "hi!", headerList4, typedOutput5);
        java.util.List<retrofit.client.Header> headerList7 = request6.getHeaders();
        retrofit.mime.TypedOutput typedOutput8 = null;
        retrofit.client.Request request9 = new retrofit.client.Request("hi!", "hi!", headerList7, typedOutput8);
        retrofit.mime.TypedOutput typedOutput10 = request9.getBody();
        org.junit.Assert.assertNotNull(headerList7);
        org.junit.Assert.assertNull(typedOutput10);
    }

    @Test
    public void test04618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04618");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean6 = logLevel5.log();
        builder0.logLevel = logLevel5;
        retrofit.ErrorHandler errorHandler8 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder10 = builder0.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor11 = null;
        builder10.requestInterceptor = requestInterceptor11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler14 = builder13.errorHandler;
        retrofit.client.Client.Provider provider15 = null;
        builder13.clientProvider = provider15;
        retrofit.Server server19 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder20 = builder13.setServer(server19);
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.Server server28 = null;
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        log36.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server28, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log36, logLevel39);
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter(server19, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log36, logLevel41);
        log36.log("");
        builder10.log = log36;
        retrofit.RestAdapter.Log log46 = builder10.log;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler48 = builder47.errorHandler;
        java.util.concurrent.Executor executor49 = builder47.callbackExecutor;
        retrofit.RestAdapter.Builder builder51 = builder47.setServer("hi!");
        retrofit.Server server54 = new retrofit.Server("default", "hi!");
        java.lang.String str55 = server54.getUrl();
        retrofit.RestAdapter.Builder builder56 = builder51.setServer(server54);
        retrofit.RestAdapter.Builder builder57 = builder10.setServer(server54);
        retrofit.RestAdapter.Builder builder59 = builder57.setServer("hi!");
        retrofit.Server server60 = builder59.server;
        retrofit.RestAdapter.Builder builder62 = builder59.setServer("default");
        retrofit.RestAdapter.Log log63 = builder62.log;
        retrofit.converter.Converter converter64 = builder62.converter;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertNull(errorHandler48);
        org.junit.Assert.assertNull(executor49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "default" + "'", str55, "default");
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(server60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertNull(converter64);
    }

    @Test
    public void test04619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04619");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server6 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder7 = builder0.setServer(server6);
        retrofit.converter.Converter converter8 = null;
        builder7.converter = converter8;
        retrofit.RestAdapter restAdapter10 = builder7.build();
        retrofit.Profiler profiler11 = builder7.profiler;
        retrofit.Profiler profiler12 = builder7.profiler;
        retrofit.client.Client.Provider provider13 = builder7.clientProvider;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler15 = builder14.errorHandler;
        retrofit.Server server18 = new retrofit.Server("", "");
        builder14.server = server18;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        builder14.log = log20;
        retrofit.RequestInterceptor requestInterceptor22 = builder14.requestInterceptor;
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        log23.log("hi!");
        log23.log("hi!");
        builder14.log = log23;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider30 = builder29.clientProvider;
        java.util.concurrent.Executor executor31 = null;
        builder29.callbackExecutor = executor31;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.Server server36 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder37 = builder33.setServer(server36);
        java.lang.String str38 = server36.getUrl();
        retrofit.RestAdapter.Builder builder39 = builder29.setServer(server36);
        builder29.ensureSaneDefaults();
        retrofit.Server server41 = null;
        retrofit.client.Client.Provider provider42 = null;
        java.util.concurrent.Executor executor43 = null;
        java.util.concurrent.Executor executor44 = null;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        retrofit.converter.Converter converter46 = null;
        retrofit.Profiler profiler47 = null;
        retrofit.ErrorHandler errorHandler48 = null;
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        log49.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server41, provider42, executor43, executor44, requestInterceptor45, converter46, profiler47, errorHandler48, log49, logLevel52);
        retrofit.RestAdapter.RestHandler restHandler54 = restAdapter53.new RestHandler();
        retrofit.RestAdapter.Log log55 = retrofit.RestAdapter.Log.NONE;
        restAdapter53.log = log55;
        retrofit.RestAdapter.Builder builder57 = builder29.setLog(log55);
        retrofit.RestAdapter.LogLevel logLevel58 = builder29.logLevel;
        boolean boolean59 = logLevel58.log();
        retrofit.RestAdapter.Builder builder60 = builder14.setLogLevel(logLevel58);
        retrofit.RestAdapter.Builder builder61 = builder7.setLogLevel(logLevel58);
        retrofit.Server server62 = builder61.server;
        retrofit.client.Client client63 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder64 = builder61.setClient(client63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(restAdapter10);
        org.junit.Assert.assertNull(profiler11);
        org.junit.Assert.assertNull(profiler12);
        org.junit.Assert.assertNotNull(provider13);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNull(provider30);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(server62);
    }

    @Test
    public void test04620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04620");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = null;
        restAdapter0.httpExecutor = executor2;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.logLevel;
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter0.logLevel;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        log14.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel17);
        retrofit.RequestInterceptor requestInterceptor19 = null;
        restAdapter18.requestInterceptor = requestInterceptor19;
        retrofit.RestAdapter.LogLevel logLevel21 = restAdapter18.logLevel;
        restAdapter0.logLevel = logLevel21;
        retrofit.Server server23 = restAdapter0.server;
        java.util.concurrent.Executor executor24 = restAdapter0.httpExecutor;
        retrofit.converter.Converter converter25 = restAdapter0.converter;
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(server23);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(converter25);
    }

    @Test
    public void test04621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04621");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = null;
        restAdapter0.httpExecutor = executor2;
        retrofit.RequestInterceptor requestInterceptor4 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler6 = builder5.errorHandler;
        retrofit.client.Client.Provider provider7 = null;
        builder5.clientProvider = provider7;
        retrofit.Server server11 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder12 = builder5.setServer(server11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler14 = builder13.errorHandler;
        retrofit.client.Client.Provider provider15 = null;
        builder13.clientProvider = provider15;
        retrofit.converter.Converter converter17 = builder13.converter;
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder19 = builder13.setLogLevel(logLevel18);
        builder5.logLevel = logLevel18;
        restAdapter0.logLevel = logLevel18;
        java.util.concurrent.Executor executor22 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler24 = null;
        builder23.errorHandler = errorHandler24;
        retrofit.ErrorHandler errorHandler26 = builder23.errorHandler;
        retrofit.RestAdapter.Builder builder28 = builder23.setServer("hi!");
        retrofit.RestAdapter.Builder builder30 = builder28.setServer("hi!");
        java.util.concurrent.Executor executor31 = builder28.callbackExecutor;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.Server server35 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder36 = builder32.setServer(server35);
        retrofit.converter.Converter converter37 = builder32.converter;
        retrofit.RequestInterceptor requestInterceptor38 = builder32.requestInterceptor;
        java.util.concurrent.Executor executor39 = builder32.callbackExecutor;
        retrofit.Profiler profiler40 = builder32.profiler;
        java.util.concurrent.Executor executor41 = builder32.httpExecutor;
        java.util.concurrent.Executor executor42 = builder32.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel43 = builder32.logLevel;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler45 = builder44.errorHandler;
        retrofit.client.Client.Provider provider46 = null;
        builder44.clientProvider = provider46;
        retrofit.Server server50 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder51 = builder44.setServer(server50);
        retrofit.client.Client.Provider provider52 = null;
        java.util.concurrent.Executor executor53 = null;
        java.util.concurrent.Executor executor54 = null;
        retrofit.RequestInterceptor requestInterceptor55 = null;
        retrofit.converter.Converter converter56 = null;
        retrofit.Profiler profiler57 = null;
        retrofit.ErrorHandler errorHandler58 = null;
        retrofit.Server server59 = null;
        retrofit.client.Client.Provider provider60 = null;
        java.util.concurrent.Executor executor61 = null;
        java.util.concurrent.Executor executor62 = null;
        retrofit.RequestInterceptor requestInterceptor63 = null;
        retrofit.converter.Converter converter64 = null;
        retrofit.Profiler profiler65 = null;
        retrofit.ErrorHandler errorHandler66 = null;
        retrofit.RestAdapter.Log log67 = retrofit.RestAdapter.Log.NONE;
        log67.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter(server59, provider60, executor61, executor62, requestInterceptor63, converter64, profiler65, errorHandler66, log67, logLevel70);
        retrofit.RestAdapter.LogLevel logLevel72 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter73 = new retrofit.RestAdapter(server50, provider52, executor53, executor54, requestInterceptor55, converter56, profiler57, errorHandler58, log67, logLevel72);
        retrofit.RestAdapter.Builder builder74 = builder32.setLogLevel(logLevel72);
        retrofit.RestAdapter.Builder builder75 = builder28.setLogLevel(logLevel72);
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        retrofit.Server server79 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder80 = builder76.setServer(server79);
        retrofit.RestAdapter restAdapter81 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor82 = restAdapter81.callbackExecutor;
        java.util.concurrent.Executor executor83 = restAdapter81.callbackExecutor;
        retrofit.RestAdapter restAdapter84 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler85 = restAdapter84.errorHandler;
        retrofit.Server server88 = new retrofit.Server("", "");
        restAdapter84.server = server88;
        restAdapter81.server = server88;
        retrofit.RestAdapter.Log log91 = retrofit.RestAdapter.Log.NONE;
        restAdapter81.log = log91;
        retrofit.RestAdapter.Builder builder93 = builder80.setLog(log91);
        retrofit.RestAdapter.Builder builder95 = builder80.setServer("hi!");
        retrofit.RestAdapter.Log log96 = builder95.log;
        retrofit.RestAdapter.Builder builder97 = builder28.setLog(log96);
        restAdapter0.log = log96;
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(converter17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(errorHandler26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(converter37);
        org.junit.Assert.assertNull(requestInterceptor38);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNull(profiler40);
        org.junit.Assert.assertNull(executor41);
        org.junit.Assert.assertNull(executor42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler45);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(log67);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNull(executor82);
        org.junit.Assert.assertNull(executor83);
        org.junit.Assert.assertNull(errorHandler85);
        org.junit.Assert.assertNotNull(log91);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(log96);
        org.junit.Assert.assertNotNull(builder97);
    }

    @Test
    public void test04622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04622");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        java.util.concurrent.Executor executor14 = null;
        restAdapter12.callbackExecutor = executor14;
        retrofit.client.Header[] headerArray18 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList19 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList19, headerArray18);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList19, typedOutput21);
        retrofit.client.Request request23 = restAdapter12.logAndReplaceRequest(request22);
        retrofit.client.Client.Provider provider24 = restAdapter12.clientProvider;
        retrofit.Profiler profiler25 = restAdapter12.profiler;
        java.util.concurrent.Executor executor26 = restAdapter12.callbackExecutor;
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertNull(provider24);
        org.junit.Assert.assertNull(profiler25);
        org.junit.Assert.assertNull(executor26);
    }

    @Test
    public void test04623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04623");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = builder0.clientProvider;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server7 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder8 = builder4.setServer(server7);
        java.lang.String str9 = server7.getUrl();
        retrofit.RestAdapter.Builder builder10 = builder0.setServer(server7);
        retrofit.Profiler profiler11 = null;
        builder0.profiler = profiler11;
        retrofit.converter.Converter converter13 = builder0.converter;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler15 = builder14.errorHandler;
        retrofit.Server server18 = new retrofit.Server("", "");
        builder14.server = server18;
        java.util.concurrent.Executor executor20 = builder14.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel21 = null;
        builder14.logLevel = logLevel21;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler24 = builder23.errorHandler;
        retrofit.client.Client.Provider provider25 = null;
        builder23.clientProvider = provider25;
        retrofit.Server server29 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder30 = builder23.setServer(server29);
        retrofit.converter.Converter converter31 = null;
        builder30.converter = converter31;
        retrofit.RestAdapter restAdapter33 = builder30.build();
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler35 = builder34.errorHandler;
        java.util.concurrent.Executor executor36 = null;
        builder34.callbackExecutor = executor36;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider39 = builder38.clientProvider;
        java.util.concurrent.Executor executor40 = null;
        builder38.callbackExecutor = executor40;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.Server server45 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder46 = builder42.setServer(server45);
        java.lang.String str47 = server45.getUrl();
        retrofit.RestAdapter.Builder builder48 = builder38.setServer(server45);
        retrofit.RestAdapter.Builder builder49 = builder34.setServer(server45);
        restAdapter33.server = server45;
        java.util.concurrent.Executor executor51 = restAdapter33.httpExecutor;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler53 = builder52.errorHandler;
        retrofit.Server server56 = new retrofit.Server("", "");
        builder52.server = server56;
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        builder52.log = log58;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler61 = builder60.errorHandler;
        retrofit.client.Client.Provider provider62 = null;
        builder60.clientProvider = provider62;
        retrofit.Server server66 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder67 = builder60.setServer(server66);
        retrofit.converter.Converter converter68 = null;
        builder67.converter = converter68;
        retrofit.RestAdapter restAdapter70 = builder67.build();
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler72 = builder71.errorHandler;
        java.util.concurrent.Executor executor73 = null;
        builder71.callbackExecutor = executor73;
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider76 = builder75.clientProvider;
        java.util.concurrent.Executor executor77 = null;
        builder75.callbackExecutor = executor77;
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        retrofit.Server server82 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder83 = builder79.setServer(server82);
        java.lang.String str84 = server82.getUrl();
        retrofit.RestAdapter.Builder builder85 = builder75.setServer(server82);
        retrofit.RestAdapter.Builder builder86 = builder71.setServer(server82);
        restAdapter70.server = server82;
        java.util.concurrent.Executor executor88 = restAdapter70.httpExecutor;
        builder52.httpExecutor = executor88;
        retrofit.RestAdapter.Builder builder90 = builder14.setExecutors(executor51, executor88);
        retrofit.RestAdapter restAdapter91 = builder14.build();
        retrofit.RequestInterceptor requestInterceptor92 = restAdapter91.requestInterceptor;
        retrofit.RestAdapter.Builder builder93 = builder0.setRequestInterceptor(requestInterceptor92);
        java.util.concurrent.Executor executor94 = builder93.httpExecutor;
        org.junit.Assert.assertNull(provider1);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(restAdapter33);
        org.junit.Assert.assertNull(errorHandler35);
        org.junit.Assert.assertNull(provider39);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(executor51);
        org.junit.Assert.assertNull(errorHandler53);
        org.junit.Assert.assertNotNull(log58);
        org.junit.Assert.assertNull(errorHandler61);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(restAdapter70);
        org.junit.Assert.assertNull(errorHandler72);
        org.junit.Assert.assertNull(provider76);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "hi!" + "'", str84, "hi!");
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(executor88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(restAdapter91);
        org.junit.Assert.assertNotNull(requestInterceptor92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNull(executor94);
    }

    @Test
    public void test04624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04624");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler4 = builder3.errorHandler;
        retrofit.ErrorHandler errorHandler5 = builder3.errorHandler;
        retrofit.RestAdapter.Log log6 = null;
        builder3.log = log6;
        retrofit.Server server10 = new retrofit.Server("hi!", "hi!");
        builder3.server = server10;
        java.lang.String str12 = server10.getName();
        builder0.server = server10;
        retrofit.Server server14 = builder0.server;
        retrofit.RequestInterceptor requestInterceptor15 = builder0.requestInterceptor;
        retrofit.client.Client.Provider provider16 = builder0.clientProvider;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.Server server20 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder21 = builder17.setServer(server20);
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor23 = restAdapter22.callbackExecutor;
        java.util.concurrent.Executor executor24 = restAdapter22.callbackExecutor;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler26 = restAdapter25.errorHandler;
        retrofit.Server server29 = new retrofit.Server("", "");
        restAdapter25.server = server29;
        restAdapter22.server = server29;
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        restAdapter22.log = log32;
        retrofit.RestAdapter.Builder builder34 = builder21.setLog(log32);
        retrofit.converter.Converter converter35 = null;
        builder34.converter = converter35;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler38 = builder37.errorHandler;
        retrofit.ErrorHandler errorHandler39 = builder37.errorHandler;
        retrofit.Profiler profiler40 = builder37.profiler;
        retrofit.RestAdapter.Log log41 = builder37.log;
        retrofit.Server server42 = null;
        retrofit.client.Client.Provider provider43 = null;
        java.util.concurrent.Executor executor44 = null;
        java.util.concurrent.Executor executor45 = null;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        retrofit.converter.Converter converter47 = null;
        retrofit.Profiler profiler48 = null;
        retrofit.ErrorHandler errorHandler49 = null;
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        log50.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter(server42, provider43, executor44, executor45, requestInterceptor46, converter47, profiler48, errorHandler49, log50, logLevel53);
        builder37.log = log50;
        retrofit.RestAdapter.Builder builder56 = builder34.setLog(log50);
        retrofit.ErrorHandler errorHandler57 = null;
        builder34.errorHandler = errorHandler57;
        retrofit.RestAdapter.Log log59 = builder34.log;
        retrofit.RestAdapter.Builder builder60 = builder0.setLog(log59);
        log59.log("hi!");
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(errorHandler4);
        org.junit.Assert.assertNull(errorHandler5);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNull(provider16);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(errorHandler26);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(errorHandler38);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNull(profiler40);
        org.junit.Assert.assertNull(log41);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(log59);
        org.junit.Assert.assertNotNull(builder60);
    }

    @Test
    public void test04625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04625");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.converter.Converter converter5 = builder0.converter;
        retrofit.RequestInterceptor requestInterceptor6 = builder0.requestInterceptor;
        java.util.concurrent.Executor executor7 = builder0.callbackExecutor;
        retrofit.Profiler profiler8 = builder0.profiler;
        java.util.concurrent.Executor executor9 = builder0.httpExecutor;
        java.util.concurrent.Executor executor10 = builder0.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel11 = builder0.logLevel;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler13 = builder12.errorHandler;
        retrofit.client.Client.Provider provider14 = null;
        builder12.clientProvider = provider14;
        retrofit.Server server18 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder19 = builder12.setServer(server18);
        retrofit.client.Client.Provider provider20 = null;
        java.util.concurrent.Executor executor21 = null;
        java.util.concurrent.Executor executor22 = null;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        retrofit.converter.Converter converter24 = null;
        retrofit.Profiler profiler25 = null;
        retrofit.ErrorHandler errorHandler26 = null;
        retrofit.Server server27 = null;
        retrofit.client.Client.Provider provider28 = null;
        java.util.concurrent.Executor executor29 = null;
        java.util.concurrent.Executor executor30 = null;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        retrofit.converter.Converter converter32 = null;
        retrofit.Profiler profiler33 = null;
        retrofit.ErrorHandler errorHandler34 = null;
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        log35.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter(server27, provider28, executor29, executor30, requestInterceptor31, converter32, profiler33, errorHandler34, log35, logLevel38);
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter(server18, provider20, executor21, executor22, requestInterceptor23, converter24, profiler25, errorHandler26, log35, logLevel40);
        retrofit.RestAdapter.Builder builder42 = builder0.setLogLevel(logLevel40);
        retrofit.Profiler profiler43 = builder0.profiler;
        retrofit.RestAdapter.LogLevel logLevel44 = builder0.logLevel;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(converter5);
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(profiler8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(profiler43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test04626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04626");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        java.util.concurrent.Executor executor4 = null;
        builder0.httpExecutor = executor4;
        retrofit.Profiler profiler6 = null;
        builder0.profiler = profiler6;
        retrofit.RestAdapter.Builder builder9 = builder0.setServer("hi!");
        retrofit.Profiler profiler10 = builder0.profiler;
        java.util.concurrent.Executor executor11 = builder0.httpExecutor;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler13 = builder12.errorHandler;
        java.util.concurrent.Executor executor14 = builder12.callbackExecutor;
        retrofit.RestAdapter.Builder builder16 = builder12.setServer("hi!");
        retrofit.Server server19 = new retrofit.Server("default", "hi!");
        java.lang.String str20 = server19.getUrl();
        retrofit.RestAdapter.Builder builder21 = builder16.setServer(server19);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler23 = builder22.errorHandler;
        retrofit.ErrorHandler errorHandler24 = builder22.errorHandler;
        java.util.concurrent.Executor executor25 = builder22.callbackExecutor;
        java.util.concurrent.Executor executor26 = null;
        builder22.callbackExecutor = executor26;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler29 = builder28.errorHandler;
        retrofit.Server server32 = new retrofit.Server("", "");
        builder28.server = server32;
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        builder28.log = log34;
        retrofit.RestAdapter.LogLevel logLevel36 = builder28.logLevel;
        retrofit.RestAdapter.Builder builder37 = builder22.setLogLevel(logLevel36);
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler39 = builder38.errorHandler;
        retrofit.client.Client.Provider provider40 = null;
        builder38.clientProvider = provider40;
        retrofit.Server server44 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder45 = builder38.setServer(server44);
        retrofit.converter.Converter converter46 = null;
        builder45.converter = converter46;
        retrofit.RestAdapter restAdapter48 = builder45.build();
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler50 = builder49.errorHandler;
        java.util.concurrent.Executor executor51 = null;
        builder49.callbackExecutor = executor51;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider54 = builder53.clientProvider;
        java.util.concurrent.Executor executor55 = null;
        builder53.callbackExecutor = executor55;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.Server server60 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder61 = builder57.setServer(server60);
        java.lang.String str62 = server60.getUrl();
        retrofit.RestAdapter.Builder builder63 = builder53.setServer(server60);
        retrofit.RestAdapter.Builder builder64 = builder49.setServer(server60);
        restAdapter48.server = server60;
        retrofit.client.Client.Provider provider66 = restAdapter48.clientProvider;
        retrofit.RestAdapter.Builder builder67 = builder37.setClient(provider66);
        retrofit.RestAdapter.Builder builder68 = builder21.setClient(provider66);
        retrofit.RestAdapter.Builder builder69 = builder0.setClient(provider66);
        retrofit.RestAdapter.LogLevel logLevel70 = builder0.logLevel;
        retrofit.Server server71 = builder0.server;
        retrofit.converter.Converter converter72 = builder0.converter;
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler74 = builder73.errorHandler;
        retrofit.Server server77 = new retrofit.Server("", "");
        builder73.server = server77;
        java.util.concurrent.Executor executor79 = null;
        builder73.httpExecutor = executor79;
        retrofit.RestAdapter.Builder builder82 = builder73.setServer("default");
        retrofit.converter.Converter converter83 = builder73.converter;
        retrofit.RestAdapter.Log log84 = builder73.log;
        retrofit.RestAdapter restAdapter85 = builder73.build();
        retrofit.RestAdapter.Builder builder86 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler87 = builder86.errorHandler;
        java.util.concurrent.Executor executor88 = builder86.callbackExecutor;
        retrofit.RestAdapter.Builder builder90 = builder86.setServer("hi!");
        builder90.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter92 = builder90.build();
        retrofit.client.Client.Provider provider93 = builder90.clientProvider;
        retrofit.RestAdapter.Builder builder94 = builder73.setClient(provider93);
        retrofit.Server server95 = builder94.server;
        retrofit.RestAdapter.Builder builder96 = builder0.setServer(server95);
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(profiler10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "default" + "'", str20, "default");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(restAdapter48);
        org.junit.Assert.assertNull(errorHandler50);
        org.junit.Assert.assertNull(provider54);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(provider66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(server71);
        org.junit.Assert.assertNull(converter72);
        org.junit.Assert.assertNull(errorHandler74);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNull(converter83);
        org.junit.Assert.assertNull(log84);
        org.junit.Assert.assertNotNull(restAdapter85);
        org.junit.Assert.assertNull(errorHandler87);
        org.junit.Assert.assertNull(executor88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(restAdapter92);
        org.junit.Assert.assertNotNull(provider93);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(server95);
        org.junit.Assert.assertNotNull(builder96);
    }

    @Test
    public void test04627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04627");
        retrofit.client.Header[] headerArray14 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList15 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList15, headerArray14);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList15, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList15, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList15, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList15, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList15, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("default", "default", (java.util.List<retrofit.client.Header>) headerList15, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList15, typedOutput29);
        java.lang.String str31 = request30.getUrl();
        java.lang.String str32 = request30.getUrl();
        org.junit.Assert.assertNotNull(headerArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
    }

    @Test
    public void test04628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04628");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter0.requestInterceptor;
        retrofit.ErrorHandler errorHandler17 = restAdapter0.errorHandler;
        java.util.concurrent.Executor executor18 = null;
        restAdapter0.callbackExecutor = executor18;
        java.util.concurrent.Executor executor20 = restAdapter0.httpExecutor;
        retrofit.client.Client.Provider provider21 = restAdapter0.clientProvider;
        retrofit.RestAdapter.Log log22 = restAdapter0.log;
        retrofit.converter.Converter converter23 = null;
        restAdapter0.converter = converter23;
        retrofit.Profiler profiler25 = null;
        restAdapter0.profiler = profiler25;
        retrofit.RequestInterceptor requestInterceptor27 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor28 = restAdapter0.httpExecutor;
        java.lang.Throwable throwable29 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable29, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(provider21);
        org.junit.Assert.assertNull(log22);
        org.junit.Assert.assertNull(requestInterceptor27);
        org.junit.Assert.assertNull(executor28);
    }

    @Test
    public void test04629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04629");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.ErrorHandler errorHandler3 = builder0.errorHandler;
        java.util.concurrent.Executor executor4 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler6 = builder5.errorHandler;
        java.util.concurrent.Executor executor7 = null;
        builder5.callbackExecutor = executor7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.Server server12 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder13 = builder9.setServer(server12);
        retrofit.converter.Converter converter14 = builder9.converter;
        retrofit.RequestInterceptor requestInterceptor15 = builder9.requestInterceptor;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider17 = builder16.clientProvider;
        java.util.concurrent.Executor executor18 = null;
        builder16.callbackExecutor = executor18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.Server server23 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder24 = builder20.setServer(server23);
        java.lang.String str25 = server23.getUrl();
        retrofit.RestAdapter.Builder builder26 = builder16.setServer(server23);
        builder16.ensureSaneDefaults();
        retrofit.Server server28 = null;
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        log36.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server28, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log36, logLevel39);
        retrofit.RestAdapter.RestHandler restHandler41 = restAdapter40.new RestHandler();
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        restAdapter40.log = log42;
        retrofit.RestAdapter.Builder builder44 = builder16.setLog(log42);
        retrofit.RestAdapter.Builder builder46 = builder16.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor47 = builder16.requestInterceptor;
        builder9.requestInterceptor = requestInterceptor47;
        builder5.requestInterceptor = requestInterceptor47;
        retrofit.RestAdapter.Builder builder50 = builder0.setRequestInterceptor(requestInterceptor47);
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler52 = builder51.errorHandler;
        retrofit.client.Client.Provider provider53 = null;
        builder51.clientProvider = provider53;
        retrofit.Server server57 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder58 = builder51.setServer(server57);
        retrofit.converter.Converter converter59 = null;
        builder58.converter = converter59;
        retrofit.RestAdapter restAdapter61 = builder58.build();
        java.util.concurrent.Executor executor62 = restAdapter61.httpExecutor;
        builder50.callbackExecutor = executor62;
        retrofit.RestAdapter.LogLevel logLevel64 = builder50.logLevel;
        retrofit.ErrorHandler errorHandler65 = builder50.errorHandler;
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNull(provider17);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(requestInterceptor47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(errorHandler52);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(restAdapter61);
        org.junit.Assert.assertNotNull(executor62);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler65);
    }

    @Test
    public void test04630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04630");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.logLevel;
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor3 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler4 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(executor3);
    }

    @Test
    public void test04631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04631");
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler5 = builder4.errorHandler;
        retrofit.Server server8 = new retrofit.Server("", "");
        builder4.server = server8;
        retrofit.client.Client.Provider provider10 = null;
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        retrofit.converter.Converter converter14 = null;
        retrofit.Profiler profiler15 = null;
        retrofit.ErrorHandler errorHandler16 = null;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler18 = builder17.errorHandler;
        retrofit.Server server21 = new retrofit.Server("", "");
        builder17.server = server21;
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        builder17.log = log23;
        retrofit.Server server25 = null;
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        log33.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter(server25, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log33, logLevel36);
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter(server8, provider10, executor11, executor12, requestInterceptor13, converter14, profiler15, errorHandler16, log23, logLevel36);
        retrofit.client.Header[] headerArray45 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList46 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList46, headerArray45);
        retrofit.mime.TypedOutput typedOutput48 = null;
        retrofit.client.Request request49 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList46, typedOutput48);
        retrofit.mime.TypedOutput typedOutput50 = null;
        retrofit.client.Request request51 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList46, typedOutput50);
        retrofit.mime.TypedOutput typedOutput52 = null;
        retrofit.client.Request request53 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList46, typedOutput52);
        retrofit.mime.TypedOutput typedOutput54 = request53.getBody();
        java.util.List<retrofit.client.Header> headerList55 = request53.getHeaders();
        retrofit.client.Request request56 = restAdapter38.logAndReplaceRequest(request53);
        java.util.List<retrofit.client.Header> headerList57 = request53.getHeaders();
        retrofit.mime.TypedOutput typedOutput58 = null;
        retrofit.client.Request request59 = new retrofit.client.Request("", "hi!", headerList57, typedOutput58);
        retrofit.mime.TypedOutput typedOutput60 = null;
        retrofit.client.Request request61 = new retrofit.client.Request("hi!", "", headerList57, typedOutput60);
        org.junit.Assert.assertNull(errorHandler5);
        org.junit.Assert.assertNull(errorHandler18);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(typedOutput54);
        org.junit.Assert.assertNotNull(headerList55);
        org.junit.Assert.assertNotNull(request56);
        org.junit.Assert.assertNotNull(headerList57);
    }

    @Test
    public void test04632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04632");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        builder0.requestInterceptor = requestInterceptor2;
        java.util.concurrent.Executor executor4 = builder0.httpExecutor;
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        log5.log("default");
        builder0.log = log5;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider10 = builder9.clientProvider;
        retrofit.RestAdapter.Builder builder12 = builder9.setServer("default");
        retrofit.RestAdapter restAdapter13 = builder9.build();
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler15 = null;
        builder14.errorHandler = errorHandler15;
        retrofit.ErrorHandler errorHandler17 = builder14.errorHandler;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor19 = restAdapter18.callbackExecutor;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor21 = restAdapter20.callbackExecutor;
        java.util.concurrent.Executor executor22 = restAdapter20.callbackExecutor;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler24 = restAdapter23.errorHandler;
        retrofit.Server server27 = new retrofit.Server("", "");
        restAdapter23.server = server27;
        restAdapter20.server = server27;
        restAdapter18.server = server27;
        retrofit.Profiler profiler31 = restAdapter18.profiler;
        retrofit.ErrorHandler errorHandler32 = null;
        restAdapter18.errorHandler = errorHandler32;
        retrofit.Profiler profiler34 = null;
        restAdapter18.profiler = profiler34;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        restAdapter18.requestInterceptor = requestInterceptor36;
        retrofit.RestAdapter.LogLevel logLevel38 = restAdapter18.getLogLevel();
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.Server server42 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder43 = builder39.setServer(server42);
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor45 = restAdapter44.callbackExecutor;
        java.util.concurrent.Executor executor46 = restAdapter44.callbackExecutor;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler48 = restAdapter47.errorHandler;
        retrofit.Server server51 = new retrofit.Server("", "");
        restAdapter47.server = server51;
        restAdapter44.server = server51;
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        restAdapter44.log = log54;
        retrofit.RestAdapter.Builder builder56 = builder43.setLog(log54);
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder58 = builder43.setLogLevel(logLevel57);
        retrofit.Profiler profiler59 = null;
        builder58.profiler = profiler59;
        retrofit.converter.Converter converter61 = null;
        builder58.converter = converter61;
        retrofit.ErrorHandler errorHandler63 = null;
        builder58.errorHandler = errorHandler63;
        retrofit.RestAdapter restAdapter65 = builder58.build();
        retrofit.ErrorHandler errorHandler66 = builder58.errorHandler;
        restAdapter18.errorHandler = errorHandler66;
        retrofit.RestAdapter.Builder builder68 = builder14.setErrorHandler(errorHandler66);
        restAdapter13.errorHandler = errorHandler66;
        retrofit.RestAdapter.Builder builder70 = builder0.setErrorHandler(errorHandler66);
        java.util.concurrent.Executor executor71 = builder70.callbackExecutor;
        retrofit.Profiler profiler72 = builder70.profiler;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNull(provider10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(restAdapter13);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNull(profiler31);
        org.junit.Assert.assertNull(logLevel38);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertNull(executor46);
        org.junit.Assert.assertNull(errorHandler48);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(restAdapter65);
        org.junit.Assert.assertNotNull(errorHandler66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(executor71);
        org.junit.Assert.assertNull(profiler72);
    }

    @Test
    public void test04633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04633");
        retrofit.client.Header[] headerArray20 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList21 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList21, headerArray20);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList21, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList21, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList21, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList21, typedOutput29);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("", "default", (java.util.List<retrofit.client.Header>) headerList21, typedOutput31);
        retrofit.mime.TypedOutput typedOutput33 = null;
        retrofit.client.Request request34 = new retrofit.client.Request("default", "", (java.util.List<retrofit.client.Header>) headerList21, typedOutput33);
        retrofit.mime.TypedOutput typedOutput35 = null;
        retrofit.client.Request request36 = new retrofit.client.Request("", "default", (java.util.List<retrofit.client.Header>) headerList21, typedOutput35);
        retrofit.mime.TypedOutput typedOutput37 = null;
        retrofit.client.Request request38 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList21, typedOutput37);
        retrofit.mime.TypedOutput typedOutput39 = null;
        retrofit.client.Request request40 = new retrofit.client.Request("default", "", (java.util.List<retrofit.client.Header>) headerList21, typedOutput39);
        retrofit.mime.TypedOutput typedOutput41 = null;
        retrofit.client.Request request42 = new retrofit.client.Request("default", "", (java.util.List<retrofit.client.Header>) headerList21, typedOutput41);
        java.lang.Class<?> wildcardClass43 = headerList21.getClass();
        org.junit.Assert.assertNotNull(headerArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test04634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04634");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = builder0.clientProvider;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        log12.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel15);
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter16.new RestHandler();
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        restAdapter16.log = log18;
        retrofit.converter.Converter converter20 = null;
        restAdapter16.converter = converter20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.Server server25 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder26 = builder22.setServer(server25);
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor28 = restAdapter27.callbackExecutor;
        java.util.concurrent.Executor executor29 = restAdapter27.callbackExecutor;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler31 = restAdapter30.errorHandler;
        retrofit.Server server34 = new retrofit.Server("", "");
        restAdapter30.server = server34;
        restAdapter27.server = server34;
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        restAdapter27.log = log37;
        retrofit.RestAdapter.Builder builder39 = builder26.setLog(log37);
        restAdapter16.log = log37;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler42 = builder41.errorHandler;
        retrofit.Server server45 = new retrofit.Server("", "");
        builder41.server = server45;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor48 = restAdapter47.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler49 = restAdapter47.new RestHandler();
        retrofit.Server server52 = new retrofit.Server("hi!", "hi!");
        restAdapter47.server = server52;
        retrofit.RestAdapter.Builder builder54 = builder41.setServer(server52);
        restAdapter16.server = server52;
        retrofit.Profiler profiler56 = restAdapter16.profiler;
        retrofit.Server server57 = restAdapter16.server;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.Server server61 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder62 = builder58.setServer(server61);
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor64 = restAdapter63.callbackExecutor;
        java.util.concurrent.Executor executor65 = restAdapter63.callbackExecutor;
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler67 = restAdapter66.errorHandler;
        retrofit.Server server70 = new retrofit.Server("", "");
        restAdapter66.server = server70;
        restAdapter63.server = server70;
        retrofit.RestAdapter.Log log73 = retrofit.RestAdapter.Log.NONE;
        restAdapter63.log = log73;
        retrofit.RestAdapter.Builder builder75 = builder62.setLog(log73);
        retrofit.RestAdapter.LogLevel logLevel76 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder77 = builder62.setLogLevel(logLevel76);
        retrofit.RestAdapter.Log log78 = builder62.log;
        retrofit.RestAdapter restAdapter79 = builder62.build();
        java.util.concurrent.Executor executor80 = restAdapter79.callbackExecutor;
        restAdapter16.httpExecutor = executor80;
        builder0.callbackExecutor = executor80;
        retrofit.converter.Converter converter83 = builder0.converter;
        org.junit.Assert.assertNull(provider1);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log18);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(errorHandler31);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(errorHandler42);
        org.junit.Assert.assertNull(executor48);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(profiler56);
        org.junit.Assert.assertNotNull(server57);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(executor64);
        org.junit.Assert.assertNull(executor65);
        org.junit.Assert.assertNull(errorHandler67);
        org.junit.Assert.assertNotNull(log73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(log78);
        org.junit.Assert.assertNotNull(restAdapter79);
        org.junit.Assert.assertNotNull(executor80);
        org.junit.Assert.assertNull(converter83);
    }

    @Test
    public void test04635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04635");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.converter.Converter converter4 = builder0.converter;
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler8 = builder7.errorHandler;
        retrofit.client.Client.Provider provider9 = null;
        builder7.clientProvider = provider9;
        retrofit.Server server13 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder14 = builder7.setServer(server13);
        retrofit.converter.Converter converter15 = null;
        builder14.converter = converter15;
        retrofit.RestAdapter restAdapter17 = builder14.build();
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler19 = builder18.errorHandler;
        java.util.concurrent.Executor executor20 = null;
        builder18.callbackExecutor = executor20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider23 = builder22.clientProvider;
        java.util.concurrent.Executor executor24 = null;
        builder22.callbackExecutor = executor24;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.Server server29 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder30 = builder26.setServer(server29);
        java.lang.String str31 = server29.getUrl();
        retrofit.RestAdapter.Builder builder32 = builder22.setServer(server29);
        retrofit.RestAdapter.Builder builder33 = builder18.setServer(server29);
        restAdapter17.server = server29;
        java.util.concurrent.Executor executor35 = restAdapter17.httpExecutor;
        java.util.concurrent.Executor executor36 = restAdapter17.callbackExecutor;
        builder0.httpExecutor = executor36;
        retrofit.Server server38 = builder0.server;
        java.lang.String str39 = server38.getName();
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(restAdapter17);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(provider23);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(executor35);
        org.junit.Assert.assertNotNull(executor36);
        org.junit.Assert.assertNotNull(server38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "default" + "'", str39, "default");
    }

    @Test
    public void test04636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04636");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        builder0.requestInterceptor = requestInterceptor2;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("default");
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler8 = restAdapter7.new RestHandler();
        retrofit.ErrorHandler errorHandler9 = restAdapter7.errorHandler;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider11 = builder10.clientProvider;
        java.util.concurrent.Executor executor12 = null;
        builder10.callbackExecutor = executor12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.Server server17 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder18 = builder14.setServer(server17);
        java.lang.String str19 = server17.getUrl();
        retrofit.RestAdapter.Builder builder20 = builder10.setServer(server17);
        builder10.ensureSaneDefaults();
        java.util.concurrent.Executor executor22 = builder10.callbackExecutor;
        restAdapter7.httpExecutor = executor22;
        builder0.callbackExecutor = executor22;
        retrofit.Server server25 = builder0.server;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler27 = builder26.errorHandler;
        retrofit.Server server30 = new retrofit.Server("", "");
        builder26.server = server30;
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        builder26.log = log32;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler35 = builder34.errorHandler;
        retrofit.client.Client.Provider provider36 = null;
        builder34.clientProvider = provider36;
        retrofit.Server server40 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder41 = builder34.setServer(server40);
        retrofit.converter.Converter converter42 = null;
        builder41.converter = converter42;
        retrofit.RestAdapter restAdapter44 = builder41.build();
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler46 = builder45.errorHandler;
        java.util.concurrent.Executor executor47 = null;
        builder45.callbackExecutor = executor47;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider50 = builder49.clientProvider;
        java.util.concurrent.Executor executor51 = null;
        builder49.callbackExecutor = executor51;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.Server server56 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder57 = builder53.setServer(server56);
        java.lang.String str58 = server56.getUrl();
        retrofit.RestAdapter.Builder builder59 = builder49.setServer(server56);
        retrofit.RestAdapter.Builder builder60 = builder45.setServer(server56);
        restAdapter44.server = server56;
        java.util.concurrent.Executor executor62 = restAdapter44.httpExecutor;
        builder26.httpExecutor = executor62;
        builder0.httpExecutor = executor62;
        retrofit.client.Client.Provider provider65 = builder0.clientProvider;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(executor22);
        org.junit.Assert.assertNotNull(server25);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertNull(errorHandler35);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(restAdapter44);
        org.junit.Assert.assertNull(errorHandler46);
        org.junit.Assert.assertNull(provider50);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(executor62);
        org.junit.Assert.assertNotNull(provider65);
    }

    @Test
    public void test04637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04637");
        retrofit.client.Header[] headerArray18 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList19 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList19, headerArray18);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList19, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList19, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList19, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList19, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("default", "hi!", (java.util.List<retrofit.client.Header>) headerList19, typedOutput29);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("default", "", (java.util.List<retrofit.client.Header>) headerList19, typedOutput31);
        retrofit.mime.TypedOutput typedOutput33 = null;
        retrofit.client.Request request34 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList19, typedOutput33);
        retrofit.mime.TypedOutput typedOutput35 = null;
        retrofit.client.Request request36 = new retrofit.client.Request("default", "hi!", (java.util.List<retrofit.client.Header>) headerList19, typedOutput35);
        retrofit.mime.TypedOutput typedOutput37 = null;
        retrofit.client.Request request38 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList19, typedOutput37);
        java.lang.String str39 = request38.getMethod();
        java.lang.String str40 = request38.getUrl();
        org.junit.Assert.assertNotNull(headerArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
    }

    @Test
    public void test04638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04638");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter0.requestInterceptor;
        retrofit.ErrorHandler errorHandler17 = restAdapter0.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter0.new RestHandler();
        retrofit.ErrorHandler errorHandler20 = restAdapter0.errorHandler;
        retrofit.client.Client.Provider provider21 = restAdapter0.clientProvider;
        retrofit.converter.Converter converter22 = null;
        restAdapter0.converter = converter22;
        retrofit.RequestInterceptor requestInterceptor24 = restAdapter0.requestInterceptor;
        retrofit.client.Client.Provider provider25 = restAdapter0.clientProvider;
        java.lang.Throwable throwable26 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable26, "default");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNull(provider21);
        org.junit.Assert.assertNull(requestInterceptor24);
        org.junit.Assert.assertNull(provider25);
    }

    @Test
    public void test04639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04639");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.Server server7 = new retrofit.Server("default", "hi!");
        java.lang.String str8 = server7.getUrl();
        retrofit.RestAdapter.Builder builder9 = builder4.setServer(server7);
        retrofit.RestAdapter.LogLevel logLevel10 = builder9.logLevel;
        retrofit.ErrorHandler errorHandler11 = builder9.errorHandler;
        retrofit.converter.Converter converter12 = builder9.converter;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.Server server16 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder17 = builder13.setServer(server16);
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor19 = restAdapter18.callbackExecutor;
        java.util.concurrent.Executor executor20 = restAdapter18.callbackExecutor;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler22 = restAdapter21.errorHandler;
        retrofit.Server server25 = new retrofit.Server("", "");
        restAdapter21.server = server25;
        restAdapter18.server = server25;
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        restAdapter18.log = log28;
        retrofit.RestAdapter.Builder builder30 = builder17.setLog(log28);
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder32 = builder17.setLogLevel(logLevel31);
        retrofit.Profiler profiler33 = null;
        builder32.profiler = profiler33;
        java.util.concurrent.Executor executor35 = null;
        builder32.httpExecutor = executor35;
        retrofit.RestAdapter restAdapter37 = builder32.build();
        retrofit.converter.Converter converter38 = restAdapter37.converter;
        retrofit.RestAdapter.Builder builder39 = builder9.setConverter(converter38);
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "default" + "'", str8, "default");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(converter12);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(restAdapter37);
        org.junit.Assert.assertNotNull(converter38);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test04640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04640");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server6 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder7 = builder0.setServer(server6);
        retrofit.Server server10 = new retrofit.Server("", "");
        builder7.server = server10;
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler14 = builder13.errorHandler;
        retrofit.client.Client.Provider provider15 = null;
        builder13.clientProvider = provider15;
        retrofit.Server server19 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder20 = builder13.setServer(server19);
        retrofit.converter.Converter converter21 = null;
        builder20.converter = converter21;
        retrofit.RestAdapter restAdapter23 = builder20.build();
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler25 = builder24.errorHandler;
        java.util.concurrent.Executor executor26 = null;
        builder24.callbackExecutor = executor26;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider29 = builder28.clientProvider;
        java.util.concurrent.Executor executor30 = null;
        builder28.callbackExecutor = executor30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.Server server35 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder36 = builder32.setServer(server35);
        java.lang.String str37 = server35.getUrl();
        retrofit.RestAdapter.Builder builder38 = builder28.setServer(server35);
        retrofit.RestAdapter.Builder builder39 = builder24.setServer(server35);
        restAdapter23.server = server35;
        java.lang.String str41 = server35.getName();
        retrofit.RestAdapter.Builder builder42 = builder7.setServer(server35);
        builder7.ensureSaneDefaults();
        retrofit.Server server44 = builder7.server;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(restAdapter23);
        org.junit.Assert.assertNull(errorHandler25);
        org.junit.Assert.assertNull(provider29);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(server44);
    }

    @Test
    public void test04641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04641");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server6 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder7 = builder0.setServer(server6);
        retrofit.Server server10 = new retrofit.Server("", "");
        builder7.server = server10;
        retrofit.converter.Converter converter12 = null;
        builder7.converter = converter12;
        retrofit.Server server15 = new retrofit.Server("default");
        retrofit.RestAdapter.Builder builder16 = builder7.setServer(server15);
        java.util.concurrent.Executor executor17 = builder7.httpExecutor;
        retrofit.converter.Converter converter18 = builder7.converter;
        retrofit.RestAdapter.LogLevel logLevel19 = builder7.logLevel;
        retrofit.ErrorHandler errorHandler20 = builder7.errorHandler;
        retrofit.converter.Converter converter21 = builder7.converter;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(converter18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNull(converter21);
    }

    @Test
    public void test04642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04642");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter0.logLevel;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler21 = builder20.errorHandler;
        retrofit.ErrorHandler errorHandler22 = builder20.errorHandler;
        retrofit.Profiler profiler23 = builder20.profiler;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor25 = restAdapter24.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler26 = restAdapter24.new RestHandler();
        retrofit.Server server29 = new retrofit.Server("hi!", "hi!");
        restAdapter24.server = server29;
        retrofit.RestAdapter.Builder builder31 = builder20.setServer(server29);
        retrofit.converter.Converter converter32 = null;
        builder31.converter = converter32;
        retrofit.Profiler profiler34 = null;
        builder31.profiler = profiler34;
        retrofit.RestAdapter restAdapter36 = builder31.build();
        java.util.concurrent.Executor executor37 = builder31.callbackExecutor;
        restAdapter0.httpExecutor = executor37;
        retrofit.RestAdapter.LogLevel logLevel39 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.setLogLevel(logLevel39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log level may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNull(profiler23);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(restAdapter36);
        org.junit.Assert.assertNotNull(executor37);
    }

    @Test
    public void test04643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04643");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server4 = new retrofit.Server("", "");
        builder0.server = server4;
        java.util.concurrent.Executor executor6 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor7 = builder0.requestInterceptor;
        retrofit.Server server8 = builder0.server;
        java.lang.String str9 = server8.getUrl();
        java.lang.String str10 = server8.getName();
        java.lang.String str11 = server8.getUrl();
        java.lang.String str12 = server8.getName();
        java.lang.String str13 = server8.getUrl();
        java.lang.String str14 = server8.getName();
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(server8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test04644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04644");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.Profiler profiler3 = builder0.profiler;
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor5 = restAdapter4.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.Server server9 = new retrofit.Server("hi!", "hi!");
        restAdapter4.server = server9;
        retrofit.RestAdapter.Builder builder11 = builder0.setServer(server9);
        retrofit.converter.Converter converter12 = null;
        builder11.converter = converter12;
        builder11.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter15 = builder11.build();
        retrofit.RequestInterceptor requestInterceptor16 = builder11.requestInterceptor;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler18 = builder17.errorHandler;
        retrofit.ErrorHandler errorHandler19 = builder17.errorHandler;
        retrofit.RestAdapter.Log log20 = null;
        builder17.log = log20;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean23 = logLevel22.log();
        builder17.logLevel = logLevel22;
        retrofit.RestAdapter.Builder builder25 = builder11.setLogLevel(logLevel22);
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor27 = restAdapter26.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler28 = restAdapter26.new RestHandler();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor30 = restAdapter29.callbackExecutor;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor32 = restAdapter31.callbackExecutor;
        java.util.concurrent.Executor executor33 = restAdapter31.callbackExecutor;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler35 = restAdapter34.errorHandler;
        retrofit.Server server38 = new retrofit.Server("", "");
        restAdapter34.server = server38;
        restAdapter31.server = server38;
        restAdapter29.server = server38;
        retrofit.Profiler profiler42 = restAdapter29.profiler;
        retrofit.ErrorHandler errorHandler43 = null;
        restAdapter29.errorHandler = errorHandler43;
        retrofit.Profiler profiler45 = null;
        restAdapter29.profiler = profiler45;
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter29.logLevel = logLevel48;
        restAdapter26.logLevel = logLevel48;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.Server server54 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder55 = builder51.setServer(server54);
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor57 = restAdapter56.callbackExecutor;
        java.util.concurrent.Executor executor58 = restAdapter56.callbackExecutor;
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler60 = restAdapter59.errorHandler;
        retrofit.Server server63 = new retrofit.Server("", "");
        restAdapter59.server = server63;
        restAdapter56.server = server63;
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        restAdapter56.log = log66;
        retrofit.RestAdapter.Builder builder68 = builder55.setLog(log66);
        retrofit.RestAdapter.LogLevel logLevel69 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder70 = builder55.setLogLevel(logLevel69);
        retrofit.Profiler profiler71 = null;
        builder70.profiler = profiler71;
        retrofit.converter.Converter converter73 = null;
        builder70.converter = converter73;
        retrofit.ErrorHandler errorHandler75 = null;
        builder70.errorHandler = errorHandler75;
        retrofit.RestAdapter restAdapter77 = builder70.build();
        retrofit.ErrorHandler errorHandler78 = builder70.errorHandler;
        restAdapter26.errorHandler = errorHandler78;
        retrofit.ErrorHandler errorHandler80 = restAdapter26.errorHandler;
        builder11.errorHandler = errorHandler80;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(restAdapter15);
        org.junit.Assert.assertNotNull(requestInterceptor16);
        org.junit.Assert.assertNull(errorHandler18);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertNull(errorHandler35);
        org.junit.Assert.assertNull(profiler42);
        org.junit.Assert.assertNull(logLevel47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(executor57);
        org.junit.Assert.assertNull(executor58);
        org.junit.Assert.assertNull(errorHandler60);
        org.junit.Assert.assertNotNull(log66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(restAdapter77);
        org.junit.Assert.assertNotNull(errorHandler78);
        org.junit.Assert.assertNotNull(errorHandler80);
    }

    @Test
    public void test04645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04645");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server4 = new retrofit.Server("", "");
        builder0.server = server4;
        retrofit.RestAdapter restAdapter6 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor7 = restAdapter6.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler8 = restAdapter6.new RestHandler();
        retrofit.Server server11 = new retrofit.Server("hi!", "hi!");
        restAdapter6.server = server11;
        retrofit.RestAdapter.Builder builder13 = builder0.setServer(server11);
        retrofit.RestAdapter.Log log14 = builder0.log;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler16 = builder15.errorHandler;
        retrofit.ErrorHandler errorHandler17 = builder15.errorHandler;
        retrofit.Profiler profiler18 = builder15.profiler;
        retrofit.RestAdapter.Log log19 = builder15.log;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.FULL;
        builder15.logLevel = logLevel20;
        retrofit.RestAdapter.Builder builder22 = builder0.setLogLevel(logLevel20);
        retrofit.Profiler profiler23 = builder0.profiler;
        retrofit.RestAdapter restAdapter24 = builder0.build();
        retrofit.client.Response response26 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response28 = restAdapter24.logAndReplaceResponse("default", response26, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(log14);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(profiler18);
        org.junit.Assert.assertNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(profiler23);
        org.junit.Assert.assertNotNull(restAdapter24);
    }

    @Test
    public void test04646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04646");
        retrofit.client.Header[] headerArray10 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList11 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList11, headerArray10);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList11, typedOutput13);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList11, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("", "default", (java.util.List<retrofit.client.Header>) headerList11, typedOutput17);
        java.util.List<retrofit.client.Header> headerList19 = request18.getHeaders();
        retrofit.mime.TypedOutput typedOutput20 = null;
        retrofit.client.Request request21 = new retrofit.client.Request("hi!", "default", headerList19, typedOutput20);
        retrofit.mime.TypedOutput typedOutput22 = null;
        retrofit.client.Request request23 = new retrofit.client.Request("hi!", "default", headerList19, typedOutput22);
        retrofit.mime.TypedOutput typedOutput24 = request23.getBody();
        org.junit.Assert.assertNotNull(headerArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(headerList19);
        org.junit.Assert.assertNull(typedOutput24);
    }

    @Test
    public void test04647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04647");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.ErrorHandler errorHandler3 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler7 = builder6.errorHandler;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.Server server11 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder12 = builder8.setServer(server11);
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor14 = restAdapter13.callbackExecutor;
        java.util.concurrent.Executor executor15 = restAdapter13.callbackExecutor;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler17 = restAdapter16.errorHandler;
        retrofit.Server server20 = new retrofit.Server("", "");
        restAdapter16.server = server20;
        restAdapter13.server = server20;
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        restAdapter13.log = log23;
        retrofit.RestAdapter.Builder builder25 = builder12.setLog(log23);
        retrofit.RestAdapter.Builder builder26 = builder6.setLog(log23);
        builder0.log = log23;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler29 = builder28.errorHandler;
        retrofit.client.Client.Provider provider30 = null;
        builder28.clientProvider = provider30;
        retrofit.Server server34 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder35 = builder28.setServer(server34);
        retrofit.converter.Converter converter36 = null;
        builder35.converter = converter36;
        retrofit.RestAdapter restAdapter38 = builder35.build();
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler40 = builder39.errorHandler;
        java.util.concurrent.Executor executor41 = null;
        builder39.callbackExecutor = executor41;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider44 = builder43.clientProvider;
        java.util.concurrent.Executor executor45 = null;
        builder43.callbackExecutor = executor45;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.Server server50 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder51 = builder47.setServer(server50);
        java.lang.String str52 = server50.getUrl();
        retrofit.RestAdapter.Builder builder53 = builder43.setServer(server50);
        retrofit.RestAdapter.Builder builder54 = builder39.setServer(server50);
        restAdapter38.server = server50;
        retrofit.client.Client.Provider provider56 = restAdapter38.clientProvider;
        retrofit.RestAdapter.Builder builder57 = builder0.setClient(provider56);
        retrofit.RestAdapter restAdapter58 = builder0.build();
        retrofit.Profiler profiler59 = null;
        restAdapter58.profiler = profiler59;
        retrofit.client.Header[] headerArray69 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList70 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList70, headerArray69);
        retrofit.mime.TypedOutput typedOutput72 = null;
        retrofit.client.Request request73 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList70, typedOutput72);
        retrofit.mime.TypedOutput typedOutput74 = null;
        retrofit.client.Request request75 = new retrofit.client.Request("", "default", (java.util.List<retrofit.client.Header>) headerList70, typedOutput74);
        retrofit.mime.TypedOutput typedOutput76 = null;
        retrofit.client.Request request77 = new retrofit.client.Request("default", "", (java.util.List<retrofit.client.Header>) headerList70, typedOutput76);
        retrofit.mime.TypedOutput typedOutput78 = null;
        retrofit.client.Request request79 = new retrofit.client.Request("default", "hi!", (java.util.List<retrofit.client.Header>) headerList70, typedOutput78);
        retrofit.client.Request request80 = restAdapter58.logAndReplaceRequest(request79);
        java.lang.String str81 = request79.getMethod();
        java.lang.String str82 = request79.getUrl();
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(restAdapter38);
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNull(provider44);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(provider56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(restAdapter58);
        org.junit.Assert.assertNotNull(headerArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(request80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "default" + "'", str81, "default");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "hi!" + "'", str82, "hi!");
    }

    @Test
    public void test04648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04648");
        retrofit.client.Header[] headerArray22 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList23 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList23, headerArray22);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList23, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList23, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList23, typedOutput29);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList23, typedOutput31);
        retrofit.mime.TypedOutput typedOutput33 = null;
        retrofit.client.Request request34 = new retrofit.client.Request("default", "hi!", (java.util.List<retrofit.client.Header>) headerList23, typedOutput33);
        java.util.List<retrofit.client.Header> headerList35 = request34.getHeaders();
        retrofit.mime.TypedOutput typedOutput36 = null;
        retrofit.client.Request request37 = new retrofit.client.Request("hi!", "default", headerList35, typedOutput36);
        retrofit.mime.TypedOutput typedOutput38 = null;
        retrofit.client.Request request39 = new retrofit.client.Request("", "default", headerList35, typedOutput38);
        retrofit.mime.TypedOutput typedOutput40 = null;
        retrofit.client.Request request41 = new retrofit.client.Request("default", "", headerList35, typedOutput40);
        retrofit.mime.TypedOutput typedOutput42 = null;
        retrofit.client.Request request43 = new retrofit.client.Request("", "default", headerList35, typedOutput42);
        retrofit.mime.TypedOutput typedOutput44 = null;
        retrofit.client.Request request45 = new retrofit.client.Request("default", "", headerList35, typedOutput44);
        retrofit.mime.TypedOutput typedOutput46 = null;
        retrofit.client.Request request47 = new retrofit.client.Request("default", "hi!", headerList35, typedOutput46);
        org.junit.Assert.assertNotNull(headerArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(headerList35);
    }

    @Test
    public void test04649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04649");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        restAdapter5.log = log15;
        retrofit.RestAdapter.Builder builder17 = builder4.setLog(log15);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder19 = builder4.setLogLevel(logLevel18);
        retrofit.Profiler profiler20 = null;
        builder19.profiler = profiler20;
        retrofit.Profiler profiler22 = null;
        builder19.profiler = profiler22;
        retrofit.Profiler profiler24 = null;
        builder19.profiler = profiler24;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler27 = builder26.errorHandler;
        retrofit.ErrorHandler errorHandler28 = builder26.errorHandler;
        retrofit.RestAdapter.Log log29 = null;
        builder26.log = log29;
        retrofit.Server server31 = builder26.server;
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        log32.log("hi!");
        log32.log("");
        retrofit.RestAdapter.Builder builder37 = builder26.setLog(log32);
        retrofit.RestAdapter.Builder builder38 = builder19.setLog(log32);
        java.util.concurrent.Executor executor39 = null;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler41 = builder40.errorHandler;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        builder40.requestInterceptor = requestInterceptor42;
        java.util.concurrent.Executor executor44 = builder40.httpExecutor;
        retrofit.Server server45 = null;
        retrofit.client.Client.Provider provider46 = null;
        java.util.concurrent.Executor executor47 = null;
        java.util.concurrent.Executor executor48 = null;
        retrofit.RequestInterceptor requestInterceptor49 = null;
        retrofit.converter.Converter converter50 = null;
        retrofit.Profiler profiler51 = null;
        retrofit.ErrorHandler errorHandler52 = null;
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        log53.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter(server45, provider46, executor47, executor48, requestInterceptor49, converter50, profiler51, errorHandler52, log53, logLevel56);
        retrofit.RequestInterceptor requestInterceptor58 = null;
        restAdapter57.requestInterceptor = requestInterceptor58;
        retrofit.ErrorHandler errorHandler60 = restAdapter57.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler61 = restAdapter57.new RestHandler();
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler63 = builder62.errorHandler;
        retrofit.client.Client.Provider provider64 = null;
        builder62.clientProvider = provider64;
        retrofit.converter.Converter converter66 = builder62.converter;
        retrofit.RestAdapter.LogLevel logLevel67 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder68 = builder62.setLogLevel(logLevel67);
        restAdapter57.setLogLevel(logLevel67);
        boolean boolean70 = logLevel67.log();
        retrofit.RestAdapter.Builder builder71 = builder40.setLogLevel(logLevel67);
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler73 = builder72.errorHandler;
        retrofit.client.Client.Provider provider74 = null;
        builder72.clientProvider = provider74;
        retrofit.Server server78 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder79 = builder72.setServer(server78);
        retrofit.converter.Converter converter80 = null;
        builder79.converter = converter80;
        retrofit.RestAdapter restAdapter82 = builder79.build();
        retrofit.Profiler profiler83 = builder79.profiler;
        retrofit.Profiler profiler84 = builder79.profiler;
        java.util.concurrent.Executor executor85 = builder79.httpExecutor;
        builder40.httpExecutor = executor85;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder87 = builder19.setExecutors(executor39, executor85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: HTTP executor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertNull(server31);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(errorHandler41);
        org.junit.Assert.assertNull(executor44);
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler60);
        org.junit.Assert.assertNull(errorHandler63);
        org.junit.Assert.assertNull(converter66);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNull(errorHandler73);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(restAdapter82);
        org.junit.Assert.assertNull(profiler83);
        org.junit.Assert.assertNull(profiler84);
        org.junit.Assert.assertNotNull(executor85);
    }

    @Test
    public void test04650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04650");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server4 = new retrofit.Server("", "");
        builder0.server = server4;
        java.util.concurrent.Executor executor6 = null;
        builder0.httpExecutor = executor6;
        retrofit.RestAdapter.Builder builder9 = builder0.setServer("default");
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler11 = builder10.errorHandler;
        retrofit.ErrorHandler errorHandler12 = builder10.errorHandler;
        retrofit.RestAdapter.Log log13 = null;
        builder10.log = log13;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        builder10.requestInterceptor = requestInterceptor15;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor18 = restAdapter17.callbackExecutor;
        java.util.concurrent.Executor executor19 = restAdapter17.callbackExecutor;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler21 = restAdapter20.errorHandler;
        retrofit.Server server24 = new retrofit.Server("", "");
        restAdapter20.server = server24;
        restAdapter17.server = server24;
        retrofit.RestAdapter.Builder builder27 = builder10.setServer(server24);
        retrofit.RestAdapter.LogLevel logLevel28 = builder10.logLevel;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler30 = builder29.errorHandler;
        retrofit.Server server33 = new retrofit.Server("", "");
        builder29.server = server33;
        retrofit.client.Client.Provider provider35 = null;
        java.util.concurrent.Executor executor36 = null;
        java.util.concurrent.Executor executor37 = null;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        retrofit.converter.Converter converter39 = null;
        retrofit.Profiler profiler40 = null;
        retrofit.ErrorHandler errorHandler41 = null;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler43 = builder42.errorHandler;
        retrofit.Server server46 = new retrofit.Server("", "");
        builder42.server = server46;
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        builder42.log = log48;
        retrofit.Server server50 = null;
        retrofit.client.Client.Provider provider51 = null;
        java.util.concurrent.Executor executor52 = null;
        java.util.concurrent.Executor executor53 = null;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        retrofit.converter.Converter converter55 = null;
        retrofit.Profiler profiler56 = null;
        retrofit.ErrorHandler errorHandler57 = null;
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        log58.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel61 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter(server50, provider51, executor52, executor53, requestInterceptor54, converter55, profiler56, errorHandler57, log58, logLevel61);
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter(server33, provider35, executor36, executor37, requestInterceptor38, converter39, profiler40, errorHandler41, log48, logLevel61);
        retrofit.RestAdapter.Builder builder64 = builder10.setServer(server33);
        java.lang.String str65 = server33.getUrl();
        retrofit.RestAdapter.Builder builder66 = builder0.setServer(server33);
        retrofit.Profiler profiler67 = builder0.profiler;
        retrofit.Profiler profiler68 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder69 = builder0.setProfiler(profiler68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler30);
        org.junit.Assert.assertNull(errorHandler43);
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertNotNull(log58);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(profiler67);
    }

    @Test
    public void test04651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04651");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean6 = logLevel5.log();
        builder0.logLevel = logLevel5;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler9 = restAdapter8.new RestHandler();
        java.util.concurrent.Executor executor10 = null;
        restAdapter8.callbackExecutor = executor10;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor13 = restAdapter12.callbackExecutor;
        java.util.concurrent.Executor executor14 = restAdapter12.callbackExecutor;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler16 = restAdapter15.errorHandler;
        retrofit.Server server19 = new retrofit.Server("", "");
        restAdapter15.server = server19;
        restAdapter12.server = server19;
        restAdapter8.server = server19;
        retrofit.RestAdapter.Builder builder23 = builder0.setServer(server19);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler25 = builder24.errorHandler;
        java.util.concurrent.Executor executor26 = null;
        builder24.callbackExecutor = executor26;
        java.util.concurrent.Executor executor28 = null;
        builder24.httpExecutor = executor28;
        retrofit.Profiler profiler30 = null;
        builder24.profiler = profiler30;
        retrofit.RestAdapter.Builder builder33 = builder24.setServer("hi!");
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler35 = builder34.errorHandler;
        java.util.concurrent.Executor executor36 = builder34.callbackExecutor;
        retrofit.RestAdapter.Builder builder38 = builder34.setServer("hi!");
        builder38.ensureSaneDefaults();
        retrofit.Server server40 = null;
        retrofit.client.Client.Provider provider41 = null;
        java.util.concurrent.Executor executor42 = null;
        java.util.concurrent.Executor executor43 = null;
        retrofit.RequestInterceptor requestInterceptor44 = null;
        retrofit.converter.Converter converter45 = null;
        retrofit.Profiler profiler46 = null;
        retrofit.ErrorHandler errorHandler47 = null;
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        log48.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter(server40, provider41, executor42, executor43, requestInterceptor44, converter45, profiler46, errorHandler47, log48, logLevel51);
        retrofit.RestAdapter.RestHandler restHandler53 = restAdapter52.new RestHandler();
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        restAdapter52.log = log54;
        retrofit.converter.Converter converter56 = null;
        restAdapter52.converter = converter56;
        retrofit.RestAdapter.LogLevel logLevel58 = restAdapter52.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor59 = null;
        restAdapter52.requestInterceptor = requestInterceptor59;
        retrofit.RestAdapter.LogLevel logLevel61 = restAdapter52.logLevel;
        retrofit.RestAdapter.Builder builder62 = builder38.setLogLevel(logLevel61);
        builder33.logLevel = logLevel61;
        retrofit.RestAdapter.Builder builder64 = builder0.setLogLevel(logLevel61);
        retrofit.ErrorHandler errorHandler65 = builder0.errorHandler;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(errorHandler25);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(errorHandler35);
        org.junit.Assert.assertNull(executor36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(errorHandler65);
    }

    @Test
    public void test04652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04652");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        builder4.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler7 = builder6.errorHandler;
        retrofit.ErrorHandler errorHandler8 = builder6.errorHandler;
        retrofit.RestAdapter.Log log9 = null;
        builder6.log = log9;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean12 = logLevel11.log();
        builder6.logLevel = logLevel11;
        retrofit.ErrorHandler errorHandler14 = builder6.errorHandler;
        retrofit.RestAdapter.Builder builder16 = builder6.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor17 = null;
        builder16.requestInterceptor = requestInterceptor17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler20 = builder19.errorHandler;
        retrofit.client.Client.Provider provider21 = null;
        builder19.clientProvider = provider21;
        retrofit.Server server25 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder26 = builder19.setServer(server25);
        retrofit.client.Client.Provider provider27 = null;
        java.util.concurrent.Executor executor28 = null;
        java.util.concurrent.Executor executor29 = null;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        retrofit.converter.Converter converter31 = null;
        retrofit.Profiler profiler32 = null;
        retrofit.ErrorHandler errorHandler33 = null;
        retrofit.Server server34 = null;
        retrofit.client.Client.Provider provider35 = null;
        java.util.concurrent.Executor executor36 = null;
        java.util.concurrent.Executor executor37 = null;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        retrofit.converter.Converter converter39 = null;
        retrofit.Profiler profiler40 = null;
        retrofit.ErrorHandler errorHandler41 = null;
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        log42.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter(server34, provider35, executor36, executor37, requestInterceptor38, converter39, profiler40, errorHandler41, log42, logLevel45);
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter(server25, provider27, executor28, executor29, requestInterceptor30, converter31, profiler32, errorHandler33, log42, logLevel47);
        log42.log("");
        builder16.log = log42;
        retrofit.RestAdapter.Log log52 = builder16.log;
        retrofit.RestAdapter.Builder builder53 = builder4.setLog(log52);
        retrofit.Profiler profiler54 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder55 = builder4.setProfiler(profiler54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test04653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04653");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.ErrorHandler errorHandler3 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider7 = builder6.clientProvider;
        java.util.concurrent.Executor executor8 = null;
        builder6.callbackExecutor = executor8;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.Server server13 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder14 = builder10.setServer(server13);
        java.lang.String str15 = server13.getUrl();
        retrofit.RestAdapter.Builder builder16 = builder6.setServer(server13);
        retrofit.RestAdapter.Builder builder17 = builder5.setServer(server13);
        retrofit.converter.Converter converter18 = builder17.converter;
        retrofit.RequestInterceptor requestInterceptor19 = builder17.requestInterceptor;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler21 = builder20.errorHandler;
        retrofit.ErrorHandler errorHandler22 = builder20.errorHandler;
        java.util.concurrent.Executor executor23 = builder20.callbackExecutor;
        retrofit.Profiler profiler24 = builder20.profiler;
        builder20.ensureSaneDefaults();
        builder20.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler28 = builder27.errorHandler;
        retrofit.ErrorHandler errorHandler29 = builder27.errorHandler;
        retrofit.RestAdapter.Log log30 = null;
        builder27.log = log30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler33 = builder32.errorHandler;
        retrofit.client.Client.Provider provider34 = null;
        builder32.clientProvider = provider34;
        retrofit.Server server38 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder39 = builder32.setServer(server38);
        retrofit.client.Client.Provider provider40 = null;
        java.util.concurrent.Executor executor41 = null;
        java.util.concurrent.Executor executor42 = null;
        retrofit.RequestInterceptor requestInterceptor43 = null;
        retrofit.converter.Converter converter44 = null;
        retrofit.Profiler profiler45 = null;
        retrofit.ErrorHandler errorHandler46 = null;
        retrofit.Server server47 = null;
        retrofit.client.Client.Provider provider48 = null;
        java.util.concurrent.Executor executor49 = null;
        java.util.concurrent.Executor executor50 = null;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        retrofit.converter.Converter converter52 = null;
        retrofit.Profiler profiler53 = null;
        retrofit.ErrorHandler errorHandler54 = null;
        retrofit.RestAdapter.Log log55 = retrofit.RestAdapter.Log.NONE;
        log55.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter(server47, provider48, executor49, executor50, requestInterceptor51, converter52, profiler53, errorHandler54, log55, logLevel58);
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter(server38, provider40, executor41, executor42, requestInterceptor43, converter44, profiler45, errorHandler46, log55, logLevel60);
        builder27.logLevel = logLevel60;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider64 = builder63.clientProvider;
        java.util.concurrent.Executor executor65 = null;
        builder63.callbackExecutor = executor65;
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        retrofit.Server server70 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder71 = builder67.setServer(server70);
        java.lang.String str72 = server70.getUrl();
        retrofit.RestAdapter.Builder builder73 = builder63.setServer(server70);
        builder63.ensureSaneDefaults();
        retrofit.Server server75 = null;
        retrofit.client.Client.Provider provider76 = null;
        java.util.concurrent.Executor executor77 = null;
        java.util.concurrent.Executor executor78 = null;
        retrofit.RequestInterceptor requestInterceptor79 = null;
        retrofit.converter.Converter converter80 = null;
        retrofit.Profiler profiler81 = null;
        retrofit.ErrorHandler errorHandler82 = null;
        retrofit.RestAdapter.Log log83 = retrofit.RestAdapter.Log.NONE;
        log83.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel86 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter87 = new retrofit.RestAdapter(server75, provider76, executor77, executor78, requestInterceptor79, converter80, profiler81, errorHandler82, log83, logLevel86);
        retrofit.RestAdapter.RestHandler restHandler88 = restAdapter87.new RestHandler();
        retrofit.RestAdapter.Log log89 = retrofit.RestAdapter.Log.NONE;
        restAdapter87.log = log89;
        retrofit.RestAdapter.Builder builder91 = builder63.setLog(log89);
        retrofit.RestAdapter.Builder builder93 = builder63.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor94 = builder63.requestInterceptor;
        retrofit.RestAdapter.Builder builder95 = builder27.setRequestInterceptor(requestInterceptor94);
        retrofit.RestAdapter.Builder builder96 = builder20.setRequestInterceptor(requestInterceptor94);
        retrofit.ErrorHandler errorHandler97 = builder20.errorHandler;
        retrofit.RestAdapter.Builder builder98 = builder17.setErrorHandler(errorHandler97);
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(provider7);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(converter18);
        org.junit.Assert.assertNull(requestInterceptor19);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNull(profiler24);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNull(errorHandler33);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(provider64);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(log83);
        org.junit.Assert.assertTrue("'" + logLevel86 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel86.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log89);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(requestInterceptor94);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNotNull(errorHandler97);
        org.junit.Assert.assertNotNull(builder98);
    }

    @Test
    public void test04654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04654");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        restAdapter12.log = log14;
        retrofit.converter.Converter converter16 = null;
        restAdapter12.converter = converter16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server21 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder22 = builder18.setServer(server21);
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor24 = restAdapter23.callbackExecutor;
        java.util.concurrent.Executor executor25 = restAdapter23.callbackExecutor;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler27 = restAdapter26.errorHandler;
        retrofit.Server server30 = new retrofit.Server("", "");
        restAdapter26.server = server30;
        restAdapter23.server = server30;
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        restAdapter23.log = log33;
        retrofit.RestAdapter.Builder builder35 = builder22.setLog(log33);
        restAdapter12.log = log33;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler38 = builder37.errorHandler;
        retrofit.Server server41 = new retrofit.Server("", "");
        builder37.server = server41;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor44 = restAdapter43.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler45 = restAdapter43.new RestHandler();
        retrofit.Server server48 = new retrofit.Server("hi!", "hi!");
        restAdapter43.server = server48;
        retrofit.RestAdapter.Builder builder50 = builder37.setServer(server48);
        restAdapter12.server = server48;
        retrofit.Profiler profiler52 = restAdapter12.profiler;
        retrofit.Server server53 = restAdapter12.server;
        retrofit.Server server56 = null;
        retrofit.client.Client.Provider provider57 = null;
        java.util.concurrent.Executor executor58 = null;
        java.util.concurrent.Executor executor59 = null;
        retrofit.RequestInterceptor requestInterceptor60 = null;
        retrofit.converter.Converter converter61 = null;
        retrofit.Profiler profiler62 = null;
        retrofit.ErrorHandler errorHandler63 = null;
        retrofit.RestAdapter.Log log64 = retrofit.RestAdapter.Log.NONE;
        log64.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel67 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter(server56, provider57, executor58, executor59, requestInterceptor60, converter61, profiler62, errorHandler63, log64, logLevel67);
        retrofit.RestAdapter.RestHandler restHandler69 = restAdapter68.new RestHandler();
        retrofit.client.Header[] headerArray78 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList79 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList79, headerArray78);
        retrofit.mime.TypedOutput typedOutput81 = null;
        retrofit.client.Request request82 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList79, typedOutput81);
        retrofit.mime.TypedOutput typedOutput83 = null;
        retrofit.client.Request request84 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList79, typedOutput83);
        retrofit.mime.TypedOutput typedOutput85 = null;
        retrofit.client.Request request86 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList79, typedOutput85);
        retrofit.mime.TypedOutput typedOutput87 = null;
        retrofit.client.Request request88 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList79, typedOutput87);
        retrofit.mime.TypedOutput typedOutput89 = request88.getBody();
        retrofit.client.Request request90 = restAdapter68.logAndReplaceRequest(request88);
        java.util.List<retrofit.client.Header> headerList91 = request88.getHeaders();
        retrofit.mime.TypedOutput typedOutput92 = null;
        retrofit.client.Request request93 = new retrofit.client.Request("default", "", headerList91, typedOutput92);
        java.lang.String str94 = request93.getUrl();
        retrofit.client.Request request95 = restAdapter12.logAndReplaceRequest(request93);
        java.util.List<retrofit.client.Header> headerList96 = request93.getHeaders();
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(errorHandler38);
        org.junit.Assert.assertNull(executor44);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(profiler52);
        org.junit.Assert.assertNotNull(server53);
        org.junit.Assert.assertNotNull(log64);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(typedOutput89);
        org.junit.Assert.assertNotNull(request90);
        org.junit.Assert.assertNotNull(headerList91);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertNotNull(request95);
        org.junit.Assert.assertNotNull(headerList96);
    }

    @Test
    public void test04655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04655");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        java.util.concurrent.Executor executor16 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.Server server20 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder21 = builder17.setServer(server20);
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor23 = restAdapter22.callbackExecutor;
        java.util.concurrent.Executor executor24 = restAdapter22.callbackExecutor;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler26 = restAdapter25.errorHandler;
        retrofit.Server server29 = new retrofit.Server("", "");
        restAdapter25.server = server29;
        restAdapter22.server = server29;
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        restAdapter22.log = log32;
        retrofit.RestAdapter.Builder builder34 = builder21.setLog(log32);
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder36 = builder21.setLogLevel(logLevel35);
        retrofit.RestAdapter.Log log37 = builder21.log;
        retrofit.RestAdapter restAdapter38 = builder21.build();
        retrofit.Server server39 = null;
        retrofit.client.Client.Provider provider40 = null;
        java.util.concurrent.Executor executor41 = null;
        java.util.concurrent.Executor executor42 = null;
        retrofit.RequestInterceptor requestInterceptor43 = null;
        retrofit.converter.Converter converter44 = null;
        retrofit.Profiler profiler45 = null;
        retrofit.ErrorHandler errorHandler46 = null;
        retrofit.RestAdapter.Log log47 = retrofit.RestAdapter.Log.NONE;
        log47.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel50 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter(server39, provider40, executor41, executor42, requestInterceptor43, converter44, profiler45, errorHandler46, log47, logLevel50);
        retrofit.RestAdapter.RestHandler restHandler52 = restAdapter51.new RestHandler();
        retrofit.client.Client.Provider provider53 = restAdapter51.clientProvider;
        retrofit.RestAdapter.Log log54 = restAdapter51.log;
        retrofit.RestAdapter.RestHandler restHandler55 = restAdapter51.new RestHandler();
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler57 = builder56.errorHandler;
        java.util.concurrent.Executor executor58 = builder56.callbackExecutor;
        retrofit.RestAdapter.Builder builder60 = builder56.setServer("hi!");
        builder60.ensureSaneDefaults();
        java.util.concurrent.Executor executor62 = builder60.callbackExecutor;
        restAdapter51.callbackExecutor = executor62;
        builder21.callbackExecutor = executor62;
        restAdapter0.callbackExecutor = executor62;
        retrofit.Profiler profiler66 = null;
        restAdapter0.profiler = profiler66;
        retrofit.RestAdapter.Log log68 = restAdapter0.log;
        retrofit.Profiler profiler69 = restAdapter0.profiler;
        retrofit.client.Client.Provider provider70 = restAdapter0.clientProvider;
        java.util.concurrent.Executor executor71 = restAdapter0.httpExecutor;
        retrofit.client.Client.Provider provider72 = restAdapter0.clientProvider;
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        retrofit.Server server76 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder77 = builder73.setServer(server76);
        retrofit.RestAdapter restAdapter78 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor79 = restAdapter78.callbackExecutor;
        java.util.concurrent.Executor executor80 = restAdapter78.callbackExecutor;
        retrofit.RestAdapter restAdapter81 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler82 = restAdapter81.errorHandler;
        retrofit.Server server85 = new retrofit.Server("", "");
        restAdapter81.server = server85;
        restAdapter78.server = server85;
        retrofit.RestAdapter.Log log88 = retrofit.RestAdapter.Log.NONE;
        restAdapter78.log = log88;
        retrofit.RestAdapter.Builder builder90 = builder77.setLog(log88);
        retrofit.RequestInterceptor requestInterceptor91 = builder77.requestInterceptor;
        retrofit.converter.Converter converter92 = builder77.converter;
        retrofit.Server server93 = builder77.server;
        retrofit.RestAdapter.Log log94 = builder77.log;
        restAdapter0.log = log94;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(errorHandler26);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNotNull(restAdapter38);
        org.junit.Assert.assertNotNull(log47);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(provider53);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertNull(errorHandler57);
        org.junit.Assert.assertNull(executor58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(executor62);
        org.junit.Assert.assertNull(log68);
        org.junit.Assert.assertNull(profiler69);
        org.junit.Assert.assertNull(provider70);
        org.junit.Assert.assertNull(executor71);
        org.junit.Assert.assertNull(provider72);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNull(executor79);
        org.junit.Assert.assertNull(executor80);
        org.junit.Assert.assertNull(errorHandler82);
        org.junit.Assert.assertNotNull(log88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNull(requestInterceptor91);
        org.junit.Assert.assertNull(converter92);
        org.junit.Assert.assertNotNull(server93);
        org.junit.Assert.assertNotNull(log94);
    }

    @Test
    public void test04656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04656");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.Profiler profiler19 = restAdapter0.profiler;
        retrofit.Profiler profiler20 = null;
        restAdapter0.profiler = profiler20;
        retrofit.Profiler profiler22 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler23 = restAdapter0.errorHandler;
        retrofit.ErrorHandler errorHandler24 = restAdapter0.errorHandler;
        retrofit.Server server25 = restAdapter0.server;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(profiler19);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNotNull(server25);
    }

    @Test
    public void test04657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04657");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        java.util.concurrent.Executor executor19 = null;
        restAdapter0.callbackExecutor = executor19;
        retrofit.client.Client.Provider provider21 = null;
        restAdapter0.clientProvider = provider21;
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        log23.log("hi!");
        log23.log("");
        restAdapter0.log = log23;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler30 = builder29.errorHandler;
        retrofit.Server server33 = new retrofit.Server("", "");
        builder29.server = server33;
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        builder29.log = log35;
        retrofit.RestAdapter.LogLevel logLevel37 = builder29.logLevel;
        restAdapter0.logLevel = logLevel37;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.Server server42 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder43 = builder39.setServer(server42);
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor45 = restAdapter44.callbackExecutor;
        java.util.concurrent.Executor executor46 = restAdapter44.callbackExecutor;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler48 = restAdapter47.errorHandler;
        retrofit.Server server51 = new retrofit.Server("", "");
        restAdapter47.server = server51;
        restAdapter44.server = server51;
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        restAdapter44.log = log54;
        retrofit.RestAdapter.Builder builder56 = builder43.setLog(log54);
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder58 = builder43.setLogLevel(logLevel57);
        retrofit.Profiler profiler59 = null;
        builder58.profiler = profiler59;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.Server server64 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder65 = builder61.setServer(server64);
        retrofit.RestAdapter.LogLevel logLevel66 = builder65.logLevel;
        retrofit.RestAdapter.Builder builder67 = builder58.setLogLevel(logLevel66);
        retrofit.RestAdapter restAdapter68 = builder58.build();
        retrofit.Server server71 = new retrofit.Server("", "default");
        builder58.server = server71;
        retrofit.Profiler profiler73 = null;
        builder58.profiler = profiler73;
        retrofit.converter.Converter converter75 = builder58.converter;
        restAdapter0.converter = converter75;
        retrofit.RequestInterceptor requestInterceptor77 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel78 = restAdapter0.getLogLevel();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNull(errorHandler30);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertNull(executor46);
        org.junit.Assert.assertNull(errorHandler48);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(restAdapter68);
        org.junit.Assert.assertNotNull(converter75);
        org.junit.Assert.assertNull(requestInterceptor77);
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test04658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04658");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.converter.Converter converter14 = restAdapter0.converter;
        retrofit.ErrorHandler errorHandler15 = null;
        restAdapter0.errorHandler = errorHandler15;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor18 = restAdapter17.callbackExecutor;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor20 = restAdapter19.callbackExecutor;
        java.util.concurrent.Executor executor21 = restAdapter19.callbackExecutor;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler23 = restAdapter22.errorHandler;
        retrofit.Server server26 = new retrofit.Server("", "");
        restAdapter22.server = server26;
        restAdapter19.server = server26;
        restAdapter17.server = server26;
        retrofit.Profiler profiler30 = restAdapter17.profiler;
        retrofit.ErrorHandler errorHandler31 = null;
        restAdapter17.errorHandler = errorHandler31;
        java.util.concurrent.Executor executor33 = restAdapter17.callbackExecutor;
        java.util.concurrent.Executor executor34 = restAdapter17.httpExecutor;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor36 = restAdapter35.callbackExecutor;
        java.util.concurrent.Executor executor37 = restAdapter35.callbackExecutor;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler39 = restAdapter38.errorHandler;
        retrofit.Server server42 = new retrofit.Server("", "");
        restAdapter38.server = server42;
        restAdapter35.server = server42;
        restAdapter17.server = server42;
        restAdapter0.server = server42;
        retrofit.RestAdapter.RestHandler restHandler47 = restAdapter0.new RestHandler();
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor49 = restAdapter48.callbackExecutor;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor51 = restAdapter50.callbackExecutor;
        java.util.concurrent.Executor executor52 = restAdapter50.callbackExecutor;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler54 = restAdapter53.errorHandler;
        retrofit.Server server57 = new retrofit.Server("", "");
        restAdapter53.server = server57;
        restAdapter50.server = server57;
        restAdapter48.server = server57;
        retrofit.Profiler profiler61 = restAdapter48.profiler;
        retrofit.ErrorHandler errorHandler62 = null;
        restAdapter48.errorHandler = errorHandler62;
        retrofit.RequestInterceptor requestInterceptor64 = restAdapter48.requestInterceptor;
        retrofit.ErrorHandler errorHandler65 = restAdapter48.errorHandler;
        java.util.concurrent.Executor executor66 = null;
        restAdapter48.callbackExecutor = executor66;
        retrofit.RestAdapter.RestHandler restHandler68 = restAdapter48.new RestHandler();
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler70 = builder69.errorHandler;
        retrofit.ErrorHandler errorHandler71 = builder69.errorHandler;
        retrofit.RestAdapter.Log log72 = null;
        builder69.log = log72;
        java.util.concurrent.Executor executor74 = builder69.callbackExecutor;
        builder69.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler77 = builder76.errorHandler;
        retrofit.Server server80 = new retrofit.Server("", "");
        builder76.server = server80;
        java.util.concurrent.Executor executor82 = null;
        builder76.httpExecutor = executor82;
        retrofit.RestAdapter.Builder builder85 = builder76.setServer("default");
        retrofit.RestAdapter restAdapter86 = builder76.build();
        java.util.concurrent.Executor executor87 = restAdapter86.httpExecutor;
        builder69.httpExecutor = executor87;
        restAdapter48.httpExecutor = executor87;
        restAdapter0.callbackExecutor = executor87;
        retrofit.client.Response response92 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response94 = restAdapter0.logAndReplaceResponse("hi!", response92, (long) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNull(profiler30);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertNull(executor34);
        org.junit.Assert.assertNull(executor36);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNull(executor49);
        org.junit.Assert.assertNull(executor51);
        org.junit.Assert.assertNull(executor52);
        org.junit.Assert.assertNull(errorHandler54);
        org.junit.Assert.assertNull(profiler61);
        org.junit.Assert.assertNull(requestInterceptor64);
        org.junit.Assert.assertNull(errorHandler65);
        org.junit.Assert.assertNull(errorHandler70);
        org.junit.Assert.assertNull(errorHandler71);
        org.junit.Assert.assertNull(executor74);
        org.junit.Assert.assertNull(errorHandler77);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(restAdapter86);
        org.junit.Assert.assertNotNull(executor87);
    }

    @Test
    public void test04659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04659");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = builder2.errorHandler;
        retrofit.Server server6 = new retrofit.Server("", "");
        builder2.server = server6;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler16 = builder15.errorHandler;
        retrofit.Server server19 = new retrofit.Server("", "");
        builder15.server = server19;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        builder15.log = log21;
        retrofit.Server server23 = null;
        retrofit.client.Client.Provider provider24 = null;
        java.util.concurrent.Executor executor25 = null;
        java.util.concurrent.Executor executor26 = null;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        retrofit.converter.Converter converter28 = null;
        retrofit.Profiler profiler29 = null;
        retrofit.ErrorHandler errorHandler30 = null;
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        log31.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server23, provider24, executor25, executor26, requestInterceptor27, converter28, profiler29, errorHandler30, log31, logLevel34);
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter(server6, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log21, logLevel34);
        restAdapter0.server = server6;
        retrofit.RestAdapter.RestHandler restHandler38 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler40 = builder39.errorHandler;
        java.util.concurrent.Executor executor41 = null;
        builder39.callbackExecutor = executor41;
        retrofit.converter.Converter converter43 = builder39.converter;
        retrofit.RestAdapter.Builder builder45 = builder39.setServer("default");
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler47 = builder46.errorHandler;
        retrofit.client.Client.Provider provider48 = null;
        builder46.clientProvider = provider48;
        retrofit.Server server52 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder53 = builder46.setServer(server52);
        retrofit.converter.Converter converter54 = null;
        builder53.converter = converter54;
        retrofit.RestAdapter restAdapter56 = builder53.build();
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler58 = builder57.errorHandler;
        java.util.concurrent.Executor executor59 = null;
        builder57.callbackExecutor = executor59;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider62 = builder61.clientProvider;
        java.util.concurrent.Executor executor63 = null;
        builder61.callbackExecutor = executor63;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.Server server68 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder69 = builder65.setServer(server68);
        java.lang.String str70 = server68.getUrl();
        retrofit.RestAdapter.Builder builder71 = builder61.setServer(server68);
        retrofit.RestAdapter.Builder builder72 = builder57.setServer(server68);
        restAdapter56.server = server68;
        retrofit.client.Client.Provider provider74 = restAdapter56.clientProvider;
        builder45.clientProvider = provider74;
        restAdapter0.clientProvider = provider74;
        retrofit.converter.Converter converter77 = restAdapter0.converter;
        retrofit.ErrorHandler errorHandler78 = restAdapter0.errorHandler;
        retrofit.RestAdapter restAdapter79 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor80 = restAdapter79.callbackExecutor;
        retrofit.RestAdapter restAdapter81 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor82 = restAdapter81.callbackExecutor;
        java.util.concurrent.Executor executor83 = restAdapter81.callbackExecutor;
        retrofit.RestAdapter restAdapter84 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler85 = restAdapter84.errorHandler;
        retrofit.Server server88 = new retrofit.Server("", "");
        restAdapter84.server = server88;
        restAdapter81.server = server88;
        restAdapter79.server = server88;
        retrofit.Profiler profiler92 = restAdapter79.profiler;
        retrofit.converter.Converter converter93 = restAdapter79.converter;
        retrofit.ErrorHandler errorHandler94 = null;
        restAdapter79.errorHandler = errorHandler94;
        retrofit.converter.Converter converter96 = restAdapter79.converter;
        retrofit.RestAdapter.LogLevel logLevel97 = restAdapter79.logLevel;
        retrofit.Server server98 = restAdapter79.server;
        restAdapter0.server = server98;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNull(converter43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(errorHandler47);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(restAdapter56);
        org.junit.Assert.assertNull(errorHandler58);
        org.junit.Assert.assertNull(provider62);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hi!" + "'", str70, "hi!");
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(provider74);
        org.junit.Assert.assertNull(converter77);
        org.junit.Assert.assertNull(errorHandler78);
        org.junit.Assert.assertNull(executor80);
        org.junit.Assert.assertNull(executor82);
        org.junit.Assert.assertNull(executor83);
        org.junit.Assert.assertNull(errorHandler85);
        org.junit.Assert.assertNull(profiler92);
        org.junit.Assert.assertNull(converter93);
        org.junit.Assert.assertNull(converter96);
        org.junit.Assert.assertNull(logLevel97);
        org.junit.Assert.assertNotNull(server98);
    }

    @Test
    public void test04660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04660");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.client.Client.Provider provider2 = restAdapter0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor4 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.ErrorHandler errorHandler6 = restAdapter0.errorHandler;
        org.junit.Assert.assertNull(provider2);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
    }

    @Test
    public void test04661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04661");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        restAdapter5.log = log15;
        retrofit.RestAdapter.Builder builder17 = builder4.setLog(log15);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder19 = builder4.setLogLevel(logLevel18);
        retrofit.Profiler profiler20 = null;
        builder19.profiler = profiler20;
        retrofit.converter.Converter converter22 = null;
        builder19.converter = converter22;
        retrofit.ErrorHandler errorHandler24 = null;
        builder19.errorHandler = errorHandler24;
        retrofit.RestAdapter.LogLevel logLevel26 = builder19.logLevel;
        retrofit.Profiler profiler27 = null;
        builder19.profiler = profiler27;
        builder19.ensureSaneDefaults();
        retrofit.client.Client client30 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder31 = builder19.setClient(client30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.FULL));
    }

    @Test
    public void test04662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04662");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        restAdapter12.log = log14;
        retrofit.converter.Converter converter16 = null;
        restAdapter12.converter = converter16;
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter12.new RestHandler();
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor20 = restAdapter19.callbackExecutor;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler22 = builder21.errorHandler;
        retrofit.Server server25 = new retrofit.Server("", "");
        builder21.server = server25;
        retrofit.client.Client.Provider provider27 = null;
        java.util.concurrent.Executor executor28 = null;
        java.util.concurrent.Executor executor29 = null;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        retrofit.converter.Converter converter31 = null;
        retrofit.Profiler profiler32 = null;
        retrofit.ErrorHandler errorHandler33 = null;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler35 = builder34.errorHandler;
        retrofit.Server server38 = new retrofit.Server("", "");
        builder34.server = server38;
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        builder34.log = log40;
        retrofit.Server server42 = null;
        retrofit.client.Client.Provider provider43 = null;
        java.util.concurrent.Executor executor44 = null;
        java.util.concurrent.Executor executor45 = null;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        retrofit.converter.Converter converter47 = null;
        retrofit.Profiler profiler48 = null;
        retrofit.ErrorHandler errorHandler49 = null;
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        log50.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter(server42, provider43, executor44, executor45, requestInterceptor46, converter47, profiler48, errorHandler49, log50, logLevel53);
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter(server25, provider27, executor28, executor29, requestInterceptor30, converter31, profiler32, errorHandler33, log40, logLevel53);
        restAdapter19.server = server25;
        restAdapter12.server = server25;
        retrofit.client.Header[] headerArray66 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList67 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList67, headerArray66);
        retrofit.mime.TypedOutput typedOutput69 = null;
        retrofit.client.Request request70 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList67, typedOutput69);
        retrofit.mime.TypedOutput typedOutput71 = null;
        retrofit.client.Request request72 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList67, typedOutput71);
        retrofit.mime.TypedOutput typedOutput73 = null;
        retrofit.client.Request request74 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList67, typedOutput73);
        retrofit.mime.TypedOutput typedOutput75 = null;
        retrofit.client.Request request76 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList67, typedOutput75);
        retrofit.client.Request request77 = restAdapter12.logAndReplaceRequest(request76);
        retrofit.client.Client.Provider provider78 = restAdapter12.clientProvider;
        retrofit.RequestInterceptor requestInterceptor79 = restAdapter12.requestInterceptor;
        retrofit.Profiler profiler80 = restAdapter12.profiler;
        java.util.concurrent.Executor executor81 = restAdapter12.httpExecutor;
        retrofit.ErrorHandler errorHandler82 = restAdapter12.errorHandler;
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNull(errorHandler35);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(request77);
        org.junit.Assert.assertNull(provider78);
        org.junit.Assert.assertNull(requestInterceptor79);
        org.junit.Assert.assertNull(profiler80);
        org.junit.Assert.assertNull(executor81);
        org.junit.Assert.assertNull(errorHandler82);
    }

    @Test
    public void test04663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04663");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server6 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder7 = builder0.setServer(server6);
        retrofit.converter.Converter converter8 = null;
        builder7.converter = converter8;
        retrofit.RestAdapter restAdapter10 = builder7.build();
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler12 = builder11.errorHandler;
        retrofit.ErrorHandler errorHandler13 = builder11.errorHandler;
        retrofit.Profiler profiler14 = builder11.profiler;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor16 = restAdapter15.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter15.new RestHandler();
        retrofit.Server server20 = new retrofit.Server("hi!", "hi!");
        restAdapter15.server = server20;
        retrofit.RestAdapter.Builder builder22 = builder11.setServer(server20);
        retrofit.converter.Converter converter23 = null;
        builder22.converter = converter23;
        builder22.ensureSaneDefaults();
        retrofit.RestAdapter.Log log26 = null;
        builder22.log = log26;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler29 = builder28.errorHandler;
        retrofit.ErrorHandler errorHandler30 = builder28.errorHandler;
        retrofit.RestAdapter.Log log31 = null;
        builder28.log = log31;
        retrofit.Server server35 = new retrofit.Server("hi!", "hi!");
        builder28.server = server35;
        retrofit.client.Client.Provider provider37 = null;
        builder28.clientProvider = provider37;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor40 = restAdapter39.callbackExecutor;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor42 = restAdapter41.callbackExecutor;
        java.util.concurrent.Executor executor43 = restAdapter41.callbackExecutor;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler45 = restAdapter44.errorHandler;
        retrofit.Server server48 = new retrofit.Server("", "");
        restAdapter44.server = server48;
        restAdapter41.server = server48;
        restAdapter39.server = server48;
        retrofit.Profiler profiler52 = restAdapter39.profiler;
        retrofit.ErrorHandler errorHandler53 = null;
        restAdapter39.errorHandler = errorHandler53;
        retrofit.RequestInterceptor requestInterceptor55 = restAdapter39.requestInterceptor;
        retrofit.RestAdapter.RestHandler restHandler56 = restAdapter39.new RestHandler();
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler58 = builder57.errorHandler;
        retrofit.client.Client.Provider provider59 = null;
        builder57.clientProvider = provider59;
        retrofit.Server server63 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder64 = builder57.setServer(server63);
        retrofit.converter.Converter converter65 = null;
        builder64.converter = converter65;
        retrofit.RestAdapter restAdapter67 = builder64.build();
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler69 = builder68.errorHandler;
        java.util.concurrent.Executor executor70 = null;
        builder68.callbackExecutor = executor70;
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider73 = builder72.clientProvider;
        java.util.concurrent.Executor executor74 = null;
        builder72.callbackExecutor = executor74;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        retrofit.Server server79 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder80 = builder76.setServer(server79);
        java.lang.String str81 = server79.getUrl();
        retrofit.RestAdapter.Builder builder82 = builder72.setServer(server79);
        retrofit.RestAdapter.Builder builder83 = builder68.setServer(server79);
        restAdapter67.server = server79;
        java.util.concurrent.Executor executor85 = restAdapter67.httpExecutor;
        restAdapter39.httpExecutor = executor85;
        builder28.httpExecutor = executor85;
        builder22.callbackExecutor = executor85;
        retrofit.RestAdapter.Log log89 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder90 = builder22.setLog(log89);
        restAdapter10.log = log89;
        retrofit.RestAdapter.RestHandler restHandler92 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler93 = restAdapter10.new RestHandler();
        java.lang.Throwable throwable94 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter10.logException(throwable94, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(restAdapter10);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(profiler14);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNull(errorHandler30);
        org.junit.Assert.assertNull(executor40);
        org.junit.Assert.assertNull(executor42);
        org.junit.Assert.assertNull(executor43);
        org.junit.Assert.assertNull(errorHandler45);
        org.junit.Assert.assertNull(profiler52);
        org.junit.Assert.assertNull(requestInterceptor55);
        org.junit.Assert.assertNull(errorHandler58);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(restAdapter67);
        org.junit.Assert.assertNull(errorHandler69);
        org.junit.Assert.assertNull(provider73);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "hi!" + "'", str81, "hi!");
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(executor85);
        org.junit.Assert.assertNotNull(log89);
        org.junit.Assert.assertNotNull(builder90);
    }

    @Test
    public void test04664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04664");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.converter.Converter converter2 = null;
        restAdapter0.converter = converter2;
        retrofit.RestAdapter.RestHandler restHandler4 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel6 = restAdapter0.getLogLevel();
        java.util.concurrent.Executor executor7 = restAdapter0.callbackExecutor;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(logLevel6);
        org.junit.Assert.assertNull(executor7);
    }

    @Test
    public void test04665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04665");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        restAdapter5.log = log15;
        retrofit.RestAdapter.Builder builder17 = builder4.setLog(log15);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder19 = builder4.setLogLevel(logLevel18);
        retrofit.Profiler profiler20 = null;
        builder19.profiler = profiler20;
        retrofit.converter.Converter converter22 = null;
        builder19.converter = converter22;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor25 = restAdapter24.callbackExecutor;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor27 = restAdapter26.callbackExecutor;
        java.util.concurrent.Executor executor28 = restAdapter26.callbackExecutor;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.Server server33 = new retrofit.Server("", "");
        restAdapter29.server = server33;
        restAdapter26.server = server33;
        restAdapter24.server = server33;
        builder19.server = server33;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler39 = builder38.errorHandler;
        retrofit.ErrorHandler errorHandler40 = builder38.errorHandler;
        retrofit.Profiler profiler41 = builder38.profiler;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor43 = restAdapter42.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler44 = restAdapter42.new RestHandler();
        retrofit.Server server47 = new retrofit.Server("hi!", "hi!");
        restAdapter42.server = server47;
        retrofit.RestAdapter.Builder builder49 = builder38.setServer(server47);
        retrofit.RestAdapter restAdapter50 = builder49.build();
        java.util.concurrent.Executor executor51 = builder49.callbackExecutor;
        retrofit.RestAdapter.Log log52 = builder49.log;
        retrofit.RestAdapter restAdapter53 = builder49.build();
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler55 = builder54.errorHandler;
        retrofit.ErrorHandler errorHandler56 = builder54.errorHandler;
        retrofit.RestAdapter.Log log57 = null;
        builder54.log = log57;
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean60 = logLevel59.log();
        builder54.logLevel = logLevel59;
        retrofit.ErrorHandler errorHandler62 = builder54.errorHandler;
        retrofit.RestAdapter.Builder builder64 = builder54.setServer("hi!");
        retrofit.ErrorHandler errorHandler65 = builder54.errorHandler;
        builder54.ensureSaneDefaults();
        retrofit.RestAdapter.Log log67 = builder54.log;
        retrofit.client.Client.Provider provider68 = builder54.clientProvider;
        restAdapter53.clientProvider = provider68;
        builder19.clientProvider = provider68;
        retrofit.converter.Converter converter71 = builder19.converter;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNull(errorHandler30);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNull(profiler41);
        org.junit.Assert.assertNull(executor43);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(restAdapter50);
        org.junit.Assert.assertNotNull(executor51);
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNotNull(restAdapter53);
        org.junit.Assert.assertNull(errorHandler55);
        org.junit.Assert.assertNull(errorHandler56);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(errorHandler62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(errorHandler65);
        org.junit.Assert.assertNotNull(log67);
        org.junit.Assert.assertNotNull(provider68);
        org.junit.Assert.assertNull(converter71);
    }

    @Test
    public void test04666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04666");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter0.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor4 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.Server server9 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder10 = builder6.setServer(server9);
        retrofit.converter.Converter converter11 = builder6.converter;
        retrofit.RequestInterceptor requestInterceptor12 = builder6.requestInterceptor;
        java.util.concurrent.Executor executor13 = builder6.callbackExecutor;
        retrofit.RestAdapter restAdapter14 = builder6.build();
        retrofit.client.Header[] headerArray25 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList26 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList26, headerArray25);
        retrofit.mime.TypedOutput typedOutput28 = null;
        retrofit.client.Request request29 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList26, typedOutput28);
        retrofit.mime.TypedOutput typedOutput30 = null;
        retrofit.client.Request request31 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList26, typedOutput30);
        retrofit.mime.TypedOutput typedOutput32 = null;
        retrofit.client.Request request33 = new retrofit.client.Request("", "default", (java.util.List<retrofit.client.Header>) headerList26, typedOutput32);
        retrofit.mime.TypedOutput typedOutput34 = null;
        retrofit.client.Request request35 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList26, typedOutput34);
        retrofit.mime.TypedOutput typedOutput36 = null;
        retrofit.client.Request request37 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList26, typedOutput36);
        retrofit.client.Request request38 = restAdapter14.logAndReplaceRequest(request37);
        retrofit.mime.TypedOutput typedOutput39 = request37.getBody();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request40 = restAdapter0.logAndReplaceRequest(request37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(requestInterceptor12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNotNull(restAdapter14);
        org.junit.Assert.assertNotNull(headerArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(request38);
        org.junit.Assert.assertNull(typedOutput39);
    }

    @Test
    public void test04667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04667");
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        log14.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel17);
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter18.new RestHandler();
        java.util.concurrent.Executor executor20 = null;
        restAdapter18.callbackExecutor = executor20;
        retrofit.client.Header[] headerArray24 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList25 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList25, headerArray24);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList25, typedOutput27);
        retrofit.client.Request request29 = restAdapter18.logAndReplaceRequest(request28);
        java.util.List<retrofit.client.Header> headerList30 = request28.getHeaders();
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("", "hi!", headerList30, typedOutput31);
        retrofit.mime.TypedOutput typedOutput33 = null;
        retrofit.client.Request request34 = new retrofit.client.Request("hi!", "default", headerList30, typedOutput33);
        retrofit.mime.TypedOutput typedOutput35 = null;
        retrofit.client.Request request36 = new retrofit.client.Request("default", "default", headerList30, typedOutput35);
        java.lang.String str37 = request36.getUrl();
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(request29);
        org.junit.Assert.assertNotNull(headerList30);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "default" + "'", str37, "default");
    }

    @Test
    public void test04668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04668");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean3 = logLevel2.log();
        restAdapter0.logLevel = logLevel2;
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.Profiler profiler6 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler7 = restAdapter0.new RestHandler();
        retrofit.Profiler profiler8 = restAdapter0.profiler;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(profiler6);
        org.junit.Assert.assertNull(profiler8);
    }

    @Test
    public void test04669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04669");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "default", (java.util.List<retrofit.client.Header>) headerList7, typedOutput11);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "default", (java.util.List<retrofit.client.Header>) headerList7, typedOutput13);
        java.util.List<retrofit.client.Header> headerList15 = request14.getHeaders();
        java.lang.String str16 = request14.getMethod();
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test04670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04670");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        builder4.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler7 = builder6.errorHandler;
        retrofit.ErrorHandler errorHandler8 = builder6.errorHandler;
        retrofit.RestAdapter.Log log9 = null;
        builder6.log = log9;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean12 = logLevel11.log();
        builder6.logLevel = logLevel11;
        retrofit.ErrorHandler errorHandler14 = builder6.errorHandler;
        retrofit.RestAdapter.Builder builder16 = builder6.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor17 = null;
        builder16.requestInterceptor = requestInterceptor17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler20 = builder19.errorHandler;
        retrofit.client.Client.Provider provider21 = null;
        builder19.clientProvider = provider21;
        retrofit.Server server25 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder26 = builder19.setServer(server25);
        retrofit.client.Client.Provider provider27 = null;
        java.util.concurrent.Executor executor28 = null;
        java.util.concurrent.Executor executor29 = null;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        retrofit.converter.Converter converter31 = null;
        retrofit.Profiler profiler32 = null;
        retrofit.ErrorHandler errorHandler33 = null;
        retrofit.Server server34 = null;
        retrofit.client.Client.Provider provider35 = null;
        java.util.concurrent.Executor executor36 = null;
        java.util.concurrent.Executor executor37 = null;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        retrofit.converter.Converter converter39 = null;
        retrofit.Profiler profiler40 = null;
        retrofit.ErrorHandler errorHandler41 = null;
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        log42.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter(server34, provider35, executor36, executor37, requestInterceptor38, converter39, profiler40, errorHandler41, log42, logLevel45);
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter(server25, provider27, executor28, executor29, requestInterceptor30, converter31, profiler32, errorHandler33, log42, logLevel47);
        log42.log("");
        builder16.log = log42;
        retrofit.RestAdapter.Log log52 = builder16.log;
        retrofit.RestAdapter.Builder builder53 = builder4.setLog(log52);
        retrofit.RequestInterceptor requestInterceptor54 = builder4.requestInterceptor;
        retrofit.client.Client.Provider provider55 = builder4.clientProvider;
        retrofit.ErrorHandler errorHandler56 = builder4.errorHandler;
        java.util.concurrent.Executor executor57 = builder4.httpExecutor;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(requestInterceptor54);
        org.junit.Assert.assertNotNull(provider55);
        org.junit.Assert.assertNotNull(errorHandler56);
        org.junit.Assert.assertNotNull(executor57);
    }

    @Test
    public void test04671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04671");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        restAdapter5.log = log15;
        retrofit.RestAdapter.Builder builder17 = builder4.setLog(log15);
        retrofit.RestAdapter.Builder builder19 = builder4.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel20 = builder4.logLevel;
        retrofit.ErrorHandler errorHandler21 = builder4.errorHandler;
        retrofit.RequestInterceptor requestInterceptor22 = builder4.requestInterceptor;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(requestInterceptor22);
    }

    @Test
    public void test04672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04672");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean3 = logLevel2.log();
        restAdapter0.logLevel = logLevel2;
        retrofit.Profiler profiler5 = restAdapter0.profiler;
        retrofit.Profiler profiler6 = restAdapter0.profiler;
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Log log8 = restAdapter0.log;
        java.util.concurrent.Executor executor9 = null;
        restAdapter0.callbackExecutor = executor9;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(profiler5);
        org.junit.Assert.assertNull(profiler6);
        org.junit.Assert.assertTrue("'" + logLevel7 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel7.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(log8);
    }

    @Test
    public void test04673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04673");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        builder0.requestInterceptor = requestInterceptor5;
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor8 = restAdapter7.callbackExecutor;
        java.util.concurrent.Executor executor9 = restAdapter7.callbackExecutor;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.Server server14 = new retrofit.Server("", "");
        restAdapter10.server = server14;
        restAdapter7.server = server14;
        retrofit.RestAdapter.Builder builder17 = builder0.setServer(server14);
        retrofit.RestAdapter.Builder builder19 = builder0.setServer("default");
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider21 = builder20.clientProvider;
        retrofit.RestAdapter.Builder builder23 = builder20.setServer("default");
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor25 = restAdapter24.callbackExecutor;
        retrofit.converter.Converter converter26 = null;
        restAdapter24.converter = converter26;
        retrofit.RestAdapter.RestHandler restHandler28 = restAdapter24.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel29 = restAdapter24.getLogLevel();
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler31 = null;
        builder30.errorHandler = errorHandler31;
        retrofit.converter.Converter converter33 = builder30.converter;
        retrofit.Server server34 = null;
        retrofit.client.Client.Provider provider35 = null;
        java.util.concurrent.Executor executor36 = null;
        java.util.concurrent.Executor executor37 = null;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        retrofit.converter.Converter converter39 = null;
        retrofit.Profiler profiler40 = null;
        retrofit.ErrorHandler errorHandler41 = null;
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        log42.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter(server34, provider35, executor36, executor37, requestInterceptor38, converter39, profiler40, errorHandler41, log42, logLevel45);
        retrofit.RestAdapter.RestHandler restHandler47 = restAdapter46.new RestHandler();
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler49 = null;
        builder48.errorHandler = errorHandler49;
        retrofit.converter.Converter converter51 = builder48.converter;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.Server server55 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder56 = builder52.setServer(server55);
        retrofit.converter.Converter converter57 = builder52.converter;
        retrofit.RequestInterceptor requestInterceptor58 = builder52.requestInterceptor;
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider60 = builder59.clientProvider;
        java.util.concurrent.Executor executor61 = null;
        builder59.callbackExecutor = executor61;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        retrofit.Server server66 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder67 = builder63.setServer(server66);
        java.lang.String str68 = server66.getUrl();
        retrofit.RestAdapter.Builder builder69 = builder59.setServer(server66);
        builder59.ensureSaneDefaults();
        retrofit.Server server71 = null;
        retrofit.client.Client.Provider provider72 = null;
        java.util.concurrent.Executor executor73 = null;
        java.util.concurrent.Executor executor74 = null;
        retrofit.RequestInterceptor requestInterceptor75 = null;
        retrofit.converter.Converter converter76 = null;
        retrofit.Profiler profiler77 = null;
        retrofit.ErrorHandler errorHandler78 = null;
        retrofit.RestAdapter.Log log79 = retrofit.RestAdapter.Log.NONE;
        log79.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel82 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter83 = new retrofit.RestAdapter(server71, provider72, executor73, executor74, requestInterceptor75, converter76, profiler77, errorHandler78, log79, logLevel82);
        retrofit.RestAdapter.RestHandler restHandler84 = restAdapter83.new RestHandler();
        retrofit.RestAdapter.Log log85 = retrofit.RestAdapter.Log.NONE;
        restAdapter83.log = log85;
        retrofit.RestAdapter.Builder builder87 = builder59.setLog(log85);
        retrofit.RestAdapter.Builder builder89 = builder59.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor90 = builder59.requestInterceptor;
        builder52.requestInterceptor = requestInterceptor90;
        builder48.requestInterceptor = requestInterceptor90;
        restAdapter46.requestInterceptor = requestInterceptor90;
        retrofit.RestAdapter.Builder builder94 = builder30.setRequestInterceptor(requestInterceptor90);
        restAdapter24.requestInterceptor = requestInterceptor90;
        builder23.requestInterceptor = requestInterceptor90;
        builder19.requestInterceptor = requestInterceptor90;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(provider21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(logLevel29);
        org.junit.Assert.assertNull(converter33);
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter51);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(converter57);
        org.junit.Assert.assertNull(requestInterceptor58);
        org.junit.Assert.assertNull(provider60);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(log79);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(requestInterceptor90);
        org.junit.Assert.assertNotNull(builder94);
    }

    @Test
    public void test04674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04674");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server4 = new retrofit.Server("", "");
        builder0.server = server4;
        java.util.concurrent.Executor executor6 = null;
        builder0.httpExecutor = executor6;
        retrofit.RestAdapter.Builder builder9 = builder0.setServer("default");
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler11 = builder10.errorHandler;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        builder10.requestInterceptor = requestInterceptor12;
        retrofit.RestAdapter.Builder builder15 = builder10.setServer("default");
        builder10.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter17.new RestHandler();
        retrofit.ErrorHandler errorHandler19 = restAdapter17.errorHandler;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider21 = builder20.clientProvider;
        java.util.concurrent.Executor executor22 = null;
        builder20.callbackExecutor = executor22;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.Server server27 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder28 = builder24.setServer(server27);
        java.lang.String str29 = server27.getUrl();
        retrofit.RestAdapter.Builder builder30 = builder20.setServer(server27);
        builder20.ensureSaneDefaults();
        java.util.concurrent.Executor executor32 = builder20.callbackExecutor;
        restAdapter17.httpExecutor = executor32;
        builder10.callbackExecutor = executor32;
        builder0.httpExecutor = executor32;
        retrofit.ErrorHandler errorHandler36 = builder0.errorHandler;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(provider21);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(executor32);
        org.junit.Assert.assertNull(errorHandler36);
    }

    @Test
    public void test04675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04675");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.Server server5 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder6 = builder2.setServer(server5);
        retrofit.RestAdapter.LogLevel logLevel7 = builder6.logLevel;
        java.util.concurrent.Executor executor8 = builder6.httpExecutor;
        retrofit.RestAdapter restAdapter9 = builder6.build();
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor11 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor13 = restAdapter12.callbackExecutor;
        java.util.concurrent.Executor executor14 = restAdapter12.callbackExecutor;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler16 = restAdapter15.errorHandler;
        retrofit.Server server19 = new retrofit.Server("", "");
        restAdapter15.server = server19;
        restAdapter12.server = server19;
        restAdapter10.server = server19;
        retrofit.Profiler profiler23 = restAdapter10.profiler;
        retrofit.ErrorHandler errorHandler24 = null;
        restAdapter10.errorHandler = errorHandler24;
        retrofit.Profiler profiler26 = null;
        restAdapter10.profiler = profiler26;
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter10.logLevel = logLevel29;
        retrofit.RestAdapter.RestHandler restHandler31 = restAdapter10.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor32 = null;
        restAdapter10.requestInterceptor = requestInterceptor32;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler35 = builder34.errorHandler;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        builder34.requestInterceptor = requestInterceptor36;
        retrofit.Server server38 = null;
        retrofit.client.Client.Provider provider39 = null;
        java.util.concurrent.Executor executor40 = null;
        java.util.concurrent.Executor executor41 = null;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        retrofit.converter.Converter converter43 = null;
        retrofit.Profiler profiler44 = null;
        retrofit.ErrorHandler errorHandler45 = null;
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        log46.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter(server38, provider39, executor40, executor41, requestInterceptor42, converter43, profiler44, errorHandler45, log46, logLevel49);
        builder34.log = log46;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler53 = builder52.errorHandler;
        retrofit.client.Client.Provider provider54 = null;
        builder52.clientProvider = provider54;
        retrofit.Server server58 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder59 = builder52.setServer(server58);
        retrofit.converter.Converter converter60 = null;
        builder59.converter = converter60;
        retrofit.RestAdapter restAdapter62 = builder59.build();
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler64 = builder63.errorHandler;
        java.util.concurrent.Executor executor65 = null;
        builder63.callbackExecutor = executor65;
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider68 = builder67.clientProvider;
        java.util.concurrent.Executor executor69 = null;
        builder67.callbackExecutor = executor69;
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        retrofit.Server server74 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder75 = builder71.setServer(server74);
        java.lang.String str76 = server74.getUrl();
        retrofit.RestAdapter.Builder builder77 = builder67.setServer(server74);
        retrofit.RestAdapter.Builder builder78 = builder63.setServer(server74);
        restAdapter62.server = server74;
        retrofit.client.Client.Provider provider80 = restAdapter62.clientProvider;
        builder34.clientProvider = provider80;
        restAdapter10.clientProvider = provider80;
        retrofit.RestAdapter.Builder builder83 = builder6.setClient(provider80);
        retrofit.Profiler profiler84 = builder6.profiler;
        retrofit.converter.Converter converter85 = builder6.converter;
        retrofit.RestAdapter.Builder builder86 = builder0.setConverter(converter85);
        java.util.concurrent.Executor executor87 = builder86.callbackExecutor;
        retrofit.ErrorHandler errorHandler88 = null;
        builder86.errorHandler = errorHandler88;
        retrofit.RequestInterceptor requestInterceptor90 = builder86.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel91 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder92 = builder86.setLogLevel(logLevel91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log level may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + logLevel7 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel7.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNotNull(restAdapter9);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNull(profiler23);
        org.junit.Assert.assertNull(logLevel28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler35);
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler53);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(restAdapter62);
        org.junit.Assert.assertNull(errorHandler64);
        org.junit.Assert.assertNull(provider68);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "hi!" + "'", str76, "hi!");
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(provider80);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNull(profiler84);
        org.junit.Assert.assertNotNull(converter85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNull(executor87);
        org.junit.Assert.assertNull(requestInterceptor90);
    }

    @Test
    public void test04676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04676");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.Profiler profiler19 = restAdapter0.profiler;
        java.util.concurrent.Executor executor20 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel21 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler22 = restAdapter0.new RestHandler();
        retrofit.Profiler profiler23 = null;
        restAdapter0.profiler = profiler23;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(profiler19);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(logLevel21);
    }

    @Test
    public void test04677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04677");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler15 = null;
        builder14.errorHandler = errorHandler15;
        retrofit.converter.Converter converter17 = builder14.converter;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server21 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder22 = builder18.setServer(server21);
        retrofit.converter.Converter converter23 = builder18.converter;
        retrofit.RequestInterceptor requestInterceptor24 = builder18.requestInterceptor;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider26 = builder25.clientProvider;
        java.util.concurrent.Executor executor27 = null;
        builder25.callbackExecutor = executor27;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.Server server32 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder33 = builder29.setServer(server32);
        java.lang.String str34 = server32.getUrl();
        retrofit.RestAdapter.Builder builder35 = builder25.setServer(server32);
        builder25.ensureSaneDefaults();
        retrofit.Server server37 = null;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        log45.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log45, logLevel48);
        retrofit.RestAdapter.RestHandler restHandler50 = restAdapter49.new RestHandler();
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        restAdapter49.log = log51;
        retrofit.RestAdapter.Builder builder53 = builder25.setLog(log51);
        retrofit.RestAdapter.Builder builder55 = builder25.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor56 = builder25.requestInterceptor;
        builder18.requestInterceptor = requestInterceptor56;
        builder14.requestInterceptor = requestInterceptor56;
        restAdapter12.requestInterceptor = requestInterceptor56;
        retrofit.RestAdapter.RestHandler restHandler60 = restAdapter12.new RestHandler();
        retrofit.Server server61 = restAdapter12.server;
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter17);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(converter23);
        org.junit.Assert.assertNull(requestInterceptor24);
        org.junit.Assert.assertNull(provider26);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(requestInterceptor56);
        org.junit.Assert.assertNull(server61);
    }

    @Test
    public void test04678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04678");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean6 = logLevel5.log();
        builder0.logLevel = logLevel5;
        retrofit.ErrorHandler errorHandler8 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder10 = builder0.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor11 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler13 = builder12.errorHandler;
        retrofit.ErrorHandler errorHandler14 = builder12.errorHandler;
        retrofit.Profiler profiler15 = builder12.profiler;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor17 = restAdapter16.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter16.new RestHandler();
        retrofit.Server server21 = new retrofit.Server("hi!", "hi!");
        restAdapter16.server = server21;
        retrofit.RestAdapter.Builder builder23 = builder12.setServer(server21);
        retrofit.converter.Converter converter24 = null;
        builder23.converter = converter24;
        retrofit.Profiler profiler26 = null;
        builder23.profiler = profiler26;
        retrofit.RestAdapter restAdapter28 = builder23.build();
        java.util.concurrent.Executor executor29 = builder23.callbackExecutor;
        retrofit.RestAdapter.Builder builder31 = builder23.setServer("default");
        retrofit.RestAdapter restAdapter32 = builder31.build();
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler34 = builder33.errorHandler;
        retrofit.ErrorHandler errorHandler35 = builder33.errorHandler;
        java.util.concurrent.Executor executor36 = builder33.callbackExecutor;
        retrofit.Profiler profiler37 = builder33.profiler;
        builder33.ensureSaneDefaults();
        builder33.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider41 = builder40.clientProvider;
        java.util.concurrent.Executor executor42 = null;
        builder40.callbackExecutor = executor42;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.Server server47 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder48 = builder44.setServer(server47);
        java.lang.String str49 = server47.getUrl();
        retrofit.RestAdapter.Builder builder50 = builder40.setServer(server47);
        builder40.ensureSaneDefaults();
        retrofit.Server server52 = null;
        retrofit.client.Client.Provider provider53 = null;
        java.util.concurrent.Executor executor54 = null;
        java.util.concurrent.Executor executor55 = null;
        retrofit.RequestInterceptor requestInterceptor56 = null;
        retrofit.converter.Converter converter57 = null;
        retrofit.Profiler profiler58 = null;
        retrofit.ErrorHandler errorHandler59 = null;
        retrofit.RestAdapter.Log log60 = retrofit.RestAdapter.Log.NONE;
        log60.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter(server52, provider53, executor54, executor55, requestInterceptor56, converter57, profiler58, errorHandler59, log60, logLevel63);
        retrofit.RestAdapter.RestHandler restHandler65 = restAdapter64.new RestHandler();
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        restAdapter64.log = log66;
        retrofit.RestAdapter.Builder builder68 = builder40.setLog(log66);
        retrofit.RestAdapter.Builder builder70 = builder40.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor71 = builder40.requestInterceptor;
        retrofit.RestAdapter.Builder builder72 = builder33.setRequestInterceptor(requestInterceptor71);
        retrofit.Server server75 = new retrofit.Server("default", "default");
        java.lang.String str76 = server75.getName();
        retrofit.RestAdapter.Builder builder77 = builder72.setServer(server75);
        retrofit.RequestInterceptor requestInterceptor78 = builder77.requestInterceptor;
        java.util.concurrent.Executor executor79 = builder77.httpExecutor;
        builder77.ensureSaneDefaults();
        retrofit.converter.Converter converter81 = builder77.converter;
        retrofit.RestAdapter.Builder builder82 = builder31.setConverter(converter81);
        java.util.concurrent.Executor executor83 = builder82.httpExecutor;
        builder0.httpExecutor = executor83;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(restAdapter28);
        org.junit.Assert.assertNotNull(executor29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(restAdapter32);
        org.junit.Assert.assertNull(errorHandler34);
        org.junit.Assert.assertNull(errorHandler35);
        org.junit.Assert.assertNull(executor36);
        org.junit.Assert.assertNull(profiler37);
        org.junit.Assert.assertNull(provider41);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(log60);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(requestInterceptor71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "default" + "'", str76, "default");
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(requestInterceptor78);
        org.junit.Assert.assertNotNull(executor79);
        org.junit.Assert.assertNotNull(converter81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(executor83);
    }

    @Test
    public void test04679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04679");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter3 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler4 = restAdapter3.errorHandler;
        retrofit.Server server7 = new retrofit.Server("", "");
        restAdapter3.server = server7;
        restAdapter0.server = server7;
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        restAdapter0.log = log10;
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter0.logLevel;
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Log log15 = restAdapter0.log;
        java.lang.Throwable throwable16 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable16, "default");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(errorHandler4);
        org.junit.Assert.assertNotNull(log10);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNotNull(log15);
    }

    @Test
    public void test04680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04680");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.Profiler profiler3 = builder0.profiler;
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor5 = restAdapter4.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.Server server9 = new retrofit.Server("hi!", "hi!");
        restAdapter4.server = server9;
        retrofit.RestAdapter.Builder builder11 = builder0.setServer(server9);
        retrofit.converter.Converter converter12 = null;
        builder11.converter = converter12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        log22.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel25);
        builder11.logLevel = logLevel25;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler29 = builder28.errorHandler;
        retrofit.client.Client.Provider provider30 = null;
        builder28.clientProvider = provider30;
        retrofit.Server server34 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder35 = builder28.setServer(server34);
        retrofit.client.Client.Provider provider36 = null;
        java.util.concurrent.Executor executor37 = null;
        java.util.concurrent.Executor executor38 = null;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        retrofit.converter.Converter converter40 = null;
        retrofit.Profiler profiler41 = null;
        retrofit.ErrorHandler errorHandler42 = null;
        retrofit.Server server43 = null;
        retrofit.client.Client.Provider provider44 = null;
        java.util.concurrent.Executor executor45 = null;
        java.util.concurrent.Executor executor46 = null;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        retrofit.converter.Converter converter48 = null;
        retrofit.Profiler profiler49 = null;
        retrofit.ErrorHandler errorHandler50 = null;
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        log51.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter(server43, provider44, executor45, executor46, requestInterceptor47, converter48, profiler49, errorHandler50, log51, logLevel54);
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter(server34, provider36, executor37, executor38, requestInterceptor39, converter40, profiler41, errorHandler42, log51, logLevel56);
        java.lang.String str58 = server34.getName();
        builder11.server = server34;
        retrofit.ErrorHandler errorHandler60 = builder11.errorHandler;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNull(errorHandler60);
    }

    @Test
    public void test04681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04681");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter3 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler4 = restAdapter3.errorHandler;
        retrofit.Server server7 = new retrofit.Server("", "");
        restAdapter3.server = server7;
        restAdapter0.server = server7;
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter0.logLevel;
        retrofit.Profiler profiler11 = null;
        restAdapter0.profiler = profiler11;
        java.util.concurrent.Executor executor13 = restAdapter0.callbackExecutor;
        java.lang.Throwable throwable14 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable14, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(errorHandler4);
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertNull(executor13);
    }

    @Test
    public void test04682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04682");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        restAdapter12.log = log14;
        retrofit.converter.Converter converter16 = null;
        restAdapter12.converter = converter16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter12.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor19 = null;
        restAdapter12.requestInterceptor = requestInterceptor19;
        retrofit.RestAdapter.LogLevel logLevel21 = restAdapter12.logLevel;
        retrofit.RestAdapter.RestHandler restHandler22 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Log log23 = restAdapter12.log;
        retrofit.Server server28 = null;
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        log36.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server28, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log36, logLevel39);
        retrofit.RestAdapter.RestHandler restHandler41 = restAdapter40.new RestHandler();
        java.util.concurrent.Executor executor42 = null;
        restAdapter40.callbackExecutor = executor42;
        retrofit.client.Header[] headerArray46 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList47 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList47, headerArray46);
        retrofit.mime.TypedOutput typedOutput49 = null;
        retrofit.client.Request request50 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList47, typedOutput49);
        retrofit.client.Request request51 = restAdapter40.logAndReplaceRequest(request50);
        java.util.List<retrofit.client.Header> headerList52 = request50.getHeaders();
        retrofit.mime.TypedOutput typedOutput53 = null;
        retrofit.client.Request request54 = new retrofit.client.Request("hi!", "default", headerList52, typedOutput53);
        retrofit.mime.TypedOutput typedOutput55 = null;
        retrofit.client.Request request56 = new retrofit.client.Request("", "hi!", headerList52, typedOutput55);
        retrofit.client.Request request57 = restAdapter12.logAndReplaceRequest(request56);
        java.util.concurrent.Executor executor58 = restAdapter12.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler59 = restAdapter12.new RestHandler();
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(request51);
        org.junit.Assert.assertNotNull(headerList52);
        org.junit.Assert.assertNotNull(request57);
        org.junit.Assert.assertNull(executor58);
    }

    @Test
    public void test04683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04683");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server4 = new retrofit.Server("", "");
        builder0.server = server4;
        java.util.concurrent.Executor executor6 = null;
        builder0.httpExecutor = executor6;
        retrofit.RestAdapter.Builder builder9 = builder0.setServer("default");
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler11 = builder10.errorHandler;
        retrofit.Server server14 = new retrofit.Server("", "");
        builder10.server = server14;
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        builder10.log = log16;
        retrofit.RequestInterceptor requestInterceptor18 = builder10.requestInterceptor;
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        log19.log("hi!");
        log19.log("hi!");
        builder10.log = log19;
        builder9.log = log19;
        retrofit.RestAdapter.Log log26 = builder9.log;
        retrofit.Server server27 = builder9.server;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler29 = builder28.errorHandler;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        builder28.requestInterceptor = requestInterceptor30;
        retrofit.RestAdapter.Builder builder33 = builder28.setServer("default");
        retrofit.Server server34 = builder28.server;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler36 = builder35.errorHandler;
        retrofit.client.Client.Provider provider37 = null;
        builder35.clientProvider = provider37;
        retrofit.Server server41 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder42 = builder35.setServer(server41);
        retrofit.converter.Converter converter43 = null;
        builder42.converter = converter43;
        retrofit.RestAdapter restAdapter45 = builder42.build();
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler47 = builder46.errorHandler;
        java.util.concurrent.Executor executor48 = null;
        builder46.callbackExecutor = executor48;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider51 = builder50.clientProvider;
        java.util.concurrent.Executor executor52 = null;
        builder50.callbackExecutor = executor52;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.Server server57 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder58 = builder54.setServer(server57);
        java.lang.String str59 = server57.getUrl();
        retrofit.RestAdapter.Builder builder60 = builder50.setServer(server57);
        retrofit.RestAdapter.Builder builder61 = builder46.setServer(server57);
        restAdapter45.server = server57;
        retrofit.Server server63 = restAdapter45.server;
        retrofit.converter.Converter converter64 = restAdapter45.converter;
        builder28.converter = converter64;
        builder9.converter = converter64;
        retrofit.Profiler profiler67 = builder9.profiler;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNotNull(log16);
        org.junit.Assert.assertNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(server27);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(server34);
        org.junit.Assert.assertNull(errorHandler36);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(restAdapter45);
        org.junit.Assert.assertNull(errorHandler47);
        org.junit.Assert.assertNull(provider51);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(server63);
        org.junit.Assert.assertNotNull(converter64);
        org.junit.Assert.assertNull(profiler67);
    }

    @Test
    public void test04684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04684");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server4 = new retrofit.Server("", "");
        builder0.server = server4;
        retrofit.RestAdapter restAdapter6 = builder0.build();
        retrofit.Server server7 = builder0.server;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider9 = builder8.clientProvider;
        java.util.concurrent.Executor executor10 = null;
        builder8.callbackExecutor = executor10;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.Server server15 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder16 = builder12.setServer(server15);
        java.lang.String str17 = server15.getUrl();
        retrofit.RestAdapter.Builder builder18 = builder8.setServer(server15);
        builder8.ensureSaneDefaults();
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        log28.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log28, logLevel31);
        retrofit.RestAdapter.RestHandler restHandler33 = restAdapter32.new RestHandler();
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        restAdapter32.log = log34;
        retrofit.RestAdapter.Builder builder36 = builder8.setLog(log34);
        retrofit.RestAdapter.LogLevel logLevel37 = builder8.logLevel;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler39 = builder38.errorHandler;
        retrofit.ErrorHandler errorHandler40 = builder38.errorHandler;
        retrofit.RestAdapter.Log log41 = null;
        builder38.log = log41;
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean44 = logLevel43.log();
        builder38.logLevel = logLevel43;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler47 = restAdapter46.new RestHandler();
        java.util.concurrent.Executor executor48 = null;
        restAdapter46.callbackExecutor = executor48;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor51 = restAdapter50.callbackExecutor;
        java.util.concurrent.Executor executor52 = restAdapter50.callbackExecutor;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler54 = restAdapter53.errorHandler;
        retrofit.Server server57 = new retrofit.Server("", "");
        restAdapter53.server = server57;
        restAdapter50.server = server57;
        restAdapter46.server = server57;
        retrofit.RestAdapter.Builder builder61 = builder38.setServer(server57);
        retrofit.RestAdapter.Builder builder62 = builder8.setServer(server57);
        retrofit.client.Client.Provider provider63 = builder8.clientProvider;
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler65 = builder64.errorHandler;
        retrofit.client.Client.Provider provider66 = null;
        builder64.clientProvider = provider66;
        retrofit.Server server70 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder71 = builder64.setServer(server70);
        retrofit.Server server74 = new retrofit.Server("", "");
        builder71.server = server74;
        builder71.ensureSaneDefaults();
        retrofit.converter.Converter converter77 = builder71.converter;
        builder8.converter = converter77;
        retrofit.RestAdapter.Builder builder79 = builder0.setConverter(converter77);
        retrofit.Profiler profiler80 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder81 = builder0.setProfiler(profiler80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(restAdapter6);
        org.junit.Assert.assertNotNull(server7);
        org.junit.Assert.assertNull(provider9);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(executor51);
        org.junit.Assert.assertNull(executor52);
        org.junit.Assert.assertNull(errorHandler54);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(provider63);
        org.junit.Assert.assertNull(errorHandler65);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(converter77);
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test04685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04685");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.client.Header[] headerArray22 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList23 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList23, headerArray22);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList23, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList23, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList23, typedOutput29);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList23, typedOutput31);
        retrofit.mime.TypedOutput typedOutput33 = request32.getBody();
        retrofit.client.Request request34 = restAdapter12.logAndReplaceRequest(request32);
        retrofit.client.Client.Provider provider35 = null;
        restAdapter12.clientProvider = provider35;
        retrofit.client.Client.Provider provider37 = restAdapter12.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel38 = restAdapter12.logLevel;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler40 = null;
        builder39.errorHandler = errorHandler40;
        retrofit.ErrorHandler errorHandler42 = builder39.errorHandler;
        retrofit.RestAdapter.Builder builder44 = builder39.setServer("hi!");
        retrofit.RestAdapter.Builder builder46 = builder44.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor47 = builder44.requestInterceptor;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler49 = builder48.errorHandler;
        retrofit.Server server52 = new retrofit.Server("", "");
        builder48.server = server52;
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        builder48.log = log54;
        retrofit.RestAdapter.LogLevel logLevel56 = builder48.logLevel;
        boolean boolean57 = logLevel56.log();
        boolean boolean58 = logLevel56.log();
        retrofit.RestAdapter.Builder builder59 = builder44.setLogLevel(logLevel56);
        restAdapter12.setLogLevel(logLevel56);
        retrofit.client.Client.Provider provider61 = restAdapter12.clientProvider;
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(typedOutput33);
        org.junit.Assert.assertNotNull(request34);
        org.junit.Assert.assertNull(provider37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(requestInterceptor47);
        org.junit.Assert.assertNull(errorHandler49);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(provider61);
    }

    @Test
    public void test04686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04686");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        java.util.concurrent.Executor executor6 = builder4.httpExecutor;
        retrofit.RestAdapter restAdapter7 = builder4.build();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.Server server11 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder12 = builder8.setServer(server11);
        retrofit.Server server13 = builder8.server;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.Server server17 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder18 = builder14.setServer(server17);
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor20 = restAdapter19.callbackExecutor;
        java.util.concurrent.Executor executor21 = restAdapter19.callbackExecutor;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler23 = restAdapter22.errorHandler;
        retrofit.Server server26 = new retrofit.Server("", "");
        restAdapter22.server = server26;
        restAdapter19.server = server26;
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        restAdapter19.log = log29;
        retrofit.RestAdapter.Builder builder31 = builder18.setLog(log29);
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder33 = builder18.setLogLevel(logLevel32);
        builder8.logLevel = logLevel32;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.Server server38 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder39 = builder35.setServer(server38);
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor41 = restAdapter40.callbackExecutor;
        java.util.concurrent.Executor executor42 = restAdapter40.callbackExecutor;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler44 = restAdapter43.errorHandler;
        retrofit.Server server47 = new retrofit.Server("", "");
        restAdapter43.server = server47;
        restAdapter40.server = server47;
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        restAdapter40.log = log50;
        retrofit.RestAdapter.Builder builder52 = builder39.setLog(log50);
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder54 = builder39.setLogLevel(logLevel53);
        retrofit.RestAdapter.Log log55 = builder39.log;
        retrofit.RestAdapter restAdapter56 = builder39.build();
        java.util.concurrent.Executor executor57 = restAdapter56.callbackExecutor;
        builder8.callbackExecutor = executor57;
        restAdapter7.callbackExecutor = executor57;
        retrofit.Server server60 = restAdapter7.server;
        retrofit.RestAdapter.LogLevel logLevel61 = restAdapter7.getLogLevel();
        retrofit.Profiler profiler62 = restAdapter7.profiler;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(executor41);
        org.junit.Assert.assertNull(executor42);
        org.junit.Assert.assertNull(errorHandler44);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertNotNull(restAdapter56);
        org.junit.Assert.assertNotNull(executor57);
        org.junit.Assert.assertNotNull(server60);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler62);
    }

    @Test
    public void test04687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04687");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = null;
        restAdapter0.httpExecutor = executor2;
        retrofit.RestAdapter.RestHandler restHandler4 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter0.logLevel;
        retrofit.converter.Converter converter6 = restAdapter0.converter;
        retrofit.client.Client.Provider provider7 = restAdapter0.clientProvider;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler9 = builder8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        builder8.server = server12;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler22 = builder21.errorHandler;
        retrofit.Server server25 = new retrofit.Server("", "");
        builder21.server = server25;
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        builder21.log = log27;
        retrofit.Server server29 = null;
        retrofit.client.Client.Provider provider30 = null;
        java.util.concurrent.Executor executor31 = null;
        java.util.concurrent.Executor executor32 = null;
        retrofit.RequestInterceptor requestInterceptor33 = null;
        retrofit.converter.Converter converter34 = null;
        retrofit.Profiler profiler35 = null;
        retrofit.ErrorHandler errorHandler36 = null;
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        log37.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter(server29, provider30, executor31, executor32, requestInterceptor33, converter34, profiler35, errorHandler36, log37, logLevel40);
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter(server12, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log27, logLevel40);
        retrofit.ErrorHandler errorHandler43 = null;
        restAdapter42.errorHandler = errorHandler43;
        retrofit.RestAdapter.RestHandler restHandler45 = restAdapter42.new RestHandler();
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler47 = builder46.errorHandler;
        retrofit.Server server50 = new retrofit.Server("", "");
        builder46.server = server50;
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        builder46.log = log52;
        restAdapter42.log = log52;
        log52.log("hi!");
        restAdapter0.log = log52;
        java.lang.Throwable throwable58 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable58, "default");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNull(provider7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler47);
        org.junit.Assert.assertNotNull(log52);
    }

    @Test
    public void test04688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04688");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        builder4.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler7 = builder6.errorHandler;
        retrofit.ErrorHandler errorHandler8 = builder6.errorHandler;
        retrofit.RestAdapter.Log log9 = null;
        builder6.log = log9;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean12 = logLevel11.log();
        builder6.logLevel = logLevel11;
        retrofit.ErrorHandler errorHandler14 = builder6.errorHandler;
        retrofit.RestAdapter.Builder builder16 = builder6.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor17 = null;
        builder16.requestInterceptor = requestInterceptor17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler20 = builder19.errorHandler;
        retrofit.client.Client.Provider provider21 = null;
        builder19.clientProvider = provider21;
        retrofit.Server server25 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder26 = builder19.setServer(server25);
        retrofit.client.Client.Provider provider27 = null;
        java.util.concurrent.Executor executor28 = null;
        java.util.concurrent.Executor executor29 = null;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        retrofit.converter.Converter converter31 = null;
        retrofit.Profiler profiler32 = null;
        retrofit.ErrorHandler errorHandler33 = null;
        retrofit.Server server34 = null;
        retrofit.client.Client.Provider provider35 = null;
        java.util.concurrent.Executor executor36 = null;
        java.util.concurrent.Executor executor37 = null;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        retrofit.converter.Converter converter39 = null;
        retrofit.Profiler profiler40 = null;
        retrofit.ErrorHandler errorHandler41 = null;
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        log42.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter(server34, provider35, executor36, executor37, requestInterceptor38, converter39, profiler40, errorHandler41, log42, logLevel45);
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter(server25, provider27, executor28, executor29, requestInterceptor30, converter31, profiler32, errorHandler33, log42, logLevel47);
        log42.log("");
        builder16.log = log42;
        retrofit.RestAdapter.Log log52 = builder16.log;
        retrofit.RestAdapter.Builder builder53 = builder4.setLog(log52);
        retrofit.RequestInterceptor requestInterceptor54 = builder4.requestInterceptor;
        builder4.ensureSaneDefaults();
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(requestInterceptor54);
    }

    @Test
    public void test04689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04689");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = builder0.clientProvider;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server7 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder8 = builder4.setServer(server7);
        java.lang.String str9 = server7.getUrl();
        retrofit.RestAdapter.Builder builder10 = builder0.setServer(server7);
        builder0.ensureSaneDefaults();
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        log20.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel23);
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter24.new RestHandler();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        restAdapter24.log = log26;
        retrofit.RestAdapter.Builder builder28 = builder0.setLog(log26);
        retrofit.RestAdapter.Builder builder30 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler32 = builder31.errorHandler;
        retrofit.ErrorHandler errorHandler33 = builder31.errorHandler;
        retrofit.converter.Converter converter34 = null;
        builder31.converter = converter34;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        builder31.requestInterceptor = requestInterceptor36;
        retrofit.client.Client.Provider provider38 = builder31.clientProvider;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.Server server42 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder43 = builder39.setServer(server42);
        retrofit.RestAdapter.LogLevel logLevel44 = builder43.logLevel;
        java.util.concurrent.Executor executor45 = builder43.httpExecutor;
        retrofit.RestAdapter restAdapter46 = builder43.build();
        retrofit.ErrorHandler errorHandler47 = builder43.errorHandler;
        retrofit.RestAdapter.Builder builder48 = builder31.setErrorHandler(errorHandler47);
        retrofit.RestAdapter.Builder builder49 = builder30.setErrorHandler(errorHandler47);
        org.junit.Assert.assertNull(provider1);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(errorHandler32);
        org.junit.Assert.assertNull(errorHandler33);
        org.junit.Assert.assertNull(provider38);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertNotNull(restAdapter46);
        org.junit.Assert.assertNotNull(errorHandler47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test04690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04690");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server6 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder7 = builder0.setServer(server6);
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.Server server15 = null;
        retrofit.client.Client.Provider provider16 = null;
        java.util.concurrent.Executor executor17 = null;
        java.util.concurrent.Executor executor18 = null;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        retrofit.converter.Converter converter20 = null;
        retrofit.Profiler profiler21 = null;
        retrofit.ErrorHandler errorHandler22 = null;
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        log23.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server15, provider16, executor17, executor18, requestInterceptor19, converter20, profiler21, errorHandler22, log23, logLevel26);
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server6, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log23, logLevel28);
        retrofit.client.Client.Provider provider30 = null;
        restAdapter29.clientProvider = provider30;
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter29.getLogLevel();
        retrofit.client.Response response34 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response36 = restAdapter29.logAndReplaceResponse("hi!", response34, (long) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test04691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04691");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server6 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder7 = builder0.setServer(server6);
        retrofit.converter.Converter converter8 = null;
        builder7.converter = converter8;
        retrofit.RestAdapter restAdapter10 = builder7.build();
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler12 = builder11.errorHandler;
        java.util.concurrent.Executor executor13 = null;
        builder11.callbackExecutor = executor13;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider16 = builder15.clientProvider;
        java.util.concurrent.Executor executor17 = null;
        builder15.callbackExecutor = executor17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.Server server22 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder23 = builder19.setServer(server22);
        java.lang.String str24 = server22.getUrl();
        retrofit.RestAdapter.Builder builder25 = builder15.setServer(server22);
        retrofit.RestAdapter.Builder builder26 = builder11.setServer(server22);
        restAdapter10.server = server22;
        java.util.concurrent.Executor executor28 = restAdapter10.httpExecutor;
        retrofit.ErrorHandler errorHandler29 = restAdapter10.errorHandler;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler31 = builder30.errorHandler;
        java.util.concurrent.Executor executor32 = builder30.callbackExecutor;
        retrofit.RestAdapter.Builder builder34 = builder30.setServer("hi!");
        builder34.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler37 = builder36.errorHandler;
        retrofit.Server server40 = new retrofit.Server("", "");
        builder36.server = server40;
        java.util.concurrent.Executor executor42 = builder36.callbackExecutor;
        retrofit.Server server43 = null;
        builder36.server = server43;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.NONE;
        builder36.logLevel = logLevel45;
        retrofit.RestAdapter.Builder builder47 = builder34.setLogLevel(logLevel45);
        retrofit.RequestInterceptor requestInterceptor48 = builder34.requestInterceptor;
        restAdapter10.requestInterceptor = requestInterceptor48;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(restAdapter10);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(provider16);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(executor28);
        org.junit.Assert.assertNotNull(errorHandler29);
        org.junit.Assert.assertNull(errorHandler31);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNull(executor42);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(requestInterceptor48);
    }

    @Test
    public void test04692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04692");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server6 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder7 = builder0.setServer(server6);
        retrofit.converter.Converter converter8 = null;
        builder7.converter = converter8;
        retrofit.RestAdapter restAdapter10 = builder7.build();
        retrofit.RestAdapter restAdapter11 = builder7.build();
        retrofit.Profiler profiler12 = null;
        restAdapter11.profiler = profiler12;
        retrofit.Server server14 = restAdapter11.server;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(restAdapter10);
        org.junit.Assert.assertNotNull(restAdapter11);
        org.junit.Assert.assertNotNull(server14);
    }

    @Test
    public void test04693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04693");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean6 = logLevel5.log();
        builder0.logLevel = logLevel5;
        retrofit.ErrorHandler errorHandler8 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder10 = builder0.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor11 = null;
        builder10.requestInterceptor = requestInterceptor11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler14 = builder13.errorHandler;
        retrofit.client.Client.Provider provider15 = null;
        builder13.clientProvider = provider15;
        retrofit.Server server19 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder20 = builder13.setServer(server19);
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.Server server28 = null;
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        log36.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server28, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log36, logLevel39);
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter(server19, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log36, logLevel41);
        log36.log("");
        builder10.log = log36;
        retrofit.RestAdapter.Log log46 = builder10.log;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler48 = builder47.errorHandler;
        java.util.concurrent.Executor executor49 = builder47.callbackExecutor;
        retrofit.RestAdapter.Builder builder51 = builder47.setServer("hi!");
        retrofit.Server server54 = new retrofit.Server("default", "hi!");
        java.lang.String str55 = server54.getUrl();
        retrofit.RestAdapter.Builder builder56 = builder51.setServer(server54);
        retrofit.RestAdapter.Builder builder57 = builder10.setServer(server54);
        retrofit.RestAdapter.Builder builder59 = builder57.setServer("hi!");
        retrofit.RestAdapter restAdapter60 = builder57.build();
        retrofit.RestAdapter.LogLevel logLevel61 = restAdapter60.logLevel;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertNull(errorHandler48);
        org.junit.Assert.assertNull(executor49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "default" + "'", str55, "default");
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(restAdapter60);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test04694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04694");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter0.getLogLevel();
        retrofit.client.Client.Provider provider20 = null;
        restAdapter0.clientProvider = provider20;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean23 = logLevel22.log();
        restAdapter0.logLevel = logLevel22;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        restAdapter0.requestInterceptor = requestInterceptor25;
        retrofit.RestAdapter.Log log27 = restAdapter0.log;
        retrofit.converter.Converter converter28 = null;
        restAdapter0.converter = converter28;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter30.logLevel;
        retrofit.RestAdapter.RestHandler restHandler32 = restAdapter30.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler33 = restAdapter30.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler34 = restAdapter30.new RestHandler();
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler36 = restAdapter35.new RestHandler();
        retrofit.client.Client.Provider provider37 = restAdapter35.clientProvider;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler39 = builder38.errorHandler;
        retrofit.Server server42 = new retrofit.Server("", "");
        builder38.server = server42;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        builder38.log = log44;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler47 = builder46.errorHandler;
        retrofit.client.Client.Provider provider48 = null;
        builder46.clientProvider = provider48;
        retrofit.Server server52 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder53 = builder46.setServer(server52);
        retrofit.converter.Converter converter54 = null;
        builder53.converter = converter54;
        retrofit.RestAdapter restAdapter56 = builder53.build();
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler58 = builder57.errorHandler;
        java.util.concurrent.Executor executor59 = null;
        builder57.callbackExecutor = executor59;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider62 = builder61.clientProvider;
        java.util.concurrent.Executor executor63 = null;
        builder61.callbackExecutor = executor63;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.Server server68 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder69 = builder65.setServer(server68);
        java.lang.String str70 = server68.getUrl();
        retrofit.RestAdapter.Builder builder71 = builder61.setServer(server68);
        retrofit.RestAdapter.Builder builder72 = builder57.setServer(server68);
        restAdapter56.server = server68;
        java.util.concurrent.Executor executor74 = restAdapter56.httpExecutor;
        builder38.httpExecutor = executor74;
        restAdapter35.callbackExecutor = executor74;
        restAdapter30.callbackExecutor = executor74;
        restAdapter0.httpExecutor = executor74;
        retrofit.Profiler profiler79 = null;
        restAdapter0.profiler = profiler79;
        java.util.concurrent.Executor executor81 = restAdapter0.httpExecutor;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(log27);
        org.junit.Assert.assertNull(logLevel31);
        org.junit.Assert.assertNull(provider37);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNull(errorHandler47);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(restAdapter56);
        org.junit.Assert.assertNull(errorHandler58);
        org.junit.Assert.assertNull(provider62);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hi!" + "'", str70, "hi!");
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(executor74);
        org.junit.Assert.assertNotNull(executor81);
    }

    @Test
    public void test04695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04695");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = null;
        restAdapter0.httpExecutor = executor2;
        retrofit.RestAdapter.RestHandler restHandler4 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter0.logLevel;
        retrofit.ErrorHandler errorHandler6 = null;
        restAdapter0.errorHandler = errorHandler6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.Server server11 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder12 = builder8.setServer(server11);
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor14 = restAdapter13.callbackExecutor;
        java.util.concurrent.Executor executor15 = restAdapter13.callbackExecutor;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler17 = restAdapter16.errorHandler;
        retrofit.Server server20 = new retrofit.Server("", "");
        restAdapter16.server = server20;
        restAdapter13.server = server20;
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        restAdapter13.log = log23;
        retrofit.RestAdapter.Builder builder25 = builder12.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder27 = builder12.setLogLevel(logLevel26);
        retrofit.Profiler profiler28 = null;
        builder27.profiler = profiler28;
        retrofit.converter.Converter converter30 = null;
        builder27.converter = converter30;
        retrofit.ErrorHandler errorHandler32 = null;
        builder27.errorHandler = errorHandler32;
        retrofit.RestAdapter restAdapter34 = builder27.build();
        retrofit.ErrorHandler errorHandler35 = builder27.errorHandler;
        restAdapter0.errorHandler = errorHandler35;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor38 = restAdapter37.callbackExecutor;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor40 = restAdapter39.callbackExecutor;
        java.util.concurrent.Executor executor41 = restAdapter39.callbackExecutor;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler43 = restAdapter42.errorHandler;
        retrofit.Server server46 = new retrofit.Server("", "");
        restAdapter42.server = server46;
        restAdapter39.server = server46;
        restAdapter37.server = server46;
        retrofit.Profiler profiler50 = restAdapter37.profiler;
        retrofit.ErrorHandler errorHandler51 = null;
        restAdapter37.errorHandler = errorHandler51;
        retrofit.Profiler profiler53 = null;
        restAdapter37.profiler = profiler53;
        java.util.concurrent.Executor executor55 = null;
        restAdapter37.httpExecutor = executor55;
        retrofit.RestAdapter.LogLevel logLevel57 = restAdapter37.logLevel;
        retrofit.converter.Converter converter58 = restAdapter37.converter;
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler60 = builder59.errorHandler;
        retrofit.ErrorHandler errorHandler61 = builder59.errorHandler;
        java.util.concurrent.Executor executor62 = builder59.callbackExecutor;
        java.util.concurrent.Executor executor63 = null;
        builder59.callbackExecutor = executor63;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler66 = builder65.errorHandler;
        retrofit.Server server69 = new retrofit.Server("", "");
        builder65.server = server69;
        retrofit.RestAdapter.Log log71 = retrofit.RestAdapter.Log.NONE;
        builder65.log = log71;
        retrofit.RestAdapter.LogLevel logLevel73 = builder65.logLevel;
        retrofit.RestAdapter.Builder builder74 = builder59.setLogLevel(logLevel73);
        restAdapter37.logLevel = logLevel73;
        boolean boolean76 = logLevel73.log();
        restAdapter0.logLevel = logLevel73;
        retrofit.RestAdapter.RestHandler restHandler78 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler79 = restAdapter0.new RestHandler();
        retrofit.ErrorHandler errorHandler80 = restAdapter0.errorHandler;
        java.lang.Class<?> wildcardClass81 = restAdapter0.getClass();
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(restAdapter34);
        org.junit.Assert.assertNotNull(errorHandler35);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNull(executor40);
        org.junit.Assert.assertNull(executor41);
        org.junit.Assert.assertNull(errorHandler43);
        org.junit.Assert.assertNull(profiler50);
        org.junit.Assert.assertNull(logLevel57);
        org.junit.Assert.assertNull(converter58);
        org.junit.Assert.assertNull(errorHandler60);
        org.junit.Assert.assertNull(errorHandler61);
        org.junit.Assert.assertNull(executor62);
        org.junit.Assert.assertNull(errorHandler66);
        org.junit.Assert.assertNotNull(log71);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(errorHandler80);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test04696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04696");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = builder0.clientProvider;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server7 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder8 = builder4.setServer(server7);
        java.lang.String str9 = server7.getUrl();
        retrofit.RestAdapter.Builder builder10 = builder0.setServer(server7);
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.LogLevel logLevel12 = builder0.logLevel;
        builder0.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor14 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler16 = builder15.errorHandler;
        java.util.concurrent.Executor executor17 = builder15.callbackExecutor;
        retrofit.RestAdapter.Builder builder19 = builder15.setServer("hi!");
        retrofit.Server server22 = new retrofit.Server("default", "hi!");
        java.lang.String str23 = server22.getUrl();
        retrofit.RestAdapter.Builder builder24 = builder19.setServer(server22);
        java.util.concurrent.Executor executor25 = builder19.httpExecutor;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler27 = builder26.errorHandler;
        retrofit.Server server30 = new retrofit.Server("", "");
        builder26.server = server30;
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        builder26.log = log32;
        retrofit.RestAdapter.LogLevel logLevel34 = builder26.logLevel;
        java.util.concurrent.Executor executor35 = builder26.callbackExecutor;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler37 = null;
        builder36.errorHandler = errorHandler37;
        retrofit.ErrorHandler errorHandler39 = builder36.errorHandler;
        retrofit.RestAdapter.Builder builder41 = builder36.setServer("hi!");
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler43 = builder42.errorHandler;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.Server server47 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder48 = builder44.setServer(server47);
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor50 = restAdapter49.callbackExecutor;
        java.util.concurrent.Executor executor51 = restAdapter49.callbackExecutor;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler53 = restAdapter52.errorHandler;
        retrofit.Server server56 = new retrofit.Server("", "");
        restAdapter52.server = server56;
        restAdapter49.server = server56;
        retrofit.RestAdapter.Log log59 = retrofit.RestAdapter.Log.NONE;
        restAdapter49.log = log59;
        retrofit.RestAdapter.Builder builder61 = builder48.setLog(log59);
        retrofit.RestAdapter.Builder builder62 = builder42.setLog(log59);
        builder36.log = log59;
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler65 = builder64.errorHandler;
        retrofit.client.Client.Provider provider66 = null;
        builder64.clientProvider = provider66;
        retrofit.Server server70 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder71 = builder64.setServer(server70);
        retrofit.converter.Converter converter72 = null;
        builder71.converter = converter72;
        retrofit.RestAdapter restAdapter74 = builder71.build();
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler76 = builder75.errorHandler;
        java.util.concurrent.Executor executor77 = null;
        builder75.callbackExecutor = executor77;
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider80 = builder79.clientProvider;
        java.util.concurrent.Executor executor81 = null;
        builder79.callbackExecutor = executor81;
        retrofit.RestAdapter.Builder builder83 = new retrofit.RestAdapter.Builder();
        retrofit.Server server86 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder87 = builder83.setServer(server86);
        java.lang.String str88 = server86.getUrl();
        retrofit.RestAdapter.Builder builder89 = builder79.setServer(server86);
        retrofit.RestAdapter.Builder builder90 = builder75.setServer(server86);
        restAdapter74.server = server86;
        retrofit.client.Client.Provider provider92 = restAdapter74.clientProvider;
        retrofit.RestAdapter.Builder builder93 = builder36.setClient(provider92);
        retrofit.RestAdapter.Builder builder94 = builder26.setClient(provider92);
        retrofit.RestAdapter.Builder builder95 = builder19.setClient(provider92);
        builder0.clientProvider = provider92;
        org.junit.Assert.assertNull(provider1);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(requestInterceptor14);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "default" + "'", str23, "default");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(errorHandler43);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(executor50);
        org.junit.Assert.assertNull(executor51);
        org.junit.Assert.assertNull(errorHandler53);
        org.junit.Assert.assertNotNull(log59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(errorHandler65);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(restAdapter74);
        org.junit.Assert.assertNull(errorHandler76);
        org.junit.Assert.assertNull(provider80);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "hi!" + "'", str88, "hi!");
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(provider92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(builder95);
    }

    @Test
    public void test04697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04697");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.converter.Converter converter14 = restAdapter0.converter;
        retrofit.ErrorHandler errorHandler15 = null;
        restAdapter0.errorHandler = errorHandler15;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor18 = restAdapter17.callbackExecutor;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor20 = restAdapter19.callbackExecutor;
        java.util.concurrent.Executor executor21 = restAdapter19.callbackExecutor;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler23 = restAdapter22.errorHandler;
        retrofit.Server server26 = new retrofit.Server("", "");
        restAdapter22.server = server26;
        restAdapter19.server = server26;
        restAdapter17.server = server26;
        retrofit.Profiler profiler30 = restAdapter17.profiler;
        retrofit.ErrorHandler errorHandler31 = null;
        restAdapter17.errorHandler = errorHandler31;
        java.util.concurrent.Executor executor33 = restAdapter17.callbackExecutor;
        java.util.concurrent.Executor executor34 = restAdapter17.httpExecutor;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor36 = restAdapter35.callbackExecutor;
        java.util.concurrent.Executor executor37 = restAdapter35.callbackExecutor;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler39 = restAdapter38.errorHandler;
        retrofit.Server server42 = new retrofit.Server("", "");
        restAdapter38.server = server42;
        restAdapter35.server = server42;
        restAdapter17.server = server42;
        restAdapter0.server = server42;
        retrofit.RestAdapter.RestHandler restHandler47 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor48 = restAdapter0.httpExecutor;
        retrofit.Profiler profiler49 = null;
        restAdapter0.profiler = profiler49;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNull(profiler30);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertNull(executor34);
        org.junit.Assert.assertNull(executor36);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNull(executor48);
    }

    @Test
    public void test04698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04698");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = null;
        restAdapter0.httpExecutor = executor2;
        retrofit.RequestInterceptor requestInterceptor4 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler6 = builder5.errorHandler;
        retrofit.client.Client.Provider provider7 = null;
        builder5.clientProvider = provider7;
        retrofit.Server server11 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder12 = builder5.setServer(server11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler14 = builder13.errorHandler;
        retrofit.client.Client.Provider provider15 = null;
        builder13.clientProvider = provider15;
        retrofit.converter.Converter converter17 = builder13.converter;
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder19 = builder13.setLogLevel(logLevel18);
        builder5.logLevel = logLevel18;
        restAdapter0.logLevel = logLevel18;
        retrofit.RestAdapter.RestHandler restHandler22 = restAdapter0.new RestHandler();
        retrofit.Server server23 = null;
        retrofit.client.Client.Provider provider24 = null;
        java.util.concurrent.Executor executor25 = null;
        java.util.concurrent.Executor executor26 = null;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        retrofit.converter.Converter converter28 = null;
        retrofit.Profiler profiler29 = null;
        retrofit.ErrorHandler errorHandler30 = null;
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        log31.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server23, provider24, executor25, executor26, requestInterceptor27, converter28, profiler29, errorHandler30, log31, logLevel34);
        retrofit.RestAdapter.RestHandler restHandler36 = restAdapter35.new RestHandler();
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        restAdapter35.log = log37;
        retrofit.converter.Converter converter39 = null;
        restAdapter35.converter = converter39;
        retrofit.RestAdapter.RestHandler restHandler41 = restAdapter35.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor42 = restAdapter35.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel43 = restAdapter35.getLogLevel();
        restAdapter0.setLogLevel(logLevel43);
        retrofit.RestAdapter.LogLevel logLevel45 = restAdapter0.getLogLevel();
        boolean boolean46 = logLevel45.log();
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(converter17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNull(requestInterceptor42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test04699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04699");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        restAdapter5.log = log15;
        retrofit.RestAdapter.Builder builder17 = builder4.setLog(log15);
        retrofit.converter.Converter converter18 = null;
        builder17.converter = converter18;
        retrofit.RestAdapter.Builder builder21 = builder17.setServer("hi!");
        builder17.ensureSaneDefaults();
        retrofit.RestAdapter.Log log23 = builder17.log;
        retrofit.RequestInterceptor requestInterceptor24 = builder17.requestInterceptor;
        retrofit.RestAdapter restAdapter25 = builder17.build();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNotNull(requestInterceptor24);
        org.junit.Assert.assertNotNull(restAdapter25);
    }

    @Test
    public void test04700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04700");
        retrofit.client.Header[] headerArray16 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList17 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList17, headerArray16);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList17, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList17, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList17, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList17, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("default", "hi!", (java.util.List<retrofit.client.Header>) headerList17, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList17, typedOutput29);
        java.lang.String str31 = request30.getMethod();
        java.util.List<retrofit.client.Header> headerList32 = request30.getHeaders();
        retrofit.mime.TypedOutput typedOutput33 = null;
        retrofit.client.Request request34 = new retrofit.client.Request("default", "hi!", headerList32, typedOutput33);
        retrofit.mime.TypedOutput typedOutput35 = null;
        retrofit.client.Request request36 = new retrofit.client.Request("hi!", "default", headerList32, typedOutput35);
        org.junit.Assert.assertNotNull(headerArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNotNull(headerList32);
    }

    @Test
    public void test04701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04701");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = null;
        restAdapter0.callbackExecutor = executor2;
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor5 = restAdapter4.callbackExecutor;
        java.util.concurrent.Executor executor6 = restAdapter4.callbackExecutor;
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler8 = restAdapter7.errorHandler;
        retrofit.Server server11 = new retrofit.Server("", "");
        restAdapter7.server = server11;
        restAdapter4.server = server11;
        restAdapter0.server = server11;
        retrofit.client.Client.Provider provider15 = restAdapter0.clientProvider;
        retrofit.RestAdapter.Log log16 = restAdapter0.log;
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor18 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler20 = builder19.errorHandler;
        retrofit.ErrorHandler errorHandler21 = builder19.errorHandler;
        retrofit.Profiler profiler22 = builder19.profiler;
        retrofit.RestAdapter.Log log23 = builder19.log;
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.FULL;
        builder19.logLevel = logLevel24;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.Server server29 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder30 = builder26.setServer(server29);
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor32 = restAdapter31.callbackExecutor;
        java.util.concurrent.Executor executor33 = restAdapter31.callbackExecutor;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler35 = restAdapter34.errorHandler;
        retrofit.Server server38 = new retrofit.Server("", "");
        restAdapter34.server = server38;
        restAdapter31.server = server38;
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        restAdapter31.log = log41;
        retrofit.RestAdapter.Builder builder43 = builder30.setLog(log41);
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder45 = builder30.setLogLevel(logLevel44);
        retrofit.Profiler profiler46 = null;
        builder45.profiler = profiler46;
        retrofit.converter.Converter converter48 = null;
        builder45.converter = converter48;
        retrofit.ErrorHandler errorHandler50 = null;
        builder45.errorHandler = errorHandler50;
        retrofit.RestAdapter restAdapter52 = builder45.build();
        retrofit.ErrorHandler errorHandler53 = builder45.errorHandler;
        retrofit.RestAdapter.Builder builder54 = builder19.setErrorHandler(errorHandler53);
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler56 = builder55.errorHandler;
        retrofit.client.Client.Provider provider57 = null;
        builder55.clientProvider = provider57;
        retrofit.Server server61 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder62 = builder55.setServer(server61);
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler64 = builder63.errorHandler;
        retrofit.client.Client.Provider provider65 = null;
        builder63.clientProvider = provider65;
        retrofit.converter.Converter converter67 = builder63.converter;
        retrofit.RestAdapter.LogLevel logLevel68 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder69 = builder63.setLogLevel(logLevel68);
        builder55.logLevel = logLevel68;
        boolean boolean71 = logLevel68.log();
        builder19.logLevel = logLevel68;
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler74 = builder73.errorHandler;
        retrofit.ErrorHandler errorHandler75 = builder73.errorHandler;
        retrofit.converter.Converter converter76 = null;
        builder73.converter = converter76;
        retrofit.RequestInterceptor requestInterceptor78 = null;
        builder73.requestInterceptor = requestInterceptor78;
        retrofit.client.Client.Provider provider80 = builder73.clientProvider;
        builder73.ensureSaneDefaults();
        retrofit.client.Client.Provider provider82 = builder73.clientProvider;
        builder19.clientProvider = provider82;
        restAdapter0.clientProvider = provider82;
        retrofit.RestAdapter.Log log85 = restAdapter0.log;
        retrofit.RestAdapter.RestHandler restHandler86 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertNull(log16);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(log23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertNull(errorHandler35);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(restAdapter52);
        org.junit.Assert.assertNotNull(errorHandler53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(errorHandler56);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(errorHandler64);
        org.junit.Assert.assertNull(converter67);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(errorHandler74);
        org.junit.Assert.assertNull(errorHandler75);
        org.junit.Assert.assertNull(provider80);
        org.junit.Assert.assertNotNull(provider82);
        org.junit.Assert.assertNull(log85);
    }

    @Test
    public void test04702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04702");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.client.Client.Provider provider14 = restAdapter12.clientProvider;
        retrofit.RestAdapter.Log log15 = restAdapter12.log;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler17 = builder16.errorHandler;
        retrofit.client.Client.Provider provider18 = null;
        builder16.clientProvider = provider18;
        retrofit.Server server22 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder23 = builder16.setServer(server22);
        retrofit.Server server26 = new retrofit.Server("", "");
        builder23.server = server26;
        restAdapter12.server = server26;
        retrofit.RestAdapter.Log log29 = restAdapter12.log;
        retrofit.Profiler profiler30 = null;
        restAdapter12.profiler = profiler30;
        retrofit.Profiler profiler32 = restAdapter12.profiler;
        retrofit.RestAdapter.RestHandler restHandler33 = restAdapter12.new RestHandler();
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertNull(profiler32);
    }

    @Test
    public void test04703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04703");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        java.util.concurrent.Executor executor4 = null;
        builder0.httpExecutor = executor4;
        retrofit.Profiler profiler6 = null;
        builder0.profiler = profiler6;
        retrofit.RestAdapter.Builder builder9 = builder0.setServer("hi!");
        retrofit.Profiler profiler10 = builder0.profiler;
        java.util.concurrent.Executor executor11 = builder0.httpExecutor;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler13 = builder12.errorHandler;
        java.util.concurrent.Executor executor14 = builder12.callbackExecutor;
        retrofit.RestAdapter.Builder builder16 = builder12.setServer("hi!");
        retrofit.Server server19 = new retrofit.Server("default", "hi!");
        java.lang.String str20 = server19.getUrl();
        retrofit.RestAdapter.Builder builder21 = builder16.setServer(server19);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler23 = builder22.errorHandler;
        retrofit.ErrorHandler errorHandler24 = builder22.errorHandler;
        java.util.concurrent.Executor executor25 = builder22.callbackExecutor;
        java.util.concurrent.Executor executor26 = null;
        builder22.callbackExecutor = executor26;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler29 = builder28.errorHandler;
        retrofit.Server server32 = new retrofit.Server("", "");
        builder28.server = server32;
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        builder28.log = log34;
        retrofit.RestAdapter.LogLevel logLevel36 = builder28.logLevel;
        retrofit.RestAdapter.Builder builder37 = builder22.setLogLevel(logLevel36);
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler39 = builder38.errorHandler;
        retrofit.client.Client.Provider provider40 = null;
        builder38.clientProvider = provider40;
        retrofit.Server server44 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder45 = builder38.setServer(server44);
        retrofit.converter.Converter converter46 = null;
        builder45.converter = converter46;
        retrofit.RestAdapter restAdapter48 = builder45.build();
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler50 = builder49.errorHandler;
        java.util.concurrent.Executor executor51 = null;
        builder49.callbackExecutor = executor51;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider54 = builder53.clientProvider;
        java.util.concurrent.Executor executor55 = null;
        builder53.callbackExecutor = executor55;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.Server server60 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder61 = builder57.setServer(server60);
        java.lang.String str62 = server60.getUrl();
        retrofit.RestAdapter.Builder builder63 = builder53.setServer(server60);
        retrofit.RestAdapter.Builder builder64 = builder49.setServer(server60);
        restAdapter48.server = server60;
        retrofit.client.Client.Provider provider66 = restAdapter48.clientProvider;
        retrofit.RestAdapter.Builder builder67 = builder37.setClient(provider66);
        retrofit.RestAdapter.Builder builder68 = builder21.setClient(provider66);
        retrofit.RestAdapter.Builder builder69 = builder0.setClient(provider66);
        retrofit.RequestInterceptor requestInterceptor70 = builder69.requestInterceptor;
        java.util.concurrent.Executor executor71 = builder69.httpExecutor;
        retrofit.RestAdapter restAdapter72 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel73 = restAdapter72.logLevel;
        retrofit.RestAdapter.RestHandler restHandler74 = restAdapter72.new RestHandler();
        retrofit.RestAdapter.Log log75 = retrofit.RestAdapter.Log.NONE;
        log75.log("");
        restAdapter72.log = log75;
        retrofit.RestAdapter.Builder builder79 = builder69.setLog(log75);
        log75.log("hi!");
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(profiler10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "default" + "'", str20, "default");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(restAdapter48);
        org.junit.Assert.assertNull(errorHandler50);
        org.junit.Assert.assertNull(provider54);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(provider66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNull(requestInterceptor70);
        org.junit.Assert.assertNull(executor71);
        org.junit.Assert.assertNull(logLevel73);
        org.junit.Assert.assertNotNull(log75);
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test04704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04704");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.Profiler profiler3 = builder0.profiler;
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor5 = restAdapter4.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.Server server9 = new retrofit.Server("hi!", "hi!");
        restAdapter4.server = server9;
        retrofit.RestAdapter.Builder builder11 = builder0.setServer(server9);
        retrofit.converter.Converter converter12 = null;
        builder11.converter = converter12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        log22.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel25);
        builder11.logLevel = logLevel25;
        java.util.concurrent.Executor executor28 = builder11.callbackExecutor;
        retrofit.Server server29 = builder11.server;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler31 = builder30.errorHandler;
        java.util.concurrent.Executor executor32 = null;
        builder30.callbackExecutor = executor32;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider35 = builder34.clientProvider;
        java.util.concurrent.Executor executor36 = null;
        builder34.callbackExecutor = executor36;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.Server server41 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder42 = builder38.setServer(server41);
        java.lang.String str43 = server41.getUrl();
        retrofit.RestAdapter.Builder builder44 = builder34.setServer(server41);
        retrofit.RestAdapter.Builder builder45 = builder30.setServer(server41);
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider47 = builder46.clientProvider;
        java.util.concurrent.Executor executor48 = null;
        builder46.callbackExecutor = executor48;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.Server server53 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder54 = builder50.setServer(server53);
        java.lang.String str55 = server53.getUrl();
        retrofit.RestAdapter.Builder builder56 = builder46.setServer(server53);
        builder46.ensureSaneDefaults();
        retrofit.Server server58 = null;
        retrofit.client.Client.Provider provider59 = null;
        java.util.concurrent.Executor executor60 = null;
        java.util.concurrent.Executor executor61 = null;
        retrofit.RequestInterceptor requestInterceptor62 = null;
        retrofit.converter.Converter converter63 = null;
        retrofit.Profiler profiler64 = null;
        retrofit.ErrorHandler errorHandler65 = null;
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        log66.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel69 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter(server58, provider59, executor60, executor61, requestInterceptor62, converter63, profiler64, errorHandler65, log66, logLevel69);
        retrofit.RestAdapter.RestHandler restHandler71 = restAdapter70.new RestHandler();
        retrofit.RestAdapter.Log log72 = retrofit.RestAdapter.Log.NONE;
        restAdapter70.log = log72;
        retrofit.RestAdapter.Builder builder74 = builder46.setLog(log72);
        retrofit.RestAdapter.LogLevel logLevel75 = builder46.logLevel;
        retrofit.RestAdapter.Builder builder76 = builder45.setLogLevel(logLevel75);
        builder11.logLevel = logLevel75;
        boolean boolean78 = logLevel75.log();
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNotNull(server29);
        org.junit.Assert.assertNull(errorHandler31);
        org.junit.Assert.assertNull(provider35);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(provider47);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(log66);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test04705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04705");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server4 = new retrofit.Server("", "");
        builder0.server = server4;
        java.util.concurrent.Executor executor6 = null;
        builder0.httpExecutor = executor6;
        retrofit.RestAdapter.Builder builder9 = builder0.setServer("default");
        retrofit.RestAdapter restAdapter10 = builder0.build();
        retrofit.RestAdapter restAdapter11 = builder0.build();
        retrofit.Profiler profiler12 = restAdapter11.profiler;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(restAdapter10);
        org.junit.Assert.assertNotNull(restAdapter11);
        org.junit.Assert.assertNull(profiler12);
    }

    @Test
    public void test04706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04706");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.Profiler profiler18 = null;
        restAdapter0.profiler = profiler18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler21 = builder20.errorHandler;
        java.util.concurrent.Executor executor22 = builder20.callbackExecutor;
        retrofit.RestAdapter.Builder builder24 = builder20.setServer("hi!");
        retrofit.Server server27 = new retrofit.Server("default", "hi!");
        java.lang.String str28 = server27.getUrl();
        retrofit.RestAdapter.Builder builder29 = builder24.setServer(server27);
        retrofit.RestAdapter.LogLevel logLevel30 = builder29.logLevel;
        retrofit.ErrorHandler errorHandler31 = builder29.errorHandler;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler33 = builder32.errorHandler;
        java.util.concurrent.Executor executor34 = builder32.callbackExecutor;
        retrofit.RestAdapter.Builder builder36 = builder32.setServer("hi!");
        retrofit.Server server39 = new retrofit.Server("default", "hi!");
        java.lang.String str40 = server39.getUrl();
        retrofit.RestAdapter.Builder builder41 = builder36.setServer(server39);
        builder29.server = server39;
        restAdapter0.server = server39;
        retrofit.Server server44 = restAdapter0.server;
        java.lang.String str45 = server44.getName();
        java.lang.String str46 = server44.getName();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "default" + "'", str28, "default");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler31);
        org.junit.Assert.assertNull(errorHandler33);
        org.junit.Assert.assertNull(executor34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "default" + "'", str40, "default");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(server44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
    }

    @Test
    public void test04707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04707");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.client.Header[] headerArray22 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList23 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList23, headerArray22);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList23, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList23, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList23, typedOutput29);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList23, typedOutput31);
        retrofit.mime.TypedOutput typedOutput33 = request32.getBody();
        retrofit.client.Request request34 = restAdapter12.logAndReplaceRequest(request32);
        retrofit.ErrorHandler errorHandler35 = restAdapter12.errorHandler;
        retrofit.client.Header[] headerArray52 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList53 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList53, headerArray52);
        retrofit.mime.TypedOutput typedOutput55 = null;
        retrofit.client.Request request56 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList53, typedOutput55);
        retrofit.mime.TypedOutput typedOutput57 = null;
        retrofit.client.Request request58 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList53, typedOutput57);
        retrofit.mime.TypedOutput typedOutput59 = null;
        retrofit.client.Request request60 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList53, typedOutput59);
        retrofit.mime.TypedOutput typedOutput61 = null;
        retrofit.client.Request request62 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList53, typedOutput61);
        retrofit.mime.TypedOutput typedOutput63 = null;
        retrofit.client.Request request64 = new retrofit.client.Request("default", "hi!", (java.util.List<retrofit.client.Header>) headerList53, typedOutput63);
        retrofit.mime.TypedOutput typedOutput65 = null;
        retrofit.client.Request request66 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList53, typedOutput65);
        retrofit.mime.TypedOutput typedOutput67 = null;
        retrofit.client.Request request68 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList53, typedOutput67);
        retrofit.mime.TypedOutput typedOutput69 = null;
        retrofit.client.Request request70 = new retrofit.client.Request("default", "default", (java.util.List<retrofit.client.Header>) headerList53, typedOutput69);
        retrofit.client.Request request71 = restAdapter12.logAndReplaceRequest(request70);
        retrofit.converter.Converter converter72 = restAdapter12.converter;
        retrofit.client.Response response74 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response76 = restAdapter12.logAndReplaceResponse("default", response74, (long) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(typedOutput33);
        org.junit.Assert.assertNotNull(request34);
        org.junit.Assert.assertNull(errorHandler35);
        org.junit.Assert.assertNotNull(headerArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(request71);
        org.junit.Assert.assertNull(converter72);
    }

    @Test
    public void test04708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04708");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.logLevel;
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler4 = builder3.errorHandler;
        retrofit.ErrorHandler errorHandler5 = builder3.errorHandler;
        retrofit.Profiler profiler6 = builder3.profiler;
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor8 = restAdapter7.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler9 = restAdapter7.new RestHandler();
        retrofit.Server server12 = new retrofit.Server("hi!", "hi!");
        restAdapter7.server = server12;
        retrofit.RestAdapter.Builder builder14 = builder3.setServer(server12);
        retrofit.converter.Converter converter15 = null;
        builder14.converter = converter15;
        retrofit.Server server17 = null;
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Log log25 = retrofit.RestAdapter.Log.NONE;
        log25.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server17, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log25, logLevel28);
        builder14.logLevel = logLevel28;
        restAdapter0.logLevel = logLevel28;
        retrofit.RequestInterceptor requestInterceptor32 = restAdapter0.requestInterceptor;
        retrofit.converter.Converter converter33 = restAdapter0.converter;
        java.util.concurrent.Executor executor34 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor35 = restAdapter0.httpExecutor;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(errorHandler4);
        org.junit.Assert.assertNull(errorHandler5);
        org.junit.Assert.assertNull(profiler6);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(log25);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(requestInterceptor32);
        org.junit.Assert.assertNull(converter33);
        org.junit.Assert.assertNull(executor34);
        org.junit.Assert.assertNull(executor35);
    }

    @Test
    public void test04709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04709");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.client.Client.Provider provider2 = restAdapter0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter0.requestInterceptor;
        retrofit.ErrorHandler errorHandler4 = restAdapter0.errorHandler;
        retrofit.ErrorHandler errorHandler5 = restAdapter0.errorHandler;
        retrofit.RestAdapter.Log log6 = null;
        restAdapter0.log = log6;
        retrofit.RestAdapter.Log log8 = restAdapter0.log;
        org.junit.Assert.assertNull(provider2);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNull(errorHandler4);
        org.junit.Assert.assertNull(errorHandler5);
        org.junit.Assert.assertNull(log8);
    }

    @Test
    public void test04710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04710");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.Profiler profiler3 = builder0.profiler;
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor5 = restAdapter4.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.Server server9 = new retrofit.Server("hi!", "hi!");
        restAdapter4.server = server9;
        retrofit.RestAdapter.Builder builder11 = builder0.setServer(server9);
        retrofit.converter.Converter converter12 = null;
        builder11.converter = converter12;
        retrofit.Profiler profiler14 = null;
        builder11.profiler = profiler14;
        retrofit.RestAdapter restAdapter16 = builder11.build();
        java.util.concurrent.Executor executor17 = builder11.callbackExecutor;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler19 = builder18.errorHandler;
        retrofit.ErrorHandler errorHandler20 = builder18.errorHandler;
        retrofit.converter.Converter converter21 = null;
        builder18.converter = converter21;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        builder18.requestInterceptor = requestInterceptor23;
        retrofit.client.Client.Provider provider25 = builder18.clientProvider;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor27 = restAdapter26.callbackExecutor;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor29 = restAdapter28.callbackExecutor;
        java.util.concurrent.Executor executor30 = restAdapter28.callbackExecutor;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler32 = restAdapter31.errorHandler;
        retrofit.Server server35 = new retrofit.Server("", "");
        restAdapter31.server = server35;
        restAdapter28.server = server35;
        restAdapter26.server = server35;
        retrofit.Profiler profiler39 = restAdapter26.profiler;
        retrofit.ErrorHandler errorHandler40 = null;
        restAdapter26.errorHandler = errorHandler40;
        retrofit.RestAdapter.RestHandler restHandler42 = restAdapter26.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler43 = restAdapter26.new RestHandler();
        retrofit.client.Client.Provider provider44 = restAdapter26.clientProvider;
        retrofit.client.Client.Provider provider45 = restAdapter26.clientProvider;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler47 = builder46.errorHandler;
        retrofit.RequestInterceptor requestInterceptor48 = null;
        builder46.requestInterceptor = requestInterceptor48;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider51 = builder50.clientProvider;
        java.util.concurrent.Executor executor52 = null;
        builder50.callbackExecutor = executor52;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.Server server57 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder58 = builder54.setServer(server57);
        java.lang.String str59 = server57.getUrl();
        retrofit.RestAdapter.Builder builder60 = builder50.setServer(server57);
        builder50.ensureSaneDefaults();
        retrofit.Server server62 = null;
        retrofit.client.Client.Provider provider63 = null;
        java.util.concurrent.Executor executor64 = null;
        java.util.concurrent.Executor executor65 = null;
        retrofit.RequestInterceptor requestInterceptor66 = null;
        retrofit.converter.Converter converter67 = null;
        retrofit.Profiler profiler68 = null;
        retrofit.ErrorHandler errorHandler69 = null;
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        log70.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter74 = new retrofit.RestAdapter(server62, provider63, executor64, executor65, requestInterceptor66, converter67, profiler68, errorHandler69, log70, logLevel73);
        retrofit.RestAdapter.RestHandler restHandler75 = restAdapter74.new RestHandler();
        retrofit.RestAdapter.Log log76 = retrofit.RestAdapter.Log.NONE;
        restAdapter74.log = log76;
        retrofit.RestAdapter.Builder builder78 = builder50.setLog(log76);
        retrofit.RestAdapter.Builder builder80 = builder50.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor81 = builder50.requestInterceptor;
        builder46.requestInterceptor = requestInterceptor81;
        restAdapter26.requestInterceptor = requestInterceptor81;
        builder18.requestInterceptor = requestInterceptor81;
        retrofit.RestAdapter.Builder builder85 = builder11.setRequestInterceptor(requestInterceptor81);
        retrofit.Profiler profiler86 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder87 = builder85.setProfiler(profiler86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(restAdapter16);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNull(provider25);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNull(errorHandler32);
        org.junit.Assert.assertNull(profiler39);
        org.junit.Assert.assertNull(provider44);
        org.junit.Assert.assertNull(provider45);
        org.junit.Assert.assertNull(errorHandler47);
        org.junit.Assert.assertNull(provider51);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(requestInterceptor81);
        org.junit.Assert.assertNotNull(builder85);
    }

    @Test
    public void test04711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04711");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.client.Header[] headerArray22 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList23 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList23, headerArray22);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList23, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList23, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList23, typedOutput29);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList23, typedOutput31);
        retrofit.mime.TypedOutput typedOutput33 = request32.getBody();
        retrofit.client.Request request34 = restAdapter12.logAndReplaceRequest(request32);
        retrofit.RestAdapter.RestHandler restHandler35 = restAdapter12.new RestHandler();
        retrofit.client.Client.Provider provider36 = restAdapter12.clientProvider;
        retrofit.converter.Converter converter37 = restAdapter12.converter;
        retrofit.client.Header[] headerArray40 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList41 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList41, headerArray40);
        retrofit.mime.TypedOutput typedOutput43 = null;
        retrofit.client.Request request44 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList41, typedOutput43);
        java.lang.String str45 = request44.getUrl();
        retrofit.client.Request request46 = restAdapter12.logAndReplaceRequest(request44);
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(typedOutput33);
        org.junit.Assert.assertNotNull(request34);
        org.junit.Assert.assertNull(provider36);
        org.junit.Assert.assertNull(converter37);
        org.junit.Assert.assertNotNull(headerArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertNotNull(request46);
    }

    @Test
    public void test04712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04712");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        restAdapter12.log = log14;
        retrofit.converter.Converter converter16 = null;
        restAdapter12.converter = converter16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter12.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor19 = null;
        restAdapter12.requestInterceptor = requestInterceptor19;
        retrofit.RestAdapter.Log log21 = null;
        restAdapter12.log = log21;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler24 = null;
        builder23.errorHandler = errorHandler24;
        retrofit.ErrorHandler errorHandler26 = builder23.errorHandler;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler28 = builder27.errorHandler;
        retrofit.Server server31 = new retrofit.Server("", "");
        builder27.server = server31;
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        builder27.log = log33;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler36 = builder35.errorHandler;
        retrofit.client.Client.Provider provider37 = null;
        builder35.clientProvider = provider37;
        retrofit.Server server41 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder42 = builder35.setServer(server41);
        retrofit.converter.Converter converter43 = null;
        builder42.converter = converter43;
        retrofit.RestAdapter restAdapter45 = builder42.build();
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler47 = builder46.errorHandler;
        java.util.concurrent.Executor executor48 = null;
        builder46.callbackExecutor = executor48;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider51 = builder50.clientProvider;
        java.util.concurrent.Executor executor52 = null;
        builder50.callbackExecutor = executor52;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.Server server57 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder58 = builder54.setServer(server57);
        java.lang.String str59 = server57.getUrl();
        retrofit.RestAdapter.Builder builder60 = builder50.setServer(server57);
        retrofit.RestAdapter.Builder builder61 = builder46.setServer(server57);
        restAdapter45.server = server57;
        java.util.concurrent.Executor executor63 = restAdapter45.httpExecutor;
        builder27.httpExecutor = executor63;
        builder23.httpExecutor = executor63;
        restAdapter12.callbackExecutor = executor63;
        retrofit.RestAdapter.LogLevel logLevel67 = restAdapter12.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor68 = restAdapter12.requestInterceptor;
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler26);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNull(errorHandler36);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(restAdapter45);
        org.junit.Assert.assertNull(errorHandler47);
        org.junit.Assert.assertNull(provider51);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(executor63);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(requestInterceptor68);
    }

    @Test
    public void test04713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04713");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.converter.Converter converter5 = builder0.converter;
        retrofit.RequestInterceptor requestInterceptor6 = builder0.requestInterceptor;
        java.util.concurrent.Executor executor7 = builder0.callbackExecutor;
        retrofit.Profiler profiler8 = builder0.profiler;
        java.util.concurrent.Executor executor9 = builder0.callbackExecutor;
        retrofit.Server server10 = builder0.server;
        retrofit.Profiler profiler11 = builder0.profiler;
        retrofit.RestAdapter.LogLevel logLevel12 = builder0.logLevel;
        java.util.concurrent.Executor executor13 = builder0.httpExecutor;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(converter5);
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(profiler8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNotNull(server10);
        org.junit.Assert.assertNull(profiler11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor13);
    }

    @Test
    public void test04714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04714");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean6 = logLevel5.log();
        builder0.logLevel = logLevel5;
        retrofit.ErrorHandler errorHandler8 = builder0.errorHandler;
        java.util.concurrent.Executor executor9 = builder0.httpExecutor;
        retrofit.converter.Converter converter10 = builder0.converter;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(converter10);
    }

    @Test
    public void test04715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04715");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = builder0.callbackExecutor;
        retrofit.RestAdapter restAdapter3 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor4 = restAdapter3.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter3.new RestHandler();
        retrofit.Server server8 = new retrofit.Server("hi!", "hi!");
        restAdapter3.server = server8;
        retrofit.Server server10 = restAdapter3.server;
        retrofit.converter.Converter converter11 = restAdapter3.converter;
        retrofit.Server server14 = new retrofit.Server("", "hi!");
        restAdapter3.server = server14;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.Server server19 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder20 = builder16.setServer(server19);
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor22 = restAdapter21.callbackExecutor;
        java.util.concurrent.Executor executor23 = restAdapter21.callbackExecutor;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler25 = restAdapter24.errorHandler;
        retrofit.Server server28 = new retrofit.Server("", "");
        restAdapter24.server = server28;
        restAdapter21.server = server28;
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        restAdapter21.log = log31;
        retrofit.RestAdapter.Builder builder33 = builder20.setLog(log31);
        retrofit.converter.Converter converter34 = null;
        builder33.converter = converter34;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler37 = builder36.errorHandler;
        retrofit.ErrorHandler errorHandler38 = builder36.errorHandler;
        retrofit.Profiler profiler39 = builder36.profiler;
        retrofit.RestAdapter.Log log40 = builder36.log;
        retrofit.Server server41 = null;
        retrofit.client.Client.Provider provider42 = null;
        java.util.concurrent.Executor executor43 = null;
        java.util.concurrent.Executor executor44 = null;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        retrofit.converter.Converter converter46 = null;
        retrofit.Profiler profiler47 = null;
        retrofit.ErrorHandler errorHandler48 = null;
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        log49.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server41, provider42, executor43, executor44, requestInterceptor45, converter46, profiler47, errorHandler48, log49, logLevel52);
        builder36.log = log49;
        retrofit.RestAdapter.Builder builder55 = builder33.setLog(log49);
        retrofit.RestAdapter.LogLevel logLevel56 = builder33.logLevel;
        restAdapter3.logLevel = logLevel56;
        builder0.logLevel = logLevel56;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNotNull(server10);
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNull(errorHandler25);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNull(errorHandler38);
        org.junit.Assert.assertNull(profiler39);
        org.junit.Assert.assertNull(log40);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test04716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04716");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.client.Client.Provider provider2 = restAdapter0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter0.requestInterceptor;
        retrofit.ErrorHandler errorHandler4 = restAdapter0.errorHandler;
        retrofit.converter.Converter converter5 = null;
        restAdapter0.converter = converter5;
        java.lang.Throwable throwable7 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable7, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(provider2);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNull(errorHandler4);
    }

    @Test
    public void test04717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04717");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        restAdapter5.log = log15;
        retrofit.RestAdapter.Builder builder17 = builder4.setLog(log15);
        retrofit.RestAdapter.Builder builder19 = builder4.setServer("hi!");
        retrofit.RestAdapter.Log log20 = builder19.log;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler22 = builder21.errorHandler;
        retrofit.ErrorHandler errorHandler23 = builder21.errorHandler;
        java.util.concurrent.Executor executor24 = builder21.callbackExecutor;
        java.util.concurrent.Executor executor25 = null;
        builder21.callbackExecutor = executor25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler28 = builder27.errorHandler;
        retrofit.Server server31 = new retrofit.Server("", "");
        builder27.server = server31;
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        builder27.log = log33;
        retrofit.RestAdapter.LogLevel logLevel35 = builder27.logLevel;
        retrofit.RestAdapter.Builder builder36 = builder21.setLogLevel(logLevel35);
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler38 = builder37.errorHandler;
        retrofit.client.Client.Provider provider39 = null;
        builder37.clientProvider = provider39;
        retrofit.Server server43 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder44 = builder37.setServer(server43);
        retrofit.converter.Converter converter45 = null;
        builder44.converter = converter45;
        retrofit.RestAdapter restAdapter47 = builder44.build();
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler49 = builder48.errorHandler;
        java.util.concurrent.Executor executor50 = null;
        builder48.callbackExecutor = executor50;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider53 = builder52.clientProvider;
        java.util.concurrent.Executor executor54 = null;
        builder52.callbackExecutor = executor54;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.Server server59 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder60 = builder56.setServer(server59);
        java.lang.String str61 = server59.getUrl();
        retrofit.RestAdapter.Builder builder62 = builder52.setServer(server59);
        retrofit.RestAdapter.Builder builder63 = builder48.setServer(server59);
        restAdapter47.server = server59;
        retrofit.client.Client.Provider provider65 = restAdapter47.clientProvider;
        retrofit.RestAdapter.Builder builder66 = builder36.setClient(provider65);
        retrofit.RestAdapter.Builder builder67 = builder19.setClient(provider65);
        retrofit.Profiler profiler68 = builder19.profiler;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(errorHandler38);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(restAdapter47);
        org.junit.Assert.assertNull(errorHandler49);
        org.junit.Assert.assertNull(provider53);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(provider65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNull(profiler68);
    }

    @Test
    public void test04718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04718");
        retrofit.client.Header[] headerArray16 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList17 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList17, headerArray16);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList17, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList17, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList17, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList17, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList17, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("", "default", (java.util.List<retrofit.client.Header>) headerList17, typedOutput29);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList17, typedOutput31);
        retrofit.mime.TypedOutput typedOutput33 = null;
        retrofit.client.Request request34 = new retrofit.client.Request("default", "default", (java.util.List<retrofit.client.Header>) headerList17, typedOutput33);
        org.junit.Assert.assertNotNull(headerArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test04719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04719");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter0.new RestHandler();
        retrofit.client.Client.Provider provider15 = restAdapter0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter0.logLevel;
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter0.new RestHandler();
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor19 = restAdapter18.callbackExecutor;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor21 = restAdapter20.callbackExecutor;
        java.util.concurrent.Executor executor22 = restAdapter20.callbackExecutor;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler24 = restAdapter23.errorHandler;
        retrofit.Server server27 = new retrofit.Server("", "");
        restAdapter23.server = server27;
        restAdapter20.server = server27;
        restAdapter18.server = server27;
        retrofit.Profiler profiler31 = restAdapter18.profiler;
        retrofit.ErrorHandler errorHandler32 = null;
        restAdapter18.errorHandler = errorHandler32;
        retrofit.RequestInterceptor requestInterceptor34 = restAdapter18.requestInterceptor;
        retrofit.ErrorHandler errorHandler35 = restAdapter18.errorHandler;
        java.util.concurrent.Executor executor36 = null;
        restAdapter18.callbackExecutor = executor36;
        java.util.concurrent.Executor executor38 = restAdapter18.httpExecutor;
        retrofit.client.Client.Provider provider39 = restAdapter18.clientProvider;
        retrofit.RestAdapter.Log log40 = restAdapter18.log;
        java.util.concurrent.Executor executor41 = restAdapter18.callbackExecutor;
        retrofit.client.Client.Provider provider42 = restAdapter18.clientProvider;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler44 = builder43.errorHandler;
        retrofit.ErrorHandler errorHandler45 = builder43.errorHandler;
        retrofit.RestAdapter.Log log46 = null;
        builder43.log = log46;
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean49 = logLevel48.log();
        builder43.logLevel = logLevel48;
        retrofit.ErrorHandler errorHandler51 = builder43.errorHandler;
        retrofit.RestAdapter.Builder builder53 = builder43.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor54 = null;
        builder53.requestInterceptor = requestInterceptor54;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler57 = builder56.errorHandler;
        retrofit.client.Client.Provider provider58 = null;
        builder56.clientProvider = provider58;
        retrofit.Server server62 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder63 = builder56.setServer(server62);
        retrofit.client.Client.Provider provider64 = null;
        java.util.concurrent.Executor executor65 = null;
        java.util.concurrent.Executor executor66 = null;
        retrofit.RequestInterceptor requestInterceptor67 = null;
        retrofit.converter.Converter converter68 = null;
        retrofit.Profiler profiler69 = null;
        retrofit.ErrorHandler errorHandler70 = null;
        retrofit.Server server71 = null;
        retrofit.client.Client.Provider provider72 = null;
        java.util.concurrent.Executor executor73 = null;
        java.util.concurrent.Executor executor74 = null;
        retrofit.RequestInterceptor requestInterceptor75 = null;
        retrofit.converter.Converter converter76 = null;
        retrofit.Profiler profiler77 = null;
        retrofit.ErrorHandler errorHandler78 = null;
        retrofit.RestAdapter.Log log79 = retrofit.RestAdapter.Log.NONE;
        log79.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel82 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter83 = new retrofit.RestAdapter(server71, provider72, executor73, executor74, requestInterceptor75, converter76, profiler77, errorHandler78, log79, logLevel82);
        retrofit.RestAdapter.LogLevel logLevel84 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter85 = new retrofit.RestAdapter(server62, provider64, executor65, executor66, requestInterceptor67, converter68, profiler69, errorHandler70, log79, logLevel84);
        log79.log("");
        builder53.log = log79;
        retrofit.RestAdapter.Log log89 = builder53.log;
        restAdapter18.log = log89;
        retrofit.RestAdapter.Log log91 = restAdapter18.log;
        retrofit.RestAdapter.LogLevel logLevel92 = restAdapter18.logLevel;
        retrofit.Server server93 = restAdapter18.server;
        java.lang.String str94 = server93.getName();
        restAdapter0.server = server93;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertNull(logLevel16);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNull(profiler31);
        org.junit.Assert.assertNull(requestInterceptor34);
        org.junit.Assert.assertNull(errorHandler35);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNull(provider39);
        org.junit.Assert.assertNull(log40);
        org.junit.Assert.assertNull(executor41);
        org.junit.Assert.assertNull(provider42);
        org.junit.Assert.assertNull(errorHandler44);
        org.junit.Assert.assertNull(errorHandler45);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(errorHandler51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(errorHandler57);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(log79);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel84 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel84.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log89);
        org.junit.Assert.assertNotNull(log91);
        org.junit.Assert.assertNull(logLevel92);
        org.junit.Assert.assertNotNull(server93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
    }

    @Test
    public void test04720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04720");
        retrofit.client.Header[] headerArray16 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList17 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList17, headerArray16);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList17, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList17, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList17, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList17, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("default", "hi!", (java.util.List<retrofit.client.Header>) headerList17, typedOutput27);
        java.util.List<retrofit.client.Header> headerList29 = request28.getHeaders();
        retrofit.mime.TypedOutput typedOutput30 = null;
        retrofit.client.Request request31 = new retrofit.client.Request("hi!", "default", headerList29, typedOutput30);
        retrofit.mime.TypedOutput typedOutput32 = null;
        retrofit.client.Request request33 = new retrofit.client.Request("", "default", headerList29, typedOutput32);
        retrofit.mime.TypedOutput typedOutput34 = null;
        retrofit.client.Request request35 = new retrofit.client.Request("default", "", headerList29, typedOutput34);
        java.lang.String str36 = request35.getUrl();
        org.junit.Assert.assertNotNull(headerArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(headerList29);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
    }

    @Test
    public void test04721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04721");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = null;
        restAdapter0.callbackExecutor = executor2;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.client.Client.Provider provider6 = restAdapter0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter0.getLogLevel();
        java.util.concurrent.Executor executor8 = restAdapter0.callbackExecutor;
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(provider6);
        org.junit.Assert.assertNull(logLevel7);
        org.junit.Assert.assertNull(executor8);
    }

    @Test
    public void test04722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04722");
        retrofit.Server server2 = null;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        log10.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter(server2, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log10, logLevel13);
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter14.new RestHandler();
        retrofit.client.Header[] headerArray24 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList25 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList25, headerArray24);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList25, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList25, typedOutput29);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList25, typedOutput31);
        retrofit.mime.TypedOutput typedOutput33 = null;
        retrofit.client.Request request34 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList25, typedOutput33);
        retrofit.mime.TypedOutput typedOutput35 = request34.getBody();
        retrofit.client.Request request36 = restAdapter14.logAndReplaceRequest(request34);
        java.util.List<retrofit.client.Header> headerList37 = request34.getHeaders();
        retrofit.mime.TypedOutput typedOutput38 = null;
        retrofit.client.Request request39 = new retrofit.client.Request("", "", headerList37, typedOutput38);
        retrofit.mime.TypedOutput typedOutput40 = request39.getBody();
        java.lang.String str41 = request39.getMethod();
        org.junit.Assert.assertNotNull(log10);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(typedOutput35);
        org.junit.Assert.assertNotNull(request36);
        org.junit.Assert.assertNotNull(headerList37);
        org.junit.Assert.assertNull(typedOutput40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
    }

    @Test
    public void test04723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04723");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean6 = logLevel5.log();
        builder0.logLevel = logLevel5;
        retrofit.ErrorHandler errorHandler8 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder10 = builder0.setServer("hi!");
        retrofit.ErrorHandler errorHandler11 = builder0.errorHandler;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.Server server16 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder17 = builder13.setServer(server16);
        retrofit.RestAdapter.LogLevel logLevel18 = builder17.logLevel;
        java.util.concurrent.Executor executor19 = builder17.httpExecutor;
        retrofit.RestAdapter restAdapter20 = builder17.build();
        retrofit.ErrorHandler errorHandler21 = builder17.errorHandler;
        retrofit.RestAdapter.Builder builder22 = builder0.setErrorHandler(errorHandler21);
        retrofit.RestAdapter.Builder builder24 = builder0.setServer("hi!");
        retrofit.Profiler profiler25 = null;
        builder24.profiler = profiler25;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNotNull(restAdapter20);
        org.junit.Assert.assertNotNull(errorHandler21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test04724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04724");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider5 = builder4.clientProvider;
        java.util.concurrent.Executor executor6 = null;
        builder4.callbackExecutor = executor6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.Server server11 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder12 = builder8.setServer(server11);
        java.lang.String str13 = server11.getUrl();
        retrofit.RestAdapter.Builder builder14 = builder4.setServer(server11);
        retrofit.RestAdapter.Builder builder15 = builder0.setServer(server11);
        retrofit.ErrorHandler errorHandler16 = builder15.errorHandler;
        java.util.concurrent.Executor executor17 = builder15.httpExecutor;
        retrofit.RestAdapter.Log log18 = builder15.log;
        retrofit.converter.Converter converter19 = builder15.converter;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(log18);
        org.junit.Assert.assertNull(converter19);
    }

    @Test
    public void test04725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04725");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.Profiler profiler19 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter0.new RestHandler();
        java.lang.Class<?> wildcardClass21 = restHandler20.getClass();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(profiler19);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test04726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04726");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        restAdapter5.log = log15;
        retrofit.RestAdapter.Builder builder17 = builder4.setLog(log15);
        retrofit.converter.Converter converter18 = null;
        builder17.converter = converter18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler21 = builder20.errorHandler;
        retrofit.ErrorHandler errorHandler22 = builder20.errorHandler;
        retrofit.Profiler profiler23 = builder20.profiler;
        retrofit.RestAdapter.Log log24 = builder20.log;
        retrofit.Server server25 = null;
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        log33.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter(server25, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log33, logLevel36);
        builder20.log = log33;
        retrofit.RestAdapter.Builder builder39 = builder17.setLog(log33);
        retrofit.RestAdapter.LogLevel logLevel40 = builder17.logLevel;
        retrofit.RestAdapter.Log log41 = builder17.log;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler43 = builder42.errorHandler;
        retrofit.RequestInterceptor requestInterceptor44 = null;
        builder42.requestInterceptor = requestInterceptor44;
        retrofit.RestAdapter.Builder builder47 = builder42.setServer("default");
        retrofit.Server server48 = builder42.server;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler50 = builder49.errorHandler;
        retrofit.client.Client.Provider provider51 = null;
        builder49.clientProvider = provider51;
        retrofit.Server server55 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder56 = builder49.setServer(server55);
        retrofit.converter.Converter converter57 = null;
        builder56.converter = converter57;
        retrofit.RestAdapter restAdapter59 = builder56.build();
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler61 = builder60.errorHandler;
        java.util.concurrent.Executor executor62 = null;
        builder60.callbackExecutor = executor62;
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider65 = builder64.clientProvider;
        java.util.concurrent.Executor executor66 = null;
        builder64.callbackExecutor = executor66;
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        retrofit.Server server71 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder72 = builder68.setServer(server71);
        java.lang.String str73 = server71.getUrl();
        retrofit.RestAdapter.Builder builder74 = builder64.setServer(server71);
        retrofit.RestAdapter.Builder builder75 = builder60.setServer(server71);
        restAdapter59.server = server71;
        retrofit.Server server77 = restAdapter59.server;
        retrofit.converter.Converter converter78 = restAdapter59.converter;
        builder42.converter = converter78;
        builder17.converter = converter78;
        java.util.concurrent.Executor executor81 = builder17.httpExecutor;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNull(profiler23);
        org.junit.Assert.assertNull(log24);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertNull(errorHandler43);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(server48);
        org.junit.Assert.assertNull(errorHandler50);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(restAdapter59);
        org.junit.Assert.assertNull(errorHandler61);
        org.junit.Assert.assertNull(provider65);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "hi!" + "'", str73, "hi!");
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(server77);
        org.junit.Assert.assertNotNull(converter78);
        org.junit.Assert.assertNull(executor81);
    }

    @Test
    public void test04727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04727");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RequestInterceptor requestInterceptor1 = null;
        builder0.requestInterceptor = requestInterceptor1;
        retrofit.Server server3 = null;
        retrofit.client.Client.Provider provider4 = null;
        java.util.concurrent.Executor executor5 = null;
        java.util.concurrent.Executor executor6 = null;
        retrofit.RequestInterceptor requestInterceptor7 = null;
        retrofit.converter.Converter converter8 = null;
        retrofit.Profiler profiler9 = null;
        retrofit.ErrorHandler errorHandler10 = null;
        retrofit.RestAdapter.Log log11 = retrofit.RestAdapter.Log.NONE;
        log11.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter(server3, provider4, executor5, executor6, requestInterceptor7, converter8, profiler9, errorHandler10, log11, logLevel14);
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter15.new RestHandler();
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        restAdapter15.log = log17;
        retrofit.converter.Converter converter19 = null;
        restAdapter15.converter = converter19;
        retrofit.RestAdapter.LogLevel logLevel21 = restAdapter15.getLogLevel();
        builder0.logLevel = logLevel21;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor24 = restAdapter23.callbackExecutor;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor26 = restAdapter25.callbackExecutor;
        java.util.concurrent.Executor executor27 = restAdapter25.callbackExecutor;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler29 = restAdapter28.errorHandler;
        retrofit.Server server32 = new retrofit.Server("", "");
        restAdapter28.server = server32;
        restAdapter25.server = server32;
        restAdapter23.server = server32;
        retrofit.Profiler profiler36 = restAdapter23.profiler;
        retrofit.ErrorHandler errorHandler37 = null;
        restAdapter23.errorHandler = errorHandler37;
        retrofit.RequestInterceptor requestInterceptor39 = restAdapter23.requestInterceptor;
        retrofit.ErrorHandler errorHandler40 = restAdapter23.errorHandler;
        java.util.concurrent.Executor executor41 = null;
        restAdapter23.callbackExecutor = executor41;
        java.util.concurrent.Executor executor43 = restAdapter23.httpExecutor;
        retrofit.client.Client.Provider provider44 = restAdapter23.clientProvider;
        retrofit.RestAdapter.Log log45 = restAdapter23.log;
        java.util.concurrent.Executor executor46 = restAdapter23.callbackExecutor;
        retrofit.client.Client.Provider provider47 = restAdapter23.clientProvider;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler49 = builder48.errorHandler;
        retrofit.ErrorHandler errorHandler50 = builder48.errorHandler;
        retrofit.RestAdapter.Log log51 = null;
        builder48.log = log51;
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean54 = logLevel53.log();
        builder48.logLevel = logLevel53;
        retrofit.ErrorHandler errorHandler56 = builder48.errorHandler;
        retrofit.RestAdapter.Builder builder58 = builder48.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor59 = null;
        builder58.requestInterceptor = requestInterceptor59;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler62 = builder61.errorHandler;
        retrofit.client.Client.Provider provider63 = null;
        builder61.clientProvider = provider63;
        retrofit.Server server67 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder68 = builder61.setServer(server67);
        retrofit.client.Client.Provider provider69 = null;
        java.util.concurrent.Executor executor70 = null;
        java.util.concurrent.Executor executor71 = null;
        retrofit.RequestInterceptor requestInterceptor72 = null;
        retrofit.converter.Converter converter73 = null;
        retrofit.Profiler profiler74 = null;
        retrofit.ErrorHandler errorHandler75 = null;
        retrofit.Server server76 = null;
        retrofit.client.Client.Provider provider77 = null;
        java.util.concurrent.Executor executor78 = null;
        java.util.concurrent.Executor executor79 = null;
        retrofit.RequestInterceptor requestInterceptor80 = null;
        retrofit.converter.Converter converter81 = null;
        retrofit.Profiler profiler82 = null;
        retrofit.ErrorHandler errorHandler83 = null;
        retrofit.RestAdapter.Log log84 = retrofit.RestAdapter.Log.NONE;
        log84.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel87 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter88 = new retrofit.RestAdapter(server76, provider77, executor78, executor79, requestInterceptor80, converter81, profiler82, errorHandler83, log84, logLevel87);
        retrofit.RestAdapter.LogLevel logLevel89 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter90 = new retrofit.RestAdapter(server67, provider69, executor70, executor71, requestInterceptor72, converter73, profiler74, errorHandler75, log84, logLevel89);
        log84.log("");
        builder58.log = log84;
        retrofit.RestAdapter.Log log94 = builder58.log;
        restAdapter23.log = log94;
        retrofit.RestAdapter.Builder builder96 = builder0.setLog(log94);
        log94.log("");
        org.junit.Assert.assertNotNull(log11);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNull(profiler36);
        org.junit.Assert.assertNull(requestInterceptor39);
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNull(executor43);
        org.junit.Assert.assertNull(provider44);
        org.junit.Assert.assertNull(log45);
        org.junit.Assert.assertNull(executor46);
        org.junit.Assert.assertNull(provider47);
        org.junit.Assert.assertNull(errorHandler49);
        org.junit.Assert.assertNull(errorHandler50);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(errorHandler56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(errorHandler62);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(log84);
        org.junit.Assert.assertTrue("'" + logLevel87 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel87.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel89 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel89.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log94);
        org.junit.Assert.assertNotNull(builder96);
    }

    @Test
    public void test04728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04728");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        restAdapter12.log = log14;
        retrofit.converter.Converter converter16 = null;
        restAdapter12.converter = converter16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server21 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder22 = builder18.setServer(server21);
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor24 = restAdapter23.callbackExecutor;
        java.util.concurrent.Executor executor25 = restAdapter23.callbackExecutor;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler27 = restAdapter26.errorHandler;
        retrofit.Server server30 = new retrofit.Server("", "");
        restAdapter26.server = server30;
        restAdapter23.server = server30;
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        restAdapter23.log = log33;
        retrofit.RestAdapter.Builder builder35 = builder22.setLog(log33);
        restAdapter12.log = log33;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler38 = builder37.errorHandler;
        retrofit.Server server41 = new retrofit.Server("", "");
        builder37.server = server41;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor44 = restAdapter43.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler45 = restAdapter43.new RestHandler();
        retrofit.Server server48 = new retrofit.Server("hi!", "hi!");
        restAdapter43.server = server48;
        retrofit.RestAdapter.Builder builder50 = builder37.setServer(server48);
        restAdapter12.server = server48;
        retrofit.RestAdapter.RestHandler restHandler52 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter12.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler54 = restAdapter12.new RestHandler();
        retrofit.client.Client.Provider provider55 = restAdapter12.clientProvider;
        retrofit.Server server56 = restAdapter12.server;
        retrofit.Profiler profiler57 = null;
        restAdapter12.profiler = profiler57;
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(errorHandler38);
        org.junit.Assert.assertNull(executor44);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(provider55);
        org.junit.Assert.assertNotNull(server56);
    }

    @Test
    public void test04729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04729");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.converter.Converter converter4 = builder0.converter;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor8 = restAdapter7.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean10 = logLevel9.log();
        restAdapter7.logLevel = logLevel9;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler13 = builder12.errorHandler;
        retrofit.client.Client.Provider provider14 = null;
        builder12.clientProvider = provider14;
        retrofit.Server server18 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder19 = builder12.setServer(server18);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler21 = builder20.errorHandler;
        retrofit.client.Client.Provider provider22 = null;
        builder20.clientProvider = provider22;
        retrofit.converter.Converter converter24 = builder20.converter;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder26 = builder20.setLogLevel(logLevel25);
        builder12.logLevel = logLevel25;
        boolean boolean28 = logLevel25.log();
        restAdapter7.logLevel = logLevel25;
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        builder6.ensureSaneDefaults();
        retrofit.Server server32 = null;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        log40.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log40, logLevel43);
        retrofit.RestAdapter.RestHandler restHandler45 = restAdapter44.new RestHandler();
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        restAdapter44.log = log46;
        retrofit.converter.Converter converter48 = null;
        restAdapter44.converter = converter48;
        retrofit.RestAdapter.RestHandler restHandler50 = restAdapter44.new RestHandler();
        retrofit.Profiler profiler51 = null;
        restAdapter44.profiler = profiler51;
        retrofit.Profiler profiler53 = null;
        restAdapter44.profiler = profiler53;
        retrofit.RestAdapter.Log log55 = restAdapter44.log;
        builder6.log = log55;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(converter24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertNotNull(log55);
    }

    @Test
    public void test04730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04730");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.Profiler profiler3 = builder0.profiler;
        retrofit.RestAdapter.Log log4 = builder0.log;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler6 = builder5.errorHandler;
        java.util.concurrent.Executor executor7 = builder5.callbackExecutor;
        retrofit.RestAdapter.Builder builder9 = builder5.setServer("hi!");
        retrofit.Server server12 = new retrofit.Server("default", "hi!");
        java.lang.String str13 = server12.getUrl();
        retrofit.RestAdapter.Builder builder14 = builder9.setServer(server12);
        retrofit.RestAdapter.LogLevel logLevel15 = builder14.logLevel;
        builder14.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor18 = restAdapter17.callbackExecutor;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor20 = restAdapter19.callbackExecutor;
        java.util.concurrent.Executor executor21 = restAdapter19.callbackExecutor;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler23 = restAdapter22.errorHandler;
        retrofit.Server server26 = new retrofit.Server("", "");
        restAdapter22.server = server26;
        restAdapter19.server = server26;
        restAdapter17.server = server26;
        retrofit.Profiler profiler30 = restAdapter17.profiler;
        retrofit.ErrorHandler errorHandler31 = null;
        restAdapter17.errorHandler = errorHandler31;
        retrofit.Profiler profiler33 = null;
        restAdapter17.profiler = profiler33;
        retrofit.RestAdapter.LogLevel logLevel35 = restAdapter17.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter17.getLogLevel();
        retrofit.ErrorHandler errorHandler37 = null;
        restAdapter17.errorHandler = errorHandler37;
        retrofit.client.Client.Provider provider39 = null;
        restAdapter17.clientProvider = provider39;
        retrofit.converter.Converter converter41 = restAdapter17.converter;
        retrofit.RestAdapter.RestHandler restHandler42 = restAdapter17.new RestHandler();
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider44 = builder43.clientProvider;
        java.util.concurrent.Executor executor45 = null;
        builder43.callbackExecutor = executor45;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.Server server50 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder51 = builder47.setServer(server50);
        java.lang.String str52 = server50.getUrl();
        retrofit.RestAdapter.Builder builder53 = builder43.setServer(server50);
        builder43.ensureSaneDefaults();
        java.util.concurrent.Executor executor55 = builder43.httpExecutor;
        restAdapter17.httpExecutor = executor55;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider58 = builder57.clientProvider;
        java.util.concurrent.Executor executor59 = null;
        builder57.callbackExecutor = executor59;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.Server server64 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder65 = builder61.setServer(server64);
        java.lang.String str66 = server64.getUrl();
        retrofit.RestAdapter.Builder builder67 = builder57.setServer(server64);
        builder57.ensureSaneDefaults();
        retrofit.Server server69 = null;
        retrofit.client.Client.Provider provider70 = null;
        java.util.concurrent.Executor executor71 = null;
        java.util.concurrent.Executor executor72 = null;
        retrofit.RequestInterceptor requestInterceptor73 = null;
        retrofit.converter.Converter converter74 = null;
        retrofit.Profiler profiler75 = null;
        retrofit.ErrorHandler errorHandler76 = null;
        retrofit.RestAdapter.Log log77 = retrofit.RestAdapter.Log.NONE;
        log77.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel80 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter81 = new retrofit.RestAdapter(server69, provider70, executor71, executor72, requestInterceptor73, converter74, profiler75, errorHandler76, log77, logLevel80);
        retrofit.RestAdapter.RestHandler restHandler82 = restAdapter81.new RestHandler();
        retrofit.RestAdapter.Log log83 = retrofit.RestAdapter.Log.NONE;
        restAdapter81.log = log83;
        retrofit.RestAdapter.Builder builder85 = builder57.setLog(log83);
        retrofit.Profiler profiler86 = null;
        builder85.profiler = profiler86;
        retrofit.RequestInterceptor requestInterceptor88 = builder85.requestInterceptor;
        retrofit.RestAdapter restAdapter89 = builder85.build();
        retrofit.RequestInterceptor requestInterceptor90 = builder85.requestInterceptor;
        restAdapter17.requestInterceptor = requestInterceptor90;
        builder14.requestInterceptor = requestInterceptor90;
        retrofit.RestAdapter.Builder builder93 = builder0.setRequestInterceptor(requestInterceptor90);
        retrofit.RestAdapter.Log log94 = builder93.log;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "default" + "'", str13, "default");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNull(profiler30);
        org.junit.Assert.assertNull(logLevel35);
        org.junit.Assert.assertNull(logLevel36);
        org.junit.Assert.assertNull(converter41);
        org.junit.Assert.assertNull(provider44);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(executor55);
        org.junit.Assert.assertNull(provider58);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hi!" + "'", str66, "hi!");
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(log77);
        org.junit.Assert.assertTrue("'" + logLevel80 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel80.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(requestInterceptor88);
        org.junit.Assert.assertNotNull(restAdapter89);
        org.junit.Assert.assertNotNull(requestInterceptor90);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNull(log94);
    }

    @Test
    public void test04731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04731");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.converter.Converter converter3 = null;
        builder0.converter = converter3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        builder0.requestInterceptor = requestInterceptor5;
        retrofit.client.Client.Provider provider7 = builder0.clientProvider;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.Server server11 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder12 = builder8.setServer(server11);
        retrofit.RestAdapter.LogLevel logLevel13 = builder12.logLevel;
        java.util.concurrent.Executor executor14 = builder12.httpExecutor;
        retrofit.RestAdapter restAdapter15 = builder12.build();
        retrofit.ErrorHandler errorHandler16 = builder12.errorHandler;
        retrofit.RestAdapter.Builder builder17 = builder0.setErrorHandler(errorHandler16);
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider19 = builder18.clientProvider;
        java.util.concurrent.Executor executor20 = null;
        builder18.callbackExecutor = executor20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.Server server25 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder26 = builder22.setServer(server25);
        java.lang.String str27 = server25.getUrl();
        retrofit.RestAdapter.Builder builder28 = builder18.setServer(server25);
        builder18.ensureSaneDefaults();
        retrofit.Server server30 = null;
        retrofit.client.Client.Provider provider31 = null;
        java.util.concurrent.Executor executor32 = null;
        java.util.concurrent.Executor executor33 = null;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        retrofit.converter.Converter converter35 = null;
        retrofit.Profiler profiler36 = null;
        retrofit.ErrorHandler errorHandler37 = null;
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        log38.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter(server30, provider31, executor32, executor33, requestInterceptor34, converter35, profiler36, errorHandler37, log38, logLevel41);
        retrofit.RestAdapter.RestHandler restHandler43 = restAdapter42.new RestHandler();
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        restAdapter42.log = log44;
        retrofit.RestAdapter.Builder builder46 = builder18.setLog(log44);
        retrofit.RestAdapter.Builder builder48 = builder18.setServer("hi!");
        retrofit.RestAdapter restAdapter49 = builder18.build();
        retrofit.RestAdapter.RestHandler restHandler50 = restAdapter49.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel51 = restAdapter49.logLevel;
        builder0.logLevel = logLevel51;
        java.util.concurrent.Executor executor53 = builder0.httpExecutor;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder55 = builder0.setServer("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be blank.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(provider7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNotNull(restAdapter15);
        org.junit.Assert.assertNotNull(errorHandler16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(provider19);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(restAdapter49);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor53);
    }

    @Test
    public void test04732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04732");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        restAdapter0.requestInterceptor = requestInterceptor18;
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.Server server24 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder25 = builder21.setServer(server24);
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor27 = restAdapter26.callbackExecutor;
        java.util.concurrent.Executor executor28 = restAdapter26.callbackExecutor;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.Server server33 = new retrofit.Server("", "");
        restAdapter29.server = server33;
        restAdapter26.server = server33;
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        restAdapter26.log = log36;
        retrofit.RestAdapter.Builder builder38 = builder25.setLog(log36);
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder40 = builder25.setLogLevel(logLevel39);
        retrofit.Profiler profiler41 = null;
        builder40.profiler = profiler41;
        retrofit.converter.Converter converter43 = null;
        builder40.converter = converter43;
        retrofit.ErrorHandler errorHandler45 = null;
        builder40.errorHandler = errorHandler45;
        retrofit.RestAdapter restAdapter47 = builder40.build();
        retrofit.ErrorHandler errorHandler48 = builder40.errorHandler;
        restAdapter0.errorHandler = errorHandler48;
        retrofit.RequestInterceptor requestInterceptor50 = restAdapter0.requestInterceptor;
        retrofit.Profiler profiler51 = null;
        restAdapter0.profiler = profiler51;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler54 = builder53.errorHandler;
        java.util.concurrent.Executor executor55 = builder53.callbackExecutor;
        retrofit.RestAdapter.Builder builder57 = builder53.setServer("hi!");
        retrofit.Server server60 = new retrofit.Server("default", "hi!");
        java.lang.String str61 = server60.getUrl();
        retrofit.RestAdapter.Builder builder62 = builder57.setServer(server60);
        retrofit.RestAdapter.LogLevel logLevel63 = builder62.logLevel;
        restAdapter0.logLevel = logLevel63;
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler66 = restAdapter65.new RestHandler();
        java.util.concurrent.Executor executor67 = null;
        restAdapter65.httpExecutor = executor67;
        retrofit.RequestInterceptor requestInterceptor69 = restAdapter65.requestInterceptor;
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler71 = builder70.errorHandler;
        retrofit.client.Client.Provider provider72 = null;
        builder70.clientProvider = provider72;
        retrofit.Server server76 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder77 = builder70.setServer(server76);
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler79 = builder78.errorHandler;
        retrofit.client.Client.Provider provider80 = null;
        builder78.clientProvider = provider80;
        retrofit.converter.Converter converter82 = builder78.converter;
        retrofit.RestAdapter.LogLevel logLevel83 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder84 = builder78.setLogLevel(logLevel83);
        builder70.logLevel = logLevel83;
        restAdapter65.logLevel = logLevel83;
        restAdapter0.setLogLevel(logLevel83);
        retrofit.RestAdapter.LogLevel logLevel88 = restAdapter0.logLevel;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNull(errorHandler30);
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(restAdapter47);
        org.junit.Assert.assertNotNull(errorHandler48);
        org.junit.Assert.assertNull(requestInterceptor50);
        org.junit.Assert.assertNull(errorHandler54);
        org.junit.Assert.assertNull(executor55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "default" + "'", str61, "default");
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor69);
        org.junit.Assert.assertNull(errorHandler71);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNull(errorHandler79);
        org.junit.Assert.assertNull(converter82);
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertTrue("'" + logLevel88 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel88.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test04733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04733");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter0.getLogLevel();
        retrofit.client.Client.Provider provider20 = null;
        restAdapter0.clientProvider = provider20;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean23 = logLevel22.log();
        restAdapter0.logLevel = logLevel22;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        restAdapter0.requestInterceptor = requestInterceptor25;
        retrofit.RestAdapter.Log log27 = restAdapter0.log;
        retrofit.converter.Converter converter28 = null;
        restAdapter0.converter = converter28;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter30.logLevel;
        retrofit.RestAdapter.RestHandler restHandler32 = restAdapter30.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler33 = restAdapter30.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler34 = restAdapter30.new RestHandler();
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler36 = restAdapter35.new RestHandler();
        retrofit.client.Client.Provider provider37 = restAdapter35.clientProvider;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler39 = builder38.errorHandler;
        retrofit.Server server42 = new retrofit.Server("", "");
        builder38.server = server42;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        builder38.log = log44;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler47 = builder46.errorHandler;
        retrofit.client.Client.Provider provider48 = null;
        builder46.clientProvider = provider48;
        retrofit.Server server52 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder53 = builder46.setServer(server52);
        retrofit.converter.Converter converter54 = null;
        builder53.converter = converter54;
        retrofit.RestAdapter restAdapter56 = builder53.build();
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler58 = builder57.errorHandler;
        java.util.concurrent.Executor executor59 = null;
        builder57.callbackExecutor = executor59;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider62 = builder61.clientProvider;
        java.util.concurrent.Executor executor63 = null;
        builder61.callbackExecutor = executor63;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.Server server68 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder69 = builder65.setServer(server68);
        java.lang.String str70 = server68.getUrl();
        retrofit.RestAdapter.Builder builder71 = builder61.setServer(server68);
        retrofit.RestAdapter.Builder builder72 = builder57.setServer(server68);
        restAdapter56.server = server68;
        java.util.concurrent.Executor executor74 = restAdapter56.httpExecutor;
        builder38.httpExecutor = executor74;
        restAdapter35.callbackExecutor = executor74;
        restAdapter30.callbackExecutor = executor74;
        restAdapter0.httpExecutor = executor74;
        retrofit.RequestInterceptor requestInterceptor79 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.Builder builder80 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler81 = builder80.errorHandler;
        retrofit.Server server84 = new retrofit.Server("", "");
        builder80.server = server84;
        retrofit.RestAdapter.LogLevel logLevel86 = builder80.logLevel;
        restAdapter0.setLogLevel(logLevel86);
        java.util.concurrent.Executor executor88 = restAdapter0.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor89 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.RestHandler restHandler90 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(log27);
        org.junit.Assert.assertNull(logLevel31);
        org.junit.Assert.assertNull(provider37);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNull(errorHandler47);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(restAdapter56);
        org.junit.Assert.assertNull(errorHandler58);
        org.junit.Assert.assertNull(provider62);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hi!" + "'", str70, "hi!");
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(executor74);
        org.junit.Assert.assertNull(requestInterceptor79);
        org.junit.Assert.assertNull(errorHandler81);
        org.junit.Assert.assertTrue("'" + logLevel86 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel86.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(executor88);
        org.junit.Assert.assertNull(requestInterceptor89);
    }

    @Test
    public void test04734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04734");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server4 = new retrofit.Server("", "");
        builder0.server = server4;
        java.util.concurrent.Executor executor6 = null;
        builder0.httpExecutor = executor6;
        retrofit.RestAdapter.Builder builder9 = builder0.setServer("default");
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler11 = builder10.errorHandler;
        retrofit.Server server14 = new retrofit.Server("", "");
        builder10.server = server14;
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        builder10.log = log16;
        retrofit.RequestInterceptor requestInterceptor18 = builder10.requestInterceptor;
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        log19.log("hi!");
        log19.log("hi!");
        builder10.log = log19;
        builder9.log = log19;
        retrofit.RestAdapter.Log log26 = builder9.log;
        log26.log("hi!");
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNotNull(log16);
        org.junit.Assert.assertNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertNotNull(log26);
    }

    @Test
    public void test04735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04735");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor2 = restAdapter0.httpExecutor;
        retrofit.client.Client.Provider provider3 = restAdapter0.clientProvider;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(provider3);
    }

    @Test
    public void test04736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04736");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.Profiler profiler14 = null;
        restAdapter12.profiler = profiler14;
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter12.new RestHandler();
        retrofit.Profiler profiler18 = null;
        restAdapter12.profiler = profiler18;
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test04737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04737");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        java.util.concurrent.Executor executor16 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.Server server20 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder21 = builder17.setServer(server20);
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor23 = restAdapter22.callbackExecutor;
        java.util.concurrent.Executor executor24 = restAdapter22.callbackExecutor;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler26 = restAdapter25.errorHandler;
        retrofit.Server server29 = new retrofit.Server("", "");
        restAdapter25.server = server29;
        restAdapter22.server = server29;
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        restAdapter22.log = log32;
        retrofit.RestAdapter.Builder builder34 = builder21.setLog(log32);
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder36 = builder21.setLogLevel(logLevel35);
        retrofit.RestAdapter.Log log37 = builder21.log;
        retrofit.RestAdapter restAdapter38 = builder21.build();
        retrofit.Server server39 = null;
        retrofit.client.Client.Provider provider40 = null;
        java.util.concurrent.Executor executor41 = null;
        java.util.concurrent.Executor executor42 = null;
        retrofit.RequestInterceptor requestInterceptor43 = null;
        retrofit.converter.Converter converter44 = null;
        retrofit.Profiler profiler45 = null;
        retrofit.ErrorHandler errorHandler46 = null;
        retrofit.RestAdapter.Log log47 = retrofit.RestAdapter.Log.NONE;
        log47.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel50 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter(server39, provider40, executor41, executor42, requestInterceptor43, converter44, profiler45, errorHandler46, log47, logLevel50);
        retrofit.RestAdapter.RestHandler restHandler52 = restAdapter51.new RestHandler();
        retrofit.client.Client.Provider provider53 = restAdapter51.clientProvider;
        retrofit.RestAdapter.Log log54 = restAdapter51.log;
        retrofit.RestAdapter.RestHandler restHandler55 = restAdapter51.new RestHandler();
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler57 = builder56.errorHandler;
        java.util.concurrent.Executor executor58 = builder56.callbackExecutor;
        retrofit.RestAdapter.Builder builder60 = builder56.setServer("hi!");
        builder60.ensureSaneDefaults();
        java.util.concurrent.Executor executor62 = builder60.callbackExecutor;
        restAdapter51.callbackExecutor = executor62;
        builder21.callbackExecutor = executor62;
        restAdapter0.callbackExecutor = executor62;
        retrofit.Profiler profiler66 = null;
        restAdapter0.profiler = profiler66;
        retrofit.RestAdapter.Log log68 = restAdapter0.log;
        retrofit.Profiler profiler69 = restAdapter0.profiler;
        retrofit.client.Client.Provider provider70 = restAdapter0.clientProvider;
        java.util.concurrent.Executor executor71 = restAdapter0.httpExecutor;
        retrofit.client.Header[] headerArray80 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList81 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList81, headerArray80);
        retrofit.mime.TypedOutput typedOutput83 = null;
        retrofit.client.Request request84 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList81, typedOutput83);
        retrofit.mime.TypedOutput typedOutput85 = null;
        retrofit.client.Request request86 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList81, typedOutput85);
        retrofit.mime.TypedOutput typedOutput87 = null;
        retrofit.client.Request request88 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList81, typedOutput87);
        retrofit.mime.TypedOutput typedOutput89 = null;
        retrofit.client.Request request90 = new retrofit.client.Request("default", "default", (java.util.List<retrofit.client.Header>) headerList81, typedOutput89);
        java.util.List<retrofit.client.Header> headerList91 = request90.getHeaders();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request92 = restAdapter0.logAndReplaceRequest(request90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(errorHandler26);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNotNull(restAdapter38);
        org.junit.Assert.assertNotNull(log47);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(provider53);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertNull(errorHandler57);
        org.junit.Assert.assertNull(executor58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(executor62);
        org.junit.Assert.assertNull(log68);
        org.junit.Assert.assertNull(profiler69);
        org.junit.Assert.assertNull(provider70);
        org.junit.Assert.assertNull(executor71);
        org.junit.Assert.assertNotNull(headerArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(headerList91);
    }

    @Test
    public void test04738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04738");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.client.Header[] headerArray22 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList23 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList23, headerArray22);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList23, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList23, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList23, typedOutput29);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList23, typedOutput31);
        retrofit.mime.TypedOutput typedOutput33 = request32.getBody();
        retrofit.client.Request request34 = restAdapter12.logAndReplaceRequest(request32);
        retrofit.RestAdapter.RestHandler restHandler35 = restAdapter12.new RestHandler();
        retrofit.client.Client.Provider provider36 = restAdapter12.clientProvider;
        retrofit.converter.Converter converter37 = null;
        restAdapter12.converter = converter37;
        retrofit.client.Header[] headerArray47 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList48 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList48, headerArray47);
        retrofit.mime.TypedOutput typedOutput50 = null;
        retrofit.client.Request request51 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList48, typedOutput50);
        retrofit.mime.TypedOutput typedOutput52 = null;
        retrofit.client.Request request53 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList48, typedOutput52);
        retrofit.mime.TypedOutput typedOutput54 = null;
        retrofit.client.Request request55 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList48, typedOutput54);
        retrofit.mime.TypedOutput typedOutput56 = request55.getBody();
        java.util.List<retrofit.client.Header> headerList57 = request55.getHeaders();
        retrofit.mime.TypedOutput typedOutput58 = null;
        retrofit.client.Request request59 = new retrofit.client.Request("default", "", headerList57, typedOutput58);
        retrofit.client.Request request60 = restAdapter12.logAndReplaceRequest(request59);
        retrofit.Server server65 = null;
        retrofit.client.Client.Provider provider66 = null;
        java.util.concurrent.Executor executor67 = null;
        java.util.concurrent.Executor executor68 = null;
        retrofit.RequestInterceptor requestInterceptor69 = null;
        retrofit.converter.Converter converter70 = null;
        retrofit.Profiler profiler71 = null;
        retrofit.ErrorHandler errorHandler72 = null;
        retrofit.RestAdapter.Log log73 = retrofit.RestAdapter.Log.NONE;
        log73.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel76 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter77 = new retrofit.RestAdapter(server65, provider66, executor67, executor68, requestInterceptor69, converter70, profiler71, errorHandler72, log73, logLevel76);
        retrofit.RestAdapter.RestHandler restHandler78 = restAdapter77.new RestHandler();
        java.util.concurrent.Executor executor79 = null;
        restAdapter77.callbackExecutor = executor79;
        retrofit.client.Header[] headerArray83 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList84 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList84, headerArray83);
        retrofit.mime.TypedOutput typedOutput86 = null;
        retrofit.client.Request request87 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList84, typedOutput86);
        retrofit.client.Request request88 = restAdapter77.logAndReplaceRequest(request87);
        java.util.List<retrofit.client.Header> headerList89 = request87.getHeaders();
        retrofit.mime.TypedOutput typedOutput90 = null;
        retrofit.client.Request request91 = new retrofit.client.Request("hi!", "default", headerList89, typedOutput90);
        retrofit.mime.TypedOutput typedOutput92 = null;
        retrofit.client.Request request93 = new retrofit.client.Request("", "", headerList89, typedOutput92);
        retrofit.client.Request request94 = restAdapter12.logAndReplaceRequest(request93);
        retrofit.RestAdapter.RestHandler restHandler95 = restAdapter12.new RestHandler();
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(typedOutput33);
        org.junit.Assert.assertNotNull(request34);
        org.junit.Assert.assertNull(provider36);
        org.junit.Assert.assertNotNull(headerArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(typedOutput56);
        org.junit.Assert.assertNotNull(headerList57);
        org.junit.Assert.assertNotNull(request60);
        org.junit.Assert.assertNotNull(log73);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(request88);
        org.junit.Assert.assertNotNull(headerList89);
        org.junit.Assert.assertNotNull(request94);
    }

    @Test
    public void test04739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04739");
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput13);
        java.lang.String str15 = request14.getMethod();
        java.util.List<retrofit.client.Header> headerList16 = request14.getHeaders();
        java.util.List<retrofit.client.Header> headerList17 = request14.getHeaders();
        java.util.List<retrofit.client.Header> headerList18 = request14.getHeaders();
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("default", "hi!", headerList18, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("default", "default", headerList18, typedOutput21);
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(headerList16);
        org.junit.Assert.assertNotNull(headerList17);
        org.junit.Assert.assertNotNull(headerList18);
    }

    @Test
    public void test04740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04740");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        java.util.concurrent.Executor executor18 = null;
        restAdapter0.httpExecutor = executor18;
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter0.logLevel;
        retrofit.converter.Converter converter21 = restAdapter0.converter;
        retrofit.ErrorHandler errorHandler22 = restAdapter0.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler23 = restAdapter0.new RestHandler();
        retrofit.converter.Converter converter24 = restAdapter0.converter;
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertNull(converter21);
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNull(converter24);
    }

    @Test
    public void test04741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04741");
        retrofit.client.Header[] headerArray14 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList15 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList15, headerArray14);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList15, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList15, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList15, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList15, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("", "default", (java.util.List<retrofit.client.Header>) headerList15, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList15, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("default", "", (java.util.List<retrofit.client.Header>) headerList15, typedOutput29);
        org.junit.Assert.assertNotNull(headerArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test04742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04742");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.Server server5 = new retrofit.Server("hi!", "hi!");
        restAdapter0.server = server5;
        retrofit.RequestInterceptor requestInterceptor7 = restAdapter0.requestInterceptor;
        retrofit.client.Client.Provider provider8 = restAdapter0.clientProvider;
        java.util.concurrent.Executor executor9 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler10 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNull(executor9);
    }

    @Test
    public void test04743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04743");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter3 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler4 = restAdapter3.errorHandler;
        retrofit.Server server7 = new retrofit.Server("", "");
        restAdapter3.server = server7;
        restAdapter0.server = server7;
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter0.logLevel;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        restAdapter0.requestInterceptor = requestInterceptor11;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter0.getLogLevel();
        java.util.concurrent.Executor executor14 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler16 = builder15.errorHandler;
        retrofit.Server server19 = new retrofit.Server("", "");
        builder15.server = server19;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        builder15.log = log21;
        retrofit.RestAdapter.LogLevel logLevel23 = builder15.logLevel;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler25 = builder24.errorHandler;
        retrofit.ErrorHandler errorHandler26 = builder24.errorHandler;
        retrofit.Profiler profiler27 = builder24.profiler;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.Server server31 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder32 = builder28.setServer(server31);
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor34 = restAdapter33.callbackExecutor;
        java.util.concurrent.Executor executor35 = restAdapter33.callbackExecutor;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler37 = restAdapter36.errorHandler;
        retrofit.Server server40 = new retrofit.Server("", "");
        restAdapter36.server = server40;
        restAdapter33.server = server40;
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        restAdapter33.log = log43;
        retrofit.RestAdapter.Builder builder45 = builder32.setLog(log43);
        retrofit.converter.Converter converter46 = null;
        builder45.converter = converter46;
        retrofit.RestAdapter.Builder builder49 = builder45.setServer("hi!");
        builder45.ensureSaneDefaults();
        retrofit.RestAdapter.Log log51 = builder45.log;
        retrofit.RequestInterceptor requestInterceptor52 = builder45.requestInterceptor;
        retrofit.RestAdapter.Builder builder53 = builder24.setRequestInterceptor(requestInterceptor52);
        builder15.requestInterceptor = requestInterceptor52;
        restAdapter0.requestInterceptor = requestInterceptor52;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(errorHandler4);
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler25);
        org.junit.Assert.assertNull(errorHandler26);
        org.junit.Assert.assertNull(profiler27);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(executor34);
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNotNull(requestInterceptor52);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test04744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04744");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.converter.Converter converter5 = builder0.converter;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler10 = builder9.errorHandler;
        retrofit.client.Client.Provider provider11 = null;
        builder9.clientProvider = provider11;
        retrofit.converter.Converter converter13 = builder9.converter;
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder15 = builder9.setLogLevel(logLevel14);
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor17 = restAdapter16.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        restAdapter16.logLevel = logLevel18;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler22 = builder21.errorHandler;
        retrofit.client.Client.Provider provider23 = null;
        builder21.clientProvider = provider23;
        retrofit.Server server27 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder28 = builder21.setServer(server27);
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler30 = builder29.errorHandler;
        retrofit.client.Client.Provider provider31 = null;
        builder29.clientProvider = provider31;
        retrofit.converter.Converter converter33 = builder29.converter;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder35 = builder29.setLogLevel(logLevel34);
        builder21.logLevel = logLevel34;
        boolean boolean37 = logLevel34.log();
        restAdapter16.logLevel = logLevel34;
        retrofit.RestAdapter.Builder builder39 = builder15.setLogLevel(logLevel34);
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider41 = builder40.clientProvider;
        java.util.concurrent.Executor executor42 = null;
        builder40.callbackExecutor = executor42;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.Server server47 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder48 = builder44.setServer(server47);
        java.lang.String str49 = server47.getUrl();
        retrofit.RestAdapter.Builder builder50 = builder40.setServer(server47);
        builder40.ensureSaneDefaults();
        retrofit.Server server52 = null;
        retrofit.client.Client.Provider provider53 = null;
        java.util.concurrent.Executor executor54 = null;
        java.util.concurrent.Executor executor55 = null;
        retrofit.RequestInterceptor requestInterceptor56 = null;
        retrofit.converter.Converter converter57 = null;
        retrofit.Profiler profiler58 = null;
        retrofit.ErrorHandler errorHandler59 = null;
        retrofit.RestAdapter.Log log60 = retrofit.RestAdapter.Log.NONE;
        log60.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter(server52, provider53, executor54, executor55, requestInterceptor56, converter57, profiler58, errorHandler59, log60, logLevel63);
        retrofit.RestAdapter.RestHandler restHandler65 = restAdapter64.new RestHandler();
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        restAdapter64.log = log66;
        retrofit.RestAdapter.Builder builder68 = builder40.setLog(log66);
        retrofit.RestAdapter.Builder builder70 = builder40.setServer("hi!");
        retrofit.Profiler profiler71 = null;
        builder40.profiler = profiler71;
        builder40.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor74 = builder40.requestInterceptor;
        retrofit.RestAdapter.Builder builder75 = builder39.setRequestInterceptor(requestInterceptor74);
        retrofit.RestAdapter.Builder builder76 = builder8.setRequestInterceptor(requestInterceptor74);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(converter5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(errorHandler30);
        org.junit.Assert.assertNull(converter33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(provider41);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(log60);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(requestInterceptor74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
    }

    @Test
    public void test04745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04745");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.client.Client.Provider provider14 = restAdapter12.clientProvider;
        retrofit.RestAdapter.Log log15 = restAdapter12.log;
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter12.getLogLevel();
        java.util.concurrent.Executor executor17 = restAdapter12.httpExecutor;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider19 = builder18.clientProvider;
        retrofit.RestAdapter.Builder builder21 = builder18.setServer("default");
        retrofit.client.Client.Provider provider22 = builder21.clientProvider;
        retrofit.RestAdapter.Builder builder24 = builder21.setServer("default");
        retrofit.RestAdapter.LogLevel logLevel25 = builder21.logLevel;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler27 = builder26.errorHandler;
        retrofit.ErrorHandler errorHandler28 = builder26.errorHandler;
        retrofit.RestAdapter.Log log29 = null;
        builder26.log = log29;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        builder26.requestInterceptor = requestInterceptor31;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor34 = restAdapter33.callbackExecutor;
        java.util.concurrent.Executor executor35 = restAdapter33.callbackExecutor;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler37 = restAdapter36.errorHandler;
        retrofit.Server server40 = new retrofit.Server("", "");
        restAdapter36.server = server40;
        restAdapter33.server = server40;
        retrofit.RestAdapter.Builder builder43 = builder26.setServer(server40);
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler45 = builder44.errorHandler;
        retrofit.client.Client.Provider provider46 = null;
        builder44.clientProvider = provider46;
        retrofit.Server server50 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder51 = builder44.setServer(server50);
        retrofit.client.Client.Provider provider52 = null;
        java.util.concurrent.Executor executor53 = null;
        java.util.concurrent.Executor executor54 = null;
        retrofit.RequestInterceptor requestInterceptor55 = null;
        retrofit.converter.Converter converter56 = null;
        retrofit.Profiler profiler57 = null;
        retrofit.ErrorHandler errorHandler58 = null;
        retrofit.Server server59 = null;
        retrofit.client.Client.Provider provider60 = null;
        java.util.concurrent.Executor executor61 = null;
        java.util.concurrent.Executor executor62 = null;
        retrofit.RequestInterceptor requestInterceptor63 = null;
        retrofit.converter.Converter converter64 = null;
        retrofit.Profiler profiler65 = null;
        retrofit.ErrorHandler errorHandler66 = null;
        retrofit.RestAdapter.Log log67 = retrofit.RestAdapter.Log.NONE;
        log67.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter(server59, provider60, executor61, executor62, requestInterceptor63, converter64, profiler65, errorHandler66, log67, logLevel70);
        retrofit.RestAdapter.LogLevel logLevel72 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter73 = new retrofit.RestAdapter(server50, provider52, executor53, executor54, requestInterceptor55, converter56, profiler57, errorHandler58, log67, logLevel72);
        retrofit.RestAdapter.Builder builder74 = builder26.setLogLevel(logLevel72);
        java.util.concurrent.Executor executor75 = builder74.httpExecutor;
        retrofit.RestAdapter.Log log76 = retrofit.RestAdapter.Log.NONE;
        log76.log("hi!");
        log76.log("hi!");
        log76.log("");
        builder74.log = log76;
        retrofit.RestAdapter.Builder builder84 = builder21.setLog(log76);
        retrofit.RestAdapter.Builder builder85 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler86 = builder85.errorHandler;
        java.util.concurrent.Executor executor87 = null;
        builder85.callbackExecutor = executor87;
        java.util.concurrent.Executor executor89 = null;
        builder85.httpExecutor = executor89;
        retrofit.Profiler profiler91 = null;
        builder85.profiler = profiler91;
        retrofit.RestAdapter.Builder builder94 = builder85.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel95 = builder85.logLevel;
        boolean boolean96 = logLevel95.log();
        boolean boolean97 = logLevel95.log();
        builder21.logLevel = logLevel95;
        restAdapter12.setLogLevel(logLevel95);
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(provider19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(provider22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertNull(executor34);
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(errorHandler45);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(log67);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNull(executor75);
        org.junit.Assert.assertNotNull(log76);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNull(errorHandler86);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertTrue("'" + logLevel95 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel95.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test04746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04746");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        restAdapter12.log = log14;
        retrofit.converter.Converter converter16 = null;
        restAdapter12.converter = converter16;
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter12.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor19 = restAdapter12.requestInterceptor;
        retrofit.Server server20 = restAdapter12.server;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.Server server22 = builder21.server;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler24 = builder23.errorHandler;
        retrofit.ErrorHandler errorHandler25 = builder23.errorHandler;
        retrofit.RestAdapter.Log log26 = null;
        builder23.log = log26;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        builder23.requestInterceptor = requestInterceptor28;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor31 = restAdapter30.callbackExecutor;
        java.util.concurrent.Executor executor32 = restAdapter30.callbackExecutor;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler34 = restAdapter33.errorHandler;
        retrofit.Server server37 = new retrofit.Server("", "");
        restAdapter33.server = server37;
        restAdapter30.server = server37;
        retrofit.RestAdapter.Builder builder40 = builder23.setServer(server37);
        retrofit.RequestInterceptor requestInterceptor41 = null;
        builder23.requestInterceptor = requestInterceptor41;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler44 = builder43.errorHandler;
        retrofit.ErrorHandler errorHandler45 = builder43.errorHandler;
        retrofit.RestAdapter.Log log46 = null;
        builder43.log = log46;
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean49 = logLevel48.log();
        builder43.logLevel = logLevel48;
        retrofit.RestAdapter.Builder builder51 = builder23.setLogLevel(logLevel48);
        builder21.logLevel = logLevel48;
        restAdapter12.logLevel = logLevel48;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler55 = builder54.errorHandler;
        retrofit.ErrorHandler errorHandler56 = builder54.errorHandler;
        retrofit.Profiler profiler57 = builder54.profiler;
        retrofit.RestAdapter.Log log58 = builder54.log;
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.FULL;
        builder54.logLevel = logLevel59;
        retrofit.Profiler profiler61 = builder54.profiler;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.Server server65 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder66 = builder62.setServer(server65);
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor68 = restAdapter67.callbackExecutor;
        java.util.concurrent.Executor executor69 = restAdapter67.callbackExecutor;
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler71 = restAdapter70.errorHandler;
        retrofit.Server server74 = new retrofit.Server("", "");
        restAdapter70.server = server74;
        restAdapter67.server = server74;
        retrofit.RestAdapter.Log log77 = retrofit.RestAdapter.Log.NONE;
        restAdapter67.log = log77;
        retrofit.RestAdapter.Builder builder79 = builder66.setLog(log77);
        retrofit.RestAdapter.Builder builder81 = builder66.setServer("hi!");
        retrofit.RestAdapter.Log log82 = builder81.log;
        builder54.log = log82;
        restAdapter12.log = log82;
        retrofit.RestAdapter.RestHandler restHandler85 = restAdapter12.new RestHandler();
        retrofit.Server server86 = restAdapter12.server;
        retrofit.RestAdapter.Log log87 = restAdapter12.log;
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNull(requestInterceptor19);
        org.junit.Assert.assertNull(server20);
        org.junit.Assert.assertNull(server22);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNull(errorHandler25);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(errorHandler34);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(errorHandler44);
        org.junit.Assert.assertNull(errorHandler45);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(errorHandler55);
        org.junit.Assert.assertNull(errorHandler56);
        org.junit.Assert.assertNull(profiler57);
        org.junit.Assert.assertNull(log58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler61);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(executor68);
        org.junit.Assert.assertNull(executor69);
        org.junit.Assert.assertNull(errorHandler71);
        org.junit.Assert.assertNotNull(log77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(log82);
        org.junit.Assert.assertNull(server86);
        org.junit.Assert.assertNotNull(log87);
    }

    @Test
    public void test04747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04747");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        restAdapter12.log = log14;
        retrofit.converter.Converter converter16 = restAdapter12.converter;
        retrofit.Profiler profiler17 = restAdapter12.profiler;
        retrofit.Server server18 = restAdapter12.server;
        java.lang.Throwable throwable19 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter12.logException(throwable19, "default");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(profiler17);
        org.junit.Assert.assertNull(server18);
    }

    @Test
    public void test04748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04748");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        retrofit.Profiler profiler3 = builder0.profiler;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler5 = builder4.errorHandler;
        retrofit.ErrorHandler errorHandler6 = builder4.errorHandler;
        retrofit.Profiler profiler7 = builder4.profiler;
        retrofit.RestAdapter.Log log8 = builder4.log;
        retrofit.RequestInterceptor requestInterceptor9 = builder4.requestInterceptor;
        builder4.ensureSaneDefaults();
        builder4.ensureSaneDefaults();
        retrofit.client.Client.Provider provider12 = null;
        builder4.clientProvider = provider12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler15 = builder14.errorHandler;
        retrofit.client.Client.Provider provider16 = null;
        builder14.clientProvider = provider16;
        retrofit.Server server20 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder21 = builder14.setServer(server20);
        retrofit.converter.Converter converter22 = null;
        builder21.converter = converter22;
        retrofit.RestAdapter restAdapter24 = builder21.build();
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler26 = builder25.errorHandler;
        java.util.concurrent.Executor executor27 = null;
        builder25.callbackExecutor = executor27;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider30 = builder29.clientProvider;
        java.util.concurrent.Executor executor31 = null;
        builder29.callbackExecutor = executor31;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.Server server36 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder37 = builder33.setServer(server36);
        java.lang.String str38 = server36.getUrl();
        retrofit.RestAdapter.Builder builder39 = builder29.setServer(server36);
        retrofit.RestAdapter.Builder builder40 = builder25.setServer(server36);
        restAdapter24.server = server36;
        retrofit.Server server42 = restAdapter24.server;
        retrofit.RestAdapter.RestHandler restHandler43 = restAdapter24.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter24.getLogLevel();
        retrofit.Server server45 = restAdapter24.server;
        builder4.server = server45;
        java.lang.String str47 = server45.getUrl();
        builder0.server = server45;
        java.lang.String str49 = server45.getUrl();
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(errorHandler5);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNull(log8);
        org.junit.Assert.assertNull(requestInterceptor9);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(restAdapter24);
        org.junit.Assert.assertNull(errorHandler26);
        org.junit.Assert.assertNull(provider30);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(server42);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(server45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
    }

    @Test
    public void test04749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04749");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        restAdapter12.log = log14;
        retrofit.converter.Converter converter16 = null;
        restAdapter12.converter = converter16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter12.getLogLevel();
        retrofit.ErrorHandler errorHandler19 = restAdapter12.errorHandler;
        retrofit.Profiler profiler20 = restAdapter12.profiler;
        retrofit.RequestInterceptor requestInterceptor21 = restAdapter12.requestInterceptor;
        java.util.concurrent.Executor executor22 = restAdapter12.callbackExecutor;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler24 = builder23.errorHandler;
        retrofit.Server server27 = new retrofit.Server("", "");
        builder23.server = server27;
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        builder23.log = log29;
        retrofit.RestAdapter.LogLevel logLevel31 = builder23.logLevel;
        java.util.concurrent.Executor executor32 = builder23.callbackExecutor;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler34 = null;
        builder33.errorHandler = errorHandler34;
        retrofit.ErrorHandler errorHandler36 = builder33.errorHandler;
        retrofit.RestAdapter.Builder builder38 = builder33.setServer("hi!");
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler40 = builder39.errorHandler;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.Server server44 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder45 = builder41.setServer(server44);
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor47 = restAdapter46.callbackExecutor;
        java.util.concurrent.Executor executor48 = restAdapter46.callbackExecutor;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler50 = restAdapter49.errorHandler;
        retrofit.Server server53 = new retrofit.Server("", "");
        restAdapter49.server = server53;
        restAdapter46.server = server53;
        retrofit.RestAdapter.Log log56 = retrofit.RestAdapter.Log.NONE;
        restAdapter46.log = log56;
        retrofit.RestAdapter.Builder builder58 = builder45.setLog(log56);
        retrofit.RestAdapter.Builder builder59 = builder39.setLog(log56);
        builder33.log = log56;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler62 = builder61.errorHandler;
        retrofit.client.Client.Provider provider63 = null;
        builder61.clientProvider = provider63;
        retrofit.Server server67 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder68 = builder61.setServer(server67);
        retrofit.converter.Converter converter69 = null;
        builder68.converter = converter69;
        retrofit.RestAdapter restAdapter71 = builder68.build();
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler73 = builder72.errorHandler;
        java.util.concurrent.Executor executor74 = null;
        builder72.callbackExecutor = executor74;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider77 = builder76.clientProvider;
        java.util.concurrent.Executor executor78 = null;
        builder76.callbackExecutor = executor78;
        retrofit.RestAdapter.Builder builder80 = new retrofit.RestAdapter.Builder();
        retrofit.Server server83 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder84 = builder80.setServer(server83);
        java.lang.String str85 = server83.getUrl();
        retrofit.RestAdapter.Builder builder86 = builder76.setServer(server83);
        retrofit.RestAdapter.Builder builder87 = builder72.setServer(server83);
        restAdapter71.server = server83;
        retrofit.client.Client.Provider provider89 = restAdapter71.clientProvider;
        retrofit.RestAdapter.Builder builder90 = builder33.setClient(provider89);
        retrofit.RestAdapter.Builder builder91 = builder23.setClient(provider89);
        retrofit.RestAdapter.LogLevel logLevel92 = builder23.logLevel;
        boolean boolean93 = logLevel92.log();
        restAdapter12.setLogLevel(logLevel92);
        java.util.concurrent.Executor executor95 = restAdapter12.callbackExecutor;
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(profiler20);
        org.junit.Assert.assertNull(requestInterceptor21);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(errorHandler36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(executor47);
        org.junit.Assert.assertNull(executor48);
        org.junit.Assert.assertNull(errorHandler50);
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(errorHandler62);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(restAdapter71);
        org.junit.Assert.assertNull(errorHandler73);
        org.junit.Assert.assertNull(provider77);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "hi!" + "'", str85, "hi!");
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(provider89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertTrue("'" + logLevel92 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel92.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(executor95);
    }

    @Test
    public void test04750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04750");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server4 = new retrofit.Server("", "");
        builder0.server = server4;
        retrofit.client.Client.Provider provider6 = null;
        java.util.concurrent.Executor executor7 = null;
        java.util.concurrent.Executor executor8 = null;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        retrofit.converter.Converter converter10 = null;
        retrofit.Profiler profiler11 = null;
        retrofit.ErrorHandler errorHandler12 = null;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler14 = builder13.errorHandler;
        retrofit.Server server17 = new retrofit.Server("", "");
        builder13.server = server17;
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        builder13.log = log19;
        retrofit.Server server21 = null;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        log29.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel32);
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server4, provider6, executor7, executor8, requestInterceptor9, converter10, profiler11, errorHandler12, log19, logLevel32);
        retrofit.ErrorHandler errorHandler35 = null;
        restAdapter34.errorHandler = errorHandler35;
        retrofit.RestAdapter.RestHandler restHandler37 = restAdapter34.new RestHandler();
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler39 = builder38.errorHandler;
        retrofit.Server server42 = new retrofit.Server("", "");
        builder38.server = server42;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        builder38.log = log44;
        restAdapter34.log = log44;
        java.util.concurrent.Executor executor47 = restAdapter34.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel48 = null;
        restAdapter34.setLogLevel(logLevel48);
        retrofit.RestAdapter.RestHandler restHandler50 = restAdapter34.new RestHandler();
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler52 = builder51.errorHandler;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.Server server56 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder57 = builder53.setServer(server56);
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor59 = restAdapter58.callbackExecutor;
        java.util.concurrent.Executor executor60 = restAdapter58.callbackExecutor;
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler62 = restAdapter61.errorHandler;
        retrofit.Server server65 = new retrofit.Server("", "");
        restAdapter61.server = server65;
        restAdapter58.server = server65;
        retrofit.RestAdapter.Log log68 = retrofit.RestAdapter.Log.NONE;
        restAdapter58.log = log68;
        retrofit.RestAdapter.Builder builder70 = builder57.setLog(log68);
        retrofit.RestAdapter.Builder builder71 = builder51.setLog(log68);
        retrofit.RestAdapter.Log log72 = builder71.log;
        retrofit.RestAdapter restAdapter73 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor74 = restAdapter73.callbackExecutor;
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor76 = restAdapter75.callbackExecutor;
        java.util.concurrent.Executor executor77 = restAdapter75.callbackExecutor;
        retrofit.RestAdapter restAdapter78 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler79 = restAdapter78.errorHandler;
        retrofit.Server server82 = new retrofit.Server("", "");
        restAdapter78.server = server82;
        restAdapter75.server = server82;
        restAdapter73.server = server82;
        retrofit.Profiler profiler86 = restAdapter73.profiler;
        retrofit.ErrorHandler errorHandler87 = null;
        restAdapter73.errorHandler = errorHandler87;
        retrofit.Profiler profiler89 = null;
        restAdapter73.profiler = profiler89;
        retrofit.RestAdapter.LogLevel logLevel91 = restAdapter73.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel92 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter73.logLevel = logLevel92;
        retrofit.RestAdapter.RestHandler restHandler94 = restAdapter73.new RestHandler();
        java.util.concurrent.Executor executor95 = restAdapter73.httpExecutor;
        retrofit.Server server96 = restAdapter73.server;
        builder71.server = server96;
        restAdapter34.server = server96;
        retrofit.RestAdapter.Log log99 = restAdapter34.log;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNull(executor47);
        org.junit.Assert.assertNull(errorHandler52);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(executor59);
        org.junit.Assert.assertNull(executor60);
        org.junit.Assert.assertNull(errorHandler62);
        org.junit.Assert.assertNotNull(log68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(log72);
        org.junit.Assert.assertNull(executor74);
        org.junit.Assert.assertNull(executor76);
        org.junit.Assert.assertNull(executor77);
        org.junit.Assert.assertNull(errorHandler79);
        org.junit.Assert.assertNull(profiler86);
        org.junit.Assert.assertNull(logLevel91);
        org.junit.Assert.assertTrue("'" + logLevel92 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel92.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(executor95);
        org.junit.Assert.assertNotNull(server96);
        org.junit.Assert.assertNotNull(log99);
    }

    @Test
    public void test04751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04751");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel1 = builder0.logLevel;
        retrofit.Server server4 = new retrofit.Server("hi!", "default");
        java.lang.String str5 = server4.getUrl();
        retrofit.RestAdapter.Builder builder6 = builder0.setServer(server4);
        java.util.concurrent.Executor executor7 = null;
        builder0.callbackExecutor = executor7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler10 = builder9.errorHandler;
        java.util.concurrent.Executor executor11 = null;
        builder9.callbackExecutor = executor11;
        retrofit.converter.Converter converter13 = builder9.converter;
        retrofit.RestAdapter.Builder builder15 = builder9.setServer("hi!");
        builder9.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor18 = restAdapter17.callbackExecutor;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor20 = restAdapter19.callbackExecutor;
        java.util.concurrent.Executor executor21 = restAdapter19.callbackExecutor;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler23 = restAdapter22.errorHandler;
        retrofit.Server server26 = new retrofit.Server("", "");
        restAdapter22.server = server26;
        restAdapter19.server = server26;
        restAdapter17.server = server26;
        java.lang.String str30 = server26.getName();
        builder9.server = server26;
        builder0.server = server26;
        java.lang.String str33 = server26.getName();
        java.lang.String str34 = server26.getName();
        org.junit.Assert.assertTrue("'" + logLevel1 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel1.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
    }

    @Test
    public void test04752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04752");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        builder4.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter6 = builder4.build();
        retrofit.client.Client.Provider provider7 = builder4.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel8 = builder4.logLevel;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor10 = restAdapter9.callbackExecutor;
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor12 = restAdapter11.callbackExecutor;
        java.util.concurrent.Executor executor13 = restAdapter11.callbackExecutor;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler15 = restAdapter14.errorHandler;
        retrofit.Server server18 = new retrofit.Server("", "");
        restAdapter14.server = server18;
        restAdapter11.server = server18;
        restAdapter9.server = server18;
        retrofit.Profiler profiler22 = restAdapter9.profiler;
        retrofit.ErrorHandler errorHandler23 = null;
        restAdapter9.errorHandler = errorHandler23;
        retrofit.Profiler profiler25 = null;
        restAdapter9.profiler = profiler25;
        retrofit.Profiler profiler27 = null;
        restAdapter9.profiler = profiler27;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler30 = builder29.errorHandler;
        java.util.concurrent.Executor executor31 = builder29.callbackExecutor;
        retrofit.RestAdapter.Builder builder33 = builder29.setServer("hi!");
        retrofit.Server server36 = new retrofit.Server("default", "hi!");
        java.lang.String str37 = server36.getUrl();
        retrofit.RestAdapter.Builder builder38 = builder33.setServer(server36);
        retrofit.RestAdapter.LogLevel logLevel39 = builder38.logLevel;
        retrofit.ErrorHandler errorHandler40 = builder38.errorHandler;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler42 = builder41.errorHandler;
        java.util.concurrent.Executor executor43 = builder41.callbackExecutor;
        retrofit.RestAdapter.Builder builder45 = builder41.setServer("hi!");
        retrofit.Server server48 = new retrofit.Server("default", "hi!");
        java.lang.String str49 = server48.getUrl();
        retrofit.RestAdapter.Builder builder50 = builder45.setServer(server48);
        builder38.server = server48;
        restAdapter9.server = server48;
        retrofit.Server server53 = restAdapter9.server;
        retrofit.RestAdapter.Builder builder54 = builder4.setServer(server53);
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(restAdapter6);
        org.junit.Assert.assertNotNull(provider7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(errorHandler30);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "default" + "'", str37, "default");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNull(errorHandler42);
        org.junit.Assert.assertNull(executor43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "default" + "'", str49, "default");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(server53);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test04753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04753");
        retrofit.client.Header[] headerArray14 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList15 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList15, headerArray14);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList15, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList15, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("default", "", (java.util.List<retrofit.client.Header>) headerList15, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("default", "", (java.util.List<retrofit.client.Header>) headerList15, typedOutput23);
        java.util.List<retrofit.client.Header> headerList25 = request24.getHeaders();
        retrofit.mime.TypedOutput typedOutput26 = null;
        retrofit.client.Request request27 = new retrofit.client.Request("", "hi!", headerList25, typedOutput26);
        retrofit.mime.TypedOutput typedOutput28 = null;
        retrofit.client.Request request29 = new retrofit.client.Request("hi!", "default", headerList25, typedOutput28);
        retrofit.mime.TypedOutput typedOutput30 = null;
        retrofit.client.Request request31 = new retrofit.client.Request("default", "hi!", headerList25, typedOutput30);
        java.util.List<retrofit.client.Header> headerList32 = request31.getHeaders();
        retrofit.mime.TypedOutput typedOutput33 = request31.getBody();
        java.util.List<retrofit.client.Header> headerList34 = request31.getHeaders();
        java.lang.Class<?> wildcardClass35 = request31.getClass();
        org.junit.Assert.assertNotNull(headerArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(headerList25);
        org.junit.Assert.assertNotNull(headerList32);
        org.junit.Assert.assertNull(typedOutput33);
        org.junit.Assert.assertNotNull(headerList34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test04754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04754");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.Profiler profiler13 = restAdapter12.profiler;
        java.util.concurrent.Executor executor14 = null;
        restAdapter12.callbackExecutor = executor14;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor17 = restAdapter16.callbackExecutor;
        java.util.concurrent.Executor executor18 = restAdapter16.callbackExecutor;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler20 = restAdapter19.errorHandler;
        retrofit.Server server23 = new retrofit.Server("", "");
        restAdapter19.server = server23;
        restAdapter16.server = server23;
        restAdapter12.server = server23;
        retrofit.Profiler profiler27 = restAdapter12.profiler;
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNull(profiler27);
    }

    @Test
    public void test04755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04755");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.converter.Converter converter2 = null;
        restAdapter0.converter = converter2;
        retrofit.ErrorHandler errorHandler4 = null;
        restAdapter0.errorHandler = errorHandler4;
        retrofit.RestAdapter restAdapter6 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor7 = restAdapter6.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler8 = restAdapter6.new RestHandler();
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor10 = restAdapter9.callbackExecutor;
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor12 = restAdapter11.callbackExecutor;
        java.util.concurrent.Executor executor13 = restAdapter11.callbackExecutor;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler15 = restAdapter14.errorHandler;
        retrofit.Server server18 = new retrofit.Server("", "");
        restAdapter14.server = server18;
        restAdapter11.server = server18;
        restAdapter9.server = server18;
        retrofit.Profiler profiler22 = restAdapter9.profiler;
        retrofit.ErrorHandler errorHandler23 = null;
        restAdapter9.errorHandler = errorHandler23;
        retrofit.Profiler profiler25 = null;
        restAdapter9.profiler = profiler25;
        retrofit.RestAdapter.LogLevel logLevel27 = restAdapter9.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter9.logLevel = logLevel28;
        restAdapter6.logLevel = logLevel28;
        restAdapter0.logLevel = logLevel28;
        retrofit.ErrorHandler errorHandler32 = restAdapter0.errorHandler;
        retrofit.ErrorHandler errorHandler33 = restAdapter0.errorHandler;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler35 = builder34.errorHandler;
        retrofit.ErrorHandler errorHandler36 = builder34.errorHandler;
        retrofit.Profiler profiler37 = builder34.profiler;
        retrofit.RestAdapter.Log log38 = builder34.log;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.FULL;
        builder34.logLevel = logLevel39;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.Server server44 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder45 = builder41.setServer(server44);
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor47 = restAdapter46.callbackExecutor;
        java.util.concurrent.Executor executor48 = restAdapter46.callbackExecutor;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler50 = restAdapter49.errorHandler;
        retrofit.Server server53 = new retrofit.Server("", "");
        restAdapter49.server = server53;
        restAdapter46.server = server53;
        retrofit.RestAdapter.Log log56 = retrofit.RestAdapter.Log.NONE;
        restAdapter46.log = log56;
        retrofit.RestAdapter.Builder builder58 = builder45.setLog(log56);
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder60 = builder45.setLogLevel(logLevel59);
        retrofit.Profiler profiler61 = null;
        builder60.profiler = profiler61;
        retrofit.converter.Converter converter63 = null;
        builder60.converter = converter63;
        retrofit.ErrorHandler errorHandler65 = null;
        builder60.errorHandler = errorHandler65;
        retrofit.RestAdapter restAdapter67 = builder60.build();
        retrofit.ErrorHandler errorHandler68 = builder60.errorHandler;
        retrofit.RestAdapter.Builder builder69 = builder34.setErrorHandler(errorHandler68);
        restAdapter0.errorHandler = errorHandler68;
        java.util.concurrent.Executor executor71 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel72 = restAdapter0.getLogLevel();
        retrofit.client.Header[] headerArray79 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList80 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList80, headerArray79);
        retrofit.mime.TypedOutput typedOutput82 = null;
        retrofit.client.Request request83 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList80, typedOutput82);
        java.util.List<retrofit.client.Header> headerList84 = request83.getHeaders();
        retrofit.mime.TypedOutput typedOutput85 = null;
        retrofit.client.Request request86 = new retrofit.client.Request("default", "default", headerList84, typedOutput85);
        retrofit.mime.TypedOutput typedOutput87 = null;
        retrofit.client.Request request88 = new retrofit.client.Request("hi!", "default", headerList84, typedOutput87);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request89 = restAdapter0.logAndReplaceRequest(request88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(logLevel27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler32);
        org.junit.Assert.assertNull(errorHandler33);
        org.junit.Assert.assertNull(errorHandler35);
        org.junit.Assert.assertNull(errorHandler36);
        org.junit.Assert.assertNull(profiler37);
        org.junit.Assert.assertNull(log38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(executor47);
        org.junit.Assert.assertNull(executor48);
        org.junit.Assert.assertNull(errorHandler50);
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(restAdapter67);
        org.junit.Assert.assertNotNull(errorHandler68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNull(executor71);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(headerArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(headerList84);
    }

    @Test
    public void test04756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04756");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        restAdapter5.log = log15;
        retrofit.RestAdapter.Builder builder17 = builder4.setLog(log15);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder19 = builder4.setLogLevel(logLevel18);
        retrofit.RestAdapter.Log log20 = builder4.log;
        retrofit.RestAdapter restAdapter21 = builder4.build();
        java.util.concurrent.Executor executor22 = restAdapter21.callbackExecutor;
        retrofit.RestAdapter.Log log23 = restAdapter21.log;
        java.util.List<retrofit.client.Header> headerList26 = null;
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("", "hi!", headerList26, typedOutput27);
        java.lang.String str29 = request28.getUrl();
        retrofit.client.Request request30 = restAdapter21.logAndReplaceRequest(request28);
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter21.logLevel;
        boolean boolean32 = logLevel31.log();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(restAdapter21);
        org.junit.Assert.assertNotNull(executor22);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNotNull(request30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test04757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04757");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        java.util.concurrent.Executor executor16 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.Server server20 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder21 = builder17.setServer(server20);
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor23 = restAdapter22.callbackExecutor;
        java.util.concurrent.Executor executor24 = restAdapter22.callbackExecutor;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler26 = restAdapter25.errorHandler;
        retrofit.Server server29 = new retrofit.Server("", "");
        restAdapter25.server = server29;
        restAdapter22.server = server29;
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        restAdapter22.log = log32;
        retrofit.RestAdapter.Builder builder34 = builder21.setLog(log32);
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder36 = builder21.setLogLevel(logLevel35);
        retrofit.RestAdapter.Log log37 = builder21.log;
        retrofit.RestAdapter restAdapter38 = builder21.build();
        retrofit.Server server39 = null;
        retrofit.client.Client.Provider provider40 = null;
        java.util.concurrent.Executor executor41 = null;
        java.util.concurrent.Executor executor42 = null;
        retrofit.RequestInterceptor requestInterceptor43 = null;
        retrofit.converter.Converter converter44 = null;
        retrofit.Profiler profiler45 = null;
        retrofit.ErrorHandler errorHandler46 = null;
        retrofit.RestAdapter.Log log47 = retrofit.RestAdapter.Log.NONE;
        log47.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel50 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter(server39, provider40, executor41, executor42, requestInterceptor43, converter44, profiler45, errorHandler46, log47, logLevel50);
        retrofit.RestAdapter.RestHandler restHandler52 = restAdapter51.new RestHandler();
        retrofit.client.Client.Provider provider53 = restAdapter51.clientProvider;
        retrofit.RestAdapter.Log log54 = restAdapter51.log;
        retrofit.RestAdapter.RestHandler restHandler55 = restAdapter51.new RestHandler();
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler57 = builder56.errorHandler;
        java.util.concurrent.Executor executor58 = builder56.callbackExecutor;
        retrofit.RestAdapter.Builder builder60 = builder56.setServer("hi!");
        builder60.ensureSaneDefaults();
        java.util.concurrent.Executor executor62 = builder60.callbackExecutor;
        restAdapter51.callbackExecutor = executor62;
        builder21.callbackExecutor = executor62;
        restAdapter0.callbackExecutor = executor62;
        retrofit.Profiler profiler66 = null;
        restAdapter0.profiler = profiler66;
        retrofit.RestAdapter.Log log68 = restAdapter0.log;
        retrofit.Server server69 = restAdapter0.server;
        java.util.concurrent.Executor executor70 = restAdapter0.httpExecutor;
        java.util.concurrent.Executor executor71 = restAdapter0.httpExecutor;
        retrofit.client.Client.Provider provider72 = restAdapter0.clientProvider;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(errorHandler26);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNotNull(restAdapter38);
        org.junit.Assert.assertNotNull(log47);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(provider53);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertNull(errorHandler57);
        org.junit.Assert.assertNull(executor58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(executor62);
        org.junit.Assert.assertNull(log68);
        org.junit.Assert.assertNotNull(server69);
        org.junit.Assert.assertNull(executor70);
        org.junit.Assert.assertNull(executor71);
        org.junit.Assert.assertNull(provider72);
    }

    @Test
    public void test04758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04758");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.converter.Converter converter5 = builder0.converter;
        retrofit.RequestInterceptor requestInterceptor6 = builder0.requestInterceptor;
        java.util.concurrent.Executor executor7 = builder0.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = builder0.build();
        retrofit.client.Header[] headerArray19 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList20 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList20, headerArray19);
        retrofit.mime.TypedOutput typedOutput22 = null;
        retrofit.client.Request request23 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList20, typedOutput22);
        retrofit.mime.TypedOutput typedOutput24 = null;
        retrofit.client.Request request25 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList20, typedOutput24);
        retrofit.mime.TypedOutput typedOutput26 = null;
        retrofit.client.Request request27 = new retrofit.client.Request("", "default", (java.util.List<retrofit.client.Header>) headerList20, typedOutput26);
        retrofit.mime.TypedOutput typedOutput28 = null;
        retrofit.client.Request request29 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList20, typedOutput28);
        retrofit.mime.TypedOutput typedOutput30 = null;
        retrofit.client.Request request31 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList20, typedOutput30);
        retrofit.client.Request request32 = restAdapter8.logAndReplaceRequest(request31);
        retrofit.converter.Converter converter33 = restAdapter8.converter;
        retrofit.RestAdapter.RestHandler restHandler34 = restAdapter8.new RestHandler();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(converter5);
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNotNull(restAdapter8);
        org.junit.Assert.assertNotNull(headerArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(request32);
        org.junit.Assert.assertNotNull(converter33);
    }

    @Test
    public void test04759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04759");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter3 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler4 = restAdapter3.errorHandler;
        retrofit.Server server7 = new retrofit.Server("", "");
        restAdapter3.server = server7;
        restAdapter0.server = server7;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.Server server14 = new retrofit.Server("", "");
        restAdapter10.server = server14;
        restAdapter0.server = server14;
        retrofit.client.Client.Provider provider17 = null;
        java.util.concurrent.Executor executor18 = null;
        java.util.concurrent.Executor executor19 = null;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        retrofit.converter.Converter converter21 = null;
        retrofit.Profiler profiler22 = null;
        retrofit.ErrorHandler errorHandler23 = null;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider25 = builder24.clientProvider;
        java.util.concurrent.Executor executor26 = null;
        builder24.callbackExecutor = executor26;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.Server server31 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder32 = builder28.setServer(server31);
        java.lang.String str33 = server31.getUrl();
        retrofit.RestAdapter.Builder builder34 = builder24.setServer(server31);
        builder24.ensureSaneDefaults();
        retrofit.Server server36 = null;
        retrofit.client.Client.Provider provider37 = null;
        java.util.concurrent.Executor executor38 = null;
        java.util.concurrent.Executor executor39 = null;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        retrofit.converter.Converter converter41 = null;
        retrofit.Profiler profiler42 = null;
        retrofit.ErrorHandler errorHandler43 = null;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        log44.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter(server36, provider37, executor38, executor39, requestInterceptor40, converter41, profiler42, errorHandler43, log44, logLevel47);
        retrofit.RestAdapter.RestHandler restHandler49 = restAdapter48.new RestHandler();
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        restAdapter48.log = log50;
        retrofit.RestAdapter.Builder builder52 = builder24.setLog(log50);
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler54 = builder53.errorHandler;
        retrofit.ErrorHandler errorHandler55 = builder53.errorHandler;
        retrofit.RestAdapter.Log log56 = null;
        builder53.log = log56;
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean59 = logLevel58.log();
        builder53.logLevel = logLevel58;
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter(server14, provider17, executor18, executor19, requestInterceptor20, converter21, profiler22, errorHandler23, log50, logLevel58);
        retrofit.RestAdapter.LogLevel logLevel62 = restAdapter61.logLevel;
        retrofit.RestAdapter.LogLevel logLevel63 = restAdapter61.logLevel;
        retrofit.Profiler profiler64 = restAdapter61.profiler;
        retrofit.converter.Converter converter65 = restAdapter61.converter;
        java.util.concurrent.Executor executor66 = restAdapter61.httpExecutor;
        retrofit.RestAdapter.Log log67 = restAdapter61.log;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(errorHandler4);
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(provider25);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(errorHandler54);
        org.junit.Assert.assertNull(errorHandler55);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler64);
        org.junit.Assert.assertNull(converter65);
        org.junit.Assert.assertNull(executor66);
        org.junit.Assert.assertNotNull(log67);
    }

    @Test
    public void test04760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04760");
        retrofit.client.Header[] headerArray12 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList13 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList13, headerArray12);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList13, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList13, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList13, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("hi!", "default", (java.util.List<retrofit.client.Header>) headerList13, typedOutput21);
        java.util.List<retrofit.client.Header> headerList23 = request22.getHeaders();
        retrofit.mime.TypedOutput typedOutput24 = null;
        retrofit.client.Request request25 = new retrofit.client.Request("", "hi!", headerList23, typedOutput24);
        retrofit.mime.TypedOutput typedOutput26 = null;
        retrofit.client.Request request27 = new retrofit.client.Request("default", "default", headerList23, typedOutput26);
        java.lang.String str28 = request27.getUrl();
        org.junit.Assert.assertNotNull(headerArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(headerList23);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "default" + "'", str28, "default");
    }

    @Test
    public void test04761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04761");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.client.Client.Provider provider14 = restAdapter12.clientProvider;
        retrofit.RestAdapter.Log log15 = restAdapter12.log;
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler18 = builder17.errorHandler;
        java.util.concurrent.Executor executor19 = builder17.callbackExecutor;
        retrofit.RestAdapter.Builder builder21 = builder17.setServer("hi!");
        builder21.ensureSaneDefaults();
        java.util.concurrent.Executor executor23 = builder21.callbackExecutor;
        restAdapter12.callbackExecutor = executor23;
        retrofit.RestAdapter.LogLevel logLevel25 = restAdapter12.logLevel;
        boolean boolean26 = logLevel25.log();
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNull(errorHandler18);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(executor23);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test04762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04762");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server4 = new retrofit.Server("", "");
        builder0.server = server4;
        retrofit.client.Client.Provider provider6 = builder0.clientProvider;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler9 = builder8.errorHandler;
        retrofit.client.Client.Provider provider10 = null;
        builder8.clientProvider = provider10;
        retrofit.Server server14 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder15 = builder8.setServer(server14);
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler17 = builder16.errorHandler;
        retrofit.client.Client.Provider provider18 = null;
        builder16.clientProvider = provider18;
        retrofit.converter.Converter converter20 = builder16.converter;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder22 = builder16.setLogLevel(logLevel21);
        builder8.logLevel = logLevel21;
        builder7.logLevel = logLevel21;
        retrofit.RestAdapter.Builder builder25 = builder0.setLogLevel(logLevel21);
        retrofit.RestAdapter.Log log26 = builder0.log;
        retrofit.RestAdapter.Builder builder28 = builder0.setServer("default");
        retrofit.Profiler profiler29 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder30 = builder0.setProfiler(profiler29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(provider6);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(converter20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(log26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test04763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04763");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean6 = logLevel5.log();
        builder0.logLevel = logLevel5;
        retrofit.ErrorHandler errorHandler8 = builder0.errorHandler;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor10 = restAdapter9.callbackExecutor;
        java.util.concurrent.Executor executor11 = restAdapter9.callbackExecutor;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler13 = restAdapter12.errorHandler;
        retrofit.Server server16 = new retrofit.Server("", "");
        restAdapter12.server = server16;
        restAdapter9.server = server16;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler20 = restAdapter19.errorHandler;
        retrofit.Server server23 = new retrofit.Server("", "");
        restAdapter19.server = server23;
        restAdapter9.server = server23;
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider34 = builder33.clientProvider;
        java.util.concurrent.Executor executor35 = null;
        builder33.callbackExecutor = executor35;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.Server server40 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder41 = builder37.setServer(server40);
        java.lang.String str42 = server40.getUrl();
        retrofit.RestAdapter.Builder builder43 = builder33.setServer(server40);
        builder33.ensureSaneDefaults();
        retrofit.Server server45 = null;
        retrofit.client.Client.Provider provider46 = null;
        java.util.concurrent.Executor executor47 = null;
        java.util.concurrent.Executor executor48 = null;
        retrofit.RequestInterceptor requestInterceptor49 = null;
        retrofit.converter.Converter converter50 = null;
        retrofit.Profiler profiler51 = null;
        retrofit.ErrorHandler errorHandler52 = null;
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        log53.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter(server45, provider46, executor47, executor48, requestInterceptor49, converter50, profiler51, errorHandler52, log53, logLevel56);
        retrofit.RestAdapter.RestHandler restHandler58 = restAdapter57.new RestHandler();
        retrofit.RestAdapter.Log log59 = retrofit.RestAdapter.Log.NONE;
        restAdapter57.log = log59;
        retrofit.RestAdapter.Builder builder61 = builder33.setLog(log59);
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler63 = builder62.errorHandler;
        retrofit.ErrorHandler errorHandler64 = builder62.errorHandler;
        retrofit.RestAdapter.Log log65 = null;
        builder62.log = log65;
        retrofit.RestAdapter.LogLevel logLevel67 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean68 = logLevel67.log();
        builder62.logLevel = logLevel67;
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter(server23, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log59, logLevel67);
        retrofit.RequestInterceptor requestInterceptor71 = null;
        restAdapter70.requestInterceptor = requestInterceptor71;
        retrofit.Server server73 = restAdapter70.server;
        retrofit.RestAdapter.Builder builder74 = builder0.setServer(server73);
        retrofit.Profiler profiler75 = builder74.profiler;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNull(provider34);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(errorHandler63);
        org.junit.Assert.assertNull(errorHandler64);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(server73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNull(profiler75);
    }

    @Test
    public void test04764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04764");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.Server server5 = new retrofit.Server("hi!", "hi!");
        restAdapter0.server = server5;
        retrofit.Server server7 = restAdapter0.server;
        retrofit.converter.Converter converter8 = restAdapter0.converter;
        retrofit.Server server11 = new retrofit.Server("", "hi!");
        restAdapter0.server = server11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.Server server16 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder17 = builder13.setServer(server16);
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor19 = restAdapter18.callbackExecutor;
        java.util.concurrent.Executor executor20 = restAdapter18.callbackExecutor;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler22 = restAdapter21.errorHandler;
        retrofit.Server server25 = new retrofit.Server("", "");
        restAdapter21.server = server25;
        restAdapter18.server = server25;
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        restAdapter18.log = log28;
        retrofit.RestAdapter.Builder builder30 = builder17.setLog(log28);
        retrofit.converter.Converter converter31 = null;
        builder30.converter = converter31;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler34 = builder33.errorHandler;
        retrofit.ErrorHandler errorHandler35 = builder33.errorHandler;
        retrofit.Profiler profiler36 = builder33.profiler;
        retrofit.RestAdapter.Log log37 = builder33.log;
        retrofit.Server server38 = null;
        retrofit.client.Client.Provider provider39 = null;
        java.util.concurrent.Executor executor40 = null;
        java.util.concurrent.Executor executor41 = null;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        retrofit.converter.Converter converter43 = null;
        retrofit.Profiler profiler44 = null;
        retrofit.ErrorHandler errorHandler45 = null;
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        log46.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter(server38, provider39, executor40, executor41, requestInterceptor42, converter43, profiler44, errorHandler45, log46, logLevel49);
        builder33.log = log46;
        retrofit.RestAdapter.Builder builder52 = builder30.setLog(log46);
        retrofit.RestAdapter.LogLevel logLevel53 = builder30.logLevel;
        restAdapter0.logLevel = logLevel53;
        boolean boolean55 = logLevel53.log();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNotNull(server7);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(errorHandler34);
        org.junit.Assert.assertNull(errorHandler35);
        org.junit.Assert.assertNull(profiler36);
        org.junit.Assert.assertNull(log37);
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test04765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04765");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.Profiler profiler3 = builder0.profiler;
        retrofit.RestAdapter.Log log4 = builder0.log;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.FULL;
        builder0.logLevel = logLevel5;
        retrofit.Profiler profiler7 = builder0.profiler;
        retrofit.RestAdapter.LogLevel logLevel8 = builder0.logLevel;
        retrofit.Profiler profiler9 = null;
        builder0.profiler = profiler9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler12 = builder11.errorHandler;
        retrofit.ErrorHandler errorHandler13 = builder11.errorHandler;
        retrofit.RestAdapter.Log log14 = null;
        builder11.log = log14;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        builder11.requestInterceptor = requestInterceptor16;
        retrofit.RestAdapter.LogLevel logLevel18 = builder11.logLevel;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler20 = builder19.errorHandler;
        retrofit.ErrorHandler errorHandler21 = builder19.errorHandler;
        retrofit.Profiler profiler22 = builder19.profiler;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor24 = restAdapter23.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter23.new RestHandler();
        retrofit.Server server28 = new retrofit.Server("hi!", "hi!");
        restAdapter23.server = server28;
        retrofit.RestAdapter.Builder builder30 = builder19.setServer(server28);
        retrofit.converter.Converter converter31 = null;
        builder30.converter = converter31;
        retrofit.Server server35 = new retrofit.Server("hi!", "");
        builder30.server = server35;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor38 = restAdapter37.callbackExecutor;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor40 = restAdapter39.callbackExecutor;
        java.util.concurrent.Executor executor41 = restAdapter39.callbackExecutor;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler43 = restAdapter42.errorHandler;
        retrofit.Server server46 = new retrofit.Server("", "");
        restAdapter42.server = server46;
        restAdapter39.server = server46;
        restAdapter37.server = server46;
        retrofit.Profiler profiler50 = restAdapter37.profiler;
        retrofit.ErrorHandler errorHandler51 = null;
        restAdapter37.errorHandler = errorHandler51;
        retrofit.Profiler profiler53 = null;
        restAdapter37.profiler = profiler53;
        retrofit.RestAdapter.LogLevel logLevel55 = restAdapter37.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel56 = restAdapter37.getLogLevel();
        retrofit.ErrorHandler errorHandler57 = null;
        restAdapter37.errorHandler = errorHandler57;
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler60 = builder59.errorHandler;
        retrofit.client.Client.Provider provider61 = null;
        builder59.clientProvider = provider61;
        retrofit.Server server65 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder66 = builder59.setServer(server65);
        retrofit.converter.Converter converter67 = null;
        builder66.converter = converter67;
        retrofit.RestAdapter restAdapter69 = builder66.build();
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler71 = builder70.errorHandler;
        java.util.concurrent.Executor executor72 = null;
        builder70.callbackExecutor = executor72;
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider75 = builder74.clientProvider;
        java.util.concurrent.Executor executor76 = null;
        builder74.callbackExecutor = executor76;
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        retrofit.Server server81 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder82 = builder78.setServer(server81);
        java.lang.String str83 = server81.getUrl();
        retrofit.RestAdapter.Builder builder84 = builder74.setServer(server81);
        retrofit.RestAdapter.Builder builder85 = builder70.setServer(server81);
        restAdapter69.server = server81;
        retrofit.client.Client.Provider provider87 = restAdapter69.clientProvider;
        restAdapter37.clientProvider = provider87;
        retrofit.RestAdapter.Builder builder89 = builder30.setClient(provider87);
        builder11.clientProvider = provider87;
        builder0.clientProvider = provider87;
        retrofit.client.Client.Provider provider92 = builder0.clientProvider;
        retrofit.client.Client.Provider provider93 = builder0.clientProvider;
        retrofit.Profiler profiler94 = null;
        builder0.profiler = profiler94;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNull(executor40);
        org.junit.Assert.assertNull(executor41);
        org.junit.Assert.assertNull(errorHandler43);
        org.junit.Assert.assertNull(profiler50);
        org.junit.Assert.assertNull(logLevel55);
        org.junit.Assert.assertNull(logLevel56);
        org.junit.Assert.assertNull(errorHandler60);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(restAdapter69);
        org.junit.Assert.assertNull(errorHandler71);
        org.junit.Assert.assertNull(provider75);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "hi!" + "'", str83, "hi!");
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(provider87);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(provider92);
        org.junit.Assert.assertNotNull(provider93);
    }

    @Test
    public void test04766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04766");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.Server server3 = restAdapter0.server;
        retrofit.client.Client.Provider provider4 = null;
        restAdapter0.clientProvider = provider4;
        retrofit.client.Client.Provider provider6 = restAdapter0.clientProvider;
        java.util.concurrent.Executor executor7 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler8 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler10 = builder9.errorHandler;
        retrofit.Server server13 = new retrofit.Server("", "");
        builder9.server = server13;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler23 = builder22.errorHandler;
        retrofit.Server server26 = new retrofit.Server("", "");
        builder22.server = server26;
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        builder22.log = log28;
        retrofit.Server server30 = null;
        retrofit.client.Client.Provider provider31 = null;
        java.util.concurrent.Executor executor32 = null;
        java.util.concurrent.Executor executor33 = null;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        retrofit.converter.Converter converter35 = null;
        retrofit.Profiler profiler36 = null;
        retrofit.ErrorHandler errorHandler37 = null;
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        log38.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter(server30, provider31, executor32, executor33, requestInterceptor34, converter35, profiler36, errorHandler37, log38, logLevel41);
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter(server13, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log28, logLevel41);
        retrofit.RequestInterceptor requestInterceptor44 = null;
        restAdapter43.requestInterceptor = requestInterceptor44;
        retrofit.RestAdapter.RestHandler restHandler46 = restAdapter43.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler47 = restAdapter43.new RestHandler();
        retrofit.Server server48 = null;
        retrofit.client.Client.Provider provider49 = null;
        java.util.concurrent.Executor executor50 = null;
        java.util.concurrent.Executor executor51 = null;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        retrofit.converter.Converter converter53 = null;
        retrofit.Profiler profiler54 = null;
        retrofit.ErrorHandler errorHandler55 = null;
        retrofit.RestAdapter.Log log56 = retrofit.RestAdapter.Log.NONE;
        log56.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter(server48, provider49, executor50, executor51, requestInterceptor52, converter53, profiler54, errorHandler55, log56, logLevel59);
        retrofit.RestAdapter.RestHandler restHandler61 = restAdapter60.new RestHandler();
        retrofit.client.Header[] headerArray70 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList71 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList71, headerArray70);
        retrofit.mime.TypedOutput typedOutput73 = null;
        retrofit.client.Request request74 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList71, typedOutput73);
        retrofit.mime.TypedOutput typedOutput75 = null;
        retrofit.client.Request request76 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList71, typedOutput75);
        retrofit.mime.TypedOutput typedOutput77 = null;
        retrofit.client.Request request78 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList71, typedOutput77);
        retrofit.mime.TypedOutput typedOutput79 = null;
        retrofit.client.Request request80 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList71, typedOutput79);
        retrofit.mime.TypedOutput typedOutput81 = request80.getBody();
        retrofit.client.Request request82 = restAdapter60.logAndReplaceRequest(request80);
        java.lang.String str83 = request82.getUrl();
        retrofit.client.Request request84 = restAdapter43.logAndReplaceRequest(request82);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request85 = restAdapter0.logAndReplaceRequest(request82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(server3);
        org.junit.Assert.assertNull(provider6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(typedOutput81);
        org.junit.Assert.assertNotNull(request82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(request84);
    }

    @Test
    public void test04767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04767");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        restAdapter12.log = log14;
        retrofit.converter.Converter converter16 = null;
        restAdapter12.converter = converter16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter12.getLogLevel();
        retrofit.ErrorHandler errorHandler19 = restAdapter12.errorHandler;
        retrofit.Profiler profiler20 = restAdapter12.profiler;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler22 = null;
        builder21.errorHandler = errorHandler22;
        retrofit.ErrorHandler errorHandler24 = builder21.errorHandler;
        retrofit.RestAdapter.Builder builder26 = builder21.setServer("hi!");
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler28 = builder27.errorHandler;
        retrofit.ErrorHandler errorHandler29 = builder27.errorHandler;
        retrofit.Profiler profiler30 = builder27.profiler;
        retrofit.RestAdapter.Log log31 = builder27.log;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.FULL;
        builder27.logLevel = logLevel32;
        retrofit.RestAdapter.Builder builder34 = builder26.setLogLevel(logLevel32);
        retrofit.Server server35 = null;
        retrofit.client.Client.Provider provider36 = null;
        java.util.concurrent.Executor executor37 = null;
        java.util.concurrent.Executor executor38 = null;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        retrofit.converter.Converter converter40 = null;
        retrofit.Profiler profiler41 = null;
        retrofit.ErrorHandler errorHandler42 = null;
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        log43.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter(server35, provider36, executor37, executor38, requestInterceptor39, converter40, profiler41, errorHandler42, log43, logLevel46);
        log43.log("");
        retrofit.RestAdapter.Builder builder50 = builder34.setLog(log43);
        restAdapter12.log = log43;
        retrofit.RestAdapter.RestHandler restHandler52 = restAdapter12.new RestHandler();
        java.util.concurrent.Executor executor53 = restAdapter12.httpExecutor;
        retrofit.Server server54 = restAdapter12.server;
        retrofit.RestAdapter.LogLevel logLevel55 = restAdapter12.logLevel;
        java.util.concurrent.Executor executor56 = restAdapter12.callbackExecutor;
        retrofit.Profiler profiler57 = restAdapter12.profiler;
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(profiler20);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNull(profiler30);
        org.junit.Assert.assertNull(log31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(executor53);
        org.junit.Assert.assertNull(server54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor56);
        org.junit.Assert.assertNull(profiler57);
    }

    @Test
    public void test04768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04768");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server6 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder7 = builder0.setServer(server6);
        retrofit.converter.Converter converter8 = null;
        builder7.converter = converter8;
        retrofit.RestAdapter restAdapter10 = builder7.build();
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler12 = builder11.errorHandler;
        java.util.concurrent.Executor executor13 = null;
        builder11.callbackExecutor = executor13;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider16 = builder15.clientProvider;
        java.util.concurrent.Executor executor17 = null;
        builder15.callbackExecutor = executor17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.Server server22 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder23 = builder19.setServer(server22);
        java.lang.String str24 = server22.getUrl();
        retrofit.RestAdapter.Builder builder25 = builder15.setServer(server22);
        retrofit.RestAdapter.Builder builder26 = builder11.setServer(server22);
        restAdapter10.server = server22;
        retrofit.Server server28 = restAdapter10.server;
        retrofit.RestAdapter.RestHandler restHandler29 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter10.getLogLevel();
        retrofit.client.Header[] headerArray33 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList34 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList34, headerArray33);
        retrofit.mime.TypedOutput typedOutput36 = null;
        retrofit.client.Request request37 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList34, typedOutput36);
        java.util.List<retrofit.client.Header> headerList38 = request37.getHeaders();
        java.util.List<retrofit.client.Header> headerList39 = request37.getHeaders();
        retrofit.mime.TypedOutput typedOutput40 = request37.getBody();
        retrofit.client.Request request41 = restAdapter10.logAndReplaceRequest(request37);
        retrofit.client.Client.Provider provider42 = restAdapter10.clientProvider;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(restAdapter10);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(provider16);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(server28);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(headerArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(headerList38);
        org.junit.Assert.assertNotNull(headerList39);
        org.junit.Assert.assertNull(typedOutput40);
        org.junit.Assert.assertNotNull(request41);
        org.junit.Assert.assertNotNull(provider42);
    }

    @Test
    public void test04769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04769");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        restAdapter0.requestInterceptor = requestInterceptor18;
        java.util.concurrent.Executor executor20 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler21 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RequestInterceptor requestInterceptor23 = null;
        builder22.requestInterceptor = requestInterceptor23;
        retrofit.Server server25 = null;
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        log33.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter(server25, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log33, logLevel36);
        retrofit.RestAdapter.RestHandler restHandler38 = restAdapter37.new RestHandler();
        retrofit.RestAdapter.Log log39 = retrofit.RestAdapter.Log.NONE;
        restAdapter37.log = log39;
        retrofit.converter.Converter converter41 = null;
        restAdapter37.converter = converter41;
        retrofit.RestAdapter.LogLevel logLevel43 = restAdapter37.getLogLevel();
        builder22.logLevel = logLevel43;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler46 = builder45.errorHandler;
        retrofit.client.Client.Provider provider47 = null;
        builder45.clientProvider = provider47;
        retrofit.Server server51 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder52 = builder45.setServer(server51);
        retrofit.converter.Converter converter53 = null;
        builder52.converter = converter53;
        retrofit.RestAdapter restAdapter55 = builder52.build();
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler57 = builder56.errorHandler;
        java.util.concurrent.Executor executor58 = null;
        builder56.callbackExecutor = executor58;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider61 = builder60.clientProvider;
        java.util.concurrent.Executor executor62 = null;
        builder60.callbackExecutor = executor62;
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.Server server67 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder68 = builder64.setServer(server67);
        java.lang.String str69 = server67.getUrl();
        retrofit.RestAdapter.Builder builder70 = builder60.setServer(server67);
        retrofit.RestAdapter.Builder builder71 = builder56.setServer(server67);
        restAdapter55.server = server67;
        retrofit.Server server73 = restAdapter55.server;
        retrofit.RestAdapter.RestHandler restHandler74 = restAdapter55.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel75 = restAdapter55.getLogLevel();
        retrofit.client.Header[] headerArray78 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList79 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList79, headerArray78);
        retrofit.mime.TypedOutput typedOutput81 = null;
        retrofit.client.Request request82 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList79, typedOutput81);
        java.util.List<retrofit.client.Header> headerList83 = request82.getHeaders();
        java.util.List<retrofit.client.Header> headerList84 = request82.getHeaders();
        retrofit.mime.TypedOutput typedOutput85 = request82.getBody();
        retrofit.client.Request request86 = restAdapter55.logAndReplaceRequest(request82);
        java.util.concurrent.Executor executor87 = restAdapter55.httpExecutor;
        builder22.callbackExecutor = executor87;
        java.util.concurrent.Executor executor89 = builder22.callbackExecutor;
        restAdapter0.callbackExecutor = executor89;
        retrofit.RestAdapter.RestHandler restHandler91 = restAdapter0.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor92 = restAdapter0.requestInterceptor;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler46);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(restAdapter55);
        org.junit.Assert.assertNull(errorHandler57);
        org.junit.Assert.assertNull(provider61);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(server73);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(headerArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(headerList83);
        org.junit.Assert.assertNotNull(headerList84);
        org.junit.Assert.assertNull(typedOutput85);
        org.junit.Assert.assertNotNull(request86);
        org.junit.Assert.assertNotNull(executor87);
        org.junit.Assert.assertNotNull(executor89);
        org.junit.Assert.assertNull(requestInterceptor92);
    }

    @Test
    public void test04770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04770");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter0.requestInterceptor;
        retrofit.ErrorHandler errorHandler17 = restAdapter0.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter0.new RestHandler();
        retrofit.ErrorHandler errorHandler20 = restAdapter0.errorHandler;
        retrofit.client.Client.Provider provider21 = restAdapter0.clientProvider;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.Server server25 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder26 = builder22.setServer(server25);
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor28 = restAdapter27.callbackExecutor;
        java.util.concurrent.Executor executor29 = restAdapter27.callbackExecutor;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler31 = restAdapter30.errorHandler;
        retrofit.Server server34 = new retrofit.Server("", "");
        restAdapter30.server = server34;
        restAdapter27.server = server34;
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        restAdapter27.log = log37;
        retrofit.RestAdapter.Builder builder39 = builder26.setLog(log37);
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder41 = builder26.setLogLevel(logLevel40);
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler43 = builder42.errorHandler;
        retrofit.client.Client.Provider provider44 = null;
        builder42.clientProvider = provider44;
        retrofit.Server server48 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder49 = builder42.setServer(server48);
        retrofit.converter.Converter converter50 = null;
        builder49.converter = converter50;
        retrofit.RestAdapter restAdapter52 = builder49.build();
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler54 = builder53.errorHandler;
        java.util.concurrent.Executor executor55 = null;
        builder53.callbackExecutor = executor55;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider58 = builder57.clientProvider;
        java.util.concurrent.Executor executor59 = null;
        builder57.callbackExecutor = executor59;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.Server server64 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder65 = builder61.setServer(server64);
        java.lang.String str66 = server64.getUrl();
        retrofit.RestAdapter.Builder builder67 = builder57.setServer(server64);
        retrofit.RestAdapter.Builder builder68 = builder53.setServer(server64);
        restAdapter52.server = server64;
        java.util.concurrent.Executor executor70 = restAdapter52.httpExecutor;
        builder26.callbackExecutor = executor70;
        restAdapter0.callbackExecutor = executor70;
        retrofit.converter.Converter converter73 = restAdapter0.converter;
        retrofit.Server server76 = new retrofit.Server("", "default");
        restAdapter0.server = server76;
        retrofit.RestAdapter.LogLevel logLevel78 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler80 = builder79.errorHandler;
        retrofit.Server server83 = new retrofit.Server("", "");
        builder79.server = server83;
        retrofit.RestAdapter.Log log85 = retrofit.RestAdapter.Log.NONE;
        builder79.log = log85;
        retrofit.RequestInterceptor requestInterceptor87 = builder79.requestInterceptor;
        retrofit.RestAdapter.Log log88 = retrofit.RestAdapter.Log.NONE;
        log88.log("hi!");
        log88.log("hi!");
        builder79.log = log88;
        log88.log("hi!");
        restAdapter0.log = log88;
        java.util.concurrent.Executor executor97 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler98 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNull(provider21);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(errorHandler31);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(errorHandler43);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(restAdapter52);
        org.junit.Assert.assertNull(errorHandler54);
        org.junit.Assert.assertNull(provider58);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hi!" + "'", str66, "hi!");
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(executor70);
        org.junit.Assert.assertNull(converter73);
        org.junit.Assert.assertNull(logLevel78);
        org.junit.Assert.assertNull(errorHandler80);
        org.junit.Assert.assertNotNull(log85);
        org.junit.Assert.assertNull(requestInterceptor87);
        org.junit.Assert.assertNotNull(log88);
        org.junit.Assert.assertNull(executor97);
    }

    @Test
    public void test04771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04771");
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList9, typedOutput13);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList9, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("hi!", "default", (java.util.List<retrofit.client.Header>) headerList9, typedOutput17);
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test04772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04772");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = builder0.clientProvider;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server7 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder8 = builder4.setServer(server7);
        java.lang.String str9 = server7.getUrl();
        retrofit.RestAdapter.Builder builder10 = builder0.setServer(server7);
        builder0.ensureSaneDefaults();
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        log20.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel23);
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter24.new RestHandler();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        restAdapter24.log = log26;
        retrofit.RestAdapter.Builder builder28 = builder0.setLog(log26);
        retrofit.RestAdapter.Builder builder30 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter31 = builder0.build();
        retrofit.RestAdapter.RestHandler restHandler32 = restAdapter31.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter31.logLevel;
        java.util.concurrent.Executor executor34 = restAdapter31.callbackExecutor;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider36 = builder35.clientProvider;
        retrofit.RestAdapter.Builder builder38 = builder35.setServer("default");
        retrofit.RestAdapter restAdapter39 = builder35.build();
        retrofit.client.Client.Provider provider40 = builder35.clientProvider;
        restAdapter31.clientProvider = provider40;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler43 = builder42.errorHandler;
        retrofit.client.Client.Provider provider44 = null;
        builder42.clientProvider = provider44;
        retrofit.Server server48 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder49 = builder42.setServer(server48);
        retrofit.Server server52 = new retrofit.Server("", "");
        builder49.server = server52;
        retrofit.converter.Converter converter54 = null;
        builder49.converter = converter54;
        retrofit.Server server57 = new retrofit.Server("default");
        retrofit.RestAdapter.Builder builder58 = builder49.setServer(server57);
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.Server server62 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder63 = builder59.setServer(server62);
        retrofit.Server server64 = builder59.server;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.Server server68 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder69 = builder65.setServer(server68);
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor71 = restAdapter70.callbackExecutor;
        java.util.concurrent.Executor executor72 = restAdapter70.callbackExecutor;
        retrofit.RestAdapter restAdapter73 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler74 = restAdapter73.errorHandler;
        retrofit.Server server77 = new retrofit.Server("", "");
        restAdapter73.server = server77;
        restAdapter70.server = server77;
        retrofit.RestAdapter.Log log80 = retrofit.RestAdapter.Log.NONE;
        restAdapter70.log = log80;
        retrofit.RestAdapter.Builder builder82 = builder69.setLog(log80);
        retrofit.RestAdapter.LogLevel logLevel83 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder84 = builder69.setLogLevel(logLevel83);
        builder59.logLevel = logLevel83;
        retrofit.RestAdapter.Builder builder86 = builder49.setLogLevel(logLevel83);
        retrofit.RestAdapter.Builder builder87 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider88 = builder87.clientProvider;
        retrofit.RestAdapter.Builder builder90 = builder87.setServer("default");
        retrofit.RestAdapter restAdapter91 = builder87.build();
        retrofit.client.Client.Provider provider92 = restAdapter91.clientProvider;
        retrofit.RestAdapter.Builder builder93 = builder86.setClient(provider92);
        retrofit.RestAdapter restAdapter94 = builder86.build();
        java.util.concurrent.Executor executor95 = restAdapter94.httpExecutor;
        restAdapter31.httpExecutor = executor95;
        org.junit.Assert.assertNull(provider1);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(restAdapter31);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(executor34);
        org.junit.Assert.assertNull(provider36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(restAdapter39);
        org.junit.Assert.assertNotNull(provider40);
        org.junit.Assert.assertNull(errorHandler43);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(server64);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNull(executor71);
        org.junit.Assert.assertNull(executor72);
        org.junit.Assert.assertNull(errorHandler74);
        org.junit.Assert.assertNotNull(log80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNull(provider88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(restAdapter91);
        org.junit.Assert.assertNotNull(provider92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(restAdapter94);
        org.junit.Assert.assertNotNull(executor95);
    }

    @Test
    public void test04773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04773");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "default", (java.util.List<retrofit.client.Header>) headerList7, typedOutput11);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("default", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput13);
        java.lang.String str15 = request14.getMethod();
        retrofit.mime.TypedOutput typedOutput16 = request14.getBody();
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "default" + "'", str15, "default");
        org.junit.Assert.assertNull(typedOutput16);
    }

    @Test
    public void test04774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04774");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.client.Header[] headerArray22 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList23 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList23, headerArray22);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList23, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList23, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList23, typedOutput29);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList23, typedOutput31);
        retrofit.mime.TypedOutput typedOutput33 = request32.getBody();
        retrofit.client.Request request34 = restAdapter12.logAndReplaceRequest(request32);
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor36 = restAdapter35.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean38 = logLevel37.log();
        restAdapter35.logLevel = logLevel37;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler41 = builder40.errorHandler;
        retrofit.client.Client.Provider provider42 = null;
        builder40.clientProvider = provider42;
        retrofit.Server server46 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder47 = builder40.setServer(server46);
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler49 = builder48.errorHandler;
        retrofit.client.Client.Provider provider50 = null;
        builder48.clientProvider = provider50;
        retrofit.converter.Converter converter52 = builder48.converter;
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder54 = builder48.setLogLevel(logLevel53);
        builder40.logLevel = logLevel53;
        boolean boolean56 = logLevel53.log();
        restAdapter35.logLevel = logLevel53;
        restAdapter12.logLevel = logLevel53;
        retrofit.ErrorHandler errorHandler59 = restAdapter12.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel60 = restAdapter12.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel61 = restAdapter12.logLevel;
        boolean boolean62 = logLevel61.log();
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(typedOutput33);
        org.junit.Assert.assertNotNull(request34);
        org.junit.Assert.assertNull(executor36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(errorHandler41);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(errorHandler49);
        org.junit.Assert.assertNull(converter52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(errorHandler59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test04775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04775");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder1 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler2 = builder1.errorHandler;
        retrofit.client.Client.Provider provider3 = null;
        builder1.clientProvider = provider3;
        retrofit.Server server7 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder8 = builder1.setServer(server7);
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler10 = builder9.errorHandler;
        retrofit.client.Client.Provider provider11 = null;
        builder9.clientProvider = provider11;
        retrofit.converter.Converter converter13 = builder9.converter;
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder15 = builder9.setLogLevel(logLevel14);
        builder1.logLevel = logLevel14;
        builder0.logLevel = logLevel14;
        retrofit.RequestInterceptor requestInterceptor18 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.Server server22 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder23 = builder19.setServer(server22);
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor25 = restAdapter24.callbackExecutor;
        java.util.concurrent.Executor executor26 = restAdapter24.callbackExecutor;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler28 = restAdapter27.errorHandler;
        retrofit.Server server31 = new retrofit.Server("", "");
        restAdapter27.server = server31;
        restAdapter24.server = server31;
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        restAdapter24.log = log34;
        retrofit.RestAdapter.Builder builder36 = builder23.setLog(log34);
        log34.log("hi!");
        builder0.log = log34;
        java.util.concurrent.Executor executor40 = builder0.httpExecutor;
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(executor40);
    }

    @Test
    public void test04776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04776");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        restAdapter12.log = log14;
        retrofit.converter.Converter converter16 = null;
        restAdapter12.converter = converter16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter12.getLogLevel();
        retrofit.ErrorHandler errorHandler19 = restAdapter12.errorHandler;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler21 = builder20.errorHandler;
        retrofit.client.Client.Provider provider22 = null;
        builder20.clientProvider = provider22;
        retrofit.Server server26 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder27 = builder20.setServer(server26);
        retrofit.converter.Converter converter28 = null;
        builder27.converter = converter28;
        retrofit.RestAdapter restAdapter30 = builder27.build();
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler32 = builder31.errorHandler;
        java.util.concurrent.Executor executor33 = null;
        builder31.callbackExecutor = executor33;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider36 = builder35.clientProvider;
        java.util.concurrent.Executor executor37 = null;
        builder35.callbackExecutor = executor37;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.Server server42 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder43 = builder39.setServer(server42);
        java.lang.String str44 = server42.getUrl();
        retrofit.RestAdapter.Builder builder45 = builder35.setServer(server42);
        retrofit.RestAdapter.Builder builder46 = builder31.setServer(server42);
        restAdapter30.server = server42;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler49 = builder48.errorHandler;
        retrofit.client.Client.Provider provider50 = null;
        builder48.clientProvider = provider50;
        retrofit.Server server54 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder55 = builder48.setServer(server54);
        retrofit.client.Client.Provider provider56 = null;
        java.util.concurrent.Executor executor57 = null;
        java.util.concurrent.Executor executor58 = null;
        retrofit.RequestInterceptor requestInterceptor59 = null;
        retrofit.converter.Converter converter60 = null;
        retrofit.Profiler profiler61 = null;
        retrofit.ErrorHandler errorHandler62 = null;
        retrofit.Server server63 = null;
        retrofit.client.Client.Provider provider64 = null;
        java.util.concurrent.Executor executor65 = null;
        java.util.concurrent.Executor executor66 = null;
        retrofit.RequestInterceptor requestInterceptor67 = null;
        retrofit.converter.Converter converter68 = null;
        retrofit.Profiler profiler69 = null;
        retrofit.ErrorHandler errorHandler70 = null;
        retrofit.RestAdapter.Log log71 = retrofit.RestAdapter.Log.NONE;
        log71.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel74 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter(server63, provider64, executor65, executor66, requestInterceptor67, converter68, profiler69, errorHandler70, log71, logLevel74);
        retrofit.RestAdapter.LogLevel logLevel76 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter77 = new retrofit.RestAdapter(server54, provider56, executor57, executor58, requestInterceptor59, converter60, profiler61, errorHandler62, log71, logLevel76);
        boolean boolean78 = logLevel76.log();
        boolean boolean79 = logLevel76.log();
        restAdapter30.setLogLevel(logLevel76);
        restAdapter12.setLogLevel(logLevel76);
        retrofit.client.Header[] headerArray84 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList85 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList85, headerArray84);
        retrofit.mime.TypedOutput typedOutput87 = null;
        retrofit.client.Request request88 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList85, typedOutput87);
        java.lang.String str89 = request88.getMethod();
        java.util.List<retrofit.client.Header> headerList90 = request88.getHeaders();
        java.lang.String str91 = request88.getMethod();
        retrofit.client.Request request92 = restAdapter12.logAndReplaceRequest(request88);
        java.lang.String str93 = request88.getMethod();
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(restAdapter30);
        org.junit.Assert.assertNull(errorHandler32);
        org.junit.Assert.assertNull(provider36);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(errorHandler49);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(log71);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(headerArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNotNull(headerList90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertNotNull(request92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
    }

    @Test
    public void test04777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04777");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.Profiler profiler14 = null;
        restAdapter0.profiler = profiler14;
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter0.logLevel;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler18 = builder17.errorHandler;
        retrofit.ErrorHandler errorHandler19 = builder17.errorHandler;
        retrofit.RestAdapter.Log log20 = null;
        builder17.log = log20;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean23 = logLevel22.log();
        builder17.logLevel = logLevel22;
        retrofit.ErrorHandler errorHandler25 = builder17.errorHandler;
        retrofit.RestAdapter.Builder builder27 = builder17.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor28 = null;
        builder27.requestInterceptor = requestInterceptor28;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler31 = builder30.errorHandler;
        retrofit.client.Client.Provider provider32 = null;
        builder30.clientProvider = provider32;
        retrofit.Server server36 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder37 = builder30.setServer(server36);
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.Server server45 = null;
        retrofit.client.Client.Provider provider46 = null;
        java.util.concurrent.Executor executor47 = null;
        java.util.concurrent.Executor executor48 = null;
        retrofit.RequestInterceptor requestInterceptor49 = null;
        retrofit.converter.Converter converter50 = null;
        retrofit.Profiler profiler51 = null;
        retrofit.ErrorHandler errorHandler52 = null;
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        log53.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter(server45, provider46, executor47, executor48, requestInterceptor49, converter50, profiler51, errorHandler52, log53, logLevel56);
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter(server36, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log53, logLevel58);
        log53.log("");
        builder27.log = log53;
        retrofit.RestAdapter.Log log63 = builder27.log;
        restAdapter0.log = log63;
        retrofit.RestAdapter.RestHandler restHandler65 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel66 = restAdapter0.logLevel;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel16);
        org.junit.Assert.assertNull(errorHandler18);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(errorHandler25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(errorHandler31);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertNull(logLevel66);
    }

    @Test
    public void test04778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04778");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server6 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder7 = builder0.setServer(server6);
        retrofit.Server server10 = new retrofit.Server("", "");
        builder7.server = server10;
        retrofit.converter.Converter converter12 = null;
        builder7.converter = converter12;
        retrofit.Server server15 = new retrofit.Server("default");
        retrofit.RestAdapter.Builder builder16 = builder7.setServer(server15);
        retrofit.Profiler profiler17 = null;
        builder7.profiler = profiler17;
        retrofit.client.Client.Provider provider19 = builder7.clientProvider;
        retrofit.Profiler profiler20 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder21 = builder7.setProfiler(profiler20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(provider19);
    }

    @Test
    public void test04779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04779");
        retrofit.client.Header[] headerArray12 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList13 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList13, headerArray12);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList13, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList13, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList13, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList13, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("default", "hi!", (java.util.List<retrofit.client.Header>) headerList13, typedOutput23);
        java.util.List<retrofit.client.Header> headerList25 = request24.getHeaders();
        retrofit.mime.TypedOutput typedOutput26 = null;
        retrofit.client.Request request27 = new retrofit.client.Request("", "default", headerList25, typedOutput26);
        java.lang.String str28 = request27.getUrl();
        java.lang.String str29 = request27.getMethod();
        java.lang.Class<?> wildcardClass30 = request27.getClass();
        org.junit.Assert.assertNotNull(headerArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(headerList25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "default" + "'", str28, "default");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test04780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04780");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = restAdapter0.errorHandler;
        java.util.concurrent.Executor executor15 = restAdapter0.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter0.requestInterceptor;
        retrofit.Profiler profiler17 = restAdapter0.profiler;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor19 = restAdapter18.callbackExecutor;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor21 = restAdapter20.callbackExecutor;
        java.util.concurrent.Executor executor22 = restAdapter20.callbackExecutor;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler24 = restAdapter23.errorHandler;
        retrofit.Server server27 = new retrofit.Server("", "");
        restAdapter23.server = server27;
        restAdapter20.server = server27;
        restAdapter18.server = server27;
        retrofit.Profiler profiler31 = restAdapter18.profiler;
        retrofit.ErrorHandler errorHandler32 = null;
        restAdapter18.errorHandler = errorHandler32;
        java.util.concurrent.Executor executor34 = restAdapter18.callbackExecutor;
        java.util.concurrent.Executor executor35 = restAdapter18.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler36 = restAdapter18.new RestHandler();
        retrofit.RestAdapter.Log log37 = restAdapter18.log;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler39 = builder38.errorHandler;
        java.util.concurrent.Executor executor40 = null;
        builder38.callbackExecutor = executor40;
        java.util.concurrent.Executor executor42 = null;
        builder38.httpExecutor = executor42;
        retrofit.Profiler profiler44 = null;
        builder38.profiler = profiler44;
        retrofit.RestAdapter.Builder builder47 = builder38.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel48 = builder38.logLevel;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler50 = builder49.errorHandler;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        builder49.requestInterceptor = requestInterceptor51;
        retrofit.Server server53 = null;
        retrofit.client.Client.Provider provider54 = null;
        java.util.concurrent.Executor executor55 = null;
        java.util.concurrent.Executor executor56 = null;
        retrofit.RequestInterceptor requestInterceptor57 = null;
        retrofit.converter.Converter converter58 = null;
        retrofit.Profiler profiler59 = null;
        retrofit.ErrorHandler errorHandler60 = null;
        retrofit.RestAdapter.Log log61 = retrofit.RestAdapter.Log.NONE;
        log61.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel64 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter(server53, provider54, executor55, executor56, requestInterceptor57, converter58, profiler59, errorHandler60, log61, logLevel64);
        builder49.log = log61;
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler68 = builder67.errorHandler;
        retrofit.client.Client.Provider provider69 = null;
        builder67.clientProvider = provider69;
        retrofit.Server server73 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder74 = builder67.setServer(server73);
        retrofit.converter.Converter converter75 = null;
        builder74.converter = converter75;
        retrofit.RestAdapter restAdapter77 = builder74.build();
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler79 = builder78.errorHandler;
        java.util.concurrent.Executor executor80 = null;
        builder78.callbackExecutor = executor80;
        retrofit.RestAdapter.Builder builder82 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider83 = builder82.clientProvider;
        java.util.concurrent.Executor executor84 = null;
        builder82.callbackExecutor = executor84;
        retrofit.RestAdapter.Builder builder86 = new retrofit.RestAdapter.Builder();
        retrofit.Server server89 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder90 = builder86.setServer(server89);
        java.lang.String str91 = server89.getUrl();
        retrofit.RestAdapter.Builder builder92 = builder82.setServer(server89);
        retrofit.RestAdapter.Builder builder93 = builder78.setServer(server89);
        restAdapter77.server = server89;
        retrofit.client.Client.Provider provider95 = restAdapter77.clientProvider;
        builder49.clientProvider = provider95;
        builder38.clientProvider = provider95;
        restAdapter18.clientProvider = provider95;
        restAdapter0.clientProvider = provider95;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNull(profiler17);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNull(profiler31);
        org.junit.Assert.assertNull(executor34);
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertNull(log37);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler50);
        org.junit.Assert.assertNotNull(log61);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler68);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(restAdapter77);
        org.junit.Assert.assertNull(errorHandler79);
        org.junit.Assert.assertNull(provider83);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "hi!" + "'", str91, "hi!");
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(provider95);
    }

    @Test
    public void test04781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04781");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.ErrorHandler errorHandler2 = restAdapter0.errorHandler;
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor5 = null;
        restAdapter4.requestInterceptor = requestInterceptor5;
        retrofit.RestAdapter.RestHandler restHandler7 = restAdapter4.new RestHandler();
        retrofit.Server server9 = new retrofit.Server("");
        restAdapter4.server = server9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler12 = builder11.errorHandler;
        retrofit.ErrorHandler errorHandler13 = builder11.errorHandler;
        retrofit.RestAdapter.Log log14 = null;
        builder11.log = log14;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        builder11.requestInterceptor = requestInterceptor16;
        retrofit.client.Client.Provider provider18 = null;
        builder11.clientProvider = provider18;
        builder11.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.Server server24 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder25 = builder21.setServer(server24);
        retrofit.Server server26 = builder21.server;
        java.lang.String str27 = server26.getName();
        builder11.server = server26;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler30 = builder29.errorHandler;
        retrofit.client.Client.Provider provider31 = null;
        builder29.clientProvider = provider31;
        java.util.concurrent.Executor executor33 = null;
        builder29.callbackExecutor = executor33;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor36 = restAdapter35.callbackExecutor;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor38 = restAdapter37.callbackExecutor;
        java.util.concurrent.Executor executor39 = restAdapter37.callbackExecutor;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler41 = restAdapter40.errorHandler;
        retrofit.Server server44 = new retrofit.Server("", "");
        restAdapter40.server = server44;
        restAdapter37.server = server44;
        restAdapter35.server = server44;
        java.lang.String str48 = server44.getName();
        retrofit.RestAdapter.Builder builder49 = builder29.setServer(server44);
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.Server server53 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder54 = builder50.setServer(server53);
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor56 = restAdapter55.callbackExecutor;
        java.util.concurrent.Executor executor57 = restAdapter55.callbackExecutor;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler59 = restAdapter58.errorHandler;
        retrofit.Server server62 = new retrofit.Server("", "");
        restAdapter58.server = server62;
        restAdapter55.server = server62;
        retrofit.RestAdapter.Log log65 = retrofit.RestAdapter.Log.NONE;
        restAdapter55.log = log65;
        retrofit.RestAdapter.Builder builder67 = builder54.setLog(log65);
        retrofit.RestAdapter.LogLevel logLevel68 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder69 = builder54.setLogLevel(logLevel68);
        retrofit.Profiler profiler70 = null;
        builder69.profiler = profiler70;
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        retrofit.Server server75 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder76 = builder72.setServer(server75);
        retrofit.RestAdapter.LogLevel logLevel77 = builder76.logLevel;
        retrofit.RestAdapter.Builder builder78 = builder69.setLogLevel(logLevel77);
        retrofit.RestAdapter restAdapter79 = builder69.build();
        retrofit.Server server82 = new retrofit.Server("", "default");
        builder69.server = server82;
        retrofit.Profiler profiler84 = null;
        builder69.profiler = profiler84;
        retrofit.converter.Converter converter86 = builder69.converter;
        builder29.converter = converter86;
        retrofit.RestAdapter.Builder builder88 = builder11.setConverter(converter86);
        restAdapter4.converter = converter86;
        restAdapter0.converter = converter86;
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(server26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(errorHandler30);
        org.junit.Assert.assertNull(executor36);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNull(errorHandler41);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(executor56);
        org.junit.Assert.assertNull(executor57);
        org.junit.Assert.assertNull(errorHandler59);
        org.junit.Assert.assertNotNull(log65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(restAdapter79);
        org.junit.Assert.assertNotNull(converter86);
        org.junit.Assert.assertNotNull(builder88);
    }

    @Test
    public void test04782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04782");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        java.util.concurrent.Executor executor18 = restAdapter0.httpExecutor;
        java.util.concurrent.Executor executor19 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter0.logLevel;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor22 = restAdapter21.callbackExecutor;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor24 = restAdapter23.callbackExecutor;
        java.util.concurrent.Executor executor25 = restAdapter23.callbackExecutor;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler27 = restAdapter26.errorHandler;
        retrofit.Server server30 = new retrofit.Server("", "");
        restAdapter26.server = server30;
        restAdapter23.server = server30;
        restAdapter21.server = server30;
        retrofit.Profiler profiler34 = restAdapter21.profiler;
        retrofit.ErrorHandler errorHandler35 = null;
        restAdapter21.errorHandler = errorHandler35;
        retrofit.RestAdapter.RestHandler restHandler37 = restAdapter21.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler38 = restAdapter21.new RestHandler();
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler40 = builder39.errorHandler;
        retrofit.ErrorHandler errorHandler41 = builder39.errorHandler;
        retrofit.converter.Converter converter42 = null;
        builder39.converter = converter42;
        retrofit.RequestInterceptor requestInterceptor44 = null;
        builder39.requestInterceptor = requestInterceptor44;
        retrofit.client.Client.Provider provider46 = builder39.clientProvider;
        builder39.ensureSaneDefaults();
        retrofit.client.Client.Provider provider48 = builder39.clientProvider;
        restAdapter21.clientProvider = provider48;
        retrofit.converter.Converter converter50 = restAdapter21.converter;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler52 = builder51.errorHandler;
        retrofit.Server server55 = new retrofit.Server("", "");
        builder51.server = server55;
        retrofit.RestAdapter.LogLevel logLevel57 = builder51.logLevel;
        restAdapter21.logLevel = logLevel57;
        retrofit.Profiler profiler59 = restAdapter21.profiler;
        retrofit.RestAdapter.LogLevel logLevel60 = restAdapter21.getLogLevel();
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.setLogLevel(logLevel60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log level may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNull(profiler34);
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNull(errorHandler41);
        org.junit.Assert.assertNull(provider46);
        org.junit.Assert.assertNotNull(provider48);
        org.junit.Assert.assertNull(converter50);
        org.junit.Assert.assertNull(errorHandler52);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test04783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04783");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.ErrorHandler errorHandler18 = restAdapter0.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter0.logLevel;
        retrofit.client.Response response21 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response23 = restAdapter0.logAndReplaceResponse("", response21, (long) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(errorHandler18);
        org.junit.Assert.assertNull(logLevel19);
    }

    @Test
    public void test04784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04784");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server4 = new retrofit.Server("", "");
        builder0.server = server4;
        retrofit.client.Client.Provider provider6 = null;
        java.util.concurrent.Executor executor7 = null;
        java.util.concurrent.Executor executor8 = null;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        retrofit.converter.Converter converter10 = null;
        retrofit.Profiler profiler11 = null;
        retrofit.ErrorHandler errorHandler12 = null;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler14 = builder13.errorHandler;
        retrofit.Server server17 = new retrofit.Server("", "");
        builder13.server = server17;
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        builder13.log = log19;
        retrofit.Server server21 = null;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        log29.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel32);
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server4, provider6, executor7, executor8, requestInterceptor9, converter10, profiler11, errorHandler12, log19, logLevel32);
        retrofit.ErrorHandler errorHandler35 = null;
        restAdapter34.errorHandler = errorHandler35;
        retrofit.RestAdapter.RestHandler restHandler37 = restAdapter34.new RestHandler();
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler39 = builder38.errorHandler;
        retrofit.Server server42 = new retrofit.Server("", "");
        builder38.server = server42;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        builder38.log = log44;
        restAdapter34.log = log44;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler48 = builder47.errorHandler;
        retrofit.ErrorHandler errorHandler49 = builder47.errorHandler;
        retrofit.Profiler profiler50 = builder47.profiler;
        retrofit.RestAdapter.Log log51 = builder47.log;
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.FULL;
        builder47.logLevel = logLevel52;
        retrofit.Profiler profiler54 = builder47.profiler;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.Server server58 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder59 = builder55.setServer(server58);
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor61 = restAdapter60.callbackExecutor;
        java.util.concurrent.Executor executor62 = restAdapter60.callbackExecutor;
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler64 = restAdapter63.errorHandler;
        retrofit.Server server67 = new retrofit.Server("", "");
        restAdapter63.server = server67;
        restAdapter60.server = server67;
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        restAdapter60.log = log70;
        retrofit.RestAdapter.Builder builder72 = builder59.setLog(log70);
        retrofit.RestAdapter.Builder builder74 = builder59.setServer("hi!");
        retrofit.RestAdapter.Log log75 = builder74.log;
        builder47.log = log75;
        restAdapter34.log = log75;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNull(errorHandler48);
        org.junit.Assert.assertNull(errorHandler49);
        org.junit.Assert.assertNull(profiler50);
        org.junit.Assert.assertNull(log51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler54);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(executor61);
        org.junit.Assert.assertNull(executor62);
        org.junit.Assert.assertNull(errorHandler64);
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(log75);
    }

    @Test
    public void test04785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04785");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = null;
        restAdapter0.callbackExecutor = executor2;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        java.util.concurrent.Executor executor5 = restAdapter0.httpExecutor;
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(executor5);
    }

    @Test
    public void test04786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04786");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server4 = new retrofit.Server("", "");
        builder0.server = server4;
        java.util.concurrent.Executor executor6 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor7 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler9 = builder8.errorHandler;
        java.util.concurrent.Executor executor10 = builder8.callbackExecutor;
        retrofit.RestAdapter.Builder builder12 = builder8.setServer("hi!");
        builder12.ensureSaneDefaults();
        java.util.concurrent.Executor executor14 = builder12.callbackExecutor;
        builder0.httpExecutor = executor14;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler17 = builder16.errorHandler;
        retrofit.Server server20 = new retrofit.Server("", "");
        builder16.server = server20;
        java.util.concurrent.Executor executor22 = builder16.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel23 = null;
        builder16.logLevel = logLevel23;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler26 = builder25.errorHandler;
        retrofit.client.Client.Provider provider27 = null;
        builder25.clientProvider = provider27;
        retrofit.Server server31 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder32 = builder25.setServer(server31);
        retrofit.converter.Converter converter33 = null;
        builder32.converter = converter33;
        retrofit.RestAdapter restAdapter35 = builder32.build();
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler37 = builder36.errorHandler;
        java.util.concurrent.Executor executor38 = null;
        builder36.callbackExecutor = executor38;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider41 = builder40.clientProvider;
        java.util.concurrent.Executor executor42 = null;
        builder40.callbackExecutor = executor42;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.Server server47 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder48 = builder44.setServer(server47);
        java.lang.String str49 = server47.getUrl();
        retrofit.RestAdapter.Builder builder50 = builder40.setServer(server47);
        retrofit.RestAdapter.Builder builder51 = builder36.setServer(server47);
        restAdapter35.server = server47;
        java.util.concurrent.Executor executor53 = restAdapter35.httpExecutor;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler55 = builder54.errorHandler;
        retrofit.Server server58 = new retrofit.Server("", "");
        builder54.server = server58;
        retrofit.RestAdapter.Log log60 = retrofit.RestAdapter.Log.NONE;
        builder54.log = log60;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler63 = builder62.errorHandler;
        retrofit.client.Client.Provider provider64 = null;
        builder62.clientProvider = provider64;
        retrofit.Server server68 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder69 = builder62.setServer(server68);
        retrofit.converter.Converter converter70 = null;
        builder69.converter = converter70;
        retrofit.RestAdapter restAdapter72 = builder69.build();
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler74 = builder73.errorHandler;
        java.util.concurrent.Executor executor75 = null;
        builder73.callbackExecutor = executor75;
        retrofit.RestAdapter.Builder builder77 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider78 = builder77.clientProvider;
        java.util.concurrent.Executor executor79 = null;
        builder77.callbackExecutor = executor79;
        retrofit.RestAdapter.Builder builder81 = new retrofit.RestAdapter.Builder();
        retrofit.Server server84 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder85 = builder81.setServer(server84);
        java.lang.String str86 = server84.getUrl();
        retrofit.RestAdapter.Builder builder87 = builder77.setServer(server84);
        retrofit.RestAdapter.Builder builder88 = builder73.setServer(server84);
        restAdapter72.server = server84;
        java.util.concurrent.Executor executor90 = restAdapter72.httpExecutor;
        builder54.httpExecutor = executor90;
        retrofit.RestAdapter.Builder builder92 = builder16.setExecutors(executor53, executor90);
        builder0.callbackExecutor = executor53;
        java.util.concurrent.Executor executor94 = builder0.httpExecutor;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(requestInterceptor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(executor14);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(errorHandler26);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(restAdapter35);
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNull(provider41);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(executor53);
        org.junit.Assert.assertNull(errorHandler55);
        org.junit.Assert.assertNotNull(log60);
        org.junit.Assert.assertNull(errorHandler63);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(restAdapter72);
        org.junit.Assert.assertNull(errorHandler74);
        org.junit.Assert.assertNull(provider78);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "hi!" + "'", str86, "hi!");
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(executor90);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(executor94);
    }

    @Test
    public void test04787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04787");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = restAdapter0.errorHandler;
        java.util.concurrent.Executor executor15 = null;
        restAdapter0.httpExecutor = executor15;
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter0.logLevel;
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean19 = logLevel18.log();
        restAdapter0.logLevel = logLevel18;
        boolean boolean21 = logLevel18.log();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test04788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04788");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server6 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder7 = builder0.setServer(server6);
        retrofit.converter.Converter converter8 = null;
        builder7.converter = converter8;
        retrofit.RestAdapter restAdapter10 = builder7.build();
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler12 = builder11.errorHandler;
        java.util.concurrent.Executor executor13 = null;
        builder11.callbackExecutor = executor13;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider16 = builder15.clientProvider;
        java.util.concurrent.Executor executor17 = null;
        builder15.callbackExecutor = executor17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.Server server22 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder23 = builder19.setServer(server22);
        java.lang.String str24 = server22.getUrl();
        retrofit.RestAdapter.Builder builder25 = builder15.setServer(server22);
        retrofit.RestAdapter.Builder builder26 = builder11.setServer(server22);
        restAdapter10.server = server22;
        retrofit.RestAdapter.Log log28 = restAdapter10.log;
        log28.log("");
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(restAdapter10);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(provider16);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(log28);
    }

    @Test
    public void test04789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04789");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        restAdapter5.log = log15;
        retrofit.RestAdapter.Builder builder17 = builder4.setLog(log15);
        retrofit.converter.Converter converter18 = null;
        builder17.converter = converter18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler21 = builder20.errorHandler;
        retrofit.ErrorHandler errorHandler22 = builder20.errorHandler;
        retrofit.Profiler profiler23 = builder20.profiler;
        retrofit.RestAdapter.Log log24 = builder20.log;
        retrofit.Server server25 = null;
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        log33.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter(server25, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log33, logLevel36);
        builder20.log = log33;
        retrofit.RestAdapter.Builder builder39 = builder17.setLog(log33);
        retrofit.RestAdapter.LogLevel logLevel40 = builder17.logLevel;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel42 = restAdapter41.logLevel;
        retrofit.RestAdapter.RestHandler restHandler43 = restAdapter41.new RestHandler();
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor45 = restAdapter44.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean47 = logLevel46.log();
        restAdapter44.logLevel = logLevel46;
        restAdapter41.logLevel = logLevel46;
        retrofit.RestAdapter.Builder builder50 = builder17.setLogLevel(logLevel46);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder52 = builder17.setServer("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be blank.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNull(profiler23);
        org.junit.Assert.assertNull(log24);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(logLevel42);
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test04790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04790");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        builder0.requestInterceptor = requestInterceptor5;
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor8 = restAdapter7.callbackExecutor;
        java.util.concurrent.Executor executor9 = restAdapter7.callbackExecutor;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.Server server14 = new retrofit.Server("", "");
        restAdapter10.server = server14;
        restAdapter7.server = server14;
        retrofit.RestAdapter.Builder builder17 = builder0.setServer(server14);
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler19 = builder18.errorHandler;
        retrofit.client.Client.Provider provider20 = null;
        builder18.clientProvider = provider20;
        retrofit.Server server24 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder25 = builder18.setServer(server24);
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.Server server33 = null;
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        log41.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter(server33, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log41, logLevel44);
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter(server24, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log41, logLevel46);
        retrofit.RestAdapter.Builder builder48 = builder0.setLogLevel(logLevel46);
        retrofit.ErrorHandler errorHandler49 = builder48.errorHandler;
        java.util.concurrent.Executor executor50 = builder48.callbackExecutor;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(errorHandler49);
        org.junit.Assert.assertNull(executor50);
    }

    @Test
    public void test04791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04791");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        java.util.concurrent.Executor executor6 = builder4.httpExecutor;
        retrofit.RestAdapter restAdapter7 = builder4.build();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler9 = builder8.errorHandler;
        java.util.concurrent.Executor executor10 = builder8.callbackExecutor;
        retrofit.RestAdapter.Builder builder12 = builder8.setServer("hi!");
        builder12.ensureSaneDefaults();
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        log22.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel25);
        retrofit.RestAdapter.RestHandler restHandler27 = restAdapter26.new RestHandler();
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        restAdapter26.log = log28;
        retrofit.converter.Converter converter30 = null;
        restAdapter26.converter = converter30;
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter26.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor33 = null;
        restAdapter26.requestInterceptor = requestInterceptor33;
        retrofit.RestAdapter.LogLevel logLevel35 = restAdapter26.logLevel;
        retrofit.RestAdapter.Builder builder36 = builder12.setLogLevel(logLevel35);
        retrofit.client.Client.Provider provider37 = builder12.clientProvider;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler39 = builder38.errorHandler;
        java.util.concurrent.Executor executor40 = builder38.callbackExecutor;
        retrofit.RestAdapter.Builder builder42 = builder38.setServer("hi!");
        retrofit.Server server45 = new retrofit.Server("default", "hi!");
        java.lang.String str46 = server45.getUrl();
        retrofit.RestAdapter.Builder builder47 = builder42.setServer(server45);
        retrofit.RestAdapter.LogLevel logLevel48 = builder47.logLevel;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.Server server52 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder53 = builder49.setServer(server52);
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor55 = restAdapter54.callbackExecutor;
        java.util.concurrent.Executor executor56 = restAdapter54.callbackExecutor;
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler58 = restAdapter57.errorHandler;
        retrofit.Server server61 = new retrofit.Server("", "");
        restAdapter57.server = server61;
        restAdapter54.server = server61;
        retrofit.RestAdapter.Log log64 = retrofit.RestAdapter.Log.NONE;
        restAdapter54.log = log64;
        retrofit.RestAdapter.Builder builder66 = builder53.setLog(log64);
        retrofit.RestAdapter.LogLevel logLevel67 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder68 = builder53.setLogLevel(logLevel67);
        retrofit.Profiler profiler69 = null;
        builder68.profiler = profiler69;
        retrofit.converter.Converter converter71 = null;
        builder68.converter = converter71;
        retrofit.ErrorHandler errorHandler73 = null;
        builder68.errorHandler = errorHandler73;
        retrofit.RestAdapter restAdapter75 = builder68.build();
        retrofit.ErrorHandler errorHandler76 = builder68.errorHandler;
        builder47.errorHandler = errorHandler76;
        retrofit.RestAdapter.Builder builder78 = builder12.setErrorHandler(errorHandler76);
        retrofit.RestAdapter.Builder builder79 = builder4.setErrorHandler(errorHandler76);
        retrofit.RestAdapter restAdapter80 = builder79.build();
        retrofit.RestAdapter.LogLevel logLevel81 = restAdapter80.getLogLevel();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(provider37);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNull(executor40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "default" + "'", str46, "default");
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(executor55);
        org.junit.Assert.assertNull(executor56);
        org.junit.Assert.assertNull(errorHandler58);
        org.junit.Assert.assertNotNull(log64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(restAdapter75);
        org.junit.Assert.assertNotNull(errorHandler76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(restAdapter80);
        org.junit.Assert.assertTrue("'" + logLevel81 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel81.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test04792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04792");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.Profiler profiler13 = restAdapter12.profiler;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler15 = builder14.errorHandler;
        java.util.concurrent.Executor executor16 = builder14.callbackExecutor;
        retrofit.RestAdapter.Builder builder18 = builder14.setServer("hi!");
        retrofit.Server server21 = new retrofit.Server("default", "hi!");
        java.lang.String str22 = server21.getUrl();
        retrofit.RestAdapter.Builder builder23 = builder18.setServer(server21);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler25 = builder24.errorHandler;
        retrofit.ErrorHandler errorHandler26 = builder24.errorHandler;
        java.util.concurrent.Executor executor27 = builder24.callbackExecutor;
        java.util.concurrent.Executor executor28 = null;
        builder24.callbackExecutor = executor28;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler31 = builder30.errorHandler;
        retrofit.Server server34 = new retrofit.Server("", "");
        builder30.server = server34;
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        builder30.log = log36;
        retrofit.RestAdapter.LogLevel logLevel38 = builder30.logLevel;
        retrofit.RestAdapter.Builder builder39 = builder24.setLogLevel(logLevel38);
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler41 = builder40.errorHandler;
        retrofit.client.Client.Provider provider42 = null;
        builder40.clientProvider = provider42;
        retrofit.Server server46 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder47 = builder40.setServer(server46);
        retrofit.converter.Converter converter48 = null;
        builder47.converter = converter48;
        retrofit.RestAdapter restAdapter50 = builder47.build();
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler52 = builder51.errorHandler;
        java.util.concurrent.Executor executor53 = null;
        builder51.callbackExecutor = executor53;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider56 = builder55.clientProvider;
        java.util.concurrent.Executor executor57 = null;
        builder55.callbackExecutor = executor57;
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.Server server62 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder63 = builder59.setServer(server62);
        java.lang.String str64 = server62.getUrl();
        retrofit.RestAdapter.Builder builder65 = builder55.setServer(server62);
        retrofit.RestAdapter.Builder builder66 = builder51.setServer(server62);
        restAdapter50.server = server62;
        retrofit.client.Client.Provider provider68 = restAdapter50.clientProvider;
        retrofit.RestAdapter.Builder builder69 = builder39.setClient(provider68);
        retrofit.RestAdapter.Builder builder70 = builder23.setClient(provider68);
        retrofit.Server server71 = builder23.server;
        restAdapter12.server = server71;
        retrofit.Profiler profiler73 = restAdapter12.profiler;
        retrofit.client.Header[] headerArray84 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList85 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList85, headerArray84);
        retrofit.mime.TypedOutput typedOutput87 = null;
        retrofit.client.Request request88 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList85, typedOutput87);
        retrofit.mime.TypedOutput typedOutput89 = null;
        retrofit.client.Request request90 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList85, typedOutput89);
        retrofit.mime.TypedOutput typedOutput91 = null;
        retrofit.client.Request request92 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList85, typedOutput91);
        retrofit.mime.TypedOutput typedOutput93 = null;
        retrofit.client.Request request94 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList85, typedOutput93);
        retrofit.mime.TypedOutput typedOutput95 = null;
        retrofit.client.Request request96 = new retrofit.client.Request("default", "default", (java.util.List<retrofit.client.Header>) headerList85, typedOutput95);
        retrofit.client.Request request97 = restAdapter12.logAndReplaceRequest(request96);
        java.lang.String str98 = request97.getMethod();
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "default" + "'", str22, "default");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(errorHandler25);
        org.junit.Assert.assertNull(errorHandler26);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(errorHandler31);
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(errorHandler41);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(restAdapter50);
        org.junit.Assert.assertNull(errorHandler52);
        org.junit.Assert.assertNull(provider56);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hi!" + "'", str64, "hi!");
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(provider68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(server71);
        org.junit.Assert.assertNull(profiler73);
        org.junit.Assert.assertNotNull(headerArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(request97);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "default" + "'", str98, "default");
    }

    @Test
    public void test04793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04793");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.client.Header[] headerArray22 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList23 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList23, headerArray22);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList23, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList23, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList23, typedOutput29);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList23, typedOutput31);
        retrofit.mime.TypedOutput typedOutput33 = request32.getBody();
        retrofit.client.Request request34 = restAdapter12.logAndReplaceRequest(request32);
        retrofit.RestAdapter.RestHandler restHandler35 = restAdapter12.new RestHandler();
        retrofit.client.Client.Provider provider36 = restAdapter12.clientProvider;
        retrofit.RestAdapter.RestHandler restHandler37 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler38 = restAdapter12.new RestHandler();
        retrofit.converter.Converter converter39 = restAdapter12.converter;
        retrofit.Profiler profiler40 = null;
        restAdapter12.profiler = profiler40;
        retrofit.RestAdapter.LogLevel logLevel42 = restAdapter12.getLogLevel();
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(typedOutput33);
        org.junit.Assert.assertNotNull(request34);
        org.junit.Assert.assertNull(provider36);
        org.junit.Assert.assertNull(converter39);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test04794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04794");
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        java.util.List<retrofit.client.Header> headerList13 = request12.getHeaders();
        java.util.List<retrofit.client.Header> headerList14 = request12.getHeaders();
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("default", "", headerList14, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("", "", headerList14, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "hi!", headerList14, typedOutput19);
        java.lang.String str21 = request20.getUrl();
        java.lang.Class<?> wildcardClass22 = request20.getClass();
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(headerList13);
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test04795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04795");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter0.getLogLevel();
        retrofit.ErrorHandler errorHandler20 = null;
        restAdapter0.errorHandler = errorHandler20;
        retrofit.client.Client.Provider provider22 = null;
        restAdapter0.clientProvider = provider22;
        retrofit.ErrorHandler errorHandler24 = restAdapter0.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor26 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor27 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler29 = builder28.errorHandler;
        retrofit.Server server32 = new retrofit.Server("", "");
        builder28.server = server32;
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        builder28.log = log34;
        retrofit.RequestInterceptor requestInterceptor36 = builder28.requestInterceptor;
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        log37.log("hi!");
        log37.log("hi!");
        builder28.log = log37;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler44 = builder43.errorHandler;
        retrofit.Server server47 = new retrofit.Server("", "");
        builder43.server = server47;
        retrofit.client.Client.Provider provider49 = null;
        java.util.concurrent.Executor executor50 = null;
        java.util.concurrent.Executor executor51 = null;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        retrofit.converter.Converter converter53 = null;
        retrofit.Profiler profiler54 = null;
        retrofit.ErrorHandler errorHandler55 = null;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler57 = builder56.errorHandler;
        retrofit.Server server60 = new retrofit.Server("", "");
        builder56.server = server60;
        retrofit.RestAdapter.Log log62 = retrofit.RestAdapter.Log.NONE;
        builder56.log = log62;
        retrofit.Server server64 = null;
        retrofit.client.Client.Provider provider65 = null;
        java.util.concurrent.Executor executor66 = null;
        java.util.concurrent.Executor executor67 = null;
        retrofit.RequestInterceptor requestInterceptor68 = null;
        retrofit.converter.Converter converter69 = null;
        retrofit.Profiler profiler70 = null;
        retrofit.ErrorHandler errorHandler71 = null;
        retrofit.RestAdapter.Log log72 = retrofit.RestAdapter.Log.NONE;
        log72.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel75 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter76 = new retrofit.RestAdapter(server64, provider65, executor66, executor67, requestInterceptor68, converter69, profiler70, errorHandler71, log72, logLevel75);
        retrofit.RestAdapter restAdapter77 = new retrofit.RestAdapter(server47, provider49, executor50, executor51, requestInterceptor52, converter53, profiler54, errorHandler55, log62, logLevel75);
        retrofit.ErrorHandler errorHandler78 = null;
        restAdapter77.errorHandler = errorHandler78;
        retrofit.RestAdapter.RestHandler restHandler80 = restAdapter77.new RestHandler();
        retrofit.RestAdapter.Builder builder81 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler82 = builder81.errorHandler;
        retrofit.Server server85 = new retrofit.Server("", "");
        builder81.server = server85;
        retrofit.RestAdapter.Log log87 = retrofit.RestAdapter.Log.NONE;
        builder81.log = log87;
        restAdapter77.log = log87;
        builder28.log = log87;
        restAdapter0.log = log87;
        log87.log("");
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertNull(requestInterceptor36);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNull(errorHandler44);
        org.junit.Assert.assertNull(errorHandler57);
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertNotNull(log72);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler82);
        org.junit.Assert.assertNotNull(log87);
    }

    @Test
    public void test04796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04796");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.ErrorHandler errorHandler3 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler4 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler6 = builder5.errorHandler;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.Server server10 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder11 = builder7.setServer(server10);
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor13 = restAdapter12.callbackExecutor;
        java.util.concurrent.Executor executor14 = restAdapter12.callbackExecutor;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler16 = restAdapter15.errorHandler;
        retrofit.Server server19 = new retrofit.Server("", "");
        restAdapter15.server = server19;
        restAdapter12.server = server19;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        restAdapter12.log = log22;
        retrofit.RestAdapter.Builder builder24 = builder11.setLog(log22);
        retrofit.RestAdapter.Builder builder25 = builder5.setLog(log22);
        retrofit.RestAdapter.Builder builder26 = builder0.setLog(log22);
        java.util.concurrent.Executor executor27 = builder26.httpExecutor;
        retrofit.ErrorHandler errorHandler28 = builder26.errorHandler;
        retrofit.Profiler profiler29 = builder26.profiler;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler31 = builder30.errorHandler;
        retrofit.ErrorHandler errorHandler32 = builder30.errorHandler;
        retrofit.Profiler profiler33 = builder30.profiler;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor35 = restAdapter34.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler36 = restAdapter34.new RestHandler();
        retrofit.Server server39 = new retrofit.Server("hi!", "hi!");
        restAdapter34.server = server39;
        retrofit.RestAdapter.Builder builder41 = builder30.setServer(server39);
        retrofit.converter.Converter converter42 = null;
        builder41.converter = converter42;
        retrofit.Profiler profiler44 = null;
        builder41.profiler = profiler44;
        retrofit.RestAdapter restAdapter46 = builder41.build();
        java.util.concurrent.Executor executor47 = builder41.httpExecutor;
        builder26.httpExecutor = executor47;
        retrofit.RequestInterceptor requestInterceptor49 = builder26.requestInterceptor;
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNull(errorHandler4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertNull(profiler29);
        org.junit.Assert.assertNull(errorHandler31);
        org.junit.Assert.assertNull(errorHandler32);
        org.junit.Assert.assertNull(profiler33);
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(restAdapter46);
        org.junit.Assert.assertNotNull(executor47);
        org.junit.Assert.assertNull(requestInterceptor49);
    }

    @Test
    public void test04797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04797");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        restAdapter5.log = log15;
        retrofit.RestAdapter.Builder builder17 = builder4.setLog(log15);
        retrofit.converter.Converter converter18 = null;
        builder17.converter = converter18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler21 = builder20.errorHandler;
        retrofit.ErrorHandler errorHandler22 = builder20.errorHandler;
        retrofit.Profiler profiler23 = builder20.profiler;
        retrofit.RestAdapter.Log log24 = builder20.log;
        retrofit.Server server25 = null;
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        log33.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter(server25, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log33, logLevel36);
        builder20.log = log33;
        retrofit.RestAdapter.Builder builder39 = builder17.setLog(log33);
        retrofit.ErrorHandler errorHandler40 = null;
        builder17.errorHandler = errorHandler40;
        retrofit.RestAdapter.Log log42 = builder17.log;
        retrofit.Profiler profiler43 = builder17.profiler;
        retrofit.ErrorHandler errorHandler44 = builder17.errorHandler;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler46 = builder45.errorHandler;
        retrofit.Server server49 = new retrofit.Server("", "");
        builder45.server = server49;
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        builder45.log = log51;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler54 = builder53.errorHandler;
        retrofit.client.Client.Provider provider55 = null;
        builder53.clientProvider = provider55;
        retrofit.Server server59 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder60 = builder53.setServer(server59);
        retrofit.converter.Converter converter61 = null;
        builder60.converter = converter61;
        retrofit.RestAdapter restAdapter63 = builder60.build();
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler65 = builder64.errorHandler;
        java.util.concurrent.Executor executor66 = null;
        builder64.callbackExecutor = executor66;
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider69 = builder68.clientProvider;
        java.util.concurrent.Executor executor70 = null;
        builder68.callbackExecutor = executor70;
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        retrofit.Server server75 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder76 = builder72.setServer(server75);
        java.lang.String str77 = server75.getUrl();
        retrofit.RestAdapter.Builder builder78 = builder68.setServer(server75);
        retrofit.RestAdapter.Builder builder79 = builder64.setServer(server75);
        restAdapter63.server = server75;
        java.util.concurrent.Executor executor81 = restAdapter63.httpExecutor;
        builder45.httpExecutor = executor81;
        builder17.callbackExecutor = executor81;
        retrofit.RestAdapter.Log log84 = builder17.log;
        retrofit.converter.Converter converter85 = builder17.converter;
        retrofit.Profiler profiler86 = builder17.profiler;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNull(profiler23);
        org.junit.Assert.assertNull(log24);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertNull(profiler43);
        org.junit.Assert.assertNull(errorHandler44);
        org.junit.Assert.assertNull(errorHandler46);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNull(errorHandler54);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(restAdapter63);
        org.junit.Assert.assertNull(errorHandler65);
        org.junit.Assert.assertNull(provider69);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "hi!" + "'", str77, "hi!");
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(executor81);
        org.junit.Assert.assertNotNull(log84);
        org.junit.Assert.assertNull(converter85);
        org.junit.Assert.assertNull(profiler86);
    }

    @Test
    public void test04798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04798");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.client.Client.Provider provider2 = restAdapter0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor4 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.client.Header[] headerArray16 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList17 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList17, headerArray16);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList17, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList17, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList17, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList17, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("default", "", (java.util.List<retrofit.client.Header>) headerList17, typedOutput27);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request29 = restAdapter0.logAndReplaceRequest(request28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(provider2);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNotNull(headerArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test04799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04799");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean6 = logLevel5.log();
        builder0.logLevel = logLevel5;
        retrofit.ErrorHandler errorHandler8 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder10 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler12 = builder11.errorHandler;
        retrofit.ErrorHandler errorHandler13 = builder11.errorHandler;
        retrofit.Profiler profiler14 = builder11.profiler;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor16 = restAdapter15.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter15.new RestHandler();
        retrofit.Server server20 = new retrofit.Server("hi!", "hi!");
        restAdapter15.server = server20;
        retrofit.RestAdapter.Builder builder22 = builder11.setServer(server20);
        retrofit.converter.Converter converter23 = null;
        builder22.converter = converter23;
        retrofit.Profiler profiler25 = null;
        builder22.profiler = profiler25;
        retrofit.RestAdapter restAdapter27 = builder22.build();
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler29 = builder28.errorHandler;
        retrofit.Server server32 = new retrofit.Server("", "");
        builder28.server = server32;
        retrofit.client.Client.Provider provider34 = builder28.clientProvider;
        java.util.concurrent.Executor executor35 = builder28.httpExecutor;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler37 = builder36.errorHandler;
        java.util.concurrent.Executor executor38 = builder36.callbackExecutor;
        retrofit.RestAdapter.Builder builder40 = builder36.setServer("hi!");
        builder40.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler43 = builder42.errorHandler;
        retrofit.ErrorHandler errorHandler44 = builder42.errorHandler;
        retrofit.RestAdapter.Log log45 = null;
        builder42.log = log45;
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean48 = logLevel47.log();
        builder42.logLevel = logLevel47;
        retrofit.ErrorHandler errorHandler50 = builder42.errorHandler;
        retrofit.RestAdapter.Builder builder52 = builder42.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor53 = null;
        builder52.requestInterceptor = requestInterceptor53;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler56 = builder55.errorHandler;
        retrofit.client.Client.Provider provider57 = null;
        builder55.clientProvider = provider57;
        retrofit.Server server61 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder62 = builder55.setServer(server61);
        retrofit.client.Client.Provider provider63 = null;
        java.util.concurrent.Executor executor64 = null;
        java.util.concurrent.Executor executor65 = null;
        retrofit.RequestInterceptor requestInterceptor66 = null;
        retrofit.converter.Converter converter67 = null;
        retrofit.Profiler profiler68 = null;
        retrofit.ErrorHandler errorHandler69 = null;
        retrofit.Server server70 = null;
        retrofit.client.Client.Provider provider71 = null;
        java.util.concurrent.Executor executor72 = null;
        java.util.concurrent.Executor executor73 = null;
        retrofit.RequestInterceptor requestInterceptor74 = null;
        retrofit.converter.Converter converter75 = null;
        retrofit.Profiler profiler76 = null;
        retrofit.ErrorHandler errorHandler77 = null;
        retrofit.RestAdapter.Log log78 = retrofit.RestAdapter.Log.NONE;
        log78.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel81 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter82 = new retrofit.RestAdapter(server70, provider71, executor72, executor73, requestInterceptor74, converter75, profiler76, errorHandler77, log78, logLevel81);
        retrofit.RestAdapter.LogLevel logLevel83 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter84 = new retrofit.RestAdapter(server61, provider63, executor64, executor65, requestInterceptor66, converter67, profiler68, errorHandler69, log78, logLevel83);
        log78.log("");
        builder52.log = log78;
        retrofit.RestAdapter.Log log88 = builder52.log;
        retrofit.RestAdapter.Builder builder89 = builder40.setLog(log88);
        retrofit.RequestInterceptor requestInterceptor90 = builder40.requestInterceptor;
        builder28.requestInterceptor = requestInterceptor90;
        builder22.requestInterceptor = requestInterceptor90;
        builder0.requestInterceptor = requestInterceptor90;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(profiler14);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(restAdapter27);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNull(provider34);
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(errorHandler43);
        org.junit.Assert.assertNull(errorHandler44);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(errorHandler50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(errorHandler56);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(log78);
        org.junit.Assert.assertTrue("'" + logLevel81 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel81.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(requestInterceptor90);
    }

    @Test
    public void test04800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04800");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        restAdapter5.log = log15;
        retrofit.RestAdapter.Builder builder17 = builder4.setLog(log15);
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server21 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder22 = builder18.setServer(server21);
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor24 = restAdapter23.callbackExecutor;
        java.util.concurrent.Executor executor25 = restAdapter23.callbackExecutor;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler27 = restAdapter26.errorHandler;
        retrofit.Server server30 = new retrofit.Server("", "");
        restAdapter26.server = server30;
        restAdapter23.server = server30;
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        restAdapter23.log = log33;
        retrofit.RestAdapter.Builder builder35 = builder22.setLog(log33);
        retrofit.converter.Converter converter36 = null;
        builder35.converter = converter36;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler39 = builder38.errorHandler;
        retrofit.ErrorHandler errorHandler40 = builder38.errorHandler;
        retrofit.Profiler profiler41 = builder38.profiler;
        retrofit.RestAdapter.Log log42 = builder38.log;
        retrofit.Server server43 = null;
        retrofit.client.Client.Provider provider44 = null;
        java.util.concurrent.Executor executor45 = null;
        java.util.concurrent.Executor executor46 = null;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        retrofit.converter.Converter converter48 = null;
        retrofit.Profiler profiler49 = null;
        retrofit.ErrorHandler errorHandler50 = null;
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        log51.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter(server43, provider44, executor45, executor46, requestInterceptor47, converter48, profiler49, errorHandler50, log51, logLevel54);
        builder38.log = log51;
        retrofit.RestAdapter.Builder builder57 = builder35.setLog(log51);
        retrofit.RestAdapter.LogLevel logLevel58 = builder35.logLevel;
        retrofit.RestAdapter.Builder builder59 = builder17.setLogLevel(logLevel58);
        retrofit.RestAdapter restAdapter60 = builder17.build();
        retrofit.client.Header[] headerArray71 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList72 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList72, headerArray71);
        retrofit.mime.TypedOutput typedOutput74 = null;
        retrofit.client.Request request75 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList72, typedOutput74);
        retrofit.mime.TypedOutput typedOutput76 = null;
        retrofit.client.Request request77 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList72, typedOutput76);
        java.lang.String str78 = request77.getMethod();
        java.util.List<retrofit.client.Header> headerList79 = request77.getHeaders();
        java.util.List<retrofit.client.Header> headerList80 = request77.getHeaders();
        retrofit.mime.TypedOutput typedOutput81 = null;
        retrofit.client.Request request82 = new retrofit.client.Request("", "", headerList80, typedOutput81);
        retrofit.mime.TypedOutput typedOutput83 = null;
        retrofit.client.Request request84 = new retrofit.client.Request("hi!", "default", headerList80, typedOutput83);
        retrofit.mime.TypedOutput typedOutput85 = null;
        retrofit.client.Request request86 = new retrofit.client.Request("default", "default", headerList80, typedOutput85);
        retrofit.client.Request request87 = restAdapter60.logAndReplaceRequest(request86);
        retrofit.RestAdapter.LogLevel logLevel88 = restAdapter60.getLogLevel();
        java.lang.Throwable throwable89 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter60.logException(throwable89, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNull(profiler41);
        org.junit.Assert.assertNull(log42);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(restAdapter60);
        org.junit.Assert.assertNotNull(headerArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "hi!" + "'", str78, "hi!");
        org.junit.Assert.assertNotNull(headerList79);
        org.junit.Assert.assertNotNull(headerList80);
        org.junit.Assert.assertNotNull(request87);
        org.junit.Assert.assertTrue("'" + logLevel88 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel88.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test04801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04801");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        java.util.concurrent.Executor executor4 = null;
        builder0.httpExecutor = executor4;
        retrofit.Profiler profiler6 = null;
        builder0.profiler = profiler6;
        retrofit.RestAdapter.Builder builder9 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel10 = builder0.logLevel;
        retrofit.Profiler profiler11 = null;
        builder0.profiler = profiler11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler14 = builder13.errorHandler;
        retrofit.ErrorHandler errorHandler15 = builder13.errorHandler;
        retrofit.Profiler profiler16 = builder13.profiler;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor18 = restAdapter17.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter17.new RestHandler();
        retrofit.Server server22 = new retrofit.Server("hi!", "hi!");
        restAdapter17.server = server22;
        retrofit.RestAdapter.Builder builder24 = builder13.setServer(server22);
        retrofit.converter.Converter converter25 = null;
        builder24.converter = converter25;
        retrofit.Server server29 = new retrofit.Server("hi!", "");
        builder24.server = server29;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor32 = restAdapter31.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler33 = restAdapter31.new RestHandler();
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor35 = restAdapter34.callbackExecutor;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor37 = restAdapter36.callbackExecutor;
        java.util.concurrent.Executor executor38 = restAdapter36.callbackExecutor;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler40 = restAdapter39.errorHandler;
        retrofit.Server server43 = new retrofit.Server("", "");
        restAdapter39.server = server43;
        restAdapter36.server = server43;
        restAdapter34.server = server43;
        retrofit.Profiler profiler47 = restAdapter34.profiler;
        retrofit.ErrorHandler errorHandler48 = null;
        restAdapter34.errorHandler = errorHandler48;
        retrofit.Profiler profiler50 = null;
        restAdapter34.profiler = profiler50;
        retrofit.RestAdapter.LogLevel logLevel52 = restAdapter34.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter34.logLevel = logLevel53;
        restAdapter31.logLevel = logLevel53;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.Server server59 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder60 = builder56.setServer(server59);
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor62 = restAdapter61.callbackExecutor;
        java.util.concurrent.Executor executor63 = restAdapter61.callbackExecutor;
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler65 = restAdapter64.errorHandler;
        retrofit.Server server68 = new retrofit.Server("", "");
        restAdapter64.server = server68;
        restAdapter61.server = server68;
        retrofit.RestAdapter.Log log71 = retrofit.RestAdapter.Log.NONE;
        restAdapter61.log = log71;
        retrofit.RestAdapter.Builder builder73 = builder60.setLog(log71);
        retrofit.RestAdapter.LogLevel logLevel74 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder75 = builder60.setLogLevel(logLevel74);
        retrofit.Profiler profiler76 = null;
        builder75.profiler = profiler76;
        retrofit.converter.Converter converter78 = null;
        builder75.converter = converter78;
        retrofit.ErrorHandler errorHandler80 = null;
        builder75.errorHandler = errorHandler80;
        retrofit.RestAdapter restAdapter82 = builder75.build();
        retrofit.ErrorHandler errorHandler83 = builder75.errorHandler;
        restAdapter31.errorHandler = errorHandler83;
        retrofit.RestAdapter.Builder builder85 = builder24.setErrorHandler(errorHandler83);
        retrofit.RestAdapter.Builder builder86 = builder0.setErrorHandler(errorHandler83);
        retrofit.RestAdapter.Builder builder87 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler88 = builder87.errorHandler;
        java.util.concurrent.Executor executor89 = builder87.callbackExecutor;
        retrofit.RestAdapter.Builder builder91 = builder87.setServer("hi!");
        retrofit.Server server94 = new retrofit.Server("default", "hi!");
        java.lang.String str95 = server94.getUrl();
        retrofit.RestAdapter.Builder builder96 = builder91.setServer(server94);
        java.lang.String str97 = server94.getName();
        retrofit.RestAdapter.Builder builder98 = builder86.setServer(server94);
        retrofit.client.Client.Provider provider99 = builder98.clientProvider;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNull(profiler16);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNull(profiler47);
        org.junit.Assert.assertNull(logLevel52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(executor62);
        org.junit.Assert.assertNull(executor63);
        org.junit.Assert.assertNull(errorHandler65);
        org.junit.Assert.assertNotNull(log71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(restAdapter82);
        org.junit.Assert.assertNotNull(errorHandler83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNull(errorHandler88);
        org.junit.Assert.assertNull(executor89);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "default" + "'", str95, "default");
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "hi!" + "'", str97, "hi!");
        org.junit.Assert.assertNotNull(builder98);
        org.junit.Assert.assertNull(provider99);
    }

    @Test
    public void test04802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04802");
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput13);
        java.lang.String str15 = request14.getMethod();
        java.util.List<retrofit.client.Header> headerList16 = request14.getHeaders();
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("hi!", "", headerList16, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("", "default", headerList16, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = request20.getBody();
        retrofit.mime.TypedOutput typedOutput22 = request20.getBody();
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(headerList16);
        org.junit.Assert.assertNull(typedOutput21);
        org.junit.Assert.assertNull(typedOutput22);
    }

    @Test
    public void test04803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04803");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        builder0.requestInterceptor = requestInterceptor2;
        java.util.concurrent.Executor executor4 = builder0.httpExecutor;
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        log5.log("default");
        builder0.log = log5;
        retrofit.converter.Converter converter9 = null;
        builder0.converter = converter9;
        retrofit.Profiler profiler11 = builder0.profiler;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        log12.log("");
        log12.log("");
        retrofit.RestAdapter.Builder builder17 = builder0.setLog(log12);
        builder17.ensureSaneDefaults();
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNull(profiler11);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test04804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04804");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.Profiler profiler3 = builder0.profiler;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler5 = builder4.errorHandler;
        java.util.concurrent.Executor executor6 = null;
        builder4.callbackExecutor = executor6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider9 = builder8.clientProvider;
        java.util.concurrent.Executor executor10 = null;
        builder8.callbackExecutor = executor10;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.Server server15 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder16 = builder12.setServer(server15);
        java.lang.String str17 = server15.getUrl();
        retrofit.RestAdapter.Builder builder18 = builder8.setServer(server15);
        retrofit.RestAdapter.Builder builder19 = builder4.setServer(server15);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider21 = builder20.clientProvider;
        java.util.concurrent.Executor executor22 = null;
        builder20.callbackExecutor = executor22;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.Server server27 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder28 = builder24.setServer(server27);
        java.lang.String str29 = server27.getUrl();
        retrofit.RestAdapter.Builder builder30 = builder20.setServer(server27);
        java.lang.String str31 = server27.getUrl();
        builder19.server = server27;
        retrofit.RestAdapter.Builder builder33 = builder0.setServer(server27);
        retrofit.Server server34 = null;
        retrofit.client.Client.Provider provider35 = null;
        java.util.concurrent.Executor executor36 = null;
        java.util.concurrent.Executor executor37 = null;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        retrofit.converter.Converter converter39 = null;
        retrofit.Profiler profiler40 = null;
        retrofit.ErrorHandler errorHandler41 = null;
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        log42.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter(server34, provider35, executor36, executor37, requestInterceptor38, converter39, profiler40, errorHandler41, log42, logLevel45);
        retrofit.RequestInterceptor requestInterceptor47 = null;
        restAdapter46.requestInterceptor = requestInterceptor47;
        retrofit.RestAdapter.LogLevel logLevel49 = restAdapter46.logLevel;
        builder33.logLevel = logLevel49;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler52 = builder51.errorHandler;
        retrofit.ErrorHandler errorHandler53 = builder51.errorHandler;
        java.util.concurrent.Executor executor54 = builder51.callbackExecutor;
        retrofit.Profiler profiler55 = builder51.profiler;
        builder51.ensureSaneDefaults();
        builder51.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider59 = builder58.clientProvider;
        java.util.concurrent.Executor executor60 = null;
        builder58.callbackExecutor = executor60;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.Server server65 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder66 = builder62.setServer(server65);
        java.lang.String str67 = server65.getUrl();
        retrofit.RestAdapter.Builder builder68 = builder58.setServer(server65);
        builder58.ensureSaneDefaults();
        retrofit.Server server70 = null;
        retrofit.client.Client.Provider provider71 = null;
        java.util.concurrent.Executor executor72 = null;
        java.util.concurrent.Executor executor73 = null;
        retrofit.RequestInterceptor requestInterceptor74 = null;
        retrofit.converter.Converter converter75 = null;
        retrofit.Profiler profiler76 = null;
        retrofit.ErrorHandler errorHandler77 = null;
        retrofit.RestAdapter.Log log78 = retrofit.RestAdapter.Log.NONE;
        log78.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel81 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter82 = new retrofit.RestAdapter(server70, provider71, executor72, executor73, requestInterceptor74, converter75, profiler76, errorHandler77, log78, logLevel81);
        retrofit.RestAdapter.RestHandler restHandler83 = restAdapter82.new RestHandler();
        retrofit.RestAdapter.Log log84 = retrofit.RestAdapter.Log.NONE;
        restAdapter82.log = log84;
        retrofit.RestAdapter.Builder builder86 = builder58.setLog(log84);
        retrofit.RestAdapter.Builder builder88 = builder58.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor89 = builder58.requestInterceptor;
        retrofit.RestAdapter.Builder builder90 = builder51.setRequestInterceptor(requestInterceptor89);
        retrofit.Server server93 = new retrofit.Server("default", "default");
        java.lang.String str94 = server93.getName();
        retrofit.RestAdapter.Builder builder95 = builder90.setServer(server93);
        retrofit.RequestInterceptor requestInterceptor96 = builder95.requestInterceptor;
        retrofit.converter.Converter converter97 = builder95.converter;
        builder33.converter = converter97;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(errorHandler5);
        org.junit.Assert.assertNull(provider9);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(provider21);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler52);
        org.junit.Assert.assertNull(errorHandler53);
        org.junit.Assert.assertNull(executor54);
        org.junit.Assert.assertNull(profiler55);
        org.junit.Assert.assertNull(provider59);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hi!" + "'", str67, "hi!");
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(log78);
        org.junit.Assert.assertTrue("'" + logLevel81 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel81.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(requestInterceptor89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "default" + "'", str94, "default");
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(requestInterceptor96);
        org.junit.Assert.assertNotNull(converter97);
    }

    @Test
    public void test04805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04805");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server4 = new retrofit.Server("", "");
        builder0.server = server4;
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        builder0.log = log6;
        retrofit.RestAdapter.Builder builder9 = builder0.setServer("default");
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler11 = builder10.errorHandler;
        retrofit.client.Client.Provider provider12 = null;
        builder10.clientProvider = provider12;
        retrofit.Server server16 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder17 = builder10.setServer(server16);
        retrofit.Server server20 = new retrofit.Server("hi!", "");
        builder17.server = server20;
        retrofit.RestAdapter.Builder builder22 = builder0.setServer(server20);
        retrofit.client.Client client23 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder24 = builder0.setClient(client23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test04806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04806");
        retrofit.client.Header[] headerArray14 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList15 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList15, headerArray14);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList15, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList15, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("", "default", (java.util.List<retrofit.client.Header>) headerList15, typedOutput21);
        java.util.List<retrofit.client.Header> headerList23 = request22.getHeaders();
        retrofit.mime.TypedOutput typedOutput24 = null;
        retrofit.client.Request request25 = new retrofit.client.Request("hi!", "default", headerList23, typedOutput24);
        retrofit.mime.TypedOutput typedOutput26 = null;
        retrofit.client.Request request27 = new retrofit.client.Request("", "", headerList23, typedOutput26);
        java.util.List<retrofit.client.Header> headerList28 = request27.getHeaders();
        java.util.List<retrofit.client.Header> headerList29 = request27.getHeaders();
        retrofit.mime.TypedOutput typedOutput30 = null;
        retrofit.client.Request request31 = new retrofit.client.Request("default", "", headerList29, typedOutput30);
        retrofit.mime.TypedOutput typedOutput32 = null;
        retrofit.client.Request request33 = new retrofit.client.Request("default", "default", headerList29, typedOutput32);
        java.lang.String str34 = request33.getMethod();
        org.junit.Assert.assertNotNull(headerArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(headerList23);
        org.junit.Assert.assertNotNull(headerList28);
        org.junit.Assert.assertNotNull(headerList29);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "default" + "'", str34, "default");
    }

    @Test
    public void test04807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04807");
        retrofit.client.Header[] headerArray22 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList23 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList23, headerArray22);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList23, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList23, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList23, typedOutput29);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList23, typedOutput31);
        retrofit.mime.TypedOutput typedOutput33 = null;
        retrofit.client.Request request34 = new retrofit.client.Request("", "default", (java.util.List<retrofit.client.Header>) headerList23, typedOutput33);
        retrofit.mime.TypedOutput typedOutput35 = null;
        retrofit.client.Request request36 = new retrofit.client.Request("default", "", (java.util.List<retrofit.client.Header>) headerList23, typedOutput35);
        retrofit.mime.TypedOutput typedOutput37 = null;
        retrofit.client.Request request38 = new retrofit.client.Request("", "default", (java.util.List<retrofit.client.Header>) headerList23, typedOutput37);
        retrofit.mime.TypedOutput typedOutput39 = null;
        retrofit.client.Request request40 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList23, typedOutput39);
        retrofit.mime.TypedOutput typedOutput41 = null;
        retrofit.client.Request request42 = new retrofit.client.Request("hi!", "default", (java.util.List<retrofit.client.Header>) headerList23, typedOutput41);
        retrofit.mime.TypedOutput typedOutput43 = null;
        retrofit.client.Request request44 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList23, typedOutput43);
        retrofit.mime.TypedOutput typedOutput45 = null;
        retrofit.client.Request request46 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList23, typedOutput45);
        java.util.List<retrofit.client.Header> headerList47 = request46.getHeaders();
        org.junit.Assert.assertNotNull(headerArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(headerList47);
    }

    @Test
    public void test04808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04808");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.ErrorHandler errorHandler3 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler7 = builder6.errorHandler;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.Server server11 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder12 = builder8.setServer(server11);
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor14 = restAdapter13.callbackExecutor;
        java.util.concurrent.Executor executor15 = restAdapter13.callbackExecutor;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler17 = restAdapter16.errorHandler;
        retrofit.Server server20 = new retrofit.Server("", "");
        restAdapter16.server = server20;
        restAdapter13.server = server20;
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        restAdapter13.log = log23;
        retrofit.RestAdapter.Builder builder25 = builder12.setLog(log23);
        retrofit.RestAdapter.Builder builder26 = builder6.setLog(log23);
        builder0.log = log23;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler29 = builder28.errorHandler;
        retrofit.client.Client.Provider provider30 = null;
        builder28.clientProvider = provider30;
        retrofit.Server server34 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder35 = builder28.setServer(server34);
        retrofit.converter.Converter converter36 = null;
        builder35.converter = converter36;
        retrofit.RestAdapter restAdapter38 = builder35.build();
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler40 = builder39.errorHandler;
        java.util.concurrent.Executor executor41 = null;
        builder39.callbackExecutor = executor41;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider44 = builder43.clientProvider;
        java.util.concurrent.Executor executor45 = null;
        builder43.callbackExecutor = executor45;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.Server server50 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder51 = builder47.setServer(server50);
        java.lang.String str52 = server50.getUrl();
        retrofit.RestAdapter.Builder builder53 = builder43.setServer(server50);
        retrofit.RestAdapter.Builder builder54 = builder39.setServer(server50);
        restAdapter38.server = server50;
        retrofit.client.Client.Provider provider56 = restAdapter38.clientProvider;
        retrofit.RestAdapter.Builder builder57 = builder0.setClient(provider56);
        retrofit.RestAdapter restAdapter58 = builder0.build();
        retrofit.Server server61 = new retrofit.Server("hi!", "default");
        java.lang.String str62 = server61.getUrl();
        retrofit.RestAdapter.Builder builder63 = builder0.setServer(server61);
        retrofit.converter.Converter converter64 = builder63.converter;
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(restAdapter38);
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNull(provider44);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(provider56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(restAdapter58);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(converter64);
    }

    @Test
    public void test04809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04809");
        retrofit.client.Header[] headerArray10 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList11 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList11, headerArray10);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList11, typedOutput13);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList11, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList11, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList11, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList11, typedOutput21);
        java.lang.String str23 = request22.getUrl();
        java.lang.String str24 = request22.getUrl();
        org.junit.Assert.assertNotNull(headerArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
    }

    @Test
    public void test04810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04810");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        builder0.requestInterceptor = requestInterceptor5;
        retrofit.RestAdapter.LogLevel logLevel7 = builder0.logLevel;
        retrofit.RestAdapter.Log log8 = builder0.log;
        retrofit.RequestInterceptor requestInterceptor9 = builder0.requestInterceptor;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor11 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean13 = logLevel12.log();
        restAdapter10.logLevel = logLevel12;
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter10.logLevel;
        retrofit.Server server17 = null;
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Log log25 = retrofit.RestAdapter.Log.NONE;
        log25.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server17, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log25, logLevel28);
        retrofit.RestAdapter.RestHandler restHandler30 = restAdapter29.new RestHandler();
        java.util.concurrent.Executor executor31 = null;
        restAdapter29.callbackExecutor = executor31;
        retrofit.client.Header[] headerArray35 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList36 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList36, headerArray35);
        retrofit.mime.TypedOutput typedOutput38 = null;
        retrofit.client.Request request39 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList36, typedOutput38);
        retrofit.client.Request request40 = restAdapter29.logAndReplaceRequest(request39);
        retrofit.client.Client.Provider provider41 = restAdapter29.clientProvider;
        retrofit.RestAdapter.RestHandler restHandler42 = restAdapter29.new RestHandler();
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler44 = builder43.errorHandler;
        java.util.concurrent.Executor executor45 = builder43.callbackExecutor;
        retrofit.RestAdapter.Builder builder47 = builder43.setServer("hi!");
        retrofit.Server server50 = new retrofit.Server("default", "hi!");
        java.lang.String str51 = server50.getUrl();
        retrofit.RestAdapter.Builder builder52 = builder47.setServer(server50);
        retrofit.RestAdapter.LogLevel logLevel53 = builder52.logLevel;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.Server server57 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder58 = builder54.setServer(server57);
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor60 = restAdapter59.callbackExecutor;
        java.util.concurrent.Executor executor61 = restAdapter59.callbackExecutor;
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler63 = restAdapter62.errorHandler;
        retrofit.Server server66 = new retrofit.Server("", "");
        restAdapter62.server = server66;
        restAdapter59.server = server66;
        retrofit.RestAdapter.Log log69 = retrofit.RestAdapter.Log.NONE;
        restAdapter59.log = log69;
        retrofit.RestAdapter.Builder builder71 = builder58.setLog(log69);
        retrofit.RestAdapter.LogLevel logLevel72 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder73 = builder58.setLogLevel(logLevel72);
        retrofit.Profiler profiler74 = null;
        builder73.profiler = profiler74;
        retrofit.converter.Converter converter76 = null;
        builder73.converter = converter76;
        retrofit.ErrorHandler errorHandler78 = null;
        builder73.errorHandler = errorHandler78;
        retrofit.RestAdapter restAdapter80 = builder73.build();
        retrofit.ErrorHandler errorHandler81 = builder73.errorHandler;
        builder52.errorHandler = errorHandler81;
        restAdapter29.errorHandler = errorHandler81;
        restAdapter10.errorHandler = errorHandler81;
        retrofit.RestAdapter.Builder builder85 = builder0.setErrorHandler(errorHandler81);
        retrofit.client.Client client86 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder87 = builder0.setClient(client86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertTrue("'" + logLevel7 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel7.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(log8);
        org.junit.Assert.assertNull(requestInterceptor9);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(log25);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(request40);
        org.junit.Assert.assertNull(provider41);
        org.junit.Assert.assertNull(errorHandler44);
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "default" + "'", str51, "default");
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(executor60);
        org.junit.Assert.assertNull(executor61);
        org.junit.Assert.assertNull(errorHandler63);
        org.junit.Assert.assertNotNull(log69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(restAdapter80);
        org.junit.Assert.assertNotNull(errorHandler81);
        org.junit.Assert.assertNotNull(builder85);
    }

    @Test
    public void test04811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04811");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server6 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder7 = builder0.setServer(server6);
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.Server server11 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder12 = builder8.setServer(server11);
        retrofit.RestAdapter.LogLevel logLevel13 = builder12.logLevel;
        java.util.concurrent.Executor executor14 = builder12.httpExecutor;
        retrofit.RestAdapter restAdapter15 = builder12.build();
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor17 = restAdapter16.callbackExecutor;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor19 = restAdapter18.callbackExecutor;
        java.util.concurrent.Executor executor20 = restAdapter18.callbackExecutor;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler22 = restAdapter21.errorHandler;
        retrofit.Server server25 = new retrofit.Server("", "");
        restAdapter21.server = server25;
        restAdapter18.server = server25;
        restAdapter16.server = server25;
        retrofit.Profiler profiler29 = restAdapter16.profiler;
        retrofit.ErrorHandler errorHandler30 = null;
        restAdapter16.errorHandler = errorHandler30;
        retrofit.Profiler profiler32 = null;
        restAdapter16.profiler = profiler32;
        retrofit.RestAdapter.LogLevel logLevel34 = restAdapter16.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter16.logLevel = logLevel35;
        retrofit.RestAdapter.RestHandler restHandler37 = restAdapter16.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor38 = null;
        restAdapter16.requestInterceptor = requestInterceptor38;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler41 = builder40.errorHandler;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        builder40.requestInterceptor = requestInterceptor42;
        retrofit.Server server44 = null;
        retrofit.client.Client.Provider provider45 = null;
        java.util.concurrent.Executor executor46 = null;
        java.util.concurrent.Executor executor47 = null;
        retrofit.RequestInterceptor requestInterceptor48 = null;
        retrofit.converter.Converter converter49 = null;
        retrofit.Profiler profiler50 = null;
        retrofit.ErrorHandler errorHandler51 = null;
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        log52.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter(server44, provider45, executor46, executor47, requestInterceptor48, converter49, profiler50, errorHandler51, log52, logLevel55);
        builder40.log = log52;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler59 = builder58.errorHandler;
        retrofit.client.Client.Provider provider60 = null;
        builder58.clientProvider = provider60;
        retrofit.Server server64 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder65 = builder58.setServer(server64);
        retrofit.converter.Converter converter66 = null;
        builder65.converter = converter66;
        retrofit.RestAdapter restAdapter68 = builder65.build();
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler70 = builder69.errorHandler;
        java.util.concurrent.Executor executor71 = null;
        builder69.callbackExecutor = executor71;
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider74 = builder73.clientProvider;
        java.util.concurrent.Executor executor75 = null;
        builder73.callbackExecutor = executor75;
        retrofit.RestAdapter.Builder builder77 = new retrofit.RestAdapter.Builder();
        retrofit.Server server80 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder81 = builder77.setServer(server80);
        java.lang.String str82 = server80.getUrl();
        retrofit.RestAdapter.Builder builder83 = builder73.setServer(server80);
        retrofit.RestAdapter.Builder builder84 = builder69.setServer(server80);
        restAdapter68.server = server80;
        retrofit.client.Client.Provider provider86 = restAdapter68.clientProvider;
        builder40.clientProvider = provider86;
        restAdapter16.clientProvider = provider86;
        retrofit.RestAdapter.Builder builder89 = builder12.setClient(provider86);
        retrofit.ErrorHandler errorHandler90 = builder89.errorHandler;
        retrofit.RestAdapter.Builder builder91 = builder7.setErrorHandler(errorHandler90);
        java.util.concurrent.Executor executor92 = builder7.httpExecutor;
        retrofit.client.Client.Provider provider93 = builder7.clientProvider;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNotNull(restAdapter15);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNull(profiler29);
        org.junit.Assert.assertNull(logLevel34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler41);
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler59);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(restAdapter68);
        org.junit.Assert.assertNull(errorHandler70);
        org.junit.Assert.assertNull(provider74);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "hi!" + "'", str82, "hi!");
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(provider86);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(errorHandler90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNull(executor92);
        org.junit.Assert.assertNull(provider93);
    }

    @Test
    public void test04812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04812");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        restAdapter12.log = log14;
        retrofit.converter.Converter converter16 = restAdapter12.converter;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler18 = builder17.errorHandler;
        java.util.concurrent.Executor executor19 = builder17.callbackExecutor;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.Server server23 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder24 = builder20.setServer(server23);
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor26 = restAdapter25.callbackExecutor;
        java.util.concurrent.Executor executor27 = restAdapter25.callbackExecutor;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler29 = restAdapter28.errorHandler;
        retrofit.Server server32 = new retrofit.Server("", "");
        restAdapter28.server = server32;
        restAdapter25.server = server32;
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        restAdapter25.log = log35;
        retrofit.RestAdapter.Builder builder37 = builder24.setLog(log35);
        retrofit.converter.Converter converter38 = null;
        builder37.converter = converter38;
        retrofit.RestAdapter.Builder builder41 = builder37.setServer("hi!");
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor43 = restAdapter42.callbackExecutor;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor45 = restAdapter44.callbackExecutor;
        java.util.concurrent.Executor executor46 = restAdapter44.callbackExecutor;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler48 = restAdapter47.errorHandler;
        retrofit.Server server51 = new retrofit.Server("", "");
        restAdapter47.server = server51;
        restAdapter44.server = server51;
        restAdapter42.server = server51;
        retrofit.Profiler profiler55 = restAdapter42.profiler;
        retrofit.ErrorHandler errorHandler56 = null;
        restAdapter42.errorHandler = errorHandler56;
        retrofit.Profiler profiler58 = null;
        restAdapter42.profiler = profiler58;
        retrofit.RequestInterceptor requestInterceptor60 = null;
        restAdapter42.requestInterceptor = requestInterceptor60;
        retrofit.RestAdapter.LogLevel logLevel62 = restAdapter42.getLogLevel();
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        retrofit.Server server66 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder67 = builder63.setServer(server66);
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor69 = restAdapter68.callbackExecutor;
        java.util.concurrent.Executor executor70 = restAdapter68.callbackExecutor;
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler72 = restAdapter71.errorHandler;
        retrofit.Server server75 = new retrofit.Server("", "");
        restAdapter71.server = server75;
        restAdapter68.server = server75;
        retrofit.RestAdapter.Log log78 = retrofit.RestAdapter.Log.NONE;
        restAdapter68.log = log78;
        retrofit.RestAdapter.Builder builder80 = builder67.setLog(log78);
        retrofit.RestAdapter.LogLevel logLevel81 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder82 = builder67.setLogLevel(logLevel81);
        retrofit.Profiler profiler83 = null;
        builder82.profiler = profiler83;
        retrofit.converter.Converter converter85 = null;
        builder82.converter = converter85;
        retrofit.ErrorHandler errorHandler87 = null;
        builder82.errorHandler = errorHandler87;
        retrofit.RestAdapter restAdapter89 = builder82.build();
        retrofit.ErrorHandler errorHandler90 = builder82.errorHandler;
        restAdapter42.errorHandler = errorHandler90;
        retrofit.RestAdapter.Builder builder92 = builder37.setErrorHandler(errorHandler90);
        retrofit.RestAdapter.Builder builder93 = builder17.setErrorHandler(errorHandler90);
        restAdapter12.errorHandler = errorHandler90;
        java.lang.Throwable throwable95 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter12.logException(throwable95, "default");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(errorHandler18);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(executor43);
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertNull(executor46);
        org.junit.Assert.assertNull(errorHandler48);
        org.junit.Assert.assertNull(profiler55);
        org.junit.Assert.assertNull(logLevel62);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNull(executor69);
        org.junit.Assert.assertNull(executor70);
        org.junit.Assert.assertNull(errorHandler72);
        org.junit.Assert.assertNotNull(log78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertTrue("'" + logLevel81 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel81.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(restAdapter89);
        org.junit.Assert.assertNotNull(errorHandler90);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder93);
    }

    @Test
    public void test04813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04813");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        java.util.concurrent.Executor executor16 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.Server server20 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder21 = builder17.setServer(server20);
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor23 = restAdapter22.callbackExecutor;
        java.util.concurrent.Executor executor24 = restAdapter22.callbackExecutor;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler26 = restAdapter25.errorHandler;
        retrofit.Server server29 = new retrofit.Server("", "");
        restAdapter25.server = server29;
        restAdapter22.server = server29;
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        restAdapter22.log = log32;
        retrofit.RestAdapter.Builder builder34 = builder21.setLog(log32);
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder36 = builder21.setLogLevel(logLevel35);
        retrofit.RestAdapter.Log log37 = builder21.log;
        retrofit.RestAdapter restAdapter38 = builder21.build();
        retrofit.Server server39 = null;
        retrofit.client.Client.Provider provider40 = null;
        java.util.concurrent.Executor executor41 = null;
        java.util.concurrent.Executor executor42 = null;
        retrofit.RequestInterceptor requestInterceptor43 = null;
        retrofit.converter.Converter converter44 = null;
        retrofit.Profiler profiler45 = null;
        retrofit.ErrorHandler errorHandler46 = null;
        retrofit.RestAdapter.Log log47 = retrofit.RestAdapter.Log.NONE;
        log47.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel50 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter(server39, provider40, executor41, executor42, requestInterceptor43, converter44, profiler45, errorHandler46, log47, logLevel50);
        retrofit.RestAdapter.RestHandler restHandler52 = restAdapter51.new RestHandler();
        retrofit.client.Client.Provider provider53 = restAdapter51.clientProvider;
        retrofit.RestAdapter.Log log54 = restAdapter51.log;
        retrofit.RestAdapter.RestHandler restHandler55 = restAdapter51.new RestHandler();
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler57 = builder56.errorHandler;
        java.util.concurrent.Executor executor58 = builder56.callbackExecutor;
        retrofit.RestAdapter.Builder builder60 = builder56.setServer("hi!");
        builder60.ensureSaneDefaults();
        java.util.concurrent.Executor executor62 = builder60.callbackExecutor;
        restAdapter51.callbackExecutor = executor62;
        builder21.callbackExecutor = executor62;
        restAdapter0.callbackExecutor = executor62;
        retrofit.Profiler profiler66 = null;
        restAdapter0.profiler = profiler66;
        retrofit.RestAdapter.Log log68 = restAdapter0.log;
        retrofit.Profiler profiler69 = restAdapter0.profiler;
        retrofit.client.Client.Provider provider70 = restAdapter0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel71 = restAdapter0.logLevel;
        retrofit.RestAdapter.RestHandler restHandler72 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(errorHandler26);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNotNull(restAdapter38);
        org.junit.Assert.assertNotNull(log47);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(provider53);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertNull(errorHandler57);
        org.junit.Assert.assertNull(executor58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(executor62);
        org.junit.Assert.assertNull(log68);
        org.junit.Assert.assertNull(profiler69);
        org.junit.Assert.assertNull(provider70);
        org.junit.Assert.assertNull(logLevel71);
    }

    @Test
    public void test04814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04814");
        retrofit.client.Header[] headerArray10 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList11 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList11, headerArray10);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList11, typedOutput13);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList11, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList11, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList11, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList11, typedOutput21);
        java.util.List<retrofit.client.Header> headerList23 = request22.getHeaders();
        org.junit.Assert.assertNotNull(headerArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(headerList23);
    }

    @Test
    public void test04815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04815");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider5 = builder4.clientProvider;
        java.util.concurrent.Executor executor6 = null;
        builder4.callbackExecutor = executor6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.Server server11 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder12 = builder8.setServer(server11);
        java.lang.String str13 = server11.getUrl();
        retrofit.RestAdapter.Builder builder14 = builder4.setServer(server11);
        retrofit.RestAdapter.Builder builder15 = builder0.setServer(server11);
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider17 = builder16.clientProvider;
        java.util.concurrent.Executor executor18 = null;
        builder16.callbackExecutor = executor18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.Server server23 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder24 = builder20.setServer(server23);
        java.lang.String str25 = server23.getUrl();
        retrofit.RestAdapter.Builder builder26 = builder16.setServer(server23);
        builder16.ensureSaneDefaults();
        retrofit.Server server28 = null;
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        log36.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server28, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log36, logLevel39);
        retrofit.RestAdapter.RestHandler restHandler41 = restAdapter40.new RestHandler();
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        restAdapter40.log = log42;
        retrofit.RestAdapter.Builder builder44 = builder16.setLog(log42);
        retrofit.RestAdapter.LogLevel logLevel45 = builder16.logLevel;
        retrofit.RestAdapter.Builder builder46 = builder15.setLogLevel(logLevel45);
        boolean boolean47 = logLevel45.log();
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(provider17);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test04816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04816");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = builder0.clientProvider;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler5 = builder4.errorHandler;
        java.util.concurrent.Executor executor6 = null;
        builder4.callbackExecutor = executor6;
        java.util.concurrent.Executor executor8 = null;
        builder4.httpExecutor = executor8;
        retrofit.Profiler profiler10 = null;
        builder4.profiler = profiler10;
        retrofit.RestAdapter.Builder builder13 = builder4.setServer("hi!");
        retrofit.Profiler profiler14 = builder4.profiler;
        java.util.concurrent.Executor executor15 = builder4.httpExecutor;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler17 = builder16.errorHandler;
        java.util.concurrent.Executor executor18 = builder16.callbackExecutor;
        retrofit.RestAdapter.Builder builder20 = builder16.setServer("hi!");
        retrofit.Server server23 = new retrofit.Server("default", "hi!");
        java.lang.String str24 = server23.getUrl();
        retrofit.RestAdapter.Builder builder25 = builder20.setServer(server23);
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler27 = builder26.errorHandler;
        retrofit.ErrorHandler errorHandler28 = builder26.errorHandler;
        java.util.concurrent.Executor executor29 = builder26.callbackExecutor;
        java.util.concurrent.Executor executor30 = null;
        builder26.callbackExecutor = executor30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler33 = builder32.errorHandler;
        retrofit.Server server36 = new retrofit.Server("", "");
        builder32.server = server36;
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        builder32.log = log38;
        retrofit.RestAdapter.LogLevel logLevel40 = builder32.logLevel;
        retrofit.RestAdapter.Builder builder41 = builder26.setLogLevel(logLevel40);
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler43 = builder42.errorHandler;
        retrofit.client.Client.Provider provider44 = null;
        builder42.clientProvider = provider44;
        retrofit.Server server48 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder49 = builder42.setServer(server48);
        retrofit.converter.Converter converter50 = null;
        builder49.converter = converter50;
        retrofit.RestAdapter restAdapter52 = builder49.build();
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler54 = builder53.errorHandler;
        java.util.concurrent.Executor executor55 = null;
        builder53.callbackExecutor = executor55;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider58 = builder57.clientProvider;
        java.util.concurrent.Executor executor59 = null;
        builder57.callbackExecutor = executor59;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.Server server64 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder65 = builder61.setServer(server64);
        java.lang.String str66 = server64.getUrl();
        retrofit.RestAdapter.Builder builder67 = builder57.setServer(server64);
        retrofit.RestAdapter.Builder builder68 = builder53.setServer(server64);
        restAdapter52.server = server64;
        retrofit.client.Client.Provider provider70 = restAdapter52.clientProvider;
        retrofit.RestAdapter.Builder builder71 = builder41.setClient(provider70);
        retrofit.RestAdapter.Builder builder72 = builder25.setClient(provider70);
        retrofit.RestAdapter.Builder builder73 = builder4.setClient(provider70);
        retrofit.RestAdapter.Builder builder74 = builder0.setClient(provider70);
        java.util.concurrent.Executor executor75 = builder74.httpExecutor;
        retrofit.Profiler profiler76 = null;
        builder74.profiler = profiler76;
        org.junit.Assert.assertNull(provider1);
        org.junit.Assert.assertNull(errorHandler5);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(profiler14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "default" + "'", str24, "default");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(errorHandler33);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(errorHandler43);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(restAdapter52);
        org.junit.Assert.assertNull(errorHandler54);
        org.junit.Assert.assertNull(provider58);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hi!" + "'", str66, "hi!");
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(provider70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNull(executor75);
    }

    @Test
    public void test04817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04817");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server6 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder7 = builder0.setServer(server6);
        retrofit.Server server10 = new retrofit.Server("", "");
        builder7.server = server10;
        retrofit.Profiler profiler12 = builder7.profiler;
        retrofit.client.Client.Provider provider13 = builder7.clientProvider;
        java.util.concurrent.Executor executor14 = builder7.httpExecutor;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler16 = builder15.errorHandler;
        java.util.concurrent.Executor executor17 = null;
        builder15.callbackExecutor = executor17;
        retrofit.converter.Converter converter19 = builder15.converter;
        retrofit.RestAdapter.Builder builder21 = builder15.setServer("hi!");
        builder15.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor24 = restAdapter23.callbackExecutor;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor26 = restAdapter25.callbackExecutor;
        java.util.concurrent.Executor executor27 = restAdapter25.callbackExecutor;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler29 = restAdapter28.errorHandler;
        retrofit.Server server32 = new retrofit.Server("", "");
        restAdapter28.server = server32;
        restAdapter25.server = server32;
        restAdapter23.server = server32;
        java.lang.String str36 = server32.getName();
        builder15.server = server32;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler39 = builder38.errorHandler;
        java.util.concurrent.Executor executor40 = null;
        builder38.callbackExecutor = executor40;
        java.util.concurrent.Executor executor42 = null;
        builder38.httpExecutor = executor42;
        retrofit.Profiler profiler44 = null;
        builder38.profiler = profiler44;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler47 = builder46.errorHandler;
        retrofit.Server server50 = new retrofit.Server("", "");
        builder46.server = server50;
        retrofit.client.Client.Provider provider52 = null;
        java.util.concurrent.Executor executor53 = null;
        java.util.concurrent.Executor executor54 = null;
        retrofit.RequestInterceptor requestInterceptor55 = null;
        retrofit.converter.Converter converter56 = null;
        retrofit.Profiler profiler57 = null;
        retrofit.ErrorHandler errorHandler58 = null;
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler60 = builder59.errorHandler;
        retrofit.Server server63 = new retrofit.Server("", "");
        builder59.server = server63;
        retrofit.RestAdapter.Log log65 = retrofit.RestAdapter.Log.NONE;
        builder59.log = log65;
        retrofit.Server server67 = null;
        retrofit.client.Client.Provider provider68 = null;
        java.util.concurrent.Executor executor69 = null;
        java.util.concurrent.Executor executor70 = null;
        retrofit.RequestInterceptor requestInterceptor71 = null;
        retrofit.converter.Converter converter72 = null;
        retrofit.Profiler profiler73 = null;
        retrofit.ErrorHandler errorHandler74 = null;
        retrofit.RestAdapter.Log log75 = retrofit.RestAdapter.Log.NONE;
        log75.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel78 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter79 = new retrofit.RestAdapter(server67, provider68, executor69, executor70, requestInterceptor71, converter72, profiler73, errorHandler74, log75, logLevel78);
        retrofit.RestAdapter restAdapter80 = new retrofit.RestAdapter(server50, provider52, executor53, executor54, requestInterceptor55, converter56, profiler57, errorHandler58, log65, logLevel78);
        retrofit.RestAdapter.Builder builder81 = builder38.setLogLevel(logLevel78);
        retrofit.RestAdapter.Builder builder82 = new retrofit.RestAdapter.Builder();
        retrofit.Server server85 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder86 = builder82.setServer(server85);
        java.lang.String str87 = server85.getUrl();
        retrofit.RestAdapter.Builder builder88 = builder81.setServer(server85);
        java.lang.String str89 = server85.getName();
        retrofit.RestAdapter.Builder builder90 = builder15.setServer(server85);
        retrofit.client.Client.Provider provider91 = builder90.clientProvider;
        retrofit.RestAdapter.Builder builder92 = builder7.setClient(provider91);
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(profiler12);
        org.junit.Assert.assertNull(provider13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNull(errorHandler47);
        org.junit.Assert.assertNull(errorHandler60);
        org.junit.Assert.assertNotNull(log65);
        org.junit.Assert.assertNotNull(log75);
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "hi!" + "'", str87, "hi!");
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "hi!" + "'", str89, "hi!");
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(provider91);
        org.junit.Assert.assertNotNull(builder92);
    }

    @Test
    public void test04818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04818");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.Server server7 = new retrofit.Server("default", "hi!");
        java.lang.String str8 = server7.getUrl();
        retrofit.RestAdapter.Builder builder9 = builder4.setServer(server7);
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler11 = builder10.errorHandler;
        retrofit.ErrorHandler errorHandler12 = builder10.errorHandler;
        java.util.concurrent.Executor executor13 = builder10.callbackExecutor;
        java.util.concurrent.Executor executor14 = null;
        builder10.callbackExecutor = executor14;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler17 = builder16.errorHandler;
        retrofit.Server server20 = new retrofit.Server("", "");
        builder16.server = server20;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        builder16.log = log22;
        retrofit.RestAdapter.LogLevel logLevel24 = builder16.logLevel;
        retrofit.RestAdapter.Builder builder25 = builder10.setLogLevel(logLevel24);
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler27 = builder26.errorHandler;
        retrofit.client.Client.Provider provider28 = null;
        builder26.clientProvider = provider28;
        retrofit.Server server32 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder33 = builder26.setServer(server32);
        retrofit.converter.Converter converter34 = null;
        builder33.converter = converter34;
        retrofit.RestAdapter restAdapter36 = builder33.build();
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler38 = builder37.errorHandler;
        java.util.concurrent.Executor executor39 = null;
        builder37.callbackExecutor = executor39;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider42 = builder41.clientProvider;
        java.util.concurrent.Executor executor43 = null;
        builder41.callbackExecutor = executor43;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.Server server48 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder49 = builder45.setServer(server48);
        java.lang.String str50 = server48.getUrl();
        retrofit.RestAdapter.Builder builder51 = builder41.setServer(server48);
        retrofit.RestAdapter.Builder builder52 = builder37.setServer(server48);
        restAdapter36.server = server48;
        retrofit.client.Client.Provider provider54 = restAdapter36.clientProvider;
        retrofit.RestAdapter.Builder builder55 = builder25.setClient(provider54);
        retrofit.RestAdapter.Builder builder56 = builder9.setClient(provider54);
        retrofit.Server server57 = builder9.server;
        java.util.concurrent.Executor executor58 = builder9.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor59 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder60 = builder9.setRequestInterceptor(requestInterceptor59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Request interceptor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "default" + "'", str8, "default");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(restAdapter36);
        org.junit.Assert.assertNull(errorHandler38);
        org.junit.Assert.assertNull(provider42);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(provider54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(server57);
        org.junit.Assert.assertNull(executor58);
    }

    @Test
    public void test04819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04819");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server4 = new retrofit.Server("", "");
        builder0.server = server4;
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        builder0.log = log6;
        retrofit.RestAdapter.Builder builder9 = builder0.setServer("default");
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor11 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor13 = restAdapter12.callbackExecutor;
        java.util.concurrent.Executor executor14 = restAdapter12.callbackExecutor;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler16 = restAdapter15.errorHandler;
        retrofit.Server server19 = new retrofit.Server("", "");
        restAdapter15.server = server19;
        restAdapter12.server = server19;
        restAdapter10.server = server19;
        retrofit.Profiler profiler23 = restAdapter10.profiler;
        retrofit.ErrorHandler errorHandler24 = null;
        restAdapter10.errorHandler = errorHandler24;
        retrofit.Profiler profiler26 = null;
        restAdapter10.profiler = profiler26;
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter10.getLogLevel();
        retrofit.Profiler profiler29 = restAdapter10.profiler;
        java.util.concurrent.Executor executor30 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter10.getLogLevel();
        retrofit.Server server32 = restAdapter10.server;
        retrofit.Server server33 = null;
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        log41.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter(server33, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log41, logLevel44);
        retrofit.RestAdapter.RestHandler restHandler46 = restAdapter45.new RestHandler();
        retrofit.client.Header[] headerArray55 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList56 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList56, headerArray55);
        retrofit.mime.TypedOutput typedOutput58 = null;
        retrofit.client.Request request59 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList56, typedOutput58);
        retrofit.mime.TypedOutput typedOutput60 = null;
        retrofit.client.Request request61 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList56, typedOutput60);
        retrofit.mime.TypedOutput typedOutput62 = null;
        retrofit.client.Request request63 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList56, typedOutput62);
        retrofit.mime.TypedOutput typedOutput64 = null;
        retrofit.client.Request request65 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList56, typedOutput64);
        retrofit.mime.TypedOutput typedOutput66 = request65.getBody();
        retrofit.client.Request request67 = restAdapter45.logAndReplaceRequest(request65);
        retrofit.RestAdapter.RestHandler restHandler68 = restAdapter45.new RestHandler();
        retrofit.client.Client.Provider provider69 = restAdapter45.clientProvider;
        retrofit.RestAdapter.RestHandler restHandler70 = restAdapter45.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel71 = restAdapter45.logLevel;
        restAdapter10.logLevel = logLevel71;
        builder0.logLevel = logLevel71;
        boolean boolean74 = logLevel71.log();
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNull(profiler23);
        org.junit.Assert.assertNull(logLevel28);
        org.junit.Assert.assertNull(profiler29);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNull(logLevel31);
        org.junit.Assert.assertNotNull(server32);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(typedOutput66);
        org.junit.Assert.assertNotNull(request67);
        org.junit.Assert.assertNull(provider69);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test04820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04820");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.ErrorHandler errorHandler3 = builder0.errorHandler;
        java.util.concurrent.Executor executor4 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler6 = builder5.errorHandler;
        java.util.concurrent.Executor executor7 = null;
        builder5.callbackExecutor = executor7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.Server server12 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder13 = builder9.setServer(server12);
        retrofit.converter.Converter converter14 = builder9.converter;
        retrofit.RequestInterceptor requestInterceptor15 = builder9.requestInterceptor;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider17 = builder16.clientProvider;
        java.util.concurrent.Executor executor18 = null;
        builder16.callbackExecutor = executor18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.Server server23 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder24 = builder20.setServer(server23);
        java.lang.String str25 = server23.getUrl();
        retrofit.RestAdapter.Builder builder26 = builder16.setServer(server23);
        builder16.ensureSaneDefaults();
        retrofit.Server server28 = null;
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        log36.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server28, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log36, logLevel39);
        retrofit.RestAdapter.RestHandler restHandler41 = restAdapter40.new RestHandler();
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        restAdapter40.log = log42;
        retrofit.RestAdapter.Builder builder44 = builder16.setLog(log42);
        retrofit.RestAdapter.Builder builder46 = builder16.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor47 = builder16.requestInterceptor;
        builder9.requestInterceptor = requestInterceptor47;
        builder5.requestInterceptor = requestInterceptor47;
        retrofit.RestAdapter.Builder builder50 = builder0.setRequestInterceptor(requestInterceptor47);
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler52 = builder51.errorHandler;
        retrofit.client.Client.Provider provider53 = null;
        builder51.clientProvider = provider53;
        retrofit.Server server57 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder58 = builder51.setServer(server57);
        retrofit.converter.Converter converter59 = null;
        builder58.converter = converter59;
        retrofit.RestAdapter restAdapter61 = builder58.build();
        java.util.concurrent.Executor executor62 = restAdapter61.httpExecutor;
        builder50.callbackExecutor = executor62;
        retrofit.RestAdapter.LogLevel logLevel64 = builder50.logLevel;
        retrofit.client.Client.Provider provider65 = builder50.clientProvider;
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNull(provider17);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(requestInterceptor47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(errorHandler52);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(restAdapter61);
        org.junit.Assert.assertNotNull(executor62);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(provider65);
    }

    @Test
    public void test04821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04821");
        retrofit.client.Header[] headerArray22 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList23 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList23, headerArray22);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList23, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList23, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList23, typedOutput29);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList23, typedOutput31);
        retrofit.mime.TypedOutput typedOutput33 = null;
        retrofit.client.Request request34 = new retrofit.client.Request("default", "hi!", (java.util.List<retrofit.client.Header>) headerList23, typedOutput33);
        java.util.List<retrofit.client.Header> headerList35 = request34.getHeaders();
        retrofit.mime.TypedOutput typedOutput36 = null;
        retrofit.client.Request request37 = new retrofit.client.Request("default", "hi!", headerList35, typedOutput36);
        java.util.List<retrofit.client.Header> headerList38 = request37.getHeaders();
        retrofit.mime.TypedOutput typedOutput39 = null;
        retrofit.client.Request request40 = new retrofit.client.Request("", "", headerList38, typedOutput39);
        retrofit.mime.TypedOutput typedOutput41 = null;
        retrofit.client.Request request42 = new retrofit.client.Request("hi!", "default", headerList38, typedOutput41);
        retrofit.mime.TypedOutput typedOutput43 = null;
        retrofit.client.Request request44 = new retrofit.client.Request("default", "hi!", headerList38, typedOutput43);
        retrofit.mime.TypedOutput typedOutput45 = null;
        retrofit.client.Request request46 = new retrofit.client.Request("default", "default", headerList38, typedOutput45);
        retrofit.mime.TypedOutput typedOutput47 = null;
        retrofit.client.Request request48 = new retrofit.client.Request("", "", headerList38, typedOutput47);
        org.junit.Assert.assertNotNull(headerArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(headerList35);
        org.junit.Assert.assertNotNull(headerList38);
    }

    @Test
    public void test04822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04822");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        retrofit.Server server7 = new retrofit.Server("hi!", "hi!");
        builder0.server = server7;
        retrofit.client.Client.Provider provider9 = null;
        builder0.clientProvider = provider9;
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor12 = restAdapter11.callbackExecutor;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor14 = restAdapter13.callbackExecutor;
        java.util.concurrent.Executor executor15 = restAdapter13.callbackExecutor;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler17 = restAdapter16.errorHandler;
        retrofit.Server server20 = new retrofit.Server("", "");
        restAdapter16.server = server20;
        restAdapter13.server = server20;
        restAdapter11.server = server20;
        retrofit.Profiler profiler24 = restAdapter11.profiler;
        retrofit.ErrorHandler errorHandler25 = null;
        restAdapter11.errorHandler = errorHandler25;
        retrofit.RequestInterceptor requestInterceptor27 = restAdapter11.requestInterceptor;
        retrofit.RestAdapter.RestHandler restHandler28 = restAdapter11.new RestHandler();
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler30 = builder29.errorHandler;
        retrofit.client.Client.Provider provider31 = null;
        builder29.clientProvider = provider31;
        retrofit.Server server35 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder36 = builder29.setServer(server35);
        retrofit.converter.Converter converter37 = null;
        builder36.converter = converter37;
        retrofit.RestAdapter restAdapter39 = builder36.build();
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler41 = builder40.errorHandler;
        java.util.concurrent.Executor executor42 = null;
        builder40.callbackExecutor = executor42;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider45 = builder44.clientProvider;
        java.util.concurrent.Executor executor46 = null;
        builder44.callbackExecutor = executor46;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.Server server51 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder52 = builder48.setServer(server51);
        java.lang.String str53 = server51.getUrl();
        retrofit.RestAdapter.Builder builder54 = builder44.setServer(server51);
        retrofit.RestAdapter.Builder builder55 = builder40.setServer(server51);
        restAdapter39.server = server51;
        java.util.concurrent.Executor executor57 = restAdapter39.httpExecutor;
        restAdapter11.httpExecutor = executor57;
        builder0.httpExecutor = executor57;
        retrofit.RestAdapter restAdapter60 = builder0.build();
        retrofit.ErrorHandler errorHandler61 = builder0.errorHandler;
        retrofit.RestAdapter restAdapter62 = builder0.build();
        java.util.concurrent.Executor executor63 = builder0.httpExecutor;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(profiler24);
        org.junit.Assert.assertNull(requestInterceptor27);
        org.junit.Assert.assertNull(errorHandler30);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(restAdapter39);
        org.junit.Assert.assertNull(errorHandler41);
        org.junit.Assert.assertNull(provider45);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(executor57);
        org.junit.Assert.assertNotNull(restAdapter60);
        org.junit.Assert.assertNotNull(errorHandler61);
        org.junit.Assert.assertNotNull(restAdapter62);
        org.junit.Assert.assertNotNull(executor63);
    }

    @Test
    public void test04823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04823");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = builder0.clientProvider;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server7 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder8 = builder4.setServer(server7);
        java.lang.String str9 = server7.getUrl();
        retrofit.RestAdapter.Builder builder10 = builder0.setServer(server7);
        builder0.ensureSaneDefaults();
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        log20.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel23);
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter24.new RestHandler();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        restAdapter24.log = log26;
        retrofit.RestAdapter.Builder builder28 = builder0.setLog(log26);
        retrofit.RestAdapter.Builder builder30 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter31 = builder0.build();
        retrofit.RestAdapter.RestHandler restHandler32 = restAdapter31.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter31.logLevel;
        java.util.concurrent.Executor executor34 = restAdapter31.callbackExecutor;
        retrofit.Server server37 = new retrofit.Server("hi!", "hi!");
        restAdapter31.server = server37;
        retrofit.RequestInterceptor requestInterceptor39 = restAdapter31.requestInterceptor;
        retrofit.client.Response response41 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response43 = restAdapter31.logAndReplaceResponse("", response41, (long) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(provider1);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(restAdapter31);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(executor34);
        org.junit.Assert.assertNotNull(requestInterceptor39);
    }

    @Test
    public void test04824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04824");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.Server server5 = builder0.server;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.Server server9 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder10 = builder6.setServer(server9);
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor12 = restAdapter11.callbackExecutor;
        java.util.concurrent.Executor executor13 = restAdapter11.callbackExecutor;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler15 = restAdapter14.errorHandler;
        retrofit.Server server18 = new retrofit.Server("", "");
        restAdapter14.server = server18;
        restAdapter11.server = server18;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        restAdapter11.log = log21;
        retrofit.RestAdapter.Builder builder23 = builder10.setLog(log21);
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder25 = builder10.setLogLevel(logLevel24);
        builder0.logLevel = logLevel24;
        java.util.concurrent.Executor executor27 = builder0.callbackExecutor;
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        log28.log("");
        retrofit.RestAdapter.Builder builder31 = builder0.setLog(log28);
        retrofit.RestAdapter restAdapter32 = builder31.build();
        retrofit.Profiler profiler33 = null;
        builder31.profiler = profiler33;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(server5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(restAdapter32);
    }

    @Test
    public void test04825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04825");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = builder2.errorHandler;
        retrofit.Server server6 = new retrofit.Server("", "");
        builder2.server = server6;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler16 = builder15.errorHandler;
        retrofit.Server server19 = new retrofit.Server("", "");
        builder15.server = server19;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        builder15.log = log21;
        retrofit.Server server23 = null;
        retrofit.client.Client.Provider provider24 = null;
        java.util.concurrent.Executor executor25 = null;
        java.util.concurrent.Executor executor26 = null;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        retrofit.converter.Converter converter28 = null;
        retrofit.Profiler profiler29 = null;
        retrofit.ErrorHandler errorHandler30 = null;
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        log31.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server23, provider24, executor25, executor26, requestInterceptor27, converter28, profiler29, errorHandler30, log31, logLevel34);
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter(server6, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log21, logLevel34);
        restAdapter0.server = server6;
        retrofit.Profiler profiler38 = null;
        restAdapter0.profiler = profiler38;
        java.util.concurrent.Executor executor40 = restAdapter0.callbackExecutor;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor40);
    }

    @Test
    public void test04826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04826");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        restAdapter5.log = log15;
        retrofit.RestAdapter.Builder builder17 = builder4.setLog(log15);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder19 = builder4.setLogLevel(logLevel18);
        retrofit.Profiler profiler20 = null;
        builder19.profiler = profiler20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.Server server25 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder26 = builder22.setServer(server25);
        retrofit.RestAdapter.LogLevel logLevel27 = builder26.logLevel;
        retrofit.RestAdapter.Builder builder28 = builder19.setLogLevel(logLevel27);
        java.util.concurrent.Executor executor29 = builder28.callbackExecutor;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.Server server33 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder34 = builder30.setServer(server33);
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor36 = restAdapter35.callbackExecutor;
        java.util.concurrent.Executor executor37 = restAdapter35.callbackExecutor;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler39 = restAdapter38.errorHandler;
        retrofit.Server server42 = new retrofit.Server("", "");
        restAdapter38.server = server42;
        restAdapter35.server = server42;
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        restAdapter35.log = log45;
        retrofit.RestAdapter.Builder builder47 = builder34.setLog(log45);
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder49 = builder34.setLogLevel(logLevel48);
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler51 = builder50.errorHandler;
        retrofit.ErrorHandler errorHandler52 = builder50.errorHandler;
        retrofit.Profiler profiler53 = builder50.profiler;
        retrofit.RestAdapter.Log log54 = builder50.log;
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.FULL;
        builder50.logLevel = logLevel55;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.Server server60 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder61 = builder57.setServer(server60);
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor63 = restAdapter62.callbackExecutor;
        java.util.concurrent.Executor executor64 = restAdapter62.callbackExecutor;
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler66 = restAdapter65.errorHandler;
        retrofit.Server server69 = new retrofit.Server("", "");
        restAdapter65.server = server69;
        restAdapter62.server = server69;
        retrofit.RestAdapter.Log log72 = retrofit.RestAdapter.Log.NONE;
        restAdapter62.log = log72;
        retrofit.RestAdapter.Builder builder74 = builder61.setLog(log72);
        retrofit.RestAdapter.LogLevel logLevel75 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder76 = builder61.setLogLevel(logLevel75);
        retrofit.Profiler profiler77 = null;
        builder76.profiler = profiler77;
        retrofit.converter.Converter converter79 = null;
        builder76.converter = converter79;
        retrofit.ErrorHandler errorHandler81 = null;
        builder76.errorHandler = errorHandler81;
        retrofit.RestAdapter restAdapter83 = builder76.build();
        retrofit.ErrorHandler errorHandler84 = builder76.errorHandler;
        retrofit.RestAdapter.Builder builder85 = builder50.setErrorHandler(errorHandler84);
        builder34.errorHandler = errorHandler84;
        builder28.errorHandler = errorHandler84;
        retrofit.RequestInterceptor requestInterceptor88 = builder28.requestInterceptor;
        retrofit.RestAdapter restAdapter89 = builder28.build();
        java.util.concurrent.Executor executor90 = builder28.httpExecutor;
        retrofit.ErrorHandler errorHandler91 = builder28.errorHandler;
        retrofit.RestAdapter restAdapter92 = builder28.build();
        java.util.concurrent.Executor executor93 = builder28.callbackExecutor;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(executor36);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(errorHandler51);
        org.junit.Assert.assertNull(errorHandler52);
        org.junit.Assert.assertNull(profiler53);
        org.junit.Assert.assertNull(log54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(executor63);
        org.junit.Assert.assertNull(executor64);
        org.junit.Assert.assertNull(errorHandler66);
        org.junit.Assert.assertNotNull(log72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(restAdapter83);
        org.junit.Assert.assertNotNull(errorHandler84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNull(requestInterceptor88);
        org.junit.Assert.assertNotNull(restAdapter89);
        org.junit.Assert.assertNotNull(executor90);
        org.junit.Assert.assertNotNull(errorHandler91);
        org.junit.Assert.assertNotNull(restAdapter92);
        org.junit.Assert.assertNotNull(executor93);
    }

    @Test
    public void test04827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04827");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput9);
        java.lang.String str11 = request10.getMethod();
        java.lang.String str12 = request10.getMethod();
        retrofit.mime.TypedOutput typedOutput13 = request10.getBody();
        java.lang.String str14 = request10.getMethod();
        java.lang.String str15 = request10.getUrl();
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNull(typedOutput13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test04828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04828");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = builder0.callbackExecutor;
        java.util.concurrent.Executor executor3 = builder0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel4 = builder0.logLevel;
        retrofit.RequestInterceptor requestInterceptor5 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler7 = builder6.errorHandler;
        retrofit.ErrorHandler errorHandler8 = builder6.errorHandler;
        retrofit.RestAdapter.Log log9 = null;
        builder6.log = log9;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean12 = logLevel11.log();
        builder6.logLevel = logLevel11;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.Server server17 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder18 = builder14.setServer(server17);
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor20 = restAdapter19.callbackExecutor;
        java.util.concurrent.Executor executor21 = restAdapter19.callbackExecutor;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler23 = restAdapter22.errorHandler;
        retrofit.Server server26 = new retrofit.Server("", "");
        restAdapter22.server = server26;
        restAdapter19.server = server26;
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        restAdapter19.log = log29;
        retrofit.RestAdapter.Builder builder31 = builder18.setLog(log29);
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder33 = builder18.setLogLevel(logLevel32);
        retrofit.Profiler profiler34 = null;
        builder33.profiler = profiler34;
        retrofit.converter.Converter converter36 = null;
        builder33.converter = converter36;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor39 = restAdapter38.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler40 = restAdapter38.new RestHandler();
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor42 = restAdapter41.callbackExecutor;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor44 = restAdapter43.callbackExecutor;
        java.util.concurrent.Executor executor45 = restAdapter43.callbackExecutor;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler47 = restAdapter46.errorHandler;
        retrofit.Server server50 = new retrofit.Server("", "");
        restAdapter46.server = server50;
        restAdapter43.server = server50;
        restAdapter41.server = server50;
        retrofit.Profiler profiler54 = restAdapter41.profiler;
        retrofit.ErrorHandler errorHandler55 = null;
        restAdapter41.errorHandler = errorHandler55;
        retrofit.Profiler profiler57 = null;
        restAdapter41.profiler = profiler57;
        retrofit.RestAdapter.LogLevel logLevel59 = restAdapter41.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter41.logLevel = logLevel60;
        restAdapter38.logLevel = logLevel60;
        retrofit.RestAdapter.Builder builder63 = builder33.setLogLevel(logLevel60);
        builder6.logLevel = logLevel60;
        retrofit.RestAdapter.Builder builder65 = builder0.setLogLevel(logLevel60);
        retrofit.client.Client client66 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder67 = builder0.setClient(client66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNull(executor42);
        org.junit.Assert.assertNull(executor44);
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertNull(errorHandler47);
        org.junit.Assert.assertNull(profiler54);
        org.junit.Assert.assertNull(logLevel59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test04829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04829");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter3 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler4 = restAdapter3.errorHandler;
        retrofit.Server server7 = new retrofit.Server("", "");
        restAdapter3.server = server7;
        restAdapter0.server = server7;
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter0.logLevel;
        retrofit.Server server11 = restAdapter0.server;
        retrofit.RestAdapter.LogLevel logLevel12 = restAdapter0.logLevel;
        java.util.concurrent.Executor executor13 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter0.logLevel;
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter0.requestInterceptor;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(errorHandler4);
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertNotNull(server11);
        org.junit.Assert.assertNull(logLevel12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(logLevel14);
        org.junit.Assert.assertNull(requestInterceptor15);
    }

    @Test
    public void test04830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04830");
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        log12.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel15);
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter16.new RestHandler();
        retrofit.client.Header[] headerArray26 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList27 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList27, headerArray26);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList27, typedOutput29);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList27, typedOutput31);
        retrofit.mime.TypedOutput typedOutput33 = null;
        retrofit.client.Request request34 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList27, typedOutput33);
        retrofit.mime.TypedOutput typedOutput35 = null;
        retrofit.client.Request request36 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList27, typedOutput35);
        retrofit.mime.TypedOutput typedOutput37 = request36.getBody();
        retrofit.client.Request request38 = restAdapter16.logAndReplaceRequest(request36);
        java.util.List<retrofit.client.Header> headerList39 = request36.getHeaders();
        retrofit.mime.TypedOutput typedOutput40 = null;
        retrofit.client.Request request41 = new retrofit.client.Request("default", "default", headerList39, typedOutput40);
        retrofit.mime.TypedOutput typedOutput42 = null;
        retrofit.client.Request request43 = new retrofit.client.Request("hi!", "", headerList39, typedOutput42);
        java.util.List<retrofit.client.Header> headerList44 = request43.getHeaders();
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(typedOutput37);
        org.junit.Assert.assertNotNull(request38);
        org.junit.Assert.assertNotNull(headerList39);
        org.junit.Assert.assertNotNull(headerList44);
    }

    @Test
    public void test04831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04831");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder1 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler2 = builder1.errorHandler;
        retrofit.client.Client.Provider provider3 = null;
        builder1.clientProvider = provider3;
        retrofit.Server server7 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder8 = builder1.setServer(server7);
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler10 = builder9.errorHandler;
        retrofit.client.Client.Provider provider11 = null;
        builder9.clientProvider = provider11;
        retrofit.converter.Converter converter13 = builder9.converter;
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder15 = builder9.setLogLevel(logLevel14);
        builder1.logLevel = logLevel14;
        builder0.logLevel = logLevel14;
        retrofit.RequestInterceptor requestInterceptor18 = builder0.requestInterceptor;
        retrofit.Profiler profiler19 = null;
        builder0.profiler = profiler19;
        retrofit.RequestInterceptor requestInterceptor21 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler23 = builder22.errorHandler;
        java.util.concurrent.Executor executor24 = null;
        builder22.callbackExecutor = executor24;
        retrofit.converter.Converter converter26 = builder22.converter;
        retrofit.RestAdapter.Builder builder28 = builder22.setServer("default");
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler30 = builder29.errorHandler;
        retrofit.client.Client.Provider provider31 = null;
        builder29.clientProvider = provider31;
        retrofit.Server server35 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder36 = builder29.setServer(server35);
        retrofit.converter.Converter converter37 = null;
        builder36.converter = converter37;
        retrofit.RestAdapter restAdapter39 = builder36.build();
        retrofit.Profiler profiler40 = builder36.profiler;
        retrofit.Profiler profiler41 = builder36.profiler;
        retrofit.client.Client.Provider provider42 = builder36.clientProvider;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler44 = builder43.errorHandler;
        retrofit.Server server47 = new retrofit.Server("", "");
        builder43.server = server47;
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        builder43.log = log49;
        retrofit.RequestInterceptor requestInterceptor51 = builder43.requestInterceptor;
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        log52.log("hi!");
        log52.log("hi!");
        builder43.log = log52;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider59 = builder58.clientProvider;
        java.util.concurrent.Executor executor60 = null;
        builder58.callbackExecutor = executor60;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.Server server65 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder66 = builder62.setServer(server65);
        java.lang.String str67 = server65.getUrl();
        retrofit.RestAdapter.Builder builder68 = builder58.setServer(server65);
        builder58.ensureSaneDefaults();
        retrofit.Server server70 = null;
        retrofit.client.Client.Provider provider71 = null;
        java.util.concurrent.Executor executor72 = null;
        java.util.concurrent.Executor executor73 = null;
        retrofit.RequestInterceptor requestInterceptor74 = null;
        retrofit.converter.Converter converter75 = null;
        retrofit.Profiler profiler76 = null;
        retrofit.ErrorHandler errorHandler77 = null;
        retrofit.RestAdapter.Log log78 = retrofit.RestAdapter.Log.NONE;
        log78.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel81 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter82 = new retrofit.RestAdapter(server70, provider71, executor72, executor73, requestInterceptor74, converter75, profiler76, errorHandler77, log78, logLevel81);
        retrofit.RestAdapter.RestHandler restHandler83 = restAdapter82.new RestHandler();
        retrofit.RestAdapter.Log log84 = retrofit.RestAdapter.Log.NONE;
        restAdapter82.log = log84;
        retrofit.RestAdapter.Builder builder86 = builder58.setLog(log84);
        retrofit.RestAdapter.LogLevel logLevel87 = builder58.logLevel;
        boolean boolean88 = logLevel87.log();
        retrofit.RestAdapter.Builder builder89 = builder43.setLogLevel(logLevel87);
        retrofit.RestAdapter.Builder builder90 = builder36.setLogLevel(logLevel87);
        builder28.logLevel = logLevel87;
        boolean boolean92 = logLevel87.log();
        builder0.logLevel = logLevel87;
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(requestInterceptor18);
        org.junit.Assert.assertNull(requestInterceptor21);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNull(converter26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(errorHandler30);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(restAdapter39);
        org.junit.Assert.assertNull(profiler40);
        org.junit.Assert.assertNull(profiler41);
        org.junit.Assert.assertNotNull(provider42);
        org.junit.Assert.assertNull(errorHandler44);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertNull(requestInterceptor51);
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNull(provider59);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hi!" + "'", str67, "hi!");
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(log78);
        org.junit.Assert.assertTrue("'" + logLevel81 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel81.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertTrue("'" + logLevel87 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel87.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test04832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04832");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter0.requestInterceptor;
        retrofit.ErrorHandler errorHandler17 = restAdapter0.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter0.new RestHandler();
        retrofit.ErrorHandler errorHandler20 = restAdapter0.errorHandler;
        retrofit.client.Client.Provider provider21 = restAdapter0.clientProvider;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.Server server25 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder26 = builder22.setServer(server25);
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor28 = restAdapter27.callbackExecutor;
        java.util.concurrent.Executor executor29 = restAdapter27.callbackExecutor;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler31 = restAdapter30.errorHandler;
        retrofit.Server server34 = new retrofit.Server("", "");
        restAdapter30.server = server34;
        restAdapter27.server = server34;
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        restAdapter27.log = log37;
        retrofit.RestAdapter.Builder builder39 = builder26.setLog(log37);
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder41 = builder26.setLogLevel(logLevel40);
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler43 = builder42.errorHandler;
        retrofit.client.Client.Provider provider44 = null;
        builder42.clientProvider = provider44;
        retrofit.Server server48 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder49 = builder42.setServer(server48);
        retrofit.converter.Converter converter50 = null;
        builder49.converter = converter50;
        retrofit.RestAdapter restAdapter52 = builder49.build();
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler54 = builder53.errorHandler;
        java.util.concurrent.Executor executor55 = null;
        builder53.callbackExecutor = executor55;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider58 = builder57.clientProvider;
        java.util.concurrent.Executor executor59 = null;
        builder57.callbackExecutor = executor59;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.Server server64 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder65 = builder61.setServer(server64);
        java.lang.String str66 = server64.getUrl();
        retrofit.RestAdapter.Builder builder67 = builder57.setServer(server64);
        retrofit.RestAdapter.Builder builder68 = builder53.setServer(server64);
        restAdapter52.server = server64;
        java.util.concurrent.Executor executor70 = restAdapter52.httpExecutor;
        builder26.callbackExecutor = executor70;
        restAdapter0.callbackExecutor = executor70;
        retrofit.RestAdapter.RestHandler restHandler73 = restAdapter0.new RestHandler();
        retrofit.Server server74 = restAdapter0.server;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNull(provider21);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(errorHandler31);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(errorHandler43);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(restAdapter52);
        org.junit.Assert.assertNull(errorHandler54);
        org.junit.Assert.assertNull(provider58);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hi!" + "'", str66, "hi!");
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(executor70);
        org.junit.Assert.assertNotNull(server74);
    }

    @Test
    public void test04833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04833");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.converter.Converter converter3 = null;
        builder0.converter = converter3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        builder0.requestInterceptor = requestInterceptor5;
        retrofit.client.Client.Provider provider7 = builder0.clientProvider;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler9 = builder8.errorHandler;
        retrofit.client.Client.Provider provider10 = null;
        builder8.clientProvider = provider10;
        retrofit.converter.Converter converter12 = builder8.converter;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder14 = builder8.setLogLevel(logLevel13);
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor16 = restAdapter15.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean18 = logLevel17.log();
        restAdapter15.logLevel = logLevel17;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler21 = builder20.errorHandler;
        retrofit.client.Client.Provider provider22 = null;
        builder20.clientProvider = provider22;
        retrofit.Server server26 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder27 = builder20.setServer(server26);
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler29 = builder28.errorHandler;
        retrofit.client.Client.Provider provider30 = null;
        builder28.clientProvider = provider30;
        retrofit.converter.Converter converter32 = builder28.converter;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder34 = builder28.setLogLevel(logLevel33);
        builder20.logLevel = logLevel33;
        boolean boolean36 = logLevel33.log();
        restAdapter15.logLevel = logLevel33;
        retrofit.RestAdapter.Builder builder38 = builder14.setLogLevel(logLevel33);
        boolean boolean39 = logLevel33.log();
        retrofit.RestAdapter.Builder builder40 = builder0.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler42 = builder41.errorHandler;
        java.util.concurrent.Executor executor43 = builder41.callbackExecutor;
        retrofit.RestAdapter.Builder builder45 = builder41.setServer("hi!");
        retrofit.Server server48 = new retrofit.Server("default", "hi!");
        java.lang.String str49 = server48.getUrl();
        retrofit.RestAdapter.Builder builder50 = builder45.setServer(server48);
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler52 = builder51.errorHandler;
        retrofit.ErrorHandler errorHandler53 = builder51.errorHandler;
        java.util.concurrent.Executor executor54 = builder51.callbackExecutor;
        java.util.concurrent.Executor executor55 = null;
        builder51.callbackExecutor = executor55;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler58 = builder57.errorHandler;
        retrofit.Server server61 = new retrofit.Server("", "");
        builder57.server = server61;
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        builder57.log = log63;
        retrofit.RestAdapter.LogLevel logLevel65 = builder57.logLevel;
        retrofit.RestAdapter.Builder builder66 = builder51.setLogLevel(logLevel65);
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler68 = builder67.errorHandler;
        retrofit.client.Client.Provider provider69 = null;
        builder67.clientProvider = provider69;
        retrofit.Server server73 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder74 = builder67.setServer(server73);
        retrofit.converter.Converter converter75 = null;
        builder74.converter = converter75;
        retrofit.RestAdapter restAdapter77 = builder74.build();
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler79 = builder78.errorHandler;
        java.util.concurrent.Executor executor80 = null;
        builder78.callbackExecutor = executor80;
        retrofit.RestAdapter.Builder builder82 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider83 = builder82.clientProvider;
        java.util.concurrent.Executor executor84 = null;
        builder82.callbackExecutor = executor84;
        retrofit.RestAdapter.Builder builder86 = new retrofit.RestAdapter.Builder();
        retrofit.Server server89 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder90 = builder86.setServer(server89);
        java.lang.String str91 = server89.getUrl();
        retrofit.RestAdapter.Builder builder92 = builder82.setServer(server89);
        retrofit.RestAdapter.Builder builder93 = builder78.setServer(server89);
        restAdapter77.server = server89;
        retrofit.client.Client.Provider provider95 = restAdapter77.clientProvider;
        retrofit.RestAdapter.Builder builder96 = builder66.setClient(provider95);
        retrofit.RestAdapter.Builder builder97 = builder50.setClient(provider95);
        builder40.clientProvider = provider95;
        retrofit.RestAdapter.Log log99 = builder40.log;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(provider7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNull(converter12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNull(converter32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(errorHandler42);
        org.junit.Assert.assertNull(executor43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "default" + "'", str49, "default");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(errorHandler52);
        org.junit.Assert.assertNull(errorHandler53);
        org.junit.Assert.assertNull(executor54);
        org.junit.Assert.assertNull(errorHandler58);
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(errorHandler68);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(restAdapter77);
        org.junit.Assert.assertNull(errorHandler79);
        org.junit.Assert.assertNull(provider83);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "hi!" + "'", str91, "hi!");
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(provider95);
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertNull(log99);
    }

    @Test
    public void test04834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04834");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        restAdapter12.log = log14;
        retrofit.converter.Converter converter16 = null;
        restAdapter12.converter = converter16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter12.getLogLevel();
        retrofit.ErrorHandler errorHandler19 = restAdapter12.errorHandler;
        retrofit.Profiler profiler20 = restAdapter12.profiler;
        retrofit.RequestInterceptor requestInterceptor21 = restAdapter12.requestInterceptor;
        retrofit.client.Header[] headerArray32 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList33 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList33, headerArray32);
        retrofit.mime.TypedOutput typedOutput35 = null;
        retrofit.client.Request request36 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList33, typedOutput35);
        retrofit.mime.TypedOutput typedOutput37 = null;
        retrofit.client.Request request38 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList33, typedOutput37);
        retrofit.mime.TypedOutput typedOutput39 = null;
        retrofit.client.Request request40 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList33, typedOutput39);
        retrofit.mime.TypedOutput typedOutput41 = null;
        retrofit.client.Request request42 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList33, typedOutput41);
        retrofit.mime.TypedOutput typedOutput43 = null;
        retrofit.client.Request request44 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList33, typedOutput43);
        java.util.List<retrofit.client.Header> headerList45 = request44.getHeaders();
        java.lang.String str46 = request44.getMethod();
        retrofit.client.Request request47 = restAdapter12.logAndReplaceRequest(request44);
        retrofit.mime.TypedOutput typedOutput48 = request44.getBody();
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(profiler20);
        org.junit.Assert.assertNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(headerArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(headerList45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertNotNull(request47);
        org.junit.Assert.assertNull(typedOutput48);
    }

    @Test
    public void test04835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04835");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.converter.Converter converter5 = builder0.converter;
        retrofit.RequestInterceptor requestInterceptor6 = builder0.requestInterceptor;
        java.util.concurrent.Executor executor7 = builder0.callbackExecutor;
        retrofit.Profiler profiler8 = builder0.profiler;
        java.util.concurrent.Executor executor9 = builder0.callbackExecutor;
        retrofit.RestAdapter.Log log10 = builder0.log;
        retrofit.RestAdapter restAdapter11 = builder0.build();
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler13 = builder12.errorHandler;
        retrofit.ErrorHandler errorHandler14 = builder12.errorHandler;
        retrofit.Profiler profiler15 = builder12.profiler;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor17 = restAdapter16.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter16.new RestHandler();
        retrofit.Server server21 = new retrofit.Server("hi!", "hi!");
        restAdapter16.server = server21;
        retrofit.RestAdapter.Builder builder23 = builder12.setServer(server21);
        retrofit.converter.Converter converter24 = null;
        builder23.converter = converter24;
        retrofit.Profiler profiler26 = null;
        builder23.profiler = profiler26;
        retrofit.RestAdapter restAdapter28 = builder23.build();
        java.util.concurrent.Executor executor29 = builder23.httpExecutor;
        java.util.concurrent.Executor executor30 = builder23.callbackExecutor;
        builder0.callbackExecutor = executor30;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(converter5);
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(profiler8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(log10);
        org.junit.Assert.assertNotNull(restAdapter11);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(restAdapter28);
        org.junit.Assert.assertNotNull(executor29);
        org.junit.Assert.assertNotNull(executor30);
    }

    @Test
    public void test04836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04836");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.client.Client.Provider provider14 = restAdapter12.clientProvider;
        retrofit.RestAdapter.Log log15 = restAdapter12.log;
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter12.getLogLevel();
        java.util.concurrent.Executor executor17 = restAdapter12.httpExecutor;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server21 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder22 = builder18.setServer(server21);
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor24 = restAdapter23.callbackExecutor;
        java.util.concurrent.Executor executor25 = restAdapter23.callbackExecutor;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler27 = restAdapter26.errorHandler;
        retrofit.Server server30 = new retrofit.Server("", "");
        restAdapter26.server = server30;
        restAdapter23.server = server30;
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        restAdapter23.log = log33;
        retrofit.RestAdapter.Builder builder35 = builder22.setLog(log33);
        retrofit.converter.Converter converter36 = null;
        builder35.converter = converter36;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler39 = builder38.errorHandler;
        java.util.concurrent.Executor executor40 = null;
        builder38.callbackExecutor = executor40;
        retrofit.converter.Converter converter42 = builder38.converter;
        retrofit.RestAdapter.Builder builder44 = builder38.setServer("default");
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler46 = builder45.errorHandler;
        retrofit.client.Client.Provider provider47 = null;
        builder45.clientProvider = provider47;
        retrofit.Server server51 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder52 = builder45.setServer(server51);
        retrofit.converter.Converter converter53 = null;
        builder52.converter = converter53;
        retrofit.RestAdapter restAdapter55 = builder52.build();
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler57 = builder56.errorHandler;
        java.util.concurrent.Executor executor58 = null;
        builder56.callbackExecutor = executor58;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider61 = builder60.clientProvider;
        java.util.concurrent.Executor executor62 = null;
        builder60.callbackExecutor = executor62;
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.Server server67 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder68 = builder64.setServer(server67);
        java.lang.String str69 = server67.getUrl();
        retrofit.RestAdapter.Builder builder70 = builder60.setServer(server67);
        retrofit.RestAdapter.Builder builder71 = builder56.setServer(server67);
        restAdapter55.server = server67;
        retrofit.client.Client.Provider provider73 = restAdapter55.clientProvider;
        builder44.clientProvider = provider73;
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler76 = builder75.errorHandler;
        retrofit.ErrorHandler errorHandler77 = builder75.errorHandler;
        retrofit.Profiler profiler78 = builder75.profiler;
        retrofit.RestAdapter restAdapter79 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor80 = restAdapter79.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler81 = restAdapter79.new RestHandler();
        retrofit.Server server84 = new retrofit.Server("hi!", "hi!");
        restAdapter79.server = server84;
        retrofit.RestAdapter.Builder builder86 = builder75.setServer(server84);
        retrofit.converter.Converter converter87 = null;
        builder86.converter = converter87;
        builder86.ensureSaneDefaults();
        retrofit.RestAdapter.Log log90 = null;
        builder86.log = log90;
        retrofit.RequestInterceptor requestInterceptor92 = builder86.requestInterceptor;
        retrofit.RestAdapter.Builder builder93 = builder44.setRequestInterceptor(requestInterceptor92);
        retrofit.RequestInterceptor requestInterceptor94 = builder44.requestInterceptor;
        retrofit.RestAdapter.Builder builder95 = builder35.setRequestInterceptor(requestInterceptor94);
        restAdapter12.requestInterceptor = requestInterceptor94;
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNull(converter42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(errorHandler46);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(restAdapter55);
        org.junit.Assert.assertNull(errorHandler57);
        org.junit.Assert.assertNull(provider61);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(provider73);
        org.junit.Assert.assertNull(errorHandler76);
        org.junit.Assert.assertNull(errorHandler77);
        org.junit.Assert.assertNull(profiler78);
        org.junit.Assert.assertNull(executor80);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(requestInterceptor92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(requestInterceptor94);
        org.junit.Assert.assertNotNull(builder95);
    }

    @Test
    public void test04837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04837");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.Server server5 = builder0.server;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.Server server9 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder10 = builder6.setServer(server9);
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor12 = restAdapter11.callbackExecutor;
        java.util.concurrent.Executor executor13 = restAdapter11.callbackExecutor;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler15 = restAdapter14.errorHandler;
        retrofit.Server server18 = new retrofit.Server("", "");
        restAdapter14.server = server18;
        restAdapter11.server = server18;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        restAdapter11.log = log21;
        retrofit.RestAdapter.Builder builder23 = builder10.setLog(log21);
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder25 = builder10.setLogLevel(logLevel24);
        builder0.logLevel = logLevel24;
        java.util.concurrent.Executor executor27 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler29 = builder28.errorHandler;
        retrofit.ErrorHandler errorHandler30 = builder28.errorHandler;
        retrofit.converter.Converter converter31 = null;
        builder28.converter = converter31;
        retrofit.RequestInterceptor requestInterceptor33 = null;
        builder28.requestInterceptor = requestInterceptor33;
        retrofit.client.Client.Provider provider35 = builder28.clientProvider;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler37 = builder36.errorHandler;
        retrofit.client.Client.Provider provider38 = null;
        builder36.clientProvider = provider38;
        retrofit.Server server42 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder43 = builder36.setServer(server42);
        retrofit.converter.Converter converter44 = null;
        builder43.converter = converter44;
        retrofit.RestAdapter restAdapter46 = builder43.build();
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler48 = builder47.errorHandler;
        java.util.concurrent.Executor executor49 = null;
        builder47.callbackExecutor = executor49;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider52 = builder51.clientProvider;
        java.util.concurrent.Executor executor53 = null;
        builder51.callbackExecutor = executor53;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.Server server58 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder59 = builder55.setServer(server58);
        java.lang.String str60 = server58.getUrl();
        retrofit.RestAdapter.Builder builder61 = builder51.setServer(server58);
        retrofit.RestAdapter.Builder builder62 = builder47.setServer(server58);
        restAdapter46.server = server58;
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler65 = builder64.errorHandler;
        retrofit.client.Client.Provider provider66 = null;
        builder64.clientProvider = provider66;
        retrofit.Server server70 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder71 = builder64.setServer(server70);
        retrofit.client.Client.Provider provider72 = null;
        java.util.concurrent.Executor executor73 = null;
        java.util.concurrent.Executor executor74 = null;
        retrofit.RequestInterceptor requestInterceptor75 = null;
        retrofit.converter.Converter converter76 = null;
        retrofit.Profiler profiler77 = null;
        retrofit.ErrorHandler errorHandler78 = null;
        retrofit.Server server79 = null;
        retrofit.client.Client.Provider provider80 = null;
        java.util.concurrent.Executor executor81 = null;
        java.util.concurrent.Executor executor82 = null;
        retrofit.RequestInterceptor requestInterceptor83 = null;
        retrofit.converter.Converter converter84 = null;
        retrofit.Profiler profiler85 = null;
        retrofit.ErrorHandler errorHandler86 = null;
        retrofit.RestAdapter.Log log87 = retrofit.RestAdapter.Log.NONE;
        log87.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel90 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter91 = new retrofit.RestAdapter(server79, provider80, executor81, executor82, requestInterceptor83, converter84, profiler85, errorHandler86, log87, logLevel90);
        retrofit.RestAdapter.LogLevel logLevel92 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter93 = new retrofit.RestAdapter(server70, provider72, executor73, executor74, requestInterceptor75, converter76, profiler77, errorHandler78, log87, logLevel92);
        boolean boolean94 = logLevel92.log();
        boolean boolean95 = logLevel92.log();
        restAdapter46.setLogLevel(logLevel92);
        retrofit.RestAdapter.Builder builder97 = builder28.setLogLevel(logLevel92);
        retrofit.RestAdapter.Builder builder98 = builder0.setLogLevel(logLevel92);
        boolean boolean99 = logLevel92.log();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(server5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNull(errorHandler30);
        org.junit.Assert.assertNull(provider35);
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(restAdapter46);
        org.junit.Assert.assertNull(errorHandler48);
        org.junit.Assert.assertNull(provider52);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(errorHandler65);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(log87);
        org.junit.Assert.assertTrue("'" + logLevel90 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel90.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel92 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel92.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertNotNull(builder98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test04838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04838");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.converter.Converter converter13 = restAdapter0.converter;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor15 = restAdapter14.callbackExecutor;
        java.util.concurrent.Executor executor16 = restAdapter14.callbackExecutor;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler18 = restAdapter17.errorHandler;
        retrofit.Server server21 = new retrofit.Server("", "");
        restAdapter17.server = server21;
        restAdapter14.server = server21;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler25 = restAdapter24.errorHandler;
        retrofit.Server server28 = new retrofit.Server("", "");
        restAdapter24.server = server28;
        restAdapter14.server = server28;
        retrofit.client.Client.Provider provider31 = null;
        java.util.concurrent.Executor executor32 = null;
        java.util.concurrent.Executor executor33 = null;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        retrofit.converter.Converter converter35 = null;
        retrofit.Profiler profiler36 = null;
        retrofit.ErrorHandler errorHandler37 = null;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider39 = builder38.clientProvider;
        java.util.concurrent.Executor executor40 = null;
        builder38.callbackExecutor = executor40;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.Server server45 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder46 = builder42.setServer(server45);
        java.lang.String str47 = server45.getUrl();
        retrofit.RestAdapter.Builder builder48 = builder38.setServer(server45);
        builder38.ensureSaneDefaults();
        retrofit.Server server50 = null;
        retrofit.client.Client.Provider provider51 = null;
        java.util.concurrent.Executor executor52 = null;
        java.util.concurrent.Executor executor53 = null;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        retrofit.converter.Converter converter55 = null;
        retrofit.Profiler profiler56 = null;
        retrofit.ErrorHandler errorHandler57 = null;
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        log58.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel61 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter(server50, provider51, executor52, executor53, requestInterceptor54, converter55, profiler56, errorHandler57, log58, logLevel61);
        retrofit.RestAdapter.RestHandler restHandler63 = restAdapter62.new RestHandler();
        retrofit.RestAdapter.Log log64 = retrofit.RestAdapter.Log.NONE;
        restAdapter62.log = log64;
        retrofit.RestAdapter.Builder builder66 = builder38.setLog(log64);
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler68 = builder67.errorHandler;
        retrofit.ErrorHandler errorHandler69 = builder67.errorHandler;
        retrofit.RestAdapter.Log log70 = null;
        builder67.log = log70;
        retrofit.RestAdapter.LogLevel logLevel72 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean73 = logLevel72.log();
        builder67.logLevel = logLevel72;
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter(server28, provider31, executor32, executor33, requestInterceptor34, converter35, profiler36, errorHandler37, log64, logLevel72);
        restAdapter0.log = log64;
        retrofit.RestAdapter.Log log77 = restAdapter0.log;
        java.util.concurrent.Executor executor78 = restAdapter0.httpExecutor;
        retrofit.Profiler profiler79 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler80 = restAdapter0.new RestHandler();
        retrofit.Profiler profiler81 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler82 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(errorHandler18);
        org.junit.Assert.assertNull(errorHandler25);
        org.junit.Assert.assertNull(provider39);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(log58);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(errorHandler68);
        org.junit.Assert.assertNull(errorHandler69);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(log77);
        org.junit.Assert.assertNull(executor78);
        org.junit.Assert.assertNull(profiler79);
        org.junit.Assert.assertNull(profiler81);
    }

    @Test
    public void test04839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04839");
        retrofit.client.Header[] headerArray12 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList13 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList13, headerArray12);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList13, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList13, typedOutput17);
        java.lang.String str19 = request18.getMethod();
        java.util.List<retrofit.client.Header> headerList20 = request18.getHeaders();
        java.util.List<retrofit.client.Header> headerList21 = request18.getHeaders();
        retrofit.mime.TypedOutput typedOutput22 = null;
        retrofit.client.Request request23 = new retrofit.client.Request("", "", headerList21, typedOutput22);
        retrofit.mime.TypedOutput typedOutput24 = null;
        retrofit.client.Request request25 = new retrofit.client.Request("hi!", "default", headerList21, typedOutput24);
        retrofit.mime.TypedOutput typedOutput26 = null;
        retrofit.client.Request request27 = new retrofit.client.Request("hi!", "hi!", headerList21, typedOutput26);
        java.util.List<retrofit.client.Header> headerList28 = request27.getHeaders();
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("hi!", "hi!", headerList28, typedOutput29);
        org.junit.Assert.assertNotNull(headerArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(headerList20);
        org.junit.Assert.assertNotNull(headerList21);
        org.junit.Assert.assertNotNull(headerList28);
    }

    @Test
    public void test04840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04840");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.Profiler profiler3 = builder0.profiler;
        retrofit.RestAdapter.Log log4 = builder0.log;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.FULL;
        builder0.logLevel = logLevel5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.Server server10 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder11 = builder7.setServer(server10);
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor13 = restAdapter12.callbackExecutor;
        java.util.concurrent.Executor executor14 = restAdapter12.callbackExecutor;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler16 = restAdapter15.errorHandler;
        retrofit.Server server19 = new retrofit.Server("", "");
        restAdapter15.server = server19;
        restAdapter12.server = server19;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        restAdapter12.log = log22;
        retrofit.RestAdapter.Builder builder24 = builder11.setLog(log22);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder26 = builder11.setLogLevel(logLevel25);
        retrofit.Profiler profiler27 = null;
        builder26.profiler = profiler27;
        retrofit.converter.Converter converter29 = null;
        builder26.converter = converter29;
        retrofit.ErrorHandler errorHandler31 = null;
        builder26.errorHandler = errorHandler31;
        retrofit.RestAdapter restAdapter33 = builder26.build();
        retrofit.ErrorHandler errorHandler34 = builder26.errorHandler;
        retrofit.RestAdapter.Builder builder35 = builder0.setErrorHandler(errorHandler34);
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler37 = builder36.errorHandler;
        retrofit.client.Client.Provider provider38 = null;
        builder36.clientProvider = provider38;
        retrofit.Server server42 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder43 = builder36.setServer(server42);
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler45 = builder44.errorHandler;
        retrofit.client.Client.Provider provider46 = null;
        builder44.clientProvider = provider46;
        retrofit.converter.Converter converter48 = builder44.converter;
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder50 = builder44.setLogLevel(logLevel49);
        builder36.logLevel = logLevel49;
        boolean boolean52 = logLevel49.log();
        builder0.logLevel = logLevel49;
        java.util.concurrent.Executor executor54 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler56 = null;
        builder55.errorHandler = errorHandler56;
        retrofit.ErrorHandler errorHandler58 = builder55.errorHandler;
        retrofit.RestAdapter.Builder builder60 = builder55.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel61 = builder55.logLevel;
        retrofit.Server server62 = builder55.server;
        retrofit.RestAdapter.Builder builder63 = builder0.setServer(server62);
        java.lang.String str64 = server62.getUrl();
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(restAdapter33);
        org.junit.Assert.assertNotNull(errorHandler34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(errorHandler45);
        org.junit.Assert.assertNull(converter48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(executor54);
        org.junit.Assert.assertNull(errorHandler58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(server62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hi!" + "'", str64, "hi!");
    }

    @Test
    public void test04841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04841");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter0.getLogLevel();
        retrofit.ErrorHandler errorHandler20 = null;
        restAdapter0.errorHandler = errorHandler20;
        retrofit.client.Client.Provider provider22 = null;
        restAdapter0.clientProvider = provider22;
        retrofit.ErrorHandler errorHandler24 = restAdapter0.errorHandler;
        retrofit.Server server25 = restAdapter0.server;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler27 = builder26.errorHandler;
        retrofit.ErrorHandler errorHandler28 = builder26.errorHandler;
        retrofit.RestAdapter.Log log29 = null;
        builder26.log = log29;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean32 = logLevel31.log();
        builder26.logLevel = logLevel31;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler35 = restAdapter34.new RestHandler();
        java.util.concurrent.Executor executor36 = null;
        restAdapter34.callbackExecutor = executor36;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor39 = restAdapter38.callbackExecutor;
        java.util.concurrent.Executor executor40 = restAdapter38.callbackExecutor;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler42 = restAdapter41.errorHandler;
        retrofit.Server server45 = new retrofit.Server("", "");
        restAdapter41.server = server45;
        restAdapter38.server = server45;
        restAdapter34.server = server45;
        retrofit.RestAdapter.Builder builder49 = builder26.setServer(server45);
        restAdapter0.server = server45;
        retrofit.RestAdapter.RestHandler restHandler51 = restAdapter0.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor52 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter0.logLevel;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNotNull(server25);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNull(executor40);
        org.junit.Assert.assertNull(errorHandler42);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(requestInterceptor52);
        org.junit.Assert.assertNull(logLevel53);
    }

    @Test
    public void test04842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04842");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.Profiler profiler3 = builder0.profiler;
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor5 = restAdapter4.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.Server server9 = new retrofit.Server("hi!", "hi!");
        restAdapter4.server = server9;
        retrofit.RestAdapter.Builder builder11 = builder0.setServer(server9);
        retrofit.converter.Converter converter12 = null;
        builder11.converter = converter12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        log22.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel25);
        builder11.logLevel = logLevel25;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler29 = builder28.errorHandler;
        retrofit.client.Client.Provider provider30 = null;
        builder28.clientProvider = provider30;
        retrofit.Server server34 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder35 = builder28.setServer(server34);
        retrofit.client.Client.Provider provider36 = null;
        java.util.concurrent.Executor executor37 = null;
        java.util.concurrent.Executor executor38 = null;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        retrofit.converter.Converter converter40 = null;
        retrofit.Profiler profiler41 = null;
        retrofit.ErrorHandler errorHandler42 = null;
        retrofit.Server server43 = null;
        retrofit.client.Client.Provider provider44 = null;
        java.util.concurrent.Executor executor45 = null;
        java.util.concurrent.Executor executor46 = null;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        retrofit.converter.Converter converter48 = null;
        retrofit.Profiler profiler49 = null;
        retrofit.ErrorHandler errorHandler50 = null;
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        log51.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter(server43, provider44, executor45, executor46, requestInterceptor47, converter48, profiler49, errorHandler50, log51, logLevel54);
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter(server34, provider36, executor37, executor38, requestInterceptor39, converter40, profiler41, errorHandler42, log51, logLevel56);
        java.lang.String str58 = server34.getName();
        builder11.server = server34;
        retrofit.client.Client.Provider provider60 = builder11.clientProvider;
        retrofit.converter.Converter converter61 = builder11.converter;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNull(provider60);
        org.junit.Assert.assertNull(converter61);
    }

    @Test
    public void test04843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04843");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter0.getLogLevel();
        retrofit.client.Client.Provider provider20 = null;
        restAdapter0.clientProvider = provider20;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean23 = logLevel22.log();
        restAdapter0.logLevel = logLevel22;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        restAdapter0.requestInterceptor = requestInterceptor25;
        retrofit.RestAdapter.Log log27 = restAdapter0.log;
        retrofit.converter.Converter converter28 = null;
        restAdapter0.converter = converter28;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter30.logLevel;
        retrofit.RestAdapter.RestHandler restHandler32 = restAdapter30.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler33 = restAdapter30.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler34 = restAdapter30.new RestHandler();
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler36 = restAdapter35.new RestHandler();
        retrofit.client.Client.Provider provider37 = restAdapter35.clientProvider;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler39 = builder38.errorHandler;
        retrofit.Server server42 = new retrofit.Server("", "");
        builder38.server = server42;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        builder38.log = log44;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler47 = builder46.errorHandler;
        retrofit.client.Client.Provider provider48 = null;
        builder46.clientProvider = provider48;
        retrofit.Server server52 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder53 = builder46.setServer(server52);
        retrofit.converter.Converter converter54 = null;
        builder53.converter = converter54;
        retrofit.RestAdapter restAdapter56 = builder53.build();
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler58 = builder57.errorHandler;
        java.util.concurrent.Executor executor59 = null;
        builder57.callbackExecutor = executor59;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider62 = builder61.clientProvider;
        java.util.concurrent.Executor executor63 = null;
        builder61.callbackExecutor = executor63;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.Server server68 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder69 = builder65.setServer(server68);
        java.lang.String str70 = server68.getUrl();
        retrofit.RestAdapter.Builder builder71 = builder61.setServer(server68);
        retrofit.RestAdapter.Builder builder72 = builder57.setServer(server68);
        restAdapter56.server = server68;
        java.util.concurrent.Executor executor74 = restAdapter56.httpExecutor;
        builder38.httpExecutor = executor74;
        restAdapter35.callbackExecutor = executor74;
        restAdapter30.callbackExecutor = executor74;
        restAdapter0.httpExecutor = executor74;
        retrofit.RestAdapter.RestHandler restHandler79 = restAdapter0.new RestHandler();
        java.lang.Throwable throwable80 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable80, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(log27);
        org.junit.Assert.assertNull(logLevel31);
        org.junit.Assert.assertNull(provider37);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNull(errorHandler47);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(restAdapter56);
        org.junit.Assert.assertNull(errorHandler58);
        org.junit.Assert.assertNull(provider62);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hi!" + "'", str70, "hi!");
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(executor74);
    }

    @Test
    public void test04844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04844");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RequestInterceptor requestInterceptor1 = builder0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        retrofit.RestAdapter restAdapter3 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor4 = restAdapter3.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        restAdapter3.server = server12;
        retrofit.Profiler profiler16 = restAdapter3.profiler;
        retrofit.ErrorHandler errorHandler17 = null;
        restAdapter3.errorHandler = errorHandler17;
        retrofit.Profiler profiler19 = null;
        restAdapter3.profiler = profiler19;
        retrofit.RestAdapter.LogLevel logLevel21 = restAdapter3.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter3.getLogLevel();
        retrofit.client.Client.Provider provider23 = null;
        restAdapter3.clientProvider = provider23;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        restAdapter3.logLevel = logLevel25;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        restAdapter3.requestInterceptor = requestInterceptor28;
        retrofit.RestAdapter.Log log30 = restAdapter3.log;
        retrofit.Server server31 = restAdapter3.server;
        retrofit.ErrorHandler errorHandler32 = restAdapter3.errorHandler;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler34 = builder33.errorHandler;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        builder33.requestInterceptor = requestInterceptor35;
        java.util.concurrent.Executor executor37 = builder33.httpExecutor;
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        log38.log("default");
        builder33.log = log38;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler43 = builder42.errorHandler;
        retrofit.client.Client.Provider provider44 = null;
        builder42.clientProvider = provider44;
        retrofit.Server server48 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder49 = builder42.setServer(server48);
        retrofit.converter.Converter converter50 = null;
        builder49.converter = converter50;
        retrofit.RestAdapter restAdapter52 = builder49.build();
        retrofit.Profiler profiler53 = builder49.profiler;
        retrofit.Profiler profiler54 = builder49.profiler;
        retrofit.client.Client.Provider provider55 = builder49.clientProvider;
        retrofit.RestAdapter.Builder builder56 = builder33.setClient(provider55);
        restAdapter3.clientProvider = provider55;
        retrofit.RestAdapter.Builder builder58 = builder0.setClient(provider55);
        retrofit.client.Client.Provider provider59 = builder58.clientProvider;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler61 = builder60.errorHandler;
        retrofit.ErrorHandler errorHandler62 = builder60.errorHandler;
        retrofit.converter.Converter converter63 = null;
        builder60.converter = converter63;
        retrofit.RequestInterceptor requestInterceptor65 = null;
        builder60.requestInterceptor = requestInterceptor65;
        retrofit.client.Client.Provider provider67 = builder60.clientProvider;
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        retrofit.Server server71 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder72 = builder68.setServer(server71);
        retrofit.RestAdapter.LogLevel logLevel73 = builder72.logLevel;
        java.util.concurrent.Executor executor74 = builder72.httpExecutor;
        retrofit.RestAdapter restAdapter75 = builder72.build();
        retrofit.ErrorHandler errorHandler76 = builder72.errorHandler;
        retrofit.RestAdapter.Builder builder77 = builder60.setErrorHandler(errorHandler76);
        retrofit.RestAdapter.Builder builder78 = builder58.setErrorHandler(errorHandler76);
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        retrofit.Server server82 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder83 = builder79.setServer(server82);
        retrofit.converter.Converter converter84 = builder79.converter;
        retrofit.RequestInterceptor requestInterceptor85 = builder79.requestInterceptor;
        java.util.concurrent.Executor executor86 = builder79.callbackExecutor;
        retrofit.Profiler profiler87 = builder79.profiler;
        java.util.concurrent.Executor executor88 = builder79.httpExecutor;
        java.util.concurrent.Executor executor89 = builder79.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel90 = builder79.logLevel;
        retrofit.converter.Converter converter91 = builder79.converter;
        retrofit.Server server92 = builder79.server;
        retrofit.RestAdapter.Builder builder93 = builder58.setServer(server92);
        java.lang.String str94 = server92.getName();
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNull(profiler16);
        org.junit.Assert.assertNull(logLevel21);
        org.junit.Assert.assertNull(logLevel22);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(log30);
        org.junit.Assert.assertNotNull(server31);
        org.junit.Assert.assertNull(errorHandler32);
        org.junit.Assert.assertNull(errorHandler34);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNull(errorHandler43);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(restAdapter52);
        org.junit.Assert.assertNull(profiler53);
        org.junit.Assert.assertNull(profiler54);
        org.junit.Assert.assertNotNull(provider55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(provider59);
        org.junit.Assert.assertNull(errorHandler61);
        org.junit.Assert.assertNull(errorHandler62);
        org.junit.Assert.assertNull(provider67);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor74);
        org.junit.Assert.assertNotNull(restAdapter75);
        org.junit.Assert.assertNotNull(errorHandler76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNull(converter84);
        org.junit.Assert.assertNull(requestInterceptor85);
        org.junit.Assert.assertNull(executor86);
        org.junit.Assert.assertNull(profiler87);
        org.junit.Assert.assertNull(executor88);
        org.junit.Assert.assertNull(executor89);
        org.junit.Assert.assertTrue("'" + logLevel90 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel90.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter91);
        org.junit.Assert.assertNotNull(server92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "hi!" + "'", str94, "hi!");
    }

    @Test
    public void test04845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04845");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        java.lang.String str13 = server9.getName();
        java.lang.String str14 = server9.getName();
        java.lang.String str15 = server9.getName();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test04846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04846");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        restAdapter12.log = log14;
        retrofit.converter.Converter converter16 = null;
        restAdapter12.converter = converter16;
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter12.new RestHandler();
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor20 = restAdapter19.callbackExecutor;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler22 = builder21.errorHandler;
        retrofit.Server server25 = new retrofit.Server("", "");
        builder21.server = server25;
        retrofit.client.Client.Provider provider27 = null;
        java.util.concurrent.Executor executor28 = null;
        java.util.concurrent.Executor executor29 = null;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        retrofit.converter.Converter converter31 = null;
        retrofit.Profiler profiler32 = null;
        retrofit.ErrorHandler errorHandler33 = null;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler35 = builder34.errorHandler;
        retrofit.Server server38 = new retrofit.Server("", "");
        builder34.server = server38;
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        builder34.log = log40;
        retrofit.Server server42 = null;
        retrofit.client.Client.Provider provider43 = null;
        java.util.concurrent.Executor executor44 = null;
        java.util.concurrent.Executor executor45 = null;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        retrofit.converter.Converter converter47 = null;
        retrofit.Profiler profiler48 = null;
        retrofit.ErrorHandler errorHandler49 = null;
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        log50.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter(server42, provider43, executor44, executor45, requestInterceptor46, converter47, profiler48, errorHandler49, log50, logLevel53);
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter(server25, provider27, executor28, executor29, requestInterceptor30, converter31, profiler32, errorHandler33, log40, logLevel53);
        restAdapter19.server = server25;
        restAdapter12.server = server25;
        retrofit.client.Header[] headerArray70 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList71 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList71, headerArray70);
        retrofit.mime.TypedOutput typedOutput73 = null;
        retrofit.client.Request request74 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList71, typedOutput73);
        retrofit.mime.TypedOutput typedOutput75 = null;
        retrofit.client.Request request76 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList71, typedOutput75);
        retrofit.mime.TypedOutput typedOutput77 = null;
        retrofit.client.Request request78 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList71, typedOutput77);
        retrofit.mime.TypedOutput typedOutput79 = null;
        retrofit.client.Request request80 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList71, typedOutput79);
        retrofit.mime.TypedOutput typedOutput81 = null;
        retrofit.client.Request request82 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList71, typedOutput81);
        java.util.List<retrofit.client.Header> headerList83 = request82.getHeaders();
        retrofit.mime.TypedOutput typedOutput84 = null;
        retrofit.client.Request request85 = new retrofit.client.Request("default", "hi!", headerList83, typedOutput84);
        retrofit.client.Request request86 = restAdapter12.logAndReplaceRequest(request85);
        retrofit.mime.TypedOutput typedOutput87 = request85.getBody();
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNull(errorHandler35);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(headerList83);
        org.junit.Assert.assertNotNull(request86);
        org.junit.Assert.assertNull(typedOutput87);
    }

    @Test
    public void test04847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04847");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.Profiler profiler3 = builder0.profiler;
        retrofit.RestAdapter.Log log4 = builder0.log;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.FULL;
        builder0.logLevel = logLevel5;
        retrofit.Profiler profiler7 = builder0.profiler;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.Server server11 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder12 = builder8.setServer(server11);
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor14 = restAdapter13.callbackExecutor;
        java.util.concurrent.Executor executor15 = restAdapter13.callbackExecutor;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler17 = restAdapter16.errorHandler;
        retrofit.Server server20 = new retrofit.Server("", "");
        restAdapter16.server = server20;
        restAdapter13.server = server20;
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        restAdapter13.log = log23;
        retrofit.RestAdapter.Builder builder25 = builder12.setLog(log23);
        retrofit.RestAdapter.Builder builder27 = builder12.setServer("hi!");
        retrofit.RestAdapter.Log log28 = builder27.log;
        builder0.log = log28;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler31 = builder30.errorHandler;
        java.util.concurrent.Executor executor32 = null;
        builder30.callbackExecutor = executor32;
        retrofit.converter.Converter converter34 = builder30.converter;
        retrofit.RestAdapter.Builder builder36 = builder30.setServer("hi!");
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler38 = builder37.errorHandler;
        retrofit.client.Client.Provider provider39 = null;
        builder37.clientProvider = provider39;
        retrofit.Server server43 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder44 = builder37.setServer(server43);
        retrofit.converter.Converter converter45 = null;
        builder44.converter = converter45;
        retrofit.RestAdapter restAdapter47 = builder44.build();
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler49 = builder48.errorHandler;
        java.util.concurrent.Executor executor50 = null;
        builder48.callbackExecutor = executor50;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider53 = builder52.clientProvider;
        java.util.concurrent.Executor executor54 = null;
        builder52.callbackExecutor = executor54;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.Server server59 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder60 = builder56.setServer(server59);
        java.lang.String str61 = server59.getUrl();
        retrofit.RestAdapter.Builder builder62 = builder52.setServer(server59);
        retrofit.RestAdapter.Builder builder63 = builder48.setServer(server59);
        restAdapter47.server = server59;
        java.util.concurrent.Executor executor65 = restAdapter47.httpExecutor;
        java.util.concurrent.Executor executor66 = restAdapter47.callbackExecutor;
        builder30.httpExecutor = executor66;
        retrofit.Server server68 = builder30.server;
        retrofit.RestAdapter.Builder builder69 = builder0.setServer(server68);
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNull(errorHandler31);
        org.junit.Assert.assertNull(converter34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(errorHandler38);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(restAdapter47);
        org.junit.Assert.assertNull(errorHandler49);
        org.junit.Assert.assertNull(provider53);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(executor65);
        org.junit.Assert.assertNotNull(executor66);
        org.junit.Assert.assertNotNull(server68);
        org.junit.Assert.assertNotNull(builder69);
    }

    @Test
    public void test04848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04848");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server6 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder7 = builder0.setServer(server6);
        retrofit.Server server10 = new retrofit.Server("", "");
        builder7.server = server10;
        retrofit.converter.Converter converter12 = null;
        builder7.converter = converter12;
        retrofit.Server server15 = new retrofit.Server("default");
        retrofit.RestAdapter.Builder builder16 = builder7.setServer(server15);
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.Server server20 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder21 = builder17.setServer(server20);
        retrofit.Server server22 = builder17.server;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.Server server26 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder27 = builder23.setServer(server26);
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor29 = restAdapter28.callbackExecutor;
        java.util.concurrent.Executor executor30 = restAdapter28.callbackExecutor;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler32 = restAdapter31.errorHandler;
        retrofit.Server server35 = new retrofit.Server("", "");
        restAdapter31.server = server35;
        restAdapter28.server = server35;
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        restAdapter28.log = log38;
        retrofit.RestAdapter.Builder builder40 = builder27.setLog(log38);
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder42 = builder27.setLogLevel(logLevel41);
        builder17.logLevel = logLevel41;
        retrofit.RestAdapter.Builder builder44 = builder7.setLogLevel(logLevel41);
        retrofit.Profiler profiler45 = builder44.profiler;
        retrofit.converter.Converter converter46 = null;
        builder44.converter = converter46;
        retrofit.Profiler profiler48 = builder44.profiler;
        retrofit.RestAdapter.LogLevel logLevel49 = builder44.logLevel;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(server22);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNull(errorHandler32);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(profiler45);
        org.junit.Assert.assertNull(profiler48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.FULL));
    }

    @Test
    public void test04849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04849");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.converter.Converter converter5 = builder0.converter;
        retrofit.RequestInterceptor requestInterceptor6 = builder0.requestInterceptor;
        java.util.concurrent.Executor executor7 = builder0.callbackExecutor;
        retrofit.Profiler profiler8 = builder0.profiler;
        java.util.concurrent.Executor executor9 = builder0.httpExecutor;
        java.util.concurrent.Executor executor10 = builder0.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel11 = builder0.logLevel;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler13 = builder12.errorHandler;
        retrofit.client.Client.Provider provider14 = null;
        builder12.clientProvider = provider14;
        retrofit.Server server18 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder19 = builder12.setServer(server18);
        retrofit.client.Client.Provider provider20 = null;
        java.util.concurrent.Executor executor21 = null;
        java.util.concurrent.Executor executor22 = null;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        retrofit.converter.Converter converter24 = null;
        retrofit.Profiler profiler25 = null;
        retrofit.ErrorHandler errorHandler26 = null;
        retrofit.Server server27 = null;
        retrofit.client.Client.Provider provider28 = null;
        java.util.concurrent.Executor executor29 = null;
        java.util.concurrent.Executor executor30 = null;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        retrofit.converter.Converter converter32 = null;
        retrofit.Profiler profiler33 = null;
        retrofit.ErrorHandler errorHandler34 = null;
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        log35.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter(server27, provider28, executor29, executor30, requestInterceptor31, converter32, profiler33, errorHandler34, log35, logLevel38);
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter(server18, provider20, executor21, executor22, requestInterceptor23, converter24, profiler25, errorHandler26, log35, logLevel40);
        retrofit.RestAdapter.Builder builder42 = builder0.setLogLevel(logLevel40);
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler44 = restAdapter43.errorHandler;
        retrofit.Server server47 = new retrofit.Server("", "");
        restAdapter43.server = server47;
        retrofit.Profiler profiler49 = null;
        restAdapter43.profiler = profiler49;
        retrofit.Profiler profiler51 = null;
        restAdapter43.profiler = profiler51;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler54 = builder53.errorHandler;
        retrofit.ErrorHandler errorHandler55 = builder53.errorHandler;
        retrofit.Profiler profiler56 = builder53.profiler;
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor58 = restAdapter57.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler59 = restAdapter57.new RestHandler();
        retrofit.Server server62 = new retrofit.Server("hi!", "hi!");
        restAdapter57.server = server62;
        retrofit.RestAdapter.Builder builder64 = builder53.setServer(server62);
        retrofit.converter.Converter converter65 = null;
        builder64.converter = converter65;
        retrofit.Server server67 = null;
        retrofit.client.Client.Provider provider68 = null;
        java.util.concurrent.Executor executor69 = null;
        java.util.concurrent.Executor executor70 = null;
        retrofit.RequestInterceptor requestInterceptor71 = null;
        retrofit.converter.Converter converter72 = null;
        retrofit.Profiler profiler73 = null;
        retrofit.ErrorHandler errorHandler74 = null;
        retrofit.RestAdapter.Log log75 = retrofit.RestAdapter.Log.NONE;
        log75.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel78 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter79 = new retrofit.RestAdapter(server67, provider68, executor69, executor70, requestInterceptor71, converter72, profiler73, errorHandler74, log75, logLevel78);
        builder64.logLevel = logLevel78;
        builder64.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor82 = builder64.requestInterceptor;
        java.util.concurrent.Executor executor83 = null;
        builder64.callbackExecutor = executor83;
        retrofit.converter.Converter converter85 = builder64.converter;
        restAdapter43.converter = converter85;
        retrofit.converter.Converter converter87 = restAdapter43.converter;
        retrofit.RestAdapter.Builder builder88 = builder0.setConverter(converter87);
        retrofit.client.Client client89 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder90 = builder0.setClient(client89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(converter5);
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(profiler8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(errorHandler44);
        org.junit.Assert.assertNull(errorHandler54);
        org.junit.Assert.assertNull(errorHandler55);
        org.junit.Assert.assertNull(profiler56);
        org.junit.Assert.assertNull(executor58);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(log75);
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(requestInterceptor82);
        org.junit.Assert.assertNotNull(converter85);
        org.junit.Assert.assertNotNull(converter87);
        org.junit.Assert.assertNotNull(builder88);
    }

    @Test
    public void test04850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04850");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter0.getLogLevel();
        retrofit.ErrorHandler errorHandler20 = null;
        restAdapter0.errorHandler = errorHandler20;
        retrofit.client.Client.Provider provider22 = null;
        restAdapter0.clientProvider = provider22;
        retrofit.ErrorHandler errorHandler24 = restAdapter0.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor26 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler28 = builder27.errorHandler;
        retrofit.client.Client.Provider provider29 = null;
        builder27.clientProvider = provider29;
        retrofit.Server server33 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder34 = builder27.setServer(server33);
        retrofit.converter.Converter converter35 = null;
        builder34.converter = converter35;
        retrofit.RestAdapter restAdapter37 = builder34.build();
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler39 = builder38.errorHandler;
        java.util.concurrent.Executor executor40 = null;
        builder38.callbackExecutor = executor40;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider43 = builder42.clientProvider;
        java.util.concurrent.Executor executor44 = null;
        builder42.callbackExecutor = executor44;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.Server server49 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder50 = builder46.setServer(server49);
        java.lang.String str51 = server49.getUrl();
        retrofit.RestAdapter.Builder builder52 = builder42.setServer(server49);
        retrofit.RestAdapter.Builder builder53 = builder38.setServer(server49);
        restAdapter37.server = server49;
        retrofit.Server server55 = restAdapter37.server;
        retrofit.RestAdapter.RestHandler restHandler56 = restAdapter37.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel57 = restAdapter37.getLogLevel();
        retrofit.client.Header[] headerArray60 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList61 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList61, headerArray60);
        retrofit.mime.TypedOutput typedOutput63 = null;
        retrofit.client.Request request64 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList61, typedOutput63);
        java.util.List<retrofit.client.Header> headerList65 = request64.getHeaders();
        java.util.List<retrofit.client.Header> headerList66 = request64.getHeaders();
        retrofit.mime.TypedOutput typedOutput67 = request64.getBody();
        retrofit.client.Request request68 = restAdapter37.logAndReplaceRequest(request64);
        java.util.concurrent.Executor executor69 = restAdapter37.httpExecutor;
        restAdapter0.callbackExecutor = executor69;
        retrofit.RequestInterceptor requestInterceptor71 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel72 = restAdapter0.logLevel;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(restAdapter37);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNull(provider43);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(server55);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(headerArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(headerList65);
        org.junit.Assert.assertNotNull(headerList66);
        org.junit.Assert.assertNull(typedOutput67);
        org.junit.Assert.assertNotNull(request68);
        org.junit.Assert.assertNotNull(executor69);
        org.junit.Assert.assertNull(requestInterceptor71);
        org.junit.Assert.assertNull(logLevel72);
    }

    @Test
    public void test04851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04851");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        java.util.concurrent.Executor executor16 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor17 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.Log log18 = restAdapter0.log;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(log18);
    }

    @Test
    public void test04852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04852");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = builder0.clientProvider;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server7 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder8 = builder4.setServer(server7);
        java.lang.String str9 = server7.getUrl();
        retrofit.RestAdapter.Builder builder10 = builder0.setServer(server7);
        builder0.ensureSaneDefaults();
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        log20.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel23);
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter24.new RestHandler();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        restAdapter24.log = log26;
        retrofit.RestAdapter.Builder builder28 = builder0.setLog(log26);
        retrofit.Profiler profiler29 = null;
        builder28.profiler = profiler29;
        retrofit.RequestInterceptor requestInterceptor31 = builder28.requestInterceptor;
        retrofit.RestAdapter restAdapter32 = builder28.build();
        retrofit.client.Header[] headerArray41 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList42 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList42, headerArray41);
        retrofit.mime.TypedOutput typedOutput44 = null;
        retrofit.client.Request request45 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList42, typedOutput44);
        retrofit.mime.TypedOutput typedOutput46 = null;
        retrofit.client.Request request47 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList42, typedOutput46);
        retrofit.mime.TypedOutput typedOutput48 = null;
        retrofit.client.Request request49 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList42, typedOutput48);
        retrofit.mime.TypedOutput typedOutput50 = null;
        retrofit.client.Request request51 = new retrofit.client.Request("", "default", (java.util.List<retrofit.client.Header>) headerList42, typedOutput50);
        retrofit.client.Request request52 = restAdapter32.logAndReplaceRequest(request51);
        retrofit.ErrorHandler errorHandler53 = restAdapter32.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler54 = restAdapter32.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler55 = restAdapter32.new RestHandler();
        org.junit.Assert.assertNull(provider1);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(requestInterceptor31);
        org.junit.Assert.assertNotNull(restAdapter32);
        org.junit.Assert.assertNotNull(headerArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(request52);
        org.junit.Assert.assertNotNull(errorHandler53);
    }

    @Test
    public void test04853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04853");
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        log14.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel17);
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter18.new RestHandler();
        java.util.concurrent.Executor executor20 = null;
        restAdapter18.callbackExecutor = executor20;
        retrofit.client.Header[] headerArray38 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList39 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList39, headerArray38);
        retrofit.mime.TypedOutput typedOutput41 = null;
        retrofit.client.Request request42 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList39, typedOutput41);
        retrofit.mime.TypedOutput typedOutput43 = null;
        retrofit.client.Request request44 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList39, typedOutput43);
        retrofit.mime.TypedOutput typedOutput45 = null;
        retrofit.client.Request request46 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList39, typedOutput45);
        retrofit.mime.TypedOutput typedOutput47 = null;
        retrofit.client.Request request48 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList39, typedOutput47);
        retrofit.mime.TypedOutput typedOutput49 = null;
        retrofit.client.Request request50 = new retrofit.client.Request("default", "hi!", (java.util.List<retrofit.client.Header>) headerList39, typedOutput49);
        retrofit.mime.TypedOutput typedOutput51 = null;
        retrofit.client.Request request52 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList39, typedOutput51);
        retrofit.mime.TypedOutput typedOutput53 = null;
        retrofit.client.Request request54 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList39, typedOutput53);
        retrofit.mime.TypedOutput typedOutput55 = null;
        retrofit.client.Request request56 = new retrofit.client.Request("hi!", "default", (java.util.List<retrofit.client.Header>) headerList39, typedOutput55);
        retrofit.client.Request request57 = restAdapter18.logAndReplaceRequest(request56);
        retrofit.client.Header[] headerArray64 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList65 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList65, headerArray64);
        retrofit.mime.TypedOutput typedOutput67 = null;
        retrofit.client.Request request68 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList65, typedOutput67);
        retrofit.mime.TypedOutput typedOutput69 = null;
        retrofit.client.Request request70 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList65, typedOutput69);
        retrofit.mime.TypedOutput typedOutput71 = null;
        retrofit.client.Request request72 = new retrofit.client.Request("", "default", (java.util.List<retrofit.client.Header>) headerList65, typedOutput71);
        java.util.List<retrofit.client.Header> headerList73 = request72.getHeaders();
        retrofit.client.Request request74 = restAdapter18.logAndReplaceRequest(request72);
        java.util.List<retrofit.client.Header> headerList75 = request72.getHeaders();
        retrofit.mime.TypedOutput typedOutput76 = null;
        retrofit.client.Request request77 = new retrofit.client.Request("", "hi!", headerList75, typedOutput76);
        retrofit.mime.TypedOutput typedOutput78 = null;
        retrofit.client.Request request79 = new retrofit.client.Request("", "default", headerList75, typedOutput78);
        retrofit.mime.TypedOutput typedOutput80 = null;
        retrofit.client.Request request81 = new retrofit.client.Request("default", "default", headerList75, typedOutput80);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(request57);
        org.junit.Assert.assertNotNull(headerArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(headerList73);
        org.junit.Assert.assertNotNull(request74);
        org.junit.Assert.assertNotNull(headerList75);
    }

    @Test
    public void test04854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04854");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler19 = builder18.errorHandler;
        retrofit.ErrorHandler errorHandler20 = builder18.errorHandler;
        retrofit.converter.Converter converter21 = null;
        builder18.converter = converter21;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        builder18.requestInterceptor = requestInterceptor23;
        retrofit.client.Client.Provider provider25 = builder18.clientProvider;
        builder18.ensureSaneDefaults();
        retrofit.client.Client.Provider provider27 = builder18.clientProvider;
        restAdapter0.clientProvider = provider27;
        retrofit.converter.Converter converter29 = restAdapter0.converter;
        java.util.concurrent.Executor executor30 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter0.logLevel;
        retrofit.RestAdapter.RestHandler restHandler32 = restAdapter0.new RestHandler();
        retrofit.Server server33 = null;
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        log41.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter(server33, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log41, logLevel44);
        retrofit.RestAdapter.RestHandler restHandler46 = restAdapter45.new RestHandler();
        retrofit.client.Header[] headerArray55 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList56 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList56, headerArray55);
        retrofit.mime.TypedOutput typedOutput58 = null;
        retrofit.client.Request request59 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList56, typedOutput58);
        retrofit.mime.TypedOutput typedOutput60 = null;
        retrofit.client.Request request61 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList56, typedOutput60);
        retrofit.mime.TypedOutput typedOutput62 = null;
        retrofit.client.Request request63 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList56, typedOutput62);
        retrofit.mime.TypedOutput typedOutput64 = null;
        retrofit.client.Request request65 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList56, typedOutput64);
        retrofit.mime.TypedOutput typedOutput66 = request65.getBody();
        retrofit.client.Request request67 = restAdapter45.logAndReplaceRequest(request65);
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor69 = restAdapter68.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean71 = logLevel70.log();
        restAdapter68.logLevel = logLevel70;
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler74 = builder73.errorHandler;
        retrofit.client.Client.Provider provider75 = null;
        builder73.clientProvider = provider75;
        retrofit.Server server79 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder80 = builder73.setServer(server79);
        retrofit.RestAdapter.Builder builder81 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler82 = builder81.errorHandler;
        retrofit.client.Client.Provider provider83 = null;
        builder81.clientProvider = provider83;
        retrofit.converter.Converter converter85 = builder81.converter;
        retrofit.RestAdapter.LogLevel logLevel86 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder87 = builder81.setLogLevel(logLevel86);
        builder73.logLevel = logLevel86;
        boolean boolean89 = logLevel86.log();
        restAdapter68.logLevel = logLevel86;
        restAdapter45.logLevel = logLevel86;
        retrofit.ErrorHandler errorHandler92 = restAdapter45.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel93 = restAdapter45.getLogLevel();
        retrofit.RestAdapter.Log log94 = restAdapter45.log;
        restAdapter0.log = log94;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNull(provider25);
        org.junit.Assert.assertNotNull(provider27);
        org.junit.Assert.assertNull(converter29);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNull(logLevel31);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(typedOutput66);
        org.junit.Assert.assertNotNull(request67);
        org.junit.Assert.assertNull(executor69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(errorHandler74);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNull(errorHandler82);
        org.junit.Assert.assertNull(converter85);
        org.junit.Assert.assertTrue("'" + logLevel86 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel86.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNull(errorHandler92);
        org.junit.Assert.assertTrue("'" + logLevel93 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel93.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(log94);
    }

    @Test
    public void test04855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04855");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server4 = new retrofit.Server("", "");
        builder0.server = server4;
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        builder0.log = log6;
        retrofit.RestAdapter.Builder builder9 = builder0.setServer("default");
        retrofit.Server server10 = null;
        retrofit.client.Client.Provider provider11 = null;
        java.util.concurrent.Executor executor12 = null;
        java.util.concurrent.Executor executor13 = null;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        retrofit.converter.Converter converter15 = null;
        retrofit.Profiler profiler16 = null;
        retrofit.ErrorHandler errorHandler17 = null;
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        log18.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter(server10, provider11, executor12, executor13, requestInterceptor14, converter15, profiler16, errorHandler17, log18, logLevel21);
        retrofit.RestAdapter.RestHandler restHandler23 = restAdapter22.new RestHandler();
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        restAdapter22.log = log24;
        retrofit.converter.Converter converter26 = null;
        restAdapter22.converter = converter26;
        retrofit.RestAdapter.RestHandler restHandler28 = restAdapter22.new RestHandler();
        retrofit.Profiler profiler29 = null;
        restAdapter22.profiler = profiler29;
        retrofit.Profiler profiler31 = null;
        restAdapter22.profiler = profiler31;
        retrofit.RestAdapter.Log log33 = restAdapter22.log;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.Server server37 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder38 = builder34.setServer(server37);
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor40 = restAdapter39.callbackExecutor;
        java.util.concurrent.Executor executor41 = restAdapter39.callbackExecutor;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler43 = restAdapter42.errorHandler;
        retrofit.Server server46 = new retrofit.Server("", "");
        restAdapter42.server = server46;
        restAdapter39.server = server46;
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        restAdapter39.log = log49;
        retrofit.RestAdapter.Builder builder51 = builder38.setLog(log49);
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder53 = builder38.setLogLevel(logLevel52);
        retrofit.Profiler profiler54 = null;
        builder53.profiler = profiler54;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.Server server59 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder60 = builder56.setServer(server59);
        retrofit.RestAdapter.LogLevel logLevel61 = builder60.logLevel;
        retrofit.RestAdapter.Builder builder62 = builder53.setLogLevel(logLevel61);
        retrofit.RestAdapter restAdapter63 = builder53.build();
        retrofit.Server server66 = new retrofit.Server("", "default");
        builder53.server = server66;
        retrofit.Profiler profiler68 = null;
        builder53.profiler = profiler68;
        retrofit.converter.Converter converter70 = builder53.converter;
        restAdapter22.converter = converter70;
        retrofit.RestAdapter.Builder builder72 = builder0.setConverter(converter70);
        java.util.concurrent.Executor executor73 = builder72.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel74 = builder72.logLevel;
        java.util.concurrent.Executor executor75 = builder72.httpExecutor;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(log18);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log24);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(executor40);
        org.junit.Assert.assertNull(executor41);
        org.junit.Assert.assertNull(errorHandler43);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(restAdapter63);
        org.junit.Assert.assertNotNull(converter70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNull(executor73);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor75);
    }

    @Test
    public void test04856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04856");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server6 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder7 = builder0.setServer(server6);
        retrofit.converter.Converter converter8 = null;
        builder7.converter = converter8;
        retrofit.RestAdapter restAdapter10 = builder7.build();
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler12 = builder11.errorHandler;
        java.util.concurrent.Executor executor13 = null;
        builder11.callbackExecutor = executor13;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider16 = builder15.clientProvider;
        java.util.concurrent.Executor executor17 = null;
        builder15.callbackExecutor = executor17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.Server server22 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder23 = builder19.setServer(server22);
        java.lang.String str24 = server22.getUrl();
        retrofit.RestAdapter.Builder builder25 = builder15.setServer(server22);
        retrofit.RestAdapter.Builder builder26 = builder11.setServer(server22);
        restAdapter10.server = server22;
        retrofit.client.Client.Provider provider28 = restAdapter10.clientProvider;
        retrofit.RestAdapter.RestHandler restHandler29 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler31 = builder30.errorHandler;
        java.util.concurrent.Executor executor32 = null;
        builder30.callbackExecutor = executor32;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider35 = builder34.clientProvider;
        java.util.concurrent.Executor executor36 = null;
        builder34.callbackExecutor = executor36;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.Server server41 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder42 = builder38.setServer(server41);
        java.lang.String str43 = server41.getUrl();
        retrofit.RestAdapter.Builder builder44 = builder34.setServer(server41);
        retrofit.RestAdapter.Builder builder45 = builder30.setServer(server41);
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider47 = builder46.clientProvider;
        java.util.concurrent.Executor executor48 = null;
        builder46.callbackExecutor = executor48;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.Server server53 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder54 = builder50.setServer(server53);
        java.lang.String str55 = server53.getUrl();
        retrofit.RestAdapter.Builder builder56 = builder46.setServer(server53);
        builder46.ensureSaneDefaults();
        retrofit.Server server58 = null;
        retrofit.client.Client.Provider provider59 = null;
        java.util.concurrent.Executor executor60 = null;
        java.util.concurrent.Executor executor61 = null;
        retrofit.RequestInterceptor requestInterceptor62 = null;
        retrofit.converter.Converter converter63 = null;
        retrofit.Profiler profiler64 = null;
        retrofit.ErrorHandler errorHandler65 = null;
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        log66.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel69 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter(server58, provider59, executor60, executor61, requestInterceptor62, converter63, profiler64, errorHandler65, log66, logLevel69);
        retrofit.RestAdapter.RestHandler restHandler71 = restAdapter70.new RestHandler();
        retrofit.RestAdapter.Log log72 = retrofit.RestAdapter.Log.NONE;
        restAdapter70.log = log72;
        retrofit.RestAdapter.Builder builder74 = builder46.setLog(log72);
        retrofit.RestAdapter.LogLevel logLevel75 = builder46.logLevel;
        retrofit.RestAdapter.Builder builder76 = builder45.setLogLevel(logLevel75);
        retrofit.Server server77 = builder76.server;
        restAdapter10.server = server77;
        java.lang.String str79 = server77.getName();
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(restAdapter10);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(provider16);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(provider28);
        org.junit.Assert.assertNull(errorHandler31);
        org.junit.Assert.assertNull(provider35);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(provider47);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(log66);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(server77);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "hi!" + "'", str79, "hi!");
    }

    @Test
    public void test04857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04857");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server4 = new retrofit.Server("", "");
        builder0.server = server4;
        java.util.concurrent.Executor executor6 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor7 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler9 = builder8.errorHandler;
        java.util.concurrent.Executor executor10 = builder8.callbackExecutor;
        retrofit.RestAdapter.Builder builder12 = builder8.setServer("hi!");
        builder12.ensureSaneDefaults();
        java.util.concurrent.Executor executor14 = builder12.callbackExecutor;
        builder0.httpExecutor = executor14;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler17 = builder16.errorHandler;
        retrofit.Server server20 = new retrofit.Server("", "");
        builder16.server = server20;
        java.util.concurrent.Executor executor22 = builder16.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel23 = null;
        builder16.logLevel = logLevel23;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler26 = builder25.errorHandler;
        retrofit.client.Client.Provider provider27 = null;
        builder25.clientProvider = provider27;
        retrofit.Server server31 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder32 = builder25.setServer(server31);
        retrofit.converter.Converter converter33 = null;
        builder32.converter = converter33;
        retrofit.RestAdapter restAdapter35 = builder32.build();
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler37 = builder36.errorHandler;
        java.util.concurrent.Executor executor38 = null;
        builder36.callbackExecutor = executor38;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider41 = builder40.clientProvider;
        java.util.concurrent.Executor executor42 = null;
        builder40.callbackExecutor = executor42;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.Server server47 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder48 = builder44.setServer(server47);
        java.lang.String str49 = server47.getUrl();
        retrofit.RestAdapter.Builder builder50 = builder40.setServer(server47);
        retrofit.RestAdapter.Builder builder51 = builder36.setServer(server47);
        restAdapter35.server = server47;
        java.util.concurrent.Executor executor53 = restAdapter35.httpExecutor;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler55 = builder54.errorHandler;
        retrofit.Server server58 = new retrofit.Server("", "");
        builder54.server = server58;
        retrofit.RestAdapter.Log log60 = retrofit.RestAdapter.Log.NONE;
        builder54.log = log60;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler63 = builder62.errorHandler;
        retrofit.client.Client.Provider provider64 = null;
        builder62.clientProvider = provider64;
        retrofit.Server server68 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder69 = builder62.setServer(server68);
        retrofit.converter.Converter converter70 = null;
        builder69.converter = converter70;
        retrofit.RestAdapter restAdapter72 = builder69.build();
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler74 = builder73.errorHandler;
        java.util.concurrent.Executor executor75 = null;
        builder73.callbackExecutor = executor75;
        retrofit.RestAdapter.Builder builder77 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider78 = builder77.clientProvider;
        java.util.concurrent.Executor executor79 = null;
        builder77.callbackExecutor = executor79;
        retrofit.RestAdapter.Builder builder81 = new retrofit.RestAdapter.Builder();
        retrofit.Server server84 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder85 = builder81.setServer(server84);
        java.lang.String str86 = server84.getUrl();
        retrofit.RestAdapter.Builder builder87 = builder77.setServer(server84);
        retrofit.RestAdapter.Builder builder88 = builder73.setServer(server84);
        restAdapter72.server = server84;
        java.util.concurrent.Executor executor90 = restAdapter72.httpExecutor;
        builder54.httpExecutor = executor90;
        retrofit.RestAdapter.Builder builder92 = builder16.setExecutors(executor53, executor90);
        builder0.callbackExecutor = executor53;
        builder0.ensureSaneDefaults();
        retrofit.Profiler profiler95 = null;
        builder0.profiler = profiler95;
        retrofit.client.Client.Provider provider97 = builder0.clientProvider;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(requestInterceptor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(executor14);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(errorHandler26);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(restAdapter35);
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNull(provider41);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(executor53);
        org.junit.Assert.assertNull(errorHandler55);
        org.junit.Assert.assertNotNull(log60);
        org.junit.Assert.assertNull(errorHandler63);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(restAdapter72);
        org.junit.Assert.assertNull(errorHandler74);
        org.junit.Assert.assertNull(provider78);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "hi!" + "'", str86, "hi!");
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(executor90);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(provider97);
    }

    @Test
    public void test04858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04858");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.Profiler profiler3 = builder0.profiler;
        retrofit.RestAdapter.Log log4 = builder0.log;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.FULL;
        builder0.logLevel = logLevel5;
        retrofit.Profiler profiler7 = builder0.profiler;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor9 = restAdapter8.callbackExecutor;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor11 = restAdapter10.callbackExecutor;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler14 = restAdapter13.errorHandler;
        retrofit.Server server17 = new retrofit.Server("", "");
        restAdapter13.server = server17;
        restAdapter10.server = server17;
        restAdapter8.server = server17;
        retrofit.Profiler profiler21 = restAdapter8.profiler;
        retrofit.ErrorHandler errorHandler22 = restAdapter8.errorHandler;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler24 = builder23.errorHandler;
        retrofit.ErrorHandler errorHandler25 = builder23.errorHandler;
        java.util.concurrent.Executor executor26 = builder23.callbackExecutor;
        java.util.concurrent.Executor executor27 = null;
        builder23.callbackExecutor = executor27;
        retrofit.Server server29 = null;
        retrofit.client.Client.Provider provider30 = null;
        java.util.concurrent.Executor executor31 = null;
        java.util.concurrent.Executor executor32 = null;
        retrofit.RequestInterceptor requestInterceptor33 = null;
        retrofit.converter.Converter converter34 = null;
        retrofit.Profiler profiler35 = null;
        retrofit.ErrorHandler errorHandler36 = null;
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        log37.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter(server29, provider30, executor31, executor32, requestInterceptor33, converter34, profiler35, errorHandler36, log37, logLevel40);
        builder23.log = log37;
        restAdapter8.log = log37;
        log37.log("default");
        retrofit.RestAdapter.Builder builder46 = builder0.setLog(log37);
        retrofit.RestAdapter.LogLevel logLevel47 = builder46.logLevel;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(profiler21);
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNull(errorHandler25);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.FULL));
    }

    @Test
    public void test04859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04859");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server4 = new retrofit.Server("", "");
        builder0.server = server4;
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        builder0.log = log6;
        retrofit.RequestInterceptor requestInterceptor8 = builder0.requestInterceptor;
        retrofit.RestAdapter.Log log9 = retrofit.RestAdapter.Log.NONE;
        log9.log("hi!");
        log9.log("hi!");
        builder0.log = log9;
        retrofit.RestAdapter.Builder builder16 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler18 = builder17.errorHandler;
        retrofit.ErrorHandler errorHandler19 = builder17.errorHandler;
        retrofit.converter.Converter converter20 = null;
        builder17.converter = converter20;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        builder17.requestInterceptor = requestInterceptor22;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider25 = builder24.clientProvider;
        java.util.concurrent.Executor executor26 = null;
        builder24.callbackExecutor = executor26;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.Server server31 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder32 = builder28.setServer(server31);
        java.lang.String str33 = server31.getUrl();
        retrofit.RestAdapter.Builder builder34 = builder24.setServer(server31);
        builder24.ensureSaneDefaults();
        retrofit.Server server36 = null;
        retrofit.client.Client.Provider provider37 = null;
        java.util.concurrent.Executor executor38 = null;
        java.util.concurrent.Executor executor39 = null;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        retrofit.converter.Converter converter41 = null;
        retrofit.Profiler profiler42 = null;
        retrofit.ErrorHandler errorHandler43 = null;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        log44.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter(server36, provider37, executor38, executor39, requestInterceptor40, converter41, profiler42, errorHandler43, log44, logLevel47);
        retrofit.RestAdapter.RestHandler restHandler49 = restAdapter48.new RestHandler();
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        restAdapter48.log = log50;
        retrofit.RestAdapter.Builder builder52 = builder24.setLog(log50);
        retrofit.RestAdapter.LogLevel logLevel53 = builder24.logLevel;
        retrofit.Server server54 = null;
        retrofit.client.Client.Provider provider55 = null;
        java.util.concurrent.Executor executor56 = null;
        java.util.concurrent.Executor executor57 = null;
        retrofit.RequestInterceptor requestInterceptor58 = null;
        retrofit.converter.Converter converter59 = null;
        retrofit.Profiler profiler60 = null;
        retrofit.ErrorHandler errorHandler61 = null;
        retrofit.RestAdapter.Log log62 = retrofit.RestAdapter.Log.NONE;
        log62.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel65 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter(server54, provider55, executor56, executor57, requestInterceptor58, converter59, profiler60, errorHandler61, log62, logLevel65);
        retrofit.RestAdapter.RestHandler restHandler67 = restAdapter66.new RestHandler();
        java.util.concurrent.Executor executor68 = null;
        restAdapter66.callbackExecutor = executor68;
        retrofit.Profiler profiler70 = null;
        restAdapter66.profiler = profiler70;
        retrofit.RestAdapter.LogLevel logLevel72 = restAdapter66.logLevel;
        builder24.logLevel = logLevel72;
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler75 = builder74.errorHandler;
        retrofit.Server server78 = new retrofit.Server("", "");
        builder74.server = server78;
        java.util.concurrent.Executor executor80 = builder74.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor81 = builder74.requestInterceptor;
        retrofit.Server server82 = builder74.server;
        builder24.server = server82;
        retrofit.RequestInterceptor requestInterceptor84 = builder24.requestInterceptor;
        retrofit.RestAdapter.Builder builder85 = builder17.setRequestInterceptor(requestInterceptor84);
        retrofit.RestAdapter.Builder builder86 = builder0.setRequestInterceptor(requestInterceptor84);
        retrofit.Profiler profiler87 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder88 = builder0.setProfiler(profiler87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertNotNull(log9);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(errorHandler18);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(provider25);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler75);
        org.junit.Assert.assertNull(executor80);
        org.junit.Assert.assertNull(requestInterceptor81);
        org.junit.Assert.assertNotNull(server82);
        org.junit.Assert.assertNotNull(requestInterceptor84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test04860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04860");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter0.getLogLevel();
        retrofit.client.Client.Provider provider20 = null;
        restAdapter0.clientProvider = provider20;
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter0.logLevel;
        retrofit.RestAdapter.RestHandler restHandler23 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter0.logLevel;
        retrofit.converter.Converter converter25 = restAdapter0.converter;
        retrofit.RestAdapter.LogLevel logLevel26 = restAdapter0.getLogLevel();
        java.util.concurrent.Executor executor27 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler28 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(logLevel22);
        org.junit.Assert.assertNull(logLevel24);
        org.junit.Assert.assertNull(converter25);
        org.junit.Assert.assertNull(logLevel26);
        org.junit.Assert.assertNull(executor27);
    }

    @Test
    public void test04861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04861");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        java.util.concurrent.Executor executor16 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor17 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor19 = restAdapter0.callbackExecutor;
        retrofit.Profiler profiler20 = null;
        restAdapter0.profiler = profiler20;
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler23 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(logLevel22);
    }

    @Test
    public void test04862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04862");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        builder0.requestInterceptor = requestInterceptor2;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("default");
        retrofit.RequestInterceptor requestInterceptor6 = builder5.requestInterceptor;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler8 = builder7.errorHandler;
        retrofit.client.Client.Provider provider9 = null;
        builder7.clientProvider = provider9;
        retrofit.Server server13 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder14 = builder7.setServer(server13);
        retrofit.converter.Converter converter15 = null;
        builder14.converter = converter15;
        retrofit.RestAdapter restAdapter17 = builder14.build();
        java.util.List<retrofit.client.Header> headerList20 = null;
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("", "hi!", headerList20, typedOutput21);
        java.lang.String str23 = request22.getUrl();
        retrofit.client.Request request24 = restAdapter17.logAndReplaceRequest(request22);
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor26 = restAdapter25.callbackExecutor;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor28 = restAdapter27.callbackExecutor;
        java.util.concurrent.Executor executor29 = restAdapter27.callbackExecutor;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler31 = restAdapter30.errorHandler;
        retrofit.Server server34 = new retrofit.Server("", "");
        restAdapter30.server = server34;
        restAdapter27.server = server34;
        restAdapter25.server = server34;
        retrofit.Profiler profiler38 = restAdapter25.profiler;
        retrofit.ErrorHandler errorHandler39 = null;
        restAdapter25.errorHandler = errorHandler39;
        retrofit.Profiler profiler41 = null;
        restAdapter25.profiler = profiler41;
        retrofit.RestAdapter.LogLevel logLevel43 = restAdapter25.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter25.getLogLevel();
        retrofit.ErrorHandler errorHandler45 = null;
        restAdapter25.errorHandler = errorHandler45;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler48 = builder47.errorHandler;
        retrofit.client.Client.Provider provider49 = null;
        builder47.clientProvider = provider49;
        retrofit.Server server53 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder54 = builder47.setServer(server53);
        retrofit.converter.Converter converter55 = null;
        builder54.converter = converter55;
        retrofit.RestAdapter restAdapter57 = builder54.build();
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler59 = builder58.errorHandler;
        java.util.concurrent.Executor executor60 = null;
        builder58.callbackExecutor = executor60;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider63 = builder62.clientProvider;
        java.util.concurrent.Executor executor64 = null;
        builder62.callbackExecutor = executor64;
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        retrofit.Server server69 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder70 = builder66.setServer(server69);
        java.lang.String str71 = server69.getUrl();
        retrofit.RestAdapter.Builder builder72 = builder62.setServer(server69);
        retrofit.RestAdapter.Builder builder73 = builder58.setServer(server69);
        restAdapter57.server = server69;
        retrofit.client.Client.Provider provider75 = restAdapter57.clientProvider;
        restAdapter25.clientProvider = provider75;
        restAdapter17.clientProvider = provider75;
        retrofit.RestAdapter.Builder builder78 = builder5.setClient(provider75);
        retrofit.Server server81 = new retrofit.Server("hi!", "default");
        java.lang.String str82 = server81.getUrl();
        java.lang.String str83 = server81.getUrl();
        retrofit.RestAdapter.Builder builder84 = builder5.setServer(server81);
        retrofit.RequestInterceptor requestInterceptor85 = builder5.requestInterceptor;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(restAdapter17);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNotNull(request24);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(errorHandler31);
        org.junit.Assert.assertNull(profiler38);
        org.junit.Assert.assertNull(logLevel43);
        org.junit.Assert.assertNull(logLevel44);
        org.junit.Assert.assertNull(errorHandler48);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(restAdapter57);
        org.junit.Assert.assertNull(errorHandler59);
        org.junit.Assert.assertNull(provider63);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(provider75);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "hi!" + "'", str82, "hi!");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "hi!" + "'", str83, "hi!");
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNull(requestInterceptor85);
    }

    @Test
    public void test04863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04863");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter0.getLogLevel();
        retrofit.client.Client.Provider provider20 = null;
        restAdapter0.clientProvider = provider20;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean23 = logLevel22.log();
        restAdapter0.logLevel = logLevel22;
        retrofit.RestAdapter.Log log25 = restAdapter0.log;
        retrofit.Profiler profiler26 = restAdapter0.profiler;
        retrofit.client.Header[] headerArray29 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList30 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList30, headerArray29);
        retrofit.mime.TypedOutput typedOutput32 = null;
        retrofit.client.Request request33 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList30, typedOutput32);
        java.util.List<retrofit.client.Header> headerList34 = request33.getHeaders();
        java.util.List<retrofit.client.Header> headerList35 = request33.getHeaders();
        retrofit.mime.TypedOutput typedOutput36 = request33.getBody();
        java.util.List<retrofit.client.Header> headerList37 = request33.getHeaders();
        java.lang.String str38 = request33.getMethod();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request39 = restAdapter0.logAndReplaceRequest(request33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(log25);
        org.junit.Assert.assertNull(profiler26);
        org.junit.Assert.assertNotNull(headerArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(headerList34);
        org.junit.Assert.assertNotNull(headerList35);
        org.junit.Assert.assertNull(typedOutput36);
        org.junit.Assert.assertNotNull(headerList37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
    }

    @Test
    public void test04864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04864");
        retrofit.client.Header[] headerArray14 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList15 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList15, headerArray14);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList15, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList15, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("", "default", (java.util.List<retrofit.client.Header>) headerList15, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList15, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("hi!", "default", (java.util.List<retrofit.client.Header>) headerList15, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList15, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList15, typedOutput29);
        java.lang.String str31 = request30.getUrl();
        org.junit.Assert.assertNotNull(headerArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
    }

    @Test
    public void test04865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04865");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        java.util.concurrent.Executor executor3 = builder0.callbackExecutor;
        java.util.concurrent.Executor executor4 = null;
        builder0.callbackExecutor = executor4;
        retrofit.Server server6 = builder0.server;
        retrofit.client.Client.Provider provider7 = builder0.clientProvider;
        java.util.concurrent.Executor executor8 = builder0.httpExecutor;
        retrofit.client.Client client9 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder10 = builder0.setClient(client9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertNull(provider7);
        org.junit.Assert.assertNull(executor8);
    }

    @Test
    public void test04866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04866");
        retrofit.client.Header[] headerArray22 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList23 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList23, headerArray22);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList23, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList23, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList23, typedOutput29);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList23, typedOutput31);
        retrofit.mime.TypedOutput typedOutput33 = null;
        retrofit.client.Request request34 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList23, typedOutput33);
        retrofit.mime.TypedOutput typedOutput35 = null;
        retrofit.client.Request request36 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList23, typedOutput35);
        retrofit.mime.TypedOutput typedOutput37 = null;
        retrofit.client.Request request38 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList23, typedOutput37);
        retrofit.mime.TypedOutput typedOutput39 = null;
        retrofit.client.Request request40 = new retrofit.client.Request("default", "hi!", (java.util.List<retrofit.client.Header>) headerList23, typedOutput39);
        retrofit.mime.TypedOutput typedOutput41 = null;
        retrofit.client.Request request42 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList23, typedOutput41);
        retrofit.mime.TypedOutput typedOutput43 = null;
        retrofit.client.Request request44 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList23, typedOutput43);
        retrofit.mime.TypedOutput typedOutput45 = null;
        retrofit.client.Request request46 = new retrofit.client.Request("default", "default", (java.util.List<retrofit.client.Header>) headerList23, typedOutput45);
        org.junit.Assert.assertNotNull(headerArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test04867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04867");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        restAdapter12.log = log14;
        retrofit.converter.Converter converter16 = null;
        restAdapter12.converter = converter16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server21 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder22 = builder18.setServer(server21);
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor24 = restAdapter23.callbackExecutor;
        java.util.concurrent.Executor executor25 = restAdapter23.callbackExecutor;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler27 = restAdapter26.errorHandler;
        retrofit.Server server30 = new retrofit.Server("", "");
        restAdapter26.server = server30;
        restAdapter23.server = server30;
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        restAdapter23.log = log33;
        retrofit.RestAdapter.Builder builder35 = builder22.setLog(log33);
        restAdapter12.log = log33;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler38 = builder37.errorHandler;
        retrofit.Server server41 = new retrofit.Server("", "");
        builder37.server = server41;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor44 = restAdapter43.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler45 = restAdapter43.new RestHandler();
        retrofit.Server server48 = new retrofit.Server("hi!", "hi!");
        restAdapter43.server = server48;
        retrofit.RestAdapter.Builder builder50 = builder37.setServer(server48);
        restAdapter12.server = server48;
        retrofit.Profiler profiler52 = restAdapter12.profiler;
        retrofit.Server server53 = restAdapter12.server;
        retrofit.RestAdapter.RestHandler restHandler54 = restAdapter12.new RestHandler();
        retrofit.converter.Converter converter55 = restAdapter12.converter;
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(errorHandler38);
        org.junit.Assert.assertNull(executor44);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(profiler52);
        org.junit.Assert.assertNotNull(server53);
        org.junit.Assert.assertNull(converter55);
    }

    @Test
    public void test04868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04868");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.ErrorHandler errorHandler3 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel6 = builder0.logLevel;
        retrofit.RestAdapter.Log log7 = builder0.log;
        retrofit.ErrorHandler errorHandler8 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder10 = builder0.setServer("default");
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler12 = builder11.errorHandler;
        retrofit.ErrorHandler errorHandler13 = builder11.errorHandler;
        java.util.concurrent.Executor executor14 = builder11.callbackExecutor;
        retrofit.Profiler profiler15 = builder11.profiler;
        builder11.ensureSaneDefaults();
        builder11.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider19 = builder18.clientProvider;
        java.util.concurrent.Executor executor20 = null;
        builder18.callbackExecutor = executor20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.Server server25 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder26 = builder22.setServer(server25);
        java.lang.String str27 = server25.getUrl();
        retrofit.RestAdapter.Builder builder28 = builder18.setServer(server25);
        builder18.ensureSaneDefaults();
        retrofit.Server server30 = null;
        retrofit.client.Client.Provider provider31 = null;
        java.util.concurrent.Executor executor32 = null;
        java.util.concurrent.Executor executor33 = null;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        retrofit.converter.Converter converter35 = null;
        retrofit.Profiler profiler36 = null;
        retrofit.ErrorHandler errorHandler37 = null;
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        log38.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter(server30, provider31, executor32, executor33, requestInterceptor34, converter35, profiler36, errorHandler37, log38, logLevel41);
        retrofit.RestAdapter.RestHandler restHandler43 = restAdapter42.new RestHandler();
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        restAdapter42.log = log44;
        retrofit.RestAdapter.Builder builder46 = builder18.setLog(log44);
        retrofit.RestAdapter.Builder builder48 = builder18.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor49 = builder18.requestInterceptor;
        retrofit.RestAdapter.Builder builder50 = builder11.setRequestInterceptor(requestInterceptor49);
        retrofit.RestAdapter.Builder builder51 = builder0.setRequestInterceptor(requestInterceptor49);
        retrofit.Profiler profiler52 = builder0.profiler;
        java.util.concurrent.Executor executor53 = builder0.httpExecutor;
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNull(provider19);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(requestInterceptor49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(profiler52);
        org.junit.Assert.assertNull(executor53);
    }

    @Test
    public void test04869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04869");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter0.logLevel = logLevel19;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler22 = builder21.errorHandler;
        retrofit.client.Client.Provider provider23 = null;
        builder21.clientProvider = provider23;
        retrofit.Server server27 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder28 = builder21.setServer(server27);
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler30 = builder29.errorHandler;
        retrofit.client.Client.Provider provider31 = null;
        builder29.clientProvider = provider31;
        retrofit.converter.Converter converter33 = builder29.converter;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder35 = builder29.setLogLevel(logLevel34);
        builder21.logLevel = logLevel34;
        restAdapter0.logLevel = logLevel34;
        java.util.concurrent.Executor executor38 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel39 = restAdapter0.logLevel;
        retrofit.RestAdapter.LogLevel logLevel40 = restAdapter0.logLevel;
        retrofit.client.Header[] headerArray53 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList54 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList54, headerArray53);
        retrofit.mime.TypedOutput typedOutput56 = null;
        retrofit.client.Request request57 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList54, typedOutput56);
        retrofit.mime.TypedOutput typedOutput58 = null;
        retrofit.client.Request request59 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList54, typedOutput58);
        retrofit.mime.TypedOutput typedOutput60 = null;
        retrofit.client.Request request61 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList54, typedOutput60);
        retrofit.mime.TypedOutput typedOutput62 = null;
        retrofit.client.Request request63 = new retrofit.client.Request("default", "hi!", (java.util.List<retrofit.client.Header>) headerList54, typedOutput62);
        retrofit.mime.TypedOutput typedOutput64 = null;
        retrofit.client.Request request65 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList54, typedOutput64);
        retrofit.mime.TypedOutput typedOutput66 = null;
        retrofit.client.Request request67 = new retrofit.client.Request("hi!", "default", (java.util.List<retrofit.client.Header>) headerList54, typedOutput66);
        java.util.List<retrofit.client.Header> headerList68 = request67.getHeaders();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request69 = restAdapter0.logAndReplaceRequest(request67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(errorHandler30);
        org.junit.Assert.assertNull(converter33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(headerArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(headerList68);
    }

    @Test
    public void test04870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04870");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = null;
        restAdapter0.httpExecutor = executor2;
        retrofit.RestAdapter.RestHandler restHandler4 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter0.logLevel;
        retrofit.ErrorHandler errorHandler6 = null;
        restAdapter0.errorHandler = errorHandler6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.Server server11 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder12 = builder8.setServer(server11);
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor14 = restAdapter13.callbackExecutor;
        java.util.concurrent.Executor executor15 = restAdapter13.callbackExecutor;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler17 = restAdapter16.errorHandler;
        retrofit.Server server20 = new retrofit.Server("", "");
        restAdapter16.server = server20;
        restAdapter13.server = server20;
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        restAdapter13.log = log23;
        retrofit.RestAdapter.Builder builder25 = builder12.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder27 = builder12.setLogLevel(logLevel26);
        retrofit.Profiler profiler28 = null;
        builder27.profiler = profiler28;
        retrofit.converter.Converter converter30 = null;
        builder27.converter = converter30;
        retrofit.ErrorHandler errorHandler32 = null;
        builder27.errorHandler = errorHandler32;
        retrofit.RestAdapter restAdapter34 = builder27.build();
        retrofit.ErrorHandler errorHandler35 = builder27.errorHandler;
        restAdapter0.errorHandler = errorHandler35;
        java.util.concurrent.Executor executor37 = restAdapter0.httpExecutor;
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(restAdapter34);
        org.junit.Assert.assertNotNull(errorHandler35);
        org.junit.Assert.assertNull(executor37);
    }

    @Test
    public void test04871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04871");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter0.getLogLevel();
        retrofit.client.Client.Provider provider20 = null;
        restAdapter0.clientProvider = provider20;
        retrofit.converter.Converter converter22 = restAdapter0.converter;
        retrofit.ErrorHandler errorHandler23 = restAdapter0.errorHandler;
        retrofit.ErrorHandler errorHandler24 = restAdapter0.errorHandler;
        retrofit.Profiler profiler25 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler26 = restAdapter0.new RestHandler();
        retrofit.Profiler profiler27 = null;
        restAdapter0.profiler = profiler27;
        retrofit.Server server29 = restAdapter0.server;
        java.util.concurrent.Executor executor30 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider32 = builder31.clientProvider;
        java.util.concurrent.Executor executor33 = null;
        builder31.callbackExecutor = executor33;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.Server server38 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder39 = builder35.setServer(server38);
        java.lang.String str40 = server38.getUrl();
        retrofit.RestAdapter.Builder builder41 = builder31.setServer(server38);
        builder31.ensureSaneDefaults();
        retrofit.Server server43 = null;
        retrofit.client.Client.Provider provider44 = null;
        java.util.concurrent.Executor executor45 = null;
        java.util.concurrent.Executor executor46 = null;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        retrofit.converter.Converter converter48 = null;
        retrofit.Profiler profiler49 = null;
        retrofit.ErrorHandler errorHandler50 = null;
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        log51.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter(server43, provider44, executor45, executor46, requestInterceptor47, converter48, profiler49, errorHandler50, log51, logLevel54);
        retrofit.RestAdapter.RestHandler restHandler56 = restAdapter55.new RestHandler();
        retrofit.RestAdapter.Log log57 = retrofit.RestAdapter.Log.NONE;
        restAdapter55.log = log57;
        retrofit.RestAdapter.Builder builder59 = builder31.setLog(log57);
        retrofit.RestAdapter.Builder builder61 = builder31.setServer("hi!");
        retrofit.RestAdapter.Builder builder63 = builder61.setServer("hi!");
        retrofit.ErrorHandler errorHandler64 = builder61.errorHandler;
        restAdapter0.errorHandler = errorHandler64;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(converter22);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNull(profiler25);
        org.junit.Assert.assertNotNull(server29);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNull(provider32);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(errorHandler64);
    }

    @Test
    public void test04872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04872");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        restAdapter5.log = log15;
        retrofit.RestAdapter.Builder builder17 = builder4.setLog(log15);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder19 = builder4.setLogLevel(logLevel18);
        retrofit.Profiler profiler20 = null;
        builder19.profiler = profiler20;
        java.util.concurrent.Executor executor22 = null;
        builder19.httpExecutor = executor22;
        retrofit.RestAdapter restAdapter24 = builder19.build();
        retrofit.Server server25 = builder19.server;
        java.lang.String str26 = server25.getUrl();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(restAdapter24);
        org.junit.Assert.assertNotNull(server25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
    }

    @Test
    public void test04873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04873");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server4 = new retrofit.Server("", "");
        builder0.server = server4;
        retrofit.client.Client.Provider provider6 = builder0.clientProvider;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler8 = builder7.errorHandler;
        java.util.concurrent.Executor executor9 = null;
        builder7.callbackExecutor = executor9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider12 = builder11.clientProvider;
        java.util.concurrent.Executor executor13 = null;
        builder11.callbackExecutor = executor13;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.Server server18 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder19 = builder15.setServer(server18);
        java.lang.String str20 = server18.getUrl();
        retrofit.RestAdapter.Builder builder21 = builder11.setServer(server18);
        retrofit.RestAdapter.Builder builder22 = builder7.setServer(server18);
        retrofit.RestAdapter.Builder builder23 = builder0.setServer(server18);
        retrofit.RestAdapter restAdapter24 = builder0.build();
        retrofit.RequestInterceptor requestInterceptor25 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler27 = builder26.errorHandler;
        retrofit.Server server30 = new retrofit.Server("", "");
        builder26.server = server30;
        java.util.concurrent.Executor executor32 = builder26.callbackExecutor;
        retrofit.converter.Converter converter33 = null;
        builder26.converter = converter33;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider36 = builder35.clientProvider;
        java.util.concurrent.Executor executor37 = null;
        builder35.callbackExecutor = executor37;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.Server server42 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder43 = builder39.setServer(server42);
        java.lang.String str44 = server42.getUrl();
        retrofit.RestAdapter.Builder builder45 = builder35.setServer(server42);
        builder35.ensureSaneDefaults();
        retrofit.Server server47 = null;
        retrofit.client.Client.Provider provider48 = null;
        java.util.concurrent.Executor executor49 = null;
        java.util.concurrent.Executor executor50 = null;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        retrofit.converter.Converter converter52 = null;
        retrofit.Profiler profiler53 = null;
        retrofit.ErrorHandler errorHandler54 = null;
        retrofit.RestAdapter.Log log55 = retrofit.RestAdapter.Log.NONE;
        log55.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter(server47, provider48, executor49, executor50, requestInterceptor51, converter52, profiler53, errorHandler54, log55, logLevel58);
        retrofit.RestAdapter.RestHandler restHandler60 = restAdapter59.new RestHandler();
        retrofit.RestAdapter.Log log61 = retrofit.RestAdapter.Log.NONE;
        restAdapter59.log = log61;
        retrofit.RestAdapter.Builder builder63 = builder35.setLog(log61);
        retrofit.RestAdapter.Builder builder65 = builder35.setServer("hi!");
        retrofit.client.Client.Provider provider66 = builder35.clientProvider;
        retrofit.RestAdapter.Builder builder67 = builder26.setClient(provider66);
        retrofit.RestAdapter.Builder builder68 = builder0.setClient(provider66);
        retrofit.Profiler profiler69 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder70 = builder68.setProfiler(profiler69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(provider6);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(restAdapter24);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(provider36);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(provider66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
    }

    @Test
    public void test04874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04874");
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        log12.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel15);
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter16.new RestHandler();
        retrofit.client.Header[] headerArray26 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList27 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList27, headerArray26);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList27, typedOutput29);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList27, typedOutput31);
        retrofit.mime.TypedOutput typedOutput33 = null;
        retrofit.client.Request request34 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList27, typedOutput33);
        retrofit.mime.TypedOutput typedOutput35 = null;
        retrofit.client.Request request36 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList27, typedOutput35);
        retrofit.mime.TypedOutput typedOutput37 = request36.getBody();
        retrofit.client.Request request38 = restAdapter16.logAndReplaceRequest(request36);
        retrofit.mime.TypedOutput typedOutput39 = request36.getBody();
        retrofit.mime.TypedOutput typedOutput40 = request36.getBody();
        java.util.List<retrofit.client.Header> headerList41 = request36.getHeaders();
        java.util.List<retrofit.client.Header> headerList42 = request36.getHeaders();
        retrofit.mime.TypedOutput typedOutput43 = null;
        retrofit.client.Request request44 = new retrofit.client.Request("hi!", "hi!", headerList42, typedOutput43);
        retrofit.mime.TypedOutput typedOutput45 = null;
        retrofit.client.Request request46 = new retrofit.client.Request("default", "default", headerList42, typedOutput45);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(typedOutput37);
        org.junit.Assert.assertNotNull(request38);
        org.junit.Assert.assertNull(typedOutput39);
        org.junit.Assert.assertNull(typedOutput40);
        org.junit.Assert.assertNotNull(headerList41);
        org.junit.Assert.assertNotNull(headerList42);
    }

    @Test
    public void test04875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04875");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server6 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder7 = builder0.setServer(server6);
        retrofit.Server server10 = new retrofit.Server("", "");
        builder7.server = server10;
        retrofit.Profiler profiler12 = builder7.profiler;
        retrofit.RestAdapter.Builder builder14 = builder7.setServer("hi!");
        retrofit.RestAdapter restAdapter15 = builder7.build();
        retrofit.Server server16 = restAdapter15.server;
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter15.new RestHandler();
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(profiler12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(restAdapter15);
        org.junit.Assert.assertNotNull(server16);
    }

    @Test
    public void test04876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04876");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        java.util.concurrent.Executor executor14 = null;
        restAdapter12.callbackExecutor = executor14;
        retrofit.client.Header[] headerArray18 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList19 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList19, headerArray18);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList19, typedOutput21);
        retrofit.client.Request request23 = restAdapter12.logAndReplaceRequest(request22);
        retrofit.client.Client.Provider provider24 = restAdapter12.clientProvider;
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler27 = builder26.errorHandler;
        java.util.concurrent.Executor executor28 = builder26.callbackExecutor;
        retrofit.RestAdapter.Builder builder30 = builder26.setServer("hi!");
        retrofit.Server server33 = new retrofit.Server("default", "hi!");
        java.lang.String str34 = server33.getUrl();
        retrofit.RestAdapter.Builder builder35 = builder30.setServer(server33);
        retrofit.RestAdapter.LogLevel logLevel36 = builder35.logLevel;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.Server server40 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder41 = builder37.setServer(server40);
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor43 = restAdapter42.callbackExecutor;
        java.util.concurrent.Executor executor44 = restAdapter42.callbackExecutor;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler46 = restAdapter45.errorHandler;
        retrofit.Server server49 = new retrofit.Server("", "");
        restAdapter45.server = server49;
        restAdapter42.server = server49;
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        restAdapter42.log = log52;
        retrofit.RestAdapter.Builder builder54 = builder41.setLog(log52);
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder56 = builder41.setLogLevel(logLevel55);
        retrofit.Profiler profiler57 = null;
        builder56.profiler = profiler57;
        retrofit.converter.Converter converter59 = null;
        builder56.converter = converter59;
        retrofit.ErrorHandler errorHandler61 = null;
        builder56.errorHandler = errorHandler61;
        retrofit.RestAdapter restAdapter63 = builder56.build();
        retrofit.ErrorHandler errorHandler64 = builder56.errorHandler;
        builder35.errorHandler = errorHandler64;
        restAdapter12.errorHandler = errorHandler64;
        retrofit.RestAdapter.LogLevel logLevel67 = restAdapter12.logLevel;
        boolean boolean68 = logLevel67.log();
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertNull(provider24);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "default" + "'", str34, "default");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(executor43);
        org.junit.Assert.assertNull(executor44);
        org.junit.Assert.assertNull(errorHandler46);
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(restAdapter63);
        org.junit.Assert.assertNotNull(errorHandler64);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test04877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04877");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = null;
        restAdapter0.callbackExecutor = executor2;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.client.Client.Provider provider6 = restAdapter0.clientProvider;
        java.lang.Throwable throwable7 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable7, "default");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(provider6);
    }

    @Test
    public void test04878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04878");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler22 = builder21.errorHandler;
        java.util.concurrent.Executor executor23 = null;
        builder21.callbackExecutor = executor23;
        retrofit.converter.Converter converter25 = builder21.converter;
        retrofit.RestAdapter.Builder builder27 = builder21.setServer("hi!");
        builder21.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor30 = restAdapter29.callbackExecutor;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor32 = restAdapter31.callbackExecutor;
        java.util.concurrent.Executor executor33 = restAdapter31.callbackExecutor;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler35 = restAdapter34.errorHandler;
        retrofit.Server server38 = new retrofit.Server("", "");
        restAdapter34.server = server38;
        restAdapter31.server = server38;
        restAdapter29.server = server38;
        java.lang.String str42 = server38.getName();
        builder21.server = server38;
        java.lang.String str44 = server38.getName();
        restAdapter0.server = server38;
        retrofit.RestAdapter.LogLevel logLevel46 = restAdapter0.logLevel;
        retrofit.Profiler profiler47 = null;
        restAdapter0.profiler = profiler47;
        retrofit.converter.Converter converter49 = restAdapter0.converter;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNull(converter25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertNull(errorHandler35);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNull(logLevel46);
        org.junit.Assert.assertNull(converter49);
    }

    @Test
    public void test04879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04879");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        java.util.concurrent.Executor executor3 = builder0.callbackExecutor;
        retrofit.Profiler profiler4 = builder0.profiler;
        retrofit.ErrorHandler errorHandler5 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler7 = null;
        builder6.errorHandler = errorHandler7;
        retrofit.ErrorHandler errorHandler9 = builder6.errorHandler;
        retrofit.RestAdapter.Builder builder11 = builder6.setServer("hi!");
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler13 = builder12.errorHandler;
        retrofit.ErrorHandler errorHandler14 = builder12.errorHandler;
        retrofit.Profiler profiler15 = builder12.profiler;
        retrofit.RestAdapter.Log log16 = builder12.log;
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.FULL;
        builder12.logLevel = logLevel17;
        retrofit.RestAdapter.Builder builder19 = builder11.setLogLevel(logLevel17);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler21 = builder20.errorHandler;
        retrofit.Server server24 = new retrofit.Server("", "");
        builder20.server = server24;
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        builder20.log = log26;
        builder11.log = log26;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.Server server32 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder33 = builder29.setServer(server32);
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor35 = restAdapter34.callbackExecutor;
        java.util.concurrent.Executor executor36 = restAdapter34.callbackExecutor;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler38 = restAdapter37.errorHandler;
        retrofit.Server server41 = new retrofit.Server("", "");
        restAdapter37.server = server41;
        restAdapter34.server = server41;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        restAdapter34.log = log44;
        retrofit.RestAdapter.Builder builder46 = builder33.setLog(log44);
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder48 = builder33.setLogLevel(logLevel47);
        retrofit.Profiler profiler49 = null;
        builder48.profiler = profiler49;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.Server server54 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder55 = builder51.setServer(server54);
        retrofit.RestAdapter.LogLevel logLevel56 = builder55.logLevel;
        retrofit.RestAdapter.Builder builder57 = builder48.setLogLevel(logLevel56);
        retrofit.RestAdapter restAdapter58 = builder48.build();
        retrofit.RestAdapter.RestHandler restHandler59 = restAdapter58.new RestHandler();
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler61 = builder60.errorHandler;
        retrofit.client.Client.Provider provider62 = null;
        builder60.clientProvider = provider62;
        retrofit.Server server66 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder67 = builder60.setServer(server66);
        retrofit.converter.Converter converter68 = null;
        builder67.converter = converter68;
        retrofit.RestAdapter restAdapter70 = builder67.build();
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler72 = builder71.errorHandler;
        java.util.concurrent.Executor executor73 = null;
        builder71.callbackExecutor = executor73;
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider76 = builder75.clientProvider;
        java.util.concurrent.Executor executor77 = null;
        builder75.callbackExecutor = executor77;
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        retrofit.Server server82 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder83 = builder79.setServer(server82);
        java.lang.String str84 = server82.getUrl();
        retrofit.RestAdapter.Builder builder85 = builder75.setServer(server82);
        retrofit.RestAdapter.Builder builder86 = builder71.setServer(server82);
        restAdapter70.server = server82;
        retrofit.Server server88 = restAdapter70.server;
        retrofit.RestAdapter.RestHandler restHandler89 = restAdapter70.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel90 = restAdapter70.getLogLevel();
        restAdapter58.setLogLevel(logLevel90);
        retrofit.converter.Converter converter92 = restAdapter58.converter;
        builder11.converter = converter92;
        retrofit.RestAdapter.Builder builder94 = builder0.setConverter(converter92);
        java.util.concurrent.Executor executor95 = builder94.httpExecutor;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(errorHandler5);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNull(log16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertNull(executor36);
        org.junit.Assert.assertNull(errorHandler38);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(restAdapter58);
        org.junit.Assert.assertNull(errorHandler61);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(restAdapter70);
        org.junit.Assert.assertNull(errorHandler72);
        org.junit.Assert.assertNull(provider76);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "hi!" + "'", str84, "hi!");
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(server88);
        org.junit.Assert.assertTrue("'" + logLevel90 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel90.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(converter92);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNull(executor95);
    }

    @Test
    public void test04880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04880");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        java.util.concurrent.Executor executor5 = builder0.callbackExecutor;
        retrofit.client.Client.Provider provider6 = builder0.clientProvider;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(provider6);
    }

    @Test
    public void test04881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04881");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = builder0.clientProvider;
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("default");
        retrofit.converter.Converter converter4 = builder3.converter;
        retrofit.Profiler profiler5 = null;
        builder3.profiler = profiler5;
        retrofit.RequestInterceptor requestInterceptor7 = builder3.requestInterceptor;
        org.junit.Assert.assertNull(provider1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertNull(requestInterceptor7);
    }

    @Test
    public void test04882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04882");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server6 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder7 = builder0.setServer(server6);
        retrofit.converter.Converter converter8 = null;
        builder7.converter = converter8;
        retrofit.RestAdapter restAdapter10 = builder7.build();
        retrofit.Server server11 = builder7.server;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler13 = builder12.errorHandler;
        retrofit.Server server16 = new retrofit.Server("", "");
        builder12.server = server16;
        retrofit.client.Client.Provider provider18 = builder12.clientProvider;
        java.util.concurrent.Executor executor19 = builder12.callbackExecutor;
        retrofit.client.Client.Provider provider20 = builder12.clientProvider;
        retrofit.converter.Converter converter21 = null;
        builder12.converter = converter21;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler24 = builder23.errorHandler;
        retrofit.ErrorHandler errorHandler25 = builder23.errorHandler;
        retrofit.Profiler profiler26 = builder23.profiler;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor28 = restAdapter27.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler29 = restAdapter27.new RestHandler();
        retrofit.Server server32 = new retrofit.Server("hi!", "hi!");
        restAdapter27.server = server32;
        retrofit.RestAdapter.Builder builder34 = builder23.setServer(server32);
        retrofit.converter.Converter converter35 = null;
        builder34.converter = converter35;
        builder34.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter38 = builder34.build();
        retrofit.Profiler profiler39 = builder34.profiler;
        retrofit.converter.Converter converter40 = builder34.converter;
        retrofit.RestAdapter.Builder builder41 = builder12.setConverter(converter40);
        builder7.converter = converter40;
        retrofit.client.Client.Provider provider43 = null;
        builder7.clientProvider = provider43;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(restAdapter10);
        org.junit.Assert.assertNotNull(server11);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(provider18);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(provider20);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNull(errorHandler25);
        org.junit.Assert.assertNull(profiler26);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(restAdapter38);
        org.junit.Assert.assertNull(profiler39);
        org.junit.Assert.assertNotNull(converter40);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test04883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04883");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        restAdapter5.log = log15;
        retrofit.RestAdapter.Builder builder17 = builder4.setLog(log15);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder19 = builder4.setLogLevel(logLevel18);
        retrofit.Profiler profiler20 = null;
        builder19.profiler = profiler20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.Server server25 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder26 = builder22.setServer(server25);
        retrofit.RestAdapter.LogLevel logLevel27 = builder26.logLevel;
        retrofit.RestAdapter.Builder builder28 = builder19.setLogLevel(logLevel27);
        retrofit.RestAdapter restAdapter29 = builder19.build();
        retrofit.Server server32 = new retrofit.Server("", "default");
        builder19.server = server32;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.Server server37 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder38 = builder34.setServer(server37);
        retrofit.Server server39 = builder34.server;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.Server server43 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder44 = builder40.setServer(server43);
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor46 = restAdapter45.callbackExecutor;
        java.util.concurrent.Executor executor47 = restAdapter45.callbackExecutor;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler49 = restAdapter48.errorHandler;
        retrofit.Server server52 = new retrofit.Server("", "");
        restAdapter48.server = server52;
        restAdapter45.server = server52;
        retrofit.RestAdapter.Log log55 = retrofit.RestAdapter.Log.NONE;
        restAdapter45.log = log55;
        retrofit.RestAdapter.Builder builder57 = builder44.setLog(log55);
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder59 = builder44.setLogLevel(logLevel58);
        builder34.logLevel = logLevel58;
        java.util.concurrent.Executor executor61 = builder34.callbackExecutor;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.Server server65 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder66 = builder62.setServer(server65);
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor68 = restAdapter67.callbackExecutor;
        java.util.concurrent.Executor executor69 = restAdapter67.callbackExecutor;
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler71 = restAdapter70.errorHandler;
        retrofit.Server server74 = new retrofit.Server("", "");
        restAdapter70.server = server74;
        restAdapter67.server = server74;
        retrofit.RestAdapter.Log log77 = retrofit.RestAdapter.Log.NONE;
        restAdapter67.log = log77;
        retrofit.RestAdapter.Builder builder79 = builder66.setLog(log77);
        retrofit.RestAdapter.LogLevel logLevel80 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder81 = builder66.setLogLevel(logLevel80);
        retrofit.Profiler profiler82 = null;
        builder81.profiler = profiler82;
        java.util.concurrent.Executor executor84 = null;
        builder81.httpExecutor = executor84;
        retrofit.RestAdapter restAdapter86 = builder81.build();
        retrofit.client.Client.Provider provider87 = restAdapter86.clientProvider;
        retrofit.converter.Converter converter88 = restAdapter86.converter;
        retrofit.RestAdapter.Builder builder89 = builder34.setConverter(converter88);
        builder19.converter = converter88;
        retrofit.RestAdapter.Builder builder92 = builder19.setServer("default");
        retrofit.RestAdapter.Builder builder94 = builder92.setServer("default");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(restAdapter29);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(server39);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(executor46);
        org.junit.Assert.assertNull(executor47);
        org.junit.Assert.assertNull(errorHandler49);
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(executor61);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(executor68);
        org.junit.Assert.assertNull(executor69);
        org.junit.Assert.assertNull(errorHandler71);
        org.junit.Assert.assertNotNull(log77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertTrue("'" + logLevel80 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel80.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(restAdapter86);
        org.junit.Assert.assertNotNull(provider87);
        org.junit.Assert.assertNotNull(converter88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder94);
    }

    @Test
    public void test04884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04884");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.converter.Converter converter3 = null;
        builder0.converter = converter3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        builder0.requestInterceptor = requestInterceptor5;
        retrofit.RestAdapter.Log log7 = builder0.log;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor9 = restAdapter8.callbackExecutor;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor11 = restAdapter10.callbackExecutor;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler14 = restAdapter13.errorHandler;
        retrofit.Server server17 = new retrofit.Server("", "");
        restAdapter13.server = server17;
        restAdapter10.server = server17;
        restAdapter8.server = server17;
        retrofit.Profiler profiler21 = restAdapter8.profiler;
        retrofit.ErrorHandler errorHandler22 = null;
        restAdapter8.errorHandler = errorHandler22;
        retrofit.RequestInterceptor requestInterceptor24 = restAdapter8.requestInterceptor;
        retrofit.ErrorHandler errorHandler25 = restAdapter8.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler26 = restAdapter8.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler27 = restAdapter8.new RestHandler();
        retrofit.ErrorHandler errorHandler28 = restAdapter8.errorHandler;
        retrofit.client.Client.Provider provider29 = restAdapter8.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter8.getLogLevel();
        retrofit.converter.Converter converter31 = restAdapter8.converter;
        retrofit.Server server32 = restAdapter8.server;
        java.lang.String str33 = server32.getName();
        retrofit.RestAdapter.Builder builder34 = builder0.setServer(server32);
        retrofit.client.Client.Provider provider35 = builder0.clientProvider;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder37 = builder0.setServer("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be blank.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(profiler21);
        org.junit.Assert.assertNull(requestInterceptor24);
        org.junit.Assert.assertNull(errorHandler25);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertNull(provider29);
        org.junit.Assert.assertNull(logLevel30);
        org.junit.Assert.assertNull(converter31);
        org.junit.Assert.assertNotNull(server32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(provider35);
    }

    @Test
    public void test04885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04885");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        java.util.concurrent.Executor executor3 = builder0.callbackExecutor;
        java.util.concurrent.Executor executor4 = null;
        builder0.callbackExecutor = executor4;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler7 = builder6.errorHandler;
        retrofit.Server server10 = new retrofit.Server("", "");
        builder6.server = server10;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        builder6.log = log12;
        retrofit.RestAdapter.LogLevel logLevel14 = builder6.logLevel;
        retrofit.RestAdapter.Builder builder15 = builder0.setLogLevel(logLevel14);
        java.util.concurrent.Executor executor16 = builder0.callbackExecutor;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor18 = restAdapter17.callbackExecutor;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor20 = restAdapter19.callbackExecutor;
        java.util.concurrent.Executor executor21 = restAdapter19.callbackExecutor;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler23 = restAdapter22.errorHandler;
        retrofit.Server server26 = new retrofit.Server("", "");
        restAdapter22.server = server26;
        restAdapter19.server = server26;
        restAdapter17.server = server26;
        retrofit.Profiler profiler30 = restAdapter17.profiler;
        retrofit.ErrorHandler errorHandler31 = null;
        restAdapter17.errorHandler = errorHandler31;
        retrofit.Profiler profiler33 = null;
        restAdapter17.profiler = profiler33;
        retrofit.RestAdapter.LogLevel logLevel35 = restAdapter17.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter17.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler37 = restAdapter17.new RestHandler();
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler39 = builder38.errorHandler;
        java.util.concurrent.Executor executor40 = null;
        builder38.callbackExecutor = executor40;
        retrofit.converter.Converter converter42 = builder38.converter;
        retrofit.RestAdapter.Builder builder44 = builder38.setServer("hi!");
        builder38.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor47 = restAdapter46.callbackExecutor;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor49 = restAdapter48.callbackExecutor;
        java.util.concurrent.Executor executor50 = restAdapter48.callbackExecutor;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler52 = restAdapter51.errorHandler;
        retrofit.Server server55 = new retrofit.Server("", "");
        restAdapter51.server = server55;
        restAdapter48.server = server55;
        restAdapter46.server = server55;
        java.lang.String str59 = server55.getName();
        builder38.server = server55;
        java.lang.String str61 = server55.getName();
        restAdapter17.server = server55;
        retrofit.RestAdapter.Builder builder63 = builder0.setServer(server55);
        retrofit.Profiler profiler64 = null;
        builder0.profiler = profiler64;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNull(profiler30);
        org.junit.Assert.assertNull(logLevel35);
        org.junit.Assert.assertNull(logLevel36);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNull(converter42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(executor47);
        org.junit.Assert.assertNull(executor49);
        org.junit.Assert.assertNull(executor50);
        org.junit.Assert.assertNull(errorHandler52);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(builder63);
    }

    @Test
    public void test04886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04886");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server6 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder7 = builder0.setServer(server6);
        retrofit.Server server10 = new retrofit.Server("", "");
        builder7.server = server10;
        retrofit.Profiler profiler12 = builder7.profiler;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler14 = builder13.errorHandler;
        retrofit.ErrorHandler errorHandler15 = builder13.errorHandler;
        retrofit.RestAdapter.Log log16 = null;
        builder13.log = log16;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        builder13.requestInterceptor = requestInterceptor18;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor21 = restAdapter20.callbackExecutor;
        java.util.concurrent.Executor executor22 = restAdapter20.callbackExecutor;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler24 = restAdapter23.errorHandler;
        retrofit.Server server27 = new retrofit.Server("", "");
        restAdapter23.server = server27;
        restAdapter20.server = server27;
        retrofit.RestAdapter.Builder builder30 = builder13.setServer(server27);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler32 = builder31.errorHandler;
        retrofit.client.Client.Provider provider33 = null;
        builder31.clientProvider = provider33;
        retrofit.Server server37 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder38 = builder31.setServer(server37);
        retrofit.client.Client.Provider provider39 = null;
        java.util.concurrent.Executor executor40 = null;
        java.util.concurrent.Executor executor41 = null;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        retrofit.converter.Converter converter43 = null;
        retrofit.Profiler profiler44 = null;
        retrofit.ErrorHandler errorHandler45 = null;
        retrofit.Server server46 = null;
        retrofit.client.Client.Provider provider47 = null;
        java.util.concurrent.Executor executor48 = null;
        java.util.concurrent.Executor executor49 = null;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        retrofit.converter.Converter converter51 = null;
        retrofit.Profiler profiler52 = null;
        retrofit.ErrorHandler errorHandler53 = null;
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        log54.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter(server46, provider47, executor48, executor49, requestInterceptor50, converter51, profiler52, errorHandler53, log54, logLevel57);
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter(server37, provider39, executor40, executor41, requestInterceptor42, converter43, profiler44, errorHandler45, log54, logLevel59);
        retrofit.RestAdapter.Builder builder61 = builder13.setLogLevel(logLevel59);
        java.util.concurrent.Executor executor62 = builder61.httpExecutor;
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        log63.log("hi!");
        log63.log("hi!");
        log63.log("");
        builder61.log = log63;
        builder7.log = log63;
        retrofit.converter.Converter converter72 = builder7.converter;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(profiler12);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(errorHandler32);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(executor62);
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertNull(converter72);
    }

    @Test
    public void test04887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04887");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor2 = restAdapter0.httpExecutor;
        retrofit.client.Client.Provider provider3 = restAdapter0.clientProvider;
        retrofit.client.Header[] headerArray20 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList21 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList21, headerArray20);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList21, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList21, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList21, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList21, typedOutput29);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("default", "hi!", (java.util.List<retrofit.client.Header>) headerList21, typedOutput31);
        retrofit.mime.TypedOutput typedOutput33 = null;
        retrofit.client.Request request34 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList21, typedOutput33);
        retrofit.mime.TypedOutput typedOutput35 = null;
        retrofit.client.Request request36 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList21, typedOutput35);
        retrofit.mime.TypedOutput typedOutput37 = null;
        retrofit.client.Request request38 = new retrofit.client.Request("hi!", "default", (java.util.List<retrofit.client.Header>) headerList21, typedOutput37);
        retrofit.mime.TypedOutput typedOutput39 = request38.getBody();
        java.lang.String str40 = request38.getUrl();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request41 = restAdapter0.logAndReplaceRequest(request38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNotNull(headerArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(typedOutput39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "default" + "'", str40, "default");
    }

    @Test
    public void test04888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04888");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        java.util.concurrent.Executor executor18 = null;
        restAdapter0.httpExecutor = executor18;
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter0.logLevel;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        restAdapter0.requestInterceptor = requestInterceptor21;
        retrofit.client.Response response24 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response26 = restAdapter0.logAndReplaceResponse("hi!", response24, (long) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel20);
    }

    @Test
    public void test04889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04889");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.converter.Converter converter4 = builder0.converter;
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("default");
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler8 = builder7.errorHandler;
        retrofit.ErrorHandler errorHandler9 = builder7.errorHandler;
        java.util.concurrent.Executor executor10 = builder7.callbackExecutor;
        retrofit.Profiler profiler11 = builder7.profiler;
        builder7.ensureSaneDefaults();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler15 = builder14.errorHandler;
        retrofit.ErrorHandler errorHandler16 = builder14.errorHandler;
        retrofit.RestAdapter.Log log17 = null;
        builder14.log = log17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler20 = builder19.errorHandler;
        retrofit.client.Client.Provider provider21 = null;
        builder19.clientProvider = provider21;
        retrofit.Server server25 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder26 = builder19.setServer(server25);
        retrofit.client.Client.Provider provider27 = null;
        java.util.concurrent.Executor executor28 = null;
        java.util.concurrent.Executor executor29 = null;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        retrofit.converter.Converter converter31 = null;
        retrofit.Profiler profiler32 = null;
        retrofit.ErrorHandler errorHandler33 = null;
        retrofit.Server server34 = null;
        retrofit.client.Client.Provider provider35 = null;
        java.util.concurrent.Executor executor36 = null;
        java.util.concurrent.Executor executor37 = null;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        retrofit.converter.Converter converter39 = null;
        retrofit.Profiler profiler40 = null;
        retrofit.ErrorHandler errorHandler41 = null;
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        log42.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter(server34, provider35, executor36, executor37, requestInterceptor38, converter39, profiler40, errorHandler41, log42, logLevel45);
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter(server25, provider27, executor28, executor29, requestInterceptor30, converter31, profiler32, errorHandler33, log42, logLevel47);
        builder14.logLevel = logLevel47;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider51 = builder50.clientProvider;
        java.util.concurrent.Executor executor52 = null;
        builder50.callbackExecutor = executor52;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.Server server57 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder58 = builder54.setServer(server57);
        java.lang.String str59 = server57.getUrl();
        retrofit.RestAdapter.Builder builder60 = builder50.setServer(server57);
        builder50.ensureSaneDefaults();
        retrofit.Server server62 = null;
        retrofit.client.Client.Provider provider63 = null;
        java.util.concurrent.Executor executor64 = null;
        java.util.concurrent.Executor executor65 = null;
        retrofit.RequestInterceptor requestInterceptor66 = null;
        retrofit.converter.Converter converter67 = null;
        retrofit.Profiler profiler68 = null;
        retrofit.ErrorHandler errorHandler69 = null;
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        log70.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter74 = new retrofit.RestAdapter(server62, provider63, executor64, executor65, requestInterceptor66, converter67, profiler68, errorHandler69, log70, logLevel73);
        retrofit.RestAdapter.RestHandler restHandler75 = restAdapter74.new RestHandler();
        retrofit.RestAdapter.Log log76 = retrofit.RestAdapter.Log.NONE;
        restAdapter74.log = log76;
        retrofit.RestAdapter.Builder builder78 = builder50.setLog(log76);
        retrofit.RestAdapter.Builder builder80 = builder50.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor81 = builder50.requestInterceptor;
        retrofit.RestAdapter.Builder builder82 = builder14.setRequestInterceptor(requestInterceptor81);
        retrofit.RestAdapter.Builder builder83 = builder7.setRequestInterceptor(requestInterceptor81);
        retrofit.ErrorHandler errorHandler84 = builder7.errorHandler;
        retrofit.RestAdapter.Builder builder85 = builder6.setErrorHandler(errorHandler84);
        retrofit.Profiler profiler86 = null;
        builder6.profiler = profiler86;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(profiler11);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(provider51);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(requestInterceptor81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(errorHandler84);
        org.junit.Assert.assertNotNull(builder85);
    }

    @Test
    public void test04890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04890");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        restAdapter5.log = log15;
        retrofit.RestAdapter.Builder builder17 = builder4.setLog(log15);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder19 = builder4.setLogLevel(logLevel18);
        retrofit.Profiler profiler20 = null;
        builder19.profiler = profiler20;
        retrofit.converter.Converter converter22 = null;
        builder19.converter = converter22;
        retrofit.ErrorHandler errorHandler24 = null;
        builder19.errorHandler = errorHandler24;
        retrofit.RestAdapter.LogLevel logLevel26 = builder19.logLevel;
        retrofit.ErrorHandler errorHandler27 = builder19.errorHandler;
        java.util.concurrent.Executor executor28 = builder19.httpExecutor;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNull(executor28);
    }

    @Test
    public void test04891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04891");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput11);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput13);
        java.lang.String str15 = request14.getUrl();
        retrofit.mime.TypedOutput typedOutput16 = request14.getBody();
        java.lang.String str17 = request14.getMethod();
        java.util.List<retrofit.client.Header> headerList18 = request14.getHeaders();
        java.lang.Class<?> wildcardClass19 = request14.getClass();
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(typedOutput16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(headerList18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test04892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04892");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        restAdapter5.log = log15;
        retrofit.RestAdapter.Builder builder17 = builder4.setLog(log15);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder19 = builder4.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler21 = builder20.errorHandler;
        retrofit.Server server24 = new retrofit.Server("", "");
        builder20.server = server24;
        java.util.concurrent.Executor executor26 = builder20.callbackExecutor;
        retrofit.Server server27 = null;
        builder20.server = server27;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.NONE;
        builder20.logLevel = logLevel29;
        builder19.logLevel = logLevel29;
        retrofit.client.Client.Provider provider32 = builder19.clientProvider;
        retrofit.RestAdapter restAdapter33 = builder19.build();
        retrofit.Server server35 = new retrofit.Server("default");
        retrofit.client.Client.Provider provider36 = null;
        java.util.concurrent.Executor executor37 = null;
        java.util.concurrent.Executor executor38 = null;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        retrofit.converter.Converter converter40 = null;
        retrofit.Profiler profiler41 = null;
        retrofit.ErrorHandler errorHandler42 = null;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler44 = builder43.errorHandler;
        retrofit.ErrorHandler errorHandler45 = builder43.errorHandler;
        retrofit.Profiler profiler46 = builder43.profiler;
        retrofit.RestAdapter.Log log47 = builder43.log;
        retrofit.Server server48 = null;
        retrofit.client.Client.Provider provider49 = null;
        java.util.concurrent.Executor executor50 = null;
        java.util.concurrent.Executor executor51 = null;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        retrofit.converter.Converter converter53 = null;
        retrofit.Profiler profiler54 = null;
        retrofit.ErrorHandler errorHandler55 = null;
        retrofit.RestAdapter.Log log56 = retrofit.RestAdapter.Log.NONE;
        log56.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter(server48, provider49, executor50, executor51, requestInterceptor52, converter53, profiler54, errorHandler55, log56, logLevel59);
        builder43.log = log56;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler63 = builder62.errorHandler;
        retrofit.ErrorHandler errorHandler64 = builder62.errorHandler;
        retrofit.Profiler profiler65 = builder62.profiler;
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor67 = restAdapter66.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler68 = restAdapter66.new RestHandler();
        retrofit.Server server71 = new retrofit.Server("hi!", "hi!");
        restAdapter66.server = server71;
        retrofit.RestAdapter.Builder builder73 = builder62.setServer(server71);
        retrofit.converter.Converter converter74 = null;
        builder73.converter = converter74;
        retrofit.Server server76 = null;
        retrofit.client.Client.Provider provider77 = null;
        java.util.concurrent.Executor executor78 = null;
        java.util.concurrent.Executor executor79 = null;
        retrofit.RequestInterceptor requestInterceptor80 = null;
        retrofit.converter.Converter converter81 = null;
        retrofit.Profiler profiler82 = null;
        retrofit.ErrorHandler errorHandler83 = null;
        retrofit.RestAdapter.Log log84 = retrofit.RestAdapter.Log.NONE;
        log84.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel87 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter88 = new retrofit.RestAdapter(server76, provider77, executor78, executor79, requestInterceptor80, converter81, profiler82, errorHandler83, log84, logLevel87);
        builder73.logLevel = logLevel87;
        retrofit.RestAdapter restAdapter90 = new retrofit.RestAdapter(server35, provider36, executor37, executor38, requestInterceptor39, converter40, profiler41, errorHandler42, log56, logLevel87);
        retrofit.RestAdapter.Builder builder91 = builder19.setServer(server35);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(provider32);
        org.junit.Assert.assertNotNull(restAdapter33);
        org.junit.Assert.assertNull(errorHandler44);
        org.junit.Assert.assertNull(errorHandler45);
        org.junit.Assert.assertNull(profiler46);
        org.junit.Assert.assertNull(log47);
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler63);
        org.junit.Assert.assertNull(errorHandler64);
        org.junit.Assert.assertNull(profiler65);
        org.junit.Assert.assertNull(executor67);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(log84);
        org.junit.Assert.assertTrue("'" + logLevel87 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel87.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder91);
    }

    @Test
    public void test04893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04893");
        retrofit.client.Header[] headerArray12 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList13 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList13, headerArray12);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList13, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList13, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList13, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("default", "hi!", (java.util.List<retrofit.client.Header>) headerList13, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("default", "hi!", (java.util.List<retrofit.client.Header>) headerList13, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList13, typedOutput25);
        java.lang.String str27 = request26.getMethod();
        org.junit.Assert.assertNotNull(headerArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
    }

    @Test
    public void test04894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04894");
        retrofit.client.Header[] headerArray10 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList11 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList11, headerArray10);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList11, typedOutput13);
        java.util.List<retrofit.client.Header> headerList15 = request14.getHeaders();
        java.util.List<retrofit.client.Header> headerList16 = request14.getHeaders();
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("default", "", headerList16, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("", "", headerList16, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("", "", headerList16, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("hi!", "default", headerList16, typedOutput23);
        org.junit.Assert.assertNotNull(headerArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertNotNull(headerList16);
    }

    @Test
    public void test04895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04895");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        java.util.concurrent.Executor executor14 = null;
        restAdapter12.callbackExecutor = executor14;
        retrofit.client.Header[] headerArray32 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList33 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList33, headerArray32);
        retrofit.mime.TypedOutput typedOutput35 = null;
        retrofit.client.Request request36 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList33, typedOutput35);
        retrofit.mime.TypedOutput typedOutput37 = null;
        retrofit.client.Request request38 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList33, typedOutput37);
        retrofit.mime.TypedOutput typedOutput39 = null;
        retrofit.client.Request request40 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList33, typedOutput39);
        retrofit.mime.TypedOutput typedOutput41 = null;
        retrofit.client.Request request42 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList33, typedOutput41);
        retrofit.mime.TypedOutput typedOutput43 = null;
        retrofit.client.Request request44 = new retrofit.client.Request("default", "hi!", (java.util.List<retrofit.client.Header>) headerList33, typedOutput43);
        retrofit.mime.TypedOutput typedOutput45 = null;
        retrofit.client.Request request46 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList33, typedOutput45);
        retrofit.mime.TypedOutput typedOutput47 = null;
        retrofit.client.Request request48 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList33, typedOutput47);
        retrofit.mime.TypedOutput typedOutput49 = null;
        retrofit.client.Request request50 = new retrofit.client.Request("hi!", "default", (java.util.List<retrofit.client.Header>) headerList33, typedOutput49);
        retrofit.client.Request request51 = restAdapter12.logAndReplaceRequest(request50);
        retrofit.ErrorHandler errorHandler52 = restAdapter12.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler53 = restAdapter12.new RestHandler();
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(request51);
        org.junit.Assert.assertNull(errorHandler52);
    }

    @Test
    public void test04896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04896");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = builder0.clientProvider;
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("default");
        retrofit.client.Client.Provider provider4 = builder3.clientProvider;
        retrofit.RestAdapter.Builder builder6 = builder3.setServer("default");
        retrofit.ErrorHandler errorHandler7 = builder6.errorHandler;
        org.junit.Assert.assertNull(provider1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(provider4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(errorHandler7);
    }

    @Test
    public void test04897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04897");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter3 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler4 = restAdapter3.errorHandler;
        retrofit.Server server7 = new retrofit.Server("", "");
        restAdapter3.server = server7;
        restAdapter0.server = server7;
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter0.logLevel;
        retrofit.Server server11 = restAdapter0.server;
        retrofit.ErrorHandler errorHandler12 = restAdapter0.errorHandler;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler14 = builder13.errorHandler;
        retrofit.Server server17 = new retrofit.Server("", "");
        builder13.server = server17;
        java.util.concurrent.Executor executor19 = null;
        builder13.httpExecutor = executor19;
        retrofit.RestAdapter.Builder builder22 = builder13.setServer("default");
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler24 = builder23.errorHandler;
        retrofit.Server server27 = new retrofit.Server("", "");
        builder23.server = server27;
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        builder23.log = log29;
        retrofit.RequestInterceptor requestInterceptor31 = builder23.requestInterceptor;
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        log32.log("hi!");
        log32.log("hi!");
        builder23.log = log32;
        builder22.log = log32;
        retrofit.Server server41 = new retrofit.Server("hi!", "default");
        java.lang.String str42 = server41.getUrl();
        java.lang.String str43 = server41.getUrl();
        java.lang.String str44 = server41.getName();
        builder22.server = server41;
        restAdapter0.server = server41;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(errorHandler4);
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertNotNull(server11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertNull(requestInterceptor31);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "default" + "'", str44, "default");
    }

    @Test
    public void test04898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04898");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server4 = new retrofit.Server("", "");
        builder0.server = server4;
        retrofit.RestAdapter restAdapter6 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor7 = restAdapter6.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler8 = restAdapter6.new RestHandler();
        retrofit.Server server11 = new retrofit.Server("hi!", "hi!");
        restAdapter6.server = server11;
        retrofit.RestAdapter.Builder builder13 = builder0.setServer(server11);
        retrofit.RestAdapter.Log log14 = builder0.log;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler16 = builder15.errorHandler;
        retrofit.ErrorHandler errorHandler17 = builder15.errorHandler;
        retrofit.Profiler profiler18 = builder15.profiler;
        retrofit.RestAdapter.Log log19 = builder15.log;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.FULL;
        builder15.logLevel = logLevel20;
        retrofit.RestAdapter.Builder builder22 = builder0.setLogLevel(logLevel20);
        retrofit.Profiler profiler23 = builder0.profiler;
        retrofit.RestAdapter restAdapter24 = builder0.build();
        retrofit.RestAdapter restAdapter25 = builder0.build();
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(log14);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(profiler18);
        org.junit.Assert.assertNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(profiler23);
        org.junit.Assert.assertNotNull(restAdapter24);
        org.junit.Assert.assertNotNull(restAdapter25);
    }

    @Test
    public void test04899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04899");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter0.getLogLevel();
        retrofit.client.Client.Provider provider20 = null;
        restAdapter0.clientProvider = provider20;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean23 = logLevel22.log();
        restAdapter0.logLevel = logLevel22;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        restAdapter0.requestInterceptor = requestInterceptor25;
        retrofit.RestAdapter.Log log27 = restAdapter0.log;
        retrofit.converter.Converter converter28 = null;
        restAdapter0.converter = converter28;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter30.logLevel;
        retrofit.RestAdapter.RestHandler restHandler32 = restAdapter30.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler33 = restAdapter30.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler34 = restAdapter30.new RestHandler();
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler36 = restAdapter35.new RestHandler();
        retrofit.client.Client.Provider provider37 = restAdapter35.clientProvider;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler39 = builder38.errorHandler;
        retrofit.Server server42 = new retrofit.Server("", "");
        builder38.server = server42;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        builder38.log = log44;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler47 = builder46.errorHandler;
        retrofit.client.Client.Provider provider48 = null;
        builder46.clientProvider = provider48;
        retrofit.Server server52 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder53 = builder46.setServer(server52);
        retrofit.converter.Converter converter54 = null;
        builder53.converter = converter54;
        retrofit.RestAdapter restAdapter56 = builder53.build();
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler58 = builder57.errorHandler;
        java.util.concurrent.Executor executor59 = null;
        builder57.callbackExecutor = executor59;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider62 = builder61.clientProvider;
        java.util.concurrent.Executor executor63 = null;
        builder61.callbackExecutor = executor63;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.Server server68 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder69 = builder65.setServer(server68);
        java.lang.String str70 = server68.getUrl();
        retrofit.RestAdapter.Builder builder71 = builder61.setServer(server68);
        retrofit.RestAdapter.Builder builder72 = builder57.setServer(server68);
        restAdapter56.server = server68;
        java.util.concurrent.Executor executor74 = restAdapter56.httpExecutor;
        builder38.httpExecutor = executor74;
        restAdapter35.callbackExecutor = executor74;
        restAdapter30.callbackExecutor = executor74;
        restAdapter0.httpExecutor = executor74;
        retrofit.RequestInterceptor requestInterceptor79 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.Log log80 = restAdapter0.log;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(log27);
        org.junit.Assert.assertNull(logLevel31);
        org.junit.Assert.assertNull(provider37);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNull(errorHandler47);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(restAdapter56);
        org.junit.Assert.assertNull(errorHandler58);
        org.junit.Assert.assertNull(provider62);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hi!" + "'", str70, "hi!");
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(executor74);
        org.junit.Assert.assertNull(requestInterceptor79);
        org.junit.Assert.assertNull(log80);
    }

    @Test
    public void test04900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04900");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.converter.Converter converter5 = builder0.converter;
        retrofit.RequestInterceptor requestInterceptor6 = builder0.requestInterceptor;
        java.util.concurrent.Executor executor7 = builder0.callbackExecutor;
        retrofit.Profiler profiler8 = builder0.profiler;
        java.util.concurrent.Executor executor9 = builder0.callbackExecutor;
        retrofit.Server server10 = builder0.server;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler12 = null;
        builder11.errorHandler = errorHandler12;
        retrofit.ErrorHandler errorHandler14 = builder11.errorHandler;
        retrofit.RestAdapter.Builder builder16 = builder11.setServer("hi!");
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider18 = builder17.clientProvider;
        java.util.concurrent.Executor executor19 = null;
        builder17.callbackExecutor = executor19;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.Server server24 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder25 = builder21.setServer(server24);
        java.lang.String str26 = server24.getUrl();
        retrofit.RestAdapter.Builder builder27 = builder17.setServer(server24);
        retrofit.RestAdapter.Builder builder28 = builder16.setServer(server24);
        retrofit.RestAdapter.Builder builder29 = builder0.setServer(server24);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler31 = null;
        builder30.errorHandler = errorHandler31;
        retrofit.ErrorHandler errorHandler33 = builder30.errorHandler;
        retrofit.RestAdapter.Builder builder35 = builder30.setServer("hi!");
        retrofit.RestAdapter.Builder builder37 = builder35.setServer("hi!");
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler39 = builder38.errorHandler;
        retrofit.ErrorHandler errorHandler40 = builder38.errorHandler;
        retrofit.Profiler profiler41 = builder38.profiler;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor43 = restAdapter42.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler44 = restAdapter42.new RestHandler();
        retrofit.Server server47 = new retrofit.Server("hi!", "hi!");
        restAdapter42.server = server47;
        retrofit.RestAdapter.Builder builder49 = builder38.setServer(server47);
        retrofit.converter.Converter converter50 = null;
        builder49.converter = converter50;
        builder49.ensureSaneDefaults();
        retrofit.RestAdapter.Log log53 = null;
        builder49.log = log53;
        retrofit.RequestInterceptor requestInterceptor55 = builder49.requestInterceptor;
        retrofit.client.Client.Provider provider56 = builder49.clientProvider;
        retrofit.RestAdapter.Builder builder57 = builder35.setClient(provider56);
        builder29.clientProvider = provider56;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(converter5);
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(profiler8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNotNull(server10);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(provider18);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(errorHandler33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNull(profiler41);
        org.junit.Assert.assertNull(executor43);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(requestInterceptor55);
        org.junit.Assert.assertNotNull(provider56);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test04901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04901");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = builder0.clientProvider;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server7 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder8 = builder4.setServer(server7);
        java.lang.String str9 = server7.getUrl();
        retrofit.RestAdapter.Builder builder10 = builder0.setServer(server7);
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.LogLevel logLevel12 = builder0.logLevel;
        builder0.ensureSaneDefaults();
        retrofit.converter.Converter converter14 = builder0.converter;
        retrofit.RestAdapter.LogLevel logLevel15 = builder0.logLevel;
        java.lang.Class<?> wildcardClass16 = builder0.getClass();
        org.junit.Assert.assertNull(provider1);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(converter14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test04902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04902");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server4 = new retrofit.Server("", "");
        builder0.server = server4;
        java.util.concurrent.Executor executor6 = builder0.callbackExecutor;
        retrofit.converter.Converter converter7 = null;
        builder0.converter = converter7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler10 = builder9.errorHandler;
        retrofit.client.Client.Provider provider11 = null;
        builder9.clientProvider = provider11;
        retrofit.converter.Converter converter13 = builder9.converter;
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder15 = builder9.setLogLevel(logLevel14);
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor17 = restAdapter16.callbackExecutor;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor19 = restAdapter18.callbackExecutor;
        java.util.concurrent.Executor executor20 = restAdapter18.callbackExecutor;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler22 = restAdapter21.errorHandler;
        retrofit.Server server25 = new retrofit.Server("", "");
        restAdapter21.server = server25;
        restAdapter18.server = server25;
        restAdapter16.server = server25;
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler37 = builder36.errorHandler;
        retrofit.Server server40 = new retrofit.Server("", "");
        builder36.server = server40;
        retrofit.client.Client.Provider provider42 = null;
        java.util.concurrent.Executor executor43 = null;
        java.util.concurrent.Executor executor44 = null;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        retrofit.converter.Converter converter46 = null;
        retrofit.Profiler profiler47 = null;
        retrofit.ErrorHandler errorHandler48 = null;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler50 = builder49.errorHandler;
        retrofit.Server server53 = new retrofit.Server("", "");
        builder49.server = server53;
        retrofit.RestAdapter.Log log55 = retrofit.RestAdapter.Log.NONE;
        builder49.log = log55;
        retrofit.Server server57 = null;
        retrofit.client.Client.Provider provider58 = null;
        java.util.concurrent.Executor executor59 = null;
        java.util.concurrent.Executor executor60 = null;
        retrofit.RequestInterceptor requestInterceptor61 = null;
        retrofit.converter.Converter converter62 = null;
        retrofit.Profiler profiler63 = null;
        retrofit.ErrorHandler errorHandler64 = null;
        retrofit.RestAdapter.Log log65 = retrofit.RestAdapter.Log.NONE;
        log65.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel68 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter(server57, provider58, executor59, executor60, requestInterceptor61, converter62, profiler63, errorHandler64, log65, logLevel68);
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter(server40, provider42, executor43, executor44, requestInterceptor45, converter46, profiler47, errorHandler48, log55, logLevel68);
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        retrofit.Server server74 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder75 = builder71.setServer(server74);
        retrofit.RestAdapter restAdapter76 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor77 = restAdapter76.callbackExecutor;
        java.util.concurrent.Executor executor78 = restAdapter76.callbackExecutor;
        retrofit.RestAdapter restAdapter79 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler80 = restAdapter79.errorHandler;
        retrofit.Server server83 = new retrofit.Server("", "");
        restAdapter79.server = server83;
        restAdapter76.server = server83;
        retrofit.RestAdapter.Log log86 = retrofit.RestAdapter.Log.NONE;
        restAdapter76.log = log86;
        retrofit.RestAdapter.Builder builder88 = builder75.setLog(log86);
        retrofit.RestAdapter.LogLevel logLevel89 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder90 = builder75.setLogLevel(logLevel89);
        retrofit.RestAdapter restAdapter91 = new retrofit.RestAdapter(server25, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log55, logLevel89);
        builder9.logLevel = logLevel89;
        retrofit.RestAdapter.Builder builder93 = builder0.setLogLevel(logLevel89);
        retrofit.Profiler profiler94 = builder93.profiler;
        retrofit.Profiler profiler95 = null;
        builder93.profiler = profiler95;
        retrofit.RestAdapter restAdapter97 = builder93.build();
        retrofit.Profiler profiler98 = builder93.profiler;
        retrofit.client.Client.Provider provider99 = builder93.clientProvider;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNull(errorHandler50);
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertNotNull(log65);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNull(executor77);
        org.junit.Assert.assertNull(executor78);
        org.junit.Assert.assertNull(errorHandler80);
        org.junit.Assert.assertNotNull(log86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertTrue("'" + logLevel89 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel89.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNull(profiler94);
        org.junit.Assert.assertNotNull(restAdapter97);
        org.junit.Assert.assertNull(profiler98);
        org.junit.Assert.assertNotNull(provider99);
    }

    @Test
    public void test04903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04903");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.ErrorHandler errorHandler3 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler7 = builder6.errorHandler;
        retrofit.ErrorHandler errorHandler8 = builder6.errorHandler;
        retrofit.Profiler profiler9 = builder6.profiler;
        retrofit.RestAdapter.Log log10 = builder6.log;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.FULL;
        builder6.logLevel = logLevel11;
        retrofit.RestAdapter.Builder builder13 = builder5.setLogLevel(logLevel11);
        retrofit.Server server16 = new retrofit.Server("hi!", "default");
        retrofit.RestAdapter.Builder builder17 = builder5.setServer(server16);
        retrofit.Server server18 = builder5.server;
        retrofit.RestAdapter.Log log19 = builder5.log;
        java.util.concurrent.Executor executor20 = builder5.httpExecutor;
        retrofit.Server server21 = builder5.server;
        java.lang.String str22 = server21.getUrl();
        java.lang.String str23 = server21.getName();
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNull(profiler9);
        org.junit.Assert.assertNull(log10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(server18);
        org.junit.Assert.assertNull(log19);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNotNull(server21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "default" + "'", str23, "default");
    }

    @Test
    public void test04904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04904");
        retrofit.client.Header[] headerArray20 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList21 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList21, headerArray20);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList21, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList21, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList21, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList21, typedOutput29);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("default", "hi!", (java.util.List<retrofit.client.Header>) headerList21, typedOutput31);
        retrofit.mime.TypedOutput typedOutput33 = null;
        retrofit.client.Request request34 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList21, typedOutput33);
        retrofit.mime.TypedOutput typedOutput35 = null;
        retrofit.client.Request request36 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList21, typedOutput35);
        retrofit.mime.TypedOutput typedOutput37 = null;
        retrofit.client.Request request38 = new retrofit.client.Request("default", "default", (java.util.List<retrofit.client.Header>) headerList21, typedOutput37);
        retrofit.mime.TypedOutput typedOutput39 = null;
        retrofit.client.Request request40 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList21, typedOutput39);
        retrofit.mime.TypedOutput typedOutput41 = null;
        retrofit.client.Request request42 = new retrofit.client.Request("", "default", (java.util.List<retrofit.client.Header>) headerList21, typedOutput41);
        retrofit.mime.TypedOutput typedOutput43 = request42.getBody();
        java.lang.String str44 = request42.getUrl();
        org.junit.Assert.assertNotNull(headerArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(typedOutput43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "default" + "'", str44, "default");
    }

    @Test
    public void test04905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04905");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        restAdapter0.requestInterceptor = requestInterceptor18;
        retrofit.client.Response response21 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response23 = restAdapter0.logAndReplaceResponse("hi!", response21, (long) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
    }

    @Test
    public void test04906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04906");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.Server server7 = new retrofit.Server("default", "hi!");
        java.lang.String str8 = server7.getUrl();
        retrofit.RestAdapter.Builder builder9 = builder4.setServer(server7);
        retrofit.RestAdapter.LogLevel logLevel10 = builder9.logLevel;
        builder9.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler13 = builder12.errorHandler;
        retrofit.Server server16 = new retrofit.Server("", "");
        builder12.server = server16;
        java.util.concurrent.Executor executor18 = null;
        builder12.httpExecutor = executor18;
        retrofit.RestAdapter.Builder builder21 = builder12.setServer("default");
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler23 = builder22.errorHandler;
        retrofit.Server server26 = new retrofit.Server("", "");
        builder22.server = server26;
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        builder22.log = log28;
        retrofit.RequestInterceptor requestInterceptor30 = builder22.requestInterceptor;
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        log31.log("hi!");
        log31.log("hi!");
        builder22.log = log31;
        builder21.log = log31;
        retrofit.RestAdapter.Log log38 = builder21.log;
        retrofit.RestAdapter.Builder builder39 = builder9.setLog(log38);
        retrofit.RestAdapter restAdapter40 = builder9.build();
        java.util.concurrent.Executor executor41 = null;
        builder9.callbackExecutor = executor41;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "default" + "'", str8, "default");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(restAdapter40);
    }

    @Test
    public void test04907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04907");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.Profiler profiler3 = builder0.profiler;
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor5 = restAdapter4.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.Server server9 = new retrofit.Server("hi!", "hi!");
        restAdapter4.server = server9;
        retrofit.RestAdapter.Builder builder11 = builder0.setServer(server9);
        retrofit.converter.Converter converter12 = null;
        builder11.converter = converter12;
        retrofit.Profiler profiler14 = null;
        builder11.profiler = profiler14;
        retrofit.Server server16 = null;
        retrofit.client.Client.Provider provider17 = null;
        java.util.concurrent.Executor executor18 = null;
        java.util.concurrent.Executor executor19 = null;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        retrofit.converter.Converter converter21 = null;
        retrofit.Profiler profiler22 = null;
        retrofit.ErrorHandler errorHandler23 = null;
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        log24.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server16, provider17, executor18, executor19, requestInterceptor20, converter21, profiler22, errorHandler23, log24, logLevel27);
        retrofit.RestAdapter.RestHandler restHandler29 = restAdapter28.new RestHandler();
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler31 = builder30.errorHandler;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        builder30.requestInterceptor = requestInterceptor32;
        retrofit.Server server34 = null;
        retrofit.client.Client.Provider provider35 = null;
        java.util.concurrent.Executor executor36 = null;
        java.util.concurrent.Executor executor37 = null;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        retrofit.converter.Converter converter39 = null;
        retrofit.Profiler profiler40 = null;
        retrofit.ErrorHandler errorHandler41 = null;
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        log42.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter(server34, provider35, executor36, executor37, requestInterceptor38, converter39, profiler40, errorHandler41, log42, logLevel45);
        builder30.log = log42;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler49 = builder48.errorHandler;
        retrofit.client.Client.Provider provider50 = null;
        builder48.clientProvider = provider50;
        retrofit.Server server54 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder55 = builder48.setServer(server54);
        retrofit.converter.Converter converter56 = null;
        builder55.converter = converter56;
        retrofit.RestAdapter restAdapter58 = builder55.build();
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler60 = builder59.errorHandler;
        java.util.concurrent.Executor executor61 = null;
        builder59.callbackExecutor = executor61;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider64 = builder63.clientProvider;
        java.util.concurrent.Executor executor65 = null;
        builder63.callbackExecutor = executor65;
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        retrofit.Server server70 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder71 = builder67.setServer(server70);
        java.lang.String str72 = server70.getUrl();
        retrofit.RestAdapter.Builder builder73 = builder63.setServer(server70);
        retrofit.RestAdapter.Builder builder74 = builder59.setServer(server70);
        restAdapter58.server = server70;
        retrofit.client.Client.Provider provider76 = restAdapter58.clientProvider;
        builder30.clientProvider = provider76;
        restAdapter28.clientProvider = provider76;
        retrofit.RestAdapter.Builder builder79 = builder11.setClient(provider76);
        java.util.concurrent.Executor executor80 = builder79.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel81 = builder79.logLevel;
        retrofit.client.Client.Provider provider82 = builder79.clientProvider;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(log24);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler31);
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler49);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(restAdapter58);
        org.junit.Assert.assertNull(errorHandler60);
        org.junit.Assert.assertNull(provider64);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(provider76);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNull(executor80);
        org.junit.Assert.assertTrue("'" + logLevel81 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel81.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(provider82);
    }

    @Test
    public void test04908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04908");
        retrofit.Server server10 = null;
        retrofit.client.Client.Provider provider11 = null;
        java.util.concurrent.Executor executor12 = null;
        java.util.concurrent.Executor executor13 = null;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        retrofit.converter.Converter converter15 = null;
        retrofit.Profiler profiler16 = null;
        retrofit.ErrorHandler errorHandler17 = null;
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        log18.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter(server10, provider11, executor12, executor13, requestInterceptor14, converter15, profiler16, errorHandler17, log18, logLevel21);
        retrofit.RestAdapter.RestHandler restHandler23 = restAdapter22.new RestHandler();
        retrofit.client.Header[] headerArray32 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList33 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList33, headerArray32);
        retrofit.mime.TypedOutput typedOutput35 = null;
        retrofit.client.Request request36 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList33, typedOutput35);
        retrofit.mime.TypedOutput typedOutput37 = null;
        retrofit.client.Request request38 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList33, typedOutput37);
        retrofit.mime.TypedOutput typedOutput39 = null;
        retrofit.client.Request request40 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList33, typedOutput39);
        retrofit.mime.TypedOutput typedOutput41 = null;
        retrofit.client.Request request42 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList33, typedOutput41);
        retrofit.mime.TypedOutput typedOutput43 = request42.getBody();
        retrofit.client.Request request44 = restAdapter22.logAndReplaceRequest(request42);
        retrofit.RestAdapter.RestHandler restHandler45 = restAdapter22.new RestHandler();
        retrofit.client.Client.Provider provider46 = restAdapter22.clientProvider;
        retrofit.converter.Converter converter47 = null;
        restAdapter22.converter = converter47;
        retrofit.client.Header[] headerArray57 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList58 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList58, headerArray57);
        retrofit.mime.TypedOutput typedOutput60 = null;
        retrofit.client.Request request61 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList58, typedOutput60);
        retrofit.mime.TypedOutput typedOutput62 = null;
        retrofit.client.Request request63 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList58, typedOutput62);
        retrofit.mime.TypedOutput typedOutput64 = null;
        retrofit.client.Request request65 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList58, typedOutput64);
        retrofit.mime.TypedOutput typedOutput66 = request65.getBody();
        java.util.List<retrofit.client.Header> headerList67 = request65.getHeaders();
        retrofit.mime.TypedOutput typedOutput68 = null;
        retrofit.client.Request request69 = new retrofit.client.Request("default", "", headerList67, typedOutput68);
        retrofit.client.Request request70 = restAdapter22.logAndReplaceRequest(request69);
        retrofit.mime.TypedOutput typedOutput71 = request69.getBody();
        java.util.List<retrofit.client.Header> headerList72 = request69.getHeaders();
        retrofit.mime.TypedOutput typedOutput73 = null;
        retrofit.client.Request request74 = new retrofit.client.Request("", "hi!", headerList72, typedOutput73);
        retrofit.mime.TypedOutput typedOutput75 = null;
        retrofit.client.Request request76 = new retrofit.client.Request("default", "hi!", headerList72, typedOutput75);
        retrofit.mime.TypedOutput typedOutput77 = null;
        retrofit.client.Request request78 = new retrofit.client.Request("default", "default", headerList72, typedOutput77);
        retrofit.mime.TypedOutput typedOutput79 = null;
        retrofit.client.Request request80 = new retrofit.client.Request("hi!", "hi!", headerList72, typedOutput79);
        retrofit.mime.TypedOutput typedOutput81 = null;
        retrofit.client.Request request82 = new retrofit.client.Request("", "", headerList72, typedOutput81);
        org.junit.Assert.assertNotNull(log18);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(typedOutput43);
        org.junit.Assert.assertNotNull(request44);
        org.junit.Assert.assertNull(provider46);
        org.junit.Assert.assertNotNull(headerArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(typedOutput66);
        org.junit.Assert.assertNotNull(headerList67);
        org.junit.Assert.assertNotNull(request70);
        org.junit.Assert.assertNull(typedOutput71);
        org.junit.Assert.assertNotNull(headerList72);
    }

    @Test
    public void test04909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04909");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        java.lang.String str11 = request10.getMethod();
        java.util.List<retrofit.client.Header> headerList12 = request10.getHeaders();
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("default", "hi!", headerList12, typedOutput13);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("default", "hi!", headerList12, typedOutput15);
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(headerList12);
    }

    @Test
    public void test04910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04910");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.converter.Converter converter14 = restAdapter0.converter;
        retrofit.ErrorHandler errorHandler15 = null;
        restAdapter0.errorHandler = errorHandler15;
        retrofit.converter.Converter converter17 = restAdapter0.converter;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.logLevel;
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(converter17);
        org.junit.Assert.assertNull(logLevel18);
    }

    @Test
    public void test04911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04911");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        restAdapter12.log = log14;
        retrofit.converter.Converter converter16 = null;
        restAdapter12.converter = converter16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter12.getLogLevel();
        retrofit.ErrorHandler errorHandler19 = restAdapter12.errorHandler;
        retrofit.Profiler profiler20 = restAdapter12.profiler;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler22 = null;
        builder21.errorHandler = errorHandler22;
        retrofit.ErrorHandler errorHandler24 = builder21.errorHandler;
        retrofit.RestAdapter.Builder builder26 = builder21.setServer("hi!");
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler28 = builder27.errorHandler;
        retrofit.ErrorHandler errorHandler29 = builder27.errorHandler;
        retrofit.Profiler profiler30 = builder27.profiler;
        retrofit.RestAdapter.Log log31 = builder27.log;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.FULL;
        builder27.logLevel = logLevel32;
        retrofit.RestAdapter.Builder builder34 = builder26.setLogLevel(logLevel32);
        retrofit.Server server35 = null;
        retrofit.client.Client.Provider provider36 = null;
        java.util.concurrent.Executor executor37 = null;
        java.util.concurrent.Executor executor38 = null;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        retrofit.converter.Converter converter40 = null;
        retrofit.Profiler profiler41 = null;
        retrofit.ErrorHandler errorHandler42 = null;
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        log43.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter(server35, provider36, executor37, executor38, requestInterceptor39, converter40, profiler41, errorHandler42, log43, logLevel46);
        log43.log("");
        retrofit.RestAdapter.Builder builder50 = builder34.setLog(log43);
        restAdapter12.log = log43;
        retrofit.RestAdapter.RestHandler restHandler52 = restAdapter12.new RestHandler();
        retrofit.Profiler profiler53 = null;
        restAdapter12.profiler = profiler53;
        retrofit.RequestInterceptor requestInterceptor55 = restAdapter12.requestInterceptor;
        retrofit.RestAdapter.RestHandler restHandler56 = restAdapter12.new RestHandler();
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(profiler20);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNull(profiler30);
        org.junit.Assert.assertNull(log31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(requestInterceptor55);
    }

    @Test
    public void test04912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04912");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = builder0.clientProvider;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server7 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder8 = builder4.setServer(server7);
        java.lang.String str9 = server7.getUrl();
        retrofit.RestAdapter.Builder builder10 = builder0.setServer(server7);
        builder0.ensureSaneDefaults();
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        log20.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel23);
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter24.new RestHandler();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        restAdapter24.log = log26;
        retrofit.RestAdapter.Builder builder28 = builder0.setLog(log26);
        retrofit.RequestInterceptor requestInterceptor29 = null;
        builder28.requestInterceptor = requestInterceptor29;
        retrofit.Server server31 = builder28.server;
        java.lang.String str32 = server31.getUrl();
        org.junit.Assert.assertNull(provider1);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(server31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
    }

    @Test
    public void test04913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04913");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean3 = logLevel2.log();
        restAdapter0.logLevel = logLevel2;
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter0.getLogLevel();
        retrofit.Profiler profiler6 = restAdapter0.profiler;
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter0.logLevel;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider9 = builder8.clientProvider;
        retrofit.RestAdapter.Builder builder11 = builder8.setServer("default");
        retrofit.RestAdapter restAdapter12 = builder8.build();
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.Server server16 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder17 = builder13.setServer(server16);
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor19 = restAdapter18.callbackExecutor;
        java.util.concurrent.Executor executor20 = restAdapter18.callbackExecutor;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler22 = restAdapter21.errorHandler;
        retrofit.Server server25 = new retrofit.Server("", "");
        restAdapter21.server = server25;
        restAdapter18.server = server25;
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        restAdapter18.log = log28;
        retrofit.RestAdapter.Builder builder30 = builder17.setLog(log28);
        retrofit.RestAdapter.Builder builder32 = builder17.setServer("hi!");
        retrofit.RestAdapter.Log log33 = builder32.log;
        retrofit.Server server36 = new retrofit.Server("default", "");
        builder32.server = server36;
        java.lang.String str38 = server36.getName();
        restAdapter12.server = server36;
        restAdapter0.server = server36;
        retrofit.RestAdapter.RestHandler restHandler41 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel42 = restAdapter0.logLevel;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler6);
        org.junit.Assert.assertTrue("'" + logLevel7 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel7.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(provider9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(restAdapter12);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test04914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04914");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server4 = new retrofit.Server("", "");
        builder0.server = server4;
        java.util.concurrent.Executor executor6 = builder0.callbackExecutor;
        retrofit.Server server7 = null;
        builder0.server = server7;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.NONE;
        builder0.logLevel = logLevel9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler12 = builder11.errorHandler;
        java.util.concurrent.Executor executor13 = builder11.callbackExecutor;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.Server server17 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder18 = builder14.setServer(server17);
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor20 = restAdapter19.callbackExecutor;
        java.util.concurrent.Executor executor21 = restAdapter19.callbackExecutor;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler23 = restAdapter22.errorHandler;
        retrofit.Server server26 = new retrofit.Server("", "");
        restAdapter22.server = server26;
        restAdapter19.server = server26;
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        restAdapter19.log = log29;
        retrofit.RestAdapter.Builder builder31 = builder18.setLog(log29);
        retrofit.converter.Converter converter32 = null;
        builder31.converter = converter32;
        retrofit.RestAdapter.Builder builder35 = builder31.setServer("hi!");
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor37 = restAdapter36.callbackExecutor;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor39 = restAdapter38.callbackExecutor;
        java.util.concurrent.Executor executor40 = restAdapter38.callbackExecutor;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler42 = restAdapter41.errorHandler;
        retrofit.Server server45 = new retrofit.Server("", "");
        restAdapter41.server = server45;
        restAdapter38.server = server45;
        restAdapter36.server = server45;
        retrofit.Profiler profiler49 = restAdapter36.profiler;
        retrofit.ErrorHandler errorHandler50 = null;
        restAdapter36.errorHandler = errorHandler50;
        retrofit.Profiler profiler52 = null;
        restAdapter36.profiler = profiler52;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        restAdapter36.requestInterceptor = requestInterceptor54;
        retrofit.RestAdapter.LogLevel logLevel56 = restAdapter36.getLogLevel();
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.Server server60 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder61 = builder57.setServer(server60);
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor63 = restAdapter62.callbackExecutor;
        java.util.concurrent.Executor executor64 = restAdapter62.callbackExecutor;
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler66 = restAdapter65.errorHandler;
        retrofit.Server server69 = new retrofit.Server("", "");
        restAdapter65.server = server69;
        restAdapter62.server = server69;
        retrofit.RestAdapter.Log log72 = retrofit.RestAdapter.Log.NONE;
        restAdapter62.log = log72;
        retrofit.RestAdapter.Builder builder74 = builder61.setLog(log72);
        retrofit.RestAdapter.LogLevel logLevel75 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder76 = builder61.setLogLevel(logLevel75);
        retrofit.Profiler profiler77 = null;
        builder76.profiler = profiler77;
        retrofit.converter.Converter converter79 = null;
        builder76.converter = converter79;
        retrofit.ErrorHandler errorHandler81 = null;
        builder76.errorHandler = errorHandler81;
        retrofit.RestAdapter restAdapter83 = builder76.build();
        retrofit.ErrorHandler errorHandler84 = builder76.errorHandler;
        restAdapter36.errorHandler = errorHandler84;
        retrofit.RestAdapter.Builder builder86 = builder31.setErrorHandler(errorHandler84);
        retrofit.RestAdapter.Builder builder87 = builder11.setErrorHandler(errorHandler84);
        retrofit.RestAdapter.Log log88 = retrofit.RestAdapter.Log.NONE;
        log88.log("hi!");
        log88.log("hi!");
        log88.log("default");
        builder11.log = log88;
        builder0.log = log88;
        java.util.concurrent.Executor executor97 = builder0.callbackExecutor;
        retrofit.Server server98 = builder0.server;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNull(executor40);
        org.junit.Assert.assertNull(errorHandler42);
        org.junit.Assert.assertNull(profiler49);
        org.junit.Assert.assertNull(logLevel56);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(executor63);
        org.junit.Assert.assertNull(executor64);
        org.junit.Assert.assertNull(errorHandler66);
        org.junit.Assert.assertNotNull(log72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(restAdapter83);
        org.junit.Assert.assertNotNull(errorHandler84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(log88);
        org.junit.Assert.assertNull(executor97);
        org.junit.Assert.assertNull(server98);
    }

    @Test
    public void test04915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04915");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.Profiler profiler19 = restAdapter0.profiler;
        retrofit.Profiler profiler20 = null;
        restAdapter0.profiler = profiler20;
        retrofit.Profiler profiler22 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler23 = restAdapter0.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter0.getLogLevel();
        java.lang.Class<?> wildcardClass25 = restAdapter0.getClass();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(profiler19);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNull(logLevel24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test04916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04916");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = builder0.clientProvider;
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("default");
        retrofit.client.Client.Provider provider4 = builder3.clientProvider;
        retrofit.RestAdapter.Builder builder6 = builder3.setServer("default");
        retrofit.RestAdapter.LogLevel logLevel7 = builder3.logLevel;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler9 = builder8.errorHandler;
        retrofit.ErrorHandler errorHandler10 = builder8.errorHandler;
        retrofit.RestAdapter.Log log11 = null;
        builder8.log = log11;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        builder8.requestInterceptor = requestInterceptor13;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor16 = restAdapter15.callbackExecutor;
        java.util.concurrent.Executor executor17 = restAdapter15.callbackExecutor;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler19 = restAdapter18.errorHandler;
        retrofit.Server server22 = new retrofit.Server("", "");
        restAdapter18.server = server22;
        restAdapter15.server = server22;
        retrofit.RestAdapter.Builder builder25 = builder8.setServer(server22);
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler27 = builder26.errorHandler;
        retrofit.client.Client.Provider provider28 = null;
        builder26.clientProvider = provider28;
        retrofit.Server server32 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder33 = builder26.setServer(server32);
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.Server server41 = null;
        retrofit.client.Client.Provider provider42 = null;
        java.util.concurrent.Executor executor43 = null;
        java.util.concurrent.Executor executor44 = null;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        retrofit.converter.Converter converter46 = null;
        retrofit.Profiler profiler47 = null;
        retrofit.ErrorHandler errorHandler48 = null;
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        log49.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server41, provider42, executor43, executor44, requestInterceptor45, converter46, profiler47, errorHandler48, log49, logLevel52);
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter(server32, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log49, logLevel54);
        retrofit.RestAdapter.Builder builder56 = builder8.setLogLevel(logLevel54);
        java.util.concurrent.Executor executor57 = builder56.httpExecutor;
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        log58.log("hi!");
        log58.log("hi!");
        log58.log("");
        builder56.log = log58;
        retrofit.RestAdapter.Builder builder66 = builder3.setLog(log58);
        retrofit.client.Client.Provider provider67 = builder3.clientProvider;
        org.junit.Assert.assertNull(provider1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(provider4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + logLevel7 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel7.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(executor57);
        org.junit.Assert.assertNotNull(log58);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(provider67);
    }

    @Test
    public void test04917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04917");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.converter.Converter converter4 = builder0.converter;
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        builder0.ensureSaneDefaults();
        retrofit.Profiler profiler8 = builder0.profiler;
        retrofit.RequestInterceptor requestInterceptor9 = builder0.requestInterceptor;
        retrofit.client.Client.Provider provider10 = builder0.clientProvider;
        retrofit.RestAdapter.Log log11 = builder0.log;
        retrofit.Server server12 = builder0.server;
        java.lang.String str13 = server12.getUrl();
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(profiler8);
        org.junit.Assert.assertNotNull(requestInterceptor9);
        org.junit.Assert.assertNotNull(provider10);
        org.junit.Assert.assertNotNull(log11);
        org.junit.Assert.assertNotNull(server12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test04918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04918");
        retrofit.client.Header[] headerArray10 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList11 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList11, headerArray10);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList11, typedOutput13);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList11, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("", "default", (java.util.List<retrofit.client.Header>) headerList11, typedOutput17);
        java.util.List<retrofit.client.Header> headerList19 = request18.getHeaders();
        retrofit.mime.TypedOutput typedOutput20 = null;
        retrofit.client.Request request21 = new retrofit.client.Request("hi!", "default", headerList19, typedOutput20);
        retrofit.mime.TypedOutput typedOutput22 = null;
        retrofit.client.Request request23 = new retrofit.client.Request("", "", headerList19, typedOutput22);
        retrofit.mime.TypedOutput typedOutput24 = request23.getBody();
        java.lang.String str25 = request23.getMethod();
        org.junit.Assert.assertNotNull(headerArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(headerList19);
        org.junit.Assert.assertNull(typedOutput24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test04919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04919");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.Server server5 = new retrofit.Server("hi!", "hi!");
        restAdapter0.server = server5;
        retrofit.ErrorHandler errorHandler7 = restAdapter0.errorHandler;
        java.util.concurrent.Executor executor8 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel10 = builder9.logLevel;
        retrofit.Server server13 = new retrofit.Server("hi!", "default");
        java.lang.String str14 = server13.getUrl();
        retrofit.RestAdapter.Builder builder15 = builder9.setServer(server13);
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler17 = builder16.errorHandler;
        java.util.concurrent.Executor executor18 = null;
        builder16.callbackExecutor = executor18;
        retrofit.converter.Converter converter20 = builder16.converter;
        retrofit.RestAdapter.Builder builder22 = builder16.setServer("hi!");
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler24 = builder23.errorHandler;
        retrofit.client.Client.Provider provider25 = null;
        builder23.clientProvider = provider25;
        retrofit.Server server29 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder30 = builder23.setServer(server29);
        retrofit.converter.Converter converter31 = null;
        builder30.converter = converter31;
        retrofit.RestAdapter restAdapter33 = builder30.build();
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler35 = builder34.errorHandler;
        java.util.concurrent.Executor executor36 = null;
        builder34.callbackExecutor = executor36;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider39 = builder38.clientProvider;
        java.util.concurrent.Executor executor40 = null;
        builder38.callbackExecutor = executor40;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.Server server45 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder46 = builder42.setServer(server45);
        java.lang.String str47 = server45.getUrl();
        retrofit.RestAdapter.Builder builder48 = builder38.setServer(server45);
        retrofit.RestAdapter.Builder builder49 = builder34.setServer(server45);
        restAdapter33.server = server45;
        java.util.concurrent.Executor executor51 = restAdapter33.httpExecutor;
        java.util.concurrent.Executor executor52 = restAdapter33.callbackExecutor;
        builder16.httpExecutor = executor52;
        builder9.callbackExecutor = executor52;
        restAdapter0.callbackExecutor = executor52;
        retrofit.RestAdapter.RestHandler restHandler56 = restAdapter0.new RestHandler();
        retrofit.client.Client.Provider provider57 = restAdapter0.clientProvider;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(converter20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(restAdapter33);
        org.junit.Assert.assertNull(errorHandler35);
        org.junit.Assert.assertNull(provider39);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(executor51);
        org.junit.Assert.assertNotNull(executor52);
        org.junit.Assert.assertNull(provider57);
    }

    @Test
    public void test04920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04920");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.Log log18 = restAdapter0.log;
        java.util.concurrent.Executor executor19 = restAdapter0.callbackExecutor;
        retrofit.client.Header[] headerArray42 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList43 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList43, headerArray42);
        retrofit.mime.TypedOutput typedOutput45 = null;
        retrofit.client.Request request46 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList43, typedOutput45);
        retrofit.mime.TypedOutput typedOutput47 = null;
        retrofit.client.Request request48 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList43, typedOutput47);
        retrofit.mime.TypedOutput typedOutput49 = null;
        retrofit.client.Request request50 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList43, typedOutput49);
        retrofit.mime.TypedOutput typedOutput51 = null;
        retrofit.client.Request request52 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList43, typedOutput51);
        retrofit.mime.TypedOutput typedOutput53 = null;
        retrofit.client.Request request54 = new retrofit.client.Request("default", "hi!", (java.util.List<retrofit.client.Header>) headerList43, typedOutput53);
        retrofit.mime.TypedOutput typedOutput55 = null;
        retrofit.client.Request request56 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList43, typedOutput55);
        retrofit.mime.TypedOutput typedOutput57 = null;
        retrofit.client.Request request58 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList43, typedOutput57);
        retrofit.mime.TypedOutput typedOutput59 = null;
        retrofit.client.Request request60 = new retrofit.client.Request("hi!", "default", (java.util.List<retrofit.client.Header>) headerList43, typedOutput59);
        retrofit.mime.TypedOutput typedOutput61 = null;
        retrofit.client.Request request62 = new retrofit.client.Request("default", "hi!", (java.util.List<retrofit.client.Header>) headerList43, typedOutput61);
        retrofit.mime.TypedOutput typedOutput63 = null;
        retrofit.client.Request request64 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList43, typedOutput63);
        retrofit.mime.TypedOutput typedOutput65 = null;
        retrofit.client.Request request66 = new retrofit.client.Request("default", "hi!", (java.util.List<retrofit.client.Header>) headerList43, typedOutput65);
        java.lang.String str67 = request66.getUrl();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request68 = restAdapter0.logAndReplaceRequest(request66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(log18);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNotNull(headerArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hi!" + "'", str67, "hi!");
    }

    @Test
    public void test04921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04921");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.client.Client.Provider provider14 = restAdapter12.clientProvider;
        retrofit.RestAdapter.Log log15 = restAdapter12.log;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler17 = builder16.errorHandler;
        retrofit.client.Client.Provider provider18 = null;
        builder16.clientProvider = provider18;
        retrofit.Server server22 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder23 = builder16.setServer(server22);
        retrofit.Server server26 = new retrofit.Server("", "");
        builder23.server = server26;
        restAdapter12.server = server26;
        retrofit.RestAdapter.Log log29 = restAdapter12.log;
        retrofit.client.Client.Provider provider30 = restAdapter12.clientProvider;
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertNull(provider30);
    }

    @Test
    public void test04922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04922");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.converter.Converter converter3 = null;
        builder0.converter = converter3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        builder0.requestInterceptor = requestInterceptor5;
        retrofit.client.Client.Provider provider7 = builder0.clientProvider;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler10 = builder9.errorHandler;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        builder9.requestInterceptor = requestInterceptor11;
        java.util.concurrent.Executor executor13 = builder9.httpExecutor;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        log14.log("default");
        builder9.log = log14;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server21 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder22 = builder18.setServer(server21);
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor24 = restAdapter23.callbackExecutor;
        java.util.concurrent.Executor executor25 = restAdapter23.callbackExecutor;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler27 = restAdapter26.errorHandler;
        retrofit.Server server30 = new retrofit.Server("", "");
        restAdapter26.server = server30;
        restAdapter23.server = server30;
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        restAdapter23.log = log33;
        retrofit.RestAdapter.Builder builder35 = builder22.setLog(log33);
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder37 = builder22.setLogLevel(logLevel36);
        retrofit.RestAdapter.Log log38 = builder22.log;
        retrofit.RestAdapter restAdapter39 = builder22.build();
        retrofit.Server server40 = null;
        retrofit.client.Client.Provider provider41 = null;
        java.util.concurrent.Executor executor42 = null;
        java.util.concurrent.Executor executor43 = null;
        retrofit.RequestInterceptor requestInterceptor44 = null;
        retrofit.converter.Converter converter45 = null;
        retrofit.Profiler profiler46 = null;
        retrofit.ErrorHandler errorHandler47 = null;
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        log48.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter(server40, provider41, executor42, executor43, requestInterceptor44, converter45, profiler46, errorHandler47, log48, logLevel51);
        retrofit.RestAdapter.RestHandler restHandler53 = restAdapter52.new RestHandler();
        retrofit.client.Client.Provider provider54 = restAdapter52.clientProvider;
        retrofit.RestAdapter.Log log55 = restAdapter52.log;
        retrofit.RestAdapter.RestHandler restHandler56 = restAdapter52.new RestHandler();
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler58 = builder57.errorHandler;
        java.util.concurrent.Executor executor59 = builder57.callbackExecutor;
        retrofit.RestAdapter.Builder builder61 = builder57.setServer("hi!");
        builder61.ensureSaneDefaults();
        java.util.concurrent.Executor executor63 = builder61.callbackExecutor;
        restAdapter52.callbackExecutor = executor63;
        builder22.callbackExecutor = executor63;
        builder9.callbackExecutor = executor63;
        builder0.callbackExecutor = executor63;
        retrofit.Server server68 = builder0.server;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(provider7);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNotNull(restAdapter39);
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(provider54);
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertNull(errorHandler58);
        org.junit.Assert.assertNull(executor59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(executor63);
        org.junit.Assert.assertNull(server68);
    }

    @Test
    public void test04923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04923");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.client.Header[] headerArray22 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList23 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList23, headerArray22);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList23, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList23, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList23, typedOutput29);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList23, typedOutput31);
        retrofit.mime.TypedOutput typedOutput33 = request32.getBody();
        retrofit.client.Request request34 = restAdapter12.logAndReplaceRequest(request32);
        retrofit.client.Client.Provider provider35 = null;
        restAdapter12.clientProvider = provider35;
        retrofit.Profiler profiler37 = null;
        restAdapter12.profiler = profiler37;
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(typedOutput33);
        org.junit.Assert.assertNotNull(request34);
    }

    @Test
    public void test04924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04924");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.client.Client.Provider provider2 = restAdapter0.clientProvider;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler4 = builder3.errorHandler;
        retrofit.Server server7 = new retrofit.Server("", "");
        builder3.server = server7;
        retrofit.RestAdapter.Log log9 = retrofit.RestAdapter.Log.NONE;
        builder3.log = log9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler12 = builder11.errorHandler;
        retrofit.client.Client.Provider provider13 = null;
        builder11.clientProvider = provider13;
        retrofit.Server server17 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder18 = builder11.setServer(server17);
        retrofit.converter.Converter converter19 = null;
        builder18.converter = converter19;
        retrofit.RestAdapter restAdapter21 = builder18.build();
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler23 = builder22.errorHandler;
        java.util.concurrent.Executor executor24 = null;
        builder22.callbackExecutor = executor24;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider27 = builder26.clientProvider;
        java.util.concurrent.Executor executor28 = null;
        builder26.callbackExecutor = executor28;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.Server server33 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder34 = builder30.setServer(server33);
        java.lang.String str35 = server33.getUrl();
        retrofit.RestAdapter.Builder builder36 = builder26.setServer(server33);
        retrofit.RestAdapter.Builder builder37 = builder22.setServer(server33);
        restAdapter21.server = server33;
        java.util.concurrent.Executor executor39 = restAdapter21.httpExecutor;
        builder3.httpExecutor = executor39;
        restAdapter0.callbackExecutor = executor39;
        retrofit.RestAdapter.RestHandler restHandler42 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor43 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.Log log44 = restAdapter0.log;
        retrofit.RestAdapter.RestHandler restHandler45 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor46 = restAdapter0.httpExecutor;
        org.junit.Assert.assertNull(provider2);
        org.junit.Assert.assertNull(errorHandler4);
        org.junit.Assert.assertNotNull(log9);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(restAdapter21);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNull(provider27);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(executor39);
        org.junit.Assert.assertNull(executor43);
        org.junit.Assert.assertNull(log44);
        org.junit.Assert.assertNull(executor46);
    }

    @Test
    public void test04925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04925");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = null;
        restAdapter0.callbackExecutor = executor2;
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor5 = restAdapter4.callbackExecutor;
        java.util.concurrent.Executor executor6 = restAdapter4.callbackExecutor;
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler8 = restAdapter7.errorHandler;
        retrofit.Server server11 = new retrofit.Server("", "");
        restAdapter7.server = server11;
        restAdapter4.server = server11;
        restAdapter0.server = server11;
        retrofit.Server server15 = null;
        retrofit.client.Client.Provider provider16 = null;
        java.util.concurrent.Executor executor17 = null;
        java.util.concurrent.Executor executor18 = null;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        retrofit.converter.Converter converter20 = null;
        retrofit.Profiler profiler21 = null;
        retrofit.ErrorHandler errorHandler22 = null;
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        log23.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server15, provider16, executor17, executor18, requestInterceptor19, converter20, profiler21, errorHandler22, log23, logLevel26);
        retrofit.RestAdapter.RestHandler restHandler28 = restAdapter27.new RestHandler();
        retrofit.client.Header[] headerArray37 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList38 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList38, headerArray37);
        retrofit.mime.TypedOutput typedOutput40 = null;
        retrofit.client.Request request41 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList38, typedOutput40);
        retrofit.mime.TypedOutput typedOutput42 = null;
        retrofit.client.Request request43 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList38, typedOutput42);
        retrofit.mime.TypedOutput typedOutput44 = null;
        retrofit.client.Request request45 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList38, typedOutput44);
        retrofit.mime.TypedOutput typedOutput46 = null;
        retrofit.client.Request request47 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList38, typedOutput46);
        retrofit.mime.TypedOutput typedOutput48 = request47.getBody();
        retrofit.client.Request request49 = restAdapter27.logAndReplaceRequest(request47);
        retrofit.ErrorHandler errorHandler50 = restAdapter27.errorHandler;
        retrofit.client.Header[] headerArray67 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList68 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList68, headerArray67);
        retrofit.mime.TypedOutput typedOutput70 = null;
        retrofit.client.Request request71 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList68, typedOutput70);
        retrofit.mime.TypedOutput typedOutput72 = null;
        retrofit.client.Request request73 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList68, typedOutput72);
        retrofit.mime.TypedOutput typedOutput74 = null;
        retrofit.client.Request request75 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList68, typedOutput74);
        retrofit.mime.TypedOutput typedOutput76 = null;
        retrofit.client.Request request77 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList68, typedOutput76);
        retrofit.mime.TypedOutput typedOutput78 = null;
        retrofit.client.Request request79 = new retrofit.client.Request("default", "hi!", (java.util.List<retrofit.client.Header>) headerList68, typedOutput78);
        retrofit.mime.TypedOutput typedOutput80 = null;
        retrofit.client.Request request81 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList68, typedOutput80);
        retrofit.mime.TypedOutput typedOutput82 = null;
        retrofit.client.Request request83 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList68, typedOutput82);
        retrofit.mime.TypedOutput typedOutput84 = null;
        retrofit.client.Request request85 = new retrofit.client.Request("default", "default", (java.util.List<retrofit.client.Header>) headerList68, typedOutput84);
        retrofit.client.Request request86 = restAdapter27.logAndReplaceRequest(request85);
        java.lang.String str87 = request85.getMethod();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request88 = restAdapter0.logAndReplaceRequest(request85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(typedOutput48);
        org.junit.Assert.assertNotNull(request49);
        org.junit.Assert.assertNull(errorHandler50);
        org.junit.Assert.assertNotNull(headerArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(request86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "default" + "'", str87, "default");
    }

    @Test
    public void test04926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04926");
        retrofit.client.Header[] headerArray22 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList23 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList23, headerArray22);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList23, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList23, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList23, typedOutput29);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList23, typedOutput31);
        retrofit.mime.TypedOutput typedOutput33 = null;
        retrofit.client.Request request34 = new retrofit.client.Request("default", "hi!", (java.util.List<retrofit.client.Header>) headerList23, typedOutput33);
        java.util.List<retrofit.client.Header> headerList35 = request34.getHeaders();
        retrofit.mime.TypedOutput typedOutput36 = null;
        retrofit.client.Request request37 = new retrofit.client.Request("default", "hi!", headerList35, typedOutput36);
        java.util.List<retrofit.client.Header> headerList38 = request37.getHeaders();
        retrofit.mime.TypedOutput typedOutput39 = null;
        retrofit.client.Request request40 = new retrofit.client.Request("", "", headerList38, typedOutput39);
        retrofit.mime.TypedOutput typedOutput41 = null;
        retrofit.client.Request request42 = new retrofit.client.Request("hi!", "default", headerList38, typedOutput41);
        retrofit.mime.TypedOutput typedOutput43 = null;
        retrofit.client.Request request44 = new retrofit.client.Request("default", "hi!", headerList38, typedOutput43);
        retrofit.mime.TypedOutput typedOutput45 = null;
        retrofit.client.Request request46 = new retrofit.client.Request("default", "default", headerList38, typedOutput45);
        java.util.List<retrofit.client.Header> headerList47 = request46.getHeaders();
        retrofit.mime.TypedOutput typedOutput48 = null;
        retrofit.client.Request request49 = new retrofit.client.Request("", "default", headerList47, typedOutput48);
        org.junit.Assert.assertNotNull(headerArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(headerList35);
        org.junit.Assert.assertNotNull(headerList38);
        org.junit.Assert.assertNotNull(headerList47);
    }

    @Test
    public void test04927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04927");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter0.getLogLevel();
        retrofit.ErrorHandler errorHandler20 = null;
        restAdapter0.errorHandler = errorHandler20;
        retrofit.client.Client.Provider provider22 = null;
        restAdapter0.clientProvider = provider22;
        retrofit.ErrorHandler errorHandler24 = restAdapter0.errorHandler;
        retrofit.Server server25 = restAdapter0.server;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler27 = builder26.errorHandler;
        retrofit.ErrorHandler errorHandler28 = builder26.errorHandler;
        retrofit.RestAdapter.Log log29 = null;
        builder26.log = log29;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean32 = logLevel31.log();
        builder26.logLevel = logLevel31;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler35 = restAdapter34.new RestHandler();
        java.util.concurrent.Executor executor36 = null;
        restAdapter34.callbackExecutor = executor36;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor39 = restAdapter38.callbackExecutor;
        java.util.concurrent.Executor executor40 = restAdapter38.callbackExecutor;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler42 = restAdapter41.errorHandler;
        retrofit.Server server45 = new retrofit.Server("", "");
        restAdapter41.server = server45;
        restAdapter38.server = server45;
        restAdapter34.server = server45;
        retrofit.RestAdapter.Builder builder49 = builder26.setServer(server45);
        restAdapter0.server = server45;
        retrofit.RestAdapter.Log log51 = restAdapter0.log;
        java.util.concurrent.Executor executor52 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.Log log53 = restAdapter0.log;
        retrofit.RestAdapter.RestHandler restHandler54 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel55 = restAdapter0.logLevel;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNotNull(server25);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNull(executor40);
        org.junit.Assert.assertNull(errorHandler42);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(log51);
        org.junit.Assert.assertNull(executor52);
        org.junit.Assert.assertNull(log53);
        org.junit.Assert.assertNull(logLevel55);
    }

    @Test
    public void test04928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04928");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.ErrorHandler errorHandler5 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler7 = builder6.errorHandler;
        retrofit.ErrorHandler errorHandler8 = builder6.errorHandler;
        retrofit.converter.Converter converter9 = null;
        builder6.converter = converter9;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        builder6.requestInterceptor = requestInterceptor11;
        retrofit.client.Client.Provider provider13 = builder6.clientProvider;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.Server server17 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder18 = builder14.setServer(server17);
        retrofit.RestAdapter.LogLevel logLevel19 = builder18.logLevel;
        java.util.concurrent.Executor executor20 = builder18.httpExecutor;
        retrofit.RestAdapter restAdapter21 = builder18.build();
        retrofit.ErrorHandler errorHandler22 = builder18.errorHandler;
        retrofit.RestAdapter.Builder builder23 = builder6.setErrorHandler(errorHandler22);
        builder0.errorHandler = errorHandler22;
        retrofit.Profiler profiler25 = null;
        builder0.profiler = profiler25;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(errorHandler5);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNull(provider13);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNotNull(restAdapter21);
        org.junit.Assert.assertNotNull(errorHandler22);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test04929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04929");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean3 = logLevel2.log();
        restAdapter0.logLevel = logLevel2;
        retrofit.Profiler profiler5 = restAdapter0.profiler;
        retrofit.Profiler profiler6 = restAdapter0.profiler;
        retrofit.client.Response response8 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response10 = restAdapter0.logAndReplaceResponse("default", response8, (long) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(profiler5);
        org.junit.Assert.assertNull(profiler6);
    }

    @Test
    public void test04930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04930");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.ErrorHandler errorHandler3 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel6 = builder0.logLevel;
        retrofit.RestAdapter restAdapter7 = builder0.build();
        java.util.concurrent.Executor executor8 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler10 = builder9.errorHandler;
        retrofit.ErrorHandler errorHandler11 = builder9.errorHandler;
        retrofit.Profiler profiler12 = builder9.profiler;
        retrofit.RestAdapter.Log log13 = builder9.log;
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.FULL;
        builder9.logLevel = logLevel14;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.Server server19 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder20 = builder16.setServer(server19);
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor22 = restAdapter21.callbackExecutor;
        java.util.concurrent.Executor executor23 = restAdapter21.callbackExecutor;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler25 = restAdapter24.errorHandler;
        retrofit.Server server28 = new retrofit.Server("", "");
        restAdapter24.server = server28;
        restAdapter21.server = server28;
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        restAdapter21.log = log31;
        retrofit.RestAdapter.Builder builder33 = builder20.setLog(log31);
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder35 = builder20.setLogLevel(logLevel34);
        retrofit.Profiler profiler36 = null;
        builder35.profiler = profiler36;
        retrofit.converter.Converter converter38 = null;
        builder35.converter = converter38;
        retrofit.ErrorHandler errorHandler40 = null;
        builder35.errorHandler = errorHandler40;
        retrofit.RestAdapter restAdapter42 = builder35.build();
        retrofit.ErrorHandler errorHandler43 = builder35.errorHandler;
        retrofit.RestAdapter.Builder builder44 = builder9.setErrorHandler(errorHandler43);
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler46 = builder45.errorHandler;
        retrofit.client.Client.Provider provider47 = null;
        builder45.clientProvider = provider47;
        retrofit.Server server51 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder52 = builder45.setServer(server51);
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler54 = builder53.errorHandler;
        retrofit.client.Client.Provider provider55 = null;
        builder53.clientProvider = provider55;
        retrofit.converter.Converter converter57 = builder53.converter;
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder59 = builder53.setLogLevel(logLevel58);
        builder45.logLevel = logLevel58;
        boolean boolean61 = logLevel58.log();
        builder9.logLevel = logLevel58;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler64 = builder63.errorHandler;
        retrofit.ErrorHandler errorHandler65 = builder63.errorHandler;
        retrofit.converter.Converter converter66 = null;
        builder63.converter = converter66;
        retrofit.RequestInterceptor requestInterceptor68 = null;
        builder63.requestInterceptor = requestInterceptor68;
        retrofit.client.Client.Provider provider70 = builder63.clientProvider;
        builder63.ensureSaneDefaults();
        retrofit.client.Client.Provider provider72 = builder63.clientProvider;
        builder9.clientProvider = provider72;
        retrofit.RestAdapter.Builder builder74 = builder0.setClient(provider72);
        java.util.concurrent.Executor executor75 = builder0.httpExecutor;
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNotNull(executor8);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(profiler12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNull(errorHandler25);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(restAdapter42);
        org.junit.Assert.assertNotNull(errorHandler43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(errorHandler46);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(errorHandler54);
        org.junit.Assert.assertNull(converter57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(errorHandler64);
        org.junit.Assert.assertNull(errorHandler65);
        org.junit.Assert.assertNull(provider70);
        org.junit.Assert.assertNotNull(provider72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(executor75);
    }

    @Test
    public void test04931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04931");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        builder0.requestInterceptor = requestInterceptor2;
        java.util.concurrent.Executor executor4 = builder0.httpExecutor;
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        log5.log("default");
        log5.log("default");
        retrofit.RestAdapter.Builder builder10 = builder0.setLog(log5);
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter11.new RestHandler();
        java.util.concurrent.Executor executor13 = null;
        restAdapter11.httpExecutor = executor13;
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter11.requestInterceptor;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor17 = restAdapter16.callbackExecutor;
        java.util.concurrent.Executor executor18 = restAdapter16.callbackExecutor;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler20 = restAdapter19.errorHandler;
        retrofit.Server server23 = new retrofit.Server("", "");
        restAdapter19.server = server23;
        restAdapter16.server = server23;
        retrofit.RestAdapter.LogLevel logLevel26 = restAdapter16.logLevel;
        retrofit.Server server27 = restAdapter16.server;
        java.util.concurrent.Executor executor28 = restAdapter16.callbackExecutor;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler30 = builder29.errorHandler;
        retrofit.ErrorHandler errorHandler31 = builder29.errorHandler;
        retrofit.RestAdapter.Log log32 = null;
        builder29.log = log32;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        builder29.requestInterceptor = requestInterceptor34;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor37 = restAdapter36.callbackExecutor;
        java.util.concurrent.Executor executor38 = restAdapter36.callbackExecutor;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler40 = restAdapter39.errorHandler;
        retrofit.Server server43 = new retrofit.Server("", "");
        restAdapter39.server = server43;
        restAdapter36.server = server43;
        retrofit.RestAdapter.Builder builder46 = builder29.setServer(server43);
        retrofit.RequestInterceptor requestInterceptor47 = null;
        builder29.requestInterceptor = requestInterceptor47;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor50 = restAdapter49.callbackExecutor;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor52 = restAdapter51.callbackExecutor;
        java.util.concurrent.Executor executor53 = restAdapter51.callbackExecutor;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler55 = restAdapter54.errorHandler;
        retrofit.Server server58 = new retrofit.Server("", "");
        restAdapter54.server = server58;
        restAdapter51.server = server58;
        restAdapter49.server = server58;
        retrofit.Profiler profiler62 = restAdapter49.profiler;
        retrofit.ErrorHandler errorHandler63 = null;
        restAdapter49.errorHandler = errorHandler63;
        retrofit.Profiler profiler65 = null;
        restAdapter49.profiler = profiler65;
        java.util.concurrent.Executor executor67 = null;
        restAdapter49.httpExecutor = executor67;
        retrofit.RestAdapter.LogLevel logLevel69 = restAdapter49.logLevel;
        retrofit.converter.Converter converter70 = restAdapter49.converter;
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler72 = builder71.errorHandler;
        retrofit.ErrorHandler errorHandler73 = builder71.errorHandler;
        java.util.concurrent.Executor executor74 = builder71.callbackExecutor;
        java.util.concurrent.Executor executor75 = null;
        builder71.callbackExecutor = executor75;
        retrofit.RestAdapter.Builder builder77 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler78 = builder77.errorHandler;
        retrofit.Server server81 = new retrofit.Server("", "");
        builder77.server = server81;
        retrofit.RestAdapter.Log log83 = retrofit.RestAdapter.Log.NONE;
        builder77.log = log83;
        retrofit.RestAdapter.LogLevel logLevel85 = builder77.logLevel;
        retrofit.RestAdapter.Builder builder86 = builder71.setLogLevel(logLevel85);
        restAdapter49.logLevel = logLevel85;
        retrofit.RestAdapter.Builder builder88 = builder29.setLogLevel(logLevel85);
        builder29.ensureSaneDefaults();
        retrofit.RestAdapter.Log log90 = builder29.log;
        restAdapter16.log = log90;
        restAdapter11.log = log90;
        builder0.log = log90;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNull(logLevel26);
        org.junit.Assert.assertNotNull(server27);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNull(errorHandler30);
        org.junit.Assert.assertNull(errorHandler31);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(executor50);
        org.junit.Assert.assertNull(executor52);
        org.junit.Assert.assertNull(executor53);
        org.junit.Assert.assertNull(errorHandler55);
        org.junit.Assert.assertNull(profiler62);
        org.junit.Assert.assertNull(logLevel69);
        org.junit.Assert.assertNull(converter70);
        org.junit.Assert.assertNull(errorHandler72);
        org.junit.Assert.assertNull(errorHandler73);
        org.junit.Assert.assertNull(executor74);
        org.junit.Assert.assertNull(errorHandler78);
        org.junit.Assert.assertNotNull(log83);
        org.junit.Assert.assertTrue("'" + logLevel85 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel85.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(log90);
    }

    @Test
    public void test04932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04932");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.Server server5 = new retrofit.Server("hi!", "hi!");
        restAdapter0.server = server5;
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter0.getLogLevel();
        retrofit.Profiler profiler8 = restAdapter0.profiler;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor10 = restAdapter9.callbackExecutor;
        java.util.concurrent.Executor executor11 = restAdapter9.callbackExecutor;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler13 = restAdapter12.errorHandler;
        retrofit.Server server16 = new retrofit.Server("", "");
        restAdapter12.server = server16;
        restAdapter9.server = server16;
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter9.new RestHandler();
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor21 = restAdapter20.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler22 = restAdapter20.new RestHandler();
        retrofit.Server server25 = new retrofit.Server("hi!", "hi!");
        restAdapter20.server = server25;
        retrofit.Server server27 = restAdapter20.server;
        restAdapter9.server = server27;
        restAdapter0.server = server27;
        retrofit.Profiler profiler30 = null;
        restAdapter0.profiler = profiler30;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor33 = restAdapter32.callbackExecutor;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor35 = restAdapter34.callbackExecutor;
        java.util.concurrent.Executor executor36 = restAdapter34.callbackExecutor;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler38 = restAdapter37.errorHandler;
        retrofit.Server server41 = new retrofit.Server("", "");
        restAdapter37.server = server41;
        restAdapter34.server = server41;
        restAdapter32.server = server41;
        retrofit.Profiler profiler45 = restAdapter32.profiler;
        retrofit.ErrorHandler errorHandler46 = null;
        restAdapter32.errorHandler = errorHandler46;
        retrofit.Profiler profiler48 = null;
        restAdapter32.profiler = profiler48;
        retrofit.RestAdapter.LogLevel logLevel50 = restAdapter32.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter32.logLevel = logLevel51;
        restAdapter0.logLevel = logLevel51;
        retrofit.RestAdapter.RestHandler restHandler54 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel55 = restAdapter0.getLogLevel();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(logLevel7);
        org.junit.Assert.assertNull(profiler8);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNotNull(server27);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertNull(executor36);
        org.junit.Assert.assertNull(errorHandler38);
        org.junit.Assert.assertNull(profiler45);
        org.junit.Assert.assertNull(logLevel50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test04933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04933");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.converter.Converter converter5 = builder0.converter;
        retrofit.RequestInterceptor requestInterceptor6 = builder0.requestInterceptor;
        java.util.concurrent.Executor executor7 = builder0.callbackExecutor;
        retrofit.Profiler profiler8 = builder0.profiler;
        java.util.concurrent.Executor executor9 = builder0.callbackExecutor;
        retrofit.Server server10 = builder0.server;
        retrofit.Profiler profiler11 = null;
        builder0.profiler = profiler11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler14 = null;
        builder13.errorHandler = errorHandler14;
        retrofit.ErrorHandler errorHandler16 = builder13.errorHandler;
        retrofit.RestAdapter.Builder builder18 = builder13.setServer("hi!");
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler20 = builder19.errorHandler;
        retrofit.ErrorHandler errorHandler21 = builder19.errorHandler;
        retrofit.Profiler profiler22 = builder19.profiler;
        retrofit.RestAdapter.Log log23 = builder19.log;
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.FULL;
        builder19.logLevel = logLevel24;
        retrofit.RestAdapter.Builder builder26 = builder18.setLogLevel(logLevel24);
        retrofit.Server server29 = new retrofit.Server("hi!", "default");
        retrofit.RestAdapter.Builder builder30 = builder18.setServer(server29);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler32 = null;
        builder31.errorHandler = errorHandler32;
        retrofit.ErrorHandler errorHandler34 = builder31.errorHandler;
        retrofit.RestAdapter.Builder builder36 = builder31.setServer("hi!");
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler38 = builder37.errorHandler;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.Server server42 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder43 = builder39.setServer(server42);
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor45 = restAdapter44.callbackExecutor;
        java.util.concurrent.Executor executor46 = restAdapter44.callbackExecutor;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler48 = restAdapter47.errorHandler;
        retrofit.Server server51 = new retrofit.Server("", "");
        restAdapter47.server = server51;
        restAdapter44.server = server51;
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        restAdapter44.log = log54;
        retrofit.RestAdapter.Builder builder56 = builder43.setLog(log54);
        retrofit.RestAdapter.Builder builder57 = builder37.setLog(log54);
        builder31.log = log54;
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler60 = builder59.errorHandler;
        retrofit.client.Client.Provider provider61 = null;
        builder59.clientProvider = provider61;
        retrofit.Server server65 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder66 = builder59.setServer(server65);
        retrofit.converter.Converter converter67 = null;
        builder66.converter = converter67;
        retrofit.RestAdapter restAdapter69 = builder66.build();
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler71 = builder70.errorHandler;
        java.util.concurrent.Executor executor72 = null;
        builder70.callbackExecutor = executor72;
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider75 = builder74.clientProvider;
        java.util.concurrent.Executor executor76 = null;
        builder74.callbackExecutor = executor76;
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        retrofit.Server server81 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder82 = builder78.setServer(server81);
        java.lang.String str83 = server81.getUrl();
        retrofit.RestAdapter.Builder builder84 = builder74.setServer(server81);
        retrofit.RestAdapter.Builder builder85 = builder70.setServer(server81);
        restAdapter69.server = server81;
        retrofit.client.Client.Provider provider87 = restAdapter69.clientProvider;
        retrofit.RestAdapter.Builder builder88 = builder31.setClient(provider87);
        retrofit.RestAdapter.Builder builder89 = builder18.setClient(provider87);
        builder0.clientProvider = provider87;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(converter5);
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(profiler8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNotNull(server10);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(log23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(errorHandler34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(errorHandler38);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertNull(executor46);
        org.junit.Assert.assertNull(errorHandler48);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(errorHandler60);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(restAdapter69);
        org.junit.Assert.assertNull(errorHandler71);
        org.junit.Assert.assertNull(provider75);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "hi!" + "'", str83, "hi!");
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(provider87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder89);
    }

    @Test
    public void test04934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04934");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.Server server7 = new retrofit.Server("default", "hi!");
        java.lang.String str8 = server7.getUrl();
        retrofit.RestAdapter.Builder builder9 = builder4.setServer(server7);
        retrofit.RestAdapter.LogLevel logLevel10 = builder9.logLevel;
        retrofit.ErrorHandler errorHandler11 = builder9.errorHandler;
        retrofit.converter.Converter converter12 = builder9.converter;
        retrofit.Server server13 = builder9.server;
        retrofit.RequestInterceptor requestInterceptor14 = builder9.requestInterceptor;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "default" + "'", str8, "default");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(converter12);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNull(requestInterceptor14);
    }

    @Test
    public void test04935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04935");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        builder0.ensureSaneDefaults();
        builder0.ensureSaneDefaults();
        retrofit.Profiler profiler6 = null;
        builder0.profiler = profiler6;
        org.junit.Assert.assertNull(server1);
    }

    @Test
    public void test04936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04936");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.Profiler profiler3 = builder0.profiler;
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor5 = restAdapter4.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.Server server9 = new retrofit.Server("hi!", "hi!");
        restAdapter4.server = server9;
        retrofit.RestAdapter.Builder builder11 = builder0.setServer(server9);
        retrofit.client.Client.Provider provider12 = builder11.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel13 = builder11.logLevel;
        retrofit.RequestInterceptor requestInterceptor14 = builder11.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor15 = builder11.requestInterceptor;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNull(requestInterceptor15);
    }

    @Test
    public void test04937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04937");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        restAdapter5.log = log15;
        retrofit.RestAdapter.Builder builder17 = builder4.setLog(log15);
        retrofit.converter.Converter converter18 = null;
        builder17.converter = converter18;
        retrofit.RestAdapter.Builder builder21 = builder17.setServer("hi!");
        builder17.ensureSaneDefaults();
        retrofit.RestAdapter.Log log23 = builder17.log;
        retrofit.RequestInterceptor requestInterceptor24 = builder17.requestInterceptor;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor26 = restAdapter25.callbackExecutor;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor28 = restAdapter27.callbackExecutor;
        java.util.concurrent.Executor executor29 = restAdapter27.callbackExecutor;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler31 = restAdapter30.errorHandler;
        retrofit.Server server34 = new retrofit.Server("", "");
        restAdapter30.server = server34;
        restAdapter27.server = server34;
        restAdapter25.server = server34;
        retrofit.Profiler profiler38 = restAdapter25.profiler;
        retrofit.ErrorHandler errorHandler39 = null;
        restAdapter25.errorHandler = errorHandler39;
        retrofit.Profiler profiler41 = null;
        restAdapter25.profiler = profiler41;
        retrofit.RestAdapter.LogLevel logLevel43 = restAdapter25.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter25.getLogLevel();
        retrofit.ErrorHandler errorHandler45 = null;
        restAdapter25.errorHandler = errorHandler45;
        retrofit.client.Client.Provider provider47 = null;
        restAdapter25.clientProvider = provider47;
        retrofit.ErrorHandler errorHandler49 = restAdapter25.errorHandler;
        retrofit.Server server50 = restAdapter25.server;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler52 = builder51.errorHandler;
        retrofit.ErrorHandler errorHandler53 = builder51.errorHandler;
        retrofit.RestAdapter.Log log54 = null;
        builder51.log = log54;
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean57 = logLevel56.log();
        builder51.logLevel = logLevel56;
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler60 = restAdapter59.new RestHandler();
        java.util.concurrent.Executor executor61 = null;
        restAdapter59.callbackExecutor = executor61;
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor64 = restAdapter63.callbackExecutor;
        java.util.concurrent.Executor executor65 = restAdapter63.callbackExecutor;
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler67 = restAdapter66.errorHandler;
        retrofit.Server server70 = new retrofit.Server("", "");
        restAdapter66.server = server70;
        restAdapter63.server = server70;
        restAdapter59.server = server70;
        retrofit.RestAdapter.Builder builder74 = builder51.setServer(server70);
        restAdapter25.server = server70;
        retrofit.Server server76 = restAdapter25.server;
        retrofit.RestAdapter.Builder builder77 = builder17.setServer(server76);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNotNull(requestInterceptor24);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(errorHandler31);
        org.junit.Assert.assertNull(profiler38);
        org.junit.Assert.assertNull(logLevel43);
        org.junit.Assert.assertNull(logLevel44);
        org.junit.Assert.assertNull(errorHandler49);
        org.junit.Assert.assertNotNull(server50);
        org.junit.Assert.assertNull(errorHandler52);
        org.junit.Assert.assertNull(errorHandler53);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(executor64);
        org.junit.Assert.assertNull(executor65);
        org.junit.Assert.assertNull(errorHandler67);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(server76);
        org.junit.Assert.assertNotNull(builder77);
    }

    @Test
    public void test04938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04938");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.ErrorHandler errorHandler3 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler7 = builder6.errorHandler;
        retrofit.ErrorHandler errorHandler8 = builder6.errorHandler;
        retrofit.Profiler profiler9 = builder6.profiler;
        retrofit.RestAdapter.Log log10 = builder6.log;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.FULL;
        builder6.logLevel = logLevel11;
        retrofit.RestAdapter.Builder builder13 = builder5.setLogLevel(logLevel11);
        retrofit.Server server16 = new retrofit.Server("hi!", "default");
        retrofit.RestAdapter.Builder builder17 = builder5.setServer(server16);
        retrofit.Server server18 = builder5.server;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.Server server22 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder23 = builder19.setServer(server22);
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor25 = restAdapter24.callbackExecutor;
        java.util.concurrent.Executor executor26 = restAdapter24.callbackExecutor;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler28 = restAdapter27.errorHandler;
        retrofit.Server server31 = new retrofit.Server("", "");
        restAdapter27.server = server31;
        restAdapter24.server = server31;
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        restAdapter24.log = log34;
        retrofit.RestAdapter.Builder builder36 = builder23.setLog(log34);
        retrofit.RestAdapter.Builder builder38 = builder23.setServer("hi!");
        retrofit.RestAdapter.Log log39 = builder38.log;
        retrofit.Server server42 = new retrofit.Server("default", "");
        builder38.server = server42;
        java.lang.String str44 = server42.getName();
        retrofit.RestAdapter.Builder builder45 = builder5.setServer(server42);
        java.lang.String str46 = server42.getName();
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNull(profiler9);
        org.junit.Assert.assertNull(log10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(server18);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
    }

    @Test
    public void test04939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04939");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.Profiler profiler3 = null;
        restAdapter0.profiler = profiler3;
        retrofit.converter.Converter converter5 = restAdapter0.converter;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(converter5);
    }

    @Test
    public void test04940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04940");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = builder2.errorHandler;
        retrofit.ErrorHandler errorHandler4 = builder2.errorHandler;
        retrofit.RestAdapter.Log log5 = null;
        builder2.log = log5;
        retrofit.RequestInterceptor requestInterceptor7 = null;
        builder2.requestInterceptor = requestInterceptor7;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor10 = restAdapter9.callbackExecutor;
        java.util.concurrent.Executor executor11 = restAdapter9.callbackExecutor;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler13 = restAdapter12.errorHandler;
        retrofit.Server server16 = new retrofit.Server("", "");
        restAdapter12.server = server16;
        restAdapter9.server = server16;
        retrofit.RestAdapter.Builder builder19 = builder2.setServer(server16);
        retrofit.RequestInterceptor requestInterceptor20 = null;
        builder2.requestInterceptor = requestInterceptor20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler23 = builder22.errorHandler;
        retrofit.ErrorHandler errorHandler24 = builder22.errorHandler;
        retrofit.RestAdapter.Log log25 = null;
        builder22.log = log25;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean28 = logLevel27.log();
        builder22.logLevel = logLevel27;
        retrofit.RestAdapter.Builder builder30 = builder2.setLogLevel(logLevel27);
        builder0.logLevel = logLevel27;
        retrofit.ErrorHandler errorHandler32 = builder0.errorHandler;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider35 = builder34.clientProvider;
        java.util.concurrent.Executor executor36 = null;
        builder34.callbackExecutor = executor36;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.Server server41 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder42 = builder38.setServer(server41);
        java.lang.String str43 = server41.getUrl();
        retrofit.RestAdapter.Builder builder44 = builder34.setServer(server41);
        builder34.ensureSaneDefaults();
        retrofit.Server server46 = null;
        retrofit.client.Client.Provider provider47 = null;
        java.util.concurrent.Executor executor48 = null;
        java.util.concurrent.Executor executor49 = null;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        retrofit.converter.Converter converter51 = null;
        retrofit.Profiler profiler52 = null;
        retrofit.ErrorHandler errorHandler53 = null;
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        log54.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter(server46, provider47, executor48, executor49, requestInterceptor50, converter51, profiler52, errorHandler53, log54, logLevel57);
        retrofit.RestAdapter.RestHandler restHandler59 = restAdapter58.new RestHandler();
        retrofit.RestAdapter.Log log60 = retrofit.RestAdapter.Log.NONE;
        restAdapter58.log = log60;
        retrofit.RestAdapter.Builder builder62 = builder34.setLog(log60);
        retrofit.Profiler profiler63 = null;
        builder62.profiler = profiler63;
        retrofit.RequestInterceptor requestInterceptor65 = builder62.requestInterceptor;
        retrofit.RestAdapter restAdapter66 = builder62.build();
        retrofit.converter.Converter converter67 = null;
        builder62.converter = converter67;
        retrofit.RequestInterceptor requestInterceptor69 = builder62.requestInterceptor;
        retrofit.RestAdapter.Builder builder70 = builder0.setRequestInterceptor(requestInterceptor69);
        retrofit.Server server72 = new retrofit.Server("");
        retrofit.RestAdapter.Builder builder73 = builder0.setServer(server72);
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNull(errorHandler4);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(errorHandler32);
        org.junit.Assert.assertNull(provider35);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(requestInterceptor65);
        org.junit.Assert.assertNotNull(restAdapter66);
        org.junit.Assert.assertNotNull(requestInterceptor69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder73);
    }

    @Test
    public void test04941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04941");
        retrofit.Server server8 = null;
        retrofit.client.Client.Provider provider9 = null;
        java.util.concurrent.Executor executor10 = null;
        java.util.concurrent.Executor executor11 = null;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        retrofit.converter.Converter converter13 = null;
        retrofit.Profiler profiler14 = null;
        retrofit.ErrorHandler errorHandler15 = null;
        retrofit.RestAdapter.Log log16 = retrofit.RestAdapter.Log.NONE;
        log16.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter(server8, provider9, executor10, executor11, requestInterceptor12, converter13, profiler14, errorHandler15, log16, logLevel19);
        retrofit.RestAdapter.RestHandler restHandler21 = restAdapter20.new RestHandler();
        retrofit.client.Header[] headerArray30 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList31 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList31, headerArray30);
        retrofit.mime.TypedOutput typedOutput33 = null;
        retrofit.client.Request request34 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList31, typedOutput33);
        retrofit.mime.TypedOutput typedOutput35 = null;
        retrofit.client.Request request36 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList31, typedOutput35);
        retrofit.mime.TypedOutput typedOutput37 = null;
        retrofit.client.Request request38 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList31, typedOutput37);
        retrofit.mime.TypedOutput typedOutput39 = null;
        retrofit.client.Request request40 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList31, typedOutput39);
        retrofit.mime.TypedOutput typedOutput41 = request40.getBody();
        retrofit.client.Request request42 = restAdapter20.logAndReplaceRequest(request40);
        retrofit.RestAdapter.RestHandler restHandler43 = restAdapter20.new RestHandler();
        retrofit.client.Client.Provider provider44 = restAdapter20.clientProvider;
        retrofit.converter.Converter converter45 = null;
        restAdapter20.converter = converter45;
        retrofit.client.Header[] headerArray55 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList56 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList56, headerArray55);
        retrofit.mime.TypedOutput typedOutput58 = null;
        retrofit.client.Request request59 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList56, typedOutput58);
        retrofit.mime.TypedOutput typedOutput60 = null;
        retrofit.client.Request request61 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList56, typedOutput60);
        retrofit.mime.TypedOutput typedOutput62 = null;
        retrofit.client.Request request63 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList56, typedOutput62);
        retrofit.mime.TypedOutput typedOutput64 = request63.getBody();
        java.util.List<retrofit.client.Header> headerList65 = request63.getHeaders();
        retrofit.mime.TypedOutput typedOutput66 = null;
        retrofit.client.Request request67 = new retrofit.client.Request("default", "", headerList65, typedOutput66);
        retrofit.client.Request request68 = restAdapter20.logAndReplaceRequest(request67);
        retrofit.mime.TypedOutput typedOutput69 = request67.getBody();
        java.util.List<retrofit.client.Header> headerList70 = request67.getHeaders();
        retrofit.mime.TypedOutput typedOutput71 = null;
        retrofit.client.Request request72 = new retrofit.client.Request("", "hi!", headerList70, typedOutput71);
        retrofit.mime.TypedOutput typedOutput73 = null;
        retrofit.client.Request request74 = new retrofit.client.Request("default", "hi!", headerList70, typedOutput73);
        retrofit.mime.TypedOutput typedOutput75 = null;
        retrofit.client.Request request76 = new retrofit.client.Request("default", "default", headerList70, typedOutput75);
        retrofit.mime.TypedOutput typedOutput77 = null;
        retrofit.client.Request request78 = new retrofit.client.Request("default", "", headerList70, typedOutput77);
        org.junit.Assert.assertNotNull(log16);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(typedOutput41);
        org.junit.Assert.assertNotNull(request42);
        org.junit.Assert.assertNull(provider44);
        org.junit.Assert.assertNotNull(headerArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(typedOutput64);
        org.junit.Assert.assertNotNull(headerList65);
        org.junit.Assert.assertNotNull(request68);
        org.junit.Assert.assertNull(typedOutput69);
        org.junit.Assert.assertNotNull(headerList70);
    }

    @Test
    public void test04942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04942");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler1 = restAdapter0.errorHandler;
        retrofit.Server server4 = new retrofit.Server("", "");
        restAdapter0.server = server4;
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter0.logLevel;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor9 = restAdapter8.callbackExecutor;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor11 = restAdapter10.callbackExecutor;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler14 = restAdapter13.errorHandler;
        retrofit.Server server17 = new retrofit.Server("", "");
        restAdapter13.server = server17;
        restAdapter10.server = server17;
        restAdapter8.server = server17;
        retrofit.Profiler profiler21 = restAdapter8.profiler;
        retrofit.ErrorHandler errorHandler22 = null;
        restAdapter8.errorHandler = errorHandler22;
        retrofit.Profiler profiler24 = null;
        restAdapter8.profiler = profiler24;
        java.util.concurrent.Executor executor26 = null;
        restAdapter8.httpExecutor = executor26;
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter8.logLevel;
        retrofit.converter.Converter converter29 = restAdapter8.converter;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler31 = builder30.errorHandler;
        retrofit.ErrorHandler errorHandler32 = builder30.errorHandler;
        retrofit.Profiler profiler33 = builder30.profiler;
        retrofit.RestAdapter.Log log34 = builder30.log;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.FULL;
        builder30.logLevel = logLevel35;
        retrofit.Profiler profiler37 = builder30.profiler;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler39 = null;
        builder38.errorHandler = errorHandler39;
        retrofit.ErrorHandler errorHandler41 = builder38.errorHandler;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler43 = builder42.errorHandler;
        retrofit.Server server46 = new retrofit.Server("", "");
        builder42.server = server46;
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        builder42.log = log48;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler51 = builder50.errorHandler;
        retrofit.client.Client.Provider provider52 = null;
        builder50.clientProvider = provider52;
        retrofit.Server server56 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder57 = builder50.setServer(server56);
        retrofit.converter.Converter converter58 = null;
        builder57.converter = converter58;
        retrofit.RestAdapter restAdapter60 = builder57.build();
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler62 = builder61.errorHandler;
        java.util.concurrent.Executor executor63 = null;
        builder61.callbackExecutor = executor63;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider66 = builder65.clientProvider;
        java.util.concurrent.Executor executor67 = null;
        builder65.callbackExecutor = executor67;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        retrofit.Server server72 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder73 = builder69.setServer(server72);
        java.lang.String str74 = server72.getUrl();
        retrofit.RestAdapter.Builder builder75 = builder65.setServer(server72);
        retrofit.RestAdapter.Builder builder76 = builder61.setServer(server72);
        restAdapter60.server = server72;
        java.util.concurrent.Executor executor78 = restAdapter60.httpExecutor;
        builder42.httpExecutor = executor78;
        builder38.httpExecutor = executor78;
        builder30.httpExecutor = executor78;
        restAdapter8.httpExecutor = executor78;
        restAdapter0.httpExecutor = executor78;
        retrofit.client.Response response85 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response87 = restAdapter0.logAndReplaceResponse("hi!", response85, (long) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(logLevel7);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(profiler21);
        org.junit.Assert.assertNull(logLevel28);
        org.junit.Assert.assertNull(converter29);
        org.junit.Assert.assertNull(errorHandler31);
        org.junit.Assert.assertNull(errorHandler32);
        org.junit.Assert.assertNull(profiler33);
        org.junit.Assert.assertNull(log34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler37);
        org.junit.Assert.assertNull(errorHandler41);
        org.junit.Assert.assertNull(errorHandler43);
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertNull(errorHandler51);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(restAdapter60);
        org.junit.Assert.assertNull(errorHandler62);
        org.junit.Assert.assertNull(provider66);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "hi!" + "'", str74, "hi!");
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(executor78);
    }

    @Test
    public void test04943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04943");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.getLogLevel();
        java.util.concurrent.Executor executor3 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider5 = builder4.clientProvider;
        retrofit.Profiler profiler6 = null;
        builder4.profiler = profiler6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler9 = builder8.errorHandler;
        retrofit.ErrorHandler errorHandler10 = builder8.errorHandler;
        retrofit.Profiler profiler11 = builder8.profiler;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor13 = restAdapter12.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter12.new RestHandler();
        retrofit.Server server17 = new retrofit.Server("hi!", "hi!");
        restAdapter12.server = server17;
        retrofit.RestAdapter.Builder builder19 = builder8.setServer(server17);
        retrofit.converter.Converter converter20 = null;
        builder19.converter = converter20;
        builder19.ensureSaneDefaults();
        retrofit.RestAdapter.Log log23 = null;
        builder19.log = log23;
        retrofit.RequestInterceptor requestInterceptor25 = builder19.requestInterceptor;
        java.util.concurrent.Executor executor26 = builder19.httpExecutor;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider28 = builder27.clientProvider;
        java.util.concurrent.Executor executor29 = null;
        builder27.callbackExecutor = executor29;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.Server server34 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder35 = builder31.setServer(server34);
        java.lang.String str36 = server34.getUrl();
        retrofit.RestAdapter.Builder builder37 = builder27.setServer(server34);
        builder27.ensureSaneDefaults();
        retrofit.Server server39 = null;
        retrofit.client.Client.Provider provider40 = null;
        java.util.concurrent.Executor executor41 = null;
        java.util.concurrent.Executor executor42 = null;
        retrofit.RequestInterceptor requestInterceptor43 = null;
        retrofit.converter.Converter converter44 = null;
        retrofit.Profiler profiler45 = null;
        retrofit.ErrorHandler errorHandler46 = null;
        retrofit.RestAdapter.Log log47 = retrofit.RestAdapter.Log.NONE;
        log47.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel50 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter(server39, provider40, executor41, executor42, requestInterceptor43, converter44, profiler45, errorHandler46, log47, logLevel50);
        retrofit.RestAdapter.RestHandler restHandler52 = restAdapter51.new RestHandler();
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        restAdapter51.log = log53;
        retrofit.RestAdapter.Builder builder55 = builder27.setLog(log53);
        retrofit.RestAdapter.Builder builder57 = builder27.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor58 = builder27.requestInterceptor;
        java.util.concurrent.Executor executor59 = builder27.httpExecutor;
        retrofit.RestAdapter.Builder builder60 = builder4.setExecutors(executor26, executor59);
        restAdapter0.callbackExecutor = executor26;
        retrofit.ErrorHandler errorHandler62 = restAdapter0.errorHandler;
        retrofit.ErrorHandler errorHandler63 = restAdapter0.errorHandler;
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNull(profiler11);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNotNull(executor26);
        org.junit.Assert.assertNull(provider28);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(log47);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(requestInterceptor58);
        org.junit.Assert.assertNotNull(executor59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(errorHandler62);
        org.junit.Assert.assertNull(errorHandler63);
    }

    @Test
    public void test04944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04944");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        java.util.concurrent.Executor executor14 = null;
        restAdapter12.callbackExecutor = executor14;
        retrofit.client.Header[] headerArray18 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList19 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList19, headerArray18);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList19, typedOutput21);
        retrofit.client.Request request23 = restAdapter12.logAndReplaceRequest(request22);
        retrofit.client.Client.Provider provider24 = restAdapter12.clientProvider;
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel26 = restAdapter12.getLogLevel();
        retrofit.Profiler profiler27 = null;
        restAdapter12.profiler = profiler27;
        retrofit.RestAdapter.RestHandler restHandler29 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Log log30 = restAdapter12.log;
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertNull(provider24);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log30);
    }

    @Test
    public void test04945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04945");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.converter.Converter converter2 = null;
        restAdapter0.converter = converter2;
        retrofit.RestAdapter.RestHandler restHandler4 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler6 = null;
        builder5.errorHandler = errorHandler6;
        retrofit.ErrorHandler errorHandler8 = builder5.errorHandler;
        retrofit.RestAdapter.Builder builder10 = builder5.setServer("hi!");
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler12 = builder11.errorHandler;
        retrofit.ErrorHandler errorHandler13 = builder11.errorHandler;
        retrofit.Profiler profiler14 = builder11.profiler;
        retrofit.RestAdapter.Log log15 = builder11.log;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.FULL;
        builder11.logLevel = logLevel16;
        retrofit.RestAdapter.Builder builder18 = builder10.setLogLevel(logLevel16);
        retrofit.Server server21 = new retrofit.Server("hi!", "default");
        retrofit.RestAdapter.Builder builder22 = builder10.setServer(server21);
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler24 = null;
        builder23.errorHandler = errorHandler24;
        retrofit.ErrorHandler errorHandler26 = builder23.errorHandler;
        retrofit.RestAdapter.Builder builder28 = builder23.setServer("hi!");
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler30 = builder29.errorHandler;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.Server server34 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder35 = builder31.setServer(server34);
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor37 = restAdapter36.callbackExecutor;
        java.util.concurrent.Executor executor38 = restAdapter36.callbackExecutor;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler40 = restAdapter39.errorHandler;
        retrofit.Server server43 = new retrofit.Server("", "");
        restAdapter39.server = server43;
        restAdapter36.server = server43;
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        restAdapter36.log = log46;
        retrofit.RestAdapter.Builder builder48 = builder35.setLog(log46);
        retrofit.RestAdapter.Builder builder49 = builder29.setLog(log46);
        builder23.log = log46;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler52 = builder51.errorHandler;
        retrofit.client.Client.Provider provider53 = null;
        builder51.clientProvider = provider53;
        retrofit.Server server57 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder58 = builder51.setServer(server57);
        retrofit.converter.Converter converter59 = null;
        builder58.converter = converter59;
        retrofit.RestAdapter restAdapter61 = builder58.build();
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler63 = builder62.errorHandler;
        java.util.concurrent.Executor executor64 = null;
        builder62.callbackExecutor = executor64;
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider67 = builder66.clientProvider;
        java.util.concurrent.Executor executor68 = null;
        builder66.callbackExecutor = executor68;
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        retrofit.Server server73 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder74 = builder70.setServer(server73);
        java.lang.String str75 = server73.getUrl();
        retrofit.RestAdapter.Builder builder76 = builder66.setServer(server73);
        retrofit.RestAdapter.Builder builder77 = builder62.setServer(server73);
        restAdapter61.server = server73;
        retrofit.client.Client.Provider provider79 = restAdapter61.clientProvider;
        retrofit.RestAdapter.Builder builder80 = builder23.setClient(provider79);
        retrofit.RestAdapter.Builder builder81 = builder10.setClient(provider79);
        retrofit.Profiler profiler82 = builder10.profiler;
        retrofit.RestAdapter.Builder builder83 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler84 = builder83.errorHandler;
        retrofit.ErrorHandler errorHandler85 = builder83.errorHandler;
        retrofit.Profiler profiler86 = builder83.profiler;
        retrofit.RestAdapter.Log log87 = builder83.log;
        retrofit.RestAdapter.LogLevel logLevel88 = retrofit.RestAdapter.LogLevel.FULL;
        builder83.logLevel = logLevel88;
        builder10.logLevel = logLevel88;
        boolean boolean91 = logLevel88.log();
        restAdapter0.logLevel = logLevel88;
        retrofit.ErrorHandler errorHandler93 = restAdapter0.errorHandler;
        retrofit.Server server94 = restAdapter0.server;
        retrofit.RequestInterceptor requestInterceptor95 = restAdapter0.requestInterceptor;
        retrofit.converter.Converter converter96 = restAdapter0.converter;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(profiler14);
        org.junit.Assert.assertNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(errorHandler26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(errorHandler30);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(errorHandler52);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(restAdapter61);
        org.junit.Assert.assertNull(errorHandler63);
        org.junit.Assert.assertNull(provider67);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "hi!" + "'", str75, "hi!");
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(provider79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNull(profiler82);
        org.junit.Assert.assertNull(errorHandler84);
        org.junit.Assert.assertNull(errorHandler85);
        org.junit.Assert.assertNull(profiler86);
        org.junit.Assert.assertNull(log87);
        org.junit.Assert.assertTrue("'" + logLevel88 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel88.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNull(errorHandler93);
        org.junit.Assert.assertNull(server94);
        org.junit.Assert.assertNull(requestInterceptor95);
        org.junit.Assert.assertNull(converter96);
    }

    @Test
    public void test04946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04946");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server6 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder7 = builder0.setServer(server6);
        java.util.concurrent.Executor executor8 = builder0.httpExecutor;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor10 = restAdapter9.callbackExecutor;
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor12 = restAdapter11.callbackExecutor;
        java.util.concurrent.Executor executor13 = restAdapter11.callbackExecutor;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler15 = restAdapter14.errorHandler;
        retrofit.Server server18 = new retrofit.Server("", "");
        restAdapter14.server = server18;
        restAdapter11.server = server18;
        restAdapter9.server = server18;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler30 = builder29.errorHandler;
        retrofit.Server server33 = new retrofit.Server("", "");
        builder29.server = server33;
        retrofit.client.Client.Provider provider35 = null;
        java.util.concurrent.Executor executor36 = null;
        java.util.concurrent.Executor executor37 = null;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        retrofit.converter.Converter converter39 = null;
        retrofit.Profiler profiler40 = null;
        retrofit.ErrorHandler errorHandler41 = null;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler43 = builder42.errorHandler;
        retrofit.Server server46 = new retrofit.Server("", "");
        builder42.server = server46;
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        builder42.log = log48;
        retrofit.Server server50 = null;
        retrofit.client.Client.Provider provider51 = null;
        java.util.concurrent.Executor executor52 = null;
        java.util.concurrent.Executor executor53 = null;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        retrofit.converter.Converter converter55 = null;
        retrofit.Profiler profiler56 = null;
        retrofit.ErrorHandler errorHandler57 = null;
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        log58.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel61 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter(server50, provider51, executor52, executor53, requestInterceptor54, converter55, profiler56, errorHandler57, log58, logLevel61);
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter(server33, provider35, executor36, executor37, requestInterceptor38, converter39, profiler40, errorHandler41, log48, logLevel61);
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.Server server67 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder68 = builder64.setServer(server67);
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor70 = restAdapter69.callbackExecutor;
        java.util.concurrent.Executor executor71 = restAdapter69.callbackExecutor;
        retrofit.RestAdapter restAdapter72 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler73 = restAdapter72.errorHandler;
        retrofit.Server server76 = new retrofit.Server("", "");
        restAdapter72.server = server76;
        restAdapter69.server = server76;
        retrofit.RestAdapter.Log log79 = retrofit.RestAdapter.Log.NONE;
        restAdapter69.log = log79;
        retrofit.RestAdapter.Builder builder81 = builder68.setLog(log79);
        retrofit.RestAdapter.LogLevel logLevel82 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder83 = builder68.setLogLevel(logLevel82);
        retrofit.RestAdapter restAdapter84 = new retrofit.RestAdapter(server18, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log48, logLevel82);
        retrofit.RestAdapter.Builder builder85 = builder0.setLog(log48);
        retrofit.RestAdapter restAdapter86 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor87 = restAdapter86.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel88 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean89 = logLevel88.log();
        restAdapter86.logLevel = logLevel88;
        builder85.logLevel = logLevel88;
        retrofit.converter.Converter converter92 = builder85.converter;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNull(errorHandler30);
        org.junit.Assert.assertNull(errorHandler43);
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertNotNull(log58);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNull(executor70);
        org.junit.Assert.assertNull(executor71);
        org.junit.Assert.assertNull(errorHandler73);
        org.junit.Assert.assertNotNull(log79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNull(executor87);
        org.junit.Assert.assertTrue("'" + logLevel88 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel88.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNull(converter92);
    }

    @Test
    public void test04947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04947");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter0.new RestHandler();
        retrofit.converter.Converter converter17 = null;
        restAdapter0.converter = converter17;
        retrofit.client.Client.Provider provider19 = restAdapter0.clientProvider;
        retrofit.RestAdapter.Log log20 = restAdapter0.log;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(provider19);
        org.junit.Assert.assertNull(log20);
    }

    @Test
    public void test04948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04948");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = builder0.clientProvider;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server7 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder8 = builder4.setServer(server7);
        java.lang.String str9 = server7.getUrl();
        retrofit.RestAdapter.Builder builder10 = builder0.setServer(server7);
        builder0.ensureSaneDefaults();
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        log20.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel23);
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter24.new RestHandler();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        restAdapter24.log = log26;
        retrofit.RestAdapter.Builder builder28 = builder0.setLog(log26);
        retrofit.Profiler profiler29 = null;
        builder28.profiler = profiler29;
        retrofit.RequestInterceptor requestInterceptor31 = builder28.requestInterceptor;
        retrofit.RestAdapter restAdapter32 = builder28.build();
        retrofit.RestAdapter.Builder builder34 = builder28.setServer("default");
        retrofit.Profiler profiler35 = builder34.profiler;
        retrofit.Profiler profiler36 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder37 = builder34.setProfiler(profiler36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(provider1);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(requestInterceptor31);
        org.junit.Assert.assertNotNull(restAdapter32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(profiler35);
    }

    @Test
    public void test04949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04949");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = null;
        restAdapter0.httpExecutor = executor2;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.logLevel;
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter0.logLevel;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        log14.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel17);
        retrofit.RequestInterceptor requestInterceptor19 = null;
        restAdapter18.requestInterceptor = requestInterceptor19;
        retrofit.RestAdapter.LogLevel logLevel21 = restAdapter18.logLevel;
        restAdapter0.logLevel = logLevel21;
        java.lang.Throwable throwable23 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable23, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test04950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04950");
        retrofit.client.Header[] headerArray14 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList15 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList15, headerArray14);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList15, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList15, typedOutput19);
        java.lang.String str21 = request20.getMethod();
        java.util.List<retrofit.client.Header> headerList22 = request20.getHeaders();
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("default", "hi!", headerList22, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("default", "default", headerList22, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("default", "hi!", headerList22, typedOutput27);
        java.lang.String str29 = request28.getUrl();
        java.util.List<retrofit.client.Header> headerList30 = request28.getHeaders();
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("default", "default", headerList30, typedOutput31);
        retrofit.mime.TypedOutput typedOutput33 = null;
        retrofit.client.Request request34 = new retrofit.client.Request("", "", headerList30, typedOutput33);
        java.lang.String str35 = request34.getMethod();
        org.junit.Assert.assertNotNull(headerArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNotNull(headerList22);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNotNull(headerList30);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
    }

    @Test
    public void test04951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04951");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        java.util.concurrent.Executor executor4 = null;
        builder0.httpExecutor = executor4;
        retrofit.Profiler profiler6 = null;
        builder0.profiler = profiler6;
        retrofit.RestAdapter.Builder builder9 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel10 = builder0.logLevel;
        java.util.concurrent.Executor executor11 = builder0.httpExecutor;
        builder0.ensureSaneDefaults();
        retrofit.client.Client client13 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder14 = builder0.setClient(client13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor11);
    }

    @Test
    public void test04952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04952");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.converter.Converter converter14 = restAdapter0.converter;
        retrofit.ErrorHandler errorHandler15 = null;
        restAdapter0.errorHandler = errorHandler15;
        retrofit.converter.Converter converter17 = restAdapter0.converter;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.logLevel;
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter0.new RestHandler();
        retrofit.ErrorHandler errorHandler20 = null;
        restAdapter0.errorHandler = errorHandler20;
        retrofit.Server server36 = null;
        retrofit.client.Client.Provider provider37 = null;
        java.util.concurrent.Executor executor38 = null;
        java.util.concurrent.Executor executor39 = null;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        retrofit.converter.Converter converter41 = null;
        retrofit.Profiler profiler42 = null;
        retrofit.ErrorHandler errorHandler43 = null;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        log44.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter(server36, provider37, executor38, executor39, requestInterceptor40, converter41, profiler42, errorHandler43, log44, logLevel47);
        retrofit.RestAdapter.RestHandler restHandler49 = restAdapter48.new RestHandler();
        retrofit.client.Header[] headerArray58 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList59 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList59, headerArray58);
        retrofit.mime.TypedOutput typedOutput61 = null;
        retrofit.client.Request request62 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList59, typedOutput61);
        retrofit.mime.TypedOutput typedOutput63 = null;
        retrofit.client.Request request64 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList59, typedOutput63);
        retrofit.mime.TypedOutput typedOutput65 = null;
        retrofit.client.Request request66 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList59, typedOutput65);
        retrofit.mime.TypedOutput typedOutput67 = null;
        retrofit.client.Request request68 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList59, typedOutput67);
        retrofit.mime.TypedOutput typedOutput69 = request68.getBody();
        retrofit.client.Request request70 = restAdapter48.logAndReplaceRequest(request68);
        java.util.List<retrofit.client.Header> headerList71 = request68.getHeaders();
        retrofit.mime.TypedOutput typedOutput72 = null;
        retrofit.client.Request request73 = new retrofit.client.Request("hi!", "", headerList71, typedOutput72);
        retrofit.mime.TypedOutput typedOutput74 = null;
        retrofit.client.Request request75 = new retrofit.client.Request("", "default", headerList71, typedOutput74);
        retrofit.mime.TypedOutput typedOutput76 = null;
        retrofit.client.Request request77 = new retrofit.client.Request("default", "default", headerList71, typedOutput76);
        retrofit.mime.TypedOutput typedOutput78 = null;
        retrofit.client.Request request79 = new retrofit.client.Request("", "", headerList71, typedOutput78);
        retrofit.mime.TypedOutput typedOutput80 = null;
        retrofit.client.Request request81 = new retrofit.client.Request("default", "", headerList71, typedOutput80);
        retrofit.mime.TypedOutput typedOutput82 = null;
        retrofit.client.Request request83 = new retrofit.client.Request("hi!", "", headerList71, typedOutput82);
        retrofit.mime.TypedOutput typedOutput84 = null;
        retrofit.client.Request request85 = new retrofit.client.Request("hi!", "", headerList71, typedOutput84);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request86 = restAdapter0.logAndReplaceRequest(request85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(converter17);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(typedOutput69);
        org.junit.Assert.assertNotNull(request70);
        org.junit.Assert.assertNotNull(headerList71);
    }

    @Test
    public void test04953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04953");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.converter.Converter converter5 = builder0.converter;
        retrofit.RequestInterceptor requestInterceptor6 = builder0.requestInterceptor;
        java.util.concurrent.Executor executor7 = builder0.callbackExecutor;
        retrofit.Profiler profiler8 = builder0.profiler;
        java.util.concurrent.Executor executor9 = builder0.httpExecutor;
        java.util.concurrent.Executor executor10 = builder0.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel11 = builder0.logLevel;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler13 = builder12.errorHandler;
        retrofit.client.Client.Provider provider14 = null;
        builder12.clientProvider = provider14;
        retrofit.Server server18 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder19 = builder12.setServer(server18);
        retrofit.client.Client.Provider provider20 = null;
        java.util.concurrent.Executor executor21 = null;
        java.util.concurrent.Executor executor22 = null;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        retrofit.converter.Converter converter24 = null;
        retrofit.Profiler profiler25 = null;
        retrofit.ErrorHandler errorHandler26 = null;
        retrofit.Server server27 = null;
        retrofit.client.Client.Provider provider28 = null;
        java.util.concurrent.Executor executor29 = null;
        java.util.concurrent.Executor executor30 = null;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        retrofit.converter.Converter converter32 = null;
        retrofit.Profiler profiler33 = null;
        retrofit.ErrorHandler errorHandler34 = null;
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        log35.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter(server27, provider28, executor29, executor30, requestInterceptor31, converter32, profiler33, errorHandler34, log35, logLevel38);
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter(server18, provider20, executor21, executor22, requestInterceptor23, converter24, profiler25, errorHandler26, log35, logLevel40);
        retrofit.RestAdapter.Builder builder42 = builder0.setLogLevel(logLevel40);
        retrofit.Profiler profiler43 = builder42.profiler;
        retrofit.Profiler profiler44 = null;
        builder42.profiler = profiler44;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(converter5);
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(profiler8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(profiler43);
    }

    @Test
    public void test04954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04954");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter0.getLogLevel();
        retrofit.client.Client.Provider provider20 = null;
        restAdapter0.clientProvider = provider20;
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter0.logLevel;
        retrofit.RestAdapter.RestHandler restHandler23 = restAdapter0.new RestHandler();
        retrofit.converter.Converter converter24 = restAdapter0.converter;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(logLevel22);
        org.junit.Assert.assertNull(converter24);
    }

    @Test
    public void test04955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04955");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.Profiler profiler3 = builder0.profiler;
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor5 = restAdapter4.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.Server server9 = new retrofit.Server("hi!", "hi!");
        restAdapter4.server = server9;
        retrofit.RestAdapter.Builder builder11 = builder0.setServer(server9);
        retrofit.converter.Converter converter12 = null;
        builder11.converter = converter12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        log22.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel25);
        builder11.logLevel = logLevel25;
        builder11.ensureSaneDefaults();
        retrofit.Server server29 = null;
        builder11.server = server29;
        builder11.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler33 = builder32.errorHandler;
        retrofit.ErrorHandler errorHandler34 = builder32.errorHandler;
        retrofit.Profiler profiler35 = builder32.profiler;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor37 = restAdapter36.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler38 = restAdapter36.new RestHandler();
        retrofit.Server server41 = new retrofit.Server("hi!", "hi!");
        restAdapter36.server = server41;
        retrofit.RestAdapter.Builder builder43 = builder32.setServer(server41);
        retrofit.converter.Converter converter44 = null;
        builder43.converter = converter44;
        retrofit.Server server46 = null;
        retrofit.client.Client.Provider provider47 = null;
        java.util.concurrent.Executor executor48 = null;
        java.util.concurrent.Executor executor49 = null;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        retrofit.converter.Converter converter51 = null;
        retrofit.Profiler profiler52 = null;
        retrofit.ErrorHandler errorHandler53 = null;
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        log54.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter(server46, provider47, executor48, executor49, requestInterceptor50, converter51, profiler52, errorHandler53, log54, logLevel57);
        builder43.logLevel = logLevel57;
        builder43.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor61 = builder43.requestInterceptor;
        java.util.concurrent.Executor executor62 = null;
        builder43.callbackExecutor = executor62;
        retrofit.converter.Converter converter64 = builder43.converter;
        retrofit.RestAdapter.Builder builder65 = builder11.setConverter(converter64);
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler67 = restAdapter66.new RestHandler();
        retrofit.client.Client.Provider provider68 = restAdapter66.clientProvider;
        retrofit.ErrorHandler errorHandler69 = restAdapter66.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel70 = restAdapter66.logLevel;
        retrofit.RestAdapter.Log log71 = restAdapter66.log;
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler73 = builder72.errorHandler;
        retrofit.ErrorHandler errorHandler74 = builder72.errorHandler;
        retrofit.Profiler profiler75 = builder72.profiler;
        retrofit.RestAdapter restAdapter76 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor77 = restAdapter76.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler78 = restAdapter76.new RestHandler();
        retrofit.Server server81 = new retrofit.Server("hi!", "hi!");
        restAdapter76.server = server81;
        retrofit.RestAdapter.Builder builder83 = builder72.setServer(server81);
        retrofit.converter.Converter converter84 = null;
        builder83.converter = converter84;
        builder83.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter87 = builder83.build();
        retrofit.RequestInterceptor requestInterceptor88 = builder83.requestInterceptor;
        restAdapter66.requestInterceptor = requestInterceptor88;
        retrofit.RestAdapter.Builder builder90 = builder11.setRequestInterceptor(requestInterceptor88);
        retrofit.RestAdapter.LogLevel logLevel91 = null;
        builder90.logLevel = logLevel91;
        retrofit.Profiler profiler93 = builder90.profiler;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler33);
        org.junit.Assert.assertNull(errorHandler34);
        org.junit.Assert.assertNull(profiler35);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(requestInterceptor61);
        org.junit.Assert.assertNotNull(converter64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(provider68);
        org.junit.Assert.assertNull(errorHandler69);
        org.junit.Assert.assertNull(logLevel70);
        org.junit.Assert.assertNull(log71);
        org.junit.Assert.assertNull(errorHandler73);
        org.junit.Assert.assertNull(errorHandler74);
        org.junit.Assert.assertNull(profiler75);
        org.junit.Assert.assertNull(executor77);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(restAdapter87);
        org.junit.Assert.assertNotNull(requestInterceptor88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNull(profiler93);
    }

    @Test
    public void test04956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04956");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter0.getLogLevel();
        retrofit.client.Client.Provider provider20 = null;
        restAdapter0.clientProvider = provider20;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean23 = logLevel22.log();
        restAdapter0.logLevel = logLevel22;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        restAdapter0.requestInterceptor = requestInterceptor25;
        retrofit.ErrorHandler errorHandler27 = restAdapter0.errorHandler;
        retrofit.converter.Converter converter28 = restAdapter0.converter;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.Server server32 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder33 = builder29.setServer(server32);
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor35 = restAdapter34.callbackExecutor;
        java.util.concurrent.Executor executor36 = restAdapter34.callbackExecutor;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler38 = restAdapter37.errorHandler;
        retrofit.Server server41 = new retrofit.Server("", "");
        restAdapter37.server = server41;
        restAdapter34.server = server41;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        restAdapter34.log = log44;
        retrofit.RestAdapter.Builder builder46 = builder33.setLog(log44);
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder48 = builder33.setLogLevel(logLevel47);
        retrofit.Profiler profiler49 = null;
        builder48.profiler = profiler49;
        retrofit.converter.Converter converter51 = null;
        builder48.converter = converter51;
        retrofit.ErrorHandler errorHandler53 = null;
        builder48.errorHandler = errorHandler53;
        retrofit.RestAdapter.LogLevel logLevel55 = builder48.logLevel;
        retrofit.Profiler profiler56 = null;
        builder48.profiler = profiler56;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.Server server61 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder62 = builder58.setServer(server61);
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor64 = restAdapter63.callbackExecutor;
        java.util.concurrent.Executor executor65 = restAdapter63.callbackExecutor;
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler67 = restAdapter66.errorHandler;
        retrofit.Server server70 = new retrofit.Server("", "");
        restAdapter66.server = server70;
        restAdapter63.server = server70;
        retrofit.RestAdapter.Log log73 = retrofit.RestAdapter.Log.NONE;
        restAdapter63.log = log73;
        retrofit.RestAdapter.Builder builder75 = builder62.setLog(log73);
        retrofit.RestAdapter.Builder builder76 = builder48.setLog(log73);
        builder76.ensureSaneDefaults();
        retrofit.ErrorHandler errorHandler78 = builder76.errorHandler;
        restAdapter0.errorHandler = errorHandler78;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNull(converter28);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertNull(executor36);
        org.junit.Assert.assertNull(errorHandler38);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(executor64);
        org.junit.Assert.assertNull(executor65);
        org.junit.Assert.assertNull(errorHandler67);
        org.junit.Assert.assertNotNull(log73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(errorHandler78);
    }

    @Test
    public void test04957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04957");
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput13);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = request16.getBody();
        java.util.List<retrofit.client.Header> headerList18 = request16.getHeaders();
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("default", "", headerList18, typedOutput19);
        java.lang.String str21 = request20.getMethod();
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(typedOutput17);
        org.junit.Assert.assertNotNull(headerList18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "default" + "'", str21, "default");
    }

    @Test
    public void test04958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04958");
        retrofit.Server server2 = null;
        retrofit.client.Client.Provider provider3 = null;
        java.util.concurrent.Executor executor4 = null;
        java.util.concurrent.Executor executor5 = null;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        retrofit.converter.Converter converter7 = null;
        retrofit.Profiler profiler8 = null;
        retrofit.ErrorHandler errorHandler9 = null;
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        log10.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter(server2, provider3, executor4, executor5, requestInterceptor6, converter7, profiler8, errorHandler9, log10, logLevel13);
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter14.new RestHandler();
        retrofit.client.Header[] headerArray24 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList25 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList25, headerArray24);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList25, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList25, typedOutput29);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList25, typedOutput31);
        retrofit.mime.TypedOutput typedOutput33 = null;
        retrofit.client.Request request34 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList25, typedOutput33);
        retrofit.mime.TypedOutput typedOutput35 = request34.getBody();
        retrofit.client.Request request36 = restAdapter14.logAndReplaceRequest(request34);
        java.util.List<retrofit.client.Header> headerList37 = request34.getHeaders();
        retrofit.mime.TypedOutput typedOutput38 = null;
        retrofit.client.Request request39 = new retrofit.client.Request("default", "", headerList37, typedOutput38);
        retrofit.mime.TypedOutput typedOutput40 = request39.getBody();
        java.util.List<retrofit.client.Header> headerList41 = request39.getHeaders();
        java.lang.String str42 = request39.getMethod();
        org.junit.Assert.assertNotNull(log10);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(typedOutput35);
        org.junit.Assert.assertNotNull(request36);
        org.junit.Assert.assertNotNull(headerList37);
        org.junit.Assert.assertNull(typedOutput40);
        org.junit.Assert.assertNotNull(headerList41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "default" + "'", str42, "default");
    }

    @Test
    public void test04959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04959");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput11);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("default", "hi!", (java.util.List<retrofit.client.Header>) headerList7, typedOutput13);
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test04960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04960");
        retrofit.client.Header[] headerArray10 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList11 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList11, headerArray10);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList11, typedOutput13);
        java.util.List<retrofit.client.Header> headerList15 = request14.getHeaders();
        java.util.List<retrofit.client.Header> headerList16 = request14.getHeaders();
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("hi!", "hi!", headerList16, typedOutput17);
        java.util.List<retrofit.client.Header> headerList19 = request18.getHeaders();
        retrofit.mime.TypedOutput typedOutput20 = null;
        retrofit.client.Request request21 = new retrofit.client.Request("default", "hi!", headerList19, typedOutput20);
        retrofit.mime.TypedOutput typedOutput22 = null;
        retrofit.client.Request request23 = new retrofit.client.Request("hi!", "", headerList19, typedOutput22);
        retrofit.mime.TypedOutput typedOutput24 = null;
        retrofit.client.Request request25 = new retrofit.client.Request("", "hi!", headerList19, typedOutput24);
        org.junit.Assert.assertNotNull(headerArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertNotNull(headerList16);
        org.junit.Assert.assertNotNull(headerList19);
    }

    @Test
    public void test04961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04961");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler21 = builder20.errorHandler;
        retrofit.Server server24 = new retrofit.Server("", "");
        builder20.server = server24;
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler34 = builder33.errorHandler;
        retrofit.Server server37 = new retrofit.Server("", "");
        builder33.server = server37;
        retrofit.RestAdapter.Log log39 = retrofit.RestAdapter.Log.NONE;
        builder33.log = log39;
        retrofit.Server server41 = null;
        retrofit.client.Client.Provider provider42 = null;
        java.util.concurrent.Executor executor43 = null;
        java.util.concurrent.Executor executor44 = null;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        retrofit.converter.Converter converter46 = null;
        retrofit.Profiler profiler47 = null;
        retrofit.ErrorHandler errorHandler48 = null;
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        log49.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server41, provider42, executor43, executor44, requestInterceptor45, converter46, profiler47, errorHandler48, log49, logLevel52);
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter(server24, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log39, logLevel52);
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.Server server58 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder59 = builder55.setServer(server58);
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor61 = restAdapter60.callbackExecutor;
        java.util.concurrent.Executor executor62 = restAdapter60.callbackExecutor;
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler64 = restAdapter63.errorHandler;
        retrofit.Server server67 = new retrofit.Server("", "");
        restAdapter63.server = server67;
        restAdapter60.server = server67;
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        restAdapter60.log = log70;
        retrofit.RestAdapter.Builder builder72 = builder59.setLog(log70);
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder74 = builder59.setLogLevel(logLevel73);
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter(server9, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log39, logLevel73);
        retrofit.RestAdapter.LogLevel logLevel76 = restAdapter75.logLevel;
        retrofit.client.Client.Provider provider77 = restAdapter75.clientProvider;
        retrofit.Server server78 = restAdapter75.server;
        retrofit.RestAdapter.RestHandler restHandler79 = restAdapter75.new RestHandler();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(errorHandler34);
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(executor61);
        org.junit.Assert.assertNull(executor62);
        org.junit.Assert.assertNull(errorHandler64);
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(provider77);
        org.junit.Assert.assertNotNull(server78);
    }

    @Test
    public void test04962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04962");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = builder0.clientProvider;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server7 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder8 = builder4.setServer(server7);
        java.lang.String str9 = server7.getUrl();
        retrofit.RestAdapter.Builder builder10 = builder0.setServer(server7);
        builder0.ensureSaneDefaults();
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        log20.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel23);
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter24.new RestHandler();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        restAdapter24.log = log26;
        retrofit.RestAdapter.Builder builder28 = builder0.setLog(log26);
        retrofit.RestAdapter.Builder builder30 = builder0.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor31 = builder0.requestInterceptor;
        retrofit.Server server32 = builder0.server;
        retrofit.client.Client.Provider provider33 = builder0.clientProvider;
        retrofit.Profiler profiler34 = builder0.profiler;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler36 = builder35.errorHandler;
        retrofit.client.Client.Provider provider37 = null;
        builder35.clientProvider = provider37;
        retrofit.Server server41 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder42 = builder35.setServer(server41);
        retrofit.converter.Converter converter43 = null;
        builder42.converter = converter43;
        retrofit.RestAdapter restAdapter45 = builder42.build();
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler47 = builder46.errorHandler;
        java.util.concurrent.Executor executor48 = null;
        builder46.callbackExecutor = executor48;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider51 = builder50.clientProvider;
        java.util.concurrent.Executor executor52 = null;
        builder50.callbackExecutor = executor52;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.Server server57 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder58 = builder54.setServer(server57);
        java.lang.String str59 = server57.getUrl();
        retrofit.RestAdapter.Builder builder60 = builder50.setServer(server57);
        retrofit.RestAdapter.Builder builder61 = builder46.setServer(server57);
        restAdapter45.server = server57;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler64 = builder63.errorHandler;
        retrofit.client.Client.Provider provider65 = null;
        builder63.clientProvider = provider65;
        retrofit.Server server69 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder70 = builder63.setServer(server69);
        retrofit.client.Client.Provider provider71 = null;
        java.util.concurrent.Executor executor72 = null;
        java.util.concurrent.Executor executor73 = null;
        retrofit.RequestInterceptor requestInterceptor74 = null;
        retrofit.converter.Converter converter75 = null;
        retrofit.Profiler profiler76 = null;
        retrofit.ErrorHandler errorHandler77 = null;
        retrofit.Server server78 = null;
        retrofit.client.Client.Provider provider79 = null;
        java.util.concurrent.Executor executor80 = null;
        java.util.concurrent.Executor executor81 = null;
        retrofit.RequestInterceptor requestInterceptor82 = null;
        retrofit.converter.Converter converter83 = null;
        retrofit.Profiler profiler84 = null;
        retrofit.ErrorHandler errorHandler85 = null;
        retrofit.RestAdapter.Log log86 = retrofit.RestAdapter.Log.NONE;
        log86.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel89 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter90 = new retrofit.RestAdapter(server78, provider79, executor80, executor81, requestInterceptor82, converter83, profiler84, errorHandler85, log86, logLevel89);
        retrofit.RestAdapter.LogLevel logLevel91 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter92 = new retrofit.RestAdapter(server69, provider71, executor72, executor73, requestInterceptor74, converter75, profiler76, errorHandler77, log86, logLevel91);
        boolean boolean93 = logLevel91.log();
        boolean boolean94 = logLevel91.log();
        restAdapter45.setLogLevel(logLevel91);
        retrofit.RequestInterceptor requestInterceptor96 = null;
        restAdapter45.requestInterceptor = requestInterceptor96;
        retrofit.ErrorHandler errorHandler98 = restAdapter45.errorHandler;
        builder0.errorHandler = errorHandler98;
        org.junit.Assert.assertNull(provider1);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(requestInterceptor31);
        org.junit.Assert.assertNotNull(server32);
        org.junit.Assert.assertNotNull(provider33);
        org.junit.Assert.assertNull(profiler34);
        org.junit.Assert.assertNull(errorHandler36);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(restAdapter45);
        org.junit.Assert.assertNull(errorHandler47);
        org.junit.Assert.assertNull(provider51);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(errorHandler64);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(log86);
        org.junit.Assert.assertTrue("'" + logLevel89 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel89.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel91 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel91.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(errorHandler98);
    }

    @Test
    public void test04963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04963");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean6 = logLevel5.log();
        builder0.logLevel = logLevel5;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler9 = restAdapter8.new RestHandler();
        java.util.concurrent.Executor executor10 = null;
        restAdapter8.callbackExecutor = executor10;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor13 = restAdapter12.callbackExecutor;
        java.util.concurrent.Executor executor14 = restAdapter12.callbackExecutor;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler16 = restAdapter15.errorHandler;
        retrofit.Server server19 = new retrofit.Server("", "");
        restAdapter15.server = server19;
        restAdapter12.server = server19;
        restAdapter8.server = server19;
        retrofit.RestAdapter.Builder builder23 = builder0.setServer(server19);
        builder0.ensureSaneDefaults();
        retrofit.Profiler profiler25 = builder0.profiler;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(profiler25);
    }

    @Test
    public void test04964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04964");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server4 = new retrofit.Server("", "");
        builder0.server = server4;
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        builder0.log = log6;
        retrofit.RestAdapter.LogLevel logLevel8 = builder0.logLevel;
        java.util.concurrent.Executor executor9 = builder0.callbackExecutor;
        retrofit.RestAdapter.Log log10 = builder0.log;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNotNull(log10);
    }

    @Test
    public void test04965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04965");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter0.requestInterceptor;
        retrofit.ErrorHandler errorHandler17 = restAdapter0.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter0.logLevel;
        retrofit.RestAdapter.RestHandler restHandler21 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter0.logLevel;
        retrofit.client.Response response24 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response26 = restAdapter0.logAndReplaceResponse("", response24, (long) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertNull(logLevel22);
    }

    @Test
    public void test04966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04966");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        builder0.requestInterceptor = requestInterceptor5;
        retrofit.RestAdapter.LogLevel logLevel7 = builder0.logLevel;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler9 = builder8.errorHandler;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        builder8.requestInterceptor = requestInterceptor10;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler13 = builder12.errorHandler;
        retrofit.ErrorHandler errorHandler14 = builder12.errorHandler;
        retrofit.Profiler profiler15 = builder12.profiler;
        retrofit.RestAdapter.Log log16 = builder12.log;
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.FULL;
        builder12.logLevel = logLevel17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.Server server22 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder23 = builder19.setServer(server22);
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor25 = restAdapter24.callbackExecutor;
        java.util.concurrent.Executor executor26 = restAdapter24.callbackExecutor;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler28 = restAdapter27.errorHandler;
        retrofit.Server server31 = new retrofit.Server("", "");
        restAdapter27.server = server31;
        restAdapter24.server = server31;
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        restAdapter24.log = log34;
        retrofit.RestAdapter.Builder builder36 = builder23.setLog(log34);
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder38 = builder23.setLogLevel(logLevel37);
        retrofit.Profiler profiler39 = null;
        builder38.profiler = profiler39;
        retrofit.converter.Converter converter41 = null;
        builder38.converter = converter41;
        retrofit.ErrorHandler errorHandler43 = null;
        builder38.errorHandler = errorHandler43;
        retrofit.RestAdapter restAdapter45 = builder38.build();
        retrofit.ErrorHandler errorHandler46 = builder38.errorHandler;
        retrofit.RestAdapter.Builder builder47 = builder12.setErrorHandler(errorHandler46);
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler49 = builder48.errorHandler;
        retrofit.ErrorHandler errorHandler50 = builder48.errorHandler;
        retrofit.Profiler profiler51 = builder48.profiler;
        retrofit.RestAdapter.Log log52 = builder48.log;
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.FULL;
        builder48.logLevel = logLevel53;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.Server server58 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder59 = builder55.setServer(server58);
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor61 = restAdapter60.callbackExecutor;
        java.util.concurrent.Executor executor62 = restAdapter60.callbackExecutor;
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler64 = restAdapter63.errorHandler;
        retrofit.Server server67 = new retrofit.Server("", "");
        restAdapter63.server = server67;
        restAdapter60.server = server67;
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        restAdapter60.log = log70;
        retrofit.RestAdapter.Builder builder72 = builder59.setLog(log70);
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder74 = builder59.setLogLevel(logLevel73);
        retrofit.Profiler profiler75 = null;
        builder74.profiler = profiler75;
        retrofit.converter.Converter converter77 = null;
        builder74.converter = converter77;
        retrofit.ErrorHandler errorHandler79 = null;
        builder74.errorHandler = errorHandler79;
        retrofit.RestAdapter restAdapter81 = builder74.build();
        retrofit.ErrorHandler errorHandler82 = builder74.errorHandler;
        retrofit.RestAdapter.Builder builder83 = builder48.setErrorHandler(errorHandler82);
        retrofit.RestAdapter.Builder builder84 = builder12.setErrorHandler(errorHandler82);
        retrofit.RestAdapter.Builder builder85 = builder8.setErrorHandler(errorHandler82);
        builder0.errorHandler = errorHandler82;
        retrofit.RestAdapter.Builder builder88 = builder0.setServer("default");
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder90 = builder88.setServer("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be blank.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertTrue("'" + logLevel7 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel7.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNull(log16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(restAdapter45);
        org.junit.Assert.assertNotNull(errorHandler46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(errorHandler49);
        org.junit.Assert.assertNull(errorHandler50);
        org.junit.Assert.assertNull(profiler51);
        org.junit.Assert.assertNull(log52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(executor61);
        org.junit.Assert.assertNull(executor62);
        org.junit.Assert.assertNull(errorHandler64);
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(restAdapter81);
        org.junit.Assert.assertNotNull(errorHandler82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder88);
    }

    @Test
    public void test04967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04967");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        java.util.concurrent.Executor executor18 = null;
        restAdapter0.httpExecutor = executor18;
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter0.logLevel;
        retrofit.converter.Converter converter21 = restAdapter0.converter;
        retrofit.ErrorHandler errorHandler22 = restAdapter0.errorHandler;
        retrofit.ErrorHandler errorHandler23 = null;
        restAdapter0.errorHandler = errorHandler23;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler26 = builder25.errorHandler;
        retrofit.client.Client.Provider provider27 = null;
        builder25.clientProvider = provider27;
        retrofit.Server server31 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder32 = builder25.setServer(server31);
        retrofit.Server server35 = new retrofit.Server("", "");
        builder32.server = server35;
        retrofit.converter.Converter converter37 = null;
        builder32.converter = converter37;
        retrofit.Server server40 = new retrofit.Server("default");
        retrofit.RestAdapter.Builder builder41 = builder32.setServer(server40);
        java.lang.String str42 = server40.getUrl();
        java.lang.String str43 = server40.getUrl();
        java.lang.String str44 = server40.getName();
        restAdapter0.server = server40;
        java.lang.String str46 = server40.getUrl();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertNull(converter21);
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNull(errorHandler26);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "default" + "'", str42, "default");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "default" + "'", str43, "default");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "default" + "'", str44, "default");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "default" + "'", str46, "default");
    }

    @Test
    public void test04968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04968");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter0.requestInterceptor;
        retrofit.ErrorHandler errorHandler17 = restAdapter0.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter0.new RestHandler();
        retrofit.ErrorHandler errorHandler20 = restAdapter0.errorHandler;
        retrofit.client.Client.Provider provider21 = restAdapter0.clientProvider;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.Server server25 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder26 = builder22.setServer(server25);
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor28 = restAdapter27.callbackExecutor;
        java.util.concurrent.Executor executor29 = restAdapter27.callbackExecutor;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler31 = restAdapter30.errorHandler;
        retrofit.Server server34 = new retrofit.Server("", "");
        restAdapter30.server = server34;
        restAdapter27.server = server34;
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        restAdapter27.log = log37;
        retrofit.RestAdapter.Builder builder39 = builder26.setLog(log37);
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder41 = builder26.setLogLevel(logLevel40);
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler43 = builder42.errorHandler;
        retrofit.client.Client.Provider provider44 = null;
        builder42.clientProvider = provider44;
        retrofit.Server server48 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder49 = builder42.setServer(server48);
        retrofit.converter.Converter converter50 = null;
        builder49.converter = converter50;
        retrofit.RestAdapter restAdapter52 = builder49.build();
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler54 = builder53.errorHandler;
        java.util.concurrent.Executor executor55 = null;
        builder53.callbackExecutor = executor55;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider58 = builder57.clientProvider;
        java.util.concurrent.Executor executor59 = null;
        builder57.callbackExecutor = executor59;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.Server server64 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder65 = builder61.setServer(server64);
        java.lang.String str66 = server64.getUrl();
        retrofit.RestAdapter.Builder builder67 = builder57.setServer(server64);
        retrofit.RestAdapter.Builder builder68 = builder53.setServer(server64);
        restAdapter52.server = server64;
        java.util.concurrent.Executor executor70 = restAdapter52.httpExecutor;
        builder26.callbackExecutor = executor70;
        restAdapter0.callbackExecutor = executor70;
        java.util.concurrent.Executor executor73 = restAdapter0.httpExecutor;
        java.util.concurrent.Executor executor74 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler75 = restAdapter0.new RestHandler();
        retrofit.Profiler profiler76 = null;
        restAdapter0.profiler = profiler76;
        retrofit.RestAdapter restAdapter78 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler79 = restAdapter78.new RestHandler();
        retrofit.client.Client.Provider provider80 = restAdapter78.clientProvider;
        retrofit.RequestInterceptor requestInterceptor81 = restAdapter78.requestInterceptor;
        java.util.concurrent.Executor executor82 = restAdapter78.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler83 = restAdapter78.new RestHandler();
        retrofit.RestAdapter.Builder builder84 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler85 = builder84.errorHandler;
        retrofit.RequestInterceptor requestInterceptor86 = null;
        builder84.requestInterceptor = requestInterceptor86;
        java.util.concurrent.Executor executor88 = builder84.httpExecutor;
        builder84.ensureSaneDefaults();
        java.util.concurrent.Executor executor90 = builder84.httpExecutor;
        java.util.concurrent.Executor executor91 = builder84.httpExecutor;
        restAdapter78.callbackExecutor = executor91;
        restAdapter0.httpExecutor = executor91;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNull(provider21);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(errorHandler31);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(errorHandler43);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(restAdapter52);
        org.junit.Assert.assertNull(errorHandler54);
        org.junit.Assert.assertNull(provider58);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hi!" + "'", str66, "hi!");
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(executor70);
        org.junit.Assert.assertNull(executor73);
        org.junit.Assert.assertNull(executor74);
        org.junit.Assert.assertNull(provider80);
        org.junit.Assert.assertNull(requestInterceptor81);
        org.junit.Assert.assertNull(executor82);
        org.junit.Assert.assertNull(errorHandler85);
        org.junit.Assert.assertNull(executor88);
        org.junit.Assert.assertNotNull(executor90);
        org.junit.Assert.assertNotNull(executor91);
    }

    @Test
    public void test04969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04969");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.ErrorHandler errorHandler3 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler7 = builder6.errorHandler;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.Server server11 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder12 = builder8.setServer(server11);
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor14 = restAdapter13.callbackExecutor;
        java.util.concurrent.Executor executor15 = restAdapter13.callbackExecutor;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler17 = restAdapter16.errorHandler;
        retrofit.Server server20 = new retrofit.Server("", "");
        restAdapter16.server = server20;
        restAdapter13.server = server20;
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        restAdapter13.log = log23;
        retrofit.RestAdapter.Builder builder25 = builder12.setLog(log23);
        retrofit.RestAdapter.Builder builder26 = builder6.setLog(log23);
        builder0.log = log23;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler29 = builder28.errorHandler;
        retrofit.client.Client.Provider provider30 = null;
        builder28.clientProvider = provider30;
        retrofit.Server server34 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder35 = builder28.setServer(server34);
        retrofit.converter.Converter converter36 = null;
        builder35.converter = converter36;
        retrofit.RestAdapter restAdapter38 = builder35.build();
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler40 = builder39.errorHandler;
        java.util.concurrent.Executor executor41 = null;
        builder39.callbackExecutor = executor41;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider44 = builder43.clientProvider;
        java.util.concurrent.Executor executor45 = null;
        builder43.callbackExecutor = executor45;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.Server server50 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder51 = builder47.setServer(server50);
        java.lang.String str52 = server50.getUrl();
        retrofit.RestAdapter.Builder builder53 = builder43.setServer(server50);
        retrofit.RestAdapter.Builder builder54 = builder39.setServer(server50);
        restAdapter38.server = server50;
        retrofit.client.Client.Provider provider56 = restAdapter38.clientProvider;
        retrofit.RestAdapter.Builder builder57 = builder0.setClient(provider56);
        retrofit.client.Client.Provider provider58 = builder57.clientProvider;
        retrofit.RestAdapter.Log log59 = builder57.log;
        retrofit.RestAdapter.LogLevel logLevel60 = builder57.logLevel;
        retrofit.RestAdapter.LogLevel logLevel61 = builder57.logLevel;
        retrofit.RestAdapter restAdapter62 = builder57.build();
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(restAdapter38);
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNull(provider44);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(provider56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(provider58);
        org.junit.Assert.assertNotNull(log59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(restAdapter62);
    }

    @Test
    public void test04970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04970");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        builder4.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler7 = builder6.errorHandler;
        retrofit.ErrorHandler errorHandler8 = builder6.errorHandler;
        retrofit.RestAdapter.Log log9 = null;
        builder6.log = log9;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean12 = logLevel11.log();
        builder6.logLevel = logLevel11;
        retrofit.ErrorHandler errorHandler14 = builder6.errorHandler;
        retrofit.RestAdapter.Builder builder16 = builder6.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor17 = null;
        builder16.requestInterceptor = requestInterceptor17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler20 = builder19.errorHandler;
        retrofit.client.Client.Provider provider21 = null;
        builder19.clientProvider = provider21;
        retrofit.Server server25 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder26 = builder19.setServer(server25);
        retrofit.client.Client.Provider provider27 = null;
        java.util.concurrent.Executor executor28 = null;
        java.util.concurrent.Executor executor29 = null;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        retrofit.converter.Converter converter31 = null;
        retrofit.Profiler profiler32 = null;
        retrofit.ErrorHandler errorHandler33 = null;
        retrofit.Server server34 = null;
        retrofit.client.Client.Provider provider35 = null;
        java.util.concurrent.Executor executor36 = null;
        java.util.concurrent.Executor executor37 = null;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        retrofit.converter.Converter converter39 = null;
        retrofit.Profiler profiler40 = null;
        retrofit.ErrorHandler errorHandler41 = null;
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        log42.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter(server34, provider35, executor36, executor37, requestInterceptor38, converter39, profiler40, errorHandler41, log42, logLevel45);
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter(server25, provider27, executor28, executor29, requestInterceptor30, converter31, profiler32, errorHandler33, log42, logLevel47);
        log42.log("");
        builder16.log = log42;
        retrofit.RestAdapter.Log log52 = builder16.log;
        retrofit.RestAdapter.Builder builder53 = builder4.setLog(log52);
        retrofit.RestAdapter.LogLevel logLevel54 = builder4.logLevel;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test04971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04971");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = builder0.clientProvider;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        log12.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel15);
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter16.new RestHandler();
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        restAdapter16.log = log18;
        retrofit.converter.Converter converter20 = null;
        restAdapter16.converter = converter20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.Server server25 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder26 = builder22.setServer(server25);
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor28 = restAdapter27.callbackExecutor;
        java.util.concurrent.Executor executor29 = restAdapter27.callbackExecutor;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler31 = restAdapter30.errorHandler;
        retrofit.Server server34 = new retrofit.Server("", "");
        restAdapter30.server = server34;
        restAdapter27.server = server34;
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        restAdapter27.log = log37;
        retrofit.RestAdapter.Builder builder39 = builder26.setLog(log37);
        restAdapter16.log = log37;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler42 = builder41.errorHandler;
        retrofit.Server server45 = new retrofit.Server("", "");
        builder41.server = server45;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor48 = restAdapter47.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler49 = restAdapter47.new RestHandler();
        retrofit.Server server52 = new retrofit.Server("hi!", "hi!");
        restAdapter47.server = server52;
        retrofit.RestAdapter.Builder builder54 = builder41.setServer(server52);
        restAdapter16.server = server52;
        retrofit.Profiler profiler56 = restAdapter16.profiler;
        retrofit.Server server57 = restAdapter16.server;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.Server server61 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder62 = builder58.setServer(server61);
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor64 = restAdapter63.callbackExecutor;
        java.util.concurrent.Executor executor65 = restAdapter63.callbackExecutor;
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler67 = restAdapter66.errorHandler;
        retrofit.Server server70 = new retrofit.Server("", "");
        restAdapter66.server = server70;
        restAdapter63.server = server70;
        retrofit.RestAdapter.Log log73 = retrofit.RestAdapter.Log.NONE;
        restAdapter63.log = log73;
        retrofit.RestAdapter.Builder builder75 = builder62.setLog(log73);
        retrofit.RestAdapter.LogLevel logLevel76 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder77 = builder62.setLogLevel(logLevel76);
        retrofit.RestAdapter.Log log78 = builder62.log;
        retrofit.RestAdapter restAdapter79 = builder62.build();
        java.util.concurrent.Executor executor80 = restAdapter79.callbackExecutor;
        restAdapter16.httpExecutor = executor80;
        builder0.callbackExecutor = executor80;
        builder0.ensureSaneDefaults();
        builder0.ensureSaneDefaults();
        org.junit.Assert.assertNull(provider1);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log18);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(errorHandler31);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(errorHandler42);
        org.junit.Assert.assertNull(executor48);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(profiler56);
        org.junit.Assert.assertNotNull(server57);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(executor64);
        org.junit.Assert.assertNull(executor65);
        org.junit.Assert.assertNull(errorHandler67);
        org.junit.Assert.assertNotNull(log73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(log78);
        org.junit.Assert.assertNotNull(restAdapter79);
        org.junit.Assert.assertNotNull(executor80);
    }

    @Test
    public void test04972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04972");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server6 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder7 = builder0.setServer(server6);
        retrofit.converter.Converter converter8 = null;
        builder7.converter = converter8;
        retrofit.RestAdapter restAdapter10 = builder7.build();
        retrofit.Server server11 = builder7.server;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.Server server15 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder16 = builder12.setServer(server15);
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor18 = restAdapter17.callbackExecutor;
        java.util.concurrent.Executor executor19 = restAdapter17.callbackExecutor;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler21 = restAdapter20.errorHandler;
        retrofit.Server server24 = new retrofit.Server("", "");
        restAdapter20.server = server24;
        restAdapter17.server = server24;
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        restAdapter17.log = log27;
        retrofit.RestAdapter.Builder builder29 = builder16.setLog(log27);
        retrofit.converter.Converter converter30 = null;
        builder29.converter = converter30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler33 = builder32.errorHandler;
        retrofit.ErrorHandler errorHandler34 = builder32.errorHandler;
        retrofit.Profiler profiler35 = builder32.profiler;
        retrofit.RestAdapter.Log log36 = builder32.log;
        retrofit.Server server37 = null;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        log45.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log45, logLevel48);
        builder32.log = log45;
        retrofit.RestAdapter.Builder builder51 = builder29.setLog(log45);
        retrofit.ErrorHandler errorHandler52 = null;
        builder29.errorHandler = errorHandler52;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler55 = builder54.errorHandler;
        java.util.concurrent.Executor executor56 = null;
        builder54.callbackExecutor = executor56;
        retrofit.converter.Converter converter58 = builder54.converter;
        retrofit.converter.Converter converter59 = builder54.converter;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler61 = builder60.errorHandler;
        retrofit.Server server64 = new retrofit.Server("", "");
        builder60.server = server64;
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        builder60.log = log66;
        retrofit.RestAdapter.LogLevel logLevel68 = builder60.logLevel;
        builder54.logLevel = logLevel68;
        builder29.logLevel = logLevel68;
        retrofit.Profiler profiler71 = builder29.profiler;
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler73 = builder72.errorHandler;
        retrofit.ErrorHandler errorHandler74 = builder72.errorHandler;
        java.util.concurrent.Executor executor75 = builder72.callbackExecutor;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler77 = builder76.errorHandler;
        retrofit.Server server80 = new retrofit.Server("", "");
        builder76.server = server80;
        retrofit.RestAdapter.LogLevel logLevel82 = builder76.logLevel;
        retrofit.RestAdapter.Builder builder83 = builder72.setLogLevel(logLevel82);
        retrofit.RestAdapter.Builder builder84 = builder29.setLogLevel(logLevel82);
        builder7.logLevel = logLevel82;
        retrofit.Profiler profiler86 = null;
        builder7.profiler = profiler86;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(restAdapter10);
        org.junit.Assert.assertNotNull(server11);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(errorHandler33);
        org.junit.Assert.assertNull(errorHandler34);
        org.junit.Assert.assertNull(profiler35);
        org.junit.Assert.assertNull(log36);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(errorHandler55);
        org.junit.Assert.assertNull(converter58);
        org.junit.Assert.assertNull(converter59);
        org.junit.Assert.assertNull(errorHandler61);
        org.junit.Assert.assertNotNull(log66);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler71);
        org.junit.Assert.assertNull(errorHandler73);
        org.junit.Assert.assertNull(errorHandler74);
        org.junit.Assert.assertNull(executor75);
        org.junit.Assert.assertNull(errorHandler77);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
    }

    @Test
    public void test04973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04973");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.converter.Converter converter3 = null;
        builder0.converter = converter3;
        retrofit.ErrorHandler errorHandler5 = builder0.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel6 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log level may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(errorHandler5);
    }

    @Test
    public void test04974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04974");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = null;
        restAdapter0.httpExecutor = executor2;
        retrofit.RestAdapter.RestHandler restHandler4 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter0.logLevel;
        retrofit.ErrorHandler errorHandler6 = null;
        restAdapter0.errorHandler = errorHandler6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.Server server11 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder12 = builder8.setServer(server11);
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor14 = restAdapter13.callbackExecutor;
        java.util.concurrent.Executor executor15 = restAdapter13.callbackExecutor;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler17 = restAdapter16.errorHandler;
        retrofit.Server server20 = new retrofit.Server("", "");
        restAdapter16.server = server20;
        restAdapter13.server = server20;
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        restAdapter13.log = log23;
        retrofit.RestAdapter.Builder builder25 = builder12.setLog(log23);
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder27 = builder12.setLogLevel(logLevel26);
        retrofit.Profiler profiler28 = null;
        builder27.profiler = profiler28;
        retrofit.converter.Converter converter30 = null;
        builder27.converter = converter30;
        retrofit.ErrorHandler errorHandler32 = null;
        builder27.errorHandler = errorHandler32;
        retrofit.RestAdapter restAdapter34 = builder27.build();
        retrofit.ErrorHandler errorHandler35 = builder27.errorHandler;
        restAdapter0.errorHandler = errorHandler35;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor38 = restAdapter37.callbackExecutor;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor40 = restAdapter39.callbackExecutor;
        java.util.concurrent.Executor executor41 = restAdapter39.callbackExecutor;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler43 = restAdapter42.errorHandler;
        retrofit.Server server46 = new retrofit.Server("", "");
        restAdapter42.server = server46;
        restAdapter39.server = server46;
        restAdapter37.server = server46;
        retrofit.Profiler profiler50 = restAdapter37.profiler;
        retrofit.ErrorHandler errorHandler51 = null;
        restAdapter37.errorHandler = errorHandler51;
        retrofit.Profiler profiler53 = null;
        restAdapter37.profiler = profiler53;
        java.util.concurrent.Executor executor55 = null;
        restAdapter37.httpExecutor = executor55;
        retrofit.RestAdapter.LogLevel logLevel57 = restAdapter37.logLevel;
        retrofit.converter.Converter converter58 = restAdapter37.converter;
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler60 = builder59.errorHandler;
        retrofit.ErrorHandler errorHandler61 = builder59.errorHandler;
        java.util.concurrent.Executor executor62 = builder59.callbackExecutor;
        java.util.concurrent.Executor executor63 = null;
        builder59.callbackExecutor = executor63;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler66 = builder65.errorHandler;
        retrofit.Server server69 = new retrofit.Server("", "");
        builder65.server = server69;
        retrofit.RestAdapter.Log log71 = retrofit.RestAdapter.Log.NONE;
        builder65.log = log71;
        retrofit.RestAdapter.LogLevel logLevel73 = builder65.logLevel;
        retrofit.RestAdapter.Builder builder74 = builder59.setLogLevel(logLevel73);
        restAdapter37.logLevel = logLevel73;
        boolean boolean76 = logLevel73.log();
        restAdapter0.logLevel = logLevel73;
        retrofit.RestAdapter.RestHandler restHandler78 = restAdapter0.new RestHandler();
        retrofit.Server server79 = restAdapter0.server;
        java.util.concurrent.Executor executor80 = restAdapter0.httpExecutor;
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(restAdapter34);
        org.junit.Assert.assertNotNull(errorHandler35);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNull(executor40);
        org.junit.Assert.assertNull(executor41);
        org.junit.Assert.assertNull(errorHandler43);
        org.junit.Assert.assertNull(profiler50);
        org.junit.Assert.assertNull(logLevel57);
        org.junit.Assert.assertNull(converter58);
        org.junit.Assert.assertNull(errorHandler60);
        org.junit.Assert.assertNull(errorHandler61);
        org.junit.Assert.assertNull(executor62);
        org.junit.Assert.assertNull(errorHandler66);
        org.junit.Assert.assertNotNull(log71);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(server79);
        org.junit.Assert.assertNull(executor80);
    }

    @Test
    public void test04975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04975");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter0.requestInterceptor;
        retrofit.ErrorHandler errorHandler17 = restAdapter0.errorHandler;
        java.util.concurrent.Executor executor18 = null;
        restAdapter0.callbackExecutor = executor18;
        java.util.concurrent.Executor executor20 = restAdapter0.httpExecutor;
        retrofit.client.Client.Provider provider21 = restAdapter0.clientProvider;
        retrofit.converter.Converter converter22 = restAdapter0.converter;
        retrofit.ErrorHandler errorHandler23 = restAdapter0.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter0.getLogLevel();
        retrofit.Server server25 = null;
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        log33.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter(server25, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log33, logLevel36);
        retrofit.RestAdapter.RestHandler restHandler38 = restAdapter37.new RestHandler();
        java.util.concurrent.Executor executor39 = null;
        restAdapter37.callbackExecutor = executor39;
        retrofit.client.Header[] headerArray43 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList44 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList44, headerArray43);
        retrofit.mime.TypedOutput typedOutput46 = null;
        retrofit.client.Request request47 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList44, typedOutput46);
        retrofit.client.Request request48 = restAdapter37.logAndReplaceRequest(request47);
        retrofit.client.Client.Provider provider49 = restAdapter37.clientProvider;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor51 = restAdapter50.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean53 = logLevel52.log();
        restAdapter50.logLevel = logLevel52;
        restAdapter37.setLogLevel(logLevel52);
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler57 = builder56.errorHandler;
        java.util.concurrent.Executor executor58 = builder56.callbackExecutor;
        retrofit.RestAdapter.Builder builder60 = builder56.setServer("hi!");
        retrofit.Server server63 = new retrofit.Server("default", "hi!");
        java.lang.String str64 = server63.getUrl();
        retrofit.RestAdapter.Builder builder65 = builder60.setServer(server63);
        retrofit.RestAdapter.LogLevel logLevel66 = builder65.logLevel;
        builder65.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler69 = builder68.errorHandler;
        retrofit.RequestInterceptor requestInterceptor70 = null;
        builder68.requestInterceptor = requestInterceptor70;
        java.util.concurrent.Executor executor72 = builder68.httpExecutor;
        retrofit.RestAdapter.Log log73 = retrofit.RestAdapter.Log.NONE;
        log73.log("default");
        builder68.log = log73;
        retrofit.RestAdapter.Builder builder77 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler78 = builder77.errorHandler;
        retrofit.client.Client.Provider provider79 = null;
        builder77.clientProvider = provider79;
        retrofit.Server server83 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder84 = builder77.setServer(server83);
        retrofit.converter.Converter converter85 = null;
        builder84.converter = converter85;
        retrofit.RestAdapter restAdapter87 = builder84.build();
        retrofit.Profiler profiler88 = builder84.profiler;
        retrofit.Profiler profiler89 = builder84.profiler;
        retrofit.client.Client.Provider provider90 = builder84.clientProvider;
        retrofit.RestAdapter.Builder builder91 = builder68.setClient(provider90);
        retrofit.RestAdapter.Builder builder92 = builder65.setClient(provider90);
        java.util.concurrent.Executor executor93 = builder65.httpExecutor;
        java.util.concurrent.Executor executor94 = builder65.httpExecutor;
        restAdapter37.httpExecutor = executor94;
        restAdapter0.callbackExecutor = executor94;
        retrofit.RequestInterceptor requestInterceptor97 = restAdapter0.requestInterceptor;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(provider21);
        org.junit.Assert.assertNull(converter22);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNull(logLevel24);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(request48);
        org.junit.Assert.assertNull(provider49);
        org.junit.Assert.assertNull(executor51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(errorHandler57);
        org.junit.Assert.assertNull(executor58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "default" + "'", str64, "default");
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler69);
        org.junit.Assert.assertNull(executor72);
        org.junit.Assert.assertNotNull(log73);
        org.junit.Assert.assertNull(errorHandler78);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(restAdapter87);
        org.junit.Assert.assertNull(profiler88);
        org.junit.Assert.assertNull(profiler89);
        org.junit.Assert.assertNotNull(provider90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(executor93);
        org.junit.Assert.assertNotNull(executor94);
        org.junit.Assert.assertNull(requestInterceptor97);
    }

    @Test
    public void test04976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04976");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter0.getLogLevel();
        retrofit.client.Client.Provider provider20 = null;
        restAdapter0.clientProvider = provider20;
        retrofit.converter.Converter converter22 = restAdapter0.converter;
        retrofit.ErrorHandler errorHandler23 = restAdapter0.errorHandler;
        retrofit.ErrorHandler errorHandler24 = restAdapter0.errorHandler;
        retrofit.Profiler profiler25 = restAdapter0.profiler;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler27 = builder26.errorHandler;
        retrofit.client.Client.Provider provider28 = null;
        builder26.clientProvider = provider28;
        retrofit.Server server32 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder33 = builder26.setServer(server32);
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler35 = builder34.errorHandler;
        retrofit.client.Client.Provider provider36 = null;
        builder34.clientProvider = provider36;
        retrofit.converter.Converter converter38 = builder34.converter;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder40 = builder34.setLogLevel(logLevel39);
        builder26.logLevel = logLevel39;
        boolean boolean42 = logLevel39.log();
        restAdapter0.logLevel = logLevel39;
        java.util.concurrent.Executor executor44 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler45 = restAdapter0.new RestHandler();
        java.lang.Class<?> wildcardClass46 = restHandler45.getClass();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(converter22);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNull(profiler25);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(errorHandler35);
        org.junit.Assert.assertNull(converter38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(executor44);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test04977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04977");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        builder0.requestInterceptor = requestInterceptor5;
        retrofit.Server server7 = builder0.server;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler9 = builder8.errorHandler;
        java.util.concurrent.Executor executor10 = null;
        builder8.callbackExecutor = executor10;
        java.util.concurrent.Executor executor12 = null;
        builder8.httpExecutor = executor12;
        retrofit.Profiler profiler14 = null;
        builder8.profiler = profiler14;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler17 = builder16.errorHandler;
        retrofit.Server server20 = new retrofit.Server("", "");
        builder16.server = server20;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler30 = builder29.errorHandler;
        retrofit.Server server33 = new retrofit.Server("", "");
        builder29.server = server33;
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        builder29.log = log35;
        retrofit.Server server37 = null;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        log45.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log45, logLevel48);
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter(server20, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log35, logLevel48);
        retrofit.RestAdapter.Builder builder51 = builder8.setLogLevel(logLevel48);
        boolean boolean52 = logLevel48.log();
        boolean boolean53 = logLevel48.log();
        builder0.logLevel = logLevel48;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.Server server58 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder59 = builder55.setServer(server58);
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor61 = restAdapter60.callbackExecutor;
        java.util.concurrent.Executor executor62 = restAdapter60.callbackExecutor;
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler64 = restAdapter63.errorHandler;
        retrofit.Server server67 = new retrofit.Server("", "");
        restAdapter63.server = server67;
        restAdapter60.server = server67;
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        restAdapter60.log = log70;
        retrofit.RestAdapter.Builder builder72 = builder59.setLog(log70);
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder74 = builder59.setLogLevel(logLevel73);
        retrofit.RestAdapter.Log log75 = builder59.log;
        retrofit.RestAdapter restAdapter76 = builder59.build();
        java.util.concurrent.Executor executor77 = restAdapter76.callbackExecutor;
        retrofit.RestAdapter.Log log78 = restAdapter76.log;
        builder0.log = log78;
        java.util.concurrent.Executor executor80 = builder0.httpExecutor;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(server7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(errorHandler30);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(executor61);
        org.junit.Assert.assertNull(executor62);
        org.junit.Assert.assertNull(errorHandler64);
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(log75);
        org.junit.Assert.assertNotNull(restAdapter76);
        org.junit.Assert.assertNotNull(executor77);
        org.junit.Assert.assertNotNull(log78);
        org.junit.Assert.assertNull(executor80);
    }

    @Test
    public void test04978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04978");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler15 = builder14.errorHandler;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        builder14.requestInterceptor = requestInterceptor16;
        retrofit.Server server18 = null;
        retrofit.client.Client.Provider provider19 = null;
        java.util.concurrent.Executor executor20 = null;
        java.util.concurrent.Executor executor21 = null;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        retrofit.converter.Converter converter23 = null;
        retrofit.Profiler profiler24 = null;
        retrofit.ErrorHandler errorHandler25 = null;
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        log26.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter(server18, provider19, executor20, executor21, requestInterceptor22, converter23, profiler24, errorHandler25, log26, logLevel29);
        builder14.log = log26;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler33 = builder32.errorHandler;
        retrofit.client.Client.Provider provider34 = null;
        builder32.clientProvider = provider34;
        retrofit.Server server38 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder39 = builder32.setServer(server38);
        retrofit.converter.Converter converter40 = null;
        builder39.converter = converter40;
        retrofit.RestAdapter restAdapter42 = builder39.build();
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler44 = builder43.errorHandler;
        java.util.concurrent.Executor executor45 = null;
        builder43.callbackExecutor = executor45;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider48 = builder47.clientProvider;
        java.util.concurrent.Executor executor49 = null;
        builder47.callbackExecutor = executor49;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.Server server54 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder55 = builder51.setServer(server54);
        java.lang.String str56 = server54.getUrl();
        retrofit.RestAdapter.Builder builder57 = builder47.setServer(server54);
        retrofit.RestAdapter.Builder builder58 = builder43.setServer(server54);
        restAdapter42.server = server54;
        retrofit.client.Client.Provider provider60 = restAdapter42.clientProvider;
        builder14.clientProvider = provider60;
        restAdapter12.clientProvider = provider60;
        retrofit.ErrorHandler errorHandler63 = restAdapter12.errorHandler;
        java.util.concurrent.Executor executor64 = restAdapter12.callbackExecutor;
        retrofit.ErrorHandler errorHandler65 = restAdapter12.errorHandler;
        retrofit.client.Client.Provider provider66 = restAdapter12.clientProvider;
        retrofit.client.Response response68 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response70 = restAdapter12.logAndReplaceResponse("hi!", response68, (long) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler33);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(restAdapter42);
        org.junit.Assert.assertNull(errorHandler44);
        org.junit.Assert.assertNull(provider48);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(provider60);
        org.junit.Assert.assertNull(errorHandler63);
        org.junit.Assert.assertNull(executor64);
        org.junit.Assert.assertNull(errorHandler65);
        org.junit.Assert.assertNotNull(provider66);
    }

    @Test
    public void test04979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04979");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter0.getLogLevel();
        retrofit.ErrorHandler errorHandler20 = null;
        restAdapter0.errorHandler = errorHandler20;
        retrofit.client.Client.Provider provider22 = null;
        restAdapter0.clientProvider = provider22;
        retrofit.ErrorHandler errorHandler24 = restAdapter0.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor26 = restAdapter0.callbackExecutor;
        retrofit.client.Client.Provider provider27 = restAdapter0.clientProvider;
        retrofit.RestAdapter.RestHandler restHandler28 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(provider27);
    }

    @Test
    public void test04980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04980");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.ErrorHandler errorHandler3 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor6 = builder0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel7 = builder0.logLevel;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor9 = restAdapter8.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler10 = restAdapter8.new RestHandler();
        retrofit.client.Client.Provider provider11 = null;
        restAdapter8.clientProvider = provider11;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        log21.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel24);
        retrofit.RestAdapter.RestHandler restHandler26 = restAdapter25.new RestHandler();
        retrofit.client.Header[] headerArray35 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList36 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList36, headerArray35);
        retrofit.mime.TypedOutput typedOutput38 = null;
        retrofit.client.Request request39 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList36, typedOutput38);
        retrofit.mime.TypedOutput typedOutput40 = null;
        retrofit.client.Request request41 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList36, typedOutput40);
        retrofit.mime.TypedOutput typedOutput42 = null;
        retrofit.client.Request request43 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList36, typedOutput42);
        retrofit.mime.TypedOutput typedOutput44 = null;
        retrofit.client.Request request45 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList36, typedOutput44);
        retrofit.mime.TypedOutput typedOutput46 = request45.getBody();
        retrofit.client.Request request47 = restAdapter25.logAndReplaceRequest(request45);
        retrofit.client.Client.Provider provider48 = null;
        restAdapter25.clientProvider = provider48;
        retrofit.RestAdapter.RestHandler restHandler50 = restAdapter25.new RestHandler();
        retrofit.Server server51 = null;
        retrofit.client.Client.Provider provider52 = null;
        java.util.concurrent.Executor executor53 = null;
        java.util.concurrent.Executor executor54 = null;
        retrofit.RequestInterceptor requestInterceptor55 = null;
        retrofit.converter.Converter converter56 = null;
        retrofit.Profiler profiler57 = null;
        retrofit.ErrorHandler errorHandler58 = null;
        retrofit.RestAdapter.Log log59 = retrofit.RestAdapter.Log.NONE;
        log59.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter(server51, provider52, executor53, executor54, requestInterceptor55, converter56, profiler57, errorHandler58, log59, logLevel62);
        retrofit.RestAdapter.RestHandler restHandler64 = restAdapter63.new RestHandler();
        retrofit.RestAdapter.Log log65 = retrofit.RestAdapter.Log.NONE;
        restAdapter63.log = log65;
        retrofit.converter.Converter converter67 = restAdapter63.converter;
        retrofit.RestAdapter.LogLevel logLevel68 = restAdapter63.logLevel;
        restAdapter25.setLogLevel(logLevel68);
        restAdapter8.logLevel = logLevel68;
        builder0.logLevel = logLevel68;
        retrofit.converter.Converter converter72 = builder0.converter;
        retrofit.RestAdapter restAdapter73 = builder0.build();
        retrofit.RequestInterceptor requestInterceptor74 = restAdapter73.requestInterceptor;
        retrofit.RestAdapter.RestHandler restHandler75 = restAdapter73.new RestHandler();
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertTrue("'" + logLevel7 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel7.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(typedOutput46);
        org.junit.Assert.assertNotNull(request47);
        org.junit.Assert.assertNotNull(log59);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log65);
        org.junit.Assert.assertNull(converter67);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter72);
        org.junit.Assert.assertNotNull(restAdapter73);
        org.junit.Assert.assertNotNull(requestInterceptor74);
    }

    @Test
    public void test04981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04981");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        builder0.requestInterceptor = requestInterceptor5;
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor8 = restAdapter7.callbackExecutor;
        java.util.concurrent.Executor executor9 = restAdapter7.callbackExecutor;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.Server server14 = new retrofit.Server("", "");
        restAdapter10.server = server14;
        restAdapter7.server = server14;
        retrofit.RestAdapter.Builder builder17 = builder0.setServer(server14);
        retrofit.RestAdapter.LogLevel logLevel18 = builder0.logLevel;
        retrofit.client.Client.Provider provider19 = builder0.clientProvider;
        retrofit.Profiler profiler20 = builder0.profiler;
        java.util.concurrent.Executor executor21 = builder0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel22 = builder0.logLevel;
        java.util.concurrent.Executor executor23 = builder0.httpExecutor;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler25 = builder24.errorHandler;
        retrofit.ErrorHandler errorHandler26 = builder24.errorHandler;
        retrofit.RestAdapter.Log log27 = null;
        builder24.log = log27;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean30 = logLevel29.log();
        builder24.logLevel = logLevel29;
        retrofit.ErrorHandler errorHandler32 = builder24.errorHandler;
        retrofit.RestAdapter.Builder builder34 = builder24.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor35 = null;
        builder34.requestInterceptor = requestInterceptor35;
        retrofit.ErrorHandler errorHandler37 = builder34.errorHandler;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.Server server41 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder42 = builder38.setServer(server41);
        retrofit.converter.Converter converter43 = builder38.converter;
        builder38.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler46 = builder45.errorHandler;
        retrofit.Server server49 = new retrofit.Server("", "");
        builder45.server = server49;
        retrofit.RestAdapter restAdapter51 = builder45.build();
        retrofit.Server server52 = restAdapter51.server;
        retrofit.RestAdapter.Builder builder53 = builder38.setServer(server52);
        java.util.concurrent.Executor executor54 = builder38.httpExecutor;
        builder34.callbackExecutor = executor54;
        java.util.concurrent.Executor executor56 = null;
        retrofit.RestAdapter.Builder builder57 = builder0.setExecutors(executor54, executor56);
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(provider19);
        org.junit.Assert.assertNull(profiler20);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNull(errorHandler25);
        org.junit.Assert.assertNull(errorHandler26);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(errorHandler32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(converter43);
        org.junit.Assert.assertNull(errorHandler46);
        org.junit.Assert.assertNotNull(restAdapter51);
        org.junit.Assert.assertNotNull(server52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(executor54);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test04982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04982");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = builder0.clientProvider;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server7 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder8 = builder4.setServer(server7);
        java.lang.String str9 = server7.getUrl();
        retrofit.RestAdapter.Builder builder10 = builder0.setServer(server7);
        builder0.ensureSaneDefaults();
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        log20.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel23);
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter24.new RestHandler();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        restAdapter24.log = log26;
        retrofit.RestAdapter.Builder builder28 = builder0.setLog(log26);
        retrofit.RestAdapter.Builder builder30 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter31 = builder0.build();
        retrofit.RequestInterceptor requestInterceptor32 = restAdapter31.requestInterceptor;
        retrofit.ErrorHandler errorHandler33 = restAdapter31.errorHandler;
        java.util.concurrent.Executor executor34 = restAdapter31.callbackExecutor;
        java.util.concurrent.Executor executor35 = restAdapter31.httpExecutor;
        org.junit.Assert.assertNull(provider1);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(restAdapter31);
        org.junit.Assert.assertNotNull(requestInterceptor32);
        org.junit.Assert.assertNotNull(errorHandler33);
        org.junit.Assert.assertNotNull(executor34);
        org.junit.Assert.assertNotNull(executor35);
    }

    @Test
    public void test04983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04983");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.Server server5 = new retrofit.Server("hi!", "hi!");
        restAdapter0.server = server5;
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter0.getLogLevel();
        retrofit.Profiler profiler8 = restAdapter0.profiler;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor10 = restAdapter9.callbackExecutor;
        java.util.concurrent.Executor executor11 = restAdapter9.callbackExecutor;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler13 = restAdapter12.errorHandler;
        retrofit.Server server16 = new retrofit.Server("", "");
        restAdapter12.server = server16;
        restAdapter9.server = server16;
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter9.new RestHandler();
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor21 = restAdapter20.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler22 = restAdapter20.new RestHandler();
        retrofit.Server server25 = new retrofit.Server("hi!", "hi!");
        restAdapter20.server = server25;
        retrofit.Server server27 = restAdapter20.server;
        restAdapter9.server = server27;
        restAdapter0.server = server27;
        retrofit.Profiler profiler30 = null;
        restAdapter0.profiler = profiler30;
        retrofit.Server server33 = new retrofit.Server("hi!");
        restAdapter0.server = server33;
        java.lang.String str35 = server33.getName();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(logLevel7);
        org.junit.Assert.assertNull(profiler8);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNotNull(server27);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "default" + "'", str35, "default");
    }

    @Test
    public void test04984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04984");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server4 = new retrofit.Server("", "");
        builder0.server = server4;
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        builder0.log = log6;
        retrofit.Profiler profiler8 = builder0.profiler;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler10 = builder9.errorHandler;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        builder9.requestInterceptor = requestInterceptor11;
        java.util.concurrent.Executor executor13 = builder9.httpExecutor;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        log14.log("default");
        builder9.log = log14;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler19 = builder18.errorHandler;
        retrofit.client.Client.Provider provider20 = null;
        builder18.clientProvider = provider20;
        retrofit.Server server24 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder25 = builder18.setServer(server24);
        retrofit.converter.Converter converter26 = null;
        builder25.converter = converter26;
        retrofit.RestAdapter restAdapter28 = builder25.build();
        retrofit.Profiler profiler29 = builder25.profiler;
        retrofit.Profiler profiler30 = builder25.profiler;
        retrofit.client.Client.Provider provider31 = builder25.clientProvider;
        retrofit.RestAdapter.Builder builder32 = builder9.setClient(provider31);
        java.util.concurrent.Executor executor33 = builder32.httpExecutor;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler35 = builder34.errorHandler;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        builder34.requestInterceptor = requestInterceptor36;
        java.util.concurrent.Executor executor38 = builder34.httpExecutor;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler40 = builder39.errorHandler;
        java.util.concurrent.Executor executor41 = builder39.callbackExecutor;
        retrofit.RestAdapter.Builder builder43 = builder39.setServer("hi!");
        retrofit.Server server46 = new retrofit.Server("default", "hi!");
        java.lang.String str47 = server46.getUrl();
        retrofit.RestAdapter.Builder builder48 = builder43.setServer(server46);
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler50 = builder49.errorHandler;
        retrofit.ErrorHandler errorHandler51 = builder49.errorHandler;
        java.util.concurrent.Executor executor52 = builder49.callbackExecutor;
        java.util.concurrent.Executor executor53 = null;
        builder49.callbackExecutor = executor53;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler56 = builder55.errorHandler;
        retrofit.Server server59 = new retrofit.Server("", "");
        builder55.server = server59;
        retrofit.RestAdapter.Log log61 = retrofit.RestAdapter.Log.NONE;
        builder55.log = log61;
        retrofit.RestAdapter.LogLevel logLevel63 = builder55.logLevel;
        retrofit.RestAdapter.Builder builder64 = builder49.setLogLevel(logLevel63);
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler66 = builder65.errorHandler;
        retrofit.client.Client.Provider provider67 = null;
        builder65.clientProvider = provider67;
        retrofit.Server server71 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder72 = builder65.setServer(server71);
        retrofit.converter.Converter converter73 = null;
        builder72.converter = converter73;
        retrofit.RestAdapter restAdapter75 = builder72.build();
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler77 = builder76.errorHandler;
        java.util.concurrent.Executor executor78 = null;
        builder76.callbackExecutor = executor78;
        retrofit.RestAdapter.Builder builder80 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider81 = builder80.clientProvider;
        java.util.concurrent.Executor executor82 = null;
        builder80.callbackExecutor = executor82;
        retrofit.RestAdapter.Builder builder84 = new retrofit.RestAdapter.Builder();
        retrofit.Server server87 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder88 = builder84.setServer(server87);
        java.lang.String str89 = server87.getUrl();
        retrofit.RestAdapter.Builder builder90 = builder80.setServer(server87);
        retrofit.RestAdapter.Builder builder91 = builder76.setServer(server87);
        restAdapter75.server = server87;
        retrofit.client.Client.Provider provider93 = restAdapter75.clientProvider;
        retrofit.RestAdapter.Builder builder94 = builder64.setClient(provider93);
        retrofit.RestAdapter.Builder builder95 = builder48.setClient(provider93);
        builder34.clientProvider = provider93;
        retrofit.RestAdapter.Builder builder97 = builder32.setClient(provider93);
        retrofit.RestAdapter.Builder builder98 = builder0.setClient(provider93);
        retrofit.client.Client.Provider provider99 = builder98.clientProvider;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertNull(profiler8);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(restAdapter28);
        org.junit.Assert.assertNull(profiler29);
        org.junit.Assert.assertNull(profiler30);
        org.junit.Assert.assertNotNull(provider31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertNull(errorHandler35);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNull(executor41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "default" + "'", str47, "default");
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(errorHandler50);
        org.junit.Assert.assertNull(errorHandler51);
        org.junit.Assert.assertNull(executor52);
        org.junit.Assert.assertNull(errorHandler56);
        org.junit.Assert.assertNotNull(log61);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(errorHandler66);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(restAdapter75);
        org.junit.Assert.assertNull(errorHandler77);
        org.junit.Assert.assertNull(provider81);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "hi!" + "'", str89, "hi!");
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(provider93);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertNotNull(builder98);
        org.junit.Assert.assertNotNull(provider99);
    }

    @Test
    public void test04985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04985");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter0.getLogLevel();
        retrofit.client.Client.Provider provider20 = null;
        restAdapter0.clientProvider = provider20;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean23 = logLevel22.log();
        restAdapter0.logLevel = logLevel22;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        restAdapter0.requestInterceptor = requestInterceptor25;
        retrofit.RestAdapter.Log log27 = restAdapter0.log;
        retrofit.Server server28 = restAdapter0.server;
        retrofit.ErrorHandler errorHandler29 = restAdapter0.errorHandler;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler31 = builder30.errorHandler;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        builder30.requestInterceptor = requestInterceptor32;
        java.util.concurrent.Executor executor34 = builder30.httpExecutor;
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        log35.log("default");
        builder30.log = log35;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler40 = builder39.errorHandler;
        retrofit.client.Client.Provider provider41 = null;
        builder39.clientProvider = provider41;
        retrofit.Server server45 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder46 = builder39.setServer(server45);
        retrofit.converter.Converter converter47 = null;
        builder46.converter = converter47;
        retrofit.RestAdapter restAdapter49 = builder46.build();
        retrofit.Profiler profiler50 = builder46.profiler;
        retrofit.Profiler profiler51 = builder46.profiler;
        retrofit.client.Client.Provider provider52 = builder46.clientProvider;
        retrofit.RestAdapter.Builder builder53 = builder30.setClient(provider52);
        restAdapter0.clientProvider = provider52;
        retrofit.RequestInterceptor requestInterceptor55 = restAdapter0.requestInterceptor;
        retrofit.Server server56 = restAdapter0.server;
        retrofit.RestAdapter.Log log57 = restAdapter0.log;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(log27);
        org.junit.Assert.assertNotNull(server28);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNull(errorHandler31);
        org.junit.Assert.assertNull(executor34);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(restAdapter49);
        org.junit.Assert.assertNull(profiler50);
        org.junit.Assert.assertNull(profiler51);
        org.junit.Assert.assertNotNull(provider52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(requestInterceptor55);
        org.junit.Assert.assertNotNull(server56);
        org.junit.Assert.assertNull(log57);
    }

    @Test
    public void test04986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04986");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.client.Client.Provider provider14 = restAdapter12.clientProvider;
        retrofit.RestAdapter.Log log15 = restAdapter12.log;
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter12.getLogLevel();
        retrofit.ErrorHandler errorHandler17 = restAdapter12.errorHandler;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler19 = builder18.errorHandler;
        retrofit.ErrorHandler errorHandler20 = builder18.errorHandler;
        retrofit.RestAdapter.Log log21 = null;
        builder18.log = log21;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        builder18.requestInterceptor = requestInterceptor23;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor26 = restAdapter25.callbackExecutor;
        java.util.concurrent.Executor executor27 = restAdapter25.callbackExecutor;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler29 = restAdapter28.errorHandler;
        retrofit.Server server32 = new retrofit.Server("", "");
        restAdapter28.server = server32;
        restAdapter25.server = server32;
        retrofit.RestAdapter.Builder builder35 = builder18.setServer(server32);
        retrofit.RestAdapter.LogLevel logLevel36 = builder18.logLevel;
        retrofit.ErrorHandler errorHandler37 = builder18.errorHandler;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider39 = builder38.clientProvider;
        java.util.concurrent.Executor executor40 = null;
        builder38.callbackExecutor = executor40;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.Server server45 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder46 = builder42.setServer(server45);
        java.lang.String str47 = server45.getUrl();
        retrofit.RestAdapter.Builder builder48 = builder38.setServer(server45);
        builder38.ensureSaneDefaults();
        retrofit.Server server50 = null;
        retrofit.client.Client.Provider provider51 = null;
        java.util.concurrent.Executor executor52 = null;
        java.util.concurrent.Executor executor53 = null;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        retrofit.converter.Converter converter55 = null;
        retrofit.Profiler profiler56 = null;
        retrofit.ErrorHandler errorHandler57 = null;
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        log58.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel61 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter(server50, provider51, executor52, executor53, requestInterceptor54, converter55, profiler56, errorHandler57, log58, logLevel61);
        retrofit.RestAdapter.RestHandler restHandler63 = restAdapter62.new RestHandler();
        retrofit.RestAdapter.Log log64 = retrofit.RestAdapter.Log.NONE;
        restAdapter62.log = log64;
        retrofit.RestAdapter.Builder builder66 = builder38.setLog(log64);
        retrofit.RestAdapter.Builder builder68 = builder38.setServer("hi!");
        retrofit.RestAdapter restAdapter69 = builder38.build();
        retrofit.RestAdapter.RestHandler restHandler70 = restAdapter69.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel71 = restAdapter69.logLevel;
        java.util.concurrent.Executor executor72 = restAdapter69.callbackExecutor;
        retrofit.Server server75 = new retrofit.Server("hi!", "hi!");
        restAdapter69.server = server75;
        retrofit.RequestInterceptor requestInterceptor77 = restAdapter69.requestInterceptor;
        builder18.requestInterceptor = requestInterceptor77;
        restAdapter12.requestInterceptor = requestInterceptor77;
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNull(provider39);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(log58);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(restAdapter69);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(executor72);
        org.junit.Assert.assertNotNull(requestInterceptor77);
    }

    @Test
    public void test04987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04987");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = null;
        restAdapter0.httpExecutor = executor2;
        retrofit.client.Client.Provider provider4 = null;
        restAdapter0.clientProvider = provider4;
        java.util.concurrent.Executor executor6 = null;
        restAdapter0.httpExecutor = executor6;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        restAdapter0.requestInterceptor = requestInterceptor8;
        retrofit.RestAdapter.RestHandler restHandler10 = restAdapter0.new RestHandler();
        retrofit.ErrorHandler errorHandler11 = restAdapter0.errorHandler;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler13 = builder12.errorHandler;
        retrofit.ErrorHandler errorHandler14 = builder12.errorHandler;
        retrofit.Profiler profiler15 = builder12.profiler;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor17 = restAdapter16.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter16.new RestHandler();
        retrofit.Server server21 = new retrofit.Server("hi!", "hi!");
        restAdapter16.server = server21;
        retrofit.RestAdapter.Builder builder23 = builder12.setServer(server21);
        retrofit.Server server24 = builder12.server;
        retrofit.Profiler profiler25 = null;
        builder12.profiler = profiler25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider28 = builder27.clientProvider;
        java.util.concurrent.Executor executor29 = null;
        builder27.callbackExecutor = executor29;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.Server server34 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder35 = builder31.setServer(server34);
        java.lang.String str36 = server34.getUrl();
        retrofit.RestAdapter.Builder builder37 = builder27.setServer(server34);
        builder27.ensureSaneDefaults();
        retrofit.Server server39 = null;
        retrofit.client.Client.Provider provider40 = null;
        java.util.concurrent.Executor executor41 = null;
        java.util.concurrent.Executor executor42 = null;
        retrofit.RequestInterceptor requestInterceptor43 = null;
        retrofit.converter.Converter converter44 = null;
        retrofit.Profiler profiler45 = null;
        retrofit.ErrorHandler errorHandler46 = null;
        retrofit.RestAdapter.Log log47 = retrofit.RestAdapter.Log.NONE;
        log47.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel50 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter(server39, provider40, executor41, executor42, requestInterceptor43, converter44, profiler45, errorHandler46, log47, logLevel50);
        retrofit.RestAdapter.RestHandler restHandler52 = restAdapter51.new RestHandler();
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        restAdapter51.log = log53;
        retrofit.RestAdapter.Builder builder55 = builder27.setLog(log53);
        retrofit.RestAdapter.Builder builder57 = builder27.setServer("hi!");
        retrofit.RestAdapter restAdapter58 = builder27.build();
        retrofit.RestAdapter.RestHandler restHandler59 = restAdapter58.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel60 = restAdapter58.logLevel;
        java.util.concurrent.Executor executor61 = restAdapter58.callbackExecutor;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider63 = builder62.clientProvider;
        retrofit.RestAdapter.Builder builder65 = builder62.setServer("default");
        retrofit.RestAdapter restAdapter66 = builder62.build();
        retrofit.client.Client.Provider provider67 = builder62.clientProvider;
        restAdapter58.clientProvider = provider67;
        retrofit.RestAdapter.Builder builder69 = builder12.setClient(provider67);
        restAdapter0.clientProvider = provider67;
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(server24);
        org.junit.Assert.assertNull(provider28);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(log47);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(restAdapter58);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(executor61);
        org.junit.Assert.assertNull(provider63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(restAdapter66);
        org.junit.Assert.assertNotNull(provider67);
        org.junit.Assert.assertNotNull(builder69);
    }

    @Test
    public void test04988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04988");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler1 = restAdapter0.errorHandler;
        retrofit.Server server4 = new retrofit.Server("", "");
        restAdapter0.server = server4;
        retrofit.Profiler profiler6 = null;
        restAdapter0.profiler = profiler6;
        retrofit.Profiler profiler8 = null;
        restAdapter0.profiler = profiler8;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter10.new RestHandler();
        retrofit.client.Client.Provider provider12 = restAdapter10.clientProvider;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler14 = builder13.errorHandler;
        retrofit.Server server17 = new retrofit.Server("", "");
        builder13.server = server17;
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        builder13.log = log19;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler22 = builder21.errorHandler;
        retrofit.client.Client.Provider provider23 = null;
        builder21.clientProvider = provider23;
        retrofit.Server server27 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder28 = builder21.setServer(server27);
        retrofit.converter.Converter converter29 = null;
        builder28.converter = converter29;
        retrofit.RestAdapter restAdapter31 = builder28.build();
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler33 = builder32.errorHandler;
        java.util.concurrent.Executor executor34 = null;
        builder32.callbackExecutor = executor34;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider37 = builder36.clientProvider;
        java.util.concurrent.Executor executor38 = null;
        builder36.callbackExecutor = executor38;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.Server server43 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder44 = builder40.setServer(server43);
        java.lang.String str45 = server43.getUrl();
        retrofit.RestAdapter.Builder builder46 = builder36.setServer(server43);
        retrofit.RestAdapter.Builder builder47 = builder32.setServer(server43);
        restAdapter31.server = server43;
        java.util.concurrent.Executor executor49 = restAdapter31.httpExecutor;
        builder13.httpExecutor = executor49;
        restAdapter10.callbackExecutor = executor49;
        restAdapter0.callbackExecutor = executor49;
        retrofit.RestAdapter.RestHandler restHandler53 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler55 = null;
        builder54.errorHandler = errorHandler55;
        retrofit.ErrorHandler errorHandler57 = builder54.errorHandler;
        retrofit.RestAdapter.Builder builder59 = builder54.setServer("hi!");
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler61 = builder60.errorHandler;
        retrofit.ErrorHandler errorHandler62 = builder60.errorHandler;
        retrofit.Profiler profiler63 = builder60.profiler;
        retrofit.RestAdapter.Log log64 = builder60.log;
        retrofit.RestAdapter.LogLevel logLevel65 = retrofit.RestAdapter.LogLevel.FULL;
        builder60.logLevel = logLevel65;
        retrofit.RestAdapter.Builder builder67 = builder59.setLogLevel(logLevel65);
        retrofit.Server server70 = new retrofit.Server("hi!", "default");
        retrofit.RestAdapter.Builder builder71 = builder59.setServer(server70);
        retrofit.Server server72 = builder59.server;
        retrofit.RestAdapter.Log log73 = builder59.log;
        java.util.concurrent.Executor executor74 = builder59.httpExecutor;
        retrofit.Server server75 = builder59.server;
        restAdapter0.server = server75;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(restAdapter31);
        org.junit.Assert.assertNull(errorHandler33);
        org.junit.Assert.assertNull(provider37);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(executor49);
        org.junit.Assert.assertNull(errorHandler57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(errorHandler61);
        org.junit.Assert.assertNull(errorHandler62);
        org.junit.Assert.assertNull(profiler63);
        org.junit.Assert.assertNull(log64);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(server72);
        org.junit.Assert.assertNull(log73);
        org.junit.Assert.assertNull(executor74);
        org.junit.Assert.assertNotNull(server75);
    }

    @Test
    public void test04989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04989");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.converter.Converter converter14 = restAdapter0.converter;
        retrofit.ErrorHandler errorHandler15 = null;
        restAdapter0.errorHandler = errorHandler15;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor18 = restAdapter17.callbackExecutor;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor20 = restAdapter19.callbackExecutor;
        java.util.concurrent.Executor executor21 = restAdapter19.callbackExecutor;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler23 = restAdapter22.errorHandler;
        retrofit.Server server26 = new retrofit.Server("", "");
        restAdapter22.server = server26;
        restAdapter19.server = server26;
        restAdapter17.server = server26;
        retrofit.Profiler profiler30 = restAdapter17.profiler;
        retrofit.ErrorHandler errorHandler31 = null;
        restAdapter17.errorHandler = errorHandler31;
        java.util.concurrent.Executor executor33 = restAdapter17.callbackExecutor;
        java.util.concurrent.Executor executor34 = restAdapter17.httpExecutor;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor36 = restAdapter35.callbackExecutor;
        java.util.concurrent.Executor executor37 = restAdapter35.callbackExecutor;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler39 = restAdapter38.errorHandler;
        retrofit.Server server42 = new retrofit.Server("", "");
        restAdapter38.server = server42;
        restAdapter35.server = server42;
        restAdapter17.server = server42;
        restAdapter0.server = server42;
        retrofit.converter.Converter converter47 = restAdapter0.converter;
        java.util.concurrent.Executor executor48 = restAdapter0.httpExecutor;
        retrofit.Profiler profiler49 = null;
        restAdapter0.profiler = profiler49;
        retrofit.Profiler profiler51 = null;
        restAdapter0.profiler = profiler51;
        java.util.concurrent.Executor executor53 = restAdapter0.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        restAdapter0.requestInterceptor = requestInterceptor54;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNull(profiler30);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertNull(executor34);
        org.junit.Assert.assertNull(executor36);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNull(converter47);
        org.junit.Assert.assertNull(executor48);
        org.junit.Assert.assertNull(executor53);
    }

    @Test
    public void test04990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04990");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = builder0.clientProvider;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server7 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder8 = builder4.setServer(server7);
        java.lang.String str9 = server7.getUrl();
        retrofit.RestAdapter.Builder builder10 = builder0.setServer(server7);
        builder0.ensureSaneDefaults();
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        log20.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel23);
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter24.new RestHandler();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        restAdapter24.log = log26;
        retrofit.RestAdapter.Builder builder28 = builder0.setLog(log26);
        retrofit.RequestInterceptor requestInterceptor29 = null;
        builder28.requestInterceptor = requestInterceptor29;
        retrofit.RestAdapter.Log log31 = builder28.log;
        retrofit.client.Client client32 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder33 = builder28.setClient(client32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(provider1);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(log31);
    }

    @Test
    public void test04991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04991");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        restAdapter12.log = log14;
        retrofit.converter.Converter converter16 = null;
        restAdapter12.converter = converter16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter12.getLogLevel();
        retrofit.ErrorHandler errorHandler19 = restAdapter12.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter12.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor21 = restAdapter12.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter12.getLogLevel();
        java.util.List<retrofit.client.Header> headerList25 = null;
        retrofit.mime.TypedOutput typedOutput26 = null;
        retrofit.client.Request request27 = new retrofit.client.Request("hi!", "", headerList25, typedOutput26);
        retrofit.client.Request request28 = restAdapter12.logAndReplaceRequest(request27);
        retrofit.mime.TypedOutput typedOutput29 = request27.getBody();
        java.lang.String str30 = request27.getUrl();
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(requestInterceptor21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(request28);
        org.junit.Assert.assertNull(typedOutput29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
    }

    @Test
    public void test04992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04992");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.Profiler profiler5 = builder0.profiler;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler7 = builder6.errorHandler;
        java.util.concurrent.Executor executor8 = builder6.callbackExecutor;
        java.util.concurrent.Executor executor9 = builder6.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel10 = builder6.logLevel;
        retrofit.RestAdapter.Builder builder11 = builder0.setLogLevel(logLevel10);
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor13 = restAdapter12.callbackExecutor;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor15 = restAdapter14.callbackExecutor;
        java.util.concurrent.Executor executor16 = restAdapter14.callbackExecutor;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler18 = restAdapter17.errorHandler;
        retrofit.Server server21 = new retrofit.Server("", "");
        restAdapter17.server = server21;
        restAdapter14.server = server21;
        restAdapter12.server = server21;
        retrofit.Profiler profiler25 = restAdapter12.profiler;
        retrofit.ErrorHandler errorHandler26 = null;
        restAdapter12.errorHandler = errorHandler26;
        retrofit.Profiler profiler28 = null;
        restAdapter12.profiler = profiler28;
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter12.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter12.getLogLevel();
        retrofit.client.Client.Provider provider32 = null;
        restAdapter12.clientProvider = provider32;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        restAdapter12.logLevel = logLevel34;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        restAdapter12.requestInterceptor = requestInterceptor37;
        retrofit.RestAdapter.Log log39 = restAdapter12.log;
        retrofit.Server server40 = restAdapter12.server;
        retrofit.ErrorHandler errorHandler41 = restAdapter12.errorHandler;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler43 = builder42.errorHandler;
        retrofit.RequestInterceptor requestInterceptor44 = null;
        builder42.requestInterceptor = requestInterceptor44;
        java.util.concurrent.Executor executor46 = builder42.httpExecutor;
        retrofit.RestAdapter.Log log47 = retrofit.RestAdapter.Log.NONE;
        log47.log("default");
        builder42.log = log47;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler52 = builder51.errorHandler;
        retrofit.client.Client.Provider provider53 = null;
        builder51.clientProvider = provider53;
        retrofit.Server server57 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder58 = builder51.setServer(server57);
        retrofit.converter.Converter converter59 = null;
        builder58.converter = converter59;
        retrofit.RestAdapter restAdapter61 = builder58.build();
        retrofit.Profiler profiler62 = builder58.profiler;
        retrofit.Profiler profiler63 = builder58.profiler;
        retrofit.client.Client.Provider provider64 = builder58.clientProvider;
        retrofit.RestAdapter.Builder builder65 = builder42.setClient(provider64);
        restAdapter12.clientProvider = provider64;
        retrofit.RestAdapter.Builder builder67 = builder11.setClient(provider64);
        retrofit.RestAdapter.Log log68 = builder67.log;
        retrofit.RestAdapter.Log log69 = builder67.log;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(profiler5);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(errorHandler18);
        org.junit.Assert.assertNull(profiler25);
        org.junit.Assert.assertNull(logLevel30);
        org.junit.Assert.assertNull(logLevel31);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(log39);
        org.junit.Assert.assertNotNull(server40);
        org.junit.Assert.assertNull(errorHandler41);
        org.junit.Assert.assertNull(errorHandler43);
        org.junit.Assert.assertNull(executor46);
        org.junit.Assert.assertNotNull(log47);
        org.junit.Assert.assertNull(errorHandler52);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(restAdapter61);
        org.junit.Assert.assertNull(profiler62);
        org.junit.Assert.assertNull(profiler63);
        org.junit.Assert.assertNotNull(provider64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNull(log68);
        org.junit.Assert.assertNull(log69);
    }

    @Test
    public void test04993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04993");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        builder0.requestInterceptor = requestInterceptor2;
        java.util.concurrent.Executor executor4 = builder0.httpExecutor;
        retrofit.Profiler profiler5 = null;
        builder0.profiler = profiler5;
        retrofit.Server server7 = builder0.server;
        retrofit.RestAdapter.Log log8 = builder0.log;
        retrofit.Profiler profiler9 = builder0.profiler;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(server7);
        org.junit.Assert.assertNull(log8);
        org.junit.Assert.assertNull(profiler9);
    }

    @Test
    public void test04994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04994");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = null;
        restAdapter0.httpExecutor = executor2;
        retrofit.client.Client.Provider provider4 = null;
        restAdapter0.clientProvider = provider4;
        java.util.concurrent.Executor executor6 = null;
        restAdapter0.httpExecutor = executor6;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        restAdapter0.requestInterceptor = requestInterceptor8;
        retrofit.Server server10 = restAdapter0.server;
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor12 = restAdapter11.callbackExecutor;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor14 = restAdapter13.callbackExecutor;
        java.util.concurrent.Executor executor15 = restAdapter13.callbackExecutor;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler17 = restAdapter16.errorHandler;
        retrofit.Server server20 = new retrofit.Server("", "");
        restAdapter16.server = server20;
        restAdapter13.server = server20;
        restAdapter11.server = server20;
        retrofit.Profiler profiler24 = restAdapter11.profiler;
        retrofit.ErrorHandler errorHandler25 = null;
        restAdapter11.errorHandler = errorHandler25;
        retrofit.RequestInterceptor requestInterceptor27 = restAdapter11.requestInterceptor;
        retrofit.ErrorHandler errorHandler28 = restAdapter11.errorHandler;
        java.util.concurrent.Executor executor29 = null;
        restAdapter11.callbackExecutor = executor29;
        java.util.concurrent.Executor executor31 = restAdapter11.httpExecutor;
        retrofit.client.Client.Provider provider32 = restAdapter11.clientProvider;
        retrofit.RestAdapter.Log log33 = restAdapter11.log;
        java.util.concurrent.Executor executor34 = restAdapter11.callbackExecutor;
        retrofit.client.Client.Provider provider35 = restAdapter11.clientProvider;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler37 = builder36.errorHandler;
        retrofit.ErrorHandler errorHandler38 = builder36.errorHandler;
        retrofit.RestAdapter.Log log39 = null;
        builder36.log = log39;
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean42 = logLevel41.log();
        builder36.logLevel = logLevel41;
        retrofit.ErrorHandler errorHandler44 = builder36.errorHandler;
        retrofit.RestAdapter.Builder builder46 = builder36.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor47 = null;
        builder46.requestInterceptor = requestInterceptor47;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler50 = builder49.errorHandler;
        retrofit.client.Client.Provider provider51 = null;
        builder49.clientProvider = provider51;
        retrofit.Server server55 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder56 = builder49.setServer(server55);
        retrofit.client.Client.Provider provider57 = null;
        java.util.concurrent.Executor executor58 = null;
        java.util.concurrent.Executor executor59 = null;
        retrofit.RequestInterceptor requestInterceptor60 = null;
        retrofit.converter.Converter converter61 = null;
        retrofit.Profiler profiler62 = null;
        retrofit.ErrorHandler errorHandler63 = null;
        retrofit.Server server64 = null;
        retrofit.client.Client.Provider provider65 = null;
        java.util.concurrent.Executor executor66 = null;
        java.util.concurrent.Executor executor67 = null;
        retrofit.RequestInterceptor requestInterceptor68 = null;
        retrofit.converter.Converter converter69 = null;
        retrofit.Profiler profiler70 = null;
        retrofit.ErrorHandler errorHandler71 = null;
        retrofit.RestAdapter.Log log72 = retrofit.RestAdapter.Log.NONE;
        log72.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel75 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter76 = new retrofit.RestAdapter(server64, provider65, executor66, executor67, requestInterceptor68, converter69, profiler70, errorHandler71, log72, logLevel75);
        retrofit.RestAdapter.LogLevel logLevel77 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter78 = new retrofit.RestAdapter(server55, provider57, executor58, executor59, requestInterceptor60, converter61, profiler62, errorHandler63, log72, logLevel77);
        log72.log("");
        builder46.log = log72;
        retrofit.RestAdapter.Log log82 = builder46.log;
        restAdapter11.log = log82;
        restAdapter0.log = log82;
        retrofit.RestAdapter.RestHandler restHandler85 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder86 = new retrofit.RestAdapter.Builder();
        retrofit.Server server89 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder90 = builder86.setServer(server89);
        retrofit.RestAdapter.LogLevel logLevel91 = builder90.logLevel;
        java.util.concurrent.Executor executor92 = builder90.httpExecutor;
        retrofit.RestAdapter restAdapter93 = builder90.build();
        retrofit.RestAdapter.RestHandler restHandler94 = restAdapter93.new RestHandler();
        retrofit.ErrorHandler errorHandler95 = restAdapter93.errorHandler;
        retrofit.client.Client.Provider provider96 = restAdapter93.clientProvider;
        java.util.concurrent.Executor executor97 = restAdapter93.httpExecutor;
        restAdapter0.httpExecutor = executor97;
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(profiler24);
        org.junit.Assert.assertNull(requestInterceptor27);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNull(provider32);
        org.junit.Assert.assertNull(log33);
        org.junit.Assert.assertNull(executor34);
        org.junit.Assert.assertNull(provider35);
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNull(errorHandler38);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(errorHandler44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(errorHandler50);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(log72);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log82);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertTrue("'" + logLevel91 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel91.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor92);
        org.junit.Assert.assertNotNull(restAdapter93);
        org.junit.Assert.assertNotNull(errorHandler95);
        org.junit.Assert.assertNotNull(provider96);
        org.junit.Assert.assertNotNull(executor97);
    }

    @Test
    public void test04995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04995");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean6 = logLevel5.log();
        builder0.logLevel = logLevel5;
        retrofit.ErrorHandler errorHandler8 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder10 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider11 = builder10.clientProvider;
        retrofit.Server server12 = builder10.server;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor14 = restAdapter13.callbackExecutor;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor16 = restAdapter15.callbackExecutor;
        java.util.concurrent.Executor executor17 = restAdapter15.callbackExecutor;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler19 = restAdapter18.errorHandler;
        retrofit.Server server22 = new retrofit.Server("", "");
        restAdapter18.server = server22;
        restAdapter15.server = server22;
        restAdapter13.server = server22;
        retrofit.converter.Converter converter26 = restAdapter13.converter;
        retrofit.RestAdapter.RestHandler restHandler27 = restAdapter13.new RestHandler();
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.Server server31 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder32 = builder28.setServer(server31);
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor34 = restAdapter33.callbackExecutor;
        java.util.concurrent.Executor executor35 = restAdapter33.callbackExecutor;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler37 = restAdapter36.errorHandler;
        retrofit.Server server40 = new retrofit.Server("", "");
        restAdapter36.server = server40;
        restAdapter33.server = server40;
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        restAdapter33.log = log43;
        retrofit.RestAdapter.Builder builder45 = builder32.setLog(log43);
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder47 = builder32.setLogLevel(logLevel46);
        retrofit.Profiler profiler48 = null;
        builder47.profiler = profiler48;
        retrofit.converter.Converter converter50 = null;
        builder47.converter = converter50;
        retrofit.ErrorHandler errorHandler52 = null;
        builder47.errorHandler = errorHandler52;
        retrofit.RestAdapter.LogLevel logLevel54 = builder47.logLevel;
        restAdapter13.logLevel = logLevel54;
        retrofit.RestAdapter.Builder builder56 = builder10.setLogLevel(logLevel54);
        retrofit.converter.Converter converter57 = builder56.converter;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertNotNull(server12);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(converter26);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(executor34);
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(converter57);
    }

    @Test
    public void test04996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04996");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter0.getLogLevel();
        retrofit.client.Client.Provider provider20 = null;
        restAdapter0.clientProvider = provider20;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean23 = logLevel22.log();
        restAdapter0.logLevel = logLevel22;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        restAdapter0.requestInterceptor = requestInterceptor25;
        retrofit.RestAdapter.Log log27 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler28 = restAdapter0.errorHandler;
        retrofit.RestAdapter.Log log29 = restAdapter0.log;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider31 = builder30.clientProvider;
        java.util.concurrent.Executor executor32 = null;
        builder30.callbackExecutor = executor32;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler35 = builder34.errorHandler;
        retrofit.Server server38 = new retrofit.Server("", "");
        builder34.server = server38;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor41 = restAdapter40.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler42 = restAdapter40.new RestHandler();
        retrofit.Server server45 = new retrofit.Server("hi!", "hi!");
        restAdapter40.server = server45;
        retrofit.RestAdapter.Builder builder47 = builder34.setServer(server45);
        retrofit.RestAdapter.Log log48 = builder34.log;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler50 = null;
        builder49.errorHandler = errorHandler50;
        retrofit.converter.Converter converter52 = builder49.converter;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.Server server56 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder57 = builder53.setServer(server56);
        retrofit.converter.Converter converter58 = builder53.converter;
        retrofit.RequestInterceptor requestInterceptor59 = builder53.requestInterceptor;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider61 = builder60.clientProvider;
        java.util.concurrent.Executor executor62 = null;
        builder60.callbackExecutor = executor62;
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.Server server67 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder68 = builder64.setServer(server67);
        java.lang.String str69 = server67.getUrl();
        retrofit.RestAdapter.Builder builder70 = builder60.setServer(server67);
        builder60.ensureSaneDefaults();
        retrofit.Server server72 = null;
        retrofit.client.Client.Provider provider73 = null;
        java.util.concurrent.Executor executor74 = null;
        java.util.concurrent.Executor executor75 = null;
        retrofit.RequestInterceptor requestInterceptor76 = null;
        retrofit.converter.Converter converter77 = null;
        retrofit.Profiler profiler78 = null;
        retrofit.ErrorHandler errorHandler79 = null;
        retrofit.RestAdapter.Log log80 = retrofit.RestAdapter.Log.NONE;
        log80.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel83 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter84 = new retrofit.RestAdapter(server72, provider73, executor74, executor75, requestInterceptor76, converter77, profiler78, errorHandler79, log80, logLevel83);
        retrofit.RestAdapter.RestHandler restHandler85 = restAdapter84.new RestHandler();
        retrofit.RestAdapter.Log log86 = retrofit.RestAdapter.Log.NONE;
        restAdapter84.log = log86;
        retrofit.RestAdapter.Builder builder88 = builder60.setLog(log86);
        retrofit.RestAdapter.Builder builder90 = builder60.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor91 = builder60.requestInterceptor;
        builder53.requestInterceptor = requestInterceptor91;
        builder49.requestInterceptor = requestInterceptor91;
        builder34.requestInterceptor = requestInterceptor91;
        retrofit.RestAdapter.Builder builder95 = builder30.setRequestInterceptor(requestInterceptor91);
        restAdapter0.requestInterceptor = requestInterceptor91;
        retrofit.RestAdapter.LogLevel logLevel97 = restAdapter0.logLevel;
        java.util.concurrent.Executor executor98 = null;
        restAdapter0.httpExecutor = executor98;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(log27);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertNull(log29);
        org.junit.Assert.assertNull(provider31);
        org.junit.Assert.assertNull(errorHandler35);
        org.junit.Assert.assertNull(executor41);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(log48);
        org.junit.Assert.assertNull(converter52);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(converter58);
        org.junit.Assert.assertNull(requestInterceptor59);
        org.junit.Assert.assertNull(provider61);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(log80);
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(requestInterceptor91);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertTrue("'" + logLevel97 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel97.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test04997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04997");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = builder0.clientProvider;
        retrofit.converter.Converter converter2 = null;
        builder0.converter = converter2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler5 = builder4.errorHandler;
        retrofit.Server server8 = new retrofit.Server("", "");
        builder4.server = server8;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor11 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter10.new RestHandler();
        retrofit.Server server15 = new retrofit.Server("hi!", "hi!");
        restAdapter10.server = server15;
        retrofit.RestAdapter.Builder builder17 = builder4.setServer(server15);
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler19 = builder18.errorHandler;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        builder18.requestInterceptor = requestInterceptor20;
        java.util.concurrent.Executor executor22 = null;
        builder18.httpExecutor = executor22;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler25 = null;
        builder24.errorHandler = errorHandler25;
        retrofit.ErrorHandler errorHandler27 = builder24.errorHandler;
        retrofit.RestAdapter.Builder builder29 = builder24.setServer("hi!");
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler31 = builder30.errorHandler;
        retrofit.ErrorHandler errorHandler32 = builder30.errorHandler;
        retrofit.Profiler profiler33 = builder30.profiler;
        retrofit.RestAdapter.Log log34 = builder30.log;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.FULL;
        builder30.logLevel = logLevel35;
        retrofit.RestAdapter.Builder builder37 = builder29.setLogLevel(logLevel35);
        retrofit.RestAdapter.Builder builder38 = builder18.setLogLevel(logLevel35);
        builder17.logLevel = logLevel35;
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        log40.log("hi!");
        log40.log("hi!");
        log40.log("hi!");
        retrofit.RestAdapter.Builder builder47 = builder17.setLog(log40);
        java.util.concurrent.Executor executor48 = builder17.callbackExecutor;
        retrofit.client.Client.Provider provider49 = builder17.clientProvider;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler51 = builder50.errorHandler;
        retrofit.Server server54 = new retrofit.Server("", "");
        builder50.server = server54;
        java.util.concurrent.Executor executor56 = null;
        builder50.httpExecutor = executor56;
        retrofit.Server server58 = builder50.server;
        builder17.server = server58;
        java.lang.String str60 = server58.getName();
        java.lang.String str61 = server58.getUrl();
        retrofit.RestAdapter.Builder builder62 = builder0.setServer(server58);
        retrofit.converter.Converter converter63 = builder0.converter;
        org.junit.Assert.assertNull(provider1);
        org.junit.Assert.assertNull(errorHandler5);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(errorHandler31);
        org.junit.Assert.assertNull(errorHandler32);
        org.junit.Assert.assertNull(profiler33);
        org.junit.Assert.assertNull(log34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(executor48);
        org.junit.Assert.assertNull(provider49);
        org.junit.Assert.assertNull(errorHandler51);
        org.junit.Assert.assertNotNull(server58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(converter63);
    }

    @Test
    public void test04998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04998");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.Server server7 = new retrofit.Server("default", "hi!");
        java.lang.String str8 = server7.getUrl();
        retrofit.RestAdapter.Builder builder9 = builder4.setServer(server7);
        retrofit.RestAdapter.LogLevel logLevel10 = builder9.logLevel;
        builder9.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor13 = restAdapter12.callbackExecutor;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor15 = restAdapter14.callbackExecutor;
        java.util.concurrent.Executor executor16 = restAdapter14.callbackExecutor;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler18 = restAdapter17.errorHandler;
        retrofit.Server server21 = new retrofit.Server("", "");
        restAdapter17.server = server21;
        restAdapter14.server = server21;
        restAdapter12.server = server21;
        retrofit.Profiler profiler25 = restAdapter12.profiler;
        retrofit.ErrorHandler errorHandler26 = null;
        restAdapter12.errorHandler = errorHandler26;
        retrofit.Profiler profiler28 = null;
        restAdapter12.profiler = profiler28;
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter12.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter12.getLogLevel();
        retrofit.ErrorHandler errorHandler32 = null;
        restAdapter12.errorHandler = errorHandler32;
        retrofit.client.Client.Provider provider34 = null;
        restAdapter12.clientProvider = provider34;
        retrofit.converter.Converter converter36 = restAdapter12.converter;
        retrofit.RestAdapter.RestHandler restHandler37 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider39 = builder38.clientProvider;
        java.util.concurrent.Executor executor40 = null;
        builder38.callbackExecutor = executor40;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.Server server45 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder46 = builder42.setServer(server45);
        java.lang.String str47 = server45.getUrl();
        retrofit.RestAdapter.Builder builder48 = builder38.setServer(server45);
        builder38.ensureSaneDefaults();
        java.util.concurrent.Executor executor50 = builder38.httpExecutor;
        restAdapter12.httpExecutor = executor50;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider53 = builder52.clientProvider;
        java.util.concurrent.Executor executor54 = null;
        builder52.callbackExecutor = executor54;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.Server server59 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder60 = builder56.setServer(server59);
        java.lang.String str61 = server59.getUrl();
        retrofit.RestAdapter.Builder builder62 = builder52.setServer(server59);
        builder52.ensureSaneDefaults();
        retrofit.Server server64 = null;
        retrofit.client.Client.Provider provider65 = null;
        java.util.concurrent.Executor executor66 = null;
        java.util.concurrent.Executor executor67 = null;
        retrofit.RequestInterceptor requestInterceptor68 = null;
        retrofit.converter.Converter converter69 = null;
        retrofit.Profiler profiler70 = null;
        retrofit.ErrorHandler errorHandler71 = null;
        retrofit.RestAdapter.Log log72 = retrofit.RestAdapter.Log.NONE;
        log72.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel75 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter76 = new retrofit.RestAdapter(server64, provider65, executor66, executor67, requestInterceptor68, converter69, profiler70, errorHandler71, log72, logLevel75);
        retrofit.RestAdapter.RestHandler restHandler77 = restAdapter76.new RestHandler();
        retrofit.RestAdapter.Log log78 = retrofit.RestAdapter.Log.NONE;
        restAdapter76.log = log78;
        retrofit.RestAdapter.Builder builder80 = builder52.setLog(log78);
        retrofit.Profiler profiler81 = null;
        builder80.profiler = profiler81;
        retrofit.RequestInterceptor requestInterceptor83 = builder80.requestInterceptor;
        retrofit.RestAdapter restAdapter84 = builder80.build();
        retrofit.RequestInterceptor requestInterceptor85 = builder80.requestInterceptor;
        restAdapter12.requestInterceptor = requestInterceptor85;
        builder9.requestInterceptor = requestInterceptor85;
        retrofit.RestAdapter.Builder builder89 = builder9.setServer("default");
        retrofit.converter.Converter converter90 = builder9.converter;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "default" + "'", str8, "default");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(errorHandler18);
        org.junit.Assert.assertNull(profiler25);
        org.junit.Assert.assertNull(logLevel30);
        org.junit.Assert.assertNull(logLevel31);
        org.junit.Assert.assertNull(converter36);
        org.junit.Assert.assertNull(provider39);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(executor50);
        org.junit.Assert.assertNull(provider53);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(log72);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(requestInterceptor83);
        org.junit.Assert.assertNotNull(restAdapter84);
        org.junit.Assert.assertNotNull(requestInterceptor85);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(converter90);
    }

    @Test
    public void test04999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04999");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = null;
        restAdapter0.callbackExecutor = executor2;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.client.Client.Provider provider6 = restAdapter0.clientProvider;
        retrofit.RestAdapter.RestHandler restHandler7 = restAdapter0.new RestHandler();
        retrofit.Profiler profiler8 = null;
        restAdapter0.profiler = profiler8;
        retrofit.Server server10 = restAdapter0.server;
        retrofit.Server server11 = restAdapter0.server;
        retrofit.RestAdapter.LogLevel logLevel12 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler14 = builder13.errorHandler;
        java.util.concurrent.Executor executor15 = builder13.callbackExecutor;
        retrofit.RestAdapter.Builder builder17 = builder13.setServer("hi!");
        retrofit.Server server20 = new retrofit.Server("default", "hi!");
        java.lang.String str21 = server20.getUrl();
        retrofit.RestAdapter.Builder builder22 = builder17.setServer(server20);
        retrofit.RestAdapter.LogLevel logLevel23 = builder22.logLevel;
        builder22.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor26 = restAdapter25.callbackExecutor;
        java.util.concurrent.Executor executor27 = restAdapter25.callbackExecutor;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler29 = restAdapter28.errorHandler;
        retrofit.Server server32 = new retrofit.Server("", "");
        restAdapter28.server = server32;
        restAdapter25.server = server32;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler36 = restAdapter35.errorHandler;
        retrofit.Server server39 = new retrofit.Server("", "");
        restAdapter35.server = server39;
        restAdapter25.server = server39;
        retrofit.client.Client.Provider provider42 = null;
        java.util.concurrent.Executor executor43 = null;
        java.util.concurrent.Executor executor44 = null;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        retrofit.converter.Converter converter46 = null;
        retrofit.Profiler profiler47 = null;
        retrofit.ErrorHandler errorHandler48 = null;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider50 = builder49.clientProvider;
        java.util.concurrent.Executor executor51 = null;
        builder49.callbackExecutor = executor51;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.Server server56 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder57 = builder53.setServer(server56);
        java.lang.String str58 = server56.getUrl();
        retrofit.RestAdapter.Builder builder59 = builder49.setServer(server56);
        builder49.ensureSaneDefaults();
        retrofit.Server server61 = null;
        retrofit.client.Client.Provider provider62 = null;
        java.util.concurrent.Executor executor63 = null;
        java.util.concurrent.Executor executor64 = null;
        retrofit.RequestInterceptor requestInterceptor65 = null;
        retrofit.converter.Converter converter66 = null;
        retrofit.Profiler profiler67 = null;
        retrofit.ErrorHandler errorHandler68 = null;
        retrofit.RestAdapter.Log log69 = retrofit.RestAdapter.Log.NONE;
        log69.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel72 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter73 = new retrofit.RestAdapter(server61, provider62, executor63, executor64, requestInterceptor65, converter66, profiler67, errorHandler68, log69, logLevel72);
        retrofit.RestAdapter.RestHandler restHandler74 = restAdapter73.new RestHandler();
        retrofit.RestAdapter.Log log75 = retrofit.RestAdapter.Log.NONE;
        restAdapter73.log = log75;
        retrofit.RestAdapter.Builder builder77 = builder49.setLog(log75);
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler79 = builder78.errorHandler;
        retrofit.ErrorHandler errorHandler80 = builder78.errorHandler;
        retrofit.RestAdapter.Log log81 = null;
        builder78.log = log81;
        retrofit.RestAdapter.LogLevel logLevel83 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean84 = logLevel83.log();
        builder78.logLevel = logLevel83;
        retrofit.RestAdapter restAdapter86 = new retrofit.RestAdapter(server39, provider42, executor43, executor44, requestInterceptor45, converter46, profiler47, errorHandler48, log75, logLevel83);
        builder22.log = log75;
        restAdapter0.log = log75;
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(provider6);
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertNull(server11);
        org.junit.Assert.assertNull(logLevel12);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "default" + "'", str21, "default");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNull(errorHandler36);
        org.junit.Assert.assertNull(provider50);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(log69);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNull(errorHandler79);
        org.junit.Assert.assertNull(errorHandler80);
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test05000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test05000");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        builder0.requestInterceptor = requestInterceptor2;
        java.util.concurrent.Executor executor4 = builder0.httpExecutor;
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        log5.log("default");
        log5.log("default");
        retrofit.RestAdapter.Builder builder10 = builder0.setLog(log5);
        retrofit.RequestInterceptor requestInterceptor11 = builder10.requestInterceptor;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass12 = requestInterceptor11.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(requestInterceptor11);
    }
}

