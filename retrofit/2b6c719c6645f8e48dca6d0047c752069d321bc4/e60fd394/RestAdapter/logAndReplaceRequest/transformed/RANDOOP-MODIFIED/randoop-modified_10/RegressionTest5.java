import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest5 {

    public static boolean debug = false;

    @Test
    public void test02501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02501");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = builder0.clientProvider;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server7 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder8 = builder4.setServer(server7);
        java.lang.String str9 = server7.getUrl();
        retrofit.RestAdapter.Builder builder10 = builder0.setServer(server7);
        builder0.ensureSaneDefaults();
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        log20.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel23);
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter24.new RestHandler();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        restAdapter24.log = log26;
        retrofit.RestAdapter.Builder builder28 = builder0.setLog(log26);
        retrofit.RestAdapter.Builder builder30 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter31 = builder0.build();
        retrofit.RestAdapter.RestHandler restHandler32 = restAdapter31.new RestHandler();
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor34 = restAdapter33.callbackExecutor;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor36 = restAdapter35.callbackExecutor;
        java.util.concurrent.Executor executor37 = restAdapter35.callbackExecutor;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler39 = restAdapter38.errorHandler;
        retrofit.Server server42 = new retrofit.Server("", "");
        restAdapter38.server = server42;
        restAdapter35.server = server42;
        restAdapter33.server = server42;
        retrofit.Profiler profiler46 = restAdapter33.profiler;
        retrofit.ErrorHandler errorHandler47 = null;
        restAdapter33.errorHandler = errorHandler47;
        retrofit.Profiler profiler49 = null;
        restAdapter33.profiler = profiler49;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        restAdapter33.requestInterceptor = requestInterceptor51;
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter33.getLogLevel();
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.Server server57 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder58 = builder54.setServer(server57);
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor60 = restAdapter59.callbackExecutor;
        java.util.concurrent.Executor executor61 = restAdapter59.callbackExecutor;
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler63 = restAdapter62.errorHandler;
        retrofit.Server server66 = new retrofit.Server("", "");
        restAdapter62.server = server66;
        restAdapter59.server = server66;
        retrofit.RestAdapter.Log log69 = retrofit.RestAdapter.Log.NONE;
        restAdapter59.log = log69;
        retrofit.RestAdapter.Builder builder71 = builder58.setLog(log69);
        retrofit.RestAdapter.LogLevel logLevel72 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder73 = builder58.setLogLevel(logLevel72);
        retrofit.Profiler profiler74 = null;
        builder73.profiler = profiler74;
        retrofit.converter.Converter converter76 = null;
        builder73.converter = converter76;
        retrofit.ErrorHandler errorHandler78 = null;
        builder73.errorHandler = errorHandler78;
        retrofit.RestAdapter restAdapter80 = builder73.build();
        retrofit.ErrorHandler errorHandler81 = builder73.errorHandler;
        restAdapter33.errorHandler = errorHandler81;
        retrofit.RequestInterceptor requestInterceptor83 = restAdapter33.requestInterceptor;
        retrofit.RestAdapter.Builder builder84 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler85 = builder84.errorHandler;
        retrofit.client.Client.Provider provider86 = null;
        builder84.clientProvider = provider86;
        retrofit.Server server90 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder91 = builder84.setServer(server90);
        retrofit.converter.Converter converter92 = null;
        builder91.converter = converter92;
        retrofit.RestAdapter restAdapter94 = builder91.build();
        java.util.concurrent.Executor executor95 = restAdapter94.httpExecutor;
        restAdapter33.callbackExecutor = executor95;
        restAdapter31.callbackExecutor = executor95;
        retrofit.RestAdapter.RestHandler restHandler98 = restAdapter31.new RestHandler();
        org.junit.Assert.assertNull(provider1);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(restAdapter31);
        org.junit.Assert.assertNull(executor34);
        org.junit.Assert.assertNull(executor36);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNull(profiler46);
        org.junit.Assert.assertNull(logLevel53);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(executor60);
        org.junit.Assert.assertNull(executor61);
        org.junit.Assert.assertNull(errorHandler63);
        org.junit.Assert.assertNotNull(log69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(restAdapter80);
        org.junit.Assert.assertNotNull(errorHandler81);
        org.junit.Assert.assertNull(requestInterceptor83);
        org.junit.Assert.assertNull(errorHandler85);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(restAdapter94);
        org.junit.Assert.assertNotNull(executor95);
    }

    @Test
    public void test02502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02502");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        restAdapter12.log = log14;
        retrofit.converter.Converter converter16 = restAdapter12.converter;
        java.util.concurrent.Executor executor17 = restAdapter12.callbackExecutor;
        retrofit.Profiler profiler18 = null;
        restAdapter12.profiler = profiler18;
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(executor17);
    }

    @Test
    public void test02503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02503");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.converter.Converter converter4 = builder0.converter;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler6 = builder5.errorHandler;
        retrofit.RequestInterceptor requestInterceptor7 = null;
        builder5.requestInterceptor = requestInterceptor7;
        retrofit.Server server9 = null;
        retrofit.client.Client.Provider provider10 = null;
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        retrofit.converter.Converter converter14 = null;
        retrofit.Profiler profiler15 = null;
        retrofit.ErrorHandler errorHandler16 = null;
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        log17.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter(server9, provider10, executor11, executor12, requestInterceptor13, converter14, profiler15, errorHandler16, log17, logLevel20);
        builder5.log = log17;
        retrofit.Server server23 = null;
        retrofit.client.Client.Provider provider24 = null;
        java.util.concurrent.Executor executor25 = null;
        java.util.concurrent.Executor executor26 = null;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        retrofit.converter.Converter converter28 = null;
        retrofit.Profiler profiler29 = null;
        retrofit.ErrorHandler errorHandler30 = null;
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        log31.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server23, provider24, executor25, executor26, requestInterceptor27, converter28, profiler29, errorHandler30, log31, logLevel34);
        retrofit.RestAdapter.RestHandler restHandler36 = restAdapter35.new RestHandler();
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        restAdapter35.log = log37;
        log37.log("default");
        builder5.log = log37;
        retrofit.RestAdapter.Builder builder42 = builder0.setLog(log37);
        log37.log("");
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test02504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02504");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.ErrorHandler errorHandler3 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel6 = builder0.logLevel;
        retrofit.RestAdapter.Log log7 = builder0.log;
        retrofit.ErrorHandler errorHandler8 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder10 = builder0.setServer("default");
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        log19.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log19, logLevel22);
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter23.new RestHandler();
        retrofit.RestAdapter.Log log25 = retrofit.RestAdapter.Log.NONE;
        restAdapter23.log = log25;
        retrofit.converter.Converter converter27 = null;
        restAdapter23.converter = converter27;
        retrofit.RestAdapter.LogLevel logLevel29 = restAdapter23.getLogLevel();
        retrofit.ErrorHandler errorHandler30 = restAdapter23.errorHandler;
        retrofit.Profiler profiler31 = restAdapter23.profiler;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler33 = null;
        builder32.errorHandler = errorHandler33;
        retrofit.ErrorHandler errorHandler35 = builder32.errorHandler;
        retrofit.RestAdapter.Builder builder37 = builder32.setServer("hi!");
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler39 = builder38.errorHandler;
        retrofit.ErrorHandler errorHandler40 = builder38.errorHandler;
        retrofit.Profiler profiler41 = builder38.profiler;
        retrofit.RestAdapter.Log log42 = builder38.log;
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.FULL;
        builder38.logLevel = logLevel43;
        retrofit.RestAdapter.Builder builder45 = builder37.setLogLevel(logLevel43);
        retrofit.Server server46 = null;
        retrofit.client.Client.Provider provider47 = null;
        java.util.concurrent.Executor executor48 = null;
        java.util.concurrent.Executor executor49 = null;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        retrofit.converter.Converter converter51 = null;
        retrofit.Profiler profiler52 = null;
        retrofit.ErrorHandler errorHandler53 = null;
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        log54.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter(server46, provider47, executor48, executor49, requestInterceptor50, converter51, profiler52, errorHandler53, log54, logLevel57);
        log54.log("");
        retrofit.RestAdapter.Builder builder61 = builder45.setLog(log54);
        restAdapter23.log = log54;
        retrofit.RestAdapter.RestHandler restHandler63 = restAdapter23.new RestHandler();
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.Server server67 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder68 = builder64.setServer(server67);
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor70 = restAdapter69.callbackExecutor;
        java.util.concurrent.Executor executor71 = restAdapter69.callbackExecutor;
        retrofit.RestAdapter restAdapter72 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler73 = restAdapter72.errorHandler;
        retrofit.Server server76 = new retrofit.Server("", "");
        restAdapter72.server = server76;
        restAdapter69.server = server76;
        retrofit.RestAdapter.Log log79 = retrofit.RestAdapter.Log.NONE;
        restAdapter69.log = log79;
        retrofit.RestAdapter.Builder builder81 = builder68.setLog(log79);
        restAdapter23.log = log79;
        retrofit.Server server83 = restAdapter23.server;
        retrofit.RestAdapter.LogLevel logLevel84 = restAdapter23.logLevel;
        builder10.logLevel = logLevel84;
        retrofit.Server server86 = builder10.server;
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log25);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler30);
        org.junit.Assert.assertNull(profiler31);
        org.junit.Assert.assertNull(errorHandler35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNull(profiler41);
        org.junit.Assert.assertNull(log42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNull(executor70);
        org.junit.Assert.assertNull(executor71);
        org.junit.Assert.assertNull(errorHandler73);
        org.junit.Assert.assertNotNull(log79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNull(server83);
        org.junit.Assert.assertTrue("'" + logLevel84 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel84.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(server86);
    }

    @Test
    public void test02505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02505");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter0.getLogLevel();
        retrofit.client.Client.Provider provider20 = null;
        restAdapter0.clientProvider = provider20;
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter0.logLevel;
        retrofit.RestAdapter.RestHandler restHandler23 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter0.logLevel;
        retrofit.client.Client.Provider provider25 = restAdapter0.clientProvider;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(logLevel22);
        org.junit.Assert.assertNull(logLevel24);
        org.junit.Assert.assertNull(provider25);
    }

    @Test
    public void test02506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02506");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.Server server5 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder6 = builder2.setServer(server5);
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor8 = restAdapter7.callbackExecutor;
        java.util.concurrent.Executor executor9 = restAdapter7.callbackExecutor;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.Server server14 = new retrofit.Server("", "");
        restAdapter10.server = server14;
        restAdapter7.server = server14;
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        restAdapter7.log = log17;
        retrofit.RestAdapter.Builder builder19 = builder6.setLog(log17);
        retrofit.RestAdapter.Builder builder20 = builder0.setLog(log17);
        retrofit.RestAdapter.Log log21 = builder20.log;
        retrofit.Profiler profiler22 = null;
        builder20.profiler = profiler22;
        retrofit.Profiler profiler24 = builder20.profiler;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler26 = builder25.errorHandler;
        retrofit.client.Client.Provider provider27 = null;
        builder25.clientProvider = provider27;
        retrofit.Server server31 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder32 = builder25.setServer(server31);
        retrofit.converter.Converter converter33 = null;
        builder32.converter = converter33;
        retrofit.RestAdapter restAdapter35 = builder32.build();
        java.util.List<retrofit.client.Header> headerList38 = null;
        retrofit.mime.TypedOutput typedOutput39 = null;
        retrofit.client.Request request40 = new retrofit.client.Request("", "hi!", headerList38, typedOutput39);
        java.lang.String str41 = request40.getUrl();
        retrofit.client.Request request42 = restAdapter35.logAndReplaceRequest(request40);
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor44 = restAdapter43.callbackExecutor;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor46 = restAdapter45.callbackExecutor;
        java.util.concurrent.Executor executor47 = restAdapter45.callbackExecutor;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler49 = restAdapter48.errorHandler;
        retrofit.Server server52 = new retrofit.Server("", "");
        restAdapter48.server = server52;
        restAdapter45.server = server52;
        restAdapter43.server = server52;
        retrofit.Profiler profiler56 = restAdapter43.profiler;
        retrofit.ErrorHandler errorHandler57 = null;
        restAdapter43.errorHandler = errorHandler57;
        retrofit.Profiler profiler59 = null;
        restAdapter43.profiler = profiler59;
        retrofit.RestAdapter.LogLevel logLevel61 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel62 = restAdapter43.getLogLevel();
        retrofit.ErrorHandler errorHandler63 = null;
        restAdapter43.errorHandler = errorHandler63;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler66 = builder65.errorHandler;
        retrofit.client.Client.Provider provider67 = null;
        builder65.clientProvider = provider67;
        retrofit.Server server71 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder72 = builder65.setServer(server71);
        retrofit.converter.Converter converter73 = null;
        builder72.converter = converter73;
        retrofit.RestAdapter restAdapter75 = builder72.build();
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler77 = builder76.errorHandler;
        java.util.concurrent.Executor executor78 = null;
        builder76.callbackExecutor = executor78;
        retrofit.RestAdapter.Builder builder80 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider81 = builder80.clientProvider;
        java.util.concurrent.Executor executor82 = null;
        builder80.callbackExecutor = executor82;
        retrofit.RestAdapter.Builder builder84 = new retrofit.RestAdapter.Builder();
        retrofit.Server server87 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder88 = builder84.setServer(server87);
        java.lang.String str89 = server87.getUrl();
        retrofit.RestAdapter.Builder builder90 = builder80.setServer(server87);
        retrofit.RestAdapter.Builder builder91 = builder76.setServer(server87);
        restAdapter75.server = server87;
        retrofit.client.Client.Provider provider93 = restAdapter75.clientProvider;
        restAdapter43.clientProvider = provider93;
        restAdapter35.clientProvider = provider93;
        retrofit.ErrorHandler errorHandler96 = restAdapter35.errorHandler;
        builder20.errorHandler = errorHandler96;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertNull(profiler24);
        org.junit.Assert.assertNull(errorHandler26);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(restAdapter35);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNotNull(request42);
        org.junit.Assert.assertNull(executor44);
        org.junit.Assert.assertNull(executor46);
        org.junit.Assert.assertNull(executor47);
        org.junit.Assert.assertNull(errorHandler49);
        org.junit.Assert.assertNull(profiler56);
        org.junit.Assert.assertNull(logLevel61);
        org.junit.Assert.assertNull(logLevel62);
        org.junit.Assert.assertNull(errorHandler66);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(restAdapter75);
        org.junit.Assert.assertNull(errorHandler77);
        org.junit.Assert.assertNull(provider81);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "hi!" + "'", str89, "hi!");
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(provider93);
        org.junit.Assert.assertNotNull(errorHandler96);
    }

    @Test
    public void test02507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02507");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        java.util.List<retrofit.client.Header> headerList11 = request10.getHeaders();
        java.util.List<retrofit.client.Header> headerList12 = request10.getHeaders();
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("hi!", "hi!", headerList12, typedOutput13);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("default", "hi!", headerList12, typedOutput15);
        java.lang.String str17 = request16.getMethod();
        java.lang.String str18 = request16.getMethod();
        java.lang.String str19 = request16.getMethod();
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(headerList11);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "default" + "'", str17, "default");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "default" + "'", str18, "default");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "default" + "'", str19, "default");
    }

    @Test
    public void test02508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02508");
        retrofit.client.Header[] headerArray12 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList13 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList13, headerArray12);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList13, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList13, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList13, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList13, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList13, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("default", "default", (java.util.List<retrofit.client.Header>) headerList13, typedOutput25);
        java.util.List<retrofit.client.Header> headerList27 = request26.getHeaders();
        org.junit.Assert.assertNotNull(headerArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(headerList27);
    }

    @Test
    public void test02509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02509");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server4 = new retrofit.Server("", "");
        builder0.server = server4;
        java.util.concurrent.Executor executor6 = builder0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel7 = null;
        builder0.logLevel = logLevel7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler10 = builder9.errorHandler;
        retrofit.client.Client.Provider provider11 = null;
        builder9.clientProvider = provider11;
        retrofit.Server server15 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder16 = builder9.setServer(server15);
        retrofit.converter.Converter converter17 = null;
        builder16.converter = converter17;
        retrofit.RestAdapter restAdapter19 = builder16.build();
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler21 = builder20.errorHandler;
        java.util.concurrent.Executor executor22 = null;
        builder20.callbackExecutor = executor22;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider25 = builder24.clientProvider;
        java.util.concurrent.Executor executor26 = null;
        builder24.callbackExecutor = executor26;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.Server server31 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder32 = builder28.setServer(server31);
        java.lang.String str33 = server31.getUrl();
        retrofit.RestAdapter.Builder builder34 = builder24.setServer(server31);
        retrofit.RestAdapter.Builder builder35 = builder20.setServer(server31);
        restAdapter19.server = server31;
        java.util.concurrent.Executor executor37 = restAdapter19.httpExecutor;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler39 = builder38.errorHandler;
        retrofit.Server server42 = new retrofit.Server("", "");
        builder38.server = server42;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        builder38.log = log44;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler47 = builder46.errorHandler;
        retrofit.client.Client.Provider provider48 = null;
        builder46.clientProvider = provider48;
        retrofit.Server server52 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder53 = builder46.setServer(server52);
        retrofit.converter.Converter converter54 = null;
        builder53.converter = converter54;
        retrofit.RestAdapter restAdapter56 = builder53.build();
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler58 = builder57.errorHandler;
        java.util.concurrent.Executor executor59 = null;
        builder57.callbackExecutor = executor59;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider62 = builder61.clientProvider;
        java.util.concurrent.Executor executor63 = null;
        builder61.callbackExecutor = executor63;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.Server server68 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder69 = builder65.setServer(server68);
        java.lang.String str70 = server68.getUrl();
        retrofit.RestAdapter.Builder builder71 = builder61.setServer(server68);
        retrofit.RestAdapter.Builder builder72 = builder57.setServer(server68);
        restAdapter56.server = server68;
        java.util.concurrent.Executor executor74 = restAdapter56.httpExecutor;
        builder38.httpExecutor = executor74;
        retrofit.RestAdapter.Builder builder76 = builder0.setExecutors(executor37, executor74);
        retrofit.converter.Converter converter77 = builder76.converter;
        retrofit.RequestInterceptor requestInterceptor78 = builder76.requestInterceptor;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(restAdapter19);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(provider25);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(executor37);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNull(errorHandler47);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(restAdapter56);
        org.junit.Assert.assertNull(errorHandler58);
        org.junit.Assert.assertNull(provider62);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hi!" + "'", str70, "hi!");
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(executor74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNull(converter77);
        org.junit.Assert.assertNull(requestInterceptor78);
    }

    @Test
    public void test02510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02510");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter0.getLogLevel();
        retrofit.ErrorHandler errorHandler20 = null;
        restAdapter0.errorHandler = errorHandler20;
        retrofit.client.Client.Provider provider22 = null;
        restAdapter0.clientProvider = provider22;
        retrofit.ErrorHandler errorHandler24 = restAdapter0.errorHandler;
        retrofit.Server server25 = restAdapter0.server;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler27 = builder26.errorHandler;
        retrofit.ErrorHandler errorHandler28 = builder26.errorHandler;
        retrofit.RestAdapter.Log log29 = null;
        builder26.log = log29;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean32 = logLevel31.log();
        builder26.logLevel = logLevel31;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler35 = restAdapter34.new RestHandler();
        java.util.concurrent.Executor executor36 = null;
        restAdapter34.callbackExecutor = executor36;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor39 = restAdapter38.callbackExecutor;
        java.util.concurrent.Executor executor40 = restAdapter38.callbackExecutor;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler42 = restAdapter41.errorHandler;
        retrofit.Server server45 = new retrofit.Server("", "");
        restAdapter41.server = server45;
        restAdapter38.server = server45;
        restAdapter34.server = server45;
        retrofit.RestAdapter.Builder builder49 = builder26.setServer(server45);
        restAdapter0.server = server45;
        retrofit.Server server51 = restAdapter0.server;
        retrofit.Profiler profiler52 = restAdapter0.profiler;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNotNull(server25);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNull(executor40);
        org.junit.Assert.assertNull(errorHandler42);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(server51);
        org.junit.Assert.assertNull(profiler52);
    }

    @Test
    public void test02511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02511");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean3 = logLevel2.log();
        restAdapter0.logLevel = logLevel2;
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter0.getLogLevel();
        retrofit.Profiler profiler6 = restAdapter0.profiler;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider8 = builder7.clientProvider;
        java.util.concurrent.Executor executor9 = null;
        builder7.callbackExecutor = executor9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.Server server14 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder15 = builder11.setServer(server14);
        java.lang.String str16 = server14.getUrl();
        retrofit.RestAdapter.Builder builder17 = builder7.setServer(server14);
        builder7.ensureSaneDefaults();
        retrofit.Server server19 = null;
        retrofit.client.Client.Provider provider20 = null;
        java.util.concurrent.Executor executor21 = null;
        java.util.concurrent.Executor executor22 = null;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        retrofit.converter.Converter converter24 = null;
        retrofit.Profiler profiler25 = null;
        retrofit.ErrorHandler errorHandler26 = null;
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        log27.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter(server19, provider20, executor21, executor22, requestInterceptor23, converter24, profiler25, errorHandler26, log27, logLevel30);
        retrofit.RestAdapter.RestHandler restHandler32 = restAdapter31.new RestHandler();
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        restAdapter31.log = log33;
        retrofit.RestAdapter.Builder builder35 = builder7.setLog(log33);
        retrofit.RestAdapter.Builder builder37 = builder7.setServer("hi!");
        retrofit.Profiler profiler38 = null;
        builder7.profiler = profiler38;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler41 = restAdapter40.new RestHandler();
        retrofit.client.Client.Provider provider42 = restAdapter40.clientProvider;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler44 = builder43.errorHandler;
        retrofit.Server server47 = new retrofit.Server("", "");
        builder43.server = server47;
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        builder43.log = log49;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler52 = builder51.errorHandler;
        retrofit.client.Client.Provider provider53 = null;
        builder51.clientProvider = provider53;
        retrofit.Server server57 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder58 = builder51.setServer(server57);
        retrofit.converter.Converter converter59 = null;
        builder58.converter = converter59;
        retrofit.RestAdapter restAdapter61 = builder58.build();
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler63 = builder62.errorHandler;
        java.util.concurrent.Executor executor64 = null;
        builder62.callbackExecutor = executor64;
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider67 = builder66.clientProvider;
        java.util.concurrent.Executor executor68 = null;
        builder66.callbackExecutor = executor68;
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        retrofit.Server server73 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder74 = builder70.setServer(server73);
        java.lang.String str75 = server73.getUrl();
        retrofit.RestAdapter.Builder builder76 = builder66.setServer(server73);
        retrofit.RestAdapter.Builder builder77 = builder62.setServer(server73);
        restAdapter61.server = server73;
        java.util.concurrent.Executor executor79 = restAdapter61.httpExecutor;
        builder43.httpExecutor = executor79;
        restAdapter40.callbackExecutor = executor79;
        builder7.callbackExecutor = executor79;
        restAdapter0.httpExecutor = executor79;
        retrofit.Profiler profiler84 = null;
        restAdapter0.profiler = profiler84;
        retrofit.RestAdapter.Log log86 = null;
        restAdapter0.log = log86;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler6);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(provider42);
        org.junit.Assert.assertNull(errorHandler44);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertNull(errorHandler52);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(restAdapter61);
        org.junit.Assert.assertNull(errorHandler63);
        org.junit.Assert.assertNull(provider67);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "hi!" + "'", str75, "hi!");
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(executor79);
    }

    @Test
    public void test02512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02512");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter0.getLogLevel();
        retrofit.client.Client.Provider provider20 = null;
        restAdapter0.clientProvider = provider20;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean23 = logLevel22.log();
        restAdapter0.logLevel = logLevel22;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        restAdapter0.requestInterceptor = requestInterceptor25;
        retrofit.RestAdapter.Log log27 = restAdapter0.log;
        retrofit.Server server28 = restAdapter0.server;
        retrofit.ErrorHandler errorHandler29 = restAdapter0.errorHandler;
        retrofit.ErrorHandler errorHandler30 = restAdapter0.errorHandler;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(log27);
        org.junit.Assert.assertNotNull(server28);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNull(errorHandler30);
    }

    @Test
    public void test02513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02513");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.RestAdapter restAdapter3 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor4 = restAdapter3.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        restAdapter3.server = server12;
        retrofit.Profiler profiler16 = restAdapter3.profiler;
        retrofit.ErrorHandler errorHandler17 = restAdapter3.errorHandler;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler19 = builder18.errorHandler;
        retrofit.ErrorHandler errorHandler20 = builder18.errorHandler;
        java.util.concurrent.Executor executor21 = builder18.callbackExecutor;
        java.util.concurrent.Executor executor22 = null;
        builder18.callbackExecutor = executor22;
        retrofit.Server server24 = null;
        retrofit.client.Client.Provider provider25 = null;
        java.util.concurrent.Executor executor26 = null;
        java.util.concurrent.Executor executor27 = null;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        retrofit.converter.Converter converter29 = null;
        retrofit.Profiler profiler30 = null;
        retrofit.ErrorHandler errorHandler31 = null;
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        log32.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter(server24, provider25, executor26, executor27, requestInterceptor28, converter29, profiler30, errorHandler31, log32, logLevel35);
        builder18.log = log32;
        restAdapter3.log = log32;
        log32.log("default");
        builder0.log = log32;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler43 = builder42.errorHandler;
        retrofit.ErrorHandler errorHandler44 = builder42.errorHandler;
        retrofit.Profiler profiler45 = builder42.profiler;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor47 = restAdapter46.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler48 = restAdapter46.new RestHandler();
        retrofit.Server server51 = new retrofit.Server("hi!", "hi!");
        restAdapter46.server = server51;
        retrofit.RestAdapter.Builder builder53 = builder42.setServer(server51);
        retrofit.converter.Converter converter54 = null;
        builder53.converter = converter54;
        builder53.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter57 = builder53.build();
        retrofit.RequestInterceptor requestInterceptor58 = builder53.requestInterceptor;
        retrofit.RestAdapter.Builder builder59 = builder0.setRequestInterceptor(requestInterceptor58);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter60 = builder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNull(profiler16);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler43);
        org.junit.Assert.assertNull(errorHandler44);
        org.junit.Assert.assertNull(profiler45);
        org.junit.Assert.assertNull(executor47);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(restAdapter57);
        org.junit.Assert.assertNotNull(requestInterceptor58);
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test02514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02514");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("default", "hi!", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.lang.String str7 = request6.getUrl();
        retrofit.mime.TypedOutput typedOutput8 = request6.getBody();
        retrofit.mime.TypedOutput typedOutput9 = request6.getBody();
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNull(typedOutput8);
        org.junit.Assert.assertNull(typedOutput9);
    }

    @Test
    public void test02515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02515");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter0.requestInterceptor;
        retrofit.ErrorHandler errorHandler17 = restAdapter0.errorHandler;
        java.util.concurrent.Executor executor18 = null;
        restAdapter0.callbackExecutor = executor18;
        java.util.concurrent.Executor executor20 = restAdapter0.httpExecutor;
        retrofit.converter.Converter converter21 = null;
        restAdapter0.converter = converter21;
        retrofit.Profiler profiler23 = null;
        restAdapter0.profiler = profiler23;
        retrofit.client.Client.Provider provider25 = restAdapter0.clientProvider;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(provider25);
    }

    @Test
    public void test02516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02516");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        restAdapter5.log = log15;
        retrofit.RestAdapter.Builder builder17 = builder4.setLog(log15);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder19 = builder4.setLogLevel(logLevel18);
        retrofit.RestAdapter.Log log20 = builder4.log;
        retrofit.RestAdapter restAdapter21 = builder4.build();
        retrofit.ErrorHandler errorHandler22 = restAdapter21.errorHandler;
        retrofit.client.Response response24 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response26 = restAdapter21.logAndReplaceResponse("hi!", response24, (long) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(restAdapter21);
        org.junit.Assert.assertNotNull(errorHandler22);
    }

    @Test
    public void test02517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02517");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server6 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder7 = builder0.setServer(server6);
        retrofit.converter.Converter converter8 = null;
        builder7.converter = converter8;
        retrofit.RestAdapter restAdapter10 = builder7.build();
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler12 = builder11.errorHandler;
        java.util.concurrent.Executor executor13 = null;
        builder11.callbackExecutor = executor13;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider16 = builder15.clientProvider;
        java.util.concurrent.Executor executor17 = null;
        builder15.callbackExecutor = executor17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.Server server22 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder23 = builder19.setServer(server22);
        java.lang.String str24 = server22.getUrl();
        retrofit.RestAdapter.Builder builder25 = builder15.setServer(server22);
        retrofit.RestAdapter.Builder builder26 = builder11.setServer(server22);
        restAdapter10.server = server22;
        retrofit.client.Client.Provider provider28 = restAdapter10.clientProvider;
        retrofit.RestAdapter.RestHandler restHandler29 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler31 = builder30.errorHandler;
        java.util.concurrent.Executor executor32 = null;
        builder30.callbackExecutor = executor32;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider35 = builder34.clientProvider;
        java.util.concurrent.Executor executor36 = null;
        builder34.callbackExecutor = executor36;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.Server server41 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder42 = builder38.setServer(server41);
        java.lang.String str43 = server41.getUrl();
        retrofit.RestAdapter.Builder builder44 = builder34.setServer(server41);
        retrofit.RestAdapter.Builder builder45 = builder30.setServer(server41);
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider47 = builder46.clientProvider;
        java.util.concurrent.Executor executor48 = null;
        builder46.callbackExecutor = executor48;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.Server server53 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder54 = builder50.setServer(server53);
        java.lang.String str55 = server53.getUrl();
        retrofit.RestAdapter.Builder builder56 = builder46.setServer(server53);
        builder46.ensureSaneDefaults();
        retrofit.Server server58 = null;
        retrofit.client.Client.Provider provider59 = null;
        java.util.concurrent.Executor executor60 = null;
        java.util.concurrent.Executor executor61 = null;
        retrofit.RequestInterceptor requestInterceptor62 = null;
        retrofit.converter.Converter converter63 = null;
        retrofit.Profiler profiler64 = null;
        retrofit.ErrorHandler errorHandler65 = null;
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        log66.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel69 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter(server58, provider59, executor60, executor61, requestInterceptor62, converter63, profiler64, errorHandler65, log66, logLevel69);
        retrofit.RestAdapter.RestHandler restHandler71 = restAdapter70.new RestHandler();
        retrofit.RestAdapter.Log log72 = retrofit.RestAdapter.Log.NONE;
        restAdapter70.log = log72;
        retrofit.RestAdapter.Builder builder74 = builder46.setLog(log72);
        retrofit.RestAdapter.LogLevel logLevel75 = builder46.logLevel;
        retrofit.RestAdapter.Builder builder76 = builder45.setLogLevel(logLevel75);
        retrofit.Server server77 = builder76.server;
        restAdapter10.server = server77;
        java.util.List<retrofit.client.Header> headerList81 = null;
        retrofit.mime.TypedOutput typedOutput82 = null;
        retrofit.client.Request request83 = new retrofit.client.Request("", "", headerList81, typedOutput82);
        retrofit.client.Request request84 = restAdapter10.logAndReplaceRequest(request83);
        retrofit.client.Response response86 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response88 = restAdapter10.logAndReplaceResponse("default", response86, (long) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(restAdapter10);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(provider16);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(provider28);
        org.junit.Assert.assertNull(errorHandler31);
        org.junit.Assert.assertNull(provider35);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(provider47);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(log66);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(server77);
        org.junit.Assert.assertNotNull(request84);
    }

    @Test
    public void test02518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02518");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        restAdapter5.log = log15;
        retrofit.RestAdapter.Builder builder17 = builder4.setLog(log15);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder19 = builder4.setLogLevel(logLevel18);
        retrofit.Profiler profiler20 = null;
        builder19.profiler = profiler20;
        java.util.concurrent.Executor executor22 = null;
        builder19.httpExecutor = executor22;
        retrofit.RestAdapter restAdapter24 = builder19.build();
        retrofit.client.Client.Provider provider25 = restAdapter24.clientProvider;
        retrofit.converter.Converter converter26 = restAdapter24.converter;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.Server server28 = builder27.server;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler30 = builder29.errorHandler;
        retrofit.ErrorHandler errorHandler31 = builder29.errorHandler;
        retrofit.RestAdapter.Log log32 = null;
        builder29.log = log32;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        builder29.requestInterceptor = requestInterceptor34;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor37 = restAdapter36.callbackExecutor;
        java.util.concurrent.Executor executor38 = restAdapter36.callbackExecutor;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler40 = restAdapter39.errorHandler;
        retrofit.Server server43 = new retrofit.Server("", "");
        restAdapter39.server = server43;
        restAdapter36.server = server43;
        retrofit.RestAdapter.Builder builder46 = builder29.setServer(server43);
        retrofit.RequestInterceptor requestInterceptor47 = null;
        builder29.requestInterceptor = requestInterceptor47;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler50 = builder49.errorHandler;
        retrofit.ErrorHandler errorHandler51 = builder49.errorHandler;
        retrofit.RestAdapter.Log log52 = null;
        builder49.log = log52;
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean55 = logLevel54.log();
        builder49.logLevel = logLevel54;
        retrofit.RestAdapter.Builder builder57 = builder29.setLogLevel(logLevel54);
        builder27.logLevel = logLevel54;
        retrofit.ErrorHandler errorHandler59 = builder27.errorHandler;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler61 = builder60.errorHandler;
        retrofit.ErrorHandler errorHandler62 = builder60.errorHandler;
        retrofit.Profiler profiler63 = builder60.profiler;
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor65 = restAdapter64.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler66 = restAdapter64.new RestHandler();
        retrofit.Server server69 = new retrofit.Server("hi!", "hi!");
        restAdapter64.server = server69;
        retrofit.RestAdapter.Builder builder71 = builder60.setServer(server69);
        retrofit.converter.Converter converter72 = null;
        builder71.converter = converter72;
        retrofit.Profiler profiler74 = null;
        builder71.profiler = profiler74;
        retrofit.RestAdapter restAdapter76 = builder71.build();
        retrofit.client.Header[] headerArray83 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList84 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList84, headerArray83);
        retrofit.mime.TypedOutput typedOutput86 = null;
        retrofit.client.Request request87 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList84, typedOutput86);
        retrofit.mime.TypedOutput typedOutput88 = null;
        retrofit.client.Request request89 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList84, typedOutput88);
        retrofit.mime.TypedOutput typedOutput90 = null;
        retrofit.client.Request request91 = new retrofit.client.Request("", "default", (java.util.List<retrofit.client.Header>) headerList84, typedOutput90);
        retrofit.client.Request request92 = restAdapter76.logAndReplaceRequest(request91);
        retrofit.RestAdapter.RestHandler restHandler93 = restAdapter76.new RestHandler();
        retrofit.Profiler profiler94 = null;
        restAdapter76.profiler = profiler94;
        retrofit.converter.Converter converter96 = restAdapter76.converter;
        builder27.converter = converter96;
        restAdapter24.converter = converter96;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(restAdapter24);
        org.junit.Assert.assertNotNull(provider25);
        org.junit.Assert.assertNotNull(converter26);
        org.junit.Assert.assertNull(server28);
        org.junit.Assert.assertNull(errorHandler30);
        org.junit.Assert.assertNull(errorHandler31);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(errorHandler50);
        org.junit.Assert.assertNull(errorHandler51);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(errorHandler59);
        org.junit.Assert.assertNull(errorHandler61);
        org.junit.Assert.assertNull(errorHandler62);
        org.junit.Assert.assertNull(profiler63);
        org.junit.Assert.assertNull(executor65);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(restAdapter76);
        org.junit.Assert.assertNotNull(headerArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(request92);
        org.junit.Assert.assertNotNull(converter96);
    }

    @Test
    public void test02519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02519");
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        log14.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel17);
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter18.new RestHandler();
        retrofit.client.Header[] headerArray28 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList29 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList29, headerArray28);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList29, typedOutput31);
        retrofit.mime.TypedOutput typedOutput33 = null;
        retrofit.client.Request request34 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList29, typedOutput33);
        retrofit.mime.TypedOutput typedOutput35 = null;
        retrofit.client.Request request36 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList29, typedOutput35);
        retrofit.mime.TypedOutput typedOutput37 = null;
        retrofit.client.Request request38 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList29, typedOutput37);
        retrofit.mime.TypedOutput typedOutput39 = request38.getBody();
        retrofit.client.Request request40 = restAdapter18.logAndReplaceRequest(request38);
        java.util.List<retrofit.client.Header> headerList41 = request38.getHeaders();
        retrofit.mime.TypedOutput typedOutput42 = null;
        retrofit.client.Request request43 = new retrofit.client.Request("", "default", headerList41, typedOutput42);
        retrofit.mime.TypedOutput typedOutput44 = null;
        retrofit.client.Request request45 = new retrofit.client.Request("default", "default", headerList41, typedOutput44);
        retrofit.mime.TypedOutput typedOutput46 = null;
        retrofit.client.Request request47 = new retrofit.client.Request("hi!", "", headerList41, typedOutput46);
        java.lang.String str48 = request47.getUrl();
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(typedOutput39);
        org.junit.Assert.assertNotNull(request40);
        org.junit.Assert.assertNotNull(headerList41);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
    }

    @Test
    public void test02520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02520");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = null;
        restAdapter0.callbackExecutor = executor2;
        retrofit.ErrorHandler errorHandler4 = restAdapter0.errorHandler;
        retrofit.Server server5 = null;
        retrofit.client.Client.Provider provider6 = null;
        java.util.concurrent.Executor executor7 = null;
        java.util.concurrent.Executor executor8 = null;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        retrofit.converter.Converter converter10 = null;
        retrofit.Profiler profiler11 = null;
        retrofit.ErrorHandler errorHandler12 = null;
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        log13.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server5, provider6, executor7, executor8, requestInterceptor9, converter10, profiler11, errorHandler12, log13, logLevel16);
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter17.new RestHandler();
        retrofit.client.Header[] headerArray27 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList28 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList28, headerArray27);
        retrofit.mime.TypedOutput typedOutput30 = null;
        retrofit.client.Request request31 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList28, typedOutput30);
        retrofit.mime.TypedOutput typedOutput32 = null;
        retrofit.client.Request request33 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList28, typedOutput32);
        retrofit.mime.TypedOutput typedOutput34 = null;
        retrofit.client.Request request35 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList28, typedOutput34);
        retrofit.mime.TypedOutput typedOutput36 = null;
        retrofit.client.Request request37 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList28, typedOutput36);
        retrofit.mime.TypedOutput typedOutput38 = request37.getBody();
        retrofit.client.Request request39 = restAdapter17.logAndReplaceRequest(request37);
        retrofit.RestAdapter.RestHandler restHandler40 = restAdapter17.new RestHandler();
        retrofit.client.Client.Provider provider41 = restAdapter17.clientProvider;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler43 = builder42.errorHandler;
        java.util.concurrent.Executor executor44 = builder42.callbackExecutor;
        retrofit.RestAdapter.Builder builder46 = builder42.setServer("hi!");
        builder46.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler49 = builder48.errorHandler;
        retrofit.ErrorHandler errorHandler50 = builder48.errorHandler;
        retrofit.RestAdapter.Log log51 = null;
        builder48.log = log51;
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean54 = logLevel53.log();
        builder48.logLevel = logLevel53;
        retrofit.ErrorHandler errorHandler56 = builder48.errorHandler;
        retrofit.RestAdapter.Builder builder58 = builder48.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor59 = null;
        builder58.requestInterceptor = requestInterceptor59;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler62 = builder61.errorHandler;
        retrofit.client.Client.Provider provider63 = null;
        builder61.clientProvider = provider63;
        retrofit.Server server67 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder68 = builder61.setServer(server67);
        retrofit.client.Client.Provider provider69 = null;
        java.util.concurrent.Executor executor70 = null;
        java.util.concurrent.Executor executor71 = null;
        retrofit.RequestInterceptor requestInterceptor72 = null;
        retrofit.converter.Converter converter73 = null;
        retrofit.Profiler profiler74 = null;
        retrofit.ErrorHandler errorHandler75 = null;
        retrofit.Server server76 = null;
        retrofit.client.Client.Provider provider77 = null;
        java.util.concurrent.Executor executor78 = null;
        java.util.concurrent.Executor executor79 = null;
        retrofit.RequestInterceptor requestInterceptor80 = null;
        retrofit.converter.Converter converter81 = null;
        retrofit.Profiler profiler82 = null;
        retrofit.ErrorHandler errorHandler83 = null;
        retrofit.RestAdapter.Log log84 = retrofit.RestAdapter.Log.NONE;
        log84.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel87 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter88 = new retrofit.RestAdapter(server76, provider77, executor78, executor79, requestInterceptor80, converter81, profiler82, errorHandler83, log84, logLevel87);
        retrofit.RestAdapter.LogLevel logLevel89 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter90 = new retrofit.RestAdapter(server67, provider69, executor70, executor71, requestInterceptor72, converter73, profiler74, errorHandler75, log84, logLevel89);
        log84.log("");
        builder58.log = log84;
        retrofit.RestAdapter.Log log94 = builder58.log;
        retrofit.RestAdapter.Builder builder95 = builder46.setLog(log94);
        retrofit.RequestInterceptor requestInterceptor96 = builder46.requestInterceptor;
        restAdapter17.requestInterceptor = requestInterceptor96;
        restAdapter0.requestInterceptor = requestInterceptor96;
        java.util.concurrent.Executor executor99 = restAdapter0.callbackExecutor;
        org.junit.Assert.assertNull(errorHandler4);
        org.junit.Assert.assertNotNull(log13);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(typedOutput38);
        org.junit.Assert.assertNotNull(request39);
        org.junit.Assert.assertNull(provider41);
        org.junit.Assert.assertNull(errorHandler43);
        org.junit.Assert.assertNull(executor44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(errorHandler49);
        org.junit.Assert.assertNull(errorHandler50);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(errorHandler56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(errorHandler62);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(log84);
        org.junit.Assert.assertTrue("'" + logLevel87 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel87.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel89 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel89.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log94);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(requestInterceptor96);
        org.junit.Assert.assertNull(executor99);
    }

    @Test
    public void test02521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02521");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.Server server5 = builder0.server;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.Server server9 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder10 = builder6.setServer(server9);
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor12 = restAdapter11.callbackExecutor;
        java.util.concurrent.Executor executor13 = restAdapter11.callbackExecutor;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler15 = restAdapter14.errorHandler;
        retrofit.Server server18 = new retrofit.Server("", "");
        restAdapter14.server = server18;
        restAdapter11.server = server18;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        restAdapter11.log = log21;
        retrofit.RestAdapter.Builder builder23 = builder10.setLog(log21);
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder25 = builder10.setLogLevel(logLevel24);
        builder0.logLevel = logLevel24;
        java.util.concurrent.Executor executor27 = builder0.httpExecutor;
        java.util.concurrent.Executor executor28 = builder0.callbackExecutor;
        java.util.concurrent.Executor executor29 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler31 = builder30.errorHandler;
        retrofit.ErrorHandler errorHandler32 = builder30.errorHandler;
        retrofit.Profiler profiler33 = builder30.profiler;
        retrofit.RestAdapter.Log log34 = builder30.log;
        retrofit.RequestInterceptor requestInterceptor35 = builder30.requestInterceptor;
        builder30.ensureSaneDefaults();
        builder30.ensureSaneDefaults();
        retrofit.RestAdapter.LogLevel logLevel38 = builder30.logLevel;
        builder0.logLevel = logLevel38;
        retrofit.RestAdapter.LogLevel logLevel40 = builder0.logLevel;
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        log41.log("hi!");
        log41.log("hi!");
        log41.log("hi!");
        retrofit.RestAdapter.Builder builder48 = builder0.setLog(log41);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(server5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(errorHandler31);
        org.junit.Assert.assertNull(errorHandler32);
        org.junit.Assert.assertNull(profiler33);
        org.junit.Assert.assertNull(log34);
        org.junit.Assert.assertNull(requestInterceptor35);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test02522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02522");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter0.requestInterceptor;
        retrofit.ErrorHandler errorHandler17 = restAdapter0.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter0.new RestHandler();
        retrofit.ErrorHandler errorHandler20 = restAdapter0.errorHandler;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler22 = builder21.errorHandler;
        retrofit.ErrorHandler errorHandler23 = builder21.errorHandler;
        retrofit.RestAdapter.Log log24 = null;
        builder21.log = log24;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean27 = logLevel26.log();
        builder21.logLevel = logLevel26;
        retrofit.ErrorHandler errorHandler29 = builder21.errorHandler;
        retrofit.RestAdapter.Builder builder31 = builder21.setServer("hi!");
        retrofit.Profiler profiler32 = builder31.profiler;
        retrofit.RestAdapter.LogLevel logLevel33 = builder31.logLevel;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.setLogLevel(logLevel33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log level may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(profiler32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test02523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02523");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        restAdapter5.log = log15;
        retrofit.RestAdapter.Builder builder17 = builder4.setLog(log15);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder19 = builder4.setLogLevel(logLevel18);
        retrofit.Profiler profiler20 = null;
        builder19.profiler = profiler20;
        retrofit.converter.Converter converter22 = null;
        builder19.converter = converter22;
        retrofit.ErrorHandler errorHandler24 = null;
        builder19.errorHandler = errorHandler24;
        retrofit.Profiler profiler26 = null;
        builder19.profiler = profiler26;
        java.util.concurrent.Executor executor28 = builder19.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel29 = builder19.logLevel;
        builder19.ensureSaneDefaults();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.FULL));
    }

    @Test
    public void test02524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02524");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server4 = new retrofit.Server("", "");
        builder0.server = server4;
        java.util.concurrent.Executor executor6 = null;
        builder0.httpExecutor = executor6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.Server server11 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder12 = builder8.setServer(server11);
        retrofit.RestAdapter.LogLevel logLevel13 = builder12.logLevel;
        java.util.concurrent.Executor executor14 = builder12.httpExecutor;
        retrofit.RestAdapter restAdapter15 = builder12.build();
        retrofit.Server server16 = builder12.server;
        java.lang.String str17 = server16.getName();
        retrofit.RestAdapter.Builder builder18 = builder0.setServer(server16);
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor20 = restAdapter19.callbackExecutor;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor22 = restAdapter21.callbackExecutor;
        java.util.concurrent.Executor executor23 = restAdapter21.callbackExecutor;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler25 = restAdapter24.errorHandler;
        retrofit.Server server28 = new retrofit.Server("", "");
        restAdapter24.server = server28;
        restAdapter21.server = server28;
        restAdapter19.server = server28;
        retrofit.Profiler profiler32 = restAdapter19.profiler;
        retrofit.ErrorHandler errorHandler33 = null;
        restAdapter19.errorHandler = errorHandler33;
        retrofit.RequestInterceptor requestInterceptor35 = restAdapter19.requestInterceptor;
        retrofit.ErrorHandler errorHandler36 = restAdapter19.errorHandler;
        java.util.concurrent.Executor executor37 = null;
        restAdapter19.callbackExecutor = executor37;
        java.util.concurrent.Executor executor39 = restAdapter19.httpExecutor;
        retrofit.client.Client.Provider provider40 = restAdapter19.clientProvider;
        retrofit.converter.Converter converter41 = restAdapter19.converter;
        retrofit.RestAdapter.RestHandler restHandler42 = restAdapter19.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel43 = restAdapter19.getLogLevel();
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler45 = builder44.errorHandler;
        java.util.concurrent.Executor executor46 = builder44.callbackExecutor;
        retrofit.RestAdapter.Builder builder48 = builder44.setServer("hi!");
        retrofit.Server server51 = new retrofit.Server("default", "hi!");
        java.lang.String str52 = server51.getUrl();
        retrofit.RestAdapter.Builder builder53 = builder48.setServer(server51);
        retrofit.RestAdapter.LogLevel logLevel54 = builder53.logLevel;
        builder53.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler57 = builder56.errorHandler;
        retrofit.RequestInterceptor requestInterceptor58 = null;
        builder56.requestInterceptor = requestInterceptor58;
        java.util.concurrent.Executor executor60 = builder56.httpExecutor;
        retrofit.RestAdapter.Log log61 = retrofit.RestAdapter.Log.NONE;
        log61.log("default");
        builder56.log = log61;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler66 = builder65.errorHandler;
        retrofit.client.Client.Provider provider67 = null;
        builder65.clientProvider = provider67;
        retrofit.Server server71 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder72 = builder65.setServer(server71);
        retrofit.converter.Converter converter73 = null;
        builder72.converter = converter73;
        retrofit.RestAdapter restAdapter75 = builder72.build();
        retrofit.Profiler profiler76 = builder72.profiler;
        retrofit.Profiler profiler77 = builder72.profiler;
        retrofit.client.Client.Provider provider78 = builder72.clientProvider;
        retrofit.RestAdapter.Builder builder79 = builder56.setClient(provider78);
        retrofit.RestAdapter.Builder builder80 = builder53.setClient(provider78);
        retrofit.RestAdapter.Log log81 = builder53.log;
        java.util.concurrent.Executor executor82 = builder53.httpExecutor;
        restAdapter19.httpExecutor = executor82;
        builder18.callbackExecutor = executor82;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNotNull(restAdapter15);
        org.junit.Assert.assertNotNull(server16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNull(errorHandler25);
        org.junit.Assert.assertNull(profiler32);
        org.junit.Assert.assertNull(requestInterceptor35);
        org.junit.Assert.assertNull(errorHandler36);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNull(provider40);
        org.junit.Assert.assertNull(converter41);
        org.junit.Assert.assertNull(logLevel43);
        org.junit.Assert.assertNull(errorHandler45);
        org.junit.Assert.assertNull(executor46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "default" + "'", str52, "default");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler57);
        org.junit.Assert.assertNull(executor60);
        org.junit.Assert.assertNotNull(log61);
        org.junit.Assert.assertNull(errorHandler66);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(restAdapter75);
        org.junit.Assert.assertNull(profiler76);
        org.junit.Assert.assertNull(profiler77);
        org.junit.Assert.assertNotNull(provider78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(log81);
        org.junit.Assert.assertNotNull(executor82);
    }

    @Test
    public void test02525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02525");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server4 = new retrofit.Server("", "");
        builder0.server = server4;
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        builder0.log = log6;
        retrofit.Profiler profiler8 = builder0.profiler;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler10 = null;
        builder9.errorHandler = errorHandler10;
        retrofit.ErrorHandler errorHandler12 = builder9.errorHandler;
        retrofit.RestAdapter.Builder builder14 = builder9.setServer("hi!");
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler16 = builder15.errorHandler;
        retrofit.ErrorHandler errorHandler17 = builder15.errorHandler;
        retrofit.Profiler profiler18 = builder15.profiler;
        retrofit.RestAdapter.Log log19 = builder15.log;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.FULL;
        builder15.logLevel = logLevel20;
        retrofit.RestAdapter.Builder builder22 = builder14.setLogLevel(logLevel20);
        retrofit.Server server25 = new retrofit.Server("hi!", "default");
        retrofit.RestAdapter.Builder builder26 = builder14.setServer(server25);
        retrofit.Server server27 = builder14.server;
        retrofit.Server server28 = builder14.server;
        retrofit.RestAdapter.Builder builder29 = builder0.setServer(server28);
        java.util.concurrent.Executor executor30 = builder29.callbackExecutor;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertNull(profiler8);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(profiler18);
        org.junit.Assert.assertNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(server27);
        org.junit.Assert.assertNotNull(server28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(executor30);
    }

    @Test
    public void test02526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02526");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        restAdapter5.log = log15;
        retrofit.RestAdapter.Builder builder17 = builder4.setLog(log15);
        retrofit.converter.Converter converter18 = null;
        builder17.converter = converter18;
        retrofit.RestAdapter.Builder builder21 = builder17.setServer("hi!");
        retrofit.converter.Converter converter22 = builder17.converter;
        retrofit.client.Client client23 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder24 = builder17.setClient(client23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(converter22);
    }

    @Test
    public void test02527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02527");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.Profiler profiler3 = builder0.profiler;
        retrofit.RestAdapter.Log log4 = builder0.log;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.FULL;
        builder0.logLevel = logLevel5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler8 = builder7.errorHandler;
        java.util.concurrent.Executor executor9 = null;
        builder7.callbackExecutor = executor9;
        java.util.concurrent.Executor executor11 = null;
        builder7.httpExecutor = executor11;
        retrofit.Profiler profiler13 = null;
        builder7.profiler = profiler13;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler16 = builder15.errorHandler;
        retrofit.Server server19 = new retrofit.Server("", "");
        builder15.server = server19;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler29 = builder28.errorHandler;
        retrofit.Server server32 = new retrofit.Server("", "");
        builder28.server = server32;
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        builder28.log = log34;
        retrofit.Server server36 = null;
        retrofit.client.Client.Provider provider37 = null;
        java.util.concurrent.Executor executor38 = null;
        java.util.concurrent.Executor executor39 = null;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        retrofit.converter.Converter converter41 = null;
        retrofit.Profiler profiler42 = null;
        retrofit.ErrorHandler errorHandler43 = null;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        log44.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter(server36, provider37, executor38, executor39, requestInterceptor40, converter41, profiler42, errorHandler43, log44, logLevel47);
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server19, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log34, logLevel47);
        retrofit.RestAdapter.Builder builder50 = builder7.setLogLevel(logLevel47);
        retrofit.RestAdapter.Builder builder51 = builder0.setLogLevel(logLevel47);
        retrofit.ErrorHandler errorHandler52 = builder51.errorHandler;
        retrofit.Server server53 = null;
        builder51.server = server53;
        retrofit.Server server55 = builder51.server;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(errorHandler52);
        org.junit.Assert.assertNull(server55);
    }

    @Test
    public void test02528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02528");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = builder0.clientProvider;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server7 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder8 = builder4.setServer(server7);
        java.lang.String str9 = server7.getUrl();
        retrofit.RestAdapter.Builder builder10 = builder0.setServer(server7);
        builder0.ensureSaneDefaults();
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        log20.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel23);
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter24.new RestHandler();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        restAdapter24.log = log26;
        retrofit.RestAdapter.Builder builder28 = builder0.setLog(log26);
        retrofit.RequestInterceptor requestInterceptor29 = builder28.requestInterceptor;
        org.junit.Assert.assertNull(provider1);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(requestInterceptor29);
    }

    @Test
    public void test02529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02529");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter3 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler4 = restAdapter3.errorHandler;
        retrofit.Server server7 = new retrofit.Server("", "");
        restAdapter3.server = server7;
        restAdapter0.server = server7;
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter0.logLevel;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        restAdapter0.requestInterceptor = requestInterceptor11;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter0.getLogLevel();
        retrofit.client.Header[] headerArray26 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList27 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList27, headerArray26);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("hi!", "default", (java.util.List<retrofit.client.Header>) headerList27, typedOutput29);
        java.util.List<retrofit.client.Header> headerList31 = request30.getHeaders();
        retrofit.mime.TypedOutput typedOutput32 = null;
        retrofit.client.Request request33 = new retrofit.client.Request("default", "hi!", headerList31, typedOutput32);
        retrofit.mime.TypedOutput typedOutput34 = null;
        retrofit.client.Request request35 = new retrofit.client.Request("", "", headerList31, typedOutput34);
        retrofit.mime.TypedOutput typedOutput36 = null;
        retrofit.client.Request request37 = new retrofit.client.Request("default", "default", headerList31, typedOutput36);
        retrofit.mime.TypedOutput typedOutput38 = null;
        retrofit.client.Request request39 = new retrofit.client.Request("default", "", headerList31, typedOutput38);
        retrofit.mime.TypedOutput typedOutput40 = null;
        retrofit.client.Request request41 = new retrofit.client.Request("hi!", "hi!", headerList31, typedOutput40);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request42 = restAdapter0.logAndReplaceRequest(request41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(errorHandler4);
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNotNull(headerArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(headerList31);
    }

    @Test
    public void test02530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02530");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.Profiler profiler3 = builder0.profiler;
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor5 = restAdapter4.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.Server server9 = new retrofit.Server("hi!", "hi!");
        restAdapter4.server = server9;
        retrofit.RestAdapter.Builder builder11 = builder0.setServer(server9);
        retrofit.converter.Converter converter12 = null;
        builder11.converter = converter12;
        builder11.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter15 = builder11.build();
        retrofit.Profiler profiler16 = restAdapter15.profiler;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler18 = null;
        builder17.errorHandler = errorHandler18;
        retrofit.ErrorHandler errorHandler20 = builder17.errorHandler;
        retrofit.RestAdapter.Builder builder22 = builder17.setServer("hi!");
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler24 = builder23.errorHandler;
        retrofit.ErrorHandler errorHandler25 = builder23.errorHandler;
        retrofit.Profiler profiler26 = builder23.profiler;
        retrofit.RestAdapter.Log log27 = builder23.log;
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.FULL;
        builder23.logLevel = logLevel28;
        retrofit.RestAdapter.Builder builder30 = builder22.setLogLevel(logLevel28);
        retrofit.Server server31 = null;
        retrofit.client.Client.Provider provider32 = null;
        java.util.concurrent.Executor executor33 = null;
        java.util.concurrent.Executor executor34 = null;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        retrofit.converter.Converter converter36 = null;
        retrofit.Profiler profiler37 = null;
        retrofit.ErrorHandler errorHandler38 = null;
        retrofit.RestAdapter.Log log39 = retrofit.RestAdapter.Log.NONE;
        log39.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter(server31, provider32, executor33, executor34, requestInterceptor35, converter36, profiler37, errorHandler38, log39, logLevel42);
        log39.log("");
        retrofit.RestAdapter.Builder builder46 = builder30.setLog(log39);
        retrofit.Profiler profiler47 = null;
        builder46.profiler = profiler47;
        retrofit.Server server49 = null;
        retrofit.client.Client.Provider provider50 = null;
        java.util.concurrent.Executor executor51 = null;
        java.util.concurrent.Executor executor52 = null;
        retrofit.RequestInterceptor requestInterceptor53 = null;
        retrofit.converter.Converter converter54 = null;
        retrofit.Profiler profiler55 = null;
        retrofit.ErrorHandler errorHandler56 = null;
        retrofit.RestAdapter.Log log57 = retrofit.RestAdapter.Log.NONE;
        log57.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter(server49, provider50, executor51, executor52, requestInterceptor53, converter54, profiler55, errorHandler56, log57, logLevel60);
        retrofit.RestAdapter.RestHandler restHandler62 = restAdapter61.new RestHandler();
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        restAdapter61.log = log63;
        retrofit.converter.Converter converter65 = null;
        restAdapter61.converter = converter65;
        retrofit.RestAdapter.RestHandler restHandler67 = restAdapter61.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor68 = restAdapter61.requestInterceptor;
        retrofit.Server server69 = restAdapter61.server;
        retrofit.RestAdapter.LogLevel logLevel70 = restAdapter61.getLogLevel();
        builder46.logLevel = logLevel70;
        restAdapter15.logLevel = logLevel70;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(restAdapter15);
        org.junit.Assert.assertNull(profiler16);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNull(errorHandler25);
        org.junit.Assert.assertNull(profiler26);
        org.junit.Assert.assertNull(log27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(log57);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertNull(requestInterceptor68);
        org.junit.Assert.assertNull(server69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test02531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02531");
        retrofit.client.Header[] headerArray10 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList11 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList11, headerArray10);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList11, typedOutput13);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList11, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("", "default", (java.util.List<retrofit.client.Header>) headerList11, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList11, typedOutput19);
        java.util.List<retrofit.client.Header> headerList21 = request20.getHeaders();
        retrofit.mime.TypedOutput typedOutput22 = null;
        retrofit.client.Request request23 = new retrofit.client.Request("", "default", headerList21, typedOutput22);
        java.util.List<retrofit.client.Header> headerList24 = request23.getHeaders();
        org.junit.Assert.assertNotNull(headerArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(headerList21);
        org.junit.Assert.assertNotNull(headerList24);
    }

    @Test
    public void test02532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02532");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.converter.Converter converter2 = null;
        restAdapter0.converter = converter2;
        retrofit.ErrorHandler errorHandler4 = restAdapter0.errorHandler;
        retrofit.Profiler profiler5 = null;
        restAdapter0.profiler = profiler5;
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter0.getLogLevel();
        retrofit.client.Client.Provider provider8 = restAdapter0.clientProvider;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider10 = builder9.clientProvider;
        retrofit.RestAdapter.Builder builder12 = builder9.setServer("default");
        retrofit.Profiler profiler13 = null;
        builder12.profiler = profiler13;
        retrofit.Server server15 = null;
        retrofit.client.Client.Provider provider16 = null;
        java.util.concurrent.Executor executor17 = null;
        java.util.concurrent.Executor executor18 = null;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        retrofit.converter.Converter converter20 = null;
        retrofit.Profiler profiler21 = null;
        retrofit.ErrorHandler errorHandler22 = null;
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        log23.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server15, provider16, executor17, executor18, requestInterceptor19, converter20, profiler21, errorHandler22, log23, logLevel26);
        retrofit.RestAdapter.RestHandler restHandler28 = restAdapter27.new RestHandler();
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        restAdapter27.log = log29;
        retrofit.converter.Converter converter31 = null;
        restAdapter27.converter = converter31;
        retrofit.RestAdapter.RestHandler restHandler33 = restAdapter27.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel34 = restAdapter27.logLevel;
        retrofit.RestAdapter.Builder builder35 = builder12.setLogLevel(logLevel34);
        restAdapter0.logLevel = logLevel34;
        retrofit.RestAdapter.RestHandler restHandler37 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(errorHandler4);
        org.junit.Assert.assertNull(logLevel7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNull(provider10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test02533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02533");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.Profiler profiler3 = builder0.profiler;
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor5 = restAdapter4.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.Server server9 = new retrofit.Server("hi!", "hi!");
        restAdapter4.server = server9;
        retrofit.RestAdapter.Builder builder11 = builder0.setServer(server9);
        retrofit.converter.Converter converter12 = null;
        builder11.converter = converter12;
        retrofit.Server server16 = new retrofit.Server("hi!", "");
        builder11.server = server16;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor19 = restAdapter18.callbackExecutor;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor21 = restAdapter20.callbackExecutor;
        java.util.concurrent.Executor executor22 = restAdapter20.callbackExecutor;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler24 = restAdapter23.errorHandler;
        retrofit.Server server27 = new retrofit.Server("", "");
        restAdapter23.server = server27;
        restAdapter20.server = server27;
        restAdapter18.server = server27;
        retrofit.Profiler profiler31 = restAdapter18.profiler;
        retrofit.ErrorHandler errorHandler32 = null;
        restAdapter18.errorHandler = errorHandler32;
        retrofit.Profiler profiler34 = null;
        restAdapter18.profiler = profiler34;
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter18.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel37 = restAdapter18.getLogLevel();
        retrofit.ErrorHandler errorHandler38 = null;
        restAdapter18.errorHandler = errorHandler38;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler41 = builder40.errorHandler;
        retrofit.client.Client.Provider provider42 = null;
        builder40.clientProvider = provider42;
        retrofit.Server server46 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder47 = builder40.setServer(server46);
        retrofit.converter.Converter converter48 = null;
        builder47.converter = converter48;
        retrofit.RestAdapter restAdapter50 = builder47.build();
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler52 = builder51.errorHandler;
        java.util.concurrent.Executor executor53 = null;
        builder51.callbackExecutor = executor53;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider56 = builder55.clientProvider;
        java.util.concurrent.Executor executor57 = null;
        builder55.callbackExecutor = executor57;
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.Server server62 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder63 = builder59.setServer(server62);
        java.lang.String str64 = server62.getUrl();
        retrofit.RestAdapter.Builder builder65 = builder55.setServer(server62);
        retrofit.RestAdapter.Builder builder66 = builder51.setServer(server62);
        restAdapter50.server = server62;
        retrofit.client.Client.Provider provider68 = restAdapter50.clientProvider;
        restAdapter18.clientProvider = provider68;
        retrofit.RestAdapter.Builder builder70 = builder11.setClient(provider68);
        retrofit.RequestInterceptor requestInterceptor71 = builder70.requestInterceptor;
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler73 = builder72.errorHandler;
        retrofit.ErrorHandler errorHandler74 = builder72.errorHandler;
        retrofit.RestAdapter.Log log75 = null;
        builder72.log = log75;
        retrofit.RequestInterceptor requestInterceptor77 = null;
        builder72.requestInterceptor = requestInterceptor77;
        retrofit.RestAdapter restAdapter79 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor80 = restAdapter79.callbackExecutor;
        java.util.concurrent.Executor executor81 = restAdapter79.callbackExecutor;
        retrofit.RestAdapter restAdapter82 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler83 = restAdapter82.errorHandler;
        retrofit.Server server86 = new retrofit.Server("", "");
        restAdapter82.server = server86;
        restAdapter79.server = server86;
        retrofit.RestAdapter.Builder builder89 = builder72.setServer(server86);
        builder70.server = server86;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNull(profiler31);
        org.junit.Assert.assertNull(logLevel36);
        org.junit.Assert.assertNull(logLevel37);
        org.junit.Assert.assertNull(errorHandler41);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(restAdapter50);
        org.junit.Assert.assertNull(errorHandler52);
        org.junit.Assert.assertNull(provider56);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hi!" + "'", str64, "hi!");
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(provider68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(requestInterceptor71);
        org.junit.Assert.assertNull(errorHandler73);
        org.junit.Assert.assertNull(errorHandler74);
        org.junit.Assert.assertNull(executor80);
        org.junit.Assert.assertNull(executor81);
        org.junit.Assert.assertNull(errorHandler83);
        org.junit.Assert.assertNotNull(builder89);
    }

    @Test
    public void test02534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02534");
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        log14.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel17);
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter18.new RestHandler();
        java.util.concurrent.Executor executor20 = null;
        restAdapter18.callbackExecutor = executor20;
        retrofit.client.Header[] headerArray24 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList25 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList25, headerArray24);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList25, typedOutput27);
        retrofit.client.Request request29 = restAdapter18.logAndReplaceRequest(request28);
        java.util.List<retrofit.client.Header> headerList30 = request28.getHeaders();
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("hi!", "default", headerList30, typedOutput31);
        java.util.List<retrofit.client.Header> headerList33 = request32.getHeaders();
        retrofit.mime.TypedOutput typedOutput34 = null;
        retrofit.client.Request request35 = new retrofit.client.Request("", "hi!", headerList33, typedOutput34);
        retrofit.mime.TypedOutput typedOutput36 = null;
        retrofit.client.Request request37 = new retrofit.client.Request("", "", headerList33, typedOutput36);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(request29);
        org.junit.Assert.assertNotNull(headerList30);
        org.junit.Assert.assertNotNull(headerList33);
    }

    @Test
    public void test02535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02535");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = null;
        restAdapter0.httpExecutor = executor2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        log12.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel15);
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter16.new RestHandler();
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        restAdapter16.log = log18;
        retrofit.converter.Converter converter20 = null;
        restAdapter16.converter = converter20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.Server server25 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder26 = builder22.setServer(server25);
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor28 = restAdapter27.callbackExecutor;
        java.util.concurrent.Executor executor29 = restAdapter27.callbackExecutor;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler31 = restAdapter30.errorHandler;
        retrofit.Server server34 = new retrofit.Server("", "");
        restAdapter30.server = server34;
        restAdapter27.server = server34;
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        restAdapter27.log = log37;
        retrofit.RestAdapter.Builder builder39 = builder26.setLog(log37);
        restAdapter16.log = log37;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler42 = builder41.errorHandler;
        retrofit.Server server45 = new retrofit.Server("", "");
        builder41.server = server45;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor48 = restAdapter47.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler49 = restAdapter47.new RestHandler();
        retrofit.Server server52 = new retrofit.Server("hi!", "hi!");
        restAdapter47.server = server52;
        retrofit.RestAdapter.Builder builder54 = builder41.setServer(server52);
        restAdapter16.server = server52;
        retrofit.Profiler profiler56 = restAdapter16.profiler;
        retrofit.Server server57 = restAdapter16.server;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.Server server61 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder62 = builder58.setServer(server61);
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor64 = restAdapter63.callbackExecutor;
        java.util.concurrent.Executor executor65 = restAdapter63.callbackExecutor;
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler67 = restAdapter66.errorHandler;
        retrofit.Server server70 = new retrofit.Server("", "");
        restAdapter66.server = server70;
        restAdapter63.server = server70;
        retrofit.RestAdapter.Log log73 = retrofit.RestAdapter.Log.NONE;
        restAdapter63.log = log73;
        retrofit.RestAdapter.Builder builder75 = builder62.setLog(log73);
        retrofit.RestAdapter.LogLevel logLevel76 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder77 = builder62.setLogLevel(logLevel76);
        retrofit.RestAdapter.Log log78 = builder62.log;
        retrofit.RestAdapter restAdapter79 = builder62.build();
        java.util.concurrent.Executor executor80 = restAdapter79.callbackExecutor;
        restAdapter16.httpExecutor = executor80;
        restAdapter0.httpExecutor = executor80;
        retrofit.RestAdapter.LogLevel logLevel83 = restAdapter0.logLevel;
        retrofit.RestAdapter.RestHandler restHandler84 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log18);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(errorHandler31);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(errorHandler42);
        org.junit.Assert.assertNull(executor48);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(profiler56);
        org.junit.Assert.assertNotNull(server57);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(executor64);
        org.junit.Assert.assertNull(executor65);
        org.junit.Assert.assertNull(errorHandler67);
        org.junit.Assert.assertNotNull(log73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(log78);
        org.junit.Assert.assertNotNull(restAdapter79);
        org.junit.Assert.assertNotNull(executor80);
        org.junit.Assert.assertNull(logLevel83);
    }

    @Test
    public void test02536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02536");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter0.requestInterceptor;
        retrofit.ErrorHandler errorHandler17 = restAdapter0.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter0.new RestHandler();
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor21 = null;
        restAdapter20.requestInterceptor = requestInterceptor21;
        retrofit.RestAdapter.RestHandler restHandler23 = restAdapter20.new RestHandler();
        retrofit.Server server25 = new retrofit.Server("");
        restAdapter20.server = server25;
        restAdapter0.server = server25;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler29 = builder28.errorHandler;
        retrofit.Server server32 = new retrofit.Server("", "");
        builder28.server = server32;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor35 = restAdapter34.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler36 = restAdapter34.new RestHandler();
        retrofit.Server server39 = new retrofit.Server("hi!", "hi!");
        restAdapter34.server = server39;
        retrofit.RestAdapter.Builder builder41 = builder28.setServer(server39);
        retrofit.RestAdapter.Log log42 = builder28.log;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler44 = builder43.errorHandler;
        retrofit.ErrorHandler errorHandler45 = builder43.errorHandler;
        retrofit.Profiler profiler46 = builder43.profiler;
        retrofit.RestAdapter.Log log47 = builder43.log;
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.FULL;
        builder43.logLevel = logLevel48;
        retrofit.RestAdapter.Builder builder50 = builder28.setLogLevel(logLevel48);
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler52 = null;
        builder51.errorHandler = errorHandler52;
        retrofit.ErrorHandler errorHandler54 = builder51.errorHandler;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler56 = builder55.errorHandler;
        retrofit.Server server59 = new retrofit.Server("", "");
        builder55.server = server59;
        retrofit.RestAdapter.Log log61 = retrofit.RestAdapter.Log.NONE;
        builder55.log = log61;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler64 = builder63.errorHandler;
        retrofit.client.Client.Provider provider65 = null;
        builder63.clientProvider = provider65;
        retrofit.Server server69 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder70 = builder63.setServer(server69);
        retrofit.converter.Converter converter71 = null;
        builder70.converter = converter71;
        retrofit.RestAdapter restAdapter73 = builder70.build();
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler75 = builder74.errorHandler;
        java.util.concurrent.Executor executor76 = null;
        builder74.callbackExecutor = executor76;
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider79 = builder78.clientProvider;
        java.util.concurrent.Executor executor80 = null;
        builder78.callbackExecutor = executor80;
        retrofit.RestAdapter.Builder builder82 = new retrofit.RestAdapter.Builder();
        retrofit.Server server85 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder86 = builder82.setServer(server85);
        java.lang.String str87 = server85.getUrl();
        retrofit.RestAdapter.Builder builder88 = builder78.setServer(server85);
        retrofit.RestAdapter.Builder builder89 = builder74.setServer(server85);
        restAdapter73.server = server85;
        java.util.concurrent.Executor executor91 = restAdapter73.httpExecutor;
        builder55.httpExecutor = executor91;
        builder51.httpExecutor = executor91;
        builder28.httpExecutor = executor91;
        restAdapter0.callbackExecutor = executor91;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(log42);
        org.junit.Assert.assertNull(errorHandler44);
        org.junit.Assert.assertNull(errorHandler45);
        org.junit.Assert.assertNull(profiler46);
        org.junit.Assert.assertNull(log47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(errorHandler54);
        org.junit.Assert.assertNull(errorHandler56);
        org.junit.Assert.assertNotNull(log61);
        org.junit.Assert.assertNull(errorHandler64);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(restAdapter73);
        org.junit.Assert.assertNull(errorHandler75);
        org.junit.Assert.assertNull(provider79);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "hi!" + "'", str87, "hi!");
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(executor91);
    }

    @Test
    public void test02537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02537");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider5 = builder4.clientProvider;
        java.util.concurrent.Executor executor6 = null;
        builder4.callbackExecutor = executor6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.Server server11 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder12 = builder8.setServer(server11);
        java.lang.String str13 = server11.getUrl();
        retrofit.RestAdapter.Builder builder14 = builder4.setServer(server11);
        retrofit.RestAdapter.Builder builder15 = builder0.setServer(server11);
        retrofit.RestAdapter.Builder builder17 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler19 = builder18.errorHandler;
        retrofit.Server server22 = new retrofit.Server("", "");
        builder18.server = server22;
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        builder18.log = log24;
        retrofit.RestAdapter.LogLevel logLevel26 = builder18.logLevel;
        java.util.concurrent.Executor executor27 = builder18.callbackExecutor;
        retrofit.Profiler profiler28 = builder18.profiler;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler30 = builder29.errorHandler;
        retrofit.ErrorHandler errorHandler31 = builder29.errorHandler;
        retrofit.Profiler profiler32 = builder29.profiler;
        retrofit.RestAdapter.Log log33 = builder29.log;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.FULL;
        builder29.logLevel = logLevel34;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler37 = builder36.errorHandler;
        java.util.concurrent.Executor executor38 = null;
        builder36.callbackExecutor = executor38;
        java.util.concurrent.Executor executor40 = null;
        builder36.httpExecutor = executor40;
        retrofit.Profiler profiler42 = null;
        builder36.profiler = profiler42;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler45 = builder44.errorHandler;
        retrofit.Server server48 = new retrofit.Server("", "");
        builder44.server = server48;
        retrofit.client.Client.Provider provider50 = null;
        java.util.concurrent.Executor executor51 = null;
        java.util.concurrent.Executor executor52 = null;
        retrofit.RequestInterceptor requestInterceptor53 = null;
        retrofit.converter.Converter converter54 = null;
        retrofit.Profiler profiler55 = null;
        retrofit.ErrorHandler errorHandler56 = null;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler58 = builder57.errorHandler;
        retrofit.Server server61 = new retrofit.Server("", "");
        builder57.server = server61;
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        builder57.log = log63;
        retrofit.Server server65 = null;
        retrofit.client.Client.Provider provider66 = null;
        java.util.concurrent.Executor executor67 = null;
        java.util.concurrent.Executor executor68 = null;
        retrofit.RequestInterceptor requestInterceptor69 = null;
        retrofit.converter.Converter converter70 = null;
        retrofit.Profiler profiler71 = null;
        retrofit.ErrorHandler errorHandler72 = null;
        retrofit.RestAdapter.Log log73 = retrofit.RestAdapter.Log.NONE;
        log73.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel76 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter77 = new retrofit.RestAdapter(server65, provider66, executor67, executor68, requestInterceptor69, converter70, profiler71, errorHandler72, log73, logLevel76);
        retrofit.RestAdapter restAdapter78 = new retrofit.RestAdapter(server48, provider50, executor51, executor52, requestInterceptor53, converter54, profiler55, errorHandler56, log63, logLevel76);
        retrofit.RestAdapter.Builder builder79 = builder36.setLogLevel(logLevel76);
        retrofit.RestAdapter.Builder builder80 = builder29.setLogLevel(logLevel76);
        builder18.logLevel = logLevel76;
        retrofit.RestAdapter.Builder builder82 = builder0.setLogLevel(logLevel76);
        java.util.concurrent.Executor executor83 = null;
        builder0.httpExecutor = executor83;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNotNull(log24);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(profiler28);
        org.junit.Assert.assertNull(errorHandler30);
        org.junit.Assert.assertNull(errorHandler31);
        org.junit.Assert.assertNull(profiler32);
        org.junit.Assert.assertNull(log33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNull(errorHandler45);
        org.junit.Assert.assertNull(errorHandler58);
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertNotNull(log73);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
    }

    @Test
    public void test02538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02538");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.converter.Converter converter5 = builder0.converter;
        retrofit.RequestInterceptor requestInterceptor6 = builder0.requestInterceptor;
        java.util.concurrent.Executor executor7 = builder0.callbackExecutor;
        retrofit.Profiler profiler8 = builder0.profiler;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler10 = builder9.errorHandler;
        retrofit.ErrorHandler errorHandler11 = builder9.errorHandler;
        retrofit.Profiler profiler12 = builder9.profiler;
        retrofit.RestAdapter.Log log13 = builder9.log;
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.FULL;
        builder9.logLevel = logLevel14;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.Server server19 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder20 = builder16.setServer(server19);
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor22 = restAdapter21.callbackExecutor;
        java.util.concurrent.Executor executor23 = restAdapter21.callbackExecutor;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler25 = restAdapter24.errorHandler;
        retrofit.Server server28 = new retrofit.Server("", "");
        restAdapter24.server = server28;
        restAdapter21.server = server28;
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        restAdapter21.log = log31;
        retrofit.RestAdapter.Builder builder33 = builder20.setLog(log31);
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder35 = builder20.setLogLevel(logLevel34);
        retrofit.Profiler profiler36 = null;
        builder35.profiler = profiler36;
        retrofit.converter.Converter converter38 = null;
        builder35.converter = converter38;
        retrofit.ErrorHandler errorHandler40 = null;
        builder35.errorHandler = errorHandler40;
        retrofit.RestAdapter restAdapter42 = builder35.build();
        retrofit.ErrorHandler errorHandler43 = builder35.errorHandler;
        retrofit.RestAdapter.Builder builder44 = builder9.setErrorHandler(errorHandler43);
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler46 = builder45.errorHandler;
        retrofit.ErrorHandler errorHandler47 = builder45.errorHandler;
        retrofit.Profiler profiler48 = builder45.profiler;
        retrofit.RestAdapter.Log log49 = builder45.log;
        retrofit.RestAdapter.LogLevel logLevel50 = retrofit.RestAdapter.LogLevel.FULL;
        builder45.logLevel = logLevel50;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.Server server55 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder56 = builder52.setServer(server55);
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor58 = restAdapter57.callbackExecutor;
        java.util.concurrent.Executor executor59 = restAdapter57.callbackExecutor;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler61 = restAdapter60.errorHandler;
        retrofit.Server server64 = new retrofit.Server("", "");
        restAdapter60.server = server64;
        restAdapter57.server = server64;
        retrofit.RestAdapter.Log log67 = retrofit.RestAdapter.Log.NONE;
        restAdapter57.log = log67;
        retrofit.RestAdapter.Builder builder69 = builder56.setLog(log67);
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder71 = builder56.setLogLevel(logLevel70);
        retrofit.Profiler profiler72 = null;
        builder71.profiler = profiler72;
        retrofit.converter.Converter converter74 = null;
        builder71.converter = converter74;
        retrofit.ErrorHandler errorHandler76 = null;
        builder71.errorHandler = errorHandler76;
        retrofit.RestAdapter restAdapter78 = builder71.build();
        retrofit.ErrorHandler errorHandler79 = builder71.errorHandler;
        retrofit.RestAdapter.Builder builder80 = builder45.setErrorHandler(errorHandler79);
        retrofit.RestAdapter.Builder builder81 = builder9.setErrorHandler(errorHandler79);
        retrofit.RestAdapter.Builder builder82 = builder0.setErrorHandler(errorHandler79);
        retrofit.RestAdapter.Builder builder84 = builder82.setServer("default");
        retrofit.RestAdapter.Log log85 = builder82.log;
        retrofit.converter.Converter converter86 = builder82.converter;
        retrofit.ErrorHandler errorHandler87 = builder82.errorHandler;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(converter5);
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(profiler8);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(profiler12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNull(errorHandler25);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(restAdapter42);
        org.junit.Assert.assertNotNull(errorHandler43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(errorHandler46);
        org.junit.Assert.assertNull(errorHandler47);
        org.junit.Assert.assertNull(profiler48);
        org.junit.Assert.assertNull(log49);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(executor58);
        org.junit.Assert.assertNull(executor59);
        org.junit.Assert.assertNull(errorHandler61);
        org.junit.Assert.assertNotNull(log67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(restAdapter78);
        org.junit.Assert.assertNotNull(errorHandler79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNull(log85);
        org.junit.Assert.assertNull(converter86);
        org.junit.Assert.assertNotNull(errorHandler87);
    }

    @Test
    public void test02539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02539");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter0.getLogLevel();
        retrofit.ErrorHandler errorHandler20 = null;
        restAdapter0.errorHandler = errorHandler20;
        retrofit.client.Client.Provider provider22 = null;
        restAdapter0.clientProvider = provider22;
        retrofit.ErrorHandler errorHandler24 = restAdapter0.errorHandler;
        retrofit.Server server25 = restAdapter0.server;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler27 = builder26.errorHandler;
        retrofit.ErrorHandler errorHandler28 = builder26.errorHandler;
        retrofit.RestAdapter.Log log29 = null;
        builder26.log = log29;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean32 = logLevel31.log();
        builder26.logLevel = logLevel31;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler35 = restAdapter34.new RestHandler();
        java.util.concurrent.Executor executor36 = null;
        restAdapter34.callbackExecutor = executor36;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor39 = restAdapter38.callbackExecutor;
        java.util.concurrent.Executor executor40 = restAdapter38.callbackExecutor;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler42 = restAdapter41.errorHandler;
        retrofit.Server server45 = new retrofit.Server("", "");
        restAdapter41.server = server45;
        restAdapter38.server = server45;
        restAdapter34.server = server45;
        retrofit.RestAdapter.Builder builder49 = builder26.setServer(server45);
        restAdapter0.server = server45;
        retrofit.RestAdapter.RestHandler restHandler51 = restAdapter0.new RestHandler();
        java.lang.Throwable throwable52 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable52, "default");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNotNull(server25);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNull(executor40);
        org.junit.Assert.assertNull(errorHandler42);
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test02540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02540");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter0.requestInterceptor;
        retrofit.ErrorHandler errorHandler17 = restAdapter0.errorHandler;
        java.util.concurrent.Executor executor18 = null;
        restAdapter0.callbackExecutor = executor18;
        java.util.concurrent.Executor executor20 = restAdapter0.httpExecutor;
        retrofit.client.Client.Provider provider21 = restAdapter0.clientProvider;
        retrofit.converter.Converter converter22 = restAdapter0.converter;
        retrofit.RestAdapter.RestHandler restHandler23 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(provider21);
        org.junit.Assert.assertNull(converter22);
        org.junit.Assert.assertNull(logLevel24);
    }

    @Test
    public void test02541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02541");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server6 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder7 = builder0.setServer(server6);
        retrofit.Server server10 = new retrofit.Server("", "");
        builder7.server = server10;
        retrofit.converter.Converter converter12 = null;
        builder7.converter = converter12;
        retrofit.Server server15 = new retrofit.Server("default");
        retrofit.RestAdapter.Builder builder16 = builder7.setServer(server15);
        java.util.concurrent.Executor executor17 = builder7.httpExecutor;
        retrofit.converter.Converter converter18 = builder7.converter;
        retrofit.RestAdapter.LogLevel logLevel19 = builder7.logLevel;
        retrofit.ErrorHandler errorHandler20 = builder7.errorHandler;
        retrofit.RestAdapter.Log log21 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder22 = builder7.setLog(log21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(converter18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler20);
    }

    @Test
    public void test02542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02542");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter0.requestInterceptor;
        retrofit.ErrorHandler errorHandler17 = restAdapter0.errorHandler;
        retrofit.Profiler profiler18 = restAdapter0.profiler;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler20 = builder19.errorHandler;
        retrofit.client.Client.Provider provider21 = null;
        builder19.clientProvider = provider21;
        retrofit.Server server25 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder26 = builder19.setServer(server25);
        retrofit.converter.Converter converter27 = null;
        builder26.converter = converter27;
        retrofit.RestAdapter restAdapter29 = builder26.build();
        java.util.concurrent.Executor executor30 = restAdapter29.httpExecutor;
        restAdapter0.httpExecutor = executor30;
        retrofit.RestAdapter.RestHandler restHandler32 = restAdapter0.new RestHandler();
        retrofit.Profiler profiler33 = null;
        restAdapter0.profiler = profiler33;
        retrofit.RestAdapter.Log log35 = restAdapter0.log;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass36 = log35.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(profiler18);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(restAdapter29);
        org.junit.Assert.assertNotNull(executor30);
        org.junit.Assert.assertNull(log35);
    }

    @Test
    public void test02543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02543");
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        log12.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel15);
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter16.new RestHandler();
        java.util.concurrent.Executor executor18 = null;
        restAdapter16.callbackExecutor = executor18;
        retrofit.client.Header[] headerArray36 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList37 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList37, headerArray36);
        retrofit.mime.TypedOutput typedOutput39 = null;
        retrofit.client.Request request40 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList37, typedOutput39);
        retrofit.mime.TypedOutput typedOutput41 = null;
        retrofit.client.Request request42 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList37, typedOutput41);
        retrofit.mime.TypedOutput typedOutput43 = null;
        retrofit.client.Request request44 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList37, typedOutput43);
        retrofit.mime.TypedOutput typedOutput45 = null;
        retrofit.client.Request request46 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList37, typedOutput45);
        retrofit.mime.TypedOutput typedOutput47 = null;
        retrofit.client.Request request48 = new retrofit.client.Request("default", "hi!", (java.util.List<retrofit.client.Header>) headerList37, typedOutput47);
        retrofit.mime.TypedOutput typedOutput49 = null;
        retrofit.client.Request request50 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList37, typedOutput49);
        retrofit.mime.TypedOutput typedOutput51 = null;
        retrofit.client.Request request52 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList37, typedOutput51);
        retrofit.mime.TypedOutput typedOutput53 = null;
        retrofit.client.Request request54 = new retrofit.client.Request("hi!", "default", (java.util.List<retrofit.client.Header>) headerList37, typedOutput53);
        retrofit.client.Request request55 = restAdapter16.logAndReplaceRequest(request54);
        retrofit.client.Header[] headerArray62 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList63 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList63, headerArray62);
        retrofit.mime.TypedOutput typedOutput65 = null;
        retrofit.client.Request request66 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList63, typedOutput65);
        retrofit.mime.TypedOutput typedOutput67 = null;
        retrofit.client.Request request68 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList63, typedOutput67);
        retrofit.mime.TypedOutput typedOutput69 = null;
        retrofit.client.Request request70 = new retrofit.client.Request("", "default", (java.util.List<retrofit.client.Header>) headerList63, typedOutput69);
        java.util.List<retrofit.client.Header> headerList71 = request70.getHeaders();
        retrofit.client.Request request72 = restAdapter16.logAndReplaceRequest(request70);
        java.util.List<retrofit.client.Header> headerList73 = request70.getHeaders();
        retrofit.mime.TypedOutput typedOutput74 = null;
        retrofit.client.Request request75 = new retrofit.client.Request("", "hi!", headerList73, typedOutput74);
        retrofit.mime.TypedOutput typedOutput76 = null;
        retrofit.client.Request request77 = new retrofit.client.Request("default", "hi!", headerList73, typedOutput76);
        java.util.List<retrofit.client.Header> headerList78 = request77.getHeaders();
        java.lang.String str79 = request77.getUrl();
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(request55);
        org.junit.Assert.assertNotNull(headerArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(headerList71);
        org.junit.Assert.assertNotNull(request72);
        org.junit.Assert.assertNotNull(headerList73);
        org.junit.Assert.assertNotNull(headerList78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "hi!" + "'", str79, "hi!");
    }

    @Test
    public void test02544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02544");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        java.util.concurrent.Executor executor14 = null;
        restAdapter12.callbackExecutor = executor14;
        retrofit.Profiler profiler16 = null;
        restAdapter12.profiler = profiler16;
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter12.new RestHandler();
        retrofit.Profiler profiler19 = null;
        restAdapter12.profiler = profiler19;
        retrofit.RestAdapter.RestHandler restHandler21 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler23 = builder22.errorHandler;
        retrofit.Server server26 = new retrofit.Server("", "");
        builder22.server = server26;
        retrofit.client.Client.Provider provider28 = builder22.clientProvider;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler30 = builder29.errorHandler;
        java.util.concurrent.Executor executor31 = null;
        builder29.callbackExecutor = executor31;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider34 = builder33.clientProvider;
        java.util.concurrent.Executor executor35 = null;
        builder33.callbackExecutor = executor35;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.Server server40 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder41 = builder37.setServer(server40);
        java.lang.String str42 = server40.getUrl();
        retrofit.RestAdapter.Builder builder43 = builder33.setServer(server40);
        retrofit.RestAdapter.Builder builder44 = builder29.setServer(server40);
        retrofit.RestAdapter.Builder builder45 = builder22.setServer(server40);
        retrofit.converter.Converter converter46 = builder22.converter;
        retrofit.RestAdapter.LogLevel logLevel47 = builder22.logLevel;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler49 = builder48.errorHandler;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        builder48.requestInterceptor = requestInterceptor50;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider53 = builder52.clientProvider;
        java.util.concurrent.Executor executor54 = null;
        builder52.callbackExecutor = executor54;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.Server server59 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder60 = builder56.setServer(server59);
        java.lang.String str61 = server59.getUrl();
        retrofit.RestAdapter.Builder builder62 = builder52.setServer(server59);
        builder52.ensureSaneDefaults();
        retrofit.Server server64 = null;
        retrofit.client.Client.Provider provider65 = null;
        java.util.concurrent.Executor executor66 = null;
        java.util.concurrent.Executor executor67 = null;
        retrofit.RequestInterceptor requestInterceptor68 = null;
        retrofit.converter.Converter converter69 = null;
        retrofit.Profiler profiler70 = null;
        retrofit.ErrorHandler errorHandler71 = null;
        retrofit.RestAdapter.Log log72 = retrofit.RestAdapter.Log.NONE;
        log72.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel75 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter76 = new retrofit.RestAdapter(server64, provider65, executor66, executor67, requestInterceptor68, converter69, profiler70, errorHandler71, log72, logLevel75);
        retrofit.RestAdapter.RestHandler restHandler77 = restAdapter76.new RestHandler();
        retrofit.RestAdapter.Log log78 = retrofit.RestAdapter.Log.NONE;
        restAdapter76.log = log78;
        retrofit.RestAdapter.Builder builder80 = builder52.setLog(log78);
        retrofit.RestAdapter.Builder builder82 = builder52.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor83 = builder52.requestInterceptor;
        builder48.requestInterceptor = requestInterceptor83;
        builder22.requestInterceptor = requestInterceptor83;
        restAdapter12.requestInterceptor = requestInterceptor83;
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNull(provider28);
        org.junit.Assert.assertNull(errorHandler30);
        org.junit.Assert.assertNull(provider34);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(converter46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler49);
        org.junit.Assert.assertNull(provider53);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(log72);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(requestInterceptor83);
    }

    @Test
    public void test02545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02545");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        java.util.concurrent.Executor executor4 = null;
        builder0.httpExecutor = executor4;
        retrofit.Profiler profiler6 = null;
        builder0.profiler = profiler6;
        retrofit.RestAdapter.Builder builder9 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.Server server13 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder14 = builder10.setServer(server13);
        retrofit.RestAdapter.LogLevel logLevel15 = builder14.logLevel;
        java.util.concurrent.Executor executor16 = builder14.httpExecutor;
        retrofit.RestAdapter restAdapter17 = builder14.build();
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor19 = restAdapter18.callbackExecutor;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor21 = restAdapter20.callbackExecutor;
        java.util.concurrent.Executor executor22 = restAdapter20.callbackExecutor;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler24 = restAdapter23.errorHandler;
        retrofit.Server server27 = new retrofit.Server("", "");
        restAdapter23.server = server27;
        restAdapter20.server = server27;
        restAdapter18.server = server27;
        retrofit.Profiler profiler31 = restAdapter18.profiler;
        retrofit.ErrorHandler errorHandler32 = null;
        restAdapter18.errorHandler = errorHandler32;
        retrofit.Profiler profiler34 = null;
        restAdapter18.profiler = profiler34;
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter18.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter18.logLevel = logLevel37;
        retrofit.RestAdapter.RestHandler restHandler39 = restAdapter18.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor40 = null;
        restAdapter18.requestInterceptor = requestInterceptor40;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler43 = builder42.errorHandler;
        retrofit.RequestInterceptor requestInterceptor44 = null;
        builder42.requestInterceptor = requestInterceptor44;
        retrofit.Server server46 = null;
        retrofit.client.Client.Provider provider47 = null;
        java.util.concurrent.Executor executor48 = null;
        java.util.concurrent.Executor executor49 = null;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        retrofit.converter.Converter converter51 = null;
        retrofit.Profiler profiler52 = null;
        retrofit.ErrorHandler errorHandler53 = null;
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        log54.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter(server46, provider47, executor48, executor49, requestInterceptor50, converter51, profiler52, errorHandler53, log54, logLevel57);
        builder42.log = log54;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler61 = builder60.errorHandler;
        retrofit.client.Client.Provider provider62 = null;
        builder60.clientProvider = provider62;
        retrofit.Server server66 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder67 = builder60.setServer(server66);
        retrofit.converter.Converter converter68 = null;
        builder67.converter = converter68;
        retrofit.RestAdapter restAdapter70 = builder67.build();
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler72 = builder71.errorHandler;
        java.util.concurrent.Executor executor73 = null;
        builder71.callbackExecutor = executor73;
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider76 = builder75.clientProvider;
        java.util.concurrent.Executor executor77 = null;
        builder75.callbackExecutor = executor77;
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        retrofit.Server server82 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder83 = builder79.setServer(server82);
        java.lang.String str84 = server82.getUrl();
        retrofit.RestAdapter.Builder builder85 = builder75.setServer(server82);
        retrofit.RestAdapter.Builder builder86 = builder71.setServer(server82);
        restAdapter70.server = server82;
        retrofit.client.Client.Provider provider88 = restAdapter70.clientProvider;
        builder42.clientProvider = provider88;
        restAdapter18.clientProvider = provider88;
        retrofit.RestAdapter.Builder builder91 = builder14.setClient(provider88);
        retrofit.Profiler profiler92 = builder14.profiler;
        retrofit.converter.Converter converter93 = builder14.converter;
        builder0.converter = converter93;
        retrofit.RestAdapter restAdapter95 = builder0.build();
        retrofit.ErrorHandler errorHandler96 = builder0.errorHandler;
        retrofit.RestAdapter.Log log97 = builder0.log;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNotNull(restAdapter17);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNull(profiler31);
        org.junit.Assert.assertNull(logLevel36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler43);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler61);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(restAdapter70);
        org.junit.Assert.assertNull(errorHandler72);
        org.junit.Assert.assertNull(provider76);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "hi!" + "'", str84, "hi!");
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(provider88);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNull(profiler92);
        org.junit.Assert.assertNotNull(converter93);
        org.junit.Assert.assertNotNull(restAdapter95);
        org.junit.Assert.assertNotNull(errorHandler96);
        org.junit.Assert.assertNotNull(log97);
    }

    @Test
    public void test02546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02546");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = null;
        restAdapter0.httpExecutor = executor2;
        retrofit.client.Client.Provider provider4 = null;
        restAdapter0.clientProvider = provider4;
        java.util.concurrent.Executor executor6 = null;
        restAdapter0.httpExecutor = executor6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.Server server11 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder12 = builder8.setServer(server11);
        retrofit.RestAdapter.LogLevel logLevel13 = builder12.logLevel;
        java.util.concurrent.Executor executor14 = builder12.httpExecutor;
        retrofit.RestAdapter restAdapter15 = builder12.build();
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor17 = restAdapter16.callbackExecutor;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor19 = restAdapter18.callbackExecutor;
        java.util.concurrent.Executor executor20 = restAdapter18.callbackExecutor;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler22 = restAdapter21.errorHandler;
        retrofit.Server server25 = new retrofit.Server("", "");
        restAdapter21.server = server25;
        restAdapter18.server = server25;
        restAdapter16.server = server25;
        retrofit.Profiler profiler29 = restAdapter16.profiler;
        retrofit.ErrorHandler errorHandler30 = null;
        restAdapter16.errorHandler = errorHandler30;
        retrofit.Profiler profiler32 = null;
        restAdapter16.profiler = profiler32;
        retrofit.RestAdapter.LogLevel logLevel34 = restAdapter16.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter16.logLevel = logLevel35;
        retrofit.RestAdapter.RestHandler restHandler37 = restAdapter16.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor38 = null;
        restAdapter16.requestInterceptor = requestInterceptor38;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler41 = builder40.errorHandler;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        builder40.requestInterceptor = requestInterceptor42;
        retrofit.Server server44 = null;
        retrofit.client.Client.Provider provider45 = null;
        java.util.concurrent.Executor executor46 = null;
        java.util.concurrent.Executor executor47 = null;
        retrofit.RequestInterceptor requestInterceptor48 = null;
        retrofit.converter.Converter converter49 = null;
        retrofit.Profiler profiler50 = null;
        retrofit.ErrorHandler errorHandler51 = null;
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        log52.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter(server44, provider45, executor46, executor47, requestInterceptor48, converter49, profiler50, errorHandler51, log52, logLevel55);
        builder40.log = log52;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler59 = builder58.errorHandler;
        retrofit.client.Client.Provider provider60 = null;
        builder58.clientProvider = provider60;
        retrofit.Server server64 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder65 = builder58.setServer(server64);
        retrofit.converter.Converter converter66 = null;
        builder65.converter = converter66;
        retrofit.RestAdapter restAdapter68 = builder65.build();
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler70 = builder69.errorHandler;
        java.util.concurrent.Executor executor71 = null;
        builder69.callbackExecutor = executor71;
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider74 = builder73.clientProvider;
        java.util.concurrent.Executor executor75 = null;
        builder73.callbackExecutor = executor75;
        retrofit.RestAdapter.Builder builder77 = new retrofit.RestAdapter.Builder();
        retrofit.Server server80 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder81 = builder77.setServer(server80);
        java.lang.String str82 = server80.getUrl();
        retrofit.RestAdapter.Builder builder83 = builder73.setServer(server80);
        retrofit.RestAdapter.Builder builder84 = builder69.setServer(server80);
        restAdapter68.server = server80;
        retrofit.client.Client.Provider provider86 = restAdapter68.clientProvider;
        builder40.clientProvider = provider86;
        restAdapter16.clientProvider = provider86;
        retrofit.RestAdapter.Builder builder89 = builder12.setClient(provider86);
        java.util.concurrent.Executor executor90 = null;
        builder12.httpExecutor = executor90;
        retrofit.client.Client.Provider provider92 = builder12.clientProvider;
        restAdapter0.clientProvider = provider92;
        retrofit.Profiler profiler94 = null;
        restAdapter0.profiler = profiler94;
        retrofit.RestAdapter.Log log96 = restAdapter0.log;
        retrofit.client.Client.Provider provider97 = restAdapter0.clientProvider;
        retrofit.client.Client.Provider provider98 = restAdapter0.clientProvider;
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNotNull(restAdapter15);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNull(profiler29);
        org.junit.Assert.assertNull(logLevel34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler41);
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler59);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(restAdapter68);
        org.junit.Assert.assertNull(errorHandler70);
        org.junit.Assert.assertNull(provider74);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "hi!" + "'", str82, "hi!");
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(provider86);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(provider92);
        org.junit.Assert.assertNull(log96);
        org.junit.Assert.assertNotNull(provider97);
        org.junit.Assert.assertNotNull(provider98);
    }

    @Test
    public void test02547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02547");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.Server server5 = builder0.server;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.Server server9 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder10 = builder6.setServer(server9);
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor12 = restAdapter11.callbackExecutor;
        java.util.concurrent.Executor executor13 = restAdapter11.callbackExecutor;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler15 = restAdapter14.errorHandler;
        retrofit.Server server18 = new retrofit.Server("", "");
        restAdapter14.server = server18;
        restAdapter11.server = server18;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        restAdapter11.log = log21;
        retrofit.RestAdapter.Builder builder23 = builder10.setLog(log21);
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder25 = builder10.setLogLevel(logLevel24);
        builder0.logLevel = logLevel24;
        java.util.concurrent.Executor executor27 = builder0.httpExecutor;
        java.util.concurrent.Executor executor28 = builder0.callbackExecutor;
        java.util.concurrent.Executor executor29 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.Server server33 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder34 = builder30.setServer(server33);
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor36 = restAdapter35.callbackExecutor;
        java.util.concurrent.Executor executor37 = restAdapter35.callbackExecutor;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler39 = restAdapter38.errorHandler;
        retrofit.Server server42 = new retrofit.Server("", "");
        restAdapter38.server = server42;
        restAdapter35.server = server42;
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        restAdapter35.log = log45;
        retrofit.RestAdapter.Builder builder47 = builder34.setLog(log45);
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder49 = builder34.setLogLevel(logLevel48);
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider51 = builder50.clientProvider;
        java.util.concurrent.Executor executor52 = null;
        builder50.callbackExecutor = executor52;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.Server server57 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder58 = builder54.setServer(server57);
        java.lang.String str59 = server57.getUrl();
        retrofit.RestAdapter.Builder builder60 = builder50.setServer(server57);
        builder50.ensureSaneDefaults();
        retrofit.Server server62 = null;
        retrofit.client.Client.Provider provider63 = null;
        java.util.concurrent.Executor executor64 = null;
        java.util.concurrent.Executor executor65 = null;
        retrofit.RequestInterceptor requestInterceptor66 = null;
        retrofit.converter.Converter converter67 = null;
        retrofit.Profiler profiler68 = null;
        retrofit.ErrorHandler errorHandler69 = null;
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        log70.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter74 = new retrofit.RestAdapter(server62, provider63, executor64, executor65, requestInterceptor66, converter67, profiler68, errorHandler69, log70, logLevel73);
        retrofit.RestAdapter.RestHandler restHandler75 = restAdapter74.new RestHandler();
        retrofit.RestAdapter.Log log76 = retrofit.RestAdapter.Log.NONE;
        restAdapter74.log = log76;
        retrofit.RestAdapter.Builder builder78 = builder50.setLog(log76);
        retrofit.RestAdapter.Builder builder80 = builder50.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor81 = builder50.requestInterceptor;
        builder49.requestInterceptor = requestInterceptor81;
        retrofit.RestAdapter.Builder builder83 = builder0.setRequestInterceptor(requestInterceptor81);
        retrofit.Server server84 = builder0.server;
        retrofit.Server server85 = builder0.server;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(server5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(executor36);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(provider51);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(requestInterceptor81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(server84);
        org.junit.Assert.assertNotNull(server85);
    }

    @Test
    public void test02548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02548");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = builder0.clientProvider;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server7 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder8 = builder4.setServer(server7);
        java.lang.String str9 = server7.getUrl();
        retrofit.RestAdapter.Builder builder10 = builder0.setServer(server7);
        builder0.ensureSaneDefaults();
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        log20.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel23);
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter24.new RestHandler();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        restAdapter24.log = log26;
        retrofit.RestAdapter.Builder builder28 = builder0.setLog(log26);
        retrofit.RequestInterceptor requestInterceptor29 = null;
        builder28.requestInterceptor = requestInterceptor29;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.Server server34 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder35 = builder31.setServer(server34);
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor37 = restAdapter36.callbackExecutor;
        java.util.concurrent.Executor executor38 = restAdapter36.callbackExecutor;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler40 = restAdapter39.errorHandler;
        retrofit.Server server43 = new retrofit.Server("", "");
        restAdapter39.server = server43;
        restAdapter36.server = server43;
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        restAdapter36.log = log46;
        retrofit.RestAdapter.Builder builder48 = builder35.setLog(log46);
        builder28.log = log46;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler51 = null;
        builder50.errorHandler = errorHandler51;
        retrofit.converter.Converter converter53 = builder50.converter;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.Server server57 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder58 = builder54.setServer(server57);
        retrofit.converter.Converter converter59 = builder54.converter;
        retrofit.RequestInterceptor requestInterceptor60 = builder54.requestInterceptor;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider62 = builder61.clientProvider;
        java.util.concurrent.Executor executor63 = null;
        builder61.callbackExecutor = executor63;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.Server server68 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder69 = builder65.setServer(server68);
        java.lang.String str70 = server68.getUrl();
        retrofit.RestAdapter.Builder builder71 = builder61.setServer(server68);
        builder61.ensureSaneDefaults();
        retrofit.Server server73 = null;
        retrofit.client.Client.Provider provider74 = null;
        java.util.concurrent.Executor executor75 = null;
        java.util.concurrent.Executor executor76 = null;
        retrofit.RequestInterceptor requestInterceptor77 = null;
        retrofit.converter.Converter converter78 = null;
        retrofit.Profiler profiler79 = null;
        retrofit.ErrorHandler errorHandler80 = null;
        retrofit.RestAdapter.Log log81 = retrofit.RestAdapter.Log.NONE;
        log81.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel84 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter85 = new retrofit.RestAdapter(server73, provider74, executor75, executor76, requestInterceptor77, converter78, profiler79, errorHandler80, log81, logLevel84);
        retrofit.RestAdapter.RestHandler restHandler86 = restAdapter85.new RestHandler();
        retrofit.RestAdapter.Log log87 = retrofit.RestAdapter.Log.NONE;
        restAdapter85.log = log87;
        retrofit.RestAdapter.Builder builder89 = builder61.setLog(log87);
        retrofit.RestAdapter.Builder builder91 = builder61.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor92 = builder61.requestInterceptor;
        builder54.requestInterceptor = requestInterceptor92;
        builder50.requestInterceptor = requestInterceptor92;
        builder28.requestInterceptor = requestInterceptor92;
        java.util.concurrent.Executor executor96 = builder28.httpExecutor;
        retrofit.RestAdapter.Log log97 = builder28.log;
        retrofit.ErrorHandler errorHandler98 = builder28.errorHandler;
        retrofit.Profiler profiler99 = builder28.profiler;
        org.junit.Assert.assertNull(provider1);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(converter53);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(converter59);
        org.junit.Assert.assertNull(requestInterceptor60);
        org.junit.Assert.assertNull(provider62);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hi!" + "'", str70, "hi!");
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(log81);
        org.junit.Assert.assertTrue("'" + logLevel84 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel84.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log87);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(requestInterceptor92);
        org.junit.Assert.assertNotNull(executor96);
        org.junit.Assert.assertNotNull(log97);
        org.junit.Assert.assertNotNull(errorHandler98);
        org.junit.Assert.assertNull(profiler99);
    }

    @Test
    public void test02549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02549");
        retrofit.client.Header[] headerArray16 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList17 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList17, headerArray16);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList17, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList17, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("default", "", (java.util.List<retrofit.client.Header>) headerList17, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("default", "", (java.util.List<retrofit.client.Header>) headerList17, typedOutput25);
        java.util.List<retrofit.client.Header> headerList27 = request26.getHeaders();
        retrofit.mime.TypedOutput typedOutput28 = null;
        retrofit.client.Request request29 = new retrofit.client.Request("", "hi!", headerList27, typedOutput28);
        retrofit.mime.TypedOutput typedOutput30 = null;
        retrofit.client.Request request31 = new retrofit.client.Request("hi!", "default", headerList27, typedOutput30);
        retrofit.mime.TypedOutput typedOutput32 = null;
        retrofit.client.Request request33 = new retrofit.client.Request("default", "hi!", headerList27, typedOutput32);
        retrofit.mime.TypedOutput typedOutput34 = null;
        retrofit.client.Request request35 = new retrofit.client.Request("", "hi!", headerList27, typedOutput34);
        org.junit.Assert.assertNotNull(headerArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(headerList27);
    }

    @Test
    public void test02550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02550");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server4 = new retrofit.Server("", "");
        builder0.server = server4;
        java.util.concurrent.Executor executor6 = null;
        builder0.httpExecutor = executor6;
        retrofit.RestAdapter.Builder builder9 = builder0.setServer("default");
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler11 = builder10.errorHandler;
        retrofit.ErrorHandler errorHandler12 = builder10.errorHandler;
        retrofit.RestAdapter.Log log13 = null;
        builder10.log = log13;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        builder10.requestInterceptor = requestInterceptor15;
        retrofit.client.Client.Provider provider17 = null;
        builder10.clientProvider = provider17;
        builder10.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.Server server23 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder24 = builder20.setServer(server23);
        retrofit.Server server25 = builder20.server;
        java.lang.String str26 = server25.getName();
        builder10.server = server25;
        retrofit.RestAdapter.Builder builder28 = builder9.setServer(server25);
        retrofit.client.Client.Provider provider29 = builder28.clientProvider;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler31 = builder30.errorHandler;
        retrofit.Server server34 = new retrofit.Server("", "");
        builder30.server = server34;
        retrofit.client.Client.Provider provider36 = null;
        java.util.concurrent.Executor executor37 = null;
        java.util.concurrent.Executor executor38 = null;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        retrofit.converter.Converter converter40 = null;
        retrofit.Profiler profiler41 = null;
        retrofit.ErrorHandler errorHandler42 = null;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler44 = builder43.errorHandler;
        retrofit.Server server47 = new retrofit.Server("", "");
        builder43.server = server47;
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        builder43.log = log49;
        retrofit.Server server51 = null;
        retrofit.client.Client.Provider provider52 = null;
        java.util.concurrent.Executor executor53 = null;
        java.util.concurrent.Executor executor54 = null;
        retrofit.RequestInterceptor requestInterceptor55 = null;
        retrofit.converter.Converter converter56 = null;
        retrofit.Profiler profiler57 = null;
        retrofit.ErrorHandler errorHandler58 = null;
        retrofit.RestAdapter.Log log59 = retrofit.RestAdapter.Log.NONE;
        log59.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter(server51, provider52, executor53, executor54, requestInterceptor55, converter56, profiler57, errorHandler58, log59, logLevel62);
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter(server34, provider36, executor37, executor38, requestInterceptor39, converter40, profiler41, errorHandler42, log49, logLevel62);
        retrofit.ErrorHandler errorHandler65 = null;
        restAdapter64.errorHandler = errorHandler65;
        retrofit.RestAdapter.RestHandler restHandler67 = restAdapter64.new RestHandler();
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler69 = builder68.errorHandler;
        retrofit.Server server72 = new retrofit.Server("", "");
        builder68.server = server72;
        retrofit.RestAdapter.Log log74 = retrofit.RestAdapter.Log.NONE;
        builder68.log = log74;
        restAdapter64.log = log74;
        log74.log("default");
        builder28.log = log74;
        retrofit.RestAdapter.LogLevel logLevel80 = builder28.logLevel;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(server25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(provider29);
        org.junit.Assert.assertNull(errorHandler31);
        org.junit.Assert.assertNull(errorHandler44);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertNotNull(log59);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler69);
        org.junit.Assert.assertNotNull(log74);
        org.junit.Assert.assertTrue("'" + logLevel80 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel80.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test02551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02551");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.converter.Converter converter2 = null;
        restAdapter0.converter = converter2;
        retrofit.ErrorHandler errorHandler4 = null;
        restAdapter0.errorHandler = errorHandler4;
        retrofit.RestAdapter restAdapter6 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor7 = restAdapter6.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler8 = restAdapter6.new RestHandler();
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor10 = restAdapter9.callbackExecutor;
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor12 = restAdapter11.callbackExecutor;
        java.util.concurrent.Executor executor13 = restAdapter11.callbackExecutor;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler15 = restAdapter14.errorHandler;
        retrofit.Server server18 = new retrofit.Server("", "");
        restAdapter14.server = server18;
        restAdapter11.server = server18;
        restAdapter9.server = server18;
        retrofit.Profiler profiler22 = restAdapter9.profiler;
        retrofit.ErrorHandler errorHandler23 = null;
        restAdapter9.errorHandler = errorHandler23;
        retrofit.Profiler profiler25 = null;
        restAdapter9.profiler = profiler25;
        retrofit.RestAdapter.LogLevel logLevel27 = restAdapter9.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter9.logLevel = logLevel28;
        restAdapter6.logLevel = logLevel28;
        restAdapter0.logLevel = logLevel28;
        retrofit.ErrorHandler errorHandler32 = restAdapter0.errorHandler;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler34 = builder33.errorHandler;
        java.util.concurrent.Executor executor35 = null;
        builder33.callbackExecutor = executor35;
        java.util.concurrent.Executor executor37 = null;
        builder33.httpExecutor = executor37;
        retrofit.Profiler profiler39 = null;
        builder33.profiler = profiler39;
        retrofit.RestAdapter.Builder builder42 = builder33.setServer("hi!");
        retrofit.Profiler profiler43 = builder33.profiler;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider45 = builder44.clientProvider;
        java.util.concurrent.Executor executor46 = null;
        builder44.callbackExecutor = executor46;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.Server server51 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder52 = builder48.setServer(server51);
        java.lang.String str53 = server51.getUrl();
        retrofit.RestAdapter.Builder builder54 = builder44.setServer(server51);
        builder44.ensureSaneDefaults();
        retrofit.Server server56 = null;
        retrofit.client.Client.Provider provider57 = null;
        java.util.concurrent.Executor executor58 = null;
        java.util.concurrent.Executor executor59 = null;
        retrofit.RequestInterceptor requestInterceptor60 = null;
        retrofit.converter.Converter converter61 = null;
        retrofit.Profiler profiler62 = null;
        retrofit.ErrorHandler errorHandler63 = null;
        retrofit.RestAdapter.Log log64 = retrofit.RestAdapter.Log.NONE;
        log64.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel67 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter(server56, provider57, executor58, executor59, requestInterceptor60, converter61, profiler62, errorHandler63, log64, logLevel67);
        retrofit.RestAdapter.RestHandler restHandler69 = restAdapter68.new RestHandler();
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        restAdapter68.log = log70;
        retrofit.RestAdapter.Builder builder72 = builder44.setLog(log70);
        retrofit.RestAdapter.LogLevel logLevel73 = builder44.logLevel;
        retrofit.RestAdapter.Builder builder74 = builder33.setLogLevel(logLevel73);
        restAdapter0.logLevel = logLevel73;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(logLevel27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler32);
        org.junit.Assert.assertNull(errorHandler34);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(profiler43);
        org.junit.Assert.assertNull(provider45);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(log64);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder74);
    }

    @Test
    public void test02552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02552");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server4 = new retrofit.Server("", "");
        builder0.server = server4;
        java.util.concurrent.Executor executor6 = builder0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel7 = null;
        builder0.logLevel = logLevel7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler10 = builder9.errorHandler;
        retrofit.client.Client.Provider provider11 = null;
        builder9.clientProvider = provider11;
        retrofit.Server server15 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder16 = builder9.setServer(server15);
        retrofit.converter.Converter converter17 = null;
        builder16.converter = converter17;
        retrofit.RestAdapter restAdapter19 = builder16.build();
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler21 = builder20.errorHandler;
        java.util.concurrent.Executor executor22 = null;
        builder20.callbackExecutor = executor22;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider25 = builder24.clientProvider;
        java.util.concurrent.Executor executor26 = null;
        builder24.callbackExecutor = executor26;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.Server server31 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder32 = builder28.setServer(server31);
        java.lang.String str33 = server31.getUrl();
        retrofit.RestAdapter.Builder builder34 = builder24.setServer(server31);
        retrofit.RestAdapter.Builder builder35 = builder20.setServer(server31);
        restAdapter19.server = server31;
        java.util.concurrent.Executor executor37 = restAdapter19.httpExecutor;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler39 = builder38.errorHandler;
        retrofit.Server server42 = new retrofit.Server("", "");
        builder38.server = server42;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        builder38.log = log44;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler47 = builder46.errorHandler;
        retrofit.client.Client.Provider provider48 = null;
        builder46.clientProvider = provider48;
        retrofit.Server server52 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder53 = builder46.setServer(server52);
        retrofit.converter.Converter converter54 = null;
        builder53.converter = converter54;
        retrofit.RestAdapter restAdapter56 = builder53.build();
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler58 = builder57.errorHandler;
        java.util.concurrent.Executor executor59 = null;
        builder57.callbackExecutor = executor59;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider62 = builder61.clientProvider;
        java.util.concurrent.Executor executor63 = null;
        builder61.callbackExecutor = executor63;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.Server server68 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder69 = builder65.setServer(server68);
        java.lang.String str70 = server68.getUrl();
        retrofit.RestAdapter.Builder builder71 = builder61.setServer(server68);
        retrofit.RestAdapter.Builder builder72 = builder57.setServer(server68);
        restAdapter56.server = server68;
        java.util.concurrent.Executor executor74 = restAdapter56.httpExecutor;
        builder38.httpExecutor = executor74;
        retrofit.RestAdapter.Builder builder76 = builder0.setExecutors(executor37, executor74);
        retrofit.converter.Converter converter77 = builder76.converter;
        retrofit.converter.Converter converter78 = null;
        builder76.converter = converter78;
        retrofit.client.Client.Provider provider80 = builder76.clientProvider;
        retrofit.RestAdapter.Log log81 = builder76.log;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(restAdapter19);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(provider25);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(executor37);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNull(errorHandler47);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(restAdapter56);
        org.junit.Assert.assertNull(errorHandler58);
        org.junit.Assert.assertNull(provider62);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hi!" + "'", str70, "hi!");
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(executor74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNull(converter77);
        org.junit.Assert.assertNull(provider80);
        org.junit.Assert.assertNull(log81);
    }

    @Test
    public void test02553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02553");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.converter.Converter converter2 = null;
        restAdapter0.converter = converter2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server7 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder8 = builder4.setServer(server7);
        retrofit.Server server9 = builder4.server;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.Server server13 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder14 = builder10.setServer(server13);
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor16 = restAdapter15.callbackExecutor;
        java.util.concurrent.Executor executor17 = restAdapter15.callbackExecutor;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler19 = restAdapter18.errorHandler;
        retrofit.Server server22 = new retrofit.Server("", "");
        restAdapter18.server = server22;
        restAdapter15.server = server22;
        retrofit.RestAdapter.Log log25 = retrofit.RestAdapter.Log.NONE;
        restAdapter15.log = log25;
        retrofit.RestAdapter.Builder builder27 = builder14.setLog(log25);
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder29 = builder14.setLogLevel(logLevel28);
        builder4.logLevel = logLevel28;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.Server server34 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder35 = builder31.setServer(server34);
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor37 = restAdapter36.callbackExecutor;
        java.util.concurrent.Executor executor38 = restAdapter36.callbackExecutor;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler40 = restAdapter39.errorHandler;
        retrofit.Server server43 = new retrofit.Server("", "");
        restAdapter39.server = server43;
        restAdapter36.server = server43;
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        restAdapter36.log = log46;
        retrofit.RestAdapter.Builder builder48 = builder35.setLog(log46);
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder50 = builder35.setLogLevel(logLevel49);
        retrofit.RestAdapter.Log log51 = builder35.log;
        retrofit.RestAdapter restAdapter52 = builder35.build();
        java.util.concurrent.Executor executor53 = restAdapter52.callbackExecutor;
        builder4.callbackExecutor = executor53;
        restAdapter0.httpExecutor = executor53;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler57 = builder56.errorHandler;
        retrofit.Server server60 = new retrofit.Server("", "");
        builder56.server = server60;
        retrofit.RestAdapter.Log log62 = retrofit.RestAdapter.Log.NONE;
        builder56.log = log62;
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler65 = builder64.errorHandler;
        retrofit.client.Client.Provider provider66 = null;
        builder64.clientProvider = provider66;
        retrofit.Server server70 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder71 = builder64.setServer(server70);
        retrofit.converter.Converter converter72 = null;
        builder71.converter = converter72;
        retrofit.RestAdapter restAdapter74 = builder71.build();
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler76 = builder75.errorHandler;
        java.util.concurrent.Executor executor77 = null;
        builder75.callbackExecutor = executor77;
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider80 = builder79.clientProvider;
        java.util.concurrent.Executor executor81 = null;
        builder79.callbackExecutor = executor81;
        retrofit.RestAdapter.Builder builder83 = new retrofit.RestAdapter.Builder();
        retrofit.Server server86 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder87 = builder83.setServer(server86);
        java.lang.String str88 = server86.getUrl();
        retrofit.RestAdapter.Builder builder89 = builder79.setServer(server86);
        retrofit.RestAdapter.Builder builder90 = builder75.setServer(server86);
        restAdapter74.server = server86;
        java.util.concurrent.Executor executor92 = restAdapter74.httpExecutor;
        builder56.httpExecutor = executor92;
        restAdapter0.callbackExecutor = executor92;
        retrofit.RestAdapter.Log log95 = restAdapter0.log;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(server9);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNotNull(log25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNotNull(restAdapter52);
        org.junit.Assert.assertNotNull(executor53);
        org.junit.Assert.assertNull(errorHandler57);
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertNull(errorHandler65);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(restAdapter74);
        org.junit.Assert.assertNull(errorHandler76);
        org.junit.Assert.assertNull(provider80);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "hi!" + "'", str88, "hi!");
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(executor92);
        org.junit.Assert.assertNull(log95);
    }

    @Test
    public void test02554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02554");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter0.getLogLevel();
        retrofit.ErrorHandler errorHandler20 = null;
        restAdapter0.errorHandler = errorHandler20;
        retrofit.client.Client.Provider provider22 = null;
        restAdapter0.clientProvider = provider22;
        retrofit.converter.Converter converter24 = restAdapter0.converter;
        retrofit.RestAdapter.LogLevel logLevel25 = restAdapter0.logLevel;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler27 = builder26.errorHandler;
        retrofit.ErrorHandler errorHandler28 = builder26.errorHandler;
        retrofit.Profiler profiler29 = builder26.profiler;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor31 = restAdapter30.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler32 = restAdapter30.new RestHandler();
        retrofit.Server server35 = new retrofit.Server("hi!", "hi!");
        restAdapter30.server = server35;
        retrofit.RestAdapter.Builder builder37 = builder26.setServer(server35);
        retrofit.converter.Converter converter38 = null;
        builder37.converter = converter38;
        builder37.ensureSaneDefaults();
        retrofit.RestAdapter.Log log41 = null;
        builder37.log = log41;
        retrofit.RequestInterceptor requestInterceptor43 = builder37.requestInterceptor;
        java.util.concurrent.Executor executor44 = builder37.httpExecutor;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler46 = builder45.errorHandler;
        retrofit.ErrorHandler errorHandler47 = builder45.errorHandler;
        retrofit.RestAdapter.Log log48 = null;
        builder45.log = log48;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        builder45.requestInterceptor = requestInterceptor50;
        retrofit.client.Client.Provider provider52 = null;
        builder45.clientProvider = provider52;
        builder45.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.Server server58 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder59 = builder55.setServer(server58);
        retrofit.Server server60 = builder55.server;
        java.lang.String str61 = server60.getName();
        builder45.server = server60;
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        builder45.log = log63;
        builder37.log = log63;
        restAdapter0.log = log63;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(converter24);
        org.junit.Assert.assertNull(logLevel25);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertNull(profiler29);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(requestInterceptor43);
        org.junit.Assert.assertNotNull(executor44);
        org.junit.Assert.assertNull(errorHandler46);
        org.junit.Assert.assertNull(errorHandler47);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(server60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertNotNull(log63);
    }

    @Test
    public void test02555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02555");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        builder0.requestInterceptor = requestInterceptor5;
        retrofit.client.Client.Provider provider7 = null;
        builder0.clientProvider = provider7;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler11 = builder10.errorHandler;
        retrofit.client.Client.Provider provider12 = null;
        builder10.clientProvider = provider12;
        retrofit.Server server16 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder17 = builder10.setServer(server16);
        java.util.concurrent.Executor executor18 = builder10.httpExecutor;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler20 = builder19.errorHandler;
        retrofit.ErrorHandler errorHandler21 = builder19.errorHandler;
        retrofit.Profiler profiler22 = builder19.profiler;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor24 = restAdapter23.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter23.new RestHandler();
        retrofit.Server server28 = new retrofit.Server("hi!", "hi!");
        restAdapter23.server = server28;
        retrofit.RestAdapter.Builder builder30 = builder19.setServer(server28);
        retrofit.converter.Converter converter31 = null;
        builder30.converter = converter31;
        retrofit.Server server33 = null;
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        log41.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter(server33, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log41, logLevel44);
        builder30.logLevel = logLevel44;
        builder30.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor48 = builder30.requestInterceptor;
        java.util.concurrent.Executor executor49 = null;
        builder30.callbackExecutor = executor49;
        retrofit.converter.Converter converter51 = builder30.converter;
        builder10.converter = converter51;
        builder0.converter = converter51;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(requestInterceptor48);
        org.junit.Assert.assertNotNull(converter51);
    }

    @Test
    public void test02556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02556");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.converter.Converter converter3 = null;
        builder0.converter = converter3;
        retrofit.converter.Converter converter5 = null;
        builder0.converter = converter5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider8 = builder7.clientProvider;
        java.util.concurrent.Executor executor9 = null;
        builder7.callbackExecutor = executor9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.Server server14 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder15 = builder11.setServer(server14);
        java.lang.String str16 = server14.getUrl();
        retrofit.RestAdapter.Builder builder17 = builder7.setServer(server14);
        builder7.ensureSaneDefaults();
        retrofit.Server server19 = null;
        retrofit.client.Client.Provider provider20 = null;
        java.util.concurrent.Executor executor21 = null;
        java.util.concurrent.Executor executor22 = null;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        retrofit.converter.Converter converter24 = null;
        retrofit.Profiler profiler25 = null;
        retrofit.ErrorHandler errorHandler26 = null;
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        log27.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter(server19, provider20, executor21, executor22, requestInterceptor23, converter24, profiler25, errorHandler26, log27, logLevel30);
        retrofit.RestAdapter.RestHandler restHandler32 = restAdapter31.new RestHandler();
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        restAdapter31.log = log33;
        retrofit.RestAdapter.Builder builder35 = builder7.setLog(log33);
        retrofit.RestAdapter.Builder builder37 = builder7.setServer("hi!");
        retrofit.Profiler profiler38 = null;
        builder7.profiler = profiler38;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler41 = restAdapter40.new RestHandler();
        retrofit.client.Client.Provider provider42 = restAdapter40.clientProvider;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler44 = builder43.errorHandler;
        retrofit.Server server47 = new retrofit.Server("", "");
        builder43.server = server47;
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        builder43.log = log49;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler52 = builder51.errorHandler;
        retrofit.client.Client.Provider provider53 = null;
        builder51.clientProvider = provider53;
        retrofit.Server server57 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder58 = builder51.setServer(server57);
        retrofit.converter.Converter converter59 = null;
        builder58.converter = converter59;
        retrofit.RestAdapter restAdapter61 = builder58.build();
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler63 = builder62.errorHandler;
        java.util.concurrent.Executor executor64 = null;
        builder62.callbackExecutor = executor64;
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider67 = builder66.clientProvider;
        java.util.concurrent.Executor executor68 = null;
        builder66.callbackExecutor = executor68;
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        retrofit.Server server73 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder74 = builder70.setServer(server73);
        java.lang.String str75 = server73.getUrl();
        retrofit.RestAdapter.Builder builder76 = builder66.setServer(server73);
        retrofit.RestAdapter.Builder builder77 = builder62.setServer(server73);
        restAdapter61.server = server73;
        java.util.concurrent.Executor executor79 = restAdapter61.httpExecutor;
        builder43.httpExecutor = executor79;
        restAdapter40.callbackExecutor = executor79;
        builder7.callbackExecutor = executor79;
        builder0.httpExecutor = executor79;
        retrofit.client.Client.Provider provider84 = builder0.clientProvider;
        retrofit.Profiler profiler85 = null;
        builder0.profiler = profiler85;
        retrofit.Profiler profiler87 = builder0.profiler;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(provider42);
        org.junit.Assert.assertNull(errorHandler44);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertNull(errorHandler52);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(restAdapter61);
        org.junit.Assert.assertNull(errorHandler63);
        org.junit.Assert.assertNull(provider67);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "hi!" + "'", str75, "hi!");
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(executor79);
        org.junit.Assert.assertNull(provider84);
        org.junit.Assert.assertNull(profiler87);
    }

    @Test
    public void test02557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02557");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        restAdapter5.log = log15;
        retrofit.RestAdapter.Builder builder17 = builder4.setLog(log15);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder19 = builder4.setLogLevel(logLevel18);
        retrofit.Profiler profiler20 = null;
        builder19.profiler = profiler20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.Server server25 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder26 = builder22.setServer(server25);
        retrofit.RestAdapter.LogLevel logLevel27 = builder26.logLevel;
        retrofit.RestAdapter.Builder builder28 = builder19.setLogLevel(logLevel27);
        retrofit.RestAdapter restAdapter29 = builder19.build();
        retrofit.Server server32 = new retrofit.Server("", "default");
        builder19.server = server32;
        java.lang.String str34 = server32.getName();
        java.lang.String str35 = server32.getUrl();
        java.lang.String str36 = server32.getName();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(restAdapter29);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "default" + "'", str34, "default");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "default" + "'", str36, "default");
    }

    @Test
    public void test02558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02558");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = null;
        restAdapter0.httpExecutor = executor2;
        retrofit.RestAdapter.RestHandler restHandler4 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter0.logLevel;
        retrofit.ErrorHandler errorHandler6 = null;
        restAdapter0.errorHandler = errorHandler6;
        retrofit.Server server8 = restAdapter0.server;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler10 = null;
        builder9.errorHandler = errorHandler10;
        retrofit.ErrorHandler errorHandler12 = builder9.errorHandler;
        retrofit.RestAdapter.Builder builder14 = builder9.setServer("hi!");
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler16 = builder15.errorHandler;
        retrofit.ErrorHandler errorHandler17 = builder15.errorHandler;
        retrofit.Profiler profiler18 = builder15.profiler;
        retrofit.RestAdapter.Log log19 = builder15.log;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.FULL;
        builder15.logLevel = logLevel20;
        retrofit.RestAdapter.Builder builder22 = builder14.setLogLevel(logLevel20);
        retrofit.Server server25 = new retrofit.Server("hi!", "default");
        retrofit.RestAdapter.Builder builder26 = builder14.setServer(server25);
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler28 = builder27.errorHandler;
        retrofit.client.Client.Provider provider29 = null;
        builder27.clientProvider = provider29;
        retrofit.Server server33 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder34 = builder27.setServer(server33);
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor36 = restAdapter35.callbackExecutor;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor38 = restAdapter37.callbackExecutor;
        java.util.concurrent.Executor executor39 = restAdapter37.callbackExecutor;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler41 = restAdapter40.errorHandler;
        retrofit.Server server44 = new retrofit.Server("", "");
        restAdapter40.server = server44;
        restAdapter37.server = server44;
        restAdapter35.server = server44;
        retrofit.Profiler profiler48 = restAdapter35.profiler;
        retrofit.ErrorHandler errorHandler49 = null;
        restAdapter35.errorHandler = errorHandler49;
        retrofit.Profiler profiler51 = null;
        restAdapter35.profiler = profiler51;
        retrofit.RestAdapter.RestHandler restHandler53 = restAdapter35.new RestHandler();
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.Server server57 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder58 = builder54.setServer(server57);
        retrofit.converter.Converter converter59 = builder54.converter;
        retrofit.RequestInterceptor requestInterceptor60 = builder54.requestInterceptor;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider62 = builder61.clientProvider;
        java.util.concurrent.Executor executor63 = null;
        builder61.callbackExecutor = executor63;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.Server server68 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder69 = builder65.setServer(server68);
        java.lang.String str70 = server68.getUrl();
        retrofit.RestAdapter.Builder builder71 = builder61.setServer(server68);
        builder61.ensureSaneDefaults();
        retrofit.Server server73 = null;
        retrofit.client.Client.Provider provider74 = null;
        java.util.concurrent.Executor executor75 = null;
        java.util.concurrent.Executor executor76 = null;
        retrofit.RequestInterceptor requestInterceptor77 = null;
        retrofit.converter.Converter converter78 = null;
        retrofit.Profiler profiler79 = null;
        retrofit.ErrorHandler errorHandler80 = null;
        retrofit.RestAdapter.Log log81 = retrofit.RestAdapter.Log.NONE;
        log81.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel84 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter85 = new retrofit.RestAdapter(server73, provider74, executor75, executor76, requestInterceptor77, converter78, profiler79, errorHandler80, log81, logLevel84);
        retrofit.RestAdapter.RestHandler restHandler86 = restAdapter85.new RestHandler();
        retrofit.RestAdapter.Log log87 = retrofit.RestAdapter.Log.NONE;
        restAdapter85.log = log87;
        retrofit.RestAdapter.Builder builder89 = builder61.setLog(log87);
        retrofit.RestAdapter.Builder builder91 = builder61.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor92 = builder61.requestInterceptor;
        builder54.requestInterceptor = requestInterceptor92;
        restAdapter35.requestInterceptor = requestInterceptor92;
        builder27.requestInterceptor = requestInterceptor92;
        builder14.requestInterceptor = requestInterceptor92;
        restAdapter0.requestInterceptor = requestInterceptor92;
        retrofit.RequestInterceptor requestInterceptor98 = restAdapter0.requestInterceptor;
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(server8);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(profiler18);
        org.junit.Assert.assertNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(executor36);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNull(errorHandler41);
        org.junit.Assert.assertNull(profiler48);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(converter59);
        org.junit.Assert.assertNull(requestInterceptor60);
        org.junit.Assert.assertNull(provider62);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hi!" + "'", str70, "hi!");
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(log81);
        org.junit.Assert.assertTrue("'" + logLevel84 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel84.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log87);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(requestInterceptor92);
        org.junit.Assert.assertNotNull(requestInterceptor98);
    }

    @Test
    public void test02559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02559");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        java.util.List<retrofit.client.Header> headerList11 = request10.getHeaders();
        java.util.List<retrofit.client.Header> headerList12 = request10.getHeaders();
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("hi!", "hi!", headerList12, typedOutput13);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("default", "hi!", headerList12, typedOutput15);
        java.lang.String str17 = request16.getMethod();
        java.lang.String str18 = request16.getUrl();
        retrofit.mime.TypedOutput typedOutput19 = request16.getBody();
        retrofit.mime.TypedOutput typedOutput20 = request16.getBody();
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(headerList11);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "default" + "'", str17, "default");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNull(typedOutput19);
        org.junit.Assert.assertNull(typedOutput20);
    }

    @Test
    public void test02560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02560");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = null;
        restAdapter0.httpExecutor = executor2;
        java.util.concurrent.Executor executor4 = restAdapter0.httpExecutor;
        java.util.concurrent.Executor executor5 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler7 = builder6.errorHandler;
        java.util.concurrent.Executor executor8 = builder6.callbackExecutor;
        retrofit.RestAdapter.Builder builder10 = builder6.setServer("hi!");
        builder10.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler13 = builder12.errorHandler;
        retrofit.Server server16 = new retrofit.Server("", "");
        builder12.server = server16;
        java.util.concurrent.Executor executor18 = builder12.callbackExecutor;
        retrofit.Server server19 = null;
        builder12.server = server19;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.NONE;
        builder12.logLevel = logLevel21;
        retrofit.RestAdapter.Builder builder23 = builder10.setLogLevel(logLevel21);
        boolean boolean24 = logLevel21.log();
        restAdapter0.logLevel = logLevel21;
        retrofit.Profiler profiler26 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler27 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(profiler26);
    }

    @Test
    public void test02561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02561");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        restAdapter12.log = log14;
        retrofit.converter.Converter converter16 = null;
        restAdapter12.converter = converter16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter12.getLogLevel();
        retrofit.ErrorHandler errorHandler19 = restAdapter12.errorHandler;
        retrofit.Profiler profiler20 = restAdapter12.profiler;
        retrofit.RequestInterceptor requestInterceptor21 = restAdapter12.requestInterceptor;
        java.util.concurrent.Executor executor22 = restAdapter12.callbackExecutor;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler24 = builder23.errorHandler;
        retrofit.Server server27 = new retrofit.Server("", "");
        builder23.server = server27;
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        builder23.log = log29;
        retrofit.RestAdapter.LogLevel logLevel31 = builder23.logLevel;
        java.util.concurrent.Executor executor32 = builder23.callbackExecutor;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler34 = null;
        builder33.errorHandler = errorHandler34;
        retrofit.ErrorHandler errorHandler36 = builder33.errorHandler;
        retrofit.RestAdapter.Builder builder38 = builder33.setServer("hi!");
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler40 = builder39.errorHandler;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.Server server44 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder45 = builder41.setServer(server44);
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor47 = restAdapter46.callbackExecutor;
        java.util.concurrent.Executor executor48 = restAdapter46.callbackExecutor;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler50 = restAdapter49.errorHandler;
        retrofit.Server server53 = new retrofit.Server("", "");
        restAdapter49.server = server53;
        restAdapter46.server = server53;
        retrofit.RestAdapter.Log log56 = retrofit.RestAdapter.Log.NONE;
        restAdapter46.log = log56;
        retrofit.RestAdapter.Builder builder58 = builder45.setLog(log56);
        retrofit.RestAdapter.Builder builder59 = builder39.setLog(log56);
        builder33.log = log56;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler62 = builder61.errorHandler;
        retrofit.client.Client.Provider provider63 = null;
        builder61.clientProvider = provider63;
        retrofit.Server server67 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder68 = builder61.setServer(server67);
        retrofit.converter.Converter converter69 = null;
        builder68.converter = converter69;
        retrofit.RestAdapter restAdapter71 = builder68.build();
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler73 = builder72.errorHandler;
        java.util.concurrent.Executor executor74 = null;
        builder72.callbackExecutor = executor74;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider77 = builder76.clientProvider;
        java.util.concurrent.Executor executor78 = null;
        builder76.callbackExecutor = executor78;
        retrofit.RestAdapter.Builder builder80 = new retrofit.RestAdapter.Builder();
        retrofit.Server server83 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder84 = builder80.setServer(server83);
        java.lang.String str85 = server83.getUrl();
        retrofit.RestAdapter.Builder builder86 = builder76.setServer(server83);
        retrofit.RestAdapter.Builder builder87 = builder72.setServer(server83);
        restAdapter71.server = server83;
        retrofit.client.Client.Provider provider89 = restAdapter71.clientProvider;
        retrofit.RestAdapter.Builder builder90 = builder33.setClient(provider89);
        retrofit.RestAdapter.Builder builder91 = builder23.setClient(provider89);
        retrofit.RestAdapter.LogLevel logLevel92 = builder23.logLevel;
        boolean boolean93 = logLevel92.log();
        restAdapter12.setLogLevel(logLevel92);
        boolean boolean95 = logLevel92.log();
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(profiler20);
        org.junit.Assert.assertNull(requestInterceptor21);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(errorHandler36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(executor47);
        org.junit.Assert.assertNull(executor48);
        org.junit.Assert.assertNull(errorHandler50);
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(errorHandler62);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(restAdapter71);
        org.junit.Assert.assertNull(errorHandler73);
        org.junit.Assert.assertNull(provider77);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "hi!" + "'", str85, "hi!");
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(provider89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertTrue("'" + logLevel92 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel92.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test02562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02562");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        java.util.concurrent.Executor executor16 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor17 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor19 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler21 = builder20.errorHandler;
        java.util.concurrent.Executor executor22 = builder20.callbackExecutor;
        retrofit.RestAdapter.Builder builder24 = builder20.setServer("hi!");
        builder24.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler27 = builder26.errorHandler;
        retrofit.ErrorHandler errorHandler28 = builder26.errorHandler;
        retrofit.RestAdapter.Log log29 = null;
        builder26.log = log29;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean32 = logLevel31.log();
        builder26.logLevel = logLevel31;
        retrofit.ErrorHandler errorHandler34 = builder26.errorHandler;
        retrofit.RestAdapter.Builder builder36 = builder26.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor37 = null;
        builder36.requestInterceptor = requestInterceptor37;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler40 = builder39.errorHandler;
        retrofit.client.Client.Provider provider41 = null;
        builder39.clientProvider = provider41;
        retrofit.Server server45 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder46 = builder39.setServer(server45);
        retrofit.client.Client.Provider provider47 = null;
        java.util.concurrent.Executor executor48 = null;
        java.util.concurrent.Executor executor49 = null;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        retrofit.converter.Converter converter51 = null;
        retrofit.Profiler profiler52 = null;
        retrofit.ErrorHandler errorHandler53 = null;
        retrofit.Server server54 = null;
        retrofit.client.Client.Provider provider55 = null;
        java.util.concurrent.Executor executor56 = null;
        java.util.concurrent.Executor executor57 = null;
        retrofit.RequestInterceptor requestInterceptor58 = null;
        retrofit.converter.Converter converter59 = null;
        retrofit.Profiler profiler60 = null;
        retrofit.ErrorHandler errorHandler61 = null;
        retrofit.RestAdapter.Log log62 = retrofit.RestAdapter.Log.NONE;
        log62.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel65 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter(server54, provider55, executor56, executor57, requestInterceptor58, converter59, profiler60, errorHandler61, log62, logLevel65);
        retrofit.RestAdapter.LogLevel logLevel67 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter(server45, provider47, executor48, executor49, requestInterceptor50, converter51, profiler52, errorHandler53, log62, logLevel67);
        log62.log("");
        builder36.log = log62;
        retrofit.RestAdapter.Log log72 = builder36.log;
        retrofit.RestAdapter.Builder builder73 = builder24.setLog(log72);
        java.util.concurrent.Executor executor74 = builder24.callbackExecutor;
        restAdapter0.callbackExecutor = executor74;
        retrofit.Profiler profiler76 = restAdapter0.profiler;
        java.lang.Throwable throwable77 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable77, "default");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(errorHandler34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(executor74);
        org.junit.Assert.assertNull(profiler76);
    }

    @Test
    public void test02563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02563");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        builder0.requestInterceptor = requestInterceptor2;
        java.util.concurrent.Executor executor4 = builder0.httpExecutor;
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        log5.log("default");
        builder0.log = log5;
        retrofit.converter.Converter converter9 = null;
        builder0.converter = converter9;
        retrofit.Profiler profiler11 = builder0.profiler;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler13 = builder12.errorHandler;
        retrofit.Server server16 = new retrofit.Server("", "");
        builder12.server = server16;
        java.util.concurrent.Executor executor18 = null;
        builder12.httpExecutor = executor18;
        retrofit.RestAdapter.Builder builder21 = builder12.setServer("default");
        retrofit.RestAdapter restAdapter22 = builder12.build();
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler24 = builder23.errorHandler;
        java.util.concurrent.Executor executor25 = builder23.callbackExecutor;
        retrofit.RestAdapter.Builder builder27 = builder23.setServer("hi!");
        builder27.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler30 = builder29.errorHandler;
        retrofit.ErrorHandler errorHandler31 = builder29.errorHandler;
        retrofit.RestAdapter.Log log32 = null;
        builder29.log = log32;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        builder29.logLevel = logLevel34;
        retrofit.ErrorHandler errorHandler37 = builder29.errorHandler;
        retrofit.RestAdapter.Builder builder39 = builder29.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor40 = null;
        builder39.requestInterceptor = requestInterceptor40;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler43 = builder42.errorHandler;
        retrofit.client.Client.Provider provider44 = null;
        builder42.clientProvider = provider44;
        retrofit.Server server48 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder49 = builder42.setServer(server48);
        retrofit.client.Client.Provider provider50 = null;
        java.util.concurrent.Executor executor51 = null;
        java.util.concurrent.Executor executor52 = null;
        retrofit.RequestInterceptor requestInterceptor53 = null;
        retrofit.converter.Converter converter54 = null;
        retrofit.Profiler profiler55 = null;
        retrofit.ErrorHandler errorHandler56 = null;
        retrofit.Server server57 = null;
        retrofit.client.Client.Provider provider58 = null;
        java.util.concurrent.Executor executor59 = null;
        java.util.concurrent.Executor executor60 = null;
        retrofit.RequestInterceptor requestInterceptor61 = null;
        retrofit.converter.Converter converter62 = null;
        retrofit.Profiler profiler63 = null;
        retrofit.ErrorHandler errorHandler64 = null;
        retrofit.RestAdapter.Log log65 = retrofit.RestAdapter.Log.NONE;
        log65.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel68 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter(server57, provider58, executor59, executor60, requestInterceptor61, converter62, profiler63, errorHandler64, log65, logLevel68);
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter(server48, provider50, executor51, executor52, requestInterceptor53, converter54, profiler55, errorHandler56, log65, logLevel70);
        log65.log("");
        builder39.log = log65;
        retrofit.RestAdapter.Log log75 = builder39.log;
        retrofit.RestAdapter.Builder builder76 = builder27.setLog(log75);
        retrofit.RestAdapter.Builder builder77 = builder12.setLog(log75);
        java.util.concurrent.Executor executor78 = builder77.callbackExecutor;
        builder0.callbackExecutor = executor78;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNull(profiler11);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(restAdapter22);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(errorHandler30);
        org.junit.Assert.assertNull(errorHandler31);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(errorHandler43);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(log65);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(executor78);
    }

    @Test
    public void test02564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02564");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.Server server5 = builder0.server;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.Server server9 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder10 = builder6.setServer(server9);
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor12 = restAdapter11.callbackExecutor;
        java.util.concurrent.Executor executor13 = restAdapter11.callbackExecutor;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler15 = restAdapter14.errorHandler;
        retrofit.Server server18 = new retrofit.Server("", "");
        restAdapter14.server = server18;
        restAdapter11.server = server18;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        restAdapter11.log = log21;
        retrofit.RestAdapter.Builder builder23 = builder10.setLog(log21);
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder25 = builder10.setLogLevel(logLevel24);
        builder0.logLevel = logLevel24;
        java.util.concurrent.Executor executor27 = builder0.callbackExecutor;
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        log28.log("");
        retrofit.RestAdapter.Builder builder31 = builder0.setLog(log28);
        retrofit.RestAdapter restAdapter32 = builder31.build();
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler34 = builder33.errorHandler;
        retrofit.Server server37 = new retrofit.Server("", "");
        builder33.server = server37;
        retrofit.client.Client.Provider provider39 = null;
        java.util.concurrent.Executor executor40 = null;
        java.util.concurrent.Executor executor41 = null;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        retrofit.converter.Converter converter43 = null;
        retrofit.Profiler profiler44 = null;
        retrofit.ErrorHandler errorHandler45 = null;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler47 = builder46.errorHandler;
        retrofit.Server server50 = new retrofit.Server("", "");
        builder46.server = server50;
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        builder46.log = log52;
        retrofit.Server server54 = null;
        retrofit.client.Client.Provider provider55 = null;
        java.util.concurrent.Executor executor56 = null;
        java.util.concurrent.Executor executor57 = null;
        retrofit.RequestInterceptor requestInterceptor58 = null;
        retrofit.converter.Converter converter59 = null;
        retrofit.Profiler profiler60 = null;
        retrofit.ErrorHandler errorHandler61 = null;
        retrofit.RestAdapter.Log log62 = retrofit.RestAdapter.Log.NONE;
        log62.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel65 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter(server54, provider55, executor56, executor57, requestInterceptor58, converter59, profiler60, errorHandler61, log62, logLevel65);
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter(server37, provider39, executor40, executor41, requestInterceptor42, converter43, profiler44, errorHandler45, log52, logLevel65);
        retrofit.ErrorHandler errorHandler68 = null;
        restAdapter67.errorHandler = errorHandler68;
        retrofit.RestAdapter.RestHandler restHandler70 = restAdapter67.new RestHandler();
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler72 = builder71.errorHandler;
        retrofit.Server server75 = new retrofit.Server("", "");
        builder71.server = server75;
        retrofit.RestAdapter.Log log77 = retrofit.RestAdapter.Log.NONE;
        builder71.log = log77;
        restAdapter67.log = log77;
        java.util.concurrent.Executor executor80 = restAdapter67.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler81 = restAdapter67.new RestHandler();
        retrofit.client.Header[] headerArray84 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList85 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList85, headerArray84);
        retrofit.mime.TypedOutput typedOutput87 = null;
        retrofit.client.Request request88 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList85, typedOutput87);
        java.lang.String str89 = request88.getMethod();
        java.util.List<retrofit.client.Header> headerList90 = request88.getHeaders();
        java.lang.String str91 = request88.getMethod();
        java.util.List<retrofit.client.Header> headerList92 = request88.getHeaders();
        retrofit.client.Request request93 = restAdapter67.logAndReplaceRequest(request88);
        java.lang.String str94 = request88.getUrl();
        retrofit.client.Request request95 = restAdapter32.logAndReplaceRequest(request88);
        java.lang.String str96 = request95.getUrl();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(server5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(restAdapter32);
        org.junit.Assert.assertNull(errorHandler34);
        org.junit.Assert.assertNull(errorHandler47);
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler72);
        org.junit.Assert.assertNotNull(log77);
        org.junit.Assert.assertNull(executor80);
        org.junit.Assert.assertNotNull(headerArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNotNull(headerList90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertNotNull(headerList92);
        org.junit.Assert.assertNotNull(request93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "hi!" + "'", str94, "hi!");
        org.junit.Assert.assertNotNull(request95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "hi!" + "'", str96, "hi!");
    }

    @Test
    public void test02565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02565");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList7, typedOutput11);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("default", "hi!", (java.util.List<retrofit.client.Header>) headerList7, typedOutput13);
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test02566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02566");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = builder0.callbackExecutor;
        java.util.concurrent.Executor executor3 = builder0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel4 = builder0.logLevel;
        retrofit.converter.Converter converter5 = null;
        builder0.converter = converter5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler8 = builder7.errorHandler;
        retrofit.Server server11 = new retrofit.Server("", "");
        builder7.server = server11;
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        builder7.log = log13;
        retrofit.RestAdapter.LogLevel logLevel15 = builder7.logLevel;
        builder0.logLevel = logLevel15;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler18 = builder17.errorHandler;
        retrofit.Server server21 = new retrofit.Server("", "");
        builder17.server = server21;
        retrofit.client.Client.Provider provider23 = builder17.clientProvider;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler25 = builder24.errorHandler;
        java.util.concurrent.Executor executor26 = null;
        builder24.callbackExecutor = executor26;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider29 = builder28.clientProvider;
        java.util.concurrent.Executor executor30 = null;
        builder28.callbackExecutor = executor30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.Server server35 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder36 = builder32.setServer(server35);
        java.lang.String str37 = server35.getUrl();
        retrofit.RestAdapter.Builder builder38 = builder28.setServer(server35);
        retrofit.RestAdapter.Builder builder39 = builder24.setServer(server35);
        retrofit.RestAdapter.Builder builder40 = builder17.setServer(server35);
        builder0.server = server35;
        java.util.concurrent.Executor executor42 = builder0.callbackExecutor;
        java.util.concurrent.Executor executor43 = builder0.httpExecutor;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNotNull(log13);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler18);
        org.junit.Assert.assertNull(provider23);
        org.junit.Assert.assertNull(errorHandler25);
        org.junit.Assert.assertNull(provider29);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(executor42);
        org.junit.Assert.assertNull(executor43);
    }

    @Test
    public void test02567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02567");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.converter.Converter converter14 = restAdapter0.converter;
        retrofit.ErrorHandler errorHandler15 = null;
        restAdapter0.errorHandler = errorHandler15;
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter0.new RestHandler();
        retrofit.converter.Converter converter19 = restAdapter0.converter;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.Server server23 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder24 = builder20.setServer(server23);
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor26 = restAdapter25.callbackExecutor;
        java.util.concurrent.Executor executor27 = restAdapter25.callbackExecutor;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler29 = restAdapter28.errorHandler;
        retrofit.Server server32 = new retrofit.Server("", "");
        restAdapter28.server = server32;
        restAdapter25.server = server32;
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        restAdapter25.log = log35;
        retrofit.RestAdapter.Builder builder37 = builder24.setLog(log35);
        log35.log("");
        restAdapter0.log = log35;
        retrofit.RequestInterceptor requestInterceptor41 = restAdapter0.requestInterceptor;
        retrofit.client.Response response43 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response45 = restAdapter0.logAndReplaceResponse("default", response43, (long) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(requestInterceptor41);
    }

    @Test
    public void test02568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02568");
        retrofit.client.Header[] headerArray14 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList15 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList15, headerArray14);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList15, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList15, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList15, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList15, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("default", "hi!", (java.util.List<retrofit.client.Header>) headerList15, typedOutput25);
        java.util.List<retrofit.client.Header> headerList27 = request26.getHeaders();
        retrofit.mime.TypedOutput typedOutput28 = null;
        retrofit.client.Request request29 = new retrofit.client.Request("default", "hi!", headerList27, typedOutput28);
        java.util.List<retrofit.client.Header> headerList30 = request29.getHeaders();
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("", "", headerList30, typedOutput31);
        java.lang.String str33 = request32.getMethod();
        org.junit.Assert.assertNotNull(headerArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(headerList27);
        org.junit.Assert.assertNotNull(headerList30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
    }

    @Test
    public void test02569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02569");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = builder0.callbackExecutor;
        java.util.concurrent.Executor executor3 = builder0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel4 = builder0.logLevel;
        retrofit.RequestInterceptor requestInterceptor5 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler7 = null;
        builder6.errorHandler = errorHandler7;
        retrofit.ErrorHandler errorHandler9 = builder6.errorHandler;
        retrofit.ErrorHandler errorHandler10 = builder6.errorHandler;
        retrofit.RequestInterceptor requestInterceptor11 = builder6.requestInterceptor;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler13 = builder12.errorHandler;
        java.util.concurrent.Executor executor14 = builder12.callbackExecutor;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.Server server18 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder19 = builder15.setServer(server18);
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor21 = restAdapter20.callbackExecutor;
        java.util.concurrent.Executor executor22 = restAdapter20.callbackExecutor;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler24 = restAdapter23.errorHandler;
        retrofit.Server server27 = new retrofit.Server("", "");
        restAdapter23.server = server27;
        restAdapter20.server = server27;
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        restAdapter20.log = log30;
        retrofit.RestAdapter.Builder builder32 = builder19.setLog(log30);
        retrofit.converter.Converter converter33 = null;
        builder32.converter = converter33;
        retrofit.RestAdapter.Builder builder36 = builder32.setServer("hi!");
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor38 = restAdapter37.callbackExecutor;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor40 = restAdapter39.callbackExecutor;
        java.util.concurrent.Executor executor41 = restAdapter39.callbackExecutor;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler43 = restAdapter42.errorHandler;
        retrofit.Server server46 = new retrofit.Server("", "");
        restAdapter42.server = server46;
        restAdapter39.server = server46;
        restAdapter37.server = server46;
        retrofit.Profiler profiler50 = restAdapter37.profiler;
        retrofit.ErrorHandler errorHandler51 = null;
        restAdapter37.errorHandler = errorHandler51;
        retrofit.Profiler profiler53 = null;
        restAdapter37.profiler = profiler53;
        retrofit.RequestInterceptor requestInterceptor55 = null;
        restAdapter37.requestInterceptor = requestInterceptor55;
        retrofit.RestAdapter.LogLevel logLevel57 = restAdapter37.getLogLevel();
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.Server server61 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder62 = builder58.setServer(server61);
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor64 = restAdapter63.callbackExecutor;
        java.util.concurrent.Executor executor65 = restAdapter63.callbackExecutor;
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler67 = restAdapter66.errorHandler;
        retrofit.Server server70 = new retrofit.Server("", "");
        restAdapter66.server = server70;
        restAdapter63.server = server70;
        retrofit.RestAdapter.Log log73 = retrofit.RestAdapter.Log.NONE;
        restAdapter63.log = log73;
        retrofit.RestAdapter.Builder builder75 = builder62.setLog(log73);
        retrofit.RestAdapter.LogLevel logLevel76 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder77 = builder62.setLogLevel(logLevel76);
        retrofit.Profiler profiler78 = null;
        builder77.profiler = profiler78;
        retrofit.converter.Converter converter80 = null;
        builder77.converter = converter80;
        retrofit.ErrorHandler errorHandler82 = null;
        builder77.errorHandler = errorHandler82;
        retrofit.RestAdapter restAdapter84 = builder77.build();
        retrofit.ErrorHandler errorHandler85 = builder77.errorHandler;
        restAdapter37.errorHandler = errorHandler85;
        retrofit.RestAdapter.Builder builder87 = builder32.setErrorHandler(errorHandler85);
        retrofit.RestAdapter.Builder builder88 = builder12.setErrorHandler(errorHandler85);
        builder6.errorHandler = errorHandler85;
        retrofit.RestAdapter.Builder builder90 = builder0.setErrorHandler(errorHandler85);
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNull(executor40);
        org.junit.Assert.assertNull(executor41);
        org.junit.Assert.assertNull(errorHandler43);
        org.junit.Assert.assertNull(profiler50);
        org.junit.Assert.assertNull(logLevel57);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(executor64);
        org.junit.Assert.assertNull(executor65);
        org.junit.Assert.assertNull(errorHandler67);
        org.junit.Assert.assertNotNull(log73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(restAdapter84);
        org.junit.Assert.assertNotNull(errorHandler85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
    }

    @Test
    public void test02570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02570");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter3 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler4 = restAdapter3.errorHandler;
        retrofit.Server server7 = new retrofit.Server("", "");
        restAdapter3.server = server7;
        restAdapter0.server = server7;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.Server server14 = new retrofit.Server("", "");
        restAdapter10.server = server14;
        restAdapter0.server = server14;
        retrofit.RestAdapter.Log log17 = restAdapter0.log;
        retrofit.Profiler profiler18 = restAdapter0.profiler;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.Server server22 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder23 = builder19.setServer(server22);
        java.lang.String str24 = server22.getUrl();
        restAdapter0.server = server22;
        retrofit.client.Client.Provider provider26 = restAdapter0.clientProvider;
        retrofit.RestAdapter.RestHandler restHandler27 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter0.getLogLevel();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(errorHandler4);
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(log17);
        org.junit.Assert.assertNull(profiler18);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNull(provider26);
        org.junit.Assert.assertNull(logLevel28);
    }

    @Test
    public void test02571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02571");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        java.util.concurrent.Executor executor19 = null;
        restAdapter0.callbackExecutor = executor19;
        retrofit.ErrorHandler errorHandler21 = null;
        restAdapter0.errorHandler = errorHandler21;
        java.util.concurrent.Executor executor23 = restAdapter0.httpExecutor;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor25 = restAdapter24.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler26 = restAdapter24.new RestHandler();
        retrofit.Server server29 = new retrofit.Server("hi!", "hi!");
        restAdapter24.server = server29;
        retrofit.Server server31 = restAdapter24.server;
        java.lang.String str32 = server31.getName();
        java.lang.String str33 = server31.getUrl();
        restAdapter0.server = server31;
        retrofit.RestAdapter.RestHandler restHandler35 = restAdapter0.new RestHandler();
        retrofit.converter.Converter converter36 = restAdapter0.converter;
        retrofit.Server server37 = null;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        log45.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log45, logLevel48);
        retrofit.Profiler profiler50 = restAdapter49.profiler;
        retrofit.RestAdapter.LogLevel logLevel51 = restAdapter49.getLogLevel();
        boolean boolean52 = logLevel51.log();
        restAdapter0.logLevel = logLevel51;
        java.util.concurrent.Executor executor54 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel55 = restAdapter0.getLogLevel();
        retrofit.client.Client.Provider provider56 = restAdapter0.clientProvider;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNotNull(server31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNull(converter36);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNull(executor54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(provider56);
    }

    @Test
    public void test02572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02572");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.ErrorHandler errorHandler3 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler7 = builder6.errorHandler;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.Server server11 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder12 = builder8.setServer(server11);
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor14 = restAdapter13.callbackExecutor;
        java.util.concurrent.Executor executor15 = restAdapter13.callbackExecutor;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler17 = restAdapter16.errorHandler;
        retrofit.Server server20 = new retrofit.Server("", "");
        restAdapter16.server = server20;
        restAdapter13.server = server20;
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        restAdapter13.log = log23;
        retrofit.RestAdapter.Builder builder25 = builder12.setLog(log23);
        retrofit.RestAdapter.Builder builder26 = builder6.setLog(log23);
        builder0.log = log23;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler29 = builder28.errorHandler;
        retrofit.client.Client.Provider provider30 = null;
        builder28.clientProvider = provider30;
        retrofit.Server server34 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder35 = builder28.setServer(server34);
        retrofit.converter.Converter converter36 = null;
        builder35.converter = converter36;
        retrofit.RestAdapter restAdapter38 = builder35.build();
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler40 = builder39.errorHandler;
        java.util.concurrent.Executor executor41 = null;
        builder39.callbackExecutor = executor41;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider44 = builder43.clientProvider;
        java.util.concurrent.Executor executor45 = null;
        builder43.callbackExecutor = executor45;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.Server server50 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder51 = builder47.setServer(server50);
        java.lang.String str52 = server50.getUrl();
        retrofit.RestAdapter.Builder builder53 = builder43.setServer(server50);
        retrofit.RestAdapter.Builder builder54 = builder39.setServer(server50);
        restAdapter38.server = server50;
        retrofit.client.Client.Provider provider56 = restAdapter38.clientProvider;
        retrofit.RestAdapter.Builder builder57 = builder0.setClient(provider56);
        retrofit.RestAdapter restAdapter58 = builder0.build();
        retrofit.Profiler profiler59 = null;
        restAdapter58.profiler = profiler59;
        retrofit.client.Header[] headerArray69 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList70 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList70, headerArray69);
        retrofit.mime.TypedOutput typedOutput72 = null;
        retrofit.client.Request request73 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList70, typedOutput72);
        retrofit.mime.TypedOutput typedOutput74 = null;
        retrofit.client.Request request75 = new retrofit.client.Request("", "default", (java.util.List<retrofit.client.Header>) headerList70, typedOutput74);
        retrofit.mime.TypedOutput typedOutput76 = null;
        retrofit.client.Request request77 = new retrofit.client.Request("default", "", (java.util.List<retrofit.client.Header>) headerList70, typedOutput76);
        retrofit.mime.TypedOutput typedOutput78 = null;
        retrofit.client.Request request79 = new retrofit.client.Request("default", "hi!", (java.util.List<retrofit.client.Header>) headerList70, typedOutput78);
        retrofit.client.Request request80 = restAdapter58.logAndReplaceRequest(request79);
        retrofit.client.Response response82 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response84 = restAdapter58.logAndReplaceResponse("hi!", response82, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(restAdapter38);
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNull(provider44);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(provider56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(restAdapter58);
        org.junit.Assert.assertNotNull(headerArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(request80);
    }

    @Test
    public void test02573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02573");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.client.Client.Provider provider14 = restAdapter12.clientProvider;
        retrofit.RestAdapter.Log log15 = restAdapter12.log;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler17 = builder16.errorHandler;
        retrofit.client.Client.Provider provider18 = null;
        builder16.clientProvider = provider18;
        retrofit.Server server22 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder23 = builder16.setServer(server22);
        retrofit.Server server26 = new retrofit.Server("", "");
        builder23.server = server26;
        restAdapter12.server = server26;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor30 = restAdapter29.callbackExecutor;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor32 = restAdapter31.callbackExecutor;
        java.util.concurrent.Executor executor33 = restAdapter31.callbackExecutor;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler35 = restAdapter34.errorHandler;
        retrofit.Server server38 = new retrofit.Server("", "");
        restAdapter34.server = server38;
        restAdapter31.server = server38;
        restAdapter29.server = server38;
        retrofit.Profiler profiler42 = restAdapter29.profiler;
        retrofit.ErrorHandler errorHandler43 = null;
        restAdapter29.errorHandler = errorHandler43;
        retrofit.Profiler profiler45 = null;
        restAdapter29.profiler = profiler45;
        java.util.concurrent.Executor executor47 = null;
        restAdapter29.httpExecutor = executor47;
        retrofit.RestAdapter.LogLevel logLevel49 = restAdapter29.logLevel;
        retrofit.converter.Converter converter50 = restAdapter29.converter;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler52 = builder51.errorHandler;
        retrofit.ErrorHandler errorHandler53 = builder51.errorHandler;
        java.util.concurrent.Executor executor54 = builder51.callbackExecutor;
        java.util.concurrent.Executor executor55 = null;
        builder51.callbackExecutor = executor55;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler58 = builder57.errorHandler;
        retrofit.Server server61 = new retrofit.Server("", "");
        builder57.server = server61;
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        builder57.log = log63;
        retrofit.RestAdapter.LogLevel logLevel65 = builder57.logLevel;
        retrofit.RestAdapter.Builder builder66 = builder51.setLogLevel(logLevel65);
        restAdapter29.logLevel = logLevel65;
        boolean boolean68 = logLevel65.log();
        boolean boolean69 = logLevel65.log();
        restAdapter12.logLevel = logLevel65;
        retrofit.RestAdapter.RestHandler restHandler71 = restAdapter12.new RestHandler();
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertNull(errorHandler35);
        org.junit.Assert.assertNull(profiler42);
        org.junit.Assert.assertNull(logLevel49);
        org.junit.Assert.assertNull(converter50);
        org.junit.Assert.assertNull(errorHandler52);
        org.junit.Assert.assertNull(errorHandler53);
        org.junit.Assert.assertNull(executor54);
        org.junit.Assert.assertNull(errorHandler58);
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test02574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02574");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        builder0.requestInterceptor = requestInterceptor2;
        java.util.concurrent.Executor executor4 = builder0.httpExecutor;
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        log5.log("default");
        builder0.log = log5;
        retrofit.converter.Converter converter9 = null;
        builder0.converter = converter9;
        retrofit.RestAdapter.Builder builder12 = builder0.setServer("default");
        retrofit.Profiler profiler13 = null;
        builder12.profiler = profiler13;
        builder12.ensureSaneDefaults();
        builder12.ensureSaneDefaults();
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test02575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02575");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = null;
        restAdapter0.httpExecutor = executor2;
        retrofit.RestAdapter.RestHandler restHandler4 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter0.logLevel;
        retrofit.Server server6 = restAdapter0.server;
        retrofit.client.Client.Provider provider7 = restAdapter0.clientProvider;
        java.util.concurrent.Executor executor8 = restAdapter0.httpExecutor;
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertNull(provider7);
        org.junit.Assert.assertNull(executor8);
    }

    @Test
    public void test02576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02576");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = null;
        restAdapter0.httpExecutor = executor2;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.logLevel;
        retrofit.Server server5 = restAdapter0.server;
        retrofit.RequestInterceptor requestInterceptor6 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.RestHandler restHandler7 = restAdapter0.new RestHandler();
        retrofit.ErrorHandler errorHandler8 = restAdapter0.errorHandler;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.Server server12 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder13 = builder9.setServer(server12);
        retrofit.RestAdapter.LogLevel logLevel14 = builder13.logLevel;
        java.util.concurrent.Executor executor15 = builder13.httpExecutor;
        retrofit.RestAdapter restAdapter16 = builder13.build();
        retrofit.Server server17 = null;
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Log log25 = retrofit.RestAdapter.Log.NONE;
        log25.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server17, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log25, logLevel28);
        retrofit.RestAdapter.RestHandler restHandler30 = restAdapter29.new RestHandler();
        retrofit.client.Client.Provider provider31 = restAdapter29.clientProvider;
        retrofit.RestAdapter.Log log32 = restAdapter29.log;
        retrofit.RestAdapter.RestHandler restHandler33 = restAdapter29.new RestHandler();
        retrofit.Profiler profiler34 = restAdapter29.profiler;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor36 = restAdapter35.callbackExecutor;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor38 = restAdapter37.callbackExecutor;
        java.util.concurrent.Executor executor39 = restAdapter37.callbackExecutor;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler41 = restAdapter40.errorHandler;
        retrofit.Server server44 = new retrofit.Server("", "");
        restAdapter40.server = server44;
        restAdapter37.server = server44;
        restAdapter35.server = server44;
        retrofit.Profiler profiler48 = restAdapter35.profiler;
        retrofit.ErrorHandler errorHandler49 = null;
        restAdapter35.errorHandler = errorHandler49;
        retrofit.Profiler profiler51 = null;
        restAdapter35.profiler = profiler51;
        retrofit.RestAdapter.RestHandler restHandler53 = restAdapter35.new RestHandler();
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.Server server57 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder58 = builder54.setServer(server57);
        retrofit.converter.Converter converter59 = builder54.converter;
        retrofit.RequestInterceptor requestInterceptor60 = builder54.requestInterceptor;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider62 = builder61.clientProvider;
        java.util.concurrent.Executor executor63 = null;
        builder61.callbackExecutor = executor63;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.Server server68 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder69 = builder65.setServer(server68);
        java.lang.String str70 = server68.getUrl();
        retrofit.RestAdapter.Builder builder71 = builder61.setServer(server68);
        builder61.ensureSaneDefaults();
        retrofit.Server server73 = null;
        retrofit.client.Client.Provider provider74 = null;
        java.util.concurrent.Executor executor75 = null;
        java.util.concurrent.Executor executor76 = null;
        retrofit.RequestInterceptor requestInterceptor77 = null;
        retrofit.converter.Converter converter78 = null;
        retrofit.Profiler profiler79 = null;
        retrofit.ErrorHandler errorHandler80 = null;
        retrofit.RestAdapter.Log log81 = retrofit.RestAdapter.Log.NONE;
        log81.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel84 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter85 = new retrofit.RestAdapter(server73, provider74, executor75, executor76, requestInterceptor77, converter78, profiler79, errorHandler80, log81, logLevel84);
        retrofit.RestAdapter.RestHandler restHandler86 = restAdapter85.new RestHandler();
        retrofit.RestAdapter.Log log87 = retrofit.RestAdapter.Log.NONE;
        restAdapter85.log = log87;
        retrofit.RestAdapter.Builder builder89 = builder61.setLog(log87);
        retrofit.RestAdapter.Builder builder91 = builder61.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor92 = builder61.requestInterceptor;
        builder54.requestInterceptor = requestInterceptor92;
        restAdapter35.requestInterceptor = requestInterceptor92;
        restAdapter29.requestInterceptor = requestInterceptor92;
        builder13.requestInterceptor = requestInterceptor92;
        restAdapter0.requestInterceptor = requestInterceptor92;
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNotNull(restAdapter16);
        org.junit.Assert.assertNotNull(log25);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(provider31);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertNull(profiler34);
        org.junit.Assert.assertNull(executor36);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNull(errorHandler41);
        org.junit.Assert.assertNull(profiler48);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(converter59);
        org.junit.Assert.assertNull(requestInterceptor60);
        org.junit.Assert.assertNull(provider62);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hi!" + "'", str70, "hi!");
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(log81);
        org.junit.Assert.assertTrue("'" + logLevel84 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel84.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log87);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(requestInterceptor92);
    }

    @Test
    public void test02577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02577");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.converter.Converter converter3 = null;
        builder0.converter = converter3;
        retrofit.converter.Converter converter5 = null;
        builder0.converter = converter5;
        retrofit.client.Client client7 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder8 = builder0.setClient(client7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
    }

    @Test
    public void test02578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02578");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter0.getLogLevel();
        retrofit.client.Client.Provider provider20 = null;
        restAdapter0.clientProvider = provider20;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean23 = logLevel22.log();
        restAdapter0.logLevel = logLevel22;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        restAdapter0.requestInterceptor = requestInterceptor25;
        retrofit.RestAdapter.RestHandler restHandler27 = restAdapter0.new RestHandler();
        retrofit.Server server28 = restAdapter0.server;
        retrofit.client.Client.Provider provider29 = restAdapter0.clientProvider;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(server28);
        org.junit.Assert.assertNull(provider29);
    }

    @Test
    public void test02579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02579");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        restAdapter5.log = log15;
        retrofit.RestAdapter.Builder builder17 = builder4.setLog(log15);
        retrofit.converter.Converter converter18 = null;
        builder17.converter = converter18;
        retrofit.RestAdapter restAdapter20 = builder17.build();
        retrofit.Profiler profiler21 = builder17.profiler;
        retrofit.RestAdapter restAdapter22 = builder17.build();
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor24 = restAdapter23.callbackExecutor;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor26 = restAdapter25.callbackExecutor;
        java.util.concurrent.Executor executor27 = restAdapter25.callbackExecutor;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler29 = restAdapter28.errorHandler;
        retrofit.Server server32 = new retrofit.Server("", "");
        restAdapter28.server = server32;
        restAdapter25.server = server32;
        restAdapter23.server = server32;
        retrofit.Profiler profiler36 = restAdapter23.profiler;
        retrofit.ErrorHandler errorHandler37 = null;
        restAdapter23.errorHandler = errorHandler37;
        retrofit.Profiler profiler39 = null;
        restAdapter23.profiler = profiler39;
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter23.getLogLevel();
        java.util.concurrent.Executor executor42 = null;
        restAdapter23.callbackExecutor = executor42;
        retrofit.ErrorHandler errorHandler44 = null;
        restAdapter23.errorHandler = errorHandler44;
        java.util.concurrent.Executor executor46 = restAdapter23.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor47 = restAdapter23.requestInterceptor;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor49 = restAdapter48.callbackExecutor;
        retrofit.converter.Converter converter50 = null;
        restAdapter48.converter = converter50;
        retrofit.ErrorHandler errorHandler52 = restAdapter48.errorHandler;
        retrofit.Profiler profiler53 = null;
        restAdapter48.profiler = profiler53;
        retrofit.Server server55 = null;
        retrofit.client.Client.Provider provider56 = null;
        java.util.concurrent.Executor executor57 = null;
        java.util.concurrent.Executor executor58 = null;
        retrofit.RequestInterceptor requestInterceptor59 = null;
        retrofit.converter.Converter converter60 = null;
        retrofit.Profiler profiler61 = null;
        retrofit.ErrorHandler errorHandler62 = null;
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        log63.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel66 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter(server55, provider56, executor57, executor58, requestInterceptor59, converter60, profiler61, errorHandler62, log63, logLevel66);
        retrofit.RestAdapter.RestHandler restHandler68 = restAdapter67.new RestHandler();
        retrofit.RestAdapter.Log log69 = retrofit.RestAdapter.Log.NONE;
        restAdapter67.log = log69;
        log69.log("");
        restAdapter48.log = log69;
        restAdapter23.log = log69;
        log69.log("hi!");
        retrofit.RestAdapter.Builder builder77 = builder17.setLog(log69);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(restAdapter20);
        org.junit.Assert.assertNull(profiler21);
        org.junit.Assert.assertNotNull(restAdapter22);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNull(profiler36);
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertNull(executor46);
        org.junit.Assert.assertNull(requestInterceptor47);
        org.junit.Assert.assertNull(executor49);
        org.junit.Assert.assertNull(errorHandler52);
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log69);
        org.junit.Assert.assertNotNull(builder77);
    }

    @Test
    public void test02580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02580");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.ErrorHandler errorHandler3 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler7 = builder6.errorHandler;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.Server server11 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder12 = builder8.setServer(server11);
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor14 = restAdapter13.callbackExecutor;
        java.util.concurrent.Executor executor15 = restAdapter13.callbackExecutor;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler17 = restAdapter16.errorHandler;
        retrofit.Server server20 = new retrofit.Server("", "");
        restAdapter16.server = server20;
        restAdapter13.server = server20;
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        restAdapter13.log = log23;
        retrofit.RestAdapter.Builder builder25 = builder12.setLog(log23);
        retrofit.RestAdapter.Builder builder26 = builder6.setLog(log23);
        builder0.log = log23;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler29 = builder28.errorHandler;
        retrofit.client.Client.Provider provider30 = null;
        builder28.clientProvider = provider30;
        retrofit.Server server34 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder35 = builder28.setServer(server34);
        retrofit.converter.Converter converter36 = null;
        builder35.converter = converter36;
        retrofit.RestAdapter restAdapter38 = builder35.build();
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler40 = builder39.errorHandler;
        java.util.concurrent.Executor executor41 = null;
        builder39.callbackExecutor = executor41;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider44 = builder43.clientProvider;
        java.util.concurrent.Executor executor45 = null;
        builder43.callbackExecutor = executor45;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.Server server50 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder51 = builder47.setServer(server50);
        java.lang.String str52 = server50.getUrl();
        retrofit.RestAdapter.Builder builder53 = builder43.setServer(server50);
        retrofit.RestAdapter.Builder builder54 = builder39.setServer(server50);
        restAdapter38.server = server50;
        retrofit.client.Client.Provider provider56 = restAdapter38.clientProvider;
        retrofit.RestAdapter.Builder builder57 = builder0.setClient(provider56);
        retrofit.RestAdapter restAdapter58 = builder0.build();
        retrofit.Profiler profiler59 = null;
        restAdapter58.profiler = profiler59;
        retrofit.client.Header[] headerArray69 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList70 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList70, headerArray69);
        retrofit.mime.TypedOutput typedOutput72 = null;
        retrofit.client.Request request73 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList70, typedOutput72);
        retrofit.mime.TypedOutput typedOutput74 = null;
        retrofit.client.Request request75 = new retrofit.client.Request("", "default", (java.util.List<retrofit.client.Header>) headerList70, typedOutput74);
        retrofit.mime.TypedOutput typedOutput76 = null;
        retrofit.client.Request request77 = new retrofit.client.Request("default", "", (java.util.List<retrofit.client.Header>) headerList70, typedOutput76);
        retrofit.mime.TypedOutput typedOutput78 = null;
        retrofit.client.Request request79 = new retrofit.client.Request("default", "hi!", (java.util.List<retrofit.client.Header>) headerList70, typedOutput78);
        retrofit.client.Request request80 = restAdapter58.logAndReplaceRequest(request79);
        retrofit.ErrorHandler errorHandler81 = restAdapter58.errorHandler;
        retrofit.RestAdapter.Log log82 = restAdapter58.log;
        retrofit.RestAdapter.Log log83 = restAdapter58.log;
        retrofit.RestAdapter.LogLevel logLevel84 = restAdapter58.getLogLevel();
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(restAdapter38);
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNull(provider44);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(provider56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(restAdapter58);
        org.junit.Assert.assertNotNull(headerArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(request80);
        org.junit.Assert.assertNotNull(errorHandler81);
        org.junit.Assert.assertNotNull(log82);
        org.junit.Assert.assertNotNull(log83);
        org.junit.Assert.assertTrue("'" + logLevel84 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel84.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test02581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02581");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = builder2.errorHandler;
        retrofit.Server server6 = new retrofit.Server("", "");
        builder2.server = server6;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler16 = builder15.errorHandler;
        retrofit.Server server19 = new retrofit.Server("", "");
        builder15.server = server19;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        builder15.log = log21;
        retrofit.Server server23 = null;
        retrofit.client.Client.Provider provider24 = null;
        java.util.concurrent.Executor executor25 = null;
        java.util.concurrent.Executor executor26 = null;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        retrofit.converter.Converter converter28 = null;
        retrofit.Profiler profiler29 = null;
        retrofit.ErrorHandler errorHandler30 = null;
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        log31.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server23, provider24, executor25, executor26, requestInterceptor27, converter28, profiler29, errorHandler30, log31, logLevel34);
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter(server6, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log21, logLevel34);
        restAdapter0.server = server6;
        retrofit.RestAdapter.RestHandler restHandler38 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler40 = builder39.errorHandler;
        java.util.concurrent.Executor executor41 = null;
        builder39.callbackExecutor = executor41;
        retrofit.converter.Converter converter43 = builder39.converter;
        retrofit.RestAdapter.Builder builder45 = builder39.setServer("default");
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler47 = builder46.errorHandler;
        retrofit.client.Client.Provider provider48 = null;
        builder46.clientProvider = provider48;
        retrofit.Server server52 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder53 = builder46.setServer(server52);
        retrofit.converter.Converter converter54 = null;
        builder53.converter = converter54;
        retrofit.RestAdapter restAdapter56 = builder53.build();
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler58 = builder57.errorHandler;
        java.util.concurrent.Executor executor59 = null;
        builder57.callbackExecutor = executor59;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider62 = builder61.clientProvider;
        java.util.concurrent.Executor executor63 = null;
        builder61.callbackExecutor = executor63;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.Server server68 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder69 = builder65.setServer(server68);
        java.lang.String str70 = server68.getUrl();
        retrofit.RestAdapter.Builder builder71 = builder61.setServer(server68);
        retrofit.RestAdapter.Builder builder72 = builder57.setServer(server68);
        restAdapter56.server = server68;
        retrofit.client.Client.Provider provider74 = restAdapter56.clientProvider;
        builder45.clientProvider = provider74;
        restAdapter0.clientProvider = provider74;
        retrofit.converter.Converter converter77 = restAdapter0.converter;
        retrofit.ErrorHandler errorHandler78 = restAdapter0.errorHandler;
        retrofit.Profiler profiler79 = restAdapter0.profiler;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNull(converter43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(errorHandler47);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(restAdapter56);
        org.junit.Assert.assertNull(errorHandler58);
        org.junit.Assert.assertNull(provider62);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hi!" + "'", str70, "hi!");
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(provider74);
        org.junit.Assert.assertNull(converter77);
        org.junit.Assert.assertNull(errorHandler78);
        org.junit.Assert.assertNull(profiler79);
    }

    @Test
    public void test02582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02582");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter0.getLogLevel();
        retrofit.ErrorHandler errorHandler20 = null;
        restAdapter0.errorHandler = errorHandler20;
        retrofit.client.Client.Provider provider22 = null;
        restAdapter0.clientProvider = provider22;
        retrofit.converter.Converter converter24 = restAdapter0.converter;
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter0.new RestHandler();
        retrofit.Server server26 = restAdapter0.server;
        java.util.concurrent.Executor executor27 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor29 = restAdapter28.callbackExecutor;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor31 = restAdapter30.callbackExecutor;
        java.util.concurrent.Executor executor32 = restAdapter30.callbackExecutor;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler34 = restAdapter33.errorHandler;
        retrofit.Server server37 = new retrofit.Server("", "");
        restAdapter33.server = server37;
        restAdapter30.server = server37;
        restAdapter28.server = server37;
        retrofit.Profiler profiler41 = restAdapter28.profiler;
        retrofit.ErrorHandler errorHandler42 = null;
        restAdapter28.errorHandler = errorHandler42;
        retrofit.RequestInterceptor requestInterceptor44 = restAdapter28.requestInterceptor;
        retrofit.ErrorHandler errorHandler45 = restAdapter28.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler46 = restAdapter28.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler47 = restAdapter28.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler48 = restAdapter28.new RestHandler();
        retrofit.Server server49 = restAdapter28.server;
        retrofit.RestAdapter.Log log50 = restAdapter28.log;
        retrofit.RestAdapter.LogLevel logLevel51 = restAdapter28.logLevel;
        retrofit.Server server52 = restAdapter28.server;
        restAdapter0.server = server52;
        retrofit.ErrorHandler errorHandler54 = restAdapter0.errorHandler;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(converter24);
        org.junit.Assert.assertNotNull(server26);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(errorHandler34);
        org.junit.Assert.assertNull(profiler41);
        org.junit.Assert.assertNull(requestInterceptor44);
        org.junit.Assert.assertNull(errorHandler45);
        org.junit.Assert.assertNotNull(server49);
        org.junit.Assert.assertNull(log50);
        org.junit.Assert.assertNull(logLevel51);
        org.junit.Assert.assertNotNull(server52);
        org.junit.Assert.assertNull(errorHandler54);
    }

    @Test
    public void test02583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02583");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter0.getLogLevel();
        retrofit.ErrorHandler errorHandler20 = null;
        restAdapter0.errorHandler = errorHandler20;
        retrofit.RestAdapter.Log log22 = restAdapter0.log;
        retrofit.RestAdapter.RestHandler restHandler23 = restAdapter0.new RestHandler();
        retrofit.ErrorHandler errorHandler24 = restAdapter0.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter0.new RestHandler();
        retrofit.client.Header[] headerArray36 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList37 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList37, headerArray36);
        retrofit.mime.TypedOutput typedOutput39 = null;
        retrofit.client.Request request40 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList37, typedOutput39);
        retrofit.mime.TypedOutput typedOutput41 = null;
        retrofit.client.Request request42 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList37, typedOutput41);
        retrofit.mime.TypedOutput typedOutput43 = null;
        retrofit.client.Request request44 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList37, typedOutput43);
        retrofit.mime.TypedOutput typedOutput45 = null;
        retrofit.client.Request request46 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList37, typedOutput45);
        retrofit.mime.TypedOutput typedOutput47 = null;
        retrofit.client.Request request48 = new retrofit.client.Request("default", "hi!", (java.util.List<retrofit.client.Header>) headerList37, typedOutput47);
        java.util.List<retrofit.client.Header> headerList49 = request48.getHeaders();
        java.lang.String str50 = request48.getMethod();
        retrofit.mime.TypedOutput typedOutput51 = request48.getBody();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request52 = restAdapter0.logAndReplaceRequest(request48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(log22);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNotNull(headerArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(headerList49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "default" + "'", str50, "default");
        org.junit.Assert.assertNull(typedOutput51);
    }

    @Test
    public void test02584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02584");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        restAdapter12.log = log14;
        retrofit.converter.Converter converter16 = null;
        restAdapter12.converter = converter16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter12.getLogLevel();
        retrofit.ErrorHandler errorHandler19 = restAdapter12.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter12.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor21 = restAdapter12.requestInterceptor;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler23 = builder22.errorHandler;
        retrofit.ErrorHandler errorHandler24 = builder22.errorHandler;
        retrofit.RestAdapter.Log log25 = null;
        builder22.log = log25;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        builder22.requestInterceptor = requestInterceptor27;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor30 = restAdapter29.callbackExecutor;
        java.util.concurrent.Executor executor31 = restAdapter29.callbackExecutor;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler33 = restAdapter32.errorHandler;
        retrofit.Server server36 = new retrofit.Server("", "");
        restAdapter32.server = server36;
        restAdapter29.server = server36;
        retrofit.RestAdapter.Builder builder39 = builder22.setServer(server36);
        retrofit.RestAdapter.LogLevel logLevel40 = builder22.logLevel;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler42 = builder41.errorHandler;
        retrofit.Server server45 = new retrofit.Server("", "");
        builder41.server = server45;
        retrofit.client.Client.Provider provider47 = null;
        java.util.concurrent.Executor executor48 = null;
        java.util.concurrent.Executor executor49 = null;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        retrofit.converter.Converter converter51 = null;
        retrofit.Profiler profiler52 = null;
        retrofit.ErrorHandler errorHandler53 = null;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler55 = builder54.errorHandler;
        retrofit.Server server58 = new retrofit.Server("", "");
        builder54.server = server58;
        retrofit.RestAdapter.Log log60 = retrofit.RestAdapter.Log.NONE;
        builder54.log = log60;
        retrofit.Server server62 = null;
        retrofit.client.Client.Provider provider63 = null;
        java.util.concurrent.Executor executor64 = null;
        java.util.concurrent.Executor executor65 = null;
        retrofit.RequestInterceptor requestInterceptor66 = null;
        retrofit.converter.Converter converter67 = null;
        retrofit.Profiler profiler68 = null;
        retrofit.ErrorHandler errorHandler69 = null;
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        log70.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter74 = new retrofit.RestAdapter(server62, provider63, executor64, executor65, requestInterceptor66, converter67, profiler68, errorHandler69, log70, logLevel73);
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter(server45, provider47, executor48, executor49, requestInterceptor50, converter51, profiler52, errorHandler53, log60, logLevel73);
        retrofit.RestAdapter.Builder builder76 = builder22.setServer(server45);
        retrofit.RestAdapter.Builder builder77 = new retrofit.RestAdapter.Builder();
        retrofit.Server server80 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder81 = builder77.setServer(server80);
        retrofit.RestAdapter restAdapter82 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor83 = restAdapter82.callbackExecutor;
        java.util.concurrent.Executor executor84 = restAdapter82.callbackExecutor;
        retrofit.RestAdapter restAdapter85 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler86 = restAdapter85.errorHandler;
        retrofit.Server server89 = new retrofit.Server("", "");
        restAdapter85.server = server89;
        restAdapter82.server = server89;
        retrofit.RestAdapter.Log log92 = retrofit.RestAdapter.Log.NONE;
        restAdapter82.log = log92;
        retrofit.RestAdapter.Builder builder94 = builder81.setLog(log92);
        retrofit.RestAdapter.Builder builder96 = builder81.setServer("hi!");
        retrofit.RestAdapter.Log log97 = builder96.log;
        retrofit.RestAdapter.Builder builder98 = builder22.setLog(log97);
        restAdapter12.log = log97;
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(requestInterceptor21);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNull(errorHandler33);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler42);
        org.junit.Assert.assertNull(errorHandler55);
        org.junit.Assert.assertNotNull(log60);
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNull(executor83);
        org.junit.Assert.assertNull(executor84);
        org.junit.Assert.assertNull(errorHandler86);
        org.junit.Assert.assertNotNull(log92);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNotNull(log97);
        org.junit.Assert.assertNotNull(builder98);
    }

    @Test
    public void test02585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02585");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        builder0.requestInterceptor = requestInterceptor2;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("default");
        retrofit.RequestInterceptor requestInterceptor6 = builder5.requestInterceptor;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler8 = builder7.errorHandler;
        retrofit.ErrorHandler errorHandler9 = builder7.errorHandler;
        retrofit.RestAdapter.Log log10 = null;
        builder7.log = log10;
        retrofit.client.Client.Provider provider12 = null;
        builder7.clientProvider = provider12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler15 = builder14.errorHandler;
        retrofit.ErrorHandler errorHandler16 = builder14.errorHandler;
        retrofit.converter.Converter converter17 = null;
        builder14.converter = converter17;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        builder14.requestInterceptor = requestInterceptor19;
        retrofit.client.Client.Provider provider21 = builder14.clientProvider;
        builder14.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor24 = restAdapter23.callbackExecutor;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor26 = restAdapter25.callbackExecutor;
        java.util.concurrent.Executor executor27 = restAdapter25.callbackExecutor;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler29 = restAdapter28.errorHandler;
        retrofit.Server server32 = new retrofit.Server("", "");
        restAdapter28.server = server32;
        restAdapter25.server = server32;
        restAdapter23.server = server32;
        retrofit.Profiler profiler36 = restAdapter23.profiler;
        retrofit.ErrorHandler errorHandler37 = null;
        restAdapter23.errorHandler = errorHandler37;
        retrofit.RequestInterceptor requestInterceptor39 = restAdapter23.requestInterceptor;
        retrofit.ErrorHandler errorHandler40 = restAdapter23.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler41 = restAdapter23.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler42 = restAdapter23.new RestHandler();
        retrofit.ErrorHandler errorHandler43 = restAdapter23.errorHandler;
        retrofit.client.Client.Provider provider44 = restAdapter23.clientProvider;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.Server server48 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder49 = builder45.setServer(server48);
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor51 = restAdapter50.callbackExecutor;
        java.util.concurrent.Executor executor52 = restAdapter50.callbackExecutor;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler54 = restAdapter53.errorHandler;
        retrofit.Server server57 = new retrofit.Server("", "");
        restAdapter53.server = server57;
        restAdapter50.server = server57;
        retrofit.RestAdapter.Log log60 = retrofit.RestAdapter.Log.NONE;
        restAdapter50.log = log60;
        retrofit.RestAdapter.Builder builder62 = builder49.setLog(log60);
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder64 = builder49.setLogLevel(logLevel63);
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler66 = builder65.errorHandler;
        retrofit.client.Client.Provider provider67 = null;
        builder65.clientProvider = provider67;
        retrofit.Server server71 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder72 = builder65.setServer(server71);
        retrofit.converter.Converter converter73 = null;
        builder72.converter = converter73;
        retrofit.RestAdapter restAdapter75 = builder72.build();
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler77 = builder76.errorHandler;
        java.util.concurrent.Executor executor78 = null;
        builder76.callbackExecutor = executor78;
        retrofit.RestAdapter.Builder builder80 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider81 = builder80.clientProvider;
        java.util.concurrent.Executor executor82 = null;
        builder80.callbackExecutor = executor82;
        retrofit.RestAdapter.Builder builder84 = new retrofit.RestAdapter.Builder();
        retrofit.Server server87 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder88 = builder84.setServer(server87);
        java.lang.String str89 = server87.getUrl();
        retrofit.RestAdapter.Builder builder90 = builder80.setServer(server87);
        retrofit.RestAdapter.Builder builder91 = builder76.setServer(server87);
        restAdapter75.server = server87;
        java.util.concurrent.Executor executor93 = restAdapter75.httpExecutor;
        builder49.callbackExecutor = executor93;
        restAdapter23.callbackExecutor = executor93;
        builder14.httpExecutor = executor93;
        builder7.httpExecutor = executor93;
        builder5.callbackExecutor = executor93;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNull(provider21);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNull(profiler36);
        org.junit.Assert.assertNull(requestInterceptor39);
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNull(errorHandler43);
        org.junit.Assert.assertNull(provider44);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(executor51);
        org.junit.Assert.assertNull(executor52);
        org.junit.Assert.assertNull(errorHandler54);
        org.junit.Assert.assertNotNull(log60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(errorHandler66);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(restAdapter75);
        org.junit.Assert.assertNull(errorHandler77);
        org.junit.Assert.assertNull(provider81);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "hi!" + "'", str89, "hi!");
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(executor93);
    }

    @Test
    public void test02586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02586");
        retrofit.client.Header[] headerArray16 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList17 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList17, headerArray16);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList17, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList17, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList17, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList17, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("default", "hi!", (java.util.List<retrofit.client.Header>) headerList17, typedOutput27);
        java.util.List<retrofit.client.Header> headerList29 = request28.getHeaders();
        retrofit.mime.TypedOutput typedOutput30 = null;
        retrofit.client.Request request31 = new retrofit.client.Request("hi!", "", headerList29, typedOutput30);
        retrofit.mime.TypedOutput typedOutput32 = null;
        retrofit.client.Request request33 = new retrofit.client.Request("", "", headerList29, typedOutput32);
        java.util.List<retrofit.client.Header> headerList34 = request33.getHeaders();
        retrofit.mime.TypedOutput typedOutput35 = null;
        retrofit.client.Request request36 = new retrofit.client.Request("default", "", headerList34, typedOutput35);
        org.junit.Assert.assertNotNull(headerArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(headerList29);
        org.junit.Assert.assertNotNull(headerList34);
    }

    @Test
    public void test02587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02587");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        restAdapter12.log = log14;
        retrofit.converter.Converter converter16 = null;
        restAdapter12.converter = converter16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter12.getLogLevel();
        retrofit.ErrorHandler errorHandler19 = restAdapter12.errorHandler;
        retrofit.Profiler profiler20 = restAdapter12.profiler;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler22 = null;
        builder21.errorHandler = errorHandler22;
        retrofit.ErrorHandler errorHandler24 = builder21.errorHandler;
        retrofit.RestAdapter.Builder builder26 = builder21.setServer("hi!");
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler28 = builder27.errorHandler;
        retrofit.ErrorHandler errorHandler29 = builder27.errorHandler;
        retrofit.Profiler profiler30 = builder27.profiler;
        retrofit.RestAdapter.Log log31 = builder27.log;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.FULL;
        builder27.logLevel = logLevel32;
        retrofit.RestAdapter.Builder builder34 = builder26.setLogLevel(logLevel32);
        retrofit.Server server35 = null;
        retrofit.client.Client.Provider provider36 = null;
        java.util.concurrent.Executor executor37 = null;
        java.util.concurrent.Executor executor38 = null;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        retrofit.converter.Converter converter40 = null;
        retrofit.Profiler profiler41 = null;
        retrofit.ErrorHandler errorHandler42 = null;
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        log43.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter(server35, provider36, executor37, executor38, requestInterceptor39, converter40, profiler41, errorHandler42, log43, logLevel46);
        log43.log("");
        retrofit.RestAdapter.Builder builder50 = builder34.setLog(log43);
        restAdapter12.log = log43;
        retrofit.RestAdapter.RestHandler restHandler52 = restAdapter12.new RestHandler();
        java.util.concurrent.Executor executor53 = restAdapter12.httpExecutor;
        retrofit.Server server54 = restAdapter12.server;
        retrofit.client.Header[] headerArray71 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList72 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList72, headerArray71);
        retrofit.mime.TypedOutput typedOutput74 = null;
        retrofit.client.Request request75 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList72, typedOutput74);
        retrofit.mime.TypedOutput typedOutput76 = null;
        retrofit.client.Request request77 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList72, typedOutput76);
        retrofit.mime.TypedOutput typedOutput78 = null;
        retrofit.client.Request request79 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList72, typedOutput78);
        retrofit.mime.TypedOutput typedOutput80 = null;
        retrofit.client.Request request81 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList72, typedOutput80);
        retrofit.mime.TypedOutput typedOutput82 = null;
        retrofit.client.Request request83 = new retrofit.client.Request("default", "hi!", (java.util.List<retrofit.client.Header>) headerList72, typedOutput82);
        java.util.List<retrofit.client.Header> headerList84 = request83.getHeaders();
        retrofit.mime.TypedOutput typedOutput85 = null;
        retrofit.client.Request request86 = new retrofit.client.Request("default", "hi!", headerList84, typedOutput85);
        java.util.List<retrofit.client.Header> headerList87 = request86.getHeaders();
        retrofit.mime.TypedOutput typedOutput88 = null;
        retrofit.client.Request request89 = new retrofit.client.Request("", "", headerList87, typedOutput88);
        retrofit.mime.TypedOutput typedOutput90 = null;
        retrofit.client.Request request91 = new retrofit.client.Request("hi!", "default", headerList87, typedOutput90);
        retrofit.client.Request request92 = restAdapter12.logAndReplaceRequest(request91);
        retrofit.RestAdapter.LogLevel logLevel93 = null;
        restAdapter12.setLogLevel(logLevel93);
        retrofit.ErrorHandler errorHandler95 = restAdapter12.errorHandler;
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(profiler20);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNull(profiler30);
        org.junit.Assert.assertNull(log31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(executor53);
        org.junit.Assert.assertNull(server54);
        org.junit.Assert.assertNotNull(headerArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(headerList84);
        org.junit.Assert.assertNotNull(headerList87);
        org.junit.Assert.assertNotNull(request92);
        org.junit.Assert.assertNull(errorHandler95);
    }

    @Test
    public void test02588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02588");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.converter.Converter converter4 = builder0.converter;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor8 = restAdapter7.callbackExecutor;
        java.util.concurrent.Executor executor9 = restAdapter7.callbackExecutor;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.Server server14 = new retrofit.Server("", "");
        restAdapter10.server = server14;
        restAdapter7.server = server14;
        restAdapter5.server = server14;
        retrofit.Profiler profiler18 = restAdapter5.profiler;
        retrofit.ErrorHandler errorHandler19 = null;
        restAdapter5.errorHandler = errorHandler19;
        retrofit.RestAdapter.RestHandler restHandler21 = restAdapter5.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler22 = restAdapter5.new RestHandler();
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler24 = builder23.errorHandler;
        retrofit.ErrorHandler errorHandler25 = builder23.errorHandler;
        retrofit.converter.Converter converter26 = null;
        builder23.converter = converter26;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        builder23.requestInterceptor = requestInterceptor28;
        retrofit.client.Client.Provider provider30 = builder23.clientProvider;
        builder23.ensureSaneDefaults();
        retrofit.client.Client.Provider provider32 = builder23.clientProvider;
        restAdapter5.clientProvider = provider32;
        retrofit.RestAdapter.Builder builder34 = builder0.setClient(provider32);
        retrofit.RestAdapter.LogLevel logLevel35 = builder0.logLevel;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(profiler18);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNull(errorHandler25);
        org.junit.Assert.assertNull(provider30);
        org.junit.Assert.assertNotNull(provider32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test02589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02589");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter0.getLogLevel();
        retrofit.client.Client.Provider provider20 = null;
        restAdapter0.clientProvider = provider20;
        retrofit.converter.Converter converter22 = restAdapter0.converter;
        retrofit.ErrorHandler errorHandler23 = restAdapter0.errorHandler;
        retrofit.ErrorHandler errorHandler24 = restAdapter0.errorHandler;
        retrofit.Profiler profiler25 = restAdapter0.profiler;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler27 = builder26.errorHandler;
        retrofit.client.Client.Provider provider28 = null;
        builder26.clientProvider = provider28;
        retrofit.Server server32 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder33 = builder26.setServer(server32);
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler35 = builder34.errorHandler;
        retrofit.client.Client.Provider provider36 = null;
        builder34.clientProvider = provider36;
        retrofit.converter.Converter converter38 = builder34.converter;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder40 = builder34.setLogLevel(logLevel39);
        builder26.logLevel = logLevel39;
        boolean boolean42 = logLevel39.log();
        restAdapter0.logLevel = logLevel39;
        java.util.concurrent.Executor executor44 = restAdapter0.callbackExecutor;
        retrofit.client.Header[] headerArray57 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList58 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList58, headerArray57);
        retrofit.mime.TypedOutput typedOutput60 = null;
        retrofit.client.Request request61 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList58, typedOutput60);
        retrofit.mime.TypedOutput typedOutput62 = null;
        retrofit.client.Request request63 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList58, typedOutput62);
        retrofit.mime.TypedOutput typedOutput64 = null;
        retrofit.client.Request request65 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList58, typedOutput64);
        retrofit.mime.TypedOutput typedOutput66 = null;
        retrofit.client.Request request67 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList58, typedOutput66);
        retrofit.mime.TypedOutput typedOutput68 = null;
        retrofit.client.Request request69 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList58, typedOutput68);
        retrofit.mime.TypedOutput typedOutput70 = null;
        retrofit.client.Request request71 = new retrofit.client.Request("hi!", "default", (java.util.List<retrofit.client.Header>) headerList58, typedOutput70);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request72 = restAdapter0.logAndReplaceRequest(request71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(converter22);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNull(profiler25);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(errorHandler35);
        org.junit.Assert.assertNull(converter38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(executor44);
        org.junit.Assert.assertNotNull(headerArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test02590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02590");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter0.getLogLevel();
        retrofit.ErrorHandler errorHandler20 = null;
        restAdapter0.errorHandler = errorHandler20;
        retrofit.client.Client.Provider provider22 = null;
        restAdapter0.clientProvider = provider22;
        retrofit.ErrorHandler errorHandler24 = restAdapter0.errorHandler;
        retrofit.Server server25 = restAdapter0.server;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler27 = builder26.errorHandler;
        retrofit.ErrorHandler errorHandler28 = builder26.errorHandler;
        retrofit.RestAdapter.Log log29 = null;
        builder26.log = log29;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean32 = logLevel31.log();
        builder26.logLevel = logLevel31;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler35 = restAdapter34.new RestHandler();
        java.util.concurrent.Executor executor36 = null;
        restAdapter34.callbackExecutor = executor36;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor39 = restAdapter38.callbackExecutor;
        java.util.concurrent.Executor executor40 = restAdapter38.callbackExecutor;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler42 = restAdapter41.errorHandler;
        retrofit.Server server45 = new retrofit.Server("", "");
        restAdapter41.server = server45;
        restAdapter38.server = server45;
        restAdapter34.server = server45;
        retrofit.RestAdapter.Builder builder49 = builder26.setServer(server45);
        restAdapter0.server = server45;
        retrofit.Server server51 = restAdapter0.server;
        retrofit.ErrorHandler errorHandler52 = null;
        restAdapter0.errorHandler = errorHandler52;
        retrofit.RestAdapter.LogLevel logLevel54 = restAdapter0.getLogLevel();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNotNull(server25);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNull(executor40);
        org.junit.Assert.assertNull(errorHandler42);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(server51);
        org.junit.Assert.assertNull(logLevel54);
    }

    @Test
    public void test02591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02591");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.ErrorHandler errorHandler3 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder7 = builder5.setServer("hi!");
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler9 = builder8.errorHandler;
        retrofit.ErrorHandler errorHandler10 = builder8.errorHandler;
        retrofit.Profiler profiler11 = builder8.profiler;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor13 = restAdapter12.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter12.new RestHandler();
        retrofit.Server server17 = new retrofit.Server("hi!", "hi!");
        restAdapter12.server = server17;
        retrofit.RestAdapter.Builder builder19 = builder8.setServer(server17);
        retrofit.converter.Converter converter20 = null;
        builder19.converter = converter20;
        builder19.ensureSaneDefaults();
        retrofit.RestAdapter.Log log23 = null;
        builder19.log = log23;
        retrofit.RequestInterceptor requestInterceptor25 = builder19.requestInterceptor;
        retrofit.client.Client.Provider provider26 = builder19.clientProvider;
        retrofit.RestAdapter.Builder builder27 = builder5.setClient(provider26);
        java.util.concurrent.Executor executor28 = builder27.callbackExecutor;
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNull(profiler11);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNotNull(provider26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(executor28);
    }

    @Test
    public void test02592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02592");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter3 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler4 = restAdapter3.errorHandler;
        retrofit.Server server7 = new retrofit.Server("", "");
        restAdapter3.server = server7;
        restAdapter0.server = server7;
        retrofit.RestAdapter.RestHandler restHandler10 = restAdapter0.new RestHandler();
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor12 = restAdapter11.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter11.new RestHandler();
        retrofit.Server server16 = new retrofit.Server("hi!", "hi!");
        restAdapter11.server = server16;
        retrofit.Server server18 = restAdapter11.server;
        restAdapter0.server = server18;
        retrofit.ErrorHandler errorHandler20 = restAdapter0.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler21 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter0.logLevel;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(errorHandler4);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNotNull(server18);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNull(logLevel22);
        org.junit.Assert.assertNull(logLevel23);
    }

    @Test
    public void test02593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02593");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.Profiler profiler5 = null;
        builder4.profiler = profiler5;
        retrofit.Profiler profiler7 = null;
        builder4.profiler = profiler7;
        retrofit.Server server9 = builder4.server;
        java.lang.String str10 = server9.getName();
        java.lang.String str11 = server9.getUrl();
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(server9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "default" + "'", str10, "default");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test02594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02594");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.converter.Converter converter3 = null;
        builder0.converter = converter3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        builder0.requestInterceptor = requestInterceptor5;
        retrofit.client.Client.Provider provider7 = builder0.clientProvider;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler10 = builder9.errorHandler;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        builder9.requestInterceptor = requestInterceptor11;
        java.util.concurrent.Executor executor13 = builder9.httpExecutor;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        log14.log("default");
        builder9.log = log14;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server21 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder22 = builder18.setServer(server21);
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor24 = restAdapter23.callbackExecutor;
        java.util.concurrent.Executor executor25 = restAdapter23.callbackExecutor;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler27 = restAdapter26.errorHandler;
        retrofit.Server server30 = new retrofit.Server("", "");
        restAdapter26.server = server30;
        restAdapter23.server = server30;
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        restAdapter23.log = log33;
        retrofit.RestAdapter.Builder builder35 = builder22.setLog(log33);
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder37 = builder22.setLogLevel(logLevel36);
        retrofit.RestAdapter.Log log38 = builder22.log;
        retrofit.RestAdapter restAdapter39 = builder22.build();
        retrofit.Server server40 = null;
        retrofit.client.Client.Provider provider41 = null;
        java.util.concurrent.Executor executor42 = null;
        java.util.concurrent.Executor executor43 = null;
        retrofit.RequestInterceptor requestInterceptor44 = null;
        retrofit.converter.Converter converter45 = null;
        retrofit.Profiler profiler46 = null;
        retrofit.ErrorHandler errorHandler47 = null;
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        log48.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter(server40, provider41, executor42, executor43, requestInterceptor44, converter45, profiler46, errorHandler47, log48, logLevel51);
        retrofit.RestAdapter.RestHandler restHandler53 = restAdapter52.new RestHandler();
        retrofit.client.Client.Provider provider54 = restAdapter52.clientProvider;
        retrofit.RestAdapter.Log log55 = restAdapter52.log;
        retrofit.RestAdapter.RestHandler restHandler56 = restAdapter52.new RestHandler();
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler58 = builder57.errorHandler;
        java.util.concurrent.Executor executor59 = builder57.callbackExecutor;
        retrofit.RestAdapter.Builder builder61 = builder57.setServer("hi!");
        builder61.ensureSaneDefaults();
        java.util.concurrent.Executor executor63 = builder61.callbackExecutor;
        restAdapter52.callbackExecutor = executor63;
        builder22.callbackExecutor = executor63;
        builder9.callbackExecutor = executor63;
        builder0.callbackExecutor = executor63;
        retrofit.RestAdapter.Log log68 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder69 = builder0.setLog(log68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(provider7);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNotNull(restAdapter39);
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(provider54);
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertNull(errorHandler58);
        org.junit.Assert.assertNull(executor59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(executor63);
    }

    @Test
    public void test02595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02595");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler4 = null;
        builder3.errorHandler = errorHandler4;
        retrofit.ErrorHandler errorHandler6 = builder3.errorHandler;
        retrofit.RestAdapter.Builder builder8 = builder3.setServer("hi!");
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler10 = builder9.errorHandler;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.Server server14 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder15 = builder11.setServer(server14);
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor17 = restAdapter16.callbackExecutor;
        java.util.concurrent.Executor executor18 = restAdapter16.callbackExecutor;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler20 = restAdapter19.errorHandler;
        retrofit.Server server23 = new retrofit.Server("", "");
        restAdapter19.server = server23;
        restAdapter16.server = server23;
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        restAdapter16.log = log26;
        retrofit.RestAdapter.Builder builder28 = builder15.setLog(log26);
        retrofit.RestAdapter.Builder builder29 = builder9.setLog(log26);
        builder3.log = log26;
        retrofit.RestAdapter.LogLevel logLevel31 = builder3.logLevel;
        retrofit.RestAdapter.Builder builder32 = builder0.setLogLevel(logLevel31);
        retrofit.Profiler profiler33 = builder0.profiler;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler36 = builder35.errorHandler;
        retrofit.Server server39 = new retrofit.Server("", "");
        builder35.server = server39;
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        builder35.log = log41;
        retrofit.RequestInterceptor requestInterceptor43 = builder35.requestInterceptor;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        log44.log("hi!");
        log44.log("hi!");
        builder35.log = log44;
        retrofit.Server server50 = null;
        retrofit.client.Client.Provider provider51 = null;
        java.util.concurrent.Executor executor52 = null;
        java.util.concurrent.Executor executor53 = null;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        retrofit.converter.Converter converter55 = null;
        retrofit.Profiler profiler56 = null;
        retrofit.ErrorHandler errorHandler57 = null;
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        log58.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel61 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter(server50, provider51, executor52, executor53, requestInterceptor54, converter55, profiler56, errorHandler57, log58, logLevel61);
        retrofit.RestAdapter.RestHandler restHandler63 = restAdapter62.new RestHandler();
        retrofit.RestAdapter.Log log64 = retrofit.RestAdapter.Log.NONE;
        restAdapter62.log = log64;
        retrofit.converter.Converter converter66 = null;
        restAdapter62.converter = converter66;
        retrofit.RestAdapter.LogLevel logLevel68 = restAdapter62.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor69 = null;
        restAdapter62.requestInterceptor = requestInterceptor69;
        retrofit.RestAdapter.LogLevel logLevel71 = restAdapter62.logLevel;
        retrofit.RestAdapter.RestHandler restHandler72 = restAdapter62.new RestHandler();
        retrofit.RestAdapter.Log log73 = restAdapter62.log;
        builder35.log = log73;
        builder0.log = log73;
        retrofit.converter.Converter converter76 = builder0.converter;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(profiler33);
        org.junit.Assert.assertNull(errorHandler36);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertNull(requestInterceptor43);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNotNull(log58);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log64);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log73);
        org.junit.Assert.assertNotNull(converter76);
    }

    @Test
    public void test02596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02596");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = restAdapter0.errorHandler;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler16 = builder15.errorHandler;
        retrofit.ErrorHandler errorHandler17 = builder15.errorHandler;
        java.util.concurrent.Executor executor18 = builder15.callbackExecutor;
        java.util.concurrent.Executor executor19 = null;
        builder15.callbackExecutor = executor19;
        retrofit.Server server21 = null;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        log29.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel32);
        builder15.log = log29;
        restAdapter0.log = log29;
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter0.logLevel;
        retrofit.RestAdapter.RestHandler restHandler37 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Log log38 = restAdapter0.log;
        retrofit.RequestInterceptor requestInterceptor39 = restAdapter0.requestInterceptor;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel36);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNull(requestInterceptor39);
    }

    @Test
    public void test02597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02597");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.ErrorHandler errorHandler3 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler7 = builder6.errorHandler;
        retrofit.ErrorHandler errorHandler8 = builder6.errorHandler;
        retrofit.Profiler profiler9 = builder6.profiler;
        retrofit.RestAdapter.Log log10 = builder6.log;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.FULL;
        builder6.logLevel = logLevel11;
        retrofit.RestAdapter.Builder builder13 = builder5.setLogLevel(logLevel11);
        retrofit.Server server16 = new retrofit.Server("hi!", "default");
        retrofit.RestAdapter.Builder builder17 = builder5.setServer(server16);
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler19 = null;
        builder18.errorHandler = errorHandler19;
        retrofit.ErrorHandler errorHandler21 = builder18.errorHandler;
        retrofit.RestAdapter.Builder builder23 = builder18.setServer("hi!");
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler25 = builder24.errorHandler;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.Server server29 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder30 = builder26.setServer(server29);
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor32 = restAdapter31.callbackExecutor;
        java.util.concurrent.Executor executor33 = restAdapter31.callbackExecutor;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler35 = restAdapter34.errorHandler;
        retrofit.Server server38 = new retrofit.Server("", "");
        restAdapter34.server = server38;
        restAdapter31.server = server38;
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        restAdapter31.log = log41;
        retrofit.RestAdapter.Builder builder43 = builder30.setLog(log41);
        retrofit.RestAdapter.Builder builder44 = builder24.setLog(log41);
        builder18.log = log41;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler47 = builder46.errorHandler;
        retrofit.client.Client.Provider provider48 = null;
        builder46.clientProvider = provider48;
        retrofit.Server server52 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder53 = builder46.setServer(server52);
        retrofit.converter.Converter converter54 = null;
        builder53.converter = converter54;
        retrofit.RestAdapter restAdapter56 = builder53.build();
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler58 = builder57.errorHandler;
        java.util.concurrent.Executor executor59 = null;
        builder57.callbackExecutor = executor59;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider62 = builder61.clientProvider;
        java.util.concurrent.Executor executor63 = null;
        builder61.callbackExecutor = executor63;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.Server server68 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder69 = builder65.setServer(server68);
        java.lang.String str70 = server68.getUrl();
        retrofit.RestAdapter.Builder builder71 = builder61.setServer(server68);
        retrofit.RestAdapter.Builder builder72 = builder57.setServer(server68);
        restAdapter56.server = server68;
        retrofit.client.Client.Provider provider74 = restAdapter56.clientProvider;
        retrofit.RestAdapter.Builder builder75 = builder18.setClient(provider74);
        retrofit.RestAdapter.Builder builder76 = builder5.setClient(provider74);
        retrofit.Profiler profiler77 = builder5.profiler;
        retrofit.Server server78 = builder5.server;
        java.lang.Class<?> wildcardClass79 = builder5.getClass();
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNull(profiler9);
        org.junit.Assert.assertNull(log10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(errorHandler25);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertNull(errorHandler35);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(errorHandler47);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(restAdapter56);
        org.junit.Assert.assertNull(errorHandler58);
        org.junit.Assert.assertNull(provider62);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hi!" + "'", str70, "hi!");
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(provider74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNull(profiler77);
        org.junit.Assert.assertNotNull(server78);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test02598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02598");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler22 = builder21.errorHandler;
        java.util.concurrent.Executor executor23 = null;
        builder21.callbackExecutor = executor23;
        retrofit.converter.Converter converter25 = builder21.converter;
        retrofit.RestAdapter.Builder builder27 = builder21.setServer("hi!");
        builder21.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor30 = restAdapter29.callbackExecutor;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor32 = restAdapter31.callbackExecutor;
        java.util.concurrent.Executor executor33 = restAdapter31.callbackExecutor;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler35 = restAdapter34.errorHandler;
        retrofit.Server server38 = new retrofit.Server("", "");
        restAdapter34.server = server38;
        restAdapter31.server = server38;
        restAdapter29.server = server38;
        java.lang.String str42 = server38.getName();
        builder21.server = server38;
        java.lang.String str44 = server38.getName();
        restAdapter0.server = server38;
        retrofit.RestAdapter.LogLevel logLevel46 = restAdapter0.logLevel;
        retrofit.client.Response response48 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response50 = restAdapter0.logAndReplaceResponse("default", response48, (long) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNull(converter25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertNull(errorHandler35);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNull(logLevel46);
    }

    @Test
    public void test02599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02599");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server6 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder7 = builder0.setServer(server6);
        retrofit.converter.Converter converter8 = null;
        builder7.converter = converter8;
        retrofit.RestAdapter restAdapter10 = builder7.build();
        retrofit.RestAdapter restAdapter11 = builder7.build();
        retrofit.client.Response response13 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response15 = restAdapter11.logAndReplaceResponse("hi!", response13, (long) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(restAdapter10);
        org.junit.Assert.assertNotNull(restAdapter11);
    }

    @Test
    public void test02600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02600");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        restAdapter12.log = log14;
        retrofit.converter.Converter converter16 = null;
        restAdapter12.converter = converter16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter12.getLogLevel();
        retrofit.ErrorHandler errorHandler19 = restAdapter12.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter12.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor21 = restAdapter12.requestInterceptor;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor23 = restAdapter22.callbackExecutor;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor25 = restAdapter24.callbackExecutor;
        java.util.concurrent.Executor executor26 = restAdapter24.callbackExecutor;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler28 = restAdapter27.errorHandler;
        retrofit.Server server31 = new retrofit.Server("", "");
        restAdapter27.server = server31;
        restAdapter24.server = server31;
        restAdapter22.server = server31;
        retrofit.converter.Converter converter35 = restAdapter22.converter;
        retrofit.RestAdapter.RestHandler restHandler36 = restAdapter22.new RestHandler();
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.Server server40 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder41 = builder37.setServer(server40);
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor43 = restAdapter42.callbackExecutor;
        java.util.concurrent.Executor executor44 = restAdapter42.callbackExecutor;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler46 = restAdapter45.errorHandler;
        retrofit.Server server49 = new retrofit.Server("", "");
        restAdapter45.server = server49;
        restAdapter42.server = server49;
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        restAdapter42.log = log52;
        retrofit.RestAdapter.Builder builder54 = builder41.setLog(log52);
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder56 = builder41.setLogLevel(logLevel55);
        retrofit.Profiler profiler57 = null;
        builder56.profiler = profiler57;
        retrofit.converter.Converter converter59 = null;
        builder56.converter = converter59;
        retrofit.ErrorHandler errorHandler61 = null;
        builder56.errorHandler = errorHandler61;
        retrofit.RestAdapter.LogLevel logLevel63 = builder56.logLevel;
        restAdapter22.logLevel = logLevel63;
        restAdapter12.logLevel = logLevel63;
        retrofit.RequestInterceptor requestInterceptor66 = restAdapter12.requestInterceptor;
        retrofit.Profiler profiler67 = null;
        restAdapter12.profiler = profiler67;
        retrofit.RestAdapter.RestHandler restHandler69 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler70 = restAdapter12.new RestHandler();
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(requestInterceptor21);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertNull(converter35);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(executor43);
        org.junit.Assert.assertNull(executor44);
        org.junit.Assert.assertNull(errorHandler46);
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(requestInterceptor66);
    }

    @Test
    public void test02601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02601");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        restAdapter12.log = log14;
        retrofit.converter.Converter converter16 = null;
        restAdapter12.converter = converter16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter12.getLogLevel();
        retrofit.ErrorHandler errorHandler19 = restAdapter12.errorHandler;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler21 = builder20.errorHandler;
        retrofit.client.Client.Provider provider22 = null;
        builder20.clientProvider = provider22;
        retrofit.Server server26 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder27 = builder20.setServer(server26);
        retrofit.converter.Converter converter28 = null;
        builder27.converter = converter28;
        retrofit.RestAdapter restAdapter30 = builder27.build();
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler32 = builder31.errorHandler;
        java.util.concurrent.Executor executor33 = null;
        builder31.callbackExecutor = executor33;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider36 = builder35.clientProvider;
        java.util.concurrent.Executor executor37 = null;
        builder35.callbackExecutor = executor37;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.Server server42 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder43 = builder39.setServer(server42);
        java.lang.String str44 = server42.getUrl();
        retrofit.RestAdapter.Builder builder45 = builder35.setServer(server42);
        retrofit.RestAdapter.Builder builder46 = builder31.setServer(server42);
        restAdapter30.server = server42;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler49 = builder48.errorHandler;
        retrofit.client.Client.Provider provider50 = null;
        builder48.clientProvider = provider50;
        retrofit.Server server54 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder55 = builder48.setServer(server54);
        retrofit.client.Client.Provider provider56 = null;
        java.util.concurrent.Executor executor57 = null;
        java.util.concurrent.Executor executor58 = null;
        retrofit.RequestInterceptor requestInterceptor59 = null;
        retrofit.converter.Converter converter60 = null;
        retrofit.Profiler profiler61 = null;
        retrofit.ErrorHandler errorHandler62 = null;
        retrofit.Server server63 = null;
        retrofit.client.Client.Provider provider64 = null;
        java.util.concurrent.Executor executor65 = null;
        java.util.concurrent.Executor executor66 = null;
        retrofit.RequestInterceptor requestInterceptor67 = null;
        retrofit.converter.Converter converter68 = null;
        retrofit.Profiler profiler69 = null;
        retrofit.ErrorHandler errorHandler70 = null;
        retrofit.RestAdapter.Log log71 = retrofit.RestAdapter.Log.NONE;
        log71.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel74 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter(server63, provider64, executor65, executor66, requestInterceptor67, converter68, profiler69, errorHandler70, log71, logLevel74);
        retrofit.RestAdapter.LogLevel logLevel76 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter77 = new retrofit.RestAdapter(server54, provider56, executor57, executor58, requestInterceptor59, converter60, profiler61, errorHandler62, log71, logLevel76);
        boolean boolean78 = logLevel76.log();
        boolean boolean79 = logLevel76.log();
        restAdapter30.setLogLevel(logLevel76);
        restAdapter12.setLogLevel(logLevel76);
        retrofit.client.Header[] headerArray84 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList85 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList85, headerArray84);
        retrofit.mime.TypedOutput typedOutput87 = null;
        retrofit.client.Request request88 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList85, typedOutput87);
        java.lang.String str89 = request88.getMethod();
        java.util.List<retrofit.client.Header> headerList90 = request88.getHeaders();
        java.lang.String str91 = request88.getMethod();
        retrofit.client.Request request92 = restAdapter12.logAndReplaceRequest(request88);
        java.lang.String str93 = request92.getMethod();
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(restAdapter30);
        org.junit.Assert.assertNull(errorHandler32);
        org.junit.Assert.assertNull(provider36);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(errorHandler49);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(log71);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(headerArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNotNull(headerList90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertNotNull(request92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
    }

    @Test
    public void test02602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02602");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        java.util.concurrent.Executor executor4 = null;
        builder0.httpExecutor = executor4;
        retrofit.Profiler profiler6 = null;
        builder0.profiler = profiler6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler9 = builder8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        builder8.server = server12;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler22 = builder21.errorHandler;
        retrofit.Server server25 = new retrofit.Server("", "");
        builder21.server = server25;
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        builder21.log = log27;
        retrofit.Server server29 = null;
        retrofit.client.Client.Provider provider30 = null;
        java.util.concurrent.Executor executor31 = null;
        java.util.concurrent.Executor executor32 = null;
        retrofit.RequestInterceptor requestInterceptor33 = null;
        retrofit.converter.Converter converter34 = null;
        retrofit.Profiler profiler35 = null;
        retrofit.ErrorHandler errorHandler36 = null;
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        log37.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter(server29, provider30, executor31, executor32, requestInterceptor33, converter34, profiler35, errorHandler36, log37, logLevel40);
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter(server12, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log27, logLevel40);
        retrofit.RestAdapter.Builder builder43 = builder0.setLogLevel(logLevel40);
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.Server server47 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder48 = builder44.setServer(server47);
        java.lang.String str49 = server47.getUrl();
        retrofit.RestAdapter.Builder builder50 = builder43.setServer(server47);
        retrofit.RequestInterceptor requestInterceptor51 = builder43.requestInterceptor;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(requestInterceptor51);
    }

    @Test
    public void test02603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02603");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter3 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler4 = restAdapter3.errorHandler;
        retrofit.Server server7 = new retrofit.Server("", "");
        restAdapter3.server = server7;
        restAdapter0.server = server7;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.Server server14 = new retrofit.Server("", "");
        restAdapter10.server = server14;
        restAdapter0.server = server14;
        retrofit.RestAdapter.Log log17 = restAdapter0.log;
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler20 = builder19.errorHandler;
        java.util.concurrent.Executor executor21 = builder19.callbackExecutor;
        retrofit.RestAdapter.Builder builder23 = builder19.setServer("hi!");
        builder23.ensureSaneDefaults();
        java.util.concurrent.Executor executor25 = builder23.callbackExecutor;
        restAdapter0.httpExecutor = executor25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.Server server30 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder31 = builder27.setServer(server30);
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor33 = restAdapter32.callbackExecutor;
        java.util.concurrent.Executor executor34 = restAdapter32.callbackExecutor;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler36 = restAdapter35.errorHandler;
        retrofit.Server server39 = new retrofit.Server("", "");
        restAdapter35.server = server39;
        restAdapter32.server = server39;
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        restAdapter32.log = log42;
        retrofit.RestAdapter.Builder builder44 = builder31.setLog(log42);
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder46 = builder31.setLogLevel(logLevel45);
        retrofit.Profiler profiler47 = null;
        builder46.profiler = profiler47;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.Server server52 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder53 = builder49.setServer(server52);
        retrofit.RestAdapter.LogLevel logLevel54 = builder53.logLevel;
        retrofit.RestAdapter.Builder builder55 = builder46.setLogLevel(logLevel54);
        retrofit.ErrorHandler errorHandler56 = builder46.errorHandler;
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor58 = null;
        restAdapter57.requestInterceptor = requestInterceptor58;
        retrofit.RestAdapter.RestHandler restHandler60 = restAdapter57.new RestHandler();
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor62 = restAdapter61.callbackExecutor;
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor64 = restAdapter63.callbackExecutor;
        java.util.concurrent.Executor executor65 = restAdapter63.callbackExecutor;
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler67 = restAdapter66.errorHandler;
        retrofit.Server server70 = new retrofit.Server("", "");
        restAdapter66.server = server70;
        restAdapter63.server = server70;
        restAdapter61.server = server70;
        retrofit.Profiler profiler74 = restAdapter61.profiler;
        retrofit.ErrorHandler errorHandler75 = null;
        restAdapter61.errorHandler = errorHandler75;
        retrofit.Profiler profiler77 = null;
        restAdapter61.profiler = profiler77;
        retrofit.RestAdapter.LogLevel logLevel79 = restAdapter61.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel80 = restAdapter61.getLogLevel();
        retrofit.ErrorHandler errorHandler81 = null;
        restAdapter61.errorHandler = errorHandler81;
        retrofit.client.Client.Provider provider83 = null;
        restAdapter61.clientProvider = provider83;
        retrofit.ErrorHandler errorHandler85 = restAdapter61.errorHandler;
        retrofit.Server server86 = restAdapter61.server;
        java.lang.String str87 = server86.getName();
        restAdapter57.server = server86;
        builder46.server = server86;
        restAdapter0.server = server86;
        retrofit.Server server91 = restAdapter0.server;
        retrofit.RestAdapter.LogLevel logLevel92 = restAdapter0.logLevel;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(errorHandler4);
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(log17);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(executor25);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertNull(executor34);
        org.junit.Assert.assertNull(errorHandler36);
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(errorHandler56);
        org.junit.Assert.assertNull(executor62);
        org.junit.Assert.assertNull(executor64);
        org.junit.Assert.assertNull(executor65);
        org.junit.Assert.assertNull(errorHandler67);
        org.junit.Assert.assertNull(profiler74);
        org.junit.Assert.assertNull(logLevel79);
        org.junit.Assert.assertNull(logLevel80);
        org.junit.Assert.assertNull(errorHandler85);
        org.junit.Assert.assertNotNull(server86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(server91);
        org.junit.Assert.assertNull(logLevel92);
    }

    @Test
    public void test02604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02604");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter0.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor21 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.logLevel;
        retrofit.converter.Converter converter24 = null;
        restAdapter22.converter = converter24;
        retrofit.Server server26 = null;
        retrofit.client.Client.Provider provider27 = null;
        java.util.concurrent.Executor executor28 = null;
        java.util.concurrent.Executor executor29 = null;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        retrofit.converter.Converter converter31 = null;
        retrofit.Profiler profiler32 = null;
        retrofit.ErrorHandler errorHandler33 = null;
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        log34.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter(server26, provider27, executor28, executor29, requestInterceptor30, converter31, profiler32, errorHandler33, log34, logLevel37);
        retrofit.RestAdapter.RestHandler restHandler39 = restAdapter38.new RestHandler();
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler41 = null;
        builder40.errorHandler = errorHandler41;
        retrofit.converter.Converter converter43 = builder40.converter;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.Server server47 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder48 = builder44.setServer(server47);
        retrofit.converter.Converter converter49 = builder44.converter;
        retrofit.RequestInterceptor requestInterceptor50 = builder44.requestInterceptor;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider52 = builder51.clientProvider;
        java.util.concurrent.Executor executor53 = null;
        builder51.callbackExecutor = executor53;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.Server server58 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder59 = builder55.setServer(server58);
        java.lang.String str60 = server58.getUrl();
        retrofit.RestAdapter.Builder builder61 = builder51.setServer(server58);
        builder51.ensureSaneDefaults();
        retrofit.Server server63 = null;
        retrofit.client.Client.Provider provider64 = null;
        java.util.concurrent.Executor executor65 = null;
        java.util.concurrent.Executor executor66 = null;
        retrofit.RequestInterceptor requestInterceptor67 = null;
        retrofit.converter.Converter converter68 = null;
        retrofit.Profiler profiler69 = null;
        retrofit.ErrorHandler errorHandler70 = null;
        retrofit.RestAdapter.Log log71 = retrofit.RestAdapter.Log.NONE;
        log71.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel74 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter(server63, provider64, executor65, executor66, requestInterceptor67, converter68, profiler69, errorHandler70, log71, logLevel74);
        retrofit.RestAdapter.RestHandler restHandler76 = restAdapter75.new RestHandler();
        retrofit.RestAdapter.Log log77 = retrofit.RestAdapter.Log.NONE;
        restAdapter75.log = log77;
        retrofit.RestAdapter.Builder builder79 = builder51.setLog(log77);
        retrofit.RestAdapter.Builder builder81 = builder51.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor82 = builder51.requestInterceptor;
        builder44.requestInterceptor = requestInterceptor82;
        builder40.requestInterceptor = requestInterceptor82;
        restAdapter38.requestInterceptor = requestInterceptor82;
        restAdapter22.requestInterceptor = requestInterceptor82;
        restAdapter0.requestInterceptor = requestInterceptor82;
        retrofit.client.Client.Provider provider88 = restAdapter0.clientProvider;
        retrofit.RestAdapter.Log log89 = restAdapter0.log;
        retrofit.RestAdapter.RestHandler restHandler90 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(requestInterceptor21);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter43);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(converter49);
        org.junit.Assert.assertNull(requestInterceptor50);
        org.junit.Assert.assertNull(provider52);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(log71);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(requestInterceptor82);
        org.junit.Assert.assertNull(provider88);
        org.junit.Assert.assertNull(log89);
    }

    @Test
    public void test02605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02605");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.Server server5 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder6 = builder2.setServer(server5);
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor8 = restAdapter7.callbackExecutor;
        java.util.concurrent.Executor executor9 = restAdapter7.callbackExecutor;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.Server server14 = new retrofit.Server("", "");
        restAdapter10.server = server14;
        restAdapter7.server = server14;
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        restAdapter7.log = log17;
        retrofit.RestAdapter.Builder builder19 = builder6.setLog(log17);
        retrofit.RestAdapter.Builder builder20 = builder0.setLog(log17);
        retrofit.RestAdapter.Log log21 = builder20.log;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler23 = builder22.errorHandler;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.Server server27 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder28 = builder24.setServer(server27);
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor30 = restAdapter29.callbackExecutor;
        java.util.concurrent.Executor executor31 = restAdapter29.callbackExecutor;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler33 = restAdapter32.errorHandler;
        retrofit.Server server36 = new retrofit.Server("", "");
        restAdapter32.server = server36;
        restAdapter29.server = server36;
        retrofit.RestAdapter.Log log39 = retrofit.RestAdapter.Log.NONE;
        restAdapter29.log = log39;
        retrofit.RestAdapter.Builder builder41 = builder28.setLog(log39);
        retrofit.RestAdapter.Builder builder42 = builder22.setLog(log39);
        retrofit.RestAdapter.Log log43 = builder42.log;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler45 = builder44.errorHandler;
        retrofit.ErrorHandler errorHandler46 = builder44.errorHandler;
        retrofit.Profiler profiler47 = builder44.profiler;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor49 = restAdapter48.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler50 = restAdapter48.new RestHandler();
        retrofit.Server server53 = new retrofit.Server("hi!", "hi!");
        restAdapter48.server = server53;
        retrofit.RestAdapter.Builder builder55 = builder44.setServer(server53);
        retrofit.converter.Converter converter56 = null;
        builder55.converter = converter56;
        retrofit.Profiler profiler58 = null;
        builder55.profiler = profiler58;
        retrofit.RestAdapter restAdapter60 = builder55.build();
        java.util.concurrent.Executor executor61 = builder55.httpExecutor;
        builder42.httpExecutor = executor61;
        builder20.httpExecutor = executor61;
        retrofit.client.Client.Provider provider64 = builder20.clientProvider;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNull(errorHandler33);
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertNull(errorHandler45);
        org.junit.Assert.assertNull(errorHandler46);
        org.junit.Assert.assertNull(profiler47);
        org.junit.Assert.assertNull(executor49);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(restAdapter60);
        org.junit.Assert.assertNotNull(executor61);
        org.junit.Assert.assertNull(provider64);
    }

    @Test
    public void test02606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02606");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = builder0.clientProvider;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server7 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder8 = builder4.setServer(server7);
        java.lang.String str9 = server7.getUrl();
        retrofit.RestAdapter.Builder builder10 = builder0.setServer(server7);
        builder0.ensureSaneDefaults();
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        log20.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel23);
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter24.new RestHandler();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        restAdapter24.log = log26;
        retrofit.RestAdapter.Builder builder28 = builder0.setLog(log26);
        retrofit.RestAdapter.Builder builder30 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter31 = builder0.build();
        retrofit.RestAdapter.RestHandler restHandler32 = restAdapter31.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler33 = restAdapter31.new RestHandler();
        retrofit.client.Response response35 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response37 = restAdapter31.logAndReplaceResponse("default", response35, 100L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(provider1);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(restAdapter31);
    }

    @Test
    public void test02607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02607");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.Profiler profiler3 = builder0.profiler;
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor5 = restAdapter4.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.Server server9 = new retrofit.Server("hi!", "hi!");
        restAdapter4.server = server9;
        retrofit.RestAdapter.Builder builder11 = builder0.setServer(server9);
        retrofit.converter.Converter converter12 = null;
        builder11.converter = converter12;
        builder11.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter15 = builder11.build();
        retrofit.RestAdapter.Log log16 = restAdapter15.log;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(restAdapter15);
        org.junit.Assert.assertNotNull(log16);
    }

    @Test
    public void test02608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02608");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        restAdapter5.log = log15;
        retrofit.RestAdapter.Builder builder17 = builder4.setLog(log15);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder19 = builder4.setLogLevel(logLevel18);
        retrofit.Profiler profiler20 = null;
        builder19.profiler = profiler20;
        java.util.concurrent.Executor executor22 = null;
        builder19.httpExecutor = executor22;
        retrofit.RestAdapter restAdapter24 = builder19.build();
        retrofit.client.Client.Provider provider25 = restAdapter24.clientProvider;
        retrofit.converter.Converter converter26 = restAdapter24.converter;
        java.lang.Throwable throwable27 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter24.logException(throwable27, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(restAdapter24);
        org.junit.Assert.assertNotNull(provider25);
        org.junit.Assert.assertNotNull(converter26);
    }

    @Test
    public void test02609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02609");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.client.Client.Provider provider14 = restAdapter12.clientProvider;
        retrofit.RestAdapter.Log log15 = restAdapter12.log;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler17 = builder16.errorHandler;
        retrofit.client.Client.Provider provider18 = null;
        builder16.clientProvider = provider18;
        retrofit.Server server22 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder23 = builder16.setServer(server22);
        retrofit.Server server26 = new retrofit.Server("", "");
        builder23.server = server26;
        restAdapter12.server = server26;
        java.lang.String str29 = server26.getName();
        java.lang.String str30 = server26.getName();
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
    }

    @Test
    public void test02610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02610");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.client.Header[] headerArray16 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList17 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList17, headerArray16);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList17, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList17, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList17, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList17, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("default", "hi!", (java.util.List<retrofit.client.Header>) headerList17, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList17, typedOutput29);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("", "default", (java.util.List<retrofit.client.Header>) headerList17, typedOutput31);
        java.lang.reflect.Method method33 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] {};
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj35 = restHandler1.invoke((java.lang.Object) headerList17, method33, objArray34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(headerArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
    }

    @Test
    public void test02611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02611");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        java.util.concurrent.Executor executor3 = builder0.callbackExecutor;
        java.util.concurrent.Executor executor4 = null;
        builder0.callbackExecutor = executor4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        log14.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel17);
        builder0.log = log14;
        retrofit.Server server20 = builder0.server;
        retrofit.Profiler profiler21 = null;
        builder0.profiler = profiler21;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor24 = restAdapter23.callbackExecutor;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor26 = restAdapter25.callbackExecutor;
        java.util.concurrent.Executor executor27 = restAdapter25.callbackExecutor;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler29 = restAdapter28.errorHandler;
        retrofit.Server server32 = new retrofit.Server("", "");
        restAdapter28.server = server32;
        restAdapter25.server = server32;
        restAdapter23.server = server32;
        retrofit.Profiler profiler36 = restAdapter23.profiler;
        retrofit.ErrorHandler errorHandler37 = null;
        restAdapter23.errorHandler = errorHandler37;
        retrofit.Profiler profiler39 = null;
        restAdapter23.profiler = profiler39;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        restAdapter23.requestInterceptor = requestInterceptor41;
        retrofit.RestAdapter.LogLevel logLevel43 = restAdapter23.getLogLevel();
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.Server server47 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder48 = builder44.setServer(server47);
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor50 = restAdapter49.callbackExecutor;
        java.util.concurrent.Executor executor51 = restAdapter49.callbackExecutor;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler53 = restAdapter52.errorHandler;
        retrofit.Server server56 = new retrofit.Server("", "");
        restAdapter52.server = server56;
        restAdapter49.server = server56;
        retrofit.RestAdapter.Log log59 = retrofit.RestAdapter.Log.NONE;
        restAdapter49.log = log59;
        retrofit.RestAdapter.Builder builder61 = builder48.setLog(log59);
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder63 = builder48.setLogLevel(logLevel62);
        retrofit.Profiler profiler64 = null;
        builder63.profiler = profiler64;
        retrofit.converter.Converter converter66 = null;
        builder63.converter = converter66;
        retrofit.ErrorHandler errorHandler68 = null;
        builder63.errorHandler = errorHandler68;
        retrofit.RestAdapter restAdapter70 = builder63.build();
        retrofit.ErrorHandler errorHandler71 = builder63.errorHandler;
        restAdapter23.errorHandler = errorHandler71;
        retrofit.RestAdapter.Builder builder73 = builder0.setErrorHandler(errorHandler71);
        retrofit.client.Client.Provider provider74 = builder73.clientProvider;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(server20);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNull(profiler36);
        org.junit.Assert.assertNull(logLevel43);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(executor50);
        org.junit.Assert.assertNull(executor51);
        org.junit.Assert.assertNull(errorHandler53);
        org.junit.Assert.assertNotNull(log59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(restAdapter70);
        org.junit.Assert.assertNotNull(errorHandler71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNull(provider74);
    }

    @Test
    public void test02612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02612");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server6 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder7 = builder0.setServer(server6);
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor9 = restAdapter8.callbackExecutor;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor11 = restAdapter10.callbackExecutor;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler14 = restAdapter13.errorHandler;
        retrofit.Server server17 = new retrofit.Server("", "");
        restAdapter13.server = server17;
        restAdapter10.server = server17;
        restAdapter8.server = server17;
        retrofit.Profiler profiler21 = restAdapter8.profiler;
        retrofit.ErrorHandler errorHandler22 = null;
        restAdapter8.errorHandler = errorHandler22;
        retrofit.Profiler profiler24 = null;
        restAdapter8.profiler = profiler24;
        retrofit.RestAdapter.RestHandler restHandler26 = restAdapter8.new RestHandler();
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.Server server30 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder31 = builder27.setServer(server30);
        retrofit.converter.Converter converter32 = builder27.converter;
        retrofit.RequestInterceptor requestInterceptor33 = builder27.requestInterceptor;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider35 = builder34.clientProvider;
        java.util.concurrent.Executor executor36 = null;
        builder34.callbackExecutor = executor36;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.Server server41 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder42 = builder38.setServer(server41);
        java.lang.String str43 = server41.getUrl();
        retrofit.RestAdapter.Builder builder44 = builder34.setServer(server41);
        builder34.ensureSaneDefaults();
        retrofit.Server server46 = null;
        retrofit.client.Client.Provider provider47 = null;
        java.util.concurrent.Executor executor48 = null;
        java.util.concurrent.Executor executor49 = null;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        retrofit.converter.Converter converter51 = null;
        retrofit.Profiler profiler52 = null;
        retrofit.ErrorHandler errorHandler53 = null;
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        log54.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter(server46, provider47, executor48, executor49, requestInterceptor50, converter51, profiler52, errorHandler53, log54, logLevel57);
        retrofit.RestAdapter.RestHandler restHandler59 = restAdapter58.new RestHandler();
        retrofit.RestAdapter.Log log60 = retrofit.RestAdapter.Log.NONE;
        restAdapter58.log = log60;
        retrofit.RestAdapter.Builder builder62 = builder34.setLog(log60);
        retrofit.RestAdapter.Builder builder64 = builder34.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor65 = builder34.requestInterceptor;
        builder27.requestInterceptor = requestInterceptor65;
        restAdapter8.requestInterceptor = requestInterceptor65;
        builder0.requestInterceptor = requestInterceptor65;
        builder0.ensureSaneDefaults();
        retrofit.Profiler profiler70 = null;
        builder0.profiler = profiler70;
        retrofit.Profiler profiler72 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder73 = builder0.setProfiler(profiler72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(profiler21);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(converter32);
        org.junit.Assert.assertNull(requestInterceptor33);
        org.junit.Assert.assertNull(provider35);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(requestInterceptor65);
    }

    @Test
    public void test02613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02613");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = builder0.clientProvider;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler5 = builder4.errorHandler;
        java.util.concurrent.Executor executor6 = null;
        builder4.callbackExecutor = executor6;
        java.util.concurrent.Executor executor8 = null;
        builder4.httpExecutor = executor8;
        retrofit.Profiler profiler10 = null;
        builder4.profiler = profiler10;
        retrofit.RestAdapter.Builder builder13 = builder4.setServer("hi!");
        retrofit.Profiler profiler14 = builder4.profiler;
        java.util.concurrent.Executor executor15 = builder4.httpExecutor;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler17 = builder16.errorHandler;
        java.util.concurrent.Executor executor18 = builder16.callbackExecutor;
        retrofit.RestAdapter.Builder builder20 = builder16.setServer("hi!");
        retrofit.Server server23 = new retrofit.Server("default", "hi!");
        java.lang.String str24 = server23.getUrl();
        retrofit.RestAdapter.Builder builder25 = builder20.setServer(server23);
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler27 = builder26.errorHandler;
        retrofit.ErrorHandler errorHandler28 = builder26.errorHandler;
        java.util.concurrent.Executor executor29 = builder26.callbackExecutor;
        java.util.concurrent.Executor executor30 = null;
        builder26.callbackExecutor = executor30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler33 = builder32.errorHandler;
        retrofit.Server server36 = new retrofit.Server("", "");
        builder32.server = server36;
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        builder32.log = log38;
        retrofit.RestAdapter.LogLevel logLevel40 = builder32.logLevel;
        retrofit.RestAdapter.Builder builder41 = builder26.setLogLevel(logLevel40);
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler43 = builder42.errorHandler;
        retrofit.client.Client.Provider provider44 = null;
        builder42.clientProvider = provider44;
        retrofit.Server server48 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder49 = builder42.setServer(server48);
        retrofit.converter.Converter converter50 = null;
        builder49.converter = converter50;
        retrofit.RestAdapter restAdapter52 = builder49.build();
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler54 = builder53.errorHandler;
        java.util.concurrent.Executor executor55 = null;
        builder53.callbackExecutor = executor55;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider58 = builder57.clientProvider;
        java.util.concurrent.Executor executor59 = null;
        builder57.callbackExecutor = executor59;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.Server server64 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder65 = builder61.setServer(server64);
        java.lang.String str66 = server64.getUrl();
        retrofit.RestAdapter.Builder builder67 = builder57.setServer(server64);
        retrofit.RestAdapter.Builder builder68 = builder53.setServer(server64);
        restAdapter52.server = server64;
        retrofit.client.Client.Provider provider70 = restAdapter52.clientProvider;
        retrofit.RestAdapter.Builder builder71 = builder41.setClient(provider70);
        retrofit.RestAdapter.Builder builder72 = builder25.setClient(provider70);
        retrofit.RestAdapter.Builder builder73 = builder4.setClient(provider70);
        retrofit.RestAdapter.Builder builder74 = builder0.setClient(provider70);
        retrofit.Profiler profiler75 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder76 = builder0.setProfiler(profiler75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(provider1);
        org.junit.Assert.assertNull(errorHandler5);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(profiler14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "default" + "'", str24, "default");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(errorHandler33);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(errorHandler43);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(restAdapter52);
        org.junit.Assert.assertNull(errorHandler54);
        org.junit.Assert.assertNull(provider58);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hi!" + "'", str66, "hi!");
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(provider70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
    }

    @Test
    public void test02614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02614");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = null;
        restAdapter0.httpExecutor = executor2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        log12.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel15);
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter16.new RestHandler();
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        restAdapter16.log = log18;
        retrofit.converter.Converter converter20 = null;
        restAdapter16.converter = converter20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.Server server25 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder26 = builder22.setServer(server25);
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor28 = restAdapter27.callbackExecutor;
        java.util.concurrent.Executor executor29 = restAdapter27.callbackExecutor;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler31 = restAdapter30.errorHandler;
        retrofit.Server server34 = new retrofit.Server("", "");
        restAdapter30.server = server34;
        restAdapter27.server = server34;
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        restAdapter27.log = log37;
        retrofit.RestAdapter.Builder builder39 = builder26.setLog(log37);
        restAdapter16.log = log37;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler42 = builder41.errorHandler;
        retrofit.Server server45 = new retrofit.Server("", "");
        builder41.server = server45;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor48 = restAdapter47.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler49 = restAdapter47.new RestHandler();
        retrofit.Server server52 = new retrofit.Server("hi!", "hi!");
        restAdapter47.server = server52;
        retrofit.RestAdapter.Builder builder54 = builder41.setServer(server52);
        restAdapter16.server = server52;
        retrofit.Profiler profiler56 = restAdapter16.profiler;
        retrofit.Server server57 = restAdapter16.server;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.Server server61 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder62 = builder58.setServer(server61);
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor64 = restAdapter63.callbackExecutor;
        java.util.concurrent.Executor executor65 = restAdapter63.callbackExecutor;
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler67 = restAdapter66.errorHandler;
        retrofit.Server server70 = new retrofit.Server("", "");
        restAdapter66.server = server70;
        restAdapter63.server = server70;
        retrofit.RestAdapter.Log log73 = retrofit.RestAdapter.Log.NONE;
        restAdapter63.log = log73;
        retrofit.RestAdapter.Builder builder75 = builder62.setLog(log73);
        retrofit.RestAdapter.LogLevel logLevel76 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder77 = builder62.setLogLevel(logLevel76);
        retrofit.RestAdapter.Log log78 = builder62.log;
        retrofit.RestAdapter restAdapter79 = builder62.build();
        java.util.concurrent.Executor executor80 = restAdapter79.callbackExecutor;
        restAdapter16.httpExecutor = executor80;
        restAdapter0.httpExecutor = executor80;
        retrofit.RestAdapter.RestHandler restHandler83 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Log log84 = restAdapter0.log;
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log18);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(errorHandler31);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(errorHandler42);
        org.junit.Assert.assertNull(executor48);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(profiler56);
        org.junit.Assert.assertNotNull(server57);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(executor64);
        org.junit.Assert.assertNull(executor65);
        org.junit.Assert.assertNull(errorHandler67);
        org.junit.Assert.assertNotNull(log73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(log78);
        org.junit.Assert.assertNotNull(restAdapter79);
        org.junit.Assert.assertNotNull(executor80);
        org.junit.Assert.assertNull(log84);
    }

    @Test
    public void test02615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02615");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        builder0.requestInterceptor = requestInterceptor5;
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor8 = restAdapter7.callbackExecutor;
        java.util.concurrent.Executor executor9 = restAdapter7.callbackExecutor;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.Server server14 = new retrofit.Server("", "");
        restAdapter10.server = server14;
        restAdapter7.server = server14;
        retrofit.RestAdapter.Builder builder17 = builder0.setServer(server14);
        retrofit.RestAdapter.LogLevel logLevel18 = builder0.logLevel;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler20 = builder19.errorHandler;
        retrofit.Server server23 = new retrofit.Server("", "");
        builder19.server = server23;
        retrofit.client.Client.Provider provider25 = null;
        java.util.concurrent.Executor executor26 = null;
        java.util.concurrent.Executor executor27 = null;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        retrofit.converter.Converter converter29 = null;
        retrofit.Profiler profiler30 = null;
        retrofit.ErrorHandler errorHandler31 = null;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler33 = builder32.errorHandler;
        retrofit.Server server36 = new retrofit.Server("", "");
        builder32.server = server36;
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        builder32.log = log38;
        retrofit.Server server40 = null;
        retrofit.client.Client.Provider provider41 = null;
        java.util.concurrent.Executor executor42 = null;
        java.util.concurrent.Executor executor43 = null;
        retrofit.RequestInterceptor requestInterceptor44 = null;
        retrofit.converter.Converter converter45 = null;
        retrofit.Profiler profiler46 = null;
        retrofit.ErrorHandler errorHandler47 = null;
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        log48.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter(server40, provider41, executor42, executor43, requestInterceptor44, converter45, profiler46, errorHandler47, log48, logLevel51);
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server23, provider25, executor26, executor27, requestInterceptor28, converter29, profiler30, errorHandler31, log38, logLevel51);
        retrofit.RestAdapter.Builder builder54 = builder0.setServer(server23);
        retrofit.Server server56 = new retrofit.Server("hi!");
        java.lang.String str57 = server56.getUrl();
        retrofit.RestAdapter.Builder builder58 = builder0.setServer(server56);
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider60 = builder59.clientProvider;
        java.util.concurrent.Executor executor61 = null;
        builder59.callbackExecutor = executor61;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        retrofit.Server server66 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder67 = builder63.setServer(server66);
        java.lang.String str68 = server66.getUrl();
        retrofit.RestAdapter.Builder builder69 = builder59.setServer(server66);
        builder59.ensureSaneDefaults();
        retrofit.Server server71 = null;
        retrofit.client.Client.Provider provider72 = null;
        java.util.concurrent.Executor executor73 = null;
        java.util.concurrent.Executor executor74 = null;
        retrofit.RequestInterceptor requestInterceptor75 = null;
        retrofit.converter.Converter converter76 = null;
        retrofit.Profiler profiler77 = null;
        retrofit.ErrorHandler errorHandler78 = null;
        retrofit.RestAdapter.Log log79 = retrofit.RestAdapter.Log.NONE;
        log79.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel82 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter83 = new retrofit.RestAdapter(server71, provider72, executor73, executor74, requestInterceptor75, converter76, profiler77, errorHandler78, log79, logLevel82);
        retrofit.RestAdapter.RestHandler restHandler84 = restAdapter83.new RestHandler();
        retrofit.RestAdapter.Log log85 = retrofit.RestAdapter.Log.NONE;
        restAdapter83.log = log85;
        retrofit.RestAdapter.Builder builder87 = builder59.setLog(log85);
        retrofit.RestAdapter.Builder builder88 = builder0.setLog(log85);
        java.lang.Class<?> wildcardClass89 = builder88.getClass();
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNull(errorHandler33);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(provider60);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(log79);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test02616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02616");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean3 = logLevel2.log();
        restAdapter0.logLevel = logLevel2;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler6 = builder5.errorHandler;
        retrofit.client.Client.Provider provider7 = null;
        builder5.clientProvider = provider7;
        retrofit.Server server11 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder12 = builder5.setServer(server11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler14 = builder13.errorHandler;
        retrofit.client.Client.Provider provider15 = null;
        builder13.clientProvider = provider15;
        retrofit.converter.Converter converter17 = builder13.converter;
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder19 = builder13.setLogLevel(logLevel18);
        builder5.logLevel = logLevel18;
        boolean boolean21 = logLevel18.log();
        restAdapter0.logLevel = logLevel18;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler24 = builder23.errorHandler;
        java.util.concurrent.Executor executor25 = builder23.callbackExecutor;
        retrofit.RestAdapter.Builder builder27 = builder23.setServer("hi!");
        builder27.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler30 = builder29.errorHandler;
        retrofit.ErrorHandler errorHandler31 = builder29.errorHandler;
        retrofit.RestAdapter.Log log32 = null;
        builder29.log = log32;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        builder29.logLevel = logLevel34;
        retrofit.ErrorHandler errorHandler37 = builder29.errorHandler;
        retrofit.RestAdapter.Builder builder39 = builder29.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor40 = null;
        builder39.requestInterceptor = requestInterceptor40;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler43 = builder42.errorHandler;
        retrofit.client.Client.Provider provider44 = null;
        builder42.clientProvider = provider44;
        retrofit.Server server48 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder49 = builder42.setServer(server48);
        retrofit.client.Client.Provider provider50 = null;
        java.util.concurrent.Executor executor51 = null;
        java.util.concurrent.Executor executor52 = null;
        retrofit.RequestInterceptor requestInterceptor53 = null;
        retrofit.converter.Converter converter54 = null;
        retrofit.Profiler profiler55 = null;
        retrofit.ErrorHandler errorHandler56 = null;
        retrofit.Server server57 = null;
        retrofit.client.Client.Provider provider58 = null;
        java.util.concurrent.Executor executor59 = null;
        java.util.concurrent.Executor executor60 = null;
        retrofit.RequestInterceptor requestInterceptor61 = null;
        retrofit.converter.Converter converter62 = null;
        retrofit.Profiler profiler63 = null;
        retrofit.ErrorHandler errorHandler64 = null;
        retrofit.RestAdapter.Log log65 = retrofit.RestAdapter.Log.NONE;
        log65.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel68 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter(server57, provider58, executor59, executor60, requestInterceptor61, converter62, profiler63, errorHandler64, log65, logLevel68);
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter(server48, provider50, executor51, executor52, requestInterceptor53, converter54, profiler55, errorHandler56, log65, logLevel70);
        log65.log("");
        builder39.log = log65;
        retrofit.RestAdapter.Log log75 = builder39.log;
        retrofit.RestAdapter.Builder builder76 = builder27.setLog(log75);
        restAdapter0.log = log75;
        retrofit.converter.Converter converter78 = restAdapter0.converter;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(converter17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(errorHandler30);
        org.junit.Assert.assertNull(errorHandler31);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(errorHandler43);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(log65);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNull(converter78);
    }

    @Test
    public void test02617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02617");
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        log12.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel15);
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter16.new RestHandler();
        java.util.concurrent.Executor executor18 = null;
        restAdapter16.callbackExecutor = executor18;
        retrofit.client.Header[] headerArray22 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList23 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList23, headerArray22);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList23, typedOutput25);
        retrofit.client.Request request27 = restAdapter16.logAndReplaceRequest(request26);
        java.util.List<retrofit.client.Header> headerList28 = request26.getHeaders();
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("hi!", "", headerList28, typedOutput29);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("", "default", headerList28, typedOutput31);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(request27);
        org.junit.Assert.assertNotNull(headerList28);
    }

    @Test
    public void test02618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02618");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.client.Client.Provider provider2 = restAdapter0.clientProvider;
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter0.new RestHandler();
        retrofit.Server server4 = restAdapter0.server;
        retrofit.RestAdapter.Log log5 = restAdapter0.log;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler7 = null;
        builder6.errorHandler = errorHandler7;
        retrofit.ErrorHandler errorHandler9 = builder6.errorHandler;
        retrofit.RestAdapter.Builder builder11 = builder6.setServer("hi!");
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler13 = builder12.errorHandler;
        retrofit.ErrorHandler errorHandler14 = builder12.errorHandler;
        retrofit.Profiler profiler15 = builder12.profiler;
        retrofit.RestAdapter.Log log16 = builder12.log;
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.FULL;
        builder12.logLevel = logLevel17;
        retrofit.RestAdapter.Builder builder19 = builder11.setLogLevel(logLevel17);
        retrofit.Server server22 = new retrofit.Server("hi!", "default");
        retrofit.RestAdapter.Builder builder23 = builder11.setServer(server22);
        java.util.concurrent.Executor executor24 = builder11.callbackExecutor;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler26 = null;
        builder25.errorHandler = errorHandler26;
        retrofit.ErrorHandler errorHandler28 = builder25.errorHandler;
        retrofit.RestAdapter.Builder builder30 = builder25.setServer("hi!");
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler32 = builder31.errorHandler;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.Server server36 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder37 = builder33.setServer(server36);
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor39 = restAdapter38.callbackExecutor;
        java.util.concurrent.Executor executor40 = restAdapter38.callbackExecutor;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler42 = restAdapter41.errorHandler;
        retrofit.Server server45 = new retrofit.Server("", "");
        restAdapter41.server = server45;
        restAdapter38.server = server45;
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        restAdapter38.log = log48;
        retrofit.RestAdapter.Builder builder50 = builder37.setLog(log48);
        retrofit.RestAdapter.Builder builder51 = builder31.setLog(log48);
        builder25.log = log48;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler54 = builder53.errorHandler;
        retrofit.client.Client.Provider provider55 = null;
        builder53.clientProvider = provider55;
        retrofit.Server server59 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder60 = builder53.setServer(server59);
        retrofit.converter.Converter converter61 = null;
        builder60.converter = converter61;
        retrofit.RestAdapter restAdapter63 = builder60.build();
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler65 = builder64.errorHandler;
        java.util.concurrent.Executor executor66 = null;
        builder64.callbackExecutor = executor66;
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider69 = builder68.clientProvider;
        java.util.concurrent.Executor executor70 = null;
        builder68.callbackExecutor = executor70;
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        retrofit.Server server75 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder76 = builder72.setServer(server75);
        java.lang.String str77 = server75.getUrl();
        retrofit.RestAdapter.Builder builder78 = builder68.setServer(server75);
        retrofit.RestAdapter.Builder builder79 = builder64.setServer(server75);
        restAdapter63.server = server75;
        retrofit.client.Client.Provider provider81 = restAdapter63.clientProvider;
        retrofit.RestAdapter.Builder builder82 = builder25.setClient(provider81);
        retrofit.RestAdapter restAdapter83 = builder25.build();
        retrofit.ErrorHandler errorHandler84 = restAdapter83.errorHandler;
        retrofit.RestAdapter.Builder builder85 = builder11.setErrorHandler(errorHandler84);
        restAdapter0.errorHandler = errorHandler84;
        org.junit.Assert.assertNull(provider2);
        org.junit.Assert.assertNull(server4);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNull(log16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(errorHandler32);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNull(executor40);
        org.junit.Assert.assertNull(errorHandler42);
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(errorHandler54);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(restAdapter63);
        org.junit.Assert.assertNull(errorHandler65);
        org.junit.Assert.assertNull(provider69);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "hi!" + "'", str77, "hi!");
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(provider81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(restAdapter83);
        org.junit.Assert.assertNotNull(errorHandler84);
        org.junit.Assert.assertNotNull(builder85);
    }

    @Test
    public void test02619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02619");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.client.Header[] headerArray22 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList23 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList23, headerArray22);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList23, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList23, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList23, typedOutput29);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList23, typedOutput31);
        retrofit.mime.TypedOutput typedOutput33 = request32.getBody();
        retrofit.client.Request request34 = restAdapter12.logAndReplaceRequest(request32);
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor36 = restAdapter35.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean38 = logLevel37.log();
        restAdapter35.logLevel = logLevel37;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler41 = builder40.errorHandler;
        retrofit.client.Client.Provider provider42 = null;
        builder40.clientProvider = provider42;
        retrofit.Server server46 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder47 = builder40.setServer(server46);
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler49 = builder48.errorHandler;
        retrofit.client.Client.Provider provider50 = null;
        builder48.clientProvider = provider50;
        retrofit.converter.Converter converter52 = builder48.converter;
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder54 = builder48.setLogLevel(logLevel53);
        builder40.logLevel = logLevel53;
        boolean boolean56 = logLevel53.log();
        restAdapter35.logLevel = logLevel53;
        restAdapter12.logLevel = logLevel53;
        retrofit.client.Client.Provider provider59 = restAdapter12.clientProvider;
        retrofit.Profiler profiler60 = null;
        restAdapter12.profiler = profiler60;
        retrofit.RestAdapter.LogLevel logLevel62 = restAdapter12.logLevel;
        boolean boolean63 = logLevel62.log();
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(typedOutput33);
        org.junit.Assert.assertNotNull(request34);
        org.junit.Assert.assertNull(executor36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(errorHandler41);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(errorHandler49);
        org.junit.Assert.assertNull(converter52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(provider59);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test02620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02620");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.client.Header[] headerArray22 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList23 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList23, headerArray22);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList23, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList23, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList23, typedOutput29);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList23, typedOutput31);
        retrofit.mime.TypedOutput typedOutput33 = request32.getBody();
        retrofit.client.Request request34 = restAdapter12.logAndReplaceRequest(request32);
        retrofit.client.Client.Provider provider35 = null;
        restAdapter12.clientProvider = provider35;
        retrofit.RestAdapter.RestHandler restHandler37 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel38 = restAdapter12.logLevel;
        retrofit.RestAdapter.RestHandler restHandler39 = restAdapter12.new RestHandler();
        retrofit.Profiler profiler40 = null;
        restAdapter12.profiler = profiler40;
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(typedOutput33);
        org.junit.Assert.assertNotNull(request34);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test02621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02621");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.client.Header[] headerArray22 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList23 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList23, headerArray22);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList23, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList23, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList23, typedOutput29);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList23, typedOutput31);
        retrofit.mime.TypedOutput typedOutput33 = request32.getBody();
        retrofit.client.Request request34 = restAdapter12.logAndReplaceRequest(request32);
        retrofit.client.Client.Provider provider35 = null;
        restAdapter12.clientProvider = provider35;
        retrofit.client.Client.Provider provider37 = restAdapter12.clientProvider;
        java.util.concurrent.Executor executor38 = restAdapter12.callbackExecutor;
        retrofit.ErrorHandler errorHandler39 = restAdapter12.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler40 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Log log41 = restAdapter12.log;
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(typedOutput33);
        org.junit.Assert.assertNotNull(request34);
        org.junit.Assert.assertNull(provider37);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNotNull(log41);
    }

    @Test
    public void test02622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02622");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server6 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder7 = builder0.setServer(server6);
        retrofit.converter.Converter converter8 = null;
        builder7.converter = converter8;
        retrofit.RestAdapter restAdapter10 = builder7.build();
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler12 = builder11.errorHandler;
        java.util.concurrent.Executor executor13 = null;
        builder11.callbackExecutor = executor13;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider16 = builder15.clientProvider;
        java.util.concurrent.Executor executor17 = null;
        builder15.callbackExecutor = executor17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.Server server22 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder23 = builder19.setServer(server22);
        java.lang.String str24 = server22.getUrl();
        retrofit.RestAdapter.Builder builder25 = builder15.setServer(server22);
        retrofit.RestAdapter.Builder builder26 = builder11.setServer(server22);
        restAdapter10.server = server22;
        retrofit.Server server28 = restAdapter10.server;
        retrofit.RestAdapter.RestHandler restHandler29 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter10.getLogLevel();
        retrofit.client.Header[] headerArray33 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList34 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList34, headerArray33);
        retrofit.mime.TypedOutput typedOutput36 = null;
        retrofit.client.Request request37 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList34, typedOutput36);
        java.util.List<retrofit.client.Header> headerList38 = request37.getHeaders();
        java.util.List<retrofit.client.Header> headerList39 = request37.getHeaders();
        retrofit.mime.TypedOutput typedOutput40 = request37.getBody();
        retrofit.client.Request request41 = restAdapter10.logAndReplaceRequest(request37);
        retrofit.RestAdapter.RestHandler restHandler42 = restAdapter10.new RestHandler();
        retrofit.converter.Converter converter43 = restAdapter10.converter;
        retrofit.Profiler profiler44 = restAdapter10.profiler;
        retrofit.Profiler profiler45 = restAdapter10.profiler;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(restAdapter10);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(provider16);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(server28);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(headerArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(headerList38);
        org.junit.Assert.assertNotNull(headerList39);
        org.junit.Assert.assertNull(typedOutput40);
        org.junit.Assert.assertNotNull(request41);
        org.junit.Assert.assertNotNull(converter43);
        org.junit.Assert.assertNull(profiler44);
        org.junit.Assert.assertNull(profiler45);
    }

    @Test
    public void test02623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02623");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.Profiler profiler19 = restAdapter0.profiler;
        retrofit.Profiler profiler20 = null;
        restAdapter0.profiler = profiler20;
        retrofit.Profiler profiler22 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler23 = restAdapter0.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter0.new RestHandler();
        retrofit.Server server26 = new retrofit.Server("");
        restAdapter0.server = server26;
        retrofit.RestAdapter.RestHandler restHandler28 = restAdapter0.new RestHandler();
        retrofit.client.Response response30 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response32 = restAdapter0.logAndReplaceResponse("hi!", response30, (long) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(profiler19);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(errorHandler23);
    }

    @Test
    public void test02624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02624");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.ErrorHandler errorHandler3 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler7 = builder6.errorHandler;
        retrofit.ErrorHandler errorHandler8 = builder6.errorHandler;
        retrofit.Profiler profiler9 = builder6.profiler;
        retrofit.RestAdapter.Log log10 = builder6.log;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.FULL;
        builder6.logLevel = logLevel11;
        retrofit.RestAdapter.Builder builder13 = builder5.setLogLevel(logLevel11);
        retrofit.Server server16 = new retrofit.Server("hi!", "default");
        retrofit.RestAdapter.Builder builder17 = builder5.setServer(server16);
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler19 = null;
        builder18.errorHandler = errorHandler19;
        retrofit.ErrorHandler errorHandler21 = builder18.errorHandler;
        retrofit.RestAdapter.Builder builder23 = builder18.setServer("hi!");
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler25 = builder24.errorHandler;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.Server server29 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder30 = builder26.setServer(server29);
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor32 = restAdapter31.callbackExecutor;
        java.util.concurrent.Executor executor33 = restAdapter31.callbackExecutor;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler35 = restAdapter34.errorHandler;
        retrofit.Server server38 = new retrofit.Server("", "");
        restAdapter34.server = server38;
        restAdapter31.server = server38;
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        restAdapter31.log = log41;
        retrofit.RestAdapter.Builder builder43 = builder30.setLog(log41);
        retrofit.RestAdapter.Builder builder44 = builder24.setLog(log41);
        builder18.log = log41;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler47 = builder46.errorHandler;
        retrofit.client.Client.Provider provider48 = null;
        builder46.clientProvider = provider48;
        retrofit.Server server52 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder53 = builder46.setServer(server52);
        retrofit.converter.Converter converter54 = null;
        builder53.converter = converter54;
        retrofit.RestAdapter restAdapter56 = builder53.build();
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler58 = builder57.errorHandler;
        java.util.concurrent.Executor executor59 = null;
        builder57.callbackExecutor = executor59;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider62 = builder61.clientProvider;
        java.util.concurrent.Executor executor63 = null;
        builder61.callbackExecutor = executor63;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.Server server68 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder69 = builder65.setServer(server68);
        java.lang.String str70 = server68.getUrl();
        retrofit.RestAdapter.Builder builder71 = builder61.setServer(server68);
        retrofit.RestAdapter.Builder builder72 = builder57.setServer(server68);
        restAdapter56.server = server68;
        retrofit.client.Client.Provider provider74 = restAdapter56.clientProvider;
        retrofit.RestAdapter.Builder builder75 = builder18.setClient(provider74);
        retrofit.RestAdapter.Builder builder76 = builder5.setClient(provider74);
        retrofit.Profiler profiler77 = builder5.profiler;
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler79 = builder78.errorHandler;
        retrofit.ErrorHandler errorHandler80 = builder78.errorHandler;
        retrofit.Profiler profiler81 = builder78.profiler;
        retrofit.RestAdapter.Log log82 = builder78.log;
        retrofit.RestAdapter.LogLevel logLevel83 = retrofit.RestAdapter.LogLevel.FULL;
        builder78.logLevel = logLevel83;
        builder5.logLevel = logLevel83;
        java.util.concurrent.Executor executor86 = builder5.httpExecutor;
        retrofit.ErrorHandler errorHandler87 = builder5.errorHandler;
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNull(profiler9);
        org.junit.Assert.assertNull(log10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(errorHandler25);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertNull(errorHandler35);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(errorHandler47);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(restAdapter56);
        org.junit.Assert.assertNull(errorHandler58);
        org.junit.Assert.assertNull(provider62);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hi!" + "'", str70, "hi!");
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(provider74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNull(profiler77);
        org.junit.Assert.assertNull(errorHandler79);
        org.junit.Assert.assertNull(errorHandler80);
        org.junit.Assert.assertNull(profiler81);
        org.junit.Assert.assertNull(log82);
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor86);
        org.junit.Assert.assertNull(errorHandler87);
    }

    @Test
    public void test02625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02625");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        restAdapter12.log = log14;
        retrofit.converter.Converter converter16 = null;
        restAdapter12.converter = converter16;
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter12.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor19 = restAdapter12.requestInterceptor;
        java.util.concurrent.Executor executor20 = restAdapter12.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler21 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler22 = restAdapter12.new RestHandler();
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNull(requestInterceptor19);
        org.junit.Assert.assertNull(executor20);
    }

    @Test
    public void test02626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02626");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter3 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler4 = restAdapter3.errorHandler;
        retrofit.Server server7 = new retrofit.Server("", "");
        restAdapter3.server = server7;
        restAdapter0.server = server7;
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter0.logLevel;
        retrofit.Server server11 = restAdapter0.server;
        retrofit.ErrorHandler errorHandler12 = restAdapter0.errorHandler;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler14 = null;
        builder13.errorHandler = errorHandler14;
        retrofit.ErrorHandler errorHandler16 = builder13.errorHandler;
        retrofit.RestAdapter.Builder builder18 = builder13.setServer("hi!");
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider20 = builder19.clientProvider;
        java.util.concurrent.Executor executor21 = null;
        builder19.callbackExecutor = executor21;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.Server server26 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder27 = builder23.setServer(server26);
        java.lang.String str28 = server26.getUrl();
        retrofit.RestAdapter.Builder builder29 = builder19.setServer(server26);
        retrofit.RestAdapter.Builder builder30 = builder18.setServer(server26);
        restAdapter0.server = server26;
        retrofit.RequestInterceptor requestInterceptor32 = restAdapter0.requestInterceptor;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(errorHandler4);
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertNotNull(server11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(provider20);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(requestInterceptor32);
    }

    @Test
    public void test02627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02627");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server4 = new retrofit.Server("", "");
        builder0.server = server4;
        java.util.concurrent.Executor executor6 = builder0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel7 = null;
        builder0.logLevel = logLevel7;
        retrofit.RequestInterceptor requestInterceptor9 = builder0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor10 = builder0.requestInterceptor;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(requestInterceptor9);
        org.junit.Assert.assertNull(requestInterceptor10);
    }

    @Test
    public void test02628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02628");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.Server server5 = new retrofit.Server("hi!", "hi!");
        restAdapter0.server = server5;
        retrofit.RequestInterceptor requestInterceptor7 = restAdapter0.requestInterceptor;
        retrofit.client.Client.Provider provider8 = restAdapter0.clientProvider;
        java.util.concurrent.Executor executor9 = restAdapter0.callbackExecutor;
        retrofit.client.Response response11 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response13 = restAdapter0.logAndReplaceResponse("default", response11, (long) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(requestInterceptor7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNull(executor9);
    }

    @Test
    public void test02629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02629");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = null;
        restAdapter0.httpExecutor = executor2;
        retrofit.client.Client.Provider provider4 = null;
        restAdapter0.clientProvider = provider4;
        java.util.concurrent.Executor executor6 = null;
        restAdapter0.httpExecutor = executor6;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        restAdapter0.requestInterceptor = requestInterceptor8;
        retrofit.RestAdapter.RestHandler restHandler10 = restAdapter0.new RestHandler();
        retrofit.ErrorHandler errorHandler11 = restAdapter0.errorHandler;
        retrofit.Profiler profiler12 = null;
        restAdapter0.profiler = profiler12;
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter0.new RestHandler();
        retrofit.client.Header[] headerArray24 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList25 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList25, headerArray24);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList25, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList25, typedOutput29);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList25, typedOutput31);
        retrofit.mime.TypedOutput typedOutput33 = null;
        retrofit.client.Request request34 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList25, typedOutput33);
        java.util.List<retrofit.client.Header> headerList35 = request34.getHeaders();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request36 = restAdapter0.logAndReplaceRequest(request34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNotNull(headerArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(headerList35);
    }

    @Test
    public void test02630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02630");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        restAdapter12.log = log14;
        retrofit.converter.Converter converter16 = null;
        restAdapter12.converter = converter16;
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter12.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor19 = restAdapter12.requestInterceptor;
        retrofit.Server server20 = restAdapter12.server;
        retrofit.RestAdapter.RestHandler restHandler21 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler23 = builder22.errorHandler;
        retrofit.ErrorHandler errorHandler24 = builder22.errorHandler;
        retrofit.RestAdapter.Log log25 = null;
        builder22.log = log25;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean28 = logLevel27.log();
        builder22.logLevel = logLevel27;
        retrofit.ErrorHandler errorHandler30 = builder22.errorHandler;
        retrofit.RestAdapter.Builder builder32 = builder22.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor33 = null;
        builder32.requestInterceptor = requestInterceptor33;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler36 = builder35.errorHandler;
        retrofit.client.Client.Provider provider37 = null;
        builder35.clientProvider = provider37;
        retrofit.Server server41 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder42 = builder35.setServer(server41);
        retrofit.client.Client.Provider provider43 = null;
        java.util.concurrent.Executor executor44 = null;
        java.util.concurrent.Executor executor45 = null;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        retrofit.converter.Converter converter47 = null;
        retrofit.Profiler profiler48 = null;
        retrofit.ErrorHandler errorHandler49 = null;
        retrofit.Server server50 = null;
        retrofit.client.Client.Provider provider51 = null;
        java.util.concurrent.Executor executor52 = null;
        java.util.concurrent.Executor executor53 = null;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        retrofit.converter.Converter converter55 = null;
        retrofit.Profiler profiler56 = null;
        retrofit.ErrorHandler errorHandler57 = null;
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        log58.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel61 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter(server50, provider51, executor52, executor53, requestInterceptor54, converter55, profiler56, errorHandler57, log58, logLevel61);
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter(server41, provider43, executor44, executor45, requestInterceptor46, converter47, profiler48, errorHandler49, log58, logLevel63);
        log58.log("");
        builder32.log = log58;
        log58.log("default");
        log58.log("");
        restAdapter12.log = log58;
        retrofit.ErrorHandler errorHandler73 = restAdapter12.errorHandler;
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNull(requestInterceptor19);
        org.junit.Assert.assertNull(server20);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(errorHandler30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(errorHandler36);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(log58);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler73);
    }

    @Test
    public void test02631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02631");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter0.new RestHandler();
        retrofit.ErrorHandler errorHandler18 = restAdapter0.errorHandler;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler20 = builder19.errorHandler;
        retrofit.ErrorHandler errorHandler21 = builder19.errorHandler;
        retrofit.converter.Converter converter22 = null;
        builder19.converter = converter22;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        builder19.requestInterceptor = requestInterceptor24;
        retrofit.client.Client.Provider provider26 = builder19.clientProvider;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.Server server30 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder31 = builder27.setServer(server30);
        retrofit.RestAdapter.LogLevel logLevel32 = builder31.logLevel;
        java.util.concurrent.Executor executor33 = builder31.httpExecutor;
        retrofit.RestAdapter restAdapter34 = builder31.build();
        retrofit.ErrorHandler errorHandler35 = builder31.errorHandler;
        retrofit.RestAdapter.Builder builder36 = builder19.setErrorHandler(errorHandler35);
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider38 = builder37.clientProvider;
        java.util.concurrent.Executor executor39 = null;
        builder37.callbackExecutor = executor39;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.Server server44 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder45 = builder41.setServer(server44);
        java.lang.String str46 = server44.getUrl();
        retrofit.RestAdapter.Builder builder47 = builder37.setServer(server44);
        builder37.ensureSaneDefaults();
        retrofit.Server server49 = null;
        retrofit.client.Client.Provider provider50 = null;
        java.util.concurrent.Executor executor51 = null;
        java.util.concurrent.Executor executor52 = null;
        retrofit.RequestInterceptor requestInterceptor53 = null;
        retrofit.converter.Converter converter54 = null;
        retrofit.Profiler profiler55 = null;
        retrofit.ErrorHandler errorHandler56 = null;
        retrofit.RestAdapter.Log log57 = retrofit.RestAdapter.Log.NONE;
        log57.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter(server49, provider50, executor51, executor52, requestInterceptor53, converter54, profiler55, errorHandler56, log57, logLevel60);
        retrofit.RestAdapter.RestHandler restHandler62 = restAdapter61.new RestHandler();
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        restAdapter61.log = log63;
        retrofit.RestAdapter.Builder builder65 = builder37.setLog(log63);
        retrofit.RestAdapter.Builder builder67 = builder37.setServer("hi!");
        retrofit.RestAdapter restAdapter68 = builder37.build();
        retrofit.RestAdapter.RestHandler restHandler69 = restAdapter68.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel70 = restAdapter68.logLevel;
        builder19.logLevel = logLevel70;
        restAdapter0.logLevel = logLevel70;
        retrofit.RestAdapter.LogLevel logLevel73 = null;
        restAdapter0.logLevel = logLevel73;
        java.lang.Throwable throwable75 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable75, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNull(errorHandler18);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(provider26);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertNotNull(restAdapter34);
        org.junit.Assert.assertNotNull(errorHandler35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(provider38);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(log57);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(restAdapter68);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test02632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02632");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.Profiler profiler3 = builder0.profiler;
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor5 = restAdapter4.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.Server server9 = new retrofit.Server("hi!", "hi!");
        restAdapter4.server = server9;
        retrofit.RestAdapter.Builder builder11 = builder0.setServer(server9);
        retrofit.converter.Converter converter12 = null;
        builder11.converter = converter12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        log22.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel25);
        builder11.logLevel = logLevel25;
        java.util.concurrent.Executor executor28 = builder11.callbackExecutor;
        retrofit.Server server29 = builder11.server;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler31 = builder30.errorHandler;
        retrofit.ErrorHandler errorHandler32 = builder30.errorHandler;
        retrofit.Profiler profiler33 = builder30.profiler;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor35 = restAdapter34.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler36 = restAdapter34.new RestHandler();
        retrofit.Server server39 = new retrofit.Server("hi!", "hi!");
        restAdapter34.server = server39;
        retrofit.RestAdapter.Builder builder41 = builder30.setServer(server39);
        retrofit.RestAdapter restAdapter42 = builder41.build();
        java.util.concurrent.Executor executor43 = builder41.callbackExecutor;
        builder11.httpExecutor = executor43;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNotNull(server29);
        org.junit.Assert.assertNull(errorHandler31);
        org.junit.Assert.assertNull(errorHandler32);
        org.junit.Assert.assertNull(profiler33);
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(restAdapter42);
        org.junit.Assert.assertNotNull(executor43);
    }

    @Test
    public void test02633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02633");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter0.getLogLevel();
        retrofit.client.Client.Provider provider20 = null;
        restAdapter0.clientProvider = provider20;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean23 = logLevel22.log();
        restAdapter0.logLevel = logLevel22;
        retrofit.RestAdapter.Log log25 = restAdapter0.log;
        retrofit.RestAdapter.LogLevel logLevel26 = restAdapter0.logLevel;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        restAdapter0.requestInterceptor = requestInterceptor27;
        retrofit.RestAdapter.RestHandler restHandler29 = restAdapter0.new RestHandler();
        retrofit.client.Header[] headerArray40 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList41 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList41, headerArray40);
        retrofit.mime.TypedOutput typedOutput43 = null;
        retrofit.client.Request request44 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList41, typedOutput43);
        retrofit.mime.TypedOutput typedOutput45 = null;
        retrofit.client.Request request46 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList41, typedOutput45);
        retrofit.mime.TypedOutput typedOutput47 = null;
        retrofit.client.Request request48 = new retrofit.client.Request("", "default", (java.util.List<retrofit.client.Header>) headerList41, typedOutput47);
        retrofit.mime.TypedOutput typedOutput49 = null;
        retrofit.client.Request request50 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList41, typedOutput49);
        retrofit.mime.TypedOutput typedOutput51 = null;
        retrofit.client.Request request52 = new retrofit.client.Request("", "default", (java.util.List<retrofit.client.Header>) headerList41, typedOutput51);
        java.lang.String str53 = request52.getMethod();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request54 = restAdapter0.logAndReplaceRequest(request52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(log25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(headerArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
    }

    @Test
    public void test02634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02634");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server4 = new retrofit.Server("", "");
        builder0.server = server4;
        retrofit.RestAdapter restAdapter6 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor7 = restAdapter6.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler8 = restAdapter6.new RestHandler();
        retrofit.Server server11 = new retrofit.Server("hi!", "hi!");
        restAdapter6.server = server11;
        retrofit.RestAdapter.Builder builder13 = builder0.setServer(server11);
        retrofit.client.Client.Provider provider14 = builder0.clientProvider;
        retrofit.RestAdapter restAdapter15 = builder0.build();
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor17 = restAdapter16.callbackExecutor;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor19 = restAdapter18.callbackExecutor;
        java.util.concurrent.Executor executor20 = restAdapter18.callbackExecutor;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler22 = restAdapter21.errorHandler;
        retrofit.Server server25 = new retrofit.Server("", "");
        restAdapter21.server = server25;
        restAdapter18.server = server25;
        restAdapter16.server = server25;
        retrofit.Profiler profiler29 = restAdapter16.profiler;
        retrofit.ErrorHandler errorHandler30 = null;
        restAdapter16.errorHandler = errorHandler30;
        retrofit.RequestInterceptor requestInterceptor32 = restAdapter16.requestInterceptor;
        retrofit.ErrorHandler errorHandler33 = restAdapter16.errorHandler;
        java.util.concurrent.Executor executor34 = null;
        restAdapter16.callbackExecutor = executor34;
        java.util.concurrent.Executor executor36 = restAdapter16.httpExecutor;
        retrofit.client.Client.Provider provider37 = restAdapter16.clientProvider;
        retrofit.RestAdapter.Log log38 = restAdapter16.log;
        java.util.concurrent.Executor executor39 = restAdapter16.callbackExecutor;
        retrofit.client.Client.Provider provider40 = restAdapter16.clientProvider;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler42 = builder41.errorHandler;
        retrofit.ErrorHandler errorHandler43 = builder41.errorHandler;
        retrofit.RestAdapter.Log log44 = null;
        builder41.log = log44;
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean47 = logLevel46.log();
        builder41.logLevel = logLevel46;
        retrofit.ErrorHandler errorHandler49 = builder41.errorHandler;
        retrofit.RestAdapter.Builder builder51 = builder41.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor52 = null;
        builder51.requestInterceptor = requestInterceptor52;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler55 = builder54.errorHandler;
        retrofit.client.Client.Provider provider56 = null;
        builder54.clientProvider = provider56;
        retrofit.Server server60 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder61 = builder54.setServer(server60);
        retrofit.client.Client.Provider provider62 = null;
        java.util.concurrent.Executor executor63 = null;
        java.util.concurrent.Executor executor64 = null;
        retrofit.RequestInterceptor requestInterceptor65 = null;
        retrofit.converter.Converter converter66 = null;
        retrofit.Profiler profiler67 = null;
        retrofit.ErrorHandler errorHandler68 = null;
        retrofit.Server server69 = null;
        retrofit.client.Client.Provider provider70 = null;
        java.util.concurrent.Executor executor71 = null;
        java.util.concurrent.Executor executor72 = null;
        retrofit.RequestInterceptor requestInterceptor73 = null;
        retrofit.converter.Converter converter74 = null;
        retrofit.Profiler profiler75 = null;
        retrofit.ErrorHandler errorHandler76 = null;
        retrofit.RestAdapter.Log log77 = retrofit.RestAdapter.Log.NONE;
        log77.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel80 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter81 = new retrofit.RestAdapter(server69, provider70, executor71, executor72, requestInterceptor73, converter74, profiler75, errorHandler76, log77, logLevel80);
        retrofit.RestAdapter.LogLevel logLevel82 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter83 = new retrofit.RestAdapter(server60, provider62, executor63, executor64, requestInterceptor65, converter66, profiler67, errorHandler68, log77, logLevel82);
        log77.log("");
        builder51.log = log77;
        retrofit.RestAdapter.Log log87 = builder51.log;
        restAdapter16.log = log87;
        retrofit.RestAdapter.Log log89 = restAdapter16.log;
        log89.log("default");
        retrofit.RestAdapter.Builder builder92 = builder0.setLog(log89);
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNotNull(restAdapter15);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNull(profiler29);
        org.junit.Assert.assertNull(requestInterceptor32);
        org.junit.Assert.assertNull(errorHandler33);
        org.junit.Assert.assertNull(executor36);
        org.junit.Assert.assertNull(provider37);
        org.junit.Assert.assertNull(log38);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNull(provider40);
        org.junit.Assert.assertNull(errorHandler42);
        org.junit.Assert.assertNull(errorHandler43);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(errorHandler49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(errorHandler55);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(log77);
        org.junit.Assert.assertTrue("'" + logLevel80 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel80.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log87);
        org.junit.Assert.assertNotNull(log89);
        org.junit.Assert.assertNotNull(builder92);
    }

    @Test
    public void test02635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02635");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        java.util.concurrent.Executor executor6 = builder4.httpExecutor;
        retrofit.RestAdapter restAdapter7 = builder4.build();
        retrofit.Server server8 = builder4.server;
        java.lang.String str9 = server8.getUrl();
        java.lang.String str10 = server8.getUrl();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNotNull(server8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
    }

    @Test
    public void test02636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02636");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.ErrorHandler errorHandler2 = restAdapter0.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler4 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor5 = restAdapter0.httpExecutor;
        retrofit.converter.Converter converter6 = restAdapter0.converter;
        retrofit.RestAdapter.RestHandler restHandler7 = restAdapter0.new RestHandler();
        java.lang.Throwable throwable8 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable8, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(converter6);
    }

    @Test
    public void test02637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02637");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        restAdapter5.log = log15;
        retrofit.RestAdapter.Builder builder17 = builder4.setLog(log15);
        retrofit.RestAdapter.Builder builder19 = builder4.setServer("hi!");
        retrofit.RestAdapter.Log log20 = builder19.log;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler22 = builder21.errorHandler;
        retrofit.ErrorHandler errorHandler23 = builder21.errorHandler;
        java.util.concurrent.Executor executor24 = builder21.callbackExecutor;
        java.util.concurrent.Executor executor25 = null;
        builder21.callbackExecutor = executor25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler28 = builder27.errorHandler;
        retrofit.Server server31 = new retrofit.Server("", "");
        builder27.server = server31;
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        builder27.log = log33;
        retrofit.RestAdapter.LogLevel logLevel35 = builder27.logLevel;
        retrofit.RestAdapter.Builder builder36 = builder21.setLogLevel(logLevel35);
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler38 = builder37.errorHandler;
        retrofit.client.Client.Provider provider39 = null;
        builder37.clientProvider = provider39;
        retrofit.Server server43 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder44 = builder37.setServer(server43);
        retrofit.converter.Converter converter45 = null;
        builder44.converter = converter45;
        retrofit.RestAdapter restAdapter47 = builder44.build();
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler49 = builder48.errorHandler;
        java.util.concurrent.Executor executor50 = null;
        builder48.callbackExecutor = executor50;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider53 = builder52.clientProvider;
        java.util.concurrent.Executor executor54 = null;
        builder52.callbackExecutor = executor54;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.Server server59 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder60 = builder56.setServer(server59);
        java.lang.String str61 = server59.getUrl();
        retrofit.RestAdapter.Builder builder62 = builder52.setServer(server59);
        retrofit.RestAdapter.Builder builder63 = builder48.setServer(server59);
        restAdapter47.server = server59;
        retrofit.client.Client.Provider provider65 = restAdapter47.clientProvider;
        retrofit.RestAdapter.Builder builder66 = builder36.setClient(provider65);
        retrofit.RestAdapter.Builder builder67 = builder19.setClient(provider65);
        retrofit.Profiler profiler68 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder69 = builder19.setProfiler(profiler68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(errorHandler38);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(restAdapter47);
        org.junit.Assert.assertNull(errorHandler49);
        org.junit.Assert.assertNull(provider53);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(provider65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
    }

    @Test
    public void test02638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02638");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.converter.Converter converter4 = builder0.converter;
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        builder0.ensureSaneDefaults();
        retrofit.Profiler profiler8 = builder0.profiler;
        retrofit.RequestInterceptor requestInterceptor9 = builder0.requestInterceptor;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor11 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor13 = restAdapter12.callbackExecutor;
        java.util.concurrent.Executor executor14 = restAdapter12.callbackExecutor;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler16 = restAdapter15.errorHandler;
        retrofit.Server server19 = new retrofit.Server("", "");
        restAdapter15.server = server19;
        restAdapter12.server = server19;
        restAdapter10.server = server19;
        retrofit.Profiler profiler23 = restAdapter10.profiler;
        retrofit.ErrorHandler errorHandler24 = null;
        restAdapter10.errorHandler = errorHandler24;
        retrofit.RequestInterceptor requestInterceptor26 = restAdapter10.requestInterceptor;
        retrofit.ErrorHandler errorHandler27 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor28 = null;
        restAdapter10.callbackExecutor = executor28;
        java.util.concurrent.Executor executor30 = restAdapter10.httpExecutor;
        retrofit.client.Client.Provider provider31 = restAdapter10.clientProvider;
        retrofit.RestAdapter.RestHandler restHandler32 = restAdapter10.new RestHandler();
        retrofit.client.Client.Provider provider33 = restAdapter10.clientProvider;
        retrofit.client.Client.Provider provider34 = restAdapter10.clientProvider;
        retrofit.converter.Converter converter35 = null;
        restAdapter10.converter = converter35;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.Server server40 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder41 = builder37.setServer(server40);
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor43 = restAdapter42.callbackExecutor;
        java.util.concurrent.Executor executor44 = restAdapter42.callbackExecutor;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler46 = restAdapter45.errorHandler;
        retrofit.Server server49 = new retrofit.Server("", "");
        restAdapter45.server = server49;
        restAdapter42.server = server49;
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        restAdapter42.log = log52;
        retrofit.RestAdapter.Builder builder54 = builder41.setLog(log52);
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder56 = builder41.setLogLevel(logLevel55);
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider58 = builder57.clientProvider;
        java.util.concurrent.Executor executor59 = null;
        builder57.callbackExecutor = executor59;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.Server server64 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder65 = builder61.setServer(server64);
        java.lang.String str66 = server64.getUrl();
        retrofit.RestAdapter.Builder builder67 = builder57.setServer(server64);
        builder57.ensureSaneDefaults();
        retrofit.Server server69 = null;
        retrofit.client.Client.Provider provider70 = null;
        java.util.concurrent.Executor executor71 = null;
        java.util.concurrent.Executor executor72 = null;
        retrofit.RequestInterceptor requestInterceptor73 = null;
        retrofit.converter.Converter converter74 = null;
        retrofit.Profiler profiler75 = null;
        retrofit.ErrorHandler errorHandler76 = null;
        retrofit.RestAdapter.Log log77 = retrofit.RestAdapter.Log.NONE;
        log77.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel80 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter81 = new retrofit.RestAdapter(server69, provider70, executor71, executor72, requestInterceptor73, converter74, profiler75, errorHandler76, log77, logLevel80);
        retrofit.RestAdapter.RestHandler restHandler82 = restAdapter81.new RestHandler();
        retrofit.RestAdapter.Log log83 = retrofit.RestAdapter.Log.NONE;
        restAdapter81.log = log83;
        retrofit.RestAdapter.Builder builder85 = builder57.setLog(log83);
        retrofit.RestAdapter.Builder builder87 = builder57.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor88 = builder57.requestInterceptor;
        builder56.requestInterceptor = requestInterceptor88;
        restAdapter10.requestInterceptor = requestInterceptor88;
        retrofit.RestAdapter.Builder builder91 = builder0.setRequestInterceptor(requestInterceptor88);
        retrofit.client.Client client92 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder93 = builder0.setClient(client92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(profiler8);
        org.junit.Assert.assertNotNull(requestInterceptor9);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNull(profiler23);
        org.junit.Assert.assertNull(requestInterceptor26);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNull(provider31);
        org.junit.Assert.assertNull(provider33);
        org.junit.Assert.assertNull(provider34);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(executor43);
        org.junit.Assert.assertNull(executor44);
        org.junit.Assert.assertNull(errorHandler46);
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(provider58);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hi!" + "'", str66, "hi!");
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(log77);
        org.junit.Assert.assertTrue("'" + logLevel80 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel80.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(requestInterceptor88);
        org.junit.Assert.assertNotNull(builder91);
    }

    @Test
    public void test02639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02639");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter3 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler4 = restAdapter3.errorHandler;
        retrofit.Server server7 = new retrofit.Server("", "");
        restAdapter3.server = server7;
        restAdapter0.server = server7;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.Server server14 = new retrofit.Server("", "");
        restAdapter10.server = server14;
        restAdapter0.server = server14;
        retrofit.client.Client.Provider provider17 = null;
        java.util.concurrent.Executor executor18 = null;
        java.util.concurrent.Executor executor19 = null;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        retrofit.converter.Converter converter21 = null;
        retrofit.Profiler profiler22 = null;
        retrofit.ErrorHandler errorHandler23 = null;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider25 = builder24.clientProvider;
        java.util.concurrent.Executor executor26 = null;
        builder24.callbackExecutor = executor26;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.Server server31 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder32 = builder28.setServer(server31);
        java.lang.String str33 = server31.getUrl();
        retrofit.RestAdapter.Builder builder34 = builder24.setServer(server31);
        builder24.ensureSaneDefaults();
        retrofit.Server server36 = null;
        retrofit.client.Client.Provider provider37 = null;
        java.util.concurrent.Executor executor38 = null;
        java.util.concurrent.Executor executor39 = null;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        retrofit.converter.Converter converter41 = null;
        retrofit.Profiler profiler42 = null;
        retrofit.ErrorHandler errorHandler43 = null;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        log44.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter(server36, provider37, executor38, executor39, requestInterceptor40, converter41, profiler42, errorHandler43, log44, logLevel47);
        retrofit.RestAdapter.RestHandler restHandler49 = restAdapter48.new RestHandler();
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        restAdapter48.log = log50;
        retrofit.RestAdapter.Builder builder52 = builder24.setLog(log50);
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler54 = builder53.errorHandler;
        retrofit.ErrorHandler errorHandler55 = builder53.errorHandler;
        retrofit.RestAdapter.Log log56 = null;
        builder53.log = log56;
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean59 = logLevel58.log();
        builder53.logLevel = logLevel58;
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter(server14, provider17, executor18, executor19, requestInterceptor20, converter21, profiler22, errorHandler23, log50, logLevel58);
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler63 = builder62.errorHandler;
        retrofit.client.Client.Provider provider64 = null;
        builder62.clientProvider = provider64;
        retrofit.Server server68 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder69 = builder62.setServer(server68);
        retrofit.converter.Converter converter70 = null;
        builder69.converter = converter70;
        retrofit.RestAdapter restAdapter72 = builder69.build();
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler74 = builder73.errorHandler;
        java.util.concurrent.Executor executor75 = null;
        builder73.callbackExecutor = executor75;
        retrofit.RestAdapter.Builder builder77 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider78 = builder77.clientProvider;
        java.util.concurrent.Executor executor79 = null;
        builder77.callbackExecutor = executor79;
        retrofit.RestAdapter.Builder builder81 = new retrofit.RestAdapter.Builder();
        retrofit.Server server84 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder85 = builder81.setServer(server84);
        java.lang.String str86 = server84.getUrl();
        retrofit.RestAdapter.Builder builder87 = builder77.setServer(server84);
        retrofit.RestAdapter.Builder builder88 = builder73.setServer(server84);
        restAdapter72.server = server84;
        retrofit.client.Client.Provider provider90 = restAdapter72.clientProvider;
        restAdapter61.clientProvider = provider90;
        retrofit.Profiler profiler92 = restAdapter61.profiler;
        retrofit.ErrorHandler errorHandler93 = restAdapter61.errorHandler;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(errorHandler4);
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(provider25);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(errorHandler54);
        org.junit.Assert.assertNull(errorHandler55);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(errorHandler63);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(restAdapter72);
        org.junit.Assert.assertNull(errorHandler74);
        org.junit.Assert.assertNull(provider78);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "hi!" + "'", str86, "hi!");
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(provider90);
        org.junit.Assert.assertNull(profiler92);
        org.junit.Assert.assertNull(errorHandler93);
    }

    @Test
    public void test02640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02640");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        restAdapter5.log = log15;
        retrofit.RestAdapter.Builder builder17 = builder4.setLog(log15);
        retrofit.converter.Converter converter18 = null;
        builder17.converter = converter18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler21 = builder20.errorHandler;
        retrofit.ErrorHandler errorHandler22 = builder20.errorHandler;
        retrofit.Profiler profiler23 = builder20.profiler;
        retrofit.RestAdapter.Log log24 = builder20.log;
        retrofit.Server server25 = null;
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        log33.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter(server25, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log33, logLevel36);
        builder20.log = log33;
        retrofit.RestAdapter.Builder builder39 = builder17.setLog(log33);
        retrofit.ErrorHandler errorHandler40 = null;
        builder17.errorHandler = errorHandler40;
        retrofit.RestAdapter.Log log42 = builder17.log;
        retrofit.Profiler profiler43 = builder17.profiler;
        retrofit.ErrorHandler errorHandler44 = builder17.errorHandler;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler46 = builder45.errorHandler;
        retrofit.Server server49 = new retrofit.Server("", "");
        builder45.server = server49;
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        builder45.log = log51;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler54 = builder53.errorHandler;
        retrofit.client.Client.Provider provider55 = null;
        builder53.clientProvider = provider55;
        retrofit.Server server59 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder60 = builder53.setServer(server59);
        retrofit.converter.Converter converter61 = null;
        builder60.converter = converter61;
        retrofit.RestAdapter restAdapter63 = builder60.build();
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler65 = builder64.errorHandler;
        java.util.concurrent.Executor executor66 = null;
        builder64.callbackExecutor = executor66;
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider69 = builder68.clientProvider;
        java.util.concurrent.Executor executor70 = null;
        builder68.callbackExecutor = executor70;
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        retrofit.Server server75 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder76 = builder72.setServer(server75);
        java.lang.String str77 = server75.getUrl();
        retrofit.RestAdapter.Builder builder78 = builder68.setServer(server75);
        retrofit.RestAdapter.Builder builder79 = builder64.setServer(server75);
        restAdapter63.server = server75;
        java.util.concurrent.Executor executor81 = restAdapter63.httpExecutor;
        builder45.httpExecutor = executor81;
        builder17.callbackExecutor = executor81;
        retrofit.ErrorHandler errorHandler84 = builder17.errorHandler;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass85 = errorHandler84.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNull(profiler23);
        org.junit.Assert.assertNull(log24);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertNull(profiler43);
        org.junit.Assert.assertNull(errorHandler44);
        org.junit.Assert.assertNull(errorHandler46);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNull(errorHandler54);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(restAdapter63);
        org.junit.Assert.assertNull(errorHandler65);
        org.junit.Assert.assertNull(provider69);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "hi!" + "'", str77, "hi!");
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(executor81);
        org.junit.Assert.assertNull(errorHandler84);
    }

    @Test
    public void test02641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02641");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.Server server5 = builder0.server;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.Server server9 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder10 = builder6.setServer(server9);
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor12 = restAdapter11.callbackExecutor;
        java.util.concurrent.Executor executor13 = restAdapter11.callbackExecutor;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler15 = restAdapter14.errorHandler;
        retrofit.Server server18 = new retrofit.Server("", "");
        restAdapter14.server = server18;
        restAdapter11.server = server18;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        restAdapter11.log = log21;
        retrofit.RestAdapter.Builder builder23 = builder10.setLog(log21);
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder25 = builder10.setLogLevel(logLevel24);
        builder0.logLevel = logLevel24;
        java.util.concurrent.Executor executor27 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler29 = builder28.errorHandler;
        retrofit.ErrorHandler errorHandler30 = builder28.errorHandler;
        retrofit.converter.Converter converter31 = null;
        builder28.converter = converter31;
        retrofit.RequestInterceptor requestInterceptor33 = null;
        builder28.requestInterceptor = requestInterceptor33;
        retrofit.client.Client.Provider provider35 = builder28.clientProvider;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler37 = builder36.errorHandler;
        retrofit.client.Client.Provider provider38 = null;
        builder36.clientProvider = provider38;
        retrofit.Server server42 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder43 = builder36.setServer(server42);
        retrofit.converter.Converter converter44 = null;
        builder43.converter = converter44;
        retrofit.RestAdapter restAdapter46 = builder43.build();
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler48 = builder47.errorHandler;
        java.util.concurrent.Executor executor49 = null;
        builder47.callbackExecutor = executor49;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider52 = builder51.clientProvider;
        java.util.concurrent.Executor executor53 = null;
        builder51.callbackExecutor = executor53;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.Server server58 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder59 = builder55.setServer(server58);
        java.lang.String str60 = server58.getUrl();
        retrofit.RestAdapter.Builder builder61 = builder51.setServer(server58);
        retrofit.RestAdapter.Builder builder62 = builder47.setServer(server58);
        restAdapter46.server = server58;
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler65 = builder64.errorHandler;
        retrofit.client.Client.Provider provider66 = null;
        builder64.clientProvider = provider66;
        retrofit.Server server70 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder71 = builder64.setServer(server70);
        retrofit.client.Client.Provider provider72 = null;
        java.util.concurrent.Executor executor73 = null;
        java.util.concurrent.Executor executor74 = null;
        retrofit.RequestInterceptor requestInterceptor75 = null;
        retrofit.converter.Converter converter76 = null;
        retrofit.Profiler profiler77 = null;
        retrofit.ErrorHandler errorHandler78 = null;
        retrofit.Server server79 = null;
        retrofit.client.Client.Provider provider80 = null;
        java.util.concurrent.Executor executor81 = null;
        java.util.concurrent.Executor executor82 = null;
        retrofit.RequestInterceptor requestInterceptor83 = null;
        retrofit.converter.Converter converter84 = null;
        retrofit.Profiler profiler85 = null;
        retrofit.ErrorHandler errorHandler86 = null;
        retrofit.RestAdapter.Log log87 = retrofit.RestAdapter.Log.NONE;
        log87.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel90 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter91 = new retrofit.RestAdapter(server79, provider80, executor81, executor82, requestInterceptor83, converter84, profiler85, errorHandler86, log87, logLevel90);
        retrofit.RestAdapter.LogLevel logLevel92 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter93 = new retrofit.RestAdapter(server70, provider72, executor73, executor74, requestInterceptor75, converter76, profiler77, errorHandler78, log87, logLevel92);
        boolean boolean94 = logLevel92.log();
        boolean boolean95 = logLevel92.log();
        restAdapter46.setLogLevel(logLevel92);
        retrofit.RestAdapter.Builder builder97 = builder28.setLogLevel(logLevel92);
        retrofit.RestAdapter.Builder builder98 = builder0.setLogLevel(logLevel92);
        retrofit.Server server99 = builder0.server;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(server5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNull(errorHandler30);
        org.junit.Assert.assertNull(provider35);
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(restAdapter46);
        org.junit.Assert.assertNull(errorHandler48);
        org.junit.Assert.assertNull(provider52);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(errorHandler65);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(log87);
        org.junit.Assert.assertTrue("'" + logLevel90 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel90.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel92 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel92.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertNotNull(builder98);
        org.junit.Assert.assertNotNull(server99);
    }

    @Test
    public void test02642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02642");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter0.requestInterceptor;
        retrofit.ErrorHandler errorHandler17 = restAdapter0.errorHandler;
        java.util.concurrent.Executor executor18 = null;
        restAdapter0.callbackExecutor = executor18;
        java.util.concurrent.Executor executor20 = restAdapter0.httpExecutor;
        retrofit.client.Client.Provider provider21 = restAdapter0.clientProvider;
        retrofit.RestAdapter.Log log22 = restAdapter0.log;
        java.util.concurrent.Executor executor23 = restAdapter0.callbackExecutor;
        retrofit.client.Client.Provider provider24 = restAdapter0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel25 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler27 = builder26.errorHandler;
        retrofit.Server server30 = new retrofit.Server("", "");
        builder26.server = server30;
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        builder26.log = log32;
        retrofit.RestAdapter.Builder builder35 = builder26.setServer("default");
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        log36.log("hi!");
        log36.log("hi!");
        log36.log("");
        log36.log("default");
        builder26.log = log36;
        restAdapter0.log = log36;
        retrofit.RestAdapter.RestHandler restHandler47 = restAdapter0.new RestHandler();
        retrofit.Profiler profiler48 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler49 = restAdapter0.errorHandler;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(provider21);
        org.junit.Assert.assertNull(log22);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNull(provider24);
        org.junit.Assert.assertNull(logLevel25);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertNull(profiler48);
        org.junit.Assert.assertNull(errorHandler49);
    }

    @Test
    public void test02643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02643");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server6 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder7 = builder0.setServer(server6);
        retrofit.converter.Converter converter8 = null;
        builder7.converter = converter8;
        retrofit.RestAdapter restAdapter10 = builder7.build();
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler12 = builder11.errorHandler;
        java.util.concurrent.Executor executor13 = null;
        builder11.callbackExecutor = executor13;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider16 = builder15.clientProvider;
        java.util.concurrent.Executor executor17 = null;
        builder15.callbackExecutor = executor17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.Server server22 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder23 = builder19.setServer(server22);
        java.lang.String str24 = server22.getUrl();
        retrofit.RestAdapter.Builder builder25 = builder15.setServer(server22);
        retrofit.RestAdapter.Builder builder26 = builder11.setServer(server22);
        restAdapter10.server = server22;
        retrofit.Server server28 = restAdapter10.server;
        retrofit.RestAdapter.RestHandler restHandler29 = restAdapter10.new RestHandler();
        retrofit.converter.Converter converter30 = null;
        restAdapter10.converter = converter30;
        java.util.concurrent.Executor executor32 = restAdapter10.httpExecutor;
        java.lang.Throwable throwable33 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter10.logException(throwable33, "default");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(restAdapter10);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(provider16);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(server28);
        org.junit.Assert.assertNotNull(executor32);
    }

    @Test
    public void test02644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02644");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RequestInterceptor requestInterceptor1 = null;
        builder0.requestInterceptor = requestInterceptor1;
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.Server server4 = builder0.server;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler6 = null;
        builder5.errorHandler = errorHandler6;
        retrofit.ErrorHandler errorHandler8 = builder5.errorHandler;
        retrofit.RestAdapter.Builder builder10 = builder5.setServer("hi!");
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler12 = builder11.errorHandler;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.Server server16 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder17 = builder13.setServer(server16);
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor19 = restAdapter18.callbackExecutor;
        java.util.concurrent.Executor executor20 = restAdapter18.callbackExecutor;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler22 = restAdapter21.errorHandler;
        retrofit.Server server25 = new retrofit.Server("", "");
        restAdapter21.server = server25;
        restAdapter18.server = server25;
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        restAdapter18.log = log28;
        retrofit.RestAdapter.Builder builder30 = builder17.setLog(log28);
        retrofit.RestAdapter.Builder builder31 = builder11.setLog(log28);
        builder5.log = log28;
        builder0.log = log28;
        retrofit.Profiler profiler34 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder35 = builder0.setProfiler(profiler34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(server4);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test02645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02645");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter0.getLogLevel();
        retrofit.ErrorHandler errorHandler20 = null;
        restAdapter0.errorHandler = errorHandler20;
        retrofit.client.Client.Provider provider22 = null;
        restAdapter0.clientProvider = provider22;
        retrofit.ErrorHandler errorHandler24 = restAdapter0.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter0.new RestHandler();
        retrofit.client.Header[] headerArray40 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList41 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList41, headerArray40);
        retrofit.mime.TypedOutput typedOutput43 = null;
        retrofit.client.Request request44 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList41, typedOutput43);
        retrofit.mime.TypedOutput typedOutput45 = null;
        retrofit.client.Request request46 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList41, typedOutput45);
        retrofit.mime.TypedOutput typedOutput47 = null;
        retrofit.client.Request request48 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList41, typedOutput47);
        retrofit.mime.TypedOutput typedOutput49 = null;
        retrofit.client.Request request50 = new retrofit.client.Request("default", "hi!", (java.util.List<retrofit.client.Header>) headerList41, typedOutput49);
        retrofit.mime.TypedOutput typedOutput51 = null;
        retrofit.client.Request request52 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList41, typedOutput51);
        retrofit.mime.TypedOutput typedOutput53 = null;
        retrofit.client.Request request54 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList41, typedOutput53);
        retrofit.mime.TypedOutput typedOutput55 = null;
        retrofit.client.Request request56 = new retrofit.client.Request("default", "default", (java.util.List<retrofit.client.Header>) headerList41, typedOutput55);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request57 = restAdapter0.logAndReplaceRequest(request56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNotNull(headerArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test02646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02646");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server4 = new retrofit.Server("", "");
        builder0.server = server4;
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        builder0.log = log6;
        retrofit.RequestInterceptor requestInterceptor8 = builder0.requestInterceptor;
        retrofit.RestAdapter.Log log9 = retrofit.RestAdapter.Log.NONE;
        log9.log("hi!");
        log9.log("hi!");
        builder0.log = log9;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider16 = builder15.clientProvider;
        java.util.concurrent.Executor executor17 = null;
        builder15.callbackExecutor = executor17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.Server server22 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder23 = builder19.setServer(server22);
        java.lang.String str24 = server22.getUrl();
        retrofit.RestAdapter.Builder builder25 = builder15.setServer(server22);
        builder15.ensureSaneDefaults();
        retrofit.Server server27 = null;
        retrofit.client.Client.Provider provider28 = null;
        java.util.concurrent.Executor executor29 = null;
        java.util.concurrent.Executor executor30 = null;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        retrofit.converter.Converter converter32 = null;
        retrofit.Profiler profiler33 = null;
        retrofit.ErrorHandler errorHandler34 = null;
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        log35.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter(server27, provider28, executor29, executor30, requestInterceptor31, converter32, profiler33, errorHandler34, log35, logLevel38);
        retrofit.RestAdapter.RestHandler restHandler40 = restAdapter39.new RestHandler();
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        restAdapter39.log = log41;
        retrofit.RestAdapter.Builder builder43 = builder15.setLog(log41);
        retrofit.RestAdapter.LogLevel logLevel44 = builder15.logLevel;
        boolean boolean45 = logLevel44.log();
        retrofit.RestAdapter.Builder builder46 = builder0.setLogLevel(logLevel44);
        retrofit.RequestInterceptor requestInterceptor47 = builder46.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor48 = builder46.requestInterceptor;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertNotNull(log9);
        org.junit.Assert.assertNull(provider16);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(requestInterceptor47);
        org.junit.Assert.assertNull(requestInterceptor48);
    }

    @Test
    public void test02647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02647");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = null;
        restAdapter0.requestInterceptor = requestInterceptor1;
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter0.new RestHandler();
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor5 = restAdapter4.callbackExecutor;
        retrofit.RestAdapter restAdapter6 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor7 = restAdapter6.callbackExecutor;
        java.util.concurrent.Executor executor8 = restAdapter6.callbackExecutor;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler10 = restAdapter9.errorHandler;
        retrofit.Server server13 = new retrofit.Server("", "");
        restAdapter9.server = server13;
        restAdapter6.server = server13;
        restAdapter4.server = server13;
        retrofit.Profiler profiler17 = restAdapter4.profiler;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter4.errorHandler = errorHandler18;
        retrofit.Profiler profiler20 = null;
        restAdapter4.profiler = profiler20;
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter4.getLogLevel();
        retrofit.ErrorHandler errorHandler24 = null;
        restAdapter4.errorHandler = errorHandler24;
        retrofit.client.Client.Provider provider26 = null;
        restAdapter4.clientProvider = provider26;
        retrofit.ErrorHandler errorHandler28 = restAdapter4.errorHandler;
        retrofit.Server server29 = restAdapter4.server;
        java.lang.String str30 = server29.getName();
        restAdapter0.server = server29;
        java.util.concurrent.Executor executor32 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler35 = builder34.errorHandler;
        retrofit.client.Client.Provider provider36 = null;
        builder34.clientProvider = provider36;
        retrofit.Server server40 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder41 = builder34.setServer(server40);
        retrofit.converter.Converter converter42 = null;
        builder41.converter = converter42;
        retrofit.RestAdapter restAdapter44 = builder41.build();
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler46 = builder45.errorHandler;
        java.util.concurrent.Executor executor47 = null;
        builder45.callbackExecutor = executor47;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider50 = builder49.clientProvider;
        java.util.concurrent.Executor executor51 = null;
        builder49.callbackExecutor = executor51;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.Server server56 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder57 = builder53.setServer(server56);
        java.lang.String str58 = server56.getUrl();
        retrofit.RestAdapter.Builder builder59 = builder49.setServer(server56);
        retrofit.RestAdapter.Builder builder60 = builder45.setServer(server56);
        restAdapter44.server = server56;
        java.util.concurrent.Executor executor62 = restAdapter44.httpExecutor;
        restAdapter0.callbackExecutor = executor62;
        retrofit.client.Response response65 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response67 = restAdapter0.logAndReplaceResponse("default", response65, (long) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNull(profiler17);
        org.junit.Assert.assertNull(logLevel22);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertNotNull(server29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertNull(errorHandler35);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(restAdapter44);
        org.junit.Assert.assertNull(errorHandler46);
        org.junit.Assert.assertNull(provider50);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(executor62);
    }

    @Test
    public void test02648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02648");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.converter.Converter converter4 = builder0.converter;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.ErrorHandler errorHandler7 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler9 = builder8.errorHandler;
        retrofit.ErrorHandler errorHandler10 = builder8.errorHandler;
        retrofit.RestAdapter.Log log11 = null;
        builder8.log = log11;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean14 = logLevel13.log();
        builder8.logLevel = logLevel13;
        retrofit.ErrorHandler errorHandler16 = builder8.errorHandler;
        retrofit.RestAdapter.Builder builder18 = builder8.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor19 = null;
        builder18.requestInterceptor = requestInterceptor19;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler22 = builder21.errorHandler;
        retrofit.client.Client.Provider provider23 = null;
        builder21.clientProvider = provider23;
        retrofit.Server server27 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder28 = builder21.setServer(server27);
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.Server server36 = null;
        retrofit.client.Client.Provider provider37 = null;
        java.util.concurrent.Executor executor38 = null;
        java.util.concurrent.Executor executor39 = null;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        retrofit.converter.Converter converter41 = null;
        retrofit.Profiler profiler42 = null;
        retrofit.ErrorHandler errorHandler43 = null;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        log44.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter(server36, provider37, executor38, executor39, requestInterceptor40, converter41, profiler42, errorHandler43, log44, logLevel47);
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter(server27, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log44, logLevel49);
        log44.log("");
        builder18.log = log44;
        retrofit.RestAdapter.Builder builder54 = builder0.setLog(log44);
        log44.log("");
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test02649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02649");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server4 = new retrofit.Server("", "");
        builder0.server = server4;
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        builder0.log = log6;
        retrofit.RequestInterceptor requestInterceptor8 = builder0.requestInterceptor;
        retrofit.RestAdapter.Log log9 = retrofit.RestAdapter.Log.NONE;
        log9.log("hi!");
        log9.log("hi!");
        builder0.log = log9;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider16 = builder15.clientProvider;
        java.util.concurrent.Executor executor17 = null;
        builder15.callbackExecutor = executor17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.Server server22 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder23 = builder19.setServer(server22);
        java.lang.String str24 = server22.getUrl();
        retrofit.RestAdapter.Builder builder25 = builder15.setServer(server22);
        builder15.ensureSaneDefaults();
        retrofit.Server server27 = null;
        retrofit.client.Client.Provider provider28 = null;
        java.util.concurrent.Executor executor29 = null;
        java.util.concurrent.Executor executor30 = null;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        retrofit.converter.Converter converter32 = null;
        retrofit.Profiler profiler33 = null;
        retrofit.ErrorHandler errorHandler34 = null;
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        log35.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter(server27, provider28, executor29, executor30, requestInterceptor31, converter32, profiler33, errorHandler34, log35, logLevel38);
        retrofit.RestAdapter.RestHandler restHandler40 = restAdapter39.new RestHandler();
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        restAdapter39.log = log41;
        retrofit.RestAdapter.Builder builder43 = builder15.setLog(log41);
        retrofit.RestAdapter.LogLevel logLevel44 = builder15.logLevel;
        boolean boolean45 = logLevel44.log();
        retrofit.RestAdapter.Builder builder46 = builder0.setLogLevel(logLevel44);
        retrofit.RequestInterceptor requestInterceptor47 = builder46.requestInterceptor;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.Server server51 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder52 = builder48.setServer(server51);
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor54 = restAdapter53.callbackExecutor;
        java.util.concurrent.Executor executor55 = restAdapter53.callbackExecutor;
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler57 = restAdapter56.errorHandler;
        retrofit.Server server60 = new retrofit.Server("", "");
        restAdapter56.server = server60;
        restAdapter53.server = server60;
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        restAdapter53.log = log63;
        retrofit.RestAdapter.Builder builder65 = builder52.setLog(log63);
        retrofit.RestAdapter.LogLevel logLevel66 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder67 = builder52.setLogLevel(logLevel66);
        retrofit.Profiler profiler68 = null;
        builder67.profiler = profiler68;
        java.util.concurrent.Executor executor70 = null;
        builder67.httpExecutor = executor70;
        retrofit.RestAdapter restAdapter72 = builder67.build();
        retrofit.client.Client.Provider provider73 = restAdapter72.clientProvider;
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler75 = builder74.errorHandler;
        retrofit.ErrorHandler errorHandler76 = builder74.errorHandler;
        retrofit.Profiler profiler77 = builder74.profiler;
        retrofit.RestAdapter.Log log78 = builder74.log;
        retrofit.RestAdapter.LogLevel logLevel79 = retrofit.RestAdapter.LogLevel.FULL;
        builder74.logLevel = logLevel79;
        retrofit.Profiler profiler81 = builder74.profiler;
        retrofit.RestAdapter.LogLevel logLevel82 = builder74.logLevel;
        restAdapter72.logLevel = logLevel82;
        retrofit.RestAdapter.Builder builder84 = builder46.setLogLevel(logLevel82);
        retrofit.Profiler profiler85 = null;
        builder46.profiler = profiler85;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertNotNull(log9);
        org.junit.Assert.assertNull(provider16);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(requestInterceptor47);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(executor54);
        org.junit.Assert.assertNull(executor55);
        org.junit.Assert.assertNull(errorHandler57);
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(restAdapter72);
        org.junit.Assert.assertNotNull(provider73);
        org.junit.Assert.assertNull(errorHandler75);
        org.junit.Assert.assertNull(errorHandler76);
        org.junit.Assert.assertNull(profiler77);
        org.junit.Assert.assertNull(log78);
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler81);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder84);
    }

    @Test
    public void test02650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02650");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server4 = new retrofit.Server("", "");
        builder0.server = server4;
        retrofit.client.Client.Provider provider6 = builder0.clientProvider;
        java.util.concurrent.Executor executor7 = builder0.httpExecutor;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass8 = executor7.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(provider6);
        org.junit.Assert.assertNull(executor7);
    }

    @Test
    public void test02651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02651");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server4 = new retrofit.Server("", "");
        builder0.server = server4;
        retrofit.client.Client.Provider provider6 = null;
        java.util.concurrent.Executor executor7 = null;
        java.util.concurrent.Executor executor8 = null;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        retrofit.converter.Converter converter10 = null;
        retrofit.Profiler profiler11 = null;
        retrofit.ErrorHandler errorHandler12 = null;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler14 = builder13.errorHandler;
        retrofit.Server server17 = new retrofit.Server("", "");
        builder13.server = server17;
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        builder13.log = log19;
        retrofit.Server server21 = null;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        log29.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel32);
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server4, provider6, executor7, executor8, requestInterceptor9, converter10, profiler11, errorHandler12, log19, logLevel32);
        retrofit.RequestInterceptor requestInterceptor35 = null;
        restAdapter34.requestInterceptor = requestInterceptor35;
        retrofit.RestAdapter.RestHandler restHandler37 = restAdapter34.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler38 = restAdapter34.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler39 = restAdapter34.new RestHandler();
        retrofit.Profiler profiler40 = null;
        restAdapter34.profiler = profiler40;
        retrofit.Profiler profiler42 = restAdapter34.profiler;
        retrofit.RestAdapter.Log log43 = restAdapter34.log;
        retrofit.client.Response response45 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response47 = restAdapter34.logAndReplaceResponse("", response45, (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler42);
        org.junit.Assert.assertNotNull(log43);
    }

    @Test
    public void test02652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02652");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList7, typedOutput11);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput13);
        java.lang.String str15 = request14.getMethod();
        java.lang.String str16 = request14.getMethod();
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test02653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02653");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server4 = new retrofit.Server("", "");
        builder0.server = server4;
        retrofit.client.Client.Provider provider6 = builder0.clientProvider;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler9 = builder8.errorHandler;
        retrofit.client.Client.Provider provider10 = null;
        builder8.clientProvider = provider10;
        retrofit.Server server14 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder15 = builder8.setServer(server14);
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler17 = builder16.errorHandler;
        retrofit.client.Client.Provider provider18 = null;
        builder16.clientProvider = provider18;
        retrofit.converter.Converter converter20 = builder16.converter;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder22 = builder16.setLogLevel(logLevel21);
        builder8.logLevel = logLevel21;
        builder7.logLevel = logLevel21;
        retrofit.RestAdapter.Builder builder25 = builder0.setLogLevel(logLevel21);
        retrofit.RestAdapter.Log log26 = builder0.log;
        retrofit.Profiler profiler27 = null;
        builder0.profiler = profiler27;
        retrofit.RestAdapter.LogLevel logLevel29 = builder0.logLevel;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler32 = builder31.errorHandler;
        retrofit.Server server35 = new retrofit.Server("", "");
        builder31.server = server35;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor38 = restAdapter37.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler39 = restAdapter37.new RestHandler();
        retrofit.Server server42 = new retrofit.Server("hi!", "hi!");
        restAdapter37.server = server42;
        retrofit.RestAdapter.Builder builder44 = builder31.setServer(server42);
        retrofit.RestAdapter.Log log45 = builder31.log;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler47 = null;
        builder46.errorHandler = errorHandler47;
        retrofit.converter.Converter converter49 = builder46.converter;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.Server server53 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder54 = builder50.setServer(server53);
        retrofit.converter.Converter converter55 = builder50.converter;
        retrofit.RequestInterceptor requestInterceptor56 = builder50.requestInterceptor;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider58 = builder57.clientProvider;
        java.util.concurrent.Executor executor59 = null;
        builder57.callbackExecutor = executor59;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.Server server64 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder65 = builder61.setServer(server64);
        java.lang.String str66 = server64.getUrl();
        retrofit.RestAdapter.Builder builder67 = builder57.setServer(server64);
        builder57.ensureSaneDefaults();
        retrofit.Server server69 = null;
        retrofit.client.Client.Provider provider70 = null;
        java.util.concurrent.Executor executor71 = null;
        java.util.concurrent.Executor executor72 = null;
        retrofit.RequestInterceptor requestInterceptor73 = null;
        retrofit.converter.Converter converter74 = null;
        retrofit.Profiler profiler75 = null;
        retrofit.ErrorHandler errorHandler76 = null;
        retrofit.RestAdapter.Log log77 = retrofit.RestAdapter.Log.NONE;
        log77.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel80 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter81 = new retrofit.RestAdapter(server69, provider70, executor71, executor72, requestInterceptor73, converter74, profiler75, errorHandler76, log77, logLevel80);
        retrofit.RestAdapter.RestHandler restHandler82 = restAdapter81.new RestHandler();
        retrofit.RestAdapter.Log log83 = retrofit.RestAdapter.Log.NONE;
        restAdapter81.log = log83;
        retrofit.RestAdapter.Builder builder85 = builder57.setLog(log83);
        retrofit.RestAdapter.Builder builder87 = builder57.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor88 = builder57.requestInterceptor;
        builder50.requestInterceptor = requestInterceptor88;
        builder46.requestInterceptor = requestInterceptor88;
        builder31.requestInterceptor = requestInterceptor88;
        retrofit.RestAdapter.Builder builder92 = builder0.setRequestInterceptor(requestInterceptor88);
        java.util.concurrent.Executor executor93 = builder92.callbackExecutor;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(provider6);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(converter20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler32);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(log45);
        org.junit.Assert.assertNull(converter49);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(converter55);
        org.junit.Assert.assertNull(requestInterceptor56);
        org.junit.Assert.assertNull(provider58);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hi!" + "'", str66, "hi!");
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(log77);
        org.junit.Assert.assertTrue("'" + logLevel80 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel80.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(requestInterceptor88);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(executor93);
    }

    @Test
    public void test02654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02654");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter0.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor4 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.Log log5 = restAdapter0.log;
        retrofit.converter.Converter converter6 = restAdapter0.converter;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler8 = builder7.errorHandler;
        retrofit.Server server11 = new retrofit.Server("", "");
        builder7.server = server11;
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        builder7.log = log13;
        retrofit.RestAdapter.Builder builder16 = builder7.setServer("default");
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        log17.log("hi!");
        log17.log("hi!");
        log17.log("");
        log17.log("default");
        builder7.log = log17;
        retrofit.RestAdapter.LogLevel logLevel27 = builder7.logLevel;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider29 = builder28.clientProvider;
        java.util.concurrent.Executor executor30 = null;
        builder28.callbackExecutor = executor30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.Server server35 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder36 = builder32.setServer(server35);
        java.lang.String str37 = server35.getUrl();
        retrofit.RestAdapter.Builder builder38 = builder28.setServer(server35);
        java.lang.String str39 = server35.getName();
        builder7.server = server35;
        restAdapter0.server = server35;
        retrofit.client.Client.Provider provider42 = restAdapter0.clientProvider;
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNotNull(log13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(provider29);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertNull(provider42);
    }

    @Test
    public void test02655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02655");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean6 = logLevel5.log();
        builder0.logLevel = logLevel5;
        retrofit.ErrorHandler errorHandler8 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder10 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler12 = builder11.errorHandler;
        retrofit.client.Client.Provider provider13 = null;
        builder11.clientProvider = provider13;
        retrofit.Server server17 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder18 = builder11.setServer(server17);
        retrofit.converter.Converter converter19 = null;
        builder18.converter = converter19;
        retrofit.RestAdapter restAdapter21 = builder18.build();
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler23 = builder22.errorHandler;
        java.util.concurrent.Executor executor24 = null;
        builder22.callbackExecutor = executor24;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider27 = builder26.clientProvider;
        java.util.concurrent.Executor executor28 = null;
        builder26.callbackExecutor = executor28;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.Server server33 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder34 = builder30.setServer(server33);
        java.lang.String str35 = server33.getUrl();
        retrofit.RestAdapter.Builder builder36 = builder26.setServer(server33);
        retrofit.RestAdapter.Builder builder37 = builder22.setServer(server33);
        restAdapter21.server = server33;
        retrofit.RestAdapter.Builder builder39 = builder0.setServer(server33);
        retrofit.RestAdapter restAdapter40 = builder0.build();
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(restAdapter21);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNull(provider27);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(restAdapter40);
    }

    @Test
    public void test02656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02656");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = builder0.callbackExecutor;
        java.util.concurrent.Executor executor3 = builder0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel4 = builder0.logLevel;
        retrofit.RequestInterceptor requestInterceptor5 = builder0.requestInterceptor;
        java.util.concurrent.Executor executor6 = builder0.httpExecutor;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertNull(executor6);
    }

    @Test
    public void test02657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02657");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        java.util.concurrent.Executor executor18 = null;
        restAdapter0.httpExecutor = executor18;
        retrofit.Profiler profiler20 = restAdapter0.profiler;
        retrofit.RestAdapter.LogLevel logLevel21 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter0.logLevel;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(profiler20);
        org.junit.Assert.assertNull(logLevel21);
        org.junit.Assert.assertNull(logLevel22);
    }

    @Test
    public void test02658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02658");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.Profiler profiler3 = builder0.profiler;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server7 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder8 = builder4.setServer(server7);
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor10 = restAdapter9.callbackExecutor;
        java.util.concurrent.Executor executor11 = restAdapter9.callbackExecutor;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler13 = restAdapter12.errorHandler;
        retrofit.Server server16 = new retrofit.Server("", "");
        restAdapter12.server = server16;
        restAdapter9.server = server16;
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        restAdapter9.log = log19;
        retrofit.RestAdapter.Builder builder21 = builder8.setLog(log19);
        retrofit.converter.Converter converter22 = null;
        builder21.converter = converter22;
        retrofit.RestAdapter.Builder builder25 = builder21.setServer("hi!");
        builder21.ensureSaneDefaults();
        retrofit.RestAdapter.Log log27 = builder21.log;
        retrofit.RequestInterceptor requestInterceptor28 = builder21.requestInterceptor;
        retrofit.RestAdapter.Builder builder29 = builder0.setRequestInterceptor(requestInterceptor28);
        java.util.concurrent.Executor executor30 = builder29.httpExecutor;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNotNull(requestInterceptor28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(executor30);
    }

    @Test
    public void test02659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02659");
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "default", (java.util.List<retrofit.client.Header>) headerList9, typedOutput13);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("default", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput17);
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test02660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02660");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = null;
        restAdapter0.callbackExecutor = executor2;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        retrofit.converter.Converter converter5 = restAdapter0.converter;
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter0.new RestHandler();
        retrofit.client.Response response8 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response10 = restAdapter0.logAndReplaceResponse("default", response8, (long) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(converter5);
    }

    @Test
    public void test02661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02661");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        restAdapter5.log = log15;
        retrofit.RestAdapter.Builder builder17 = builder4.setLog(log15);
        retrofit.converter.Converter converter18 = null;
        builder17.converter = converter18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler21 = builder20.errorHandler;
        java.util.concurrent.Executor executor22 = null;
        builder20.callbackExecutor = executor22;
        retrofit.converter.Converter converter24 = builder20.converter;
        retrofit.RestAdapter.Builder builder26 = builder20.setServer("default");
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler28 = builder27.errorHandler;
        retrofit.client.Client.Provider provider29 = null;
        builder27.clientProvider = provider29;
        retrofit.Server server33 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder34 = builder27.setServer(server33);
        retrofit.converter.Converter converter35 = null;
        builder34.converter = converter35;
        retrofit.RestAdapter restAdapter37 = builder34.build();
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler39 = builder38.errorHandler;
        java.util.concurrent.Executor executor40 = null;
        builder38.callbackExecutor = executor40;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider43 = builder42.clientProvider;
        java.util.concurrent.Executor executor44 = null;
        builder42.callbackExecutor = executor44;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.Server server49 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder50 = builder46.setServer(server49);
        java.lang.String str51 = server49.getUrl();
        retrofit.RestAdapter.Builder builder52 = builder42.setServer(server49);
        retrofit.RestAdapter.Builder builder53 = builder38.setServer(server49);
        restAdapter37.server = server49;
        retrofit.client.Client.Provider provider55 = restAdapter37.clientProvider;
        builder26.clientProvider = provider55;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler58 = builder57.errorHandler;
        retrofit.ErrorHandler errorHandler59 = builder57.errorHandler;
        retrofit.Profiler profiler60 = builder57.profiler;
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor62 = restAdapter61.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler63 = restAdapter61.new RestHandler();
        retrofit.Server server66 = new retrofit.Server("hi!", "hi!");
        restAdapter61.server = server66;
        retrofit.RestAdapter.Builder builder68 = builder57.setServer(server66);
        retrofit.converter.Converter converter69 = null;
        builder68.converter = converter69;
        builder68.ensureSaneDefaults();
        retrofit.RestAdapter.Log log72 = null;
        builder68.log = log72;
        retrofit.RequestInterceptor requestInterceptor74 = builder68.requestInterceptor;
        retrofit.RestAdapter.Builder builder75 = builder26.setRequestInterceptor(requestInterceptor74);
        retrofit.RequestInterceptor requestInterceptor76 = builder26.requestInterceptor;
        retrofit.RestAdapter.Builder builder77 = builder17.setRequestInterceptor(requestInterceptor76);
        retrofit.RestAdapter.Log log78 = builder77.log;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(converter24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(restAdapter37);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNull(provider43);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(provider55);
        org.junit.Assert.assertNull(errorHandler58);
        org.junit.Assert.assertNull(errorHandler59);
        org.junit.Assert.assertNull(profiler60);
        org.junit.Assert.assertNull(executor62);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(requestInterceptor74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(requestInterceptor76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(log78);
    }

    @Test
    public void test02662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02662");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        restAdapter5.log = log15;
        retrofit.RestAdapter.Builder builder17 = builder4.setLog(log15);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder19 = builder4.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler21 = builder20.errorHandler;
        retrofit.Server server24 = new retrofit.Server("", "");
        builder20.server = server24;
        java.util.concurrent.Executor executor26 = builder20.callbackExecutor;
        retrofit.Server server27 = null;
        builder20.server = server27;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.NONE;
        builder20.logLevel = logLevel29;
        builder19.logLevel = logLevel29;
        retrofit.RestAdapter.Builder builder33 = builder19.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor34 = builder33.requestInterceptor;
        retrofit.client.Client client35 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder36 = builder33.setClient(client35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(requestInterceptor34);
    }

    @Test
    public void test02663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02663");
        retrofit.client.Header[] headerArray10 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList11 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList11, headerArray10);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList11, typedOutput13);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList11, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList11, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("default", "hi!", (java.util.List<retrofit.client.Header>) headerList11, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList11, typedOutput21);
        java.lang.String str23 = request22.getUrl();
        java.lang.String str24 = request22.getUrl();
        org.junit.Assert.assertNotNull(headerArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
    }

    @Test
    public void test02664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02664");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.RestAdapter restAdapter3 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor4 = restAdapter3.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        restAdapter3.server = server12;
        retrofit.Profiler profiler16 = restAdapter3.profiler;
        retrofit.ErrorHandler errorHandler17 = restAdapter3.errorHandler;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler19 = builder18.errorHandler;
        retrofit.ErrorHandler errorHandler20 = builder18.errorHandler;
        java.util.concurrent.Executor executor21 = builder18.callbackExecutor;
        java.util.concurrent.Executor executor22 = null;
        builder18.callbackExecutor = executor22;
        retrofit.Server server24 = null;
        retrofit.client.Client.Provider provider25 = null;
        java.util.concurrent.Executor executor26 = null;
        java.util.concurrent.Executor executor27 = null;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        retrofit.converter.Converter converter29 = null;
        retrofit.Profiler profiler30 = null;
        retrofit.ErrorHandler errorHandler31 = null;
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        log32.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter(server24, provider25, executor26, executor27, requestInterceptor28, converter29, profiler30, errorHandler31, log32, logLevel35);
        builder18.log = log32;
        restAdapter3.log = log32;
        log32.log("default");
        builder0.log = log32;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler43 = builder42.errorHandler;
        retrofit.ErrorHandler errorHandler44 = builder42.errorHandler;
        retrofit.Profiler profiler45 = builder42.profiler;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor47 = restAdapter46.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler48 = restAdapter46.new RestHandler();
        retrofit.Server server51 = new retrofit.Server("hi!", "hi!");
        restAdapter46.server = server51;
        retrofit.RestAdapter.Builder builder53 = builder42.setServer(server51);
        retrofit.converter.Converter converter54 = null;
        builder53.converter = converter54;
        builder53.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter57 = builder53.build();
        retrofit.RequestInterceptor requestInterceptor58 = builder53.requestInterceptor;
        retrofit.RestAdapter.Builder builder59 = builder0.setRequestInterceptor(requestInterceptor58);
        retrofit.client.Client client60 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder61 = builder0.setClient(client60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNull(profiler16);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler43);
        org.junit.Assert.assertNull(errorHandler44);
        org.junit.Assert.assertNull(profiler45);
        org.junit.Assert.assertNull(executor47);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(restAdapter57);
        org.junit.Assert.assertNotNull(requestInterceptor58);
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test02665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02665");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        java.util.concurrent.Executor executor6 = builder4.httpExecutor;
        retrofit.RestAdapter restAdapter7 = builder4.build();
        retrofit.Profiler profiler8 = restAdapter7.profiler;
        java.lang.Throwable throwable9 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter7.logException(throwable9, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNull(profiler8);
    }

    @Test
    public void test02666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02666");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput11);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "default", (java.util.List<retrofit.client.Header>) headerList7, typedOutput13);
        java.util.List<retrofit.client.Header> headerList15 = request14.getHeaders();
        java.lang.String str16 = request14.getUrl();
        retrofit.mime.TypedOutput typedOutput17 = request14.getBody();
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "default" + "'", str16, "default");
        org.junit.Assert.assertNull(typedOutput17);
    }

    @Test
    public void test02667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02667");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.converter.Converter converter2 = null;
        restAdapter0.converter = converter2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server7 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder8 = builder4.setServer(server7);
        retrofit.Server server9 = builder4.server;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.Server server13 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder14 = builder10.setServer(server13);
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor16 = restAdapter15.callbackExecutor;
        java.util.concurrent.Executor executor17 = restAdapter15.callbackExecutor;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler19 = restAdapter18.errorHandler;
        retrofit.Server server22 = new retrofit.Server("", "");
        restAdapter18.server = server22;
        restAdapter15.server = server22;
        retrofit.RestAdapter.Log log25 = retrofit.RestAdapter.Log.NONE;
        restAdapter15.log = log25;
        retrofit.RestAdapter.Builder builder27 = builder14.setLog(log25);
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder29 = builder14.setLogLevel(logLevel28);
        builder4.logLevel = logLevel28;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.Server server34 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder35 = builder31.setServer(server34);
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor37 = restAdapter36.callbackExecutor;
        java.util.concurrent.Executor executor38 = restAdapter36.callbackExecutor;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler40 = restAdapter39.errorHandler;
        retrofit.Server server43 = new retrofit.Server("", "");
        restAdapter39.server = server43;
        restAdapter36.server = server43;
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        restAdapter36.log = log46;
        retrofit.RestAdapter.Builder builder48 = builder35.setLog(log46);
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder50 = builder35.setLogLevel(logLevel49);
        retrofit.RestAdapter.Log log51 = builder35.log;
        retrofit.RestAdapter restAdapter52 = builder35.build();
        java.util.concurrent.Executor executor53 = restAdapter52.callbackExecutor;
        builder4.callbackExecutor = executor53;
        restAdapter0.httpExecutor = executor53;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler57 = builder56.errorHandler;
        retrofit.Server server60 = new retrofit.Server("", "");
        builder56.server = server60;
        retrofit.RestAdapter.Log log62 = retrofit.RestAdapter.Log.NONE;
        builder56.log = log62;
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler65 = builder64.errorHandler;
        retrofit.client.Client.Provider provider66 = null;
        builder64.clientProvider = provider66;
        retrofit.Server server70 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder71 = builder64.setServer(server70);
        retrofit.converter.Converter converter72 = null;
        builder71.converter = converter72;
        retrofit.RestAdapter restAdapter74 = builder71.build();
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler76 = builder75.errorHandler;
        java.util.concurrent.Executor executor77 = null;
        builder75.callbackExecutor = executor77;
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider80 = builder79.clientProvider;
        java.util.concurrent.Executor executor81 = null;
        builder79.callbackExecutor = executor81;
        retrofit.RestAdapter.Builder builder83 = new retrofit.RestAdapter.Builder();
        retrofit.Server server86 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder87 = builder83.setServer(server86);
        java.lang.String str88 = server86.getUrl();
        retrofit.RestAdapter.Builder builder89 = builder79.setServer(server86);
        retrofit.RestAdapter.Builder builder90 = builder75.setServer(server86);
        restAdapter74.server = server86;
        java.util.concurrent.Executor executor92 = restAdapter74.httpExecutor;
        builder56.httpExecutor = executor92;
        restAdapter0.callbackExecutor = executor92;
        retrofit.ErrorHandler errorHandler95 = restAdapter0.errorHandler;
        retrofit.Profiler profiler96 = null;
        restAdapter0.profiler = profiler96;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(server9);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNotNull(log25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNotNull(restAdapter52);
        org.junit.Assert.assertNotNull(executor53);
        org.junit.Assert.assertNull(errorHandler57);
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertNull(errorHandler65);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(restAdapter74);
        org.junit.Assert.assertNull(errorHandler76);
        org.junit.Assert.assertNull(provider80);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "hi!" + "'", str88, "hi!");
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(executor92);
        org.junit.Assert.assertNull(errorHandler95);
    }

    @Test
    public void test02668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02668");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        restAdapter5.log = log15;
        retrofit.RestAdapter.Builder builder17 = builder4.setLog(log15);
        retrofit.RestAdapter.Builder builder19 = builder4.setServer("hi!");
        retrofit.Server server20 = builder19.server;
        java.lang.Class<?> wildcardClass21 = builder19.getClass();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(server20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test02669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02669");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        restAdapter5.log = log15;
        retrofit.RestAdapter.Builder builder17 = builder4.setLog(log15);
        retrofit.converter.Converter converter18 = null;
        builder17.converter = converter18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler21 = builder20.errorHandler;
        java.util.concurrent.Executor executor22 = null;
        builder20.callbackExecutor = executor22;
        retrofit.converter.Converter converter24 = builder20.converter;
        retrofit.RestAdapter.Builder builder26 = builder20.setServer("default");
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler28 = builder27.errorHandler;
        retrofit.client.Client.Provider provider29 = null;
        builder27.clientProvider = provider29;
        retrofit.Server server33 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder34 = builder27.setServer(server33);
        retrofit.converter.Converter converter35 = null;
        builder34.converter = converter35;
        retrofit.RestAdapter restAdapter37 = builder34.build();
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler39 = builder38.errorHandler;
        java.util.concurrent.Executor executor40 = null;
        builder38.callbackExecutor = executor40;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider43 = builder42.clientProvider;
        java.util.concurrent.Executor executor44 = null;
        builder42.callbackExecutor = executor44;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.Server server49 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder50 = builder46.setServer(server49);
        java.lang.String str51 = server49.getUrl();
        retrofit.RestAdapter.Builder builder52 = builder42.setServer(server49);
        retrofit.RestAdapter.Builder builder53 = builder38.setServer(server49);
        restAdapter37.server = server49;
        retrofit.client.Client.Provider provider55 = restAdapter37.clientProvider;
        builder26.clientProvider = provider55;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler58 = builder57.errorHandler;
        retrofit.ErrorHandler errorHandler59 = builder57.errorHandler;
        retrofit.Profiler profiler60 = builder57.profiler;
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor62 = restAdapter61.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler63 = restAdapter61.new RestHandler();
        retrofit.Server server66 = new retrofit.Server("hi!", "hi!");
        restAdapter61.server = server66;
        retrofit.RestAdapter.Builder builder68 = builder57.setServer(server66);
        retrofit.converter.Converter converter69 = null;
        builder68.converter = converter69;
        builder68.ensureSaneDefaults();
        retrofit.RestAdapter.Log log72 = null;
        builder68.log = log72;
        retrofit.RequestInterceptor requestInterceptor74 = builder68.requestInterceptor;
        retrofit.RestAdapter.Builder builder75 = builder26.setRequestInterceptor(requestInterceptor74);
        retrofit.RequestInterceptor requestInterceptor76 = builder26.requestInterceptor;
        retrofit.RestAdapter.Builder builder77 = builder17.setRequestInterceptor(requestInterceptor76);
        builder17.ensureSaneDefaults();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(converter24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(restAdapter37);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNull(provider43);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(provider55);
        org.junit.Assert.assertNull(errorHandler58);
        org.junit.Assert.assertNull(errorHandler59);
        org.junit.Assert.assertNull(profiler60);
        org.junit.Assert.assertNull(executor62);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(requestInterceptor74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(requestInterceptor76);
        org.junit.Assert.assertNotNull(builder77);
    }

    @Test
    public void test02670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02670");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        java.util.concurrent.Executor executor4 = null;
        builder0.httpExecutor = executor4;
        java.util.concurrent.Executor executor6 = builder0.callbackExecutor;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(executor6);
    }

    @Test
    public void test02671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02671");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.ErrorHandler errorHandler3 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler7 = builder6.errorHandler;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.Server server11 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder12 = builder8.setServer(server11);
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor14 = restAdapter13.callbackExecutor;
        java.util.concurrent.Executor executor15 = restAdapter13.callbackExecutor;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler17 = restAdapter16.errorHandler;
        retrofit.Server server20 = new retrofit.Server("", "");
        restAdapter16.server = server20;
        restAdapter13.server = server20;
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        restAdapter13.log = log23;
        retrofit.RestAdapter.Builder builder25 = builder12.setLog(log23);
        retrofit.RestAdapter.Builder builder26 = builder6.setLog(log23);
        builder0.log = log23;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler29 = builder28.errorHandler;
        retrofit.client.Client.Provider provider30 = null;
        builder28.clientProvider = provider30;
        retrofit.Server server34 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder35 = builder28.setServer(server34);
        retrofit.converter.Converter converter36 = null;
        builder35.converter = converter36;
        retrofit.RestAdapter restAdapter38 = builder35.build();
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler40 = builder39.errorHandler;
        java.util.concurrent.Executor executor41 = null;
        builder39.callbackExecutor = executor41;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider44 = builder43.clientProvider;
        java.util.concurrent.Executor executor45 = null;
        builder43.callbackExecutor = executor45;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.Server server50 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder51 = builder47.setServer(server50);
        java.lang.String str52 = server50.getUrl();
        retrofit.RestAdapter.Builder builder53 = builder43.setServer(server50);
        retrofit.RestAdapter.Builder builder54 = builder39.setServer(server50);
        restAdapter38.server = server50;
        retrofit.client.Client.Provider provider56 = restAdapter38.clientProvider;
        retrofit.RestAdapter.Builder builder57 = builder0.setClient(provider56);
        retrofit.client.Client.Provider provider58 = builder57.clientProvider;
        retrofit.RestAdapter.Log log59 = builder57.log;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider61 = builder60.clientProvider;
        java.util.concurrent.Executor executor62 = null;
        builder60.callbackExecutor = executor62;
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.Server server67 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder68 = builder64.setServer(server67);
        java.lang.String str69 = server67.getUrl();
        retrofit.RestAdapter.Builder builder70 = builder60.setServer(server67);
        builder60.ensureSaneDefaults();
        retrofit.Server server72 = null;
        retrofit.client.Client.Provider provider73 = null;
        java.util.concurrent.Executor executor74 = null;
        java.util.concurrent.Executor executor75 = null;
        retrofit.RequestInterceptor requestInterceptor76 = null;
        retrofit.converter.Converter converter77 = null;
        retrofit.Profiler profiler78 = null;
        retrofit.ErrorHandler errorHandler79 = null;
        retrofit.RestAdapter.Log log80 = retrofit.RestAdapter.Log.NONE;
        log80.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel83 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter84 = new retrofit.RestAdapter(server72, provider73, executor74, executor75, requestInterceptor76, converter77, profiler78, errorHandler79, log80, logLevel83);
        retrofit.RestAdapter.RestHandler restHandler85 = restAdapter84.new RestHandler();
        retrofit.RestAdapter.Log log86 = retrofit.RestAdapter.Log.NONE;
        restAdapter84.log = log86;
        retrofit.RestAdapter.Builder builder88 = builder60.setLog(log86);
        retrofit.RestAdapter.Builder builder89 = builder57.setLog(log86);
        retrofit.RestAdapter.Builder builder90 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider91 = builder90.clientProvider;
        retrofit.RestAdapter.Builder builder93 = builder90.setServer("default");
        retrofit.RestAdapter.LogLevel logLevel94 = builder93.logLevel;
        retrofit.RestAdapter.Builder builder95 = builder89.setLogLevel(logLevel94);
        retrofit.RestAdapter.Builder builder97 = builder95.setServer("default");
        builder95.ensureSaneDefaults();
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(restAdapter38);
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNull(provider44);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(provider56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(provider58);
        org.junit.Assert.assertNotNull(log59);
        org.junit.Assert.assertNull(provider61);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(log80);
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNull(provider91);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertTrue("'" + logLevel94 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel94.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(builder97);
    }

    @Test
    public void test02672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02672");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.Profiler profiler3 = builder0.profiler;
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor5 = restAdapter4.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.Server server9 = new retrofit.Server("hi!", "hi!");
        restAdapter4.server = server9;
        retrofit.RestAdapter.Builder builder11 = builder0.setServer(server9);
        retrofit.RestAdapter restAdapter12 = builder11.build();
        java.util.concurrent.Executor executor13 = builder11.callbackExecutor;
        retrofit.RestAdapter.Log log14 = builder11.log;
        retrofit.Profiler profiler15 = null;
        builder11.profiler = profiler15;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(restAdapter12);
        org.junit.Assert.assertNotNull(executor13);
        org.junit.Assert.assertNotNull(log14);
    }

    @Test
    public void test02673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02673");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        restAdapter12.log = log14;
        retrofit.converter.Converter converter16 = null;
        restAdapter12.converter = converter16;
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter12.new RestHandler();
        retrofit.Profiler profiler19 = null;
        restAdapter12.profiler = profiler19;
        retrofit.Profiler profiler21 = null;
        restAdapter12.profiler = profiler21;
        retrofit.Server server23 = restAdapter12.server;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler25 = builder24.errorHandler;
        retrofit.Server server28 = new retrofit.Server("", "");
        builder24.server = server28;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor31 = restAdapter30.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler32 = restAdapter30.new RestHandler();
        retrofit.Server server35 = new retrofit.Server("hi!", "hi!");
        restAdapter30.server = server35;
        retrofit.RestAdapter.Builder builder37 = builder24.setServer(server35);
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler39 = builder38.errorHandler;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        builder38.requestInterceptor = requestInterceptor40;
        java.util.concurrent.Executor executor42 = null;
        builder38.httpExecutor = executor42;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler45 = null;
        builder44.errorHandler = errorHandler45;
        retrofit.ErrorHandler errorHandler47 = builder44.errorHandler;
        retrofit.RestAdapter.Builder builder49 = builder44.setServer("hi!");
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler51 = builder50.errorHandler;
        retrofit.ErrorHandler errorHandler52 = builder50.errorHandler;
        retrofit.Profiler profiler53 = builder50.profiler;
        retrofit.RestAdapter.Log log54 = builder50.log;
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.FULL;
        builder50.logLevel = logLevel55;
        retrofit.RestAdapter.Builder builder57 = builder49.setLogLevel(logLevel55);
        retrofit.RestAdapter.Builder builder58 = builder38.setLogLevel(logLevel55);
        builder37.logLevel = logLevel55;
        retrofit.RestAdapter.Log log60 = retrofit.RestAdapter.Log.NONE;
        log60.log("hi!");
        log60.log("hi!");
        log60.log("hi!");
        retrofit.RestAdapter.Builder builder67 = builder37.setLog(log60);
        restAdapter12.log = log60;
        retrofit.Profiler profiler69 = restAdapter12.profiler;
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNull(server23);
        org.junit.Assert.assertNull(errorHandler25);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNull(errorHandler47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(errorHandler51);
        org.junit.Assert.assertNull(errorHandler52);
        org.junit.Assert.assertNull(profiler53);
        org.junit.Assert.assertNull(log54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(log60);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNull(profiler69);
    }

    @Test
    public void test02674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02674");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput11);
        java.lang.String str13 = request12.getMethod();
        java.util.List<retrofit.client.Header> headerList14 = request12.getHeaders();
        java.util.List<retrofit.client.Header> headerList15 = request12.getHeaders();
        java.util.List<retrofit.client.Header> headerList16 = request12.getHeaders();
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("default", "default", headerList16, typedOutput17);
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertNotNull(headerList16);
    }

    @Test
    public void test02675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02675");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel21 = null;
        restAdapter0.logLevel = logLevel21;
        retrofit.RestAdapter.RestHandler restHandler23 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter0.logLevel;
        retrofit.RestAdapter.LogLevel logLevel25 = restAdapter0.logLevel;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor27 = restAdapter26.callbackExecutor;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor29 = restAdapter28.callbackExecutor;
        java.util.concurrent.Executor executor30 = restAdapter28.callbackExecutor;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler32 = restAdapter31.errorHandler;
        retrofit.Server server35 = new retrofit.Server("", "");
        restAdapter31.server = server35;
        restAdapter28.server = server35;
        restAdapter26.server = server35;
        retrofit.Profiler profiler39 = restAdapter26.profiler;
        retrofit.Profiler profiler40 = null;
        restAdapter26.profiler = profiler40;
        retrofit.RestAdapter.LogLevel logLevel42 = restAdapter26.logLevel;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler44 = builder43.errorHandler;
        retrofit.ErrorHandler errorHandler45 = builder43.errorHandler;
        retrofit.RestAdapter.Log log46 = null;
        builder43.log = log46;
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean49 = logLevel48.log();
        builder43.logLevel = logLevel48;
        retrofit.ErrorHandler errorHandler51 = builder43.errorHandler;
        retrofit.RestAdapter.Builder builder53 = builder43.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor54 = null;
        builder53.requestInterceptor = requestInterceptor54;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler57 = builder56.errorHandler;
        retrofit.client.Client.Provider provider58 = null;
        builder56.clientProvider = provider58;
        retrofit.Server server62 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder63 = builder56.setServer(server62);
        retrofit.client.Client.Provider provider64 = null;
        java.util.concurrent.Executor executor65 = null;
        java.util.concurrent.Executor executor66 = null;
        retrofit.RequestInterceptor requestInterceptor67 = null;
        retrofit.converter.Converter converter68 = null;
        retrofit.Profiler profiler69 = null;
        retrofit.ErrorHandler errorHandler70 = null;
        retrofit.Server server71 = null;
        retrofit.client.Client.Provider provider72 = null;
        java.util.concurrent.Executor executor73 = null;
        java.util.concurrent.Executor executor74 = null;
        retrofit.RequestInterceptor requestInterceptor75 = null;
        retrofit.converter.Converter converter76 = null;
        retrofit.Profiler profiler77 = null;
        retrofit.ErrorHandler errorHandler78 = null;
        retrofit.RestAdapter.Log log79 = retrofit.RestAdapter.Log.NONE;
        log79.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel82 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter83 = new retrofit.RestAdapter(server71, provider72, executor73, executor74, requestInterceptor75, converter76, profiler77, errorHandler78, log79, logLevel82);
        retrofit.RestAdapter.LogLevel logLevel84 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter85 = new retrofit.RestAdapter(server62, provider64, executor65, executor66, requestInterceptor67, converter68, profiler69, errorHandler70, log79, logLevel84);
        log79.log("");
        builder53.log = log79;
        retrofit.RestAdapter.Log log89 = builder53.log;
        restAdapter26.log = log89;
        retrofit.RestAdapter.RestHandler restHandler91 = restAdapter26.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler92 = restAdapter26.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler93 = restAdapter26.new RestHandler();
        retrofit.RestAdapter.Log log94 = restAdapter26.log;
        restAdapter0.log = log94;
        retrofit.RestAdapter.RestHandler restHandler96 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(logLevel24);
        org.junit.Assert.assertNull(logLevel25);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNull(errorHandler32);
        org.junit.Assert.assertNull(profiler39);
        org.junit.Assert.assertNull(logLevel42);
        org.junit.Assert.assertNull(errorHandler44);
        org.junit.Assert.assertNull(errorHandler45);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(errorHandler51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(errorHandler57);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(log79);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel84 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel84.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log89);
        org.junit.Assert.assertNotNull(log94);
    }

    @Test
    public void test02676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02676");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter0.getLogLevel();
        retrofit.client.Client.Provider provider20 = null;
        restAdapter0.clientProvider = provider20;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean23 = logLevel22.log();
        restAdapter0.logLevel = logLevel22;
        retrofit.RestAdapter.Log log25 = restAdapter0.log;
        retrofit.Profiler profiler26 = restAdapter0.profiler;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler28 = builder27.errorHandler;
        retrofit.Server server31 = new retrofit.Server("", "");
        builder27.server = server31;
        java.util.concurrent.Executor executor33 = builder27.callbackExecutor;
        retrofit.Server server34 = null;
        builder27.server = server34;
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.NONE;
        builder27.logLevel = logLevel36;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor39 = restAdapter38.callbackExecutor;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor41 = restAdapter40.callbackExecutor;
        java.util.concurrent.Executor executor42 = restAdapter40.callbackExecutor;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler44 = restAdapter43.errorHandler;
        retrofit.Server server47 = new retrofit.Server("", "");
        restAdapter43.server = server47;
        restAdapter40.server = server47;
        restAdapter38.server = server47;
        retrofit.Profiler profiler51 = restAdapter38.profiler;
        retrofit.ErrorHandler errorHandler52 = null;
        restAdapter38.errorHandler = errorHandler52;
        retrofit.Profiler profiler54 = null;
        restAdapter38.profiler = profiler54;
        retrofit.RestAdapter.LogLevel logLevel56 = restAdapter38.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel57 = restAdapter38.getLogLevel();
        retrofit.ErrorHandler errorHandler58 = null;
        restAdapter38.errorHandler = errorHandler58;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler61 = builder60.errorHandler;
        retrofit.client.Client.Provider provider62 = null;
        builder60.clientProvider = provider62;
        retrofit.Server server66 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder67 = builder60.setServer(server66);
        retrofit.converter.Converter converter68 = null;
        builder67.converter = converter68;
        retrofit.RestAdapter restAdapter70 = builder67.build();
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler72 = builder71.errorHandler;
        java.util.concurrent.Executor executor73 = null;
        builder71.callbackExecutor = executor73;
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider76 = builder75.clientProvider;
        java.util.concurrent.Executor executor77 = null;
        builder75.callbackExecutor = executor77;
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        retrofit.Server server82 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder83 = builder79.setServer(server82);
        java.lang.String str84 = server82.getUrl();
        retrofit.RestAdapter.Builder builder85 = builder75.setServer(server82);
        retrofit.RestAdapter.Builder builder86 = builder71.setServer(server82);
        restAdapter70.server = server82;
        retrofit.client.Client.Provider provider88 = restAdapter70.clientProvider;
        restAdapter38.clientProvider = provider88;
        builder27.clientProvider = provider88;
        restAdapter0.clientProvider = provider88;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(log25);
        org.junit.Assert.assertNull(profiler26);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNull(executor41);
        org.junit.Assert.assertNull(executor42);
        org.junit.Assert.assertNull(errorHandler44);
        org.junit.Assert.assertNull(profiler51);
        org.junit.Assert.assertNull(logLevel56);
        org.junit.Assert.assertNull(logLevel57);
        org.junit.Assert.assertNull(errorHandler61);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(restAdapter70);
        org.junit.Assert.assertNull(errorHandler72);
        org.junit.Assert.assertNull(provider76);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "hi!" + "'", str84, "hi!");
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(provider88);
    }

    @Test
    public void test02677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02677");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter0.getLogLevel();
        retrofit.ErrorHandler errorHandler20 = null;
        restAdapter0.errorHandler = errorHandler20;
        retrofit.client.Client.Provider provider22 = null;
        restAdapter0.clientProvider = provider22;
        retrofit.converter.Converter converter24 = restAdapter0.converter;
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter0.new RestHandler();
        retrofit.client.Response response27 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response29 = restAdapter0.logAndReplaceResponse("", response27, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(converter24);
    }

    @Test
    public void test02678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02678");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server6 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder7 = builder0.setServer(server6);
        retrofit.converter.Converter converter8 = null;
        builder7.converter = converter8;
        retrofit.RestAdapter restAdapter10 = builder7.build();
        retrofit.Profiler profiler11 = builder7.profiler;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler13 = builder12.errorHandler;
        retrofit.ErrorHandler errorHandler14 = builder12.errorHandler;
        retrofit.Profiler profiler15 = builder12.profiler;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor17 = restAdapter16.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter16.new RestHandler();
        retrofit.Server server21 = new retrofit.Server("hi!", "hi!");
        restAdapter16.server = server21;
        retrofit.RestAdapter.Builder builder23 = builder12.setServer(server21);
        retrofit.converter.Converter converter24 = null;
        builder23.converter = converter24;
        builder23.ensureSaneDefaults();
        retrofit.RestAdapter.Log log27 = null;
        builder23.log = log27;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler30 = builder29.errorHandler;
        retrofit.ErrorHandler errorHandler31 = builder29.errorHandler;
        retrofit.RestAdapter.Log log32 = null;
        builder29.log = log32;
        retrofit.Server server36 = new retrofit.Server("hi!", "hi!");
        builder29.server = server36;
        retrofit.client.Client.Provider provider38 = null;
        builder29.clientProvider = provider38;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor41 = restAdapter40.callbackExecutor;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor43 = restAdapter42.callbackExecutor;
        java.util.concurrent.Executor executor44 = restAdapter42.callbackExecutor;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler46 = restAdapter45.errorHandler;
        retrofit.Server server49 = new retrofit.Server("", "");
        restAdapter45.server = server49;
        restAdapter42.server = server49;
        restAdapter40.server = server49;
        retrofit.Profiler profiler53 = restAdapter40.profiler;
        retrofit.ErrorHandler errorHandler54 = null;
        restAdapter40.errorHandler = errorHandler54;
        retrofit.RequestInterceptor requestInterceptor56 = restAdapter40.requestInterceptor;
        retrofit.RestAdapter.RestHandler restHandler57 = restAdapter40.new RestHandler();
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler59 = builder58.errorHandler;
        retrofit.client.Client.Provider provider60 = null;
        builder58.clientProvider = provider60;
        retrofit.Server server64 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder65 = builder58.setServer(server64);
        retrofit.converter.Converter converter66 = null;
        builder65.converter = converter66;
        retrofit.RestAdapter restAdapter68 = builder65.build();
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler70 = builder69.errorHandler;
        java.util.concurrent.Executor executor71 = null;
        builder69.callbackExecutor = executor71;
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider74 = builder73.clientProvider;
        java.util.concurrent.Executor executor75 = null;
        builder73.callbackExecutor = executor75;
        retrofit.RestAdapter.Builder builder77 = new retrofit.RestAdapter.Builder();
        retrofit.Server server80 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder81 = builder77.setServer(server80);
        java.lang.String str82 = server80.getUrl();
        retrofit.RestAdapter.Builder builder83 = builder73.setServer(server80);
        retrofit.RestAdapter.Builder builder84 = builder69.setServer(server80);
        restAdapter68.server = server80;
        java.util.concurrent.Executor executor86 = restAdapter68.httpExecutor;
        restAdapter40.httpExecutor = executor86;
        builder29.httpExecutor = executor86;
        builder23.callbackExecutor = executor86;
        retrofit.RestAdapter.Log log90 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder91 = builder23.setLog(log90);
        retrofit.RestAdapter.Builder builder92 = builder7.setLog(log90);
        log90.log("");
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(restAdapter10);
        org.junit.Assert.assertNull(profiler11);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(errorHandler30);
        org.junit.Assert.assertNull(errorHandler31);
        org.junit.Assert.assertNull(executor41);
        org.junit.Assert.assertNull(executor43);
        org.junit.Assert.assertNull(executor44);
        org.junit.Assert.assertNull(errorHandler46);
        org.junit.Assert.assertNull(profiler53);
        org.junit.Assert.assertNull(requestInterceptor56);
        org.junit.Assert.assertNull(errorHandler59);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(restAdapter68);
        org.junit.Assert.assertNull(errorHandler70);
        org.junit.Assert.assertNull(provider74);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "hi!" + "'", str82, "hi!");
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(executor86);
        org.junit.Assert.assertNotNull(log90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder92);
    }

    @Test
    public void test02679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02679");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server4 = new retrofit.Server("", "");
        builder0.server = server4;
        retrofit.client.Client.Provider provider6 = null;
        java.util.concurrent.Executor executor7 = null;
        java.util.concurrent.Executor executor8 = null;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        retrofit.converter.Converter converter10 = null;
        retrofit.Profiler profiler11 = null;
        retrofit.ErrorHandler errorHandler12 = null;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler14 = builder13.errorHandler;
        retrofit.Server server17 = new retrofit.Server("", "");
        builder13.server = server17;
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        builder13.log = log19;
        retrofit.Server server21 = null;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        log29.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel32);
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server4, provider6, executor7, executor8, requestInterceptor9, converter10, profiler11, errorHandler12, log19, logLevel32);
        retrofit.RequestInterceptor requestInterceptor35 = null;
        restAdapter34.requestInterceptor = requestInterceptor35;
        retrofit.RestAdapter.RestHandler restHandler37 = restAdapter34.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler38 = restAdapter34.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler39 = restAdapter34.new RestHandler();
        retrofit.Profiler profiler40 = null;
        restAdapter34.profiler = profiler40;
        retrofit.Profiler profiler42 = restAdapter34.profiler;
        retrofit.ErrorHandler errorHandler43 = restAdapter34.errorHandler;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler42);
        org.junit.Assert.assertNull(errorHandler43);
    }

    @Test
    public void test02680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02680");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.client.Header[] headerArray22 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList23 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList23, headerArray22);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList23, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList23, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList23, typedOutput29);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList23, typedOutput31);
        retrofit.mime.TypedOutput typedOutput33 = request32.getBody();
        retrofit.client.Request request34 = restAdapter12.logAndReplaceRequest(request32);
        retrofit.RestAdapter.RestHandler restHandler35 = restAdapter12.new RestHandler();
        retrofit.client.Client.Provider provider36 = restAdapter12.clientProvider;
        java.util.concurrent.Executor executor37 = restAdapter12.callbackExecutor;
        java.lang.Throwable throwable38 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter12.logException(throwable38, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(typedOutput33);
        org.junit.Assert.assertNotNull(request34);
        org.junit.Assert.assertNull(provider36);
        org.junit.Assert.assertNull(executor37);
    }

    @Test
    public void test02681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02681");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        restAdapter5.log = log15;
        retrofit.RestAdapter.Builder builder17 = builder4.setLog(log15);
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server21 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder22 = builder18.setServer(server21);
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor24 = restAdapter23.callbackExecutor;
        java.util.concurrent.Executor executor25 = restAdapter23.callbackExecutor;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler27 = restAdapter26.errorHandler;
        retrofit.Server server30 = new retrofit.Server("", "");
        restAdapter26.server = server30;
        restAdapter23.server = server30;
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        restAdapter23.log = log33;
        retrofit.RestAdapter.Builder builder35 = builder22.setLog(log33);
        retrofit.converter.Converter converter36 = null;
        builder35.converter = converter36;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler39 = builder38.errorHandler;
        retrofit.ErrorHandler errorHandler40 = builder38.errorHandler;
        retrofit.Profiler profiler41 = builder38.profiler;
        retrofit.RestAdapter.Log log42 = builder38.log;
        retrofit.Server server43 = null;
        retrofit.client.Client.Provider provider44 = null;
        java.util.concurrent.Executor executor45 = null;
        java.util.concurrent.Executor executor46 = null;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        retrofit.converter.Converter converter48 = null;
        retrofit.Profiler profiler49 = null;
        retrofit.ErrorHandler errorHandler50 = null;
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        log51.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter(server43, provider44, executor45, executor46, requestInterceptor47, converter48, profiler49, errorHandler50, log51, logLevel54);
        builder38.log = log51;
        retrofit.RestAdapter.Builder builder57 = builder35.setLog(log51);
        retrofit.RestAdapter.LogLevel logLevel58 = builder35.logLevel;
        retrofit.RestAdapter.Builder builder59 = builder17.setLogLevel(logLevel58);
        retrofit.ErrorHandler errorHandler60 = builder59.errorHandler;
        retrofit.client.Client client61 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder62 = builder59.setClient(client61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNull(profiler41);
        org.junit.Assert.assertNull(log42);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(errorHandler60);
    }

    @Test
    public void test02682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02682");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        java.util.concurrent.Executor executor3 = builder0.callbackExecutor;
        java.util.concurrent.Executor executor4 = null;
        builder0.callbackExecutor = executor4;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler7 = builder6.errorHandler;
        java.util.concurrent.Executor executor8 = builder6.callbackExecutor;
        retrofit.RestAdapter.Builder builder10 = builder6.setServer("hi!");
        builder10.ensureSaneDefaults();
        java.util.concurrent.Executor executor12 = builder10.callbackExecutor;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler14 = builder13.errorHandler;
        retrofit.Server server17 = new retrofit.Server("", "");
        builder13.server = server17;
        retrofit.client.Client.Provider provider19 = builder13.clientProvider;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler22 = builder21.errorHandler;
        retrofit.client.Client.Provider provider23 = null;
        builder21.clientProvider = provider23;
        retrofit.Server server27 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder28 = builder21.setServer(server27);
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler30 = builder29.errorHandler;
        retrofit.client.Client.Provider provider31 = null;
        builder29.clientProvider = provider31;
        retrofit.converter.Converter converter33 = builder29.converter;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder35 = builder29.setLogLevel(logLevel34);
        builder21.logLevel = logLevel34;
        builder20.logLevel = logLevel34;
        retrofit.RestAdapter.Builder builder38 = builder13.setLogLevel(logLevel34);
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor40 = restAdapter39.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler41 = restAdapter39.new RestHandler();
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor43 = restAdapter42.callbackExecutor;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor45 = restAdapter44.callbackExecutor;
        java.util.concurrent.Executor executor46 = restAdapter44.callbackExecutor;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler48 = restAdapter47.errorHandler;
        retrofit.Server server51 = new retrofit.Server("", "");
        restAdapter47.server = server51;
        restAdapter44.server = server51;
        restAdapter42.server = server51;
        retrofit.Profiler profiler55 = restAdapter42.profiler;
        retrofit.ErrorHandler errorHandler56 = null;
        restAdapter42.errorHandler = errorHandler56;
        retrofit.Profiler profiler58 = null;
        restAdapter42.profiler = profiler58;
        retrofit.RestAdapter.LogLevel logLevel60 = restAdapter42.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel61 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter42.logLevel = logLevel61;
        restAdapter39.logLevel = logLevel61;
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.Server server67 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder68 = builder64.setServer(server67);
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor70 = restAdapter69.callbackExecutor;
        java.util.concurrent.Executor executor71 = restAdapter69.callbackExecutor;
        retrofit.RestAdapter restAdapter72 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler73 = restAdapter72.errorHandler;
        retrofit.Server server76 = new retrofit.Server("", "");
        restAdapter72.server = server76;
        restAdapter69.server = server76;
        retrofit.RestAdapter.Log log79 = retrofit.RestAdapter.Log.NONE;
        restAdapter69.log = log79;
        retrofit.RestAdapter.Builder builder81 = builder68.setLog(log79);
        retrofit.RestAdapter.LogLevel logLevel82 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder83 = builder68.setLogLevel(logLevel82);
        retrofit.Profiler profiler84 = null;
        builder83.profiler = profiler84;
        retrofit.converter.Converter converter86 = null;
        builder83.converter = converter86;
        retrofit.ErrorHandler errorHandler88 = null;
        builder83.errorHandler = errorHandler88;
        retrofit.RestAdapter restAdapter90 = builder83.build();
        retrofit.ErrorHandler errorHandler91 = builder83.errorHandler;
        restAdapter39.errorHandler = errorHandler91;
        builder38.errorHandler = errorHandler91;
        retrofit.RestAdapter.Builder builder94 = builder10.setErrorHandler(errorHandler91);
        builder0.errorHandler = errorHandler91;
        retrofit.client.Client.Provider provider96 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder97 = builder0.setClient(provider96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(executor12);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(provider19);
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(errorHandler30);
        org.junit.Assert.assertNull(converter33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(executor40);
        org.junit.Assert.assertNull(executor43);
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertNull(executor46);
        org.junit.Assert.assertNull(errorHandler48);
        org.junit.Assert.assertNull(profiler55);
        org.junit.Assert.assertNull(logLevel60);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNull(executor70);
        org.junit.Assert.assertNull(executor71);
        org.junit.Assert.assertNull(errorHandler73);
        org.junit.Assert.assertNotNull(log79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(restAdapter90);
        org.junit.Assert.assertNotNull(errorHandler91);
        org.junit.Assert.assertNotNull(builder94);
    }

    @Test
    public void test02683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02683");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.client.Client.Provider provider14 = restAdapter12.clientProvider;
        retrofit.RestAdapter.Log log15 = restAdapter12.log;
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter12.getLogLevel();
        java.util.concurrent.Executor executor17 = restAdapter12.httpExecutor;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass18 = executor17.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor17);
    }

    @Test
    public void test02684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02684");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput11);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "default", (java.util.List<retrofit.client.Header>) headerList7, typedOutput13);
        java.util.List<retrofit.client.Header> headerList15 = request14.getHeaders();
        retrofit.mime.TypedOutput typedOutput16 = request14.getBody();
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertNull(typedOutput16);
    }

    @Test
    public void test02685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02685");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter0.getLogLevel();
        retrofit.ErrorHandler errorHandler20 = null;
        restAdapter0.errorHandler = errorHandler20;
        retrofit.RestAdapter.Log log22 = restAdapter0.log;
        retrofit.RequestInterceptor requestInterceptor23 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter0.logLevel;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(log22);
        org.junit.Assert.assertNull(requestInterceptor23);
        org.junit.Assert.assertNull(logLevel24);
    }

    @Test
    public void test02686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02686");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        log12.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel15);
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter16.new RestHandler();
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        restAdapter16.log = log18;
        builder0.log = log18;
        retrofit.converter.Converter converter21 = builder0.converter;
        retrofit.RestAdapter.LogLevel logLevel22 = builder0.logLevel;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider24 = builder23.clientProvider;
        java.util.concurrent.Executor executor25 = null;
        builder23.callbackExecutor = executor25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.Server server30 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder31 = builder27.setServer(server30);
        java.lang.String str32 = server30.getUrl();
        retrofit.RestAdapter.Builder builder33 = builder23.setServer(server30);
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider35 = builder34.clientProvider;
        java.util.concurrent.Executor executor36 = null;
        builder34.callbackExecutor = executor36;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.Server server41 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder42 = builder38.setServer(server41);
        java.lang.String str43 = server41.getUrl();
        retrofit.RestAdapter.Builder builder44 = builder34.setServer(server41);
        builder34.ensureSaneDefaults();
        retrofit.Server server46 = null;
        retrofit.client.Client.Provider provider47 = null;
        java.util.concurrent.Executor executor48 = null;
        java.util.concurrent.Executor executor49 = null;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        retrofit.converter.Converter converter51 = null;
        retrofit.Profiler profiler52 = null;
        retrofit.ErrorHandler errorHandler53 = null;
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        log54.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter(server46, provider47, executor48, executor49, requestInterceptor50, converter51, profiler52, errorHandler53, log54, logLevel57);
        retrofit.RestAdapter.RestHandler restHandler59 = restAdapter58.new RestHandler();
        retrofit.RestAdapter.Log log60 = retrofit.RestAdapter.Log.NONE;
        restAdapter58.log = log60;
        retrofit.RestAdapter.Builder builder62 = builder34.setLog(log60);
        retrofit.RestAdapter.Builder builder64 = builder34.setServer("hi!");
        retrofit.RestAdapter restAdapter65 = builder34.build();
        retrofit.RestAdapter.RestHandler restHandler66 = restAdapter65.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel67 = restAdapter65.logLevel;
        java.util.concurrent.Executor executor68 = restAdapter65.callbackExecutor;
        retrofit.Server server71 = new retrofit.Server("hi!", "hi!");
        restAdapter65.server = server71;
        retrofit.RestAdapter.Builder builder73 = builder23.setServer(server71);
        builder0.server = server71;
        retrofit.Profiler profiler75 = builder0.profiler;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log18);
        org.junit.Assert.assertNull(converter21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(provider24);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(provider35);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(restAdapter65);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(executor68);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNull(profiler75);
    }

    @Test
    public void test02687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02687");
        retrofit.client.Header[] headerArray16 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList17 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList17, headerArray16);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList17, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList17, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList17, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList17, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList17, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList17, typedOutput29);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("", "default", (java.util.List<retrofit.client.Header>) headerList17, typedOutput31);
        retrofit.mime.TypedOutput typedOutput33 = null;
        retrofit.client.Request request34 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList17, typedOutput33);
        retrofit.mime.TypedOutput typedOutput35 = request34.getBody();
        org.junit.Assert.assertNotNull(headerArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(typedOutput35);
    }

    @Test
    public void test02688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02688");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler6 = builder5.errorHandler;
        retrofit.client.Client.Provider provider7 = null;
        builder5.clientProvider = provider7;
        retrofit.Server server11 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder12 = builder5.setServer(server11);
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        log28.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log28, logLevel31);
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server11, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log28, logLevel33);
        builder0.logLevel = logLevel33;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.Server server39 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder40 = builder36.setServer(server39);
        retrofit.converter.Converter converter41 = builder36.converter;
        retrofit.RequestInterceptor requestInterceptor42 = builder36.requestInterceptor;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider44 = builder43.clientProvider;
        java.util.concurrent.Executor executor45 = null;
        builder43.callbackExecutor = executor45;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.Server server50 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder51 = builder47.setServer(server50);
        java.lang.String str52 = server50.getUrl();
        retrofit.RestAdapter.Builder builder53 = builder43.setServer(server50);
        builder43.ensureSaneDefaults();
        retrofit.Server server55 = null;
        retrofit.client.Client.Provider provider56 = null;
        java.util.concurrent.Executor executor57 = null;
        java.util.concurrent.Executor executor58 = null;
        retrofit.RequestInterceptor requestInterceptor59 = null;
        retrofit.converter.Converter converter60 = null;
        retrofit.Profiler profiler61 = null;
        retrofit.ErrorHandler errorHandler62 = null;
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        log63.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel66 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter(server55, provider56, executor57, executor58, requestInterceptor59, converter60, profiler61, errorHandler62, log63, logLevel66);
        retrofit.RestAdapter.RestHandler restHandler68 = restAdapter67.new RestHandler();
        retrofit.RestAdapter.Log log69 = retrofit.RestAdapter.Log.NONE;
        restAdapter67.log = log69;
        retrofit.RestAdapter.Builder builder71 = builder43.setLog(log69);
        retrofit.RestAdapter.Builder builder73 = builder43.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor74 = builder43.requestInterceptor;
        builder36.requestInterceptor = requestInterceptor74;
        retrofit.RestAdapter.Builder builder76 = builder0.setRequestInterceptor(requestInterceptor74);
        retrofit.ErrorHandler errorHandler77 = builder0.errorHandler;
        java.util.concurrent.Executor executor78 = builder0.callbackExecutor;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(converter41);
        org.junit.Assert.assertNull(requestInterceptor42);
        org.junit.Assert.assertNull(provider44);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(requestInterceptor74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNull(errorHandler77);
        org.junit.Assert.assertNull(executor78);
    }

    @Test
    public void test02689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02689");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.Profiler profiler3 = builder0.profiler;
        retrofit.RestAdapter.Log log4 = builder0.log;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.FULL;
        builder0.logLevel = logLevel5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.Server server10 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder11 = builder7.setServer(server10);
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor13 = restAdapter12.callbackExecutor;
        java.util.concurrent.Executor executor14 = restAdapter12.callbackExecutor;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler16 = restAdapter15.errorHandler;
        retrofit.Server server19 = new retrofit.Server("", "");
        restAdapter15.server = server19;
        restAdapter12.server = server19;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        restAdapter12.log = log22;
        retrofit.RestAdapter.Builder builder24 = builder11.setLog(log22);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder26 = builder11.setLogLevel(logLevel25);
        retrofit.Profiler profiler27 = null;
        builder26.profiler = profiler27;
        retrofit.converter.Converter converter29 = null;
        builder26.converter = converter29;
        retrofit.ErrorHandler errorHandler31 = null;
        builder26.errorHandler = errorHandler31;
        retrofit.RestAdapter restAdapter33 = builder26.build();
        retrofit.ErrorHandler errorHandler34 = builder26.errorHandler;
        retrofit.RestAdapter.Builder builder35 = builder0.setErrorHandler(errorHandler34);
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler37 = builder36.errorHandler;
        retrofit.client.Client.Provider provider38 = null;
        builder36.clientProvider = provider38;
        retrofit.Server server42 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder43 = builder36.setServer(server42);
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler45 = builder44.errorHandler;
        retrofit.client.Client.Provider provider46 = null;
        builder44.clientProvider = provider46;
        retrofit.converter.Converter converter48 = builder44.converter;
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder50 = builder44.setLogLevel(logLevel49);
        builder36.logLevel = logLevel49;
        boolean boolean52 = logLevel49.log();
        builder0.logLevel = logLevel49;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler55 = builder54.errorHandler;
        retrofit.ErrorHandler errorHandler56 = builder54.errorHandler;
        retrofit.converter.Converter converter57 = null;
        builder54.converter = converter57;
        retrofit.RequestInterceptor requestInterceptor59 = null;
        builder54.requestInterceptor = requestInterceptor59;
        retrofit.client.Client.Provider provider61 = builder54.clientProvider;
        builder54.ensureSaneDefaults();
        retrofit.client.Client.Provider provider63 = builder54.clientProvider;
        builder0.clientProvider = provider63;
        retrofit.Profiler profiler65 = null;
        builder0.profiler = profiler65;
        retrofit.converter.Converter converter67 = builder0.converter;
        retrofit.Profiler profiler68 = null;
        builder0.profiler = profiler68;
        retrofit.ErrorHandler errorHandler70 = builder0.errorHandler;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter71 = builder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(restAdapter33);
        org.junit.Assert.assertNotNull(errorHandler34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(errorHandler45);
        org.junit.Assert.assertNull(converter48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(errorHandler55);
        org.junit.Assert.assertNull(errorHandler56);
        org.junit.Assert.assertNull(provider61);
        org.junit.Assert.assertNotNull(provider63);
        org.junit.Assert.assertNull(converter67);
        org.junit.Assert.assertNotNull(errorHandler70);
    }

    @Test
    public void test02690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02690");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.ErrorHandler errorHandler5 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler7 = builder6.errorHandler;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.Server server11 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder12 = builder8.setServer(server11);
        retrofit.RestAdapter.LogLevel logLevel13 = builder12.logLevel;
        java.util.concurrent.Executor executor14 = builder12.httpExecutor;
        retrofit.RestAdapter restAdapter15 = builder12.build();
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor17 = restAdapter16.callbackExecutor;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor19 = restAdapter18.callbackExecutor;
        java.util.concurrent.Executor executor20 = restAdapter18.callbackExecutor;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler22 = restAdapter21.errorHandler;
        retrofit.Server server25 = new retrofit.Server("", "");
        restAdapter21.server = server25;
        restAdapter18.server = server25;
        restAdapter16.server = server25;
        retrofit.Profiler profiler29 = restAdapter16.profiler;
        retrofit.ErrorHandler errorHandler30 = null;
        restAdapter16.errorHandler = errorHandler30;
        retrofit.Profiler profiler32 = null;
        restAdapter16.profiler = profiler32;
        retrofit.RestAdapter.LogLevel logLevel34 = restAdapter16.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter16.logLevel = logLevel35;
        retrofit.RestAdapter.RestHandler restHandler37 = restAdapter16.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor38 = null;
        restAdapter16.requestInterceptor = requestInterceptor38;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler41 = builder40.errorHandler;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        builder40.requestInterceptor = requestInterceptor42;
        retrofit.Server server44 = null;
        retrofit.client.Client.Provider provider45 = null;
        java.util.concurrent.Executor executor46 = null;
        java.util.concurrent.Executor executor47 = null;
        retrofit.RequestInterceptor requestInterceptor48 = null;
        retrofit.converter.Converter converter49 = null;
        retrofit.Profiler profiler50 = null;
        retrofit.ErrorHandler errorHandler51 = null;
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        log52.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter(server44, provider45, executor46, executor47, requestInterceptor48, converter49, profiler50, errorHandler51, log52, logLevel55);
        builder40.log = log52;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler59 = builder58.errorHandler;
        retrofit.client.Client.Provider provider60 = null;
        builder58.clientProvider = provider60;
        retrofit.Server server64 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder65 = builder58.setServer(server64);
        retrofit.converter.Converter converter66 = null;
        builder65.converter = converter66;
        retrofit.RestAdapter restAdapter68 = builder65.build();
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler70 = builder69.errorHandler;
        java.util.concurrent.Executor executor71 = null;
        builder69.callbackExecutor = executor71;
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider74 = builder73.clientProvider;
        java.util.concurrent.Executor executor75 = null;
        builder73.callbackExecutor = executor75;
        retrofit.RestAdapter.Builder builder77 = new retrofit.RestAdapter.Builder();
        retrofit.Server server80 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder81 = builder77.setServer(server80);
        java.lang.String str82 = server80.getUrl();
        retrofit.RestAdapter.Builder builder83 = builder73.setServer(server80);
        retrofit.RestAdapter.Builder builder84 = builder69.setServer(server80);
        restAdapter68.server = server80;
        retrofit.client.Client.Provider provider86 = restAdapter68.clientProvider;
        builder40.clientProvider = provider86;
        restAdapter16.clientProvider = provider86;
        retrofit.RestAdapter.Builder builder89 = builder12.setClient(provider86);
        retrofit.Profiler profiler90 = builder12.profiler;
        retrofit.converter.Converter converter91 = builder12.converter;
        retrofit.RestAdapter.Builder builder92 = builder6.setConverter(converter91);
        retrofit.RestAdapter.Builder builder93 = builder0.setConverter(converter91);
        retrofit.client.Client.Provider provider94 = builder0.clientProvider;
        retrofit.client.Client.Provider provider95 = builder0.clientProvider;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(errorHandler5);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNotNull(restAdapter15);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNull(profiler29);
        org.junit.Assert.assertNull(logLevel34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler41);
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler59);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(restAdapter68);
        org.junit.Assert.assertNull(errorHandler70);
        org.junit.Assert.assertNull(provider74);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "hi!" + "'", str82, "hi!");
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(provider86);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNull(profiler90);
        org.junit.Assert.assertNotNull(converter91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNull(provider94);
        org.junit.Assert.assertNull(provider95);
    }

    @Test
    public void test02691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02691");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.client.Client.Provider provider2 = restAdapter0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor4 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(provider2);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNull(executor4);
    }

    @Test
    public void test02692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02692");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean3 = logLevel2.log();
        restAdapter0.logLevel = logLevel2;
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel6 = restAdapter0.logLevel;
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        log15.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel18);
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter19.new RestHandler();
        java.util.concurrent.Executor executor21 = null;
        restAdapter19.callbackExecutor = executor21;
        retrofit.client.Header[] headerArray25 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList26 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList26, headerArray25);
        retrofit.mime.TypedOutput typedOutput28 = null;
        retrofit.client.Request request29 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList26, typedOutput28);
        retrofit.client.Request request30 = restAdapter19.logAndReplaceRequest(request29);
        retrofit.client.Client.Provider provider31 = restAdapter19.clientProvider;
        retrofit.RestAdapter.RestHandler restHandler32 = restAdapter19.new RestHandler();
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler34 = builder33.errorHandler;
        java.util.concurrent.Executor executor35 = builder33.callbackExecutor;
        retrofit.RestAdapter.Builder builder37 = builder33.setServer("hi!");
        retrofit.Server server40 = new retrofit.Server("default", "hi!");
        java.lang.String str41 = server40.getUrl();
        retrofit.RestAdapter.Builder builder42 = builder37.setServer(server40);
        retrofit.RestAdapter.LogLevel logLevel43 = builder42.logLevel;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.Server server47 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder48 = builder44.setServer(server47);
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor50 = restAdapter49.callbackExecutor;
        java.util.concurrent.Executor executor51 = restAdapter49.callbackExecutor;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler53 = restAdapter52.errorHandler;
        retrofit.Server server56 = new retrofit.Server("", "");
        restAdapter52.server = server56;
        restAdapter49.server = server56;
        retrofit.RestAdapter.Log log59 = retrofit.RestAdapter.Log.NONE;
        restAdapter49.log = log59;
        retrofit.RestAdapter.Builder builder61 = builder48.setLog(log59);
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder63 = builder48.setLogLevel(logLevel62);
        retrofit.Profiler profiler64 = null;
        builder63.profiler = profiler64;
        retrofit.converter.Converter converter66 = null;
        builder63.converter = converter66;
        retrofit.ErrorHandler errorHandler68 = null;
        builder63.errorHandler = errorHandler68;
        retrofit.RestAdapter restAdapter70 = builder63.build();
        retrofit.ErrorHandler errorHandler71 = builder63.errorHandler;
        builder42.errorHandler = errorHandler71;
        restAdapter19.errorHandler = errorHandler71;
        restAdapter0.errorHandler = errorHandler71;
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler76 = null;
        builder75.errorHandler = errorHandler76;
        retrofit.RestAdapter restAdapter78 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler79 = restAdapter78.new RestHandler();
        java.util.concurrent.Executor executor80 = null;
        restAdapter78.httpExecutor = executor80;
        retrofit.RestAdapter.Builder builder82 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler83 = builder82.errorHandler;
        retrofit.ErrorHandler errorHandler84 = builder82.errorHandler;
        retrofit.converter.Converter converter85 = null;
        builder82.converter = converter85;
        retrofit.RequestInterceptor requestInterceptor87 = null;
        builder82.requestInterceptor = requestInterceptor87;
        retrofit.client.Client.Provider provider89 = builder82.clientProvider;
        builder82.ensureSaneDefaults();
        retrofit.client.Client.Provider provider91 = builder82.clientProvider;
        restAdapter78.clientProvider = provider91;
        builder75.clientProvider = provider91;
        restAdapter0.clientProvider = provider91;
        retrofit.RestAdapter.RestHandler restHandler95 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(request30);
        org.junit.Assert.assertNull(provider31);
        org.junit.Assert.assertNull(errorHandler34);
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "default" + "'", str41, "default");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(executor50);
        org.junit.Assert.assertNull(executor51);
        org.junit.Assert.assertNull(errorHandler53);
        org.junit.Assert.assertNotNull(log59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(restAdapter70);
        org.junit.Assert.assertNotNull(errorHandler71);
        org.junit.Assert.assertNull(errorHandler83);
        org.junit.Assert.assertNull(errorHandler84);
        org.junit.Assert.assertNull(provider89);
        org.junit.Assert.assertNotNull(provider91);
    }

    @Test
    public void test02693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02693");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter restAdapter1 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor2 = restAdapter1.callbackExecutor;
        java.util.concurrent.Executor executor3 = restAdapter1.callbackExecutor;
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler5 = restAdapter4.errorHandler;
        retrofit.Server server8 = new retrofit.Server("", "");
        restAdapter4.server = server8;
        restAdapter1.server = server8;
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler12 = restAdapter11.errorHandler;
        retrofit.Server server15 = new retrofit.Server("", "");
        restAdapter11.server = server15;
        restAdapter1.server = server15;
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider26 = builder25.clientProvider;
        java.util.concurrent.Executor executor27 = null;
        builder25.callbackExecutor = executor27;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.Server server32 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder33 = builder29.setServer(server32);
        java.lang.String str34 = server32.getUrl();
        retrofit.RestAdapter.Builder builder35 = builder25.setServer(server32);
        builder25.ensureSaneDefaults();
        retrofit.Server server37 = null;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        log45.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log45, logLevel48);
        retrofit.RestAdapter.RestHandler restHandler50 = restAdapter49.new RestHandler();
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        restAdapter49.log = log51;
        retrofit.RestAdapter.Builder builder53 = builder25.setLog(log51);
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler55 = builder54.errorHandler;
        retrofit.ErrorHandler errorHandler56 = builder54.errorHandler;
        retrofit.RestAdapter.Log log57 = null;
        builder54.log = log57;
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean60 = logLevel59.log();
        builder54.logLevel = logLevel59;
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter(server15, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log51, logLevel59);
        restAdapter0.log = log51;
        retrofit.RestAdapter.Log log64 = null;
        restAdapter0.log = log64;
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider67 = builder66.clientProvider;
        java.util.concurrent.Executor executor68 = null;
        builder66.callbackExecutor = executor68;
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        retrofit.Server server73 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder74 = builder70.setServer(server73);
        java.lang.String str75 = server73.getUrl();
        retrofit.RestAdapter.Builder builder76 = builder66.setServer(server73);
        builder66.ensureSaneDefaults();
        retrofit.Server server78 = null;
        retrofit.client.Client.Provider provider79 = null;
        java.util.concurrent.Executor executor80 = null;
        java.util.concurrent.Executor executor81 = null;
        retrofit.RequestInterceptor requestInterceptor82 = null;
        retrofit.converter.Converter converter83 = null;
        retrofit.Profiler profiler84 = null;
        retrofit.ErrorHandler errorHandler85 = null;
        retrofit.RestAdapter.Log log86 = retrofit.RestAdapter.Log.NONE;
        log86.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel89 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter90 = new retrofit.RestAdapter(server78, provider79, executor80, executor81, requestInterceptor82, converter83, profiler84, errorHandler85, log86, logLevel89);
        retrofit.RestAdapter.RestHandler restHandler91 = restAdapter90.new RestHandler();
        retrofit.RestAdapter.Log log92 = retrofit.RestAdapter.Log.NONE;
        restAdapter90.log = log92;
        retrofit.RestAdapter.Builder builder94 = builder66.setLog(log92);
        retrofit.RestAdapter.Builder builder96 = builder66.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor97 = builder96.requestInterceptor;
        restAdapter0.requestInterceptor = requestInterceptor97;
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(errorHandler5);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(provider26);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(errorHandler55);
        org.junit.Assert.assertNull(errorHandler56);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(provider67);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "hi!" + "'", str75, "hi!");
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(log86);
        org.junit.Assert.assertTrue("'" + logLevel89 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel89.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log92);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNotNull(requestInterceptor97);
    }

    @Test
    public void test02694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02694");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder1 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler2 = builder1.errorHandler;
        retrofit.client.Client.Provider provider3 = null;
        builder1.clientProvider = provider3;
        retrofit.Server server7 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder8 = builder1.setServer(server7);
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler10 = builder9.errorHandler;
        retrofit.client.Client.Provider provider11 = null;
        builder9.clientProvider = provider11;
        retrofit.converter.Converter converter13 = builder9.converter;
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder15 = builder9.setLogLevel(logLevel14);
        builder1.logLevel = logLevel14;
        builder0.logLevel = logLevel14;
        retrofit.RequestInterceptor requestInterceptor18 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.Server server22 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder23 = builder19.setServer(server22);
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor25 = restAdapter24.callbackExecutor;
        java.util.concurrent.Executor executor26 = restAdapter24.callbackExecutor;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler28 = restAdapter27.errorHandler;
        retrofit.Server server31 = new retrofit.Server("", "");
        restAdapter27.server = server31;
        restAdapter24.server = server31;
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        restAdapter24.log = log34;
        retrofit.RestAdapter.Builder builder36 = builder23.setLog(log34);
        log34.log("hi!");
        builder0.log = log34;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter40 = builder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test02695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02695");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = null;
        restAdapter0.callbackExecutor = executor2;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        retrofit.converter.Converter converter5 = restAdapter0.converter;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler7 = builder6.errorHandler;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.Server server11 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder12 = builder8.setServer(server11);
        retrofit.RestAdapter.LogLevel logLevel13 = builder12.logLevel;
        java.util.concurrent.Executor executor14 = builder12.httpExecutor;
        retrofit.RestAdapter restAdapter15 = builder12.build();
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor17 = restAdapter16.callbackExecutor;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor19 = restAdapter18.callbackExecutor;
        java.util.concurrent.Executor executor20 = restAdapter18.callbackExecutor;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler22 = restAdapter21.errorHandler;
        retrofit.Server server25 = new retrofit.Server("", "");
        restAdapter21.server = server25;
        restAdapter18.server = server25;
        restAdapter16.server = server25;
        retrofit.Profiler profiler29 = restAdapter16.profiler;
        retrofit.ErrorHandler errorHandler30 = null;
        restAdapter16.errorHandler = errorHandler30;
        retrofit.Profiler profiler32 = null;
        restAdapter16.profiler = profiler32;
        retrofit.RestAdapter.LogLevel logLevel34 = restAdapter16.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter16.logLevel = logLevel35;
        retrofit.RestAdapter.RestHandler restHandler37 = restAdapter16.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor38 = null;
        restAdapter16.requestInterceptor = requestInterceptor38;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler41 = builder40.errorHandler;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        builder40.requestInterceptor = requestInterceptor42;
        retrofit.Server server44 = null;
        retrofit.client.Client.Provider provider45 = null;
        java.util.concurrent.Executor executor46 = null;
        java.util.concurrent.Executor executor47 = null;
        retrofit.RequestInterceptor requestInterceptor48 = null;
        retrofit.converter.Converter converter49 = null;
        retrofit.Profiler profiler50 = null;
        retrofit.ErrorHandler errorHandler51 = null;
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        log52.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter(server44, provider45, executor46, executor47, requestInterceptor48, converter49, profiler50, errorHandler51, log52, logLevel55);
        builder40.log = log52;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler59 = builder58.errorHandler;
        retrofit.client.Client.Provider provider60 = null;
        builder58.clientProvider = provider60;
        retrofit.Server server64 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder65 = builder58.setServer(server64);
        retrofit.converter.Converter converter66 = null;
        builder65.converter = converter66;
        retrofit.RestAdapter restAdapter68 = builder65.build();
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler70 = builder69.errorHandler;
        java.util.concurrent.Executor executor71 = null;
        builder69.callbackExecutor = executor71;
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider74 = builder73.clientProvider;
        java.util.concurrent.Executor executor75 = null;
        builder73.callbackExecutor = executor75;
        retrofit.RestAdapter.Builder builder77 = new retrofit.RestAdapter.Builder();
        retrofit.Server server80 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder81 = builder77.setServer(server80);
        java.lang.String str82 = server80.getUrl();
        retrofit.RestAdapter.Builder builder83 = builder73.setServer(server80);
        retrofit.RestAdapter.Builder builder84 = builder69.setServer(server80);
        restAdapter68.server = server80;
        retrofit.client.Client.Provider provider86 = restAdapter68.clientProvider;
        builder40.clientProvider = provider86;
        restAdapter16.clientProvider = provider86;
        retrofit.RestAdapter.Builder builder89 = builder12.setClient(provider86);
        retrofit.Profiler profiler90 = builder12.profiler;
        retrofit.converter.Converter converter91 = builder12.converter;
        retrofit.RestAdapter.Builder builder92 = builder6.setConverter(converter91);
        restAdapter0.converter = converter91;
        retrofit.converter.Converter converter94 = null;
        restAdapter0.converter = converter94;
        retrofit.RestAdapter.RestHandler restHandler96 = restAdapter0.new RestHandler();
        java.lang.Class<?> wildcardClass97 = restAdapter0.getClass();
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(converter5);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNotNull(restAdapter15);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNull(profiler29);
        org.junit.Assert.assertNull(logLevel34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler41);
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler59);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(restAdapter68);
        org.junit.Assert.assertNull(errorHandler70);
        org.junit.Assert.assertNull(provider74);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "hi!" + "'", str82, "hi!");
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(provider86);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNull(profiler90);
        org.junit.Assert.assertNotNull(converter91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test02696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02696");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        java.util.concurrent.Executor executor16 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.Server server20 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder21 = builder17.setServer(server20);
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor23 = restAdapter22.callbackExecutor;
        java.util.concurrent.Executor executor24 = restAdapter22.callbackExecutor;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler26 = restAdapter25.errorHandler;
        retrofit.Server server29 = new retrofit.Server("", "");
        restAdapter25.server = server29;
        restAdapter22.server = server29;
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        restAdapter22.log = log32;
        retrofit.RestAdapter.Builder builder34 = builder21.setLog(log32);
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder36 = builder21.setLogLevel(logLevel35);
        retrofit.RestAdapter.Log log37 = builder21.log;
        retrofit.RestAdapter restAdapter38 = builder21.build();
        retrofit.Server server39 = null;
        retrofit.client.Client.Provider provider40 = null;
        java.util.concurrent.Executor executor41 = null;
        java.util.concurrent.Executor executor42 = null;
        retrofit.RequestInterceptor requestInterceptor43 = null;
        retrofit.converter.Converter converter44 = null;
        retrofit.Profiler profiler45 = null;
        retrofit.ErrorHandler errorHandler46 = null;
        retrofit.RestAdapter.Log log47 = retrofit.RestAdapter.Log.NONE;
        log47.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel50 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter(server39, provider40, executor41, executor42, requestInterceptor43, converter44, profiler45, errorHandler46, log47, logLevel50);
        retrofit.RestAdapter.RestHandler restHandler52 = restAdapter51.new RestHandler();
        retrofit.client.Client.Provider provider53 = restAdapter51.clientProvider;
        retrofit.RestAdapter.Log log54 = restAdapter51.log;
        retrofit.RestAdapter.RestHandler restHandler55 = restAdapter51.new RestHandler();
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler57 = builder56.errorHandler;
        java.util.concurrent.Executor executor58 = builder56.callbackExecutor;
        retrofit.RestAdapter.Builder builder60 = builder56.setServer("hi!");
        builder60.ensureSaneDefaults();
        java.util.concurrent.Executor executor62 = builder60.callbackExecutor;
        restAdapter51.callbackExecutor = executor62;
        builder21.callbackExecutor = executor62;
        restAdapter0.callbackExecutor = executor62;
        retrofit.Profiler profiler66 = null;
        restAdapter0.profiler = profiler66;
        retrofit.RestAdapter.Log log68 = restAdapter0.log;
        retrofit.Profiler profiler69 = restAdapter0.profiler;
        retrofit.client.Client.Provider provider70 = restAdapter0.clientProvider;
        java.lang.Throwable throwable71 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable71, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(errorHandler26);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNotNull(restAdapter38);
        org.junit.Assert.assertNotNull(log47);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(provider53);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertNull(errorHandler57);
        org.junit.Assert.assertNull(executor58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(executor62);
        org.junit.Assert.assertNull(log68);
        org.junit.Assert.assertNull(profiler69);
        org.junit.Assert.assertNull(provider70);
    }

    @Test
    public void test02697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02697");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter3 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler4 = restAdapter3.errorHandler;
        retrofit.Server server7 = new retrofit.Server("", "");
        restAdapter3.server = server7;
        restAdapter0.server = server7;
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter0.logLevel;
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor12 = restAdapter11.callbackExecutor;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor14 = restAdapter13.callbackExecutor;
        java.util.concurrent.Executor executor15 = restAdapter13.callbackExecutor;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler17 = restAdapter16.errorHandler;
        retrofit.Server server20 = new retrofit.Server("", "");
        restAdapter16.server = server20;
        restAdapter13.server = server20;
        restAdapter11.server = server20;
        retrofit.Profiler profiler24 = restAdapter11.profiler;
        retrofit.ErrorHandler errorHandler25 = null;
        restAdapter11.errorHandler = errorHandler25;
        retrofit.Profiler profiler27 = null;
        restAdapter11.profiler = profiler27;
        retrofit.RestAdapter.LogLevel logLevel29 = restAdapter11.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter11.getLogLevel();
        retrofit.client.Client.Provider provider31 = null;
        restAdapter11.clientProvider = provider31;
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter11.logLevel;
        retrofit.RestAdapter.RestHandler restHandler34 = restAdapter11.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel35 = restAdapter11.logLevel;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler37 = builder36.errorHandler;
        retrofit.ErrorHandler errorHandler38 = builder36.errorHandler;
        retrofit.RestAdapter.Log log39 = null;
        builder36.log = log39;
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean42 = logLevel41.log();
        builder36.logLevel = logLevel41;
        retrofit.ErrorHandler errorHandler44 = builder36.errorHandler;
        retrofit.RestAdapter.Builder builder46 = builder36.setServer("hi!");
        retrofit.Profiler profiler47 = builder46.profiler;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler49 = null;
        builder48.errorHandler = errorHandler49;
        retrofit.ErrorHandler errorHandler51 = builder48.errorHandler;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler53 = builder52.errorHandler;
        retrofit.Server server56 = new retrofit.Server("", "");
        builder52.server = server56;
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        builder52.log = log58;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler61 = builder60.errorHandler;
        retrofit.client.Client.Provider provider62 = null;
        builder60.clientProvider = provider62;
        retrofit.Server server66 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder67 = builder60.setServer(server66);
        retrofit.converter.Converter converter68 = null;
        builder67.converter = converter68;
        retrofit.RestAdapter restAdapter70 = builder67.build();
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler72 = builder71.errorHandler;
        java.util.concurrent.Executor executor73 = null;
        builder71.callbackExecutor = executor73;
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider76 = builder75.clientProvider;
        java.util.concurrent.Executor executor77 = null;
        builder75.callbackExecutor = executor77;
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        retrofit.Server server82 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder83 = builder79.setServer(server82);
        java.lang.String str84 = server82.getUrl();
        retrofit.RestAdapter.Builder builder85 = builder75.setServer(server82);
        retrofit.RestAdapter.Builder builder86 = builder71.setServer(server82);
        restAdapter70.server = server82;
        java.util.concurrent.Executor executor88 = restAdapter70.httpExecutor;
        builder52.httpExecutor = executor88;
        builder48.httpExecutor = executor88;
        builder46.callbackExecutor = executor88;
        restAdapter11.callbackExecutor = executor88;
        restAdapter0.httpExecutor = executor88;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(errorHandler4);
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(profiler24);
        org.junit.Assert.assertNull(logLevel29);
        org.junit.Assert.assertNull(logLevel30);
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertNull(logLevel35);
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNull(errorHandler38);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(errorHandler44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(profiler47);
        org.junit.Assert.assertNull(errorHandler51);
        org.junit.Assert.assertNull(errorHandler53);
        org.junit.Assert.assertNotNull(log58);
        org.junit.Assert.assertNull(errorHandler61);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(restAdapter70);
        org.junit.Assert.assertNull(errorHandler72);
        org.junit.Assert.assertNull(provider76);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "hi!" + "'", str84, "hi!");
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(executor88);
    }

    @Test
    public void test02698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02698");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.Profiler profiler3 = builder0.profiler;
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor5 = restAdapter4.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.Server server9 = new retrofit.Server("hi!", "hi!");
        restAdapter4.server = server9;
        retrofit.RestAdapter.Builder builder11 = builder0.setServer(server9);
        retrofit.converter.Converter converter12 = null;
        builder11.converter = converter12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        log22.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel25);
        builder11.logLevel = logLevel25;
        java.util.concurrent.Executor executor28 = builder11.callbackExecutor;
        retrofit.RestAdapter.Builder builder30 = builder11.setServer("default");
        retrofit.RestAdapter.LogLevel logLevel31 = builder30.logLevel;
        retrofit.Server server32 = null;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        log40.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log40, logLevel43);
        retrofit.RestAdapter.RestHandler restHandler45 = restAdapter44.new RestHandler();
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        restAdapter44.log = log46;
        retrofit.converter.Converter converter48 = null;
        restAdapter44.converter = converter48;
        retrofit.RestAdapter.LogLevel logLevel50 = restAdapter44.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel51 = restAdapter44.getLogLevel();
        retrofit.Server server52 = null;
        retrofit.client.Client.Provider provider53 = null;
        java.util.concurrent.Executor executor54 = null;
        java.util.concurrent.Executor executor55 = null;
        retrofit.RequestInterceptor requestInterceptor56 = null;
        retrofit.converter.Converter converter57 = null;
        retrofit.Profiler profiler58 = null;
        retrofit.ErrorHandler errorHandler59 = null;
        retrofit.RestAdapter.Log log60 = retrofit.RestAdapter.Log.NONE;
        log60.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter(server52, provider53, executor54, executor55, requestInterceptor56, converter57, profiler58, errorHandler59, log60, logLevel63);
        retrofit.Profiler profiler65 = restAdapter64.profiler;
        retrofit.RestAdapter.LogLevel logLevel66 = restAdapter64.getLogLevel();
        retrofit.ErrorHandler errorHandler67 = restAdapter64.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel68 = restAdapter64.logLevel;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        retrofit.Server server72 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder73 = builder69.setServer(server72);
        retrofit.RestAdapter restAdapter74 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor75 = restAdapter74.callbackExecutor;
        java.util.concurrent.Executor executor76 = restAdapter74.callbackExecutor;
        retrofit.RestAdapter restAdapter77 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler78 = restAdapter77.errorHandler;
        retrofit.Server server81 = new retrofit.Server("", "");
        restAdapter77.server = server81;
        restAdapter74.server = server81;
        retrofit.RestAdapter.Log log84 = retrofit.RestAdapter.Log.NONE;
        restAdapter74.log = log84;
        retrofit.RestAdapter.Builder builder86 = builder73.setLog(log84);
        retrofit.RestAdapter.LogLevel logLevel87 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder88 = builder73.setLogLevel(logLevel87);
        retrofit.Profiler profiler89 = null;
        builder88.profiler = profiler89;
        retrofit.converter.Converter converter91 = null;
        builder88.converter = converter91;
        retrofit.ErrorHandler errorHandler93 = null;
        builder88.errorHandler = errorHandler93;
        retrofit.RestAdapter.LogLevel logLevel95 = builder88.logLevel;
        boolean boolean96 = logLevel95.log();
        restAdapter64.setLogLevel(logLevel95);
        restAdapter44.logLevel = logLevel95;
        builder30.logLevel = logLevel95;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log60);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler65);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler67);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNull(executor75);
        org.junit.Assert.assertNull(executor76);
        org.junit.Assert.assertNull(errorHandler78);
        org.junit.Assert.assertNotNull(log84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertTrue("'" + logLevel87 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel87.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertTrue("'" + logLevel95 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel95.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test02699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02699");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        restAdapter12.log = log14;
        retrofit.converter.Converter converter16 = null;
        restAdapter12.converter = converter16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter12.getLogLevel();
        retrofit.ErrorHandler errorHandler19 = restAdapter12.errorHandler;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler21 = builder20.errorHandler;
        retrofit.client.Client.Provider provider22 = null;
        builder20.clientProvider = provider22;
        retrofit.Server server26 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder27 = builder20.setServer(server26);
        retrofit.converter.Converter converter28 = null;
        builder27.converter = converter28;
        retrofit.RestAdapter restAdapter30 = builder27.build();
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler32 = builder31.errorHandler;
        java.util.concurrent.Executor executor33 = null;
        builder31.callbackExecutor = executor33;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider36 = builder35.clientProvider;
        java.util.concurrent.Executor executor37 = null;
        builder35.callbackExecutor = executor37;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.Server server42 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder43 = builder39.setServer(server42);
        java.lang.String str44 = server42.getUrl();
        retrofit.RestAdapter.Builder builder45 = builder35.setServer(server42);
        retrofit.RestAdapter.Builder builder46 = builder31.setServer(server42);
        restAdapter30.server = server42;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler49 = builder48.errorHandler;
        retrofit.client.Client.Provider provider50 = null;
        builder48.clientProvider = provider50;
        retrofit.Server server54 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder55 = builder48.setServer(server54);
        retrofit.client.Client.Provider provider56 = null;
        java.util.concurrent.Executor executor57 = null;
        java.util.concurrent.Executor executor58 = null;
        retrofit.RequestInterceptor requestInterceptor59 = null;
        retrofit.converter.Converter converter60 = null;
        retrofit.Profiler profiler61 = null;
        retrofit.ErrorHandler errorHandler62 = null;
        retrofit.Server server63 = null;
        retrofit.client.Client.Provider provider64 = null;
        java.util.concurrent.Executor executor65 = null;
        java.util.concurrent.Executor executor66 = null;
        retrofit.RequestInterceptor requestInterceptor67 = null;
        retrofit.converter.Converter converter68 = null;
        retrofit.Profiler profiler69 = null;
        retrofit.ErrorHandler errorHandler70 = null;
        retrofit.RestAdapter.Log log71 = retrofit.RestAdapter.Log.NONE;
        log71.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel74 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter(server63, provider64, executor65, executor66, requestInterceptor67, converter68, profiler69, errorHandler70, log71, logLevel74);
        retrofit.RestAdapter.LogLevel logLevel76 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter77 = new retrofit.RestAdapter(server54, provider56, executor57, executor58, requestInterceptor59, converter60, profiler61, errorHandler62, log71, logLevel76);
        boolean boolean78 = logLevel76.log();
        boolean boolean79 = logLevel76.log();
        restAdapter30.setLogLevel(logLevel76);
        restAdapter12.setLogLevel(logLevel76);
        retrofit.client.Header[] headerArray84 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList85 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList85, headerArray84);
        retrofit.mime.TypedOutput typedOutput87 = null;
        retrofit.client.Request request88 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList85, typedOutput87);
        java.lang.String str89 = request88.getMethod();
        java.util.List<retrofit.client.Header> headerList90 = request88.getHeaders();
        java.lang.String str91 = request88.getMethod();
        retrofit.client.Request request92 = restAdapter12.logAndReplaceRequest(request88);
        retrofit.mime.TypedOutput typedOutput93 = request88.getBody();
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(restAdapter30);
        org.junit.Assert.assertNull(errorHandler32);
        org.junit.Assert.assertNull(provider36);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(errorHandler49);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(log71);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(headerArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNotNull(headerList90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertNotNull(request92);
        org.junit.Assert.assertNull(typedOutput93);
    }

    @Test
    public void test02700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02700");
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput13);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList9, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("default", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = request18.getBody();
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(typedOutput19);
    }

    @Test
    public void test02701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02701");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server6 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder7 = builder0.setServer(server6);
        retrofit.converter.Converter converter8 = null;
        builder7.converter = converter8;
        retrofit.RestAdapter restAdapter10 = builder7.build();
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler12 = builder11.errorHandler;
        java.util.concurrent.Executor executor13 = null;
        builder11.callbackExecutor = executor13;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider16 = builder15.clientProvider;
        java.util.concurrent.Executor executor17 = null;
        builder15.callbackExecutor = executor17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.Server server22 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder23 = builder19.setServer(server22);
        java.lang.String str24 = server22.getUrl();
        retrofit.RestAdapter.Builder builder25 = builder15.setServer(server22);
        retrofit.RestAdapter.Builder builder26 = builder11.setServer(server22);
        restAdapter10.server = server22;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler29 = builder28.errorHandler;
        retrofit.client.Client.Provider provider30 = null;
        builder28.clientProvider = provider30;
        retrofit.Server server34 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder35 = builder28.setServer(server34);
        retrofit.client.Client.Provider provider36 = null;
        java.util.concurrent.Executor executor37 = null;
        java.util.concurrent.Executor executor38 = null;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        retrofit.converter.Converter converter40 = null;
        retrofit.Profiler profiler41 = null;
        retrofit.ErrorHandler errorHandler42 = null;
        retrofit.Server server43 = null;
        retrofit.client.Client.Provider provider44 = null;
        java.util.concurrent.Executor executor45 = null;
        java.util.concurrent.Executor executor46 = null;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        retrofit.converter.Converter converter48 = null;
        retrofit.Profiler profiler49 = null;
        retrofit.ErrorHandler errorHandler50 = null;
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        log51.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter(server43, provider44, executor45, executor46, requestInterceptor47, converter48, profiler49, errorHandler50, log51, logLevel54);
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter(server34, provider36, executor37, executor38, requestInterceptor39, converter40, profiler41, errorHandler42, log51, logLevel56);
        boolean boolean58 = logLevel56.log();
        boolean boolean59 = logLevel56.log();
        restAdapter10.setLogLevel(logLevel56);
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler62 = builder61.errorHandler;
        retrofit.RequestInterceptor requestInterceptor63 = null;
        builder61.requestInterceptor = requestInterceptor63;
        java.util.concurrent.Executor executor65 = builder61.httpExecutor;
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        log66.log("default");
        builder61.log = log66;
        restAdapter10.log = log66;
        retrofit.client.Client.Provider provider71 = restAdapter10.clientProvider;
        retrofit.Server server72 = restAdapter10.server;
        retrofit.client.Client.Provider provider73 = restAdapter10.clientProvider;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(restAdapter10);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(provider16);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNull(errorHandler62);
        org.junit.Assert.assertNull(executor65);
        org.junit.Assert.assertNotNull(log66);
        org.junit.Assert.assertNotNull(provider71);
        org.junit.Assert.assertNotNull(server72);
        org.junit.Assert.assertNotNull(provider73);
    }

    @Test
    public void test02702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02702");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = builder0.clientProvider;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server7 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder8 = builder4.setServer(server7);
        java.lang.String str9 = server7.getUrl();
        retrofit.RestAdapter.Builder builder10 = builder0.setServer(server7);
        builder0.ensureSaneDefaults();
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        log20.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel23);
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter24.new RestHandler();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        restAdapter24.log = log26;
        retrofit.RestAdapter.Builder builder28 = builder0.setLog(log26);
        retrofit.RestAdapter.Builder builder30 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter31 = builder0.build();
        retrofit.RestAdapter.RestHandler restHandler32 = restAdapter31.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter31.logLevel;
        java.util.concurrent.Executor executor34 = restAdapter31.callbackExecutor;
        retrofit.Profiler profiler35 = restAdapter31.profiler;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler37 = builder36.errorHandler;
        retrofit.Server server40 = new retrofit.Server("", "");
        builder36.server = server40;
        retrofit.client.Client.Provider provider42 = null;
        java.util.concurrent.Executor executor43 = null;
        java.util.concurrent.Executor executor44 = null;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        retrofit.converter.Converter converter46 = null;
        retrofit.Profiler profiler47 = null;
        retrofit.ErrorHandler errorHandler48 = null;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler50 = builder49.errorHandler;
        retrofit.Server server53 = new retrofit.Server("", "");
        builder49.server = server53;
        retrofit.RestAdapter.Log log55 = retrofit.RestAdapter.Log.NONE;
        builder49.log = log55;
        retrofit.Server server57 = null;
        retrofit.client.Client.Provider provider58 = null;
        java.util.concurrent.Executor executor59 = null;
        java.util.concurrent.Executor executor60 = null;
        retrofit.RequestInterceptor requestInterceptor61 = null;
        retrofit.converter.Converter converter62 = null;
        retrofit.Profiler profiler63 = null;
        retrofit.ErrorHandler errorHandler64 = null;
        retrofit.RestAdapter.Log log65 = retrofit.RestAdapter.Log.NONE;
        log65.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel68 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter(server57, provider58, executor59, executor60, requestInterceptor61, converter62, profiler63, errorHandler64, log65, logLevel68);
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter(server40, provider42, executor43, executor44, requestInterceptor45, converter46, profiler47, errorHandler48, log55, logLevel68);
        log55.log("hi!");
        restAdapter31.log = log55;
        retrofit.client.Response response75 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response77 = restAdapter31.logAndReplaceResponse("default", response75, 100L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(provider1);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(restAdapter31);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(executor34);
        org.junit.Assert.assertNull(profiler35);
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNull(errorHandler50);
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertNotNull(log65);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test02703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02703");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter0.new RestHandler();
        retrofit.client.Client.Provider provider4 = restAdapter0.clientProvider;
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Log log6 = restAdapter0.log;
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(provider4);
        org.junit.Assert.assertNull(log6);
    }

    @Test
    public void test02704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02704");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter0.requestInterceptor;
        retrofit.ErrorHandler errorHandler17 = restAdapter0.errorHandler;
        java.util.concurrent.Executor executor18 = null;
        restAdapter0.callbackExecutor = executor18;
        java.util.concurrent.Executor executor20 = restAdapter0.httpExecutor;
        retrofit.client.Client.Provider provider21 = restAdapter0.clientProvider;
        retrofit.converter.Converter converter22 = restAdapter0.converter;
        retrofit.Server server23 = null;
        retrofit.client.Client.Provider provider24 = null;
        java.util.concurrent.Executor executor25 = null;
        java.util.concurrent.Executor executor26 = null;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        retrofit.converter.Converter converter28 = null;
        retrofit.Profiler profiler29 = null;
        retrofit.ErrorHandler errorHandler30 = null;
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        log31.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server23, provider24, executor25, executor26, requestInterceptor27, converter28, profiler29, errorHandler30, log31, logLevel34);
        retrofit.RestAdapter.RestHandler restHandler36 = restAdapter35.new RestHandler();
        retrofit.client.Client.Provider provider37 = restAdapter35.clientProvider;
        retrofit.RestAdapter.Log log38 = restAdapter35.log;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor40 = restAdapter39.callbackExecutor;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor42 = restAdapter41.callbackExecutor;
        java.util.concurrent.Executor executor43 = restAdapter41.callbackExecutor;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler45 = restAdapter44.errorHandler;
        retrofit.Server server48 = new retrofit.Server("", "");
        restAdapter44.server = server48;
        restAdapter41.server = server48;
        restAdapter39.server = server48;
        retrofit.Profiler profiler52 = restAdapter39.profiler;
        retrofit.ErrorHandler errorHandler53 = null;
        restAdapter39.errorHandler = errorHandler53;
        retrofit.RequestInterceptor requestInterceptor55 = restAdapter39.requestInterceptor;
        retrofit.ErrorHandler errorHandler56 = restAdapter39.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler57 = restAdapter39.new RestHandler();
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        log58.log("default");
        restAdapter39.log = log58;
        retrofit.RestAdapter.RestHandler restHandler62 = restAdapter39.new RestHandler();
        retrofit.RestAdapter.Log log63 = restAdapter39.log;
        restAdapter35.log = log63;
        restAdapter0.log = log63;
        java.lang.Throwable throwable66 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable66, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(provider21);
        org.junit.Assert.assertNull(converter22);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(provider37);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNull(executor40);
        org.junit.Assert.assertNull(executor42);
        org.junit.Assert.assertNull(executor43);
        org.junit.Assert.assertNull(errorHandler45);
        org.junit.Assert.assertNull(profiler52);
        org.junit.Assert.assertNull(requestInterceptor55);
        org.junit.Assert.assertNull(errorHandler56);
        org.junit.Assert.assertNotNull(log58);
        org.junit.Assert.assertNotNull(log63);
    }

    @Test
    public void test02705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02705");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider5 = builder4.clientProvider;
        java.util.concurrent.Executor executor6 = null;
        builder4.callbackExecutor = executor6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.Server server11 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder12 = builder8.setServer(server11);
        java.lang.String str13 = server11.getUrl();
        retrofit.RestAdapter.Builder builder14 = builder4.setServer(server11);
        retrofit.RestAdapter.Builder builder15 = builder0.setServer(server11);
        retrofit.RestAdapter.Log log16 = builder0.log;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler18 = builder17.errorHandler;
        retrofit.ErrorHandler errorHandler19 = builder17.errorHandler;
        java.util.concurrent.Executor executor20 = builder17.callbackExecutor;
        retrofit.Profiler profiler21 = builder17.profiler;
        builder17.ensureSaneDefaults();
        builder17.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider25 = builder24.clientProvider;
        java.util.concurrent.Executor executor26 = null;
        builder24.callbackExecutor = executor26;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.Server server31 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder32 = builder28.setServer(server31);
        java.lang.String str33 = server31.getUrl();
        retrofit.RestAdapter.Builder builder34 = builder24.setServer(server31);
        builder24.ensureSaneDefaults();
        retrofit.Server server36 = null;
        retrofit.client.Client.Provider provider37 = null;
        java.util.concurrent.Executor executor38 = null;
        java.util.concurrent.Executor executor39 = null;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        retrofit.converter.Converter converter41 = null;
        retrofit.Profiler profiler42 = null;
        retrofit.ErrorHandler errorHandler43 = null;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        log44.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter(server36, provider37, executor38, executor39, requestInterceptor40, converter41, profiler42, errorHandler43, log44, logLevel47);
        retrofit.RestAdapter.RestHandler restHandler49 = restAdapter48.new RestHandler();
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        restAdapter48.log = log50;
        retrofit.RestAdapter.Builder builder52 = builder24.setLog(log50);
        retrofit.RestAdapter.Builder builder54 = builder24.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor55 = builder24.requestInterceptor;
        retrofit.RestAdapter.Builder builder56 = builder17.setRequestInterceptor(requestInterceptor55);
        retrofit.Server server59 = new retrofit.Server("default", "default");
        java.lang.String str60 = server59.getName();
        retrofit.RestAdapter.Builder builder61 = builder56.setServer(server59);
        retrofit.RequestInterceptor requestInterceptor62 = builder61.requestInterceptor;
        java.util.concurrent.Executor executor63 = builder61.httpExecutor;
        builder61.ensureSaneDefaults();
        retrofit.converter.Converter converter65 = builder61.converter;
        retrofit.converter.Converter converter66 = builder61.converter;
        builder0.converter = converter66;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(log16);
        org.junit.Assert.assertNull(errorHandler18);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(profiler21);
        org.junit.Assert.assertNull(provider25);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(requestInterceptor55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "default" + "'", str60, "default");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(requestInterceptor62);
        org.junit.Assert.assertNotNull(executor63);
        org.junit.Assert.assertNotNull(converter65);
        org.junit.Assert.assertNotNull(converter66);
    }

    @Test
    public void test02706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02706");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.Server server7 = new retrofit.Server("default", "hi!");
        java.lang.String str8 = server7.getUrl();
        retrofit.RestAdapter.Builder builder9 = builder4.setServer(server7);
        retrofit.RestAdapter.LogLevel logLevel10 = builder9.logLevel;
        builder9.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler13 = builder12.errorHandler;
        retrofit.Server server16 = new retrofit.Server("", "");
        builder12.server = server16;
        java.util.concurrent.Executor executor18 = null;
        builder12.httpExecutor = executor18;
        retrofit.RestAdapter.Builder builder21 = builder12.setServer("default");
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler23 = builder22.errorHandler;
        retrofit.Server server26 = new retrofit.Server("", "");
        builder22.server = server26;
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        builder22.log = log28;
        retrofit.RequestInterceptor requestInterceptor30 = builder22.requestInterceptor;
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        log31.log("hi!");
        log31.log("hi!");
        builder22.log = log31;
        builder21.log = log31;
        retrofit.RestAdapter.Log log38 = builder21.log;
        retrofit.RestAdapter.Builder builder39 = builder9.setLog(log38);
        retrofit.client.Client.Provider provider40 = builder39.clientProvider;
        retrofit.ErrorHandler errorHandler41 = builder39.errorHandler;
        retrofit.Profiler profiler42 = null;
        builder39.profiler = profiler42;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "default" + "'", str8, "default");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(provider40);
        org.junit.Assert.assertNotNull(errorHandler41);
    }

    @Test
    public void test02707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02707");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter0.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor4 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor5 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler7 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler8 = restAdapter0.new RestHandler();
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor10 = restAdapter9.callbackExecutor;
        retrofit.converter.Converter converter11 = null;
        restAdapter9.converter = converter11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.Server server16 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder17 = builder13.setServer(server16);
        retrofit.Server server18 = builder13.server;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.Server server22 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder23 = builder19.setServer(server22);
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor25 = restAdapter24.callbackExecutor;
        java.util.concurrent.Executor executor26 = restAdapter24.callbackExecutor;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler28 = restAdapter27.errorHandler;
        retrofit.Server server31 = new retrofit.Server("", "");
        restAdapter27.server = server31;
        restAdapter24.server = server31;
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        restAdapter24.log = log34;
        retrofit.RestAdapter.Builder builder36 = builder23.setLog(log34);
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder38 = builder23.setLogLevel(logLevel37);
        builder13.logLevel = logLevel37;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.Server server43 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder44 = builder40.setServer(server43);
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor46 = restAdapter45.callbackExecutor;
        java.util.concurrent.Executor executor47 = restAdapter45.callbackExecutor;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler49 = restAdapter48.errorHandler;
        retrofit.Server server52 = new retrofit.Server("", "");
        restAdapter48.server = server52;
        restAdapter45.server = server52;
        retrofit.RestAdapter.Log log55 = retrofit.RestAdapter.Log.NONE;
        restAdapter45.log = log55;
        retrofit.RestAdapter.Builder builder57 = builder44.setLog(log55);
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder59 = builder44.setLogLevel(logLevel58);
        retrofit.RestAdapter.Log log60 = builder44.log;
        retrofit.RestAdapter restAdapter61 = builder44.build();
        java.util.concurrent.Executor executor62 = restAdapter61.callbackExecutor;
        builder13.callbackExecutor = executor62;
        restAdapter9.httpExecutor = executor62;
        restAdapter0.callbackExecutor = executor62;
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(server18);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(executor46);
        org.junit.Assert.assertNull(executor47);
        org.junit.Assert.assertNull(errorHandler49);
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(log60);
        org.junit.Assert.assertNotNull(restAdapter61);
        org.junit.Assert.assertNotNull(executor62);
    }

    @Test
    public void test02708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02708");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.Profiler profiler3 = builder0.profiler;
        retrofit.RestAdapter.Log log4 = builder0.log;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.FULL;
        builder0.logLevel = logLevel5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.Server server10 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder11 = builder7.setServer(server10);
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor13 = restAdapter12.callbackExecutor;
        java.util.concurrent.Executor executor14 = restAdapter12.callbackExecutor;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler16 = restAdapter15.errorHandler;
        retrofit.Server server19 = new retrofit.Server("", "");
        restAdapter15.server = server19;
        restAdapter12.server = server19;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        restAdapter12.log = log22;
        retrofit.RestAdapter.Builder builder24 = builder11.setLog(log22);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder26 = builder11.setLogLevel(logLevel25);
        retrofit.Profiler profiler27 = null;
        builder26.profiler = profiler27;
        retrofit.converter.Converter converter29 = null;
        builder26.converter = converter29;
        retrofit.ErrorHandler errorHandler31 = null;
        builder26.errorHandler = errorHandler31;
        retrofit.RestAdapter restAdapter33 = builder26.build();
        retrofit.ErrorHandler errorHandler34 = builder26.errorHandler;
        retrofit.RestAdapter.Builder builder35 = builder0.setErrorHandler(errorHandler34);
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler37 = builder36.errorHandler;
        retrofit.client.Client.Provider provider38 = null;
        builder36.clientProvider = provider38;
        retrofit.Server server42 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder43 = builder36.setServer(server42);
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler45 = builder44.errorHandler;
        retrofit.client.Client.Provider provider46 = null;
        builder44.clientProvider = provider46;
        retrofit.converter.Converter converter48 = builder44.converter;
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder50 = builder44.setLogLevel(logLevel49);
        builder36.logLevel = logLevel49;
        boolean boolean52 = logLevel49.log();
        builder0.logLevel = logLevel49;
        java.util.concurrent.Executor executor54 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler56 = null;
        builder55.errorHandler = errorHandler56;
        retrofit.ErrorHandler errorHandler58 = builder55.errorHandler;
        retrofit.RestAdapter.Builder builder60 = builder55.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel61 = builder55.logLevel;
        retrofit.Server server62 = builder55.server;
        retrofit.RestAdapter.Builder builder63 = builder0.setServer(server62);
        builder63.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler66 = builder65.errorHandler;
        retrofit.client.Client.Provider provider67 = null;
        builder65.clientProvider = provider67;
        retrofit.converter.Converter converter69 = builder65.converter;
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder71 = builder65.setLogLevel(logLevel70);
        retrofit.RestAdapter restAdapter72 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor73 = restAdapter72.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel74 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean75 = logLevel74.log();
        restAdapter72.logLevel = logLevel74;
        retrofit.RestAdapter.Builder builder77 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler78 = builder77.errorHandler;
        retrofit.client.Client.Provider provider79 = null;
        builder77.clientProvider = provider79;
        retrofit.Server server83 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder84 = builder77.setServer(server83);
        retrofit.RestAdapter.Builder builder85 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler86 = builder85.errorHandler;
        retrofit.client.Client.Provider provider87 = null;
        builder85.clientProvider = provider87;
        retrofit.converter.Converter converter89 = builder85.converter;
        retrofit.RestAdapter.LogLevel logLevel90 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder91 = builder85.setLogLevel(logLevel90);
        builder77.logLevel = logLevel90;
        boolean boolean93 = logLevel90.log();
        restAdapter72.logLevel = logLevel90;
        retrofit.RestAdapter.Builder builder95 = builder71.setLogLevel(logLevel90);
        builder71.ensureSaneDefaults();
        retrofit.client.Client.Provider provider97 = builder71.clientProvider;
        builder63.clientProvider = provider97;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(restAdapter33);
        org.junit.Assert.assertNotNull(errorHandler34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(errorHandler45);
        org.junit.Assert.assertNull(converter48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(executor54);
        org.junit.Assert.assertNull(errorHandler58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(server62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(errorHandler66);
        org.junit.Assert.assertNull(converter69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNull(executor73);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(errorHandler78);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNull(errorHandler86);
        org.junit.Assert.assertNull(converter89);
        org.junit.Assert.assertTrue("'" + logLevel90 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel90.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(provider97);
    }

    @Test
    public void test02709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02709");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter0.getLogLevel();
        retrofit.ErrorHandler errorHandler20 = null;
        restAdapter0.errorHandler = errorHandler20;
        retrofit.client.Client.Provider provider22 = null;
        restAdapter0.clientProvider = provider22;
        retrofit.converter.Converter converter24 = restAdapter0.converter;
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter0.new RestHandler();
        retrofit.Server server26 = restAdapter0.server;
        java.util.concurrent.Executor executor27 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor29 = restAdapter28.callbackExecutor;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor31 = restAdapter30.callbackExecutor;
        java.util.concurrent.Executor executor32 = restAdapter30.callbackExecutor;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler34 = restAdapter33.errorHandler;
        retrofit.Server server37 = new retrofit.Server("", "");
        restAdapter33.server = server37;
        restAdapter30.server = server37;
        restAdapter28.server = server37;
        retrofit.Profiler profiler41 = restAdapter28.profiler;
        retrofit.ErrorHandler errorHandler42 = null;
        restAdapter28.errorHandler = errorHandler42;
        retrofit.RequestInterceptor requestInterceptor44 = restAdapter28.requestInterceptor;
        retrofit.ErrorHandler errorHandler45 = restAdapter28.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler46 = restAdapter28.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler47 = restAdapter28.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler48 = restAdapter28.new RestHandler();
        retrofit.Server server49 = restAdapter28.server;
        retrofit.RestAdapter.Log log50 = restAdapter28.log;
        retrofit.RestAdapter.LogLevel logLevel51 = restAdapter28.logLevel;
        retrofit.Server server52 = restAdapter28.server;
        restAdapter0.server = server52;
        retrofit.RestAdapter.RestHandler restHandler54 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(converter24);
        org.junit.Assert.assertNotNull(server26);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(errorHandler34);
        org.junit.Assert.assertNull(profiler41);
        org.junit.Assert.assertNull(requestInterceptor44);
        org.junit.Assert.assertNull(errorHandler45);
        org.junit.Assert.assertNotNull(server49);
        org.junit.Assert.assertNull(log50);
        org.junit.Assert.assertNull(logLevel51);
        org.junit.Assert.assertNotNull(server52);
    }

    @Test
    public void test02710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02710");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter0.getLogLevel();
        retrofit.ErrorHandler errorHandler20 = null;
        restAdapter0.errorHandler = errorHandler20;
        retrofit.client.Client.Provider provider22 = null;
        restAdapter0.clientProvider = provider22;
        retrofit.ErrorHandler errorHandler24 = restAdapter0.errorHandler;
        retrofit.Server server25 = restAdapter0.server;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler27 = builder26.errorHandler;
        retrofit.ErrorHandler errorHandler28 = builder26.errorHandler;
        retrofit.RestAdapter.Log log29 = null;
        builder26.log = log29;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean32 = logLevel31.log();
        builder26.logLevel = logLevel31;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler35 = restAdapter34.new RestHandler();
        java.util.concurrent.Executor executor36 = null;
        restAdapter34.callbackExecutor = executor36;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor39 = restAdapter38.callbackExecutor;
        java.util.concurrent.Executor executor40 = restAdapter38.callbackExecutor;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler42 = restAdapter41.errorHandler;
        retrofit.Server server45 = new retrofit.Server("", "");
        restAdapter41.server = server45;
        restAdapter38.server = server45;
        restAdapter34.server = server45;
        retrofit.RestAdapter.Builder builder49 = builder26.setServer(server45);
        restAdapter0.server = server45;
        retrofit.RestAdapter.RestHandler restHandler51 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Log log52 = restAdapter0.log;
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler54 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNotNull(server25);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNull(executor40);
        org.junit.Assert.assertNull(errorHandler42);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(log52);
        org.junit.Assert.assertNull(logLevel53);
    }

    @Test
    public void test02711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02711");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter0.new RestHandler();
        retrofit.client.Client.Provider provider18 = restAdapter0.clientProvider;
        retrofit.client.Client.Provider provider19 = restAdapter0.clientProvider;
        java.util.concurrent.Executor executor20 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler21 = restAdapter0.new RestHandler();
        retrofit.Server server22 = restAdapter0.server;
        java.lang.Throwable throwable23 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable23, "default");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(provider18);
        org.junit.Assert.assertNull(provider19);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNotNull(server22);
    }

    @Test
    public void test02712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02712");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        builder0.requestInterceptor = requestInterceptor5;
        retrofit.Server server7 = builder0.server;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler9 = builder8.errorHandler;
        retrofit.client.Client.Provider provider10 = null;
        builder8.clientProvider = provider10;
        retrofit.Server server14 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder15 = builder8.setServer(server14);
        retrofit.converter.Converter converter16 = null;
        builder15.converter = converter16;
        retrofit.RestAdapter restAdapter18 = builder15.build();
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler20 = builder19.errorHandler;
        java.util.concurrent.Executor executor21 = null;
        builder19.callbackExecutor = executor21;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider24 = builder23.clientProvider;
        java.util.concurrent.Executor executor25 = null;
        builder23.callbackExecutor = executor25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.Server server30 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder31 = builder27.setServer(server30);
        java.lang.String str32 = server30.getUrl();
        retrofit.RestAdapter.Builder builder33 = builder23.setServer(server30);
        retrofit.RestAdapter.Builder builder34 = builder19.setServer(server30);
        restAdapter18.server = server30;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler37 = builder36.errorHandler;
        retrofit.client.Client.Provider provider38 = null;
        builder36.clientProvider = provider38;
        retrofit.Server server42 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder43 = builder36.setServer(server42);
        retrofit.client.Client.Provider provider44 = null;
        java.util.concurrent.Executor executor45 = null;
        java.util.concurrent.Executor executor46 = null;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        retrofit.converter.Converter converter48 = null;
        retrofit.Profiler profiler49 = null;
        retrofit.ErrorHandler errorHandler50 = null;
        retrofit.Server server51 = null;
        retrofit.client.Client.Provider provider52 = null;
        java.util.concurrent.Executor executor53 = null;
        java.util.concurrent.Executor executor54 = null;
        retrofit.RequestInterceptor requestInterceptor55 = null;
        retrofit.converter.Converter converter56 = null;
        retrofit.Profiler profiler57 = null;
        retrofit.ErrorHandler errorHandler58 = null;
        retrofit.RestAdapter.Log log59 = retrofit.RestAdapter.Log.NONE;
        log59.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter(server51, provider52, executor53, executor54, requestInterceptor55, converter56, profiler57, errorHandler58, log59, logLevel62);
        retrofit.RestAdapter.LogLevel logLevel64 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter(server42, provider44, executor45, executor46, requestInterceptor47, converter48, profiler49, errorHandler50, log59, logLevel64);
        boolean boolean66 = logLevel64.log();
        boolean boolean67 = logLevel64.log();
        restAdapter18.setLogLevel(logLevel64);
        boolean boolean69 = logLevel64.log();
        retrofit.RestAdapter.Builder builder70 = builder0.setLogLevel(logLevel64);
        retrofit.Profiler profiler71 = null;
        builder70.profiler = profiler71;
        retrofit.Profiler profiler73 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder74 = builder70.setProfiler(profiler73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(server7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(restAdapter18);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNull(provider24);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(log59);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(builder70);
    }

    @Test
    public void test02713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02713");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        java.util.concurrent.Executor executor3 = builder0.callbackExecutor;
        java.util.concurrent.Executor executor4 = null;
        builder0.callbackExecutor = executor4;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler7 = builder6.errorHandler;
        retrofit.Server server10 = new retrofit.Server("", "");
        builder6.server = server10;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        builder6.log = log12;
        retrofit.RestAdapter.LogLevel logLevel14 = builder6.logLevel;
        retrofit.RestAdapter.Builder builder15 = builder0.setLogLevel(logLevel14);
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler17 = builder16.errorHandler;
        retrofit.client.Client.Provider provider18 = null;
        builder16.clientProvider = provider18;
        retrofit.Server server22 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder23 = builder16.setServer(server22);
        retrofit.converter.Converter converter24 = null;
        builder23.converter = converter24;
        retrofit.RestAdapter restAdapter26 = builder23.build();
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler28 = builder27.errorHandler;
        java.util.concurrent.Executor executor29 = null;
        builder27.callbackExecutor = executor29;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider32 = builder31.clientProvider;
        java.util.concurrent.Executor executor33 = null;
        builder31.callbackExecutor = executor33;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.Server server38 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder39 = builder35.setServer(server38);
        java.lang.String str40 = server38.getUrl();
        retrofit.RestAdapter.Builder builder41 = builder31.setServer(server38);
        retrofit.RestAdapter.Builder builder42 = builder27.setServer(server38);
        restAdapter26.server = server38;
        retrofit.client.Client.Provider provider44 = restAdapter26.clientProvider;
        retrofit.RestAdapter.Builder builder45 = builder15.setClient(provider44);
        retrofit.RestAdapter.LogLevel logLevel46 = builder45.logLevel;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler48 = builder47.errorHandler;
        java.util.concurrent.Executor executor49 = null;
        builder47.callbackExecutor = executor49;
        java.util.concurrent.Executor executor51 = null;
        builder47.httpExecutor = executor51;
        retrofit.Profiler profiler53 = null;
        builder47.profiler = profiler53;
        retrofit.RestAdapter.Builder builder56 = builder47.setServer("hi!");
        retrofit.Profiler profiler57 = builder47.profiler;
        retrofit.RestAdapter.Log log58 = builder47.log;
        retrofit.Server server59 = builder47.server;
        retrofit.RestAdapter.Builder builder60 = builder45.setServer(server59);
        java.util.concurrent.Executor executor61 = builder60.httpExecutor;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(restAdapter26);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertNull(provider32);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(provider44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler48);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(profiler57);
        org.junit.Assert.assertNull(log58);
        org.junit.Assert.assertNotNull(server59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(executor61);
    }

    @Test
    public void test02714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02714");
        retrofit.client.Header[] headerArray12 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList13 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList13, headerArray12);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList13, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList13, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList13, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList13, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList13, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("default", "", (java.util.List<retrofit.client.Header>) headerList13, typedOutput25);
        java.lang.String str27 = request26.getMethod();
        java.lang.String str28 = request26.getMethod();
        org.junit.Assert.assertNotNull(headerArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "default" + "'", str27, "default");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "default" + "'", str28, "default");
    }

    @Test
    public void test02715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02715");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server6 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder7 = builder0.setServer(server6);
        java.util.concurrent.Executor executor8 = builder0.httpExecutor;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor10 = restAdapter9.callbackExecutor;
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor12 = restAdapter11.callbackExecutor;
        java.util.concurrent.Executor executor13 = restAdapter11.callbackExecutor;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler15 = restAdapter14.errorHandler;
        retrofit.Server server18 = new retrofit.Server("", "");
        restAdapter14.server = server18;
        restAdapter11.server = server18;
        restAdapter9.server = server18;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler30 = builder29.errorHandler;
        retrofit.Server server33 = new retrofit.Server("", "");
        builder29.server = server33;
        retrofit.client.Client.Provider provider35 = null;
        java.util.concurrent.Executor executor36 = null;
        java.util.concurrent.Executor executor37 = null;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        retrofit.converter.Converter converter39 = null;
        retrofit.Profiler profiler40 = null;
        retrofit.ErrorHandler errorHandler41 = null;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler43 = builder42.errorHandler;
        retrofit.Server server46 = new retrofit.Server("", "");
        builder42.server = server46;
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        builder42.log = log48;
        retrofit.Server server50 = null;
        retrofit.client.Client.Provider provider51 = null;
        java.util.concurrent.Executor executor52 = null;
        java.util.concurrent.Executor executor53 = null;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        retrofit.converter.Converter converter55 = null;
        retrofit.Profiler profiler56 = null;
        retrofit.ErrorHandler errorHandler57 = null;
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        log58.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel61 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter(server50, provider51, executor52, executor53, requestInterceptor54, converter55, profiler56, errorHandler57, log58, logLevel61);
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter(server33, provider35, executor36, executor37, requestInterceptor38, converter39, profiler40, errorHandler41, log48, logLevel61);
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.Server server67 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder68 = builder64.setServer(server67);
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor70 = restAdapter69.callbackExecutor;
        java.util.concurrent.Executor executor71 = restAdapter69.callbackExecutor;
        retrofit.RestAdapter restAdapter72 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler73 = restAdapter72.errorHandler;
        retrofit.Server server76 = new retrofit.Server("", "");
        restAdapter72.server = server76;
        restAdapter69.server = server76;
        retrofit.RestAdapter.Log log79 = retrofit.RestAdapter.Log.NONE;
        restAdapter69.log = log79;
        retrofit.RestAdapter.Builder builder81 = builder68.setLog(log79);
        retrofit.RestAdapter.LogLevel logLevel82 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder83 = builder68.setLogLevel(logLevel82);
        retrofit.RestAdapter restAdapter84 = new retrofit.RestAdapter(server18, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log48, logLevel82);
        retrofit.RestAdapter.Builder builder85 = builder0.setLog(log48);
        retrofit.client.Client client86 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder87 = builder85.setClient(client86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNull(errorHandler30);
        org.junit.Assert.assertNull(errorHandler43);
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertNotNull(log58);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNull(executor70);
        org.junit.Assert.assertNull(executor71);
        org.junit.Assert.assertNull(errorHandler73);
        org.junit.Assert.assertNotNull(log79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
    }

    @Test
    public void test02716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02716");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        restAdapter0.requestInterceptor = requestInterceptor18;
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.Server server24 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder25 = builder21.setServer(server24);
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor27 = restAdapter26.callbackExecutor;
        java.util.concurrent.Executor executor28 = restAdapter26.callbackExecutor;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.Server server33 = new retrofit.Server("", "");
        restAdapter29.server = server33;
        restAdapter26.server = server33;
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        restAdapter26.log = log36;
        retrofit.RestAdapter.Builder builder38 = builder25.setLog(log36);
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder40 = builder25.setLogLevel(logLevel39);
        retrofit.Profiler profiler41 = null;
        builder40.profiler = profiler41;
        retrofit.converter.Converter converter43 = null;
        builder40.converter = converter43;
        retrofit.ErrorHandler errorHandler45 = null;
        builder40.errorHandler = errorHandler45;
        retrofit.RestAdapter restAdapter47 = builder40.build();
        retrofit.ErrorHandler errorHandler48 = builder40.errorHandler;
        restAdapter0.errorHandler = errorHandler48;
        retrofit.RequestInterceptor requestInterceptor50 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler52 = builder51.errorHandler;
        retrofit.client.Client.Provider provider53 = null;
        builder51.clientProvider = provider53;
        retrofit.Server server57 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder58 = builder51.setServer(server57);
        retrofit.converter.Converter converter59 = null;
        builder58.converter = converter59;
        retrofit.RestAdapter restAdapter61 = builder58.build();
        java.util.concurrent.Executor executor62 = restAdapter61.httpExecutor;
        restAdapter0.callbackExecutor = executor62;
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider65 = builder64.clientProvider;
        java.util.concurrent.Executor executor66 = null;
        builder64.callbackExecutor = executor66;
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        retrofit.Server server71 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder72 = builder68.setServer(server71);
        java.lang.String str73 = server71.getUrl();
        retrofit.RestAdapter.Builder builder74 = builder64.setServer(server71);
        builder64.ensureSaneDefaults();
        retrofit.Server server76 = null;
        retrofit.client.Client.Provider provider77 = null;
        java.util.concurrent.Executor executor78 = null;
        java.util.concurrent.Executor executor79 = null;
        retrofit.RequestInterceptor requestInterceptor80 = null;
        retrofit.converter.Converter converter81 = null;
        retrofit.Profiler profiler82 = null;
        retrofit.ErrorHandler errorHandler83 = null;
        retrofit.RestAdapter.Log log84 = retrofit.RestAdapter.Log.NONE;
        log84.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel87 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter88 = new retrofit.RestAdapter(server76, provider77, executor78, executor79, requestInterceptor80, converter81, profiler82, errorHandler83, log84, logLevel87);
        retrofit.RestAdapter.RestHandler restHandler89 = restAdapter88.new RestHandler();
        retrofit.RestAdapter.Log log90 = retrofit.RestAdapter.Log.NONE;
        restAdapter88.log = log90;
        retrofit.RestAdapter.Builder builder92 = builder64.setLog(log90);
        retrofit.RestAdapter.Builder builder94 = builder64.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor95 = builder64.requestInterceptor;
        restAdapter0.requestInterceptor = requestInterceptor95;
        java.util.concurrent.Executor executor97 = restAdapter0.httpExecutor;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNull(errorHandler30);
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(restAdapter47);
        org.junit.Assert.assertNotNull(errorHandler48);
        org.junit.Assert.assertNull(requestInterceptor50);
        org.junit.Assert.assertNull(errorHandler52);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(restAdapter61);
        org.junit.Assert.assertNotNull(executor62);
        org.junit.Assert.assertNull(provider65);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "hi!" + "'", str73, "hi!");
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(log84);
        org.junit.Assert.assertTrue("'" + logLevel87 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel87.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log90);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(requestInterceptor95);
        org.junit.Assert.assertNull(executor97);
    }

    @Test
    public void test02717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02717");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        restAdapter5.log = log15;
        retrofit.RestAdapter.Builder builder17 = builder4.setLog(log15);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder19 = builder4.setLogLevel(logLevel18);
        retrofit.Profiler profiler20 = null;
        builder19.profiler = profiler20;
        retrofit.converter.Converter converter22 = null;
        builder19.converter = converter22;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor25 = restAdapter24.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler26 = restAdapter24.new RestHandler();
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor28 = restAdapter27.callbackExecutor;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor30 = restAdapter29.callbackExecutor;
        java.util.concurrent.Executor executor31 = restAdapter29.callbackExecutor;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler33 = restAdapter32.errorHandler;
        retrofit.Server server36 = new retrofit.Server("", "");
        restAdapter32.server = server36;
        restAdapter29.server = server36;
        restAdapter27.server = server36;
        retrofit.Profiler profiler40 = restAdapter27.profiler;
        retrofit.ErrorHandler errorHandler41 = null;
        restAdapter27.errorHandler = errorHandler41;
        retrofit.Profiler profiler43 = null;
        restAdapter27.profiler = profiler43;
        retrofit.RestAdapter.LogLevel logLevel45 = restAdapter27.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter27.logLevel = logLevel46;
        restAdapter24.logLevel = logLevel46;
        retrofit.RestAdapter.Builder builder49 = builder19.setLogLevel(logLevel46);
        retrofit.Profiler profiler50 = builder49.profiler;
        retrofit.RestAdapter.Log log51 = builder49.log;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNull(errorHandler33);
        org.junit.Assert.assertNull(profiler40);
        org.junit.Assert.assertNull(logLevel45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(profiler50);
        org.junit.Assert.assertNotNull(log51);
    }

    @Test
    public void test02718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02718");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RequestInterceptor requestInterceptor1 = null;
        builder0.requestInterceptor = requestInterceptor1;
        retrofit.Server server3 = null;
        retrofit.client.Client.Provider provider4 = null;
        java.util.concurrent.Executor executor5 = null;
        java.util.concurrent.Executor executor6 = null;
        retrofit.RequestInterceptor requestInterceptor7 = null;
        retrofit.converter.Converter converter8 = null;
        retrofit.Profiler profiler9 = null;
        retrofit.ErrorHandler errorHandler10 = null;
        retrofit.RestAdapter.Log log11 = retrofit.RestAdapter.Log.NONE;
        log11.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter(server3, provider4, executor5, executor6, requestInterceptor7, converter8, profiler9, errorHandler10, log11, logLevel14);
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter15.new RestHandler();
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        restAdapter15.log = log17;
        retrofit.converter.Converter converter19 = null;
        restAdapter15.converter = converter19;
        retrofit.RestAdapter.LogLevel logLevel21 = restAdapter15.getLogLevel();
        builder0.logLevel = logLevel21;
        retrofit.RequestInterceptor requestInterceptor23 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler25 = null;
        builder24.errorHandler = errorHandler25;
        retrofit.ErrorHandler errorHandler27 = builder24.errorHandler;
        retrofit.RestAdapter.Builder builder29 = builder24.setServer("hi!");
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider31 = builder30.clientProvider;
        java.util.concurrent.Executor executor32 = null;
        builder30.callbackExecutor = executor32;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.Server server37 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder38 = builder34.setServer(server37);
        java.lang.String str39 = server37.getUrl();
        retrofit.RestAdapter.Builder builder40 = builder30.setServer(server37);
        retrofit.RestAdapter.Builder builder41 = builder29.setServer(server37);
        retrofit.converter.Converter converter42 = builder41.converter;
        retrofit.RequestInterceptor requestInterceptor43 = builder41.requestInterceptor;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor45 = restAdapter44.callbackExecutor;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor47 = restAdapter46.callbackExecutor;
        java.util.concurrent.Executor executor48 = restAdapter46.callbackExecutor;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler50 = restAdapter49.errorHandler;
        retrofit.Server server53 = new retrofit.Server("", "");
        restAdapter49.server = server53;
        restAdapter46.server = server53;
        restAdapter44.server = server53;
        retrofit.Profiler profiler57 = restAdapter44.profiler;
        retrofit.ErrorHandler errorHandler58 = restAdapter44.errorHandler;
        java.util.concurrent.Executor executor59 = restAdapter44.httpExecutor;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler61 = builder60.errorHandler;
        java.util.concurrent.Executor executor62 = builder60.callbackExecutor;
        retrofit.RestAdapter.Builder builder64 = builder60.setServer("hi!");
        builder64.ensureSaneDefaults();
        java.util.concurrent.Executor executor66 = builder64.callbackExecutor;
        restAdapter44.callbackExecutor = executor66;
        builder41.callbackExecutor = executor66;
        builder0.callbackExecutor = executor66;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter70 = builder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(log11);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(requestInterceptor23);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(provider31);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(converter42);
        org.junit.Assert.assertNull(requestInterceptor43);
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertNull(executor47);
        org.junit.Assert.assertNull(executor48);
        org.junit.Assert.assertNull(errorHandler50);
        org.junit.Assert.assertNull(profiler57);
        org.junit.Assert.assertNull(errorHandler58);
        org.junit.Assert.assertNull(executor59);
        org.junit.Assert.assertNull(errorHandler61);
        org.junit.Assert.assertNull(executor62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(executor66);
    }

    @Test
    public void test02719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02719");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter0.new RestHandler();
        retrofit.client.Client.Provider provider4 = restAdapter0.clientProvider;
        retrofit.Server server5 = null;
        retrofit.client.Client.Provider provider6 = null;
        java.util.concurrent.Executor executor7 = null;
        java.util.concurrent.Executor executor8 = null;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        retrofit.converter.Converter converter10 = null;
        retrofit.Profiler profiler11 = null;
        retrofit.ErrorHandler errorHandler12 = null;
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        log13.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server5, provider6, executor7, executor8, requestInterceptor9, converter10, profiler11, errorHandler12, log13, logLevel16);
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter17.new RestHandler();
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        restAdapter17.log = log19;
        retrofit.converter.Converter converter21 = null;
        restAdapter17.converter = converter21;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.Server server26 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder27 = builder23.setServer(server26);
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor29 = restAdapter28.callbackExecutor;
        java.util.concurrent.Executor executor30 = restAdapter28.callbackExecutor;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler32 = restAdapter31.errorHandler;
        retrofit.Server server35 = new retrofit.Server("", "");
        restAdapter31.server = server35;
        restAdapter28.server = server35;
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        restAdapter28.log = log38;
        retrofit.RestAdapter.Builder builder40 = builder27.setLog(log38);
        restAdapter17.log = log38;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler43 = builder42.errorHandler;
        retrofit.Server server46 = new retrofit.Server("", "");
        builder42.server = server46;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor49 = restAdapter48.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler50 = restAdapter48.new RestHandler();
        retrofit.Server server53 = new retrofit.Server("hi!", "hi!");
        restAdapter48.server = server53;
        retrofit.RestAdapter.Builder builder55 = builder42.setServer(server53);
        restAdapter17.server = server53;
        retrofit.Profiler profiler57 = restAdapter17.profiler;
        retrofit.RestAdapter.LogLevel logLevel58 = restAdapter17.getLogLevel();
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.setLogLevel(logLevel58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log level may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(provider4);
        org.junit.Assert.assertNotNull(log13);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNull(errorHandler32);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(errorHandler43);
        org.junit.Assert.assertNull(executor49);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(profiler57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test02720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02720");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.ErrorHandler errorHandler3 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder7 = builder5.setServer("hi!");
        retrofit.ErrorHandler errorHandler8 = builder5.errorHandler;
        retrofit.Server server11 = new retrofit.Server("", "");
        builder5.server = server11;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor14 = restAdapter13.callbackExecutor;
        java.util.concurrent.Executor executor15 = restAdapter13.callbackExecutor;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler17 = restAdapter16.errorHandler;
        retrofit.Server server20 = new retrofit.Server("", "");
        restAdapter16.server = server20;
        restAdapter13.server = server20;
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter13.logLevel;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        restAdapter13.requestInterceptor = requestInterceptor24;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler27 = builder26.errorHandler;
        retrofit.ErrorHandler errorHandler28 = builder26.errorHandler;
        retrofit.RestAdapter.Log log29 = null;
        builder26.log = log29;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean32 = logLevel31.log();
        builder26.logLevel = logLevel31;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler35 = restAdapter34.new RestHandler();
        java.util.concurrent.Executor executor36 = null;
        restAdapter34.callbackExecutor = executor36;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor39 = restAdapter38.callbackExecutor;
        java.util.concurrent.Executor executor40 = restAdapter38.callbackExecutor;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler42 = restAdapter41.errorHandler;
        retrofit.Server server45 = new retrofit.Server("", "");
        restAdapter41.server = server45;
        restAdapter38.server = server45;
        restAdapter34.server = server45;
        retrofit.RestAdapter.Builder builder49 = builder26.setServer(server45);
        java.lang.String str50 = server45.getUrl();
        restAdapter13.server = server45;
        retrofit.RestAdapter.Builder builder52 = builder5.setServer(server45);
        java.util.concurrent.Executor executor53 = builder52.httpExecutor;
        retrofit.RestAdapter.Log log54 = builder52.log;
        java.util.concurrent.Executor executor55 = builder52.httpExecutor;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.Server server59 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder60 = builder56.setServer(server59);
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor62 = restAdapter61.callbackExecutor;
        java.util.concurrent.Executor executor63 = restAdapter61.callbackExecutor;
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler65 = restAdapter64.errorHandler;
        retrofit.Server server68 = new retrofit.Server("", "");
        restAdapter64.server = server68;
        restAdapter61.server = server68;
        retrofit.RestAdapter.Log log71 = retrofit.RestAdapter.Log.NONE;
        restAdapter61.log = log71;
        retrofit.RestAdapter.Builder builder73 = builder60.setLog(log71);
        retrofit.RestAdapter.LogLevel logLevel74 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder75 = builder60.setLogLevel(logLevel74);
        retrofit.Profiler profiler76 = null;
        builder75.profiler = profiler76;
        retrofit.converter.Converter converter78 = null;
        builder75.converter = converter78;
        retrofit.ErrorHandler errorHandler80 = null;
        builder75.errorHandler = errorHandler80;
        retrofit.RestAdapter restAdapter82 = builder75.build();
        retrofit.converter.Converter converter83 = builder75.converter;
        retrofit.RestAdapter.Builder builder84 = builder52.setConverter(converter83);
        retrofit.RestAdapter.LogLevel logLevel85 = builder52.logLevel;
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNull(executor40);
        org.junit.Assert.assertNull(errorHandler42);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(executor53);
        org.junit.Assert.assertNull(log54);
        org.junit.Assert.assertNull(executor55);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(executor62);
        org.junit.Assert.assertNull(executor63);
        org.junit.Assert.assertNull(errorHandler65);
        org.junit.Assert.assertNotNull(log71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(restAdapter82);
        org.junit.Assert.assertNotNull(converter83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertTrue("'" + logLevel85 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel85.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test02721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02721");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        restAdapter5.log = log15;
        retrofit.RestAdapter.Builder builder17 = builder4.setLog(log15);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder19 = builder4.setLogLevel(logLevel18);
        retrofit.Profiler profiler20 = null;
        builder19.profiler = profiler20;
        retrofit.converter.Converter converter22 = null;
        builder19.converter = converter22;
        retrofit.ErrorHandler errorHandler24 = null;
        builder19.errorHandler = errorHandler24;
        retrofit.RestAdapter.LogLevel logLevel26 = builder19.logLevel;
        retrofit.Profiler profiler27 = null;
        builder19.profiler = profiler27;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.Server server32 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder33 = builder29.setServer(server32);
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor35 = restAdapter34.callbackExecutor;
        java.util.concurrent.Executor executor36 = restAdapter34.callbackExecutor;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler38 = restAdapter37.errorHandler;
        retrofit.Server server41 = new retrofit.Server("", "");
        restAdapter37.server = server41;
        restAdapter34.server = server41;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        restAdapter34.log = log44;
        retrofit.RestAdapter.Builder builder46 = builder33.setLog(log44);
        retrofit.RestAdapter.Builder builder47 = builder19.setLog(log44);
        retrofit.client.Client client48 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder49 = builder47.setClient(client48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertNull(executor36);
        org.junit.Assert.assertNull(errorHandler38);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test02722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02722");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        restAdapter12.log = log14;
        retrofit.converter.Converter converter16 = null;
        restAdapter12.converter = converter16;
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter12.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor19 = restAdapter12.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter12.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler21 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler23 = builder22.errorHandler;
        retrofit.ErrorHandler errorHandler24 = builder22.errorHandler;
        retrofit.Profiler profiler25 = builder22.profiler;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor27 = restAdapter26.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler28 = restAdapter26.new RestHandler();
        retrofit.Server server31 = new retrofit.Server("hi!", "hi!");
        restAdapter26.server = server31;
        retrofit.RestAdapter.Builder builder33 = builder22.setServer(server31);
        retrofit.converter.Converter converter34 = null;
        builder33.converter = converter34;
        retrofit.Profiler profiler36 = null;
        builder33.profiler = profiler36;
        retrofit.RestAdapter restAdapter38 = builder33.build();
        retrofit.client.Header[] headerArray45 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList46 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList46, headerArray45);
        retrofit.mime.TypedOutput typedOutput48 = null;
        retrofit.client.Request request49 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList46, typedOutput48);
        retrofit.mime.TypedOutput typedOutput50 = null;
        retrofit.client.Request request51 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList46, typedOutput50);
        retrofit.mime.TypedOutput typedOutput52 = null;
        retrofit.client.Request request53 = new retrofit.client.Request("", "default", (java.util.List<retrofit.client.Header>) headerList46, typedOutput52);
        retrofit.client.Request request54 = restAdapter38.logAndReplaceRequest(request53);
        retrofit.RestAdapter.Log log55 = restAdapter38.log;
        log55.log("default");
        restAdapter12.log = log55;
        retrofit.Profiler profiler59 = restAdapter12.profiler;
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNull(requestInterceptor19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNull(profiler25);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(restAdapter38);
        org.junit.Assert.assertNotNull(headerArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(request54);
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertNull(profiler59);
    }

    @Test
    public void test02723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02723");
        retrofit.client.Header[] headerArray10 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList11 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList11, headerArray10);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList11, typedOutput13);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("", "default", (java.util.List<retrofit.client.Header>) headerList11, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList11, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("", "default", (java.util.List<retrofit.client.Header>) headerList11, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("default", "hi!", (java.util.List<retrofit.client.Header>) headerList11, typedOutput21);
        org.junit.Assert.assertNotNull(headerArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test02724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02724");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter0.getLogLevel();
        retrofit.ErrorHandler errorHandler20 = null;
        restAdapter0.errorHandler = errorHandler20;
        retrofit.client.Client.Provider provider22 = null;
        restAdapter0.clientProvider = provider22;
        retrofit.ErrorHandler errorHandler24 = restAdapter0.errorHandler;
        retrofit.converter.Converter converter25 = null;
        restAdapter0.converter = converter25;
        retrofit.client.Response response28 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response30 = restAdapter0.logAndReplaceResponse("default", response28, (long) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(errorHandler24);
    }

    @Test
    public void test02725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02725");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.Server server6 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder7 = builder3.setServer(server6);
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor9 = restAdapter8.callbackExecutor;
        java.util.concurrent.Executor executor10 = restAdapter8.callbackExecutor;
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler12 = restAdapter11.errorHandler;
        retrofit.Server server15 = new retrofit.Server("", "");
        restAdapter11.server = server15;
        restAdapter8.server = server15;
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        restAdapter8.log = log18;
        retrofit.RestAdapter.Builder builder20 = builder7.setLog(log18);
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder22 = builder7.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler24 = builder23.errorHandler;
        retrofit.client.Client.Provider provider25 = null;
        builder23.clientProvider = provider25;
        retrofit.Server server29 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder30 = builder23.setServer(server29);
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor32 = restAdapter31.callbackExecutor;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor34 = restAdapter33.callbackExecutor;
        java.util.concurrent.Executor executor35 = restAdapter33.callbackExecutor;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler37 = restAdapter36.errorHandler;
        retrofit.Server server40 = new retrofit.Server("", "");
        restAdapter36.server = server40;
        restAdapter33.server = server40;
        restAdapter31.server = server40;
        retrofit.Profiler profiler44 = restAdapter31.profiler;
        retrofit.ErrorHandler errorHandler45 = null;
        restAdapter31.errorHandler = errorHandler45;
        retrofit.Profiler profiler47 = null;
        restAdapter31.profiler = profiler47;
        retrofit.RestAdapter.RestHandler restHandler49 = restAdapter31.new RestHandler();
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.Server server53 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder54 = builder50.setServer(server53);
        retrofit.converter.Converter converter55 = builder50.converter;
        retrofit.RequestInterceptor requestInterceptor56 = builder50.requestInterceptor;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider58 = builder57.clientProvider;
        java.util.concurrent.Executor executor59 = null;
        builder57.callbackExecutor = executor59;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.Server server64 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder65 = builder61.setServer(server64);
        java.lang.String str66 = server64.getUrl();
        retrofit.RestAdapter.Builder builder67 = builder57.setServer(server64);
        builder57.ensureSaneDefaults();
        retrofit.Server server69 = null;
        retrofit.client.Client.Provider provider70 = null;
        java.util.concurrent.Executor executor71 = null;
        java.util.concurrent.Executor executor72 = null;
        retrofit.RequestInterceptor requestInterceptor73 = null;
        retrofit.converter.Converter converter74 = null;
        retrofit.Profiler profiler75 = null;
        retrofit.ErrorHandler errorHandler76 = null;
        retrofit.RestAdapter.Log log77 = retrofit.RestAdapter.Log.NONE;
        log77.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel80 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter81 = new retrofit.RestAdapter(server69, provider70, executor71, executor72, requestInterceptor73, converter74, profiler75, errorHandler76, log77, logLevel80);
        retrofit.RestAdapter.RestHandler restHandler82 = restAdapter81.new RestHandler();
        retrofit.RestAdapter.Log log83 = retrofit.RestAdapter.Log.NONE;
        restAdapter81.log = log83;
        retrofit.RestAdapter.Builder builder85 = builder57.setLog(log83);
        retrofit.RestAdapter.Builder builder87 = builder57.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor88 = builder57.requestInterceptor;
        builder50.requestInterceptor = requestInterceptor88;
        restAdapter31.requestInterceptor = requestInterceptor88;
        builder23.requestInterceptor = requestInterceptor88;
        retrofit.RestAdapter.Builder builder92 = builder22.setRequestInterceptor(requestInterceptor88);
        builder0.requestInterceptor = requestInterceptor88;
        retrofit.ErrorHandler errorHandler94 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder96 = builder0.setServer("default");
        retrofit.Profiler profiler97 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder98 = builder96.setProfiler(profiler97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNotNull(log18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(executor34);
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNull(profiler44);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(converter55);
        org.junit.Assert.assertNull(requestInterceptor56);
        org.junit.Assert.assertNull(provider58);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hi!" + "'", str66, "hi!");
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(log77);
        org.junit.Assert.assertTrue("'" + logLevel80 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel80.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(requestInterceptor88);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNull(errorHandler94);
        org.junit.Assert.assertNotNull(builder96);
    }

    @Test
    public void test02726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02726");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.ErrorHandler errorHandler3 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor6 = builder0.callbackExecutor;
        retrofit.ErrorHandler errorHandler7 = builder0.errorHandler;
        retrofit.client.Client.Provider provider8 = builder0.clientProvider;
        retrofit.Profiler profiler9 = builder0.profiler;
        java.util.concurrent.Executor executor10 = builder0.callbackExecutor;
        retrofit.Profiler profiler11 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder12 = builder0.setProfiler(profiler11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNull(profiler9);
        org.junit.Assert.assertNull(executor10);
    }

    @Test
    public void test02727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02727");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server4 = new retrofit.Server("", "");
        builder0.server = server4;
        java.util.concurrent.Executor executor6 = builder0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel7 = null;
        builder0.logLevel = logLevel7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler10 = builder9.errorHandler;
        retrofit.client.Client.Provider provider11 = null;
        builder9.clientProvider = provider11;
        retrofit.Server server15 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder16 = builder9.setServer(server15);
        retrofit.converter.Converter converter17 = null;
        builder16.converter = converter17;
        retrofit.RestAdapter restAdapter19 = builder16.build();
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler21 = builder20.errorHandler;
        java.util.concurrent.Executor executor22 = null;
        builder20.callbackExecutor = executor22;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider25 = builder24.clientProvider;
        java.util.concurrent.Executor executor26 = null;
        builder24.callbackExecutor = executor26;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.Server server31 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder32 = builder28.setServer(server31);
        java.lang.String str33 = server31.getUrl();
        retrofit.RestAdapter.Builder builder34 = builder24.setServer(server31);
        retrofit.RestAdapter.Builder builder35 = builder20.setServer(server31);
        restAdapter19.server = server31;
        java.util.concurrent.Executor executor37 = restAdapter19.httpExecutor;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler39 = builder38.errorHandler;
        retrofit.Server server42 = new retrofit.Server("", "");
        builder38.server = server42;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        builder38.log = log44;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler47 = builder46.errorHandler;
        retrofit.client.Client.Provider provider48 = null;
        builder46.clientProvider = provider48;
        retrofit.Server server52 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder53 = builder46.setServer(server52);
        retrofit.converter.Converter converter54 = null;
        builder53.converter = converter54;
        retrofit.RestAdapter restAdapter56 = builder53.build();
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler58 = builder57.errorHandler;
        java.util.concurrent.Executor executor59 = null;
        builder57.callbackExecutor = executor59;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider62 = builder61.clientProvider;
        java.util.concurrent.Executor executor63 = null;
        builder61.callbackExecutor = executor63;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.Server server68 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder69 = builder65.setServer(server68);
        java.lang.String str70 = server68.getUrl();
        retrofit.RestAdapter.Builder builder71 = builder61.setServer(server68);
        retrofit.RestAdapter.Builder builder72 = builder57.setServer(server68);
        restAdapter56.server = server68;
        java.util.concurrent.Executor executor74 = restAdapter56.httpExecutor;
        builder38.httpExecutor = executor74;
        retrofit.RestAdapter.Builder builder76 = builder0.setExecutors(executor37, executor74);
        retrofit.converter.Converter converter77 = builder76.converter;
        retrofit.Profiler profiler78 = builder76.profiler;
        retrofit.RequestInterceptor requestInterceptor79 = builder76.requestInterceptor;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(restAdapter19);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(provider25);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(executor37);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNull(errorHandler47);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(restAdapter56);
        org.junit.Assert.assertNull(errorHandler58);
        org.junit.Assert.assertNull(provider62);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hi!" + "'", str70, "hi!");
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(executor74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNull(converter77);
        org.junit.Assert.assertNull(profiler78);
        org.junit.Assert.assertNull(requestInterceptor79);
    }

    @Test
    public void test02728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02728");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.util.List<retrofit.client.Header> headerList7 = request6.getHeaders();
        java.util.List<retrofit.client.Header> headerList8 = request6.getHeaders();
        retrofit.mime.TypedOutput typedOutput9 = request6.getBody();
        java.util.List<retrofit.client.Header> headerList10 = request6.getHeaders();
        java.util.List<retrofit.client.Header> headerList11 = request6.getHeaders();
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(headerList7);
        org.junit.Assert.assertNotNull(headerList8);
        org.junit.Assert.assertNull(typedOutput9);
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertNotNull(headerList11);
    }

    @Test
    public void test02729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02729");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter3 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler4 = restAdapter3.errorHandler;
        retrofit.Server server7 = new retrofit.Server("", "");
        restAdapter3.server = server7;
        restAdapter0.server = server7;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.Server server14 = new retrofit.Server("", "");
        restAdapter10.server = server14;
        restAdapter0.server = server14;
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Log log20 = restAdapter0.log;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(errorHandler4);
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(log20);
    }

    @Test
    public void test02730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02730");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = builder0.clientProvider;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        java.lang.Class<?> wildcardClass4 = builder0.getClass();
        org.junit.Assert.assertNull(provider1);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test02731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02731");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter0.getLogLevel();
        retrofit.client.Client.Provider provider20 = null;
        restAdapter0.clientProvider = provider20;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean23 = logLevel22.log();
        restAdapter0.logLevel = logLevel22;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        restAdapter0.requestInterceptor = requestInterceptor25;
        retrofit.RestAdapter.RestHandler restHandler27 = restAdapter0.new RestHandler();
        retrofit.Profiler profiler28 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler29 = restAdapter0.new RestHandler();
        retrofit.Server server30 = null;
        retrofit.client.Client.Provider provider31 = null;
        java.util.concurrent.Executor executor32 = null;
        java.util.concurrent.Executor executor33 = null;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        retrofit.converter.Converter converter35 = null;
        retrofit.Profiler profiler36 = null;
        retrofit.ErrorHandler errorHandler37 = null;
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        log38.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter(server30, provider31, executor32, executor33, requestInterceptor34, converter35, profiler36, errorHandler37, log38, logLevel41);
        retrofit.RestAdapter.RestHandler restHandler43 = restAdapter42.new RestHandler();
        java.util.concurrent.Executor executor44 = null;
        restAdapter42.callbackExecutor = executor44;
        retrofit.client.Header[] headerArray48 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList49 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList49, headerArray48);
        retrofit.mime.TypedOutput typedOutput51 = null;
        retrofit.client.Request request52 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList49, typedOutput51);
        retrofit.client.Request request53 = restAdapter42.logAndReplaceRequest(request52);
        retrofit.client.Client.Provider provider54 = restAdapter42.clientProvider;
        retrofit.RestAdapter.RestHandler restHandler55 = restAdapter42.new RestHandler();
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler57 = builder56.errorHandler;
        java.util.concurrent.Executor executor58 = builder56.callbackExecutor;
        retrofit.RestAdapter.Builder builder60 = builder56.setServer("hi!");
        retrofit.Server server63 = new retrofit.Server("default", "hi!");
        java.lang.String str64 = server63.getUrl();
        retrofit.RestAdapter.Builder builder65 = builder60.setServer(server63);
        retrofit.RestAdapter.LogLevel logLevel66 = builder65.logLevel;
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        retrofit.Server server70 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder71 = builder67.setServer(server70);
        retrofit.RestAdapter restAdapter72 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor73 = restAdapter72.callbackExecutor;
        java.util.concurrent.Executor executor74 = restAdapter72.callbackExecutor;
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler76 = restAdapter75.errorHandler;
        retrofit.Server server79 = new retrofit.Server("", "");
        restAdapter75.server = server79;
        restAdapter72.server = server79;
        retrofit.RestAdapter.Log log82 = retrofit.RestAdapter.Log.NONE;
        restAdapter72.log = log82;
        retrofit.RestAdapter.Builder builder84 = builder71.setLog(log82);
        retrofit.RestAdapter.LogLevel logLevel85 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder86 = builder71.setLogLevel(logLevel85);
        retrofit.Profiler profiler87 = null;
        builder86.profiler = profiler87;
        retrofit.converter.Converter converter89 = null;
        builder86.converter = converter89;
        retrofit.ErrorHandler errorHandler91 = null;
        builder86.errorHandler = errorHandler91;
        retrofit.RestAdapter restAdapter93 = builder86.build();
        retrofit.ErrorHandler errorHandler94 = builder86.errorHandler;
        builder65.errorHandler = errorHandler94;
        restAdapter42.errorHandler = errorHandler94;
        retrofit.RestAdapter.Log log97 = restAdapter42.log;
        restAdapter0.log = log97;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(profiler28);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(request53);
        org.junit.Assert.assertNull(provider54);
        org.junit.Assert.assertNull(errorHandler57);
        org.junit.Assert.assertNull(executor58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "default" + "'", str64, "default");
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNull(executor73);
        org.junit.Assert.assertNull(executor74);
        org.junit.Assert.assertNull(errorHandler76);
        org.junit.Assert.assertNotNull(log82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertTrue("'" + logLevel85 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel85.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(restAdapter93);
        org.junit.Assert.assertNotNull(errorHandler94);
        org.junit.Assert.assertNotNull(log97);
    }

    @Test
    public void test02732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02732");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler6 = builder5.errorHandler;
        retrofit.client.Client.Provider provider7 = null;
        builder5.clientProvider = provider7;
        retrofit.Server server11 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder12 = builder5.setServer(server11);
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        log28.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log28, logLevel31);
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server11, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log28, logLevel33);
        builder0.logLevel = logLevel33;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.Server server39 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder40 = builder36.setServer(server39);
        retrofit.converter.Converter converter41 = builder36.converter;
        retrofit.RequestInterceptor requestInterceptor42 = builder36.requestInterceptor;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider44 = builder43.clientProvider;
        java.util.concurrent.Executor executor45 = null;
        builder43.callbackExecutor = executor45;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.Server server50 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder51 = builder47.setServer(server50);
        java.lang.String str52 = server50.getUrl();
        retrofit.RestAdapter.Builder builder53 = builder43.setServer(server50);
        builder43.ensureSaneDefaults();
        retrofit.Server server55 = null;
        retrofit.client.Client.Provider provider56 = null;
        java.util.concurrent.Executor executor57 = null;
        java.util.concurrent.Executor executor58 = null;
        retrofit.RequestInterceptor requestInterceptor59 = null;
        retrofit.converter.Converter converter60 = null;
        retrofit.Profiler profiler61 = null;
        retrofit.ErrorHandler errorHandler62 = null;
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        log63.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel66 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter(server55, provider56, executor57, executor58, requestInterceptor59, converter60, profiler61, errorHandler62, log63, logLevel66);
        retrofit.RestAdapter.RestHandler restHandler68 = restAdapter67.new RestHandler();
        retrofit.RestAdapter.Log log69 = retrofit.RestAdapter.Log.NONE;
        restAdapter67.log = log69;
        retrofit.RestAdapter.Builder builder71 = builder43.setLog(log69);
        retrofit.RestAdapter.Builder builder73 = builder43.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor74 = builder43.requestInterceptor;
        builder36.requestInterceptor = requestInterceptor74;
        retrofit.RestAdapter.Builder builder76 = builder0.setRequestInterceptor(requestInterceptor74);
        retrofit.ErrorHandler errorHandler77 = builder0.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel78 = builder0.logLevel;
        boolean boolean79 = logLevel78.log();
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(converter41);
        org.junit.Assert.assertNull(requestInterceptor42);
        org.junit.Assert.assertNull(provider44);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(requestInterceptor74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNull(errorHandler77);
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test02733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02733");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.Profiler profiler13 = restAdapter12.profiler;
        retrofit.client.Header[] headerArray28 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList29 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList29, headerArray28);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList29, typedOutput31);
        retrofit.mime.TypedOutput typedOutput33 = null;
        retrofit.client.Request request34 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList29, typedOutput33);
        retrofit.mime.TypedOutput typedOutput35 = null;
        retrofit.client.Request request36 = new retrofit.client.Request("default", "", (java.util.List<retrofit.client.Header>) headerList29, typedOutput35);
        retrofit.mime.TypedOutput typedOutput37 = null;
        retrofit.client.Request request38 = new retrofit.client.Request("default", "", (java.util.List<retrofit.client.Header>) headerList29, typedOutput37);
        java.util.List<retrofit.client.Header> headerList39 = request38.getHeaders();
        retrofit.mime.TypedOutput typedOutput40 = null;
        retrofit.client.Request request41 = new retrofit.client.Request("", "hi!", headerList39, typedOutput40);
        retrofit.mime.TypedOutput typedOutput42 = null;
        retrofit.client.Request request43 = new retrofit.client.Request("hi!", "default", headerList39, typedOutput42);
        retrofit.mime.TypedOutput typedOutput44 = null;
        retrofit.client.Request request45 = new retrofit.client.Request("default", "hi!", headerList39, typedOutput44);
        java.util.List<retrofit.client.Header> headerList46 = request45.getHeaders();
        retrofit.client.Request request47 = restAdapter12.logAndReplaceRequest(request45);
        retrofit.RestAdapter.RestHandler restHandler48 = restAdapter12.new RestHandler();
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNotNull(headerArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(headerList39);
        org.junit.Assert.assertNotNull(headerList46);
        org.junit.Assert.assertNotNull(request47);
    }

    @Test
    public void test02734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02734");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.converter.Converter converter4 = builder0.converter;
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("default");
        java.util.concurrent.Executor executor7 = builder6.callbackExecutor;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler9 = builder8.errorHandler;
        java.util.concurrent.Executor executor10 = builder8.callbackExecutor;
        retrofit.RestAdapter.Builder builder12 = builder8.setServer("hi!");
        builder12.ensureSaneDefaults();
        java.util.concurrent.Executor executor14 = builder12.callbackExecutor;
        builder6.callbackExecutor = executor14;
        retrofit.Profiler profiler16 = builder6.profiler;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.Server server20 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder21 = builder17.setServer(server20);
        retrofit.RestAdapter.LogLevel logLevel22 = builder21.logLevel;
        java.util.concurrent.Executor executor23 = builder21.httpExecutor;
        retrofit.RestAdapter restAdapter24 = builder21.build();
        retrofit.ErrorHandler errorHandler25 = builder21.errorHandler;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler27 = builder26.errorHandler;
        retrofit.RequestInterceptor requestInterceptor28 = builder26.requestInterceptor;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler30 = null;
        builder29.errorHandler = errorHandler30;
        retrofit.ErrorHandler errorHandler32 = builder29.errorHandler;
        retrofit.RestAdapter.Builder builder34 = builder29.setServer("hi!");
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler36 = builder35.errorHandler;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.Server server40 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder41 = builder37.setServer(server40);
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor43 = restAdapter42.callbackExecutor;
        java.util.concurrent.Executor executor44 = restAdapter42.callbackExecutor;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler46 = restAdapter45.errorHandler;
        retrofit.Server server49 = new retrofit.Server("", "");
        restAdapter45.server = server49;
        restAdapter42.server = server49;
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        restAdapter42.log = log52;
        retrofit.RestAdapter.Builder builder54 = builder41.setLog(log52);
        retrofit.RestAdapter.Builder builder55 = builder35.setLog(log52);
        builder29.log = log52;
        retrofit.RestAdapter.LogLevel logLevel57 = builder29.logLevel;
        retrofit.RestAdapter.Builder builder58 = builder26.setLogLevel(logLevel57);
        retrofit.Profiler profiler59 = builder26.profiler;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler61 = restAdapter60.new RestHandler();
        java.util.concurrent.Executor executor62 = null;
        restAdapter60.httpExecutor = executor62;
        retrofit.RestAdapter.RestHandler restHandler64 = restAdapter60.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel65 = restAdapter60.logLevel;
        retrofit.ErrorHandler errorHandler66 = null;
        restAdapter60.errorHandler = errorHandler66;
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        retrofit.Server server71 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder72 = builder68.setServer(server71);
        retrofit.RestAdapter restAdapter73 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor74 = restAdapter73.callbackExecutor;
        java.util.concurrent.Executor executor75 = restAdapter73.callbackExecutor;
        retrofit.RestAdapter restAdapter76 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler77 = restAdapter76.errorHandler;
        retrofit.Server server80 = new retrofit.Server("", "");
        restAdapter76.server = server80;
        restAdapter73.server = server80;
        retrofit.RestAdapter.Log log83 = retrofit.RestAdapter.Log.NONE;
        restAdapter73.log = log83;
        retrofit.RestAdapter.Builder builder85 = builder72.setLog(log83);
        retrofit.RestAdapter.LogLevel logLevel86 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder87 = builder72.setLogLevel(logLevel86);
        retrofit.Profiler profiler88 = null;
        builder87.profiler = profiler88;
        retrofit.converter.Converter converter90 = null;
        builder87.converter = converter90;
        retrofit.ErrorHandler errorHandler92 = null;
        builder87.errorHandler = errorHandler92;
        retrofit.RestAdapter restAdapter94 = builder87.build();
        retrofit.ErrorHandler errorHandler95 = builder87.errorHandler;
        restAdapter60.errorHandler = errorHandler95;
        retrofit.RestAdapter.Builder builder97 = builder26.setErrorHandler(errorHandler95);
        retrofit.RestAdapter.Builder builder98 = builder21.setErrorHandler(errorHandler95);
        retrofit.RestAdapter.Builder builder99 = builder6.setErrorHandler(errorHandler95);
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(executor14);
        org.junit.Assert.assertNull(profiler16);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNotNull(restAdapter24);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNull(requestInterceptor28);
        org.junit.Assert.assertNull(errorHandler32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(errorHandler36);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(executor43);
        org.junit.Assert.assertNull(executor44);
        org.junit.Assert.assertNull(errorHandler46);
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(profiler59);
        org.junit.Assert.assertNull(logLevel65);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNull(executor74);
        org.junit.Assert.assertNull(executor75);
        org.junit.Assert.assertNull(errorHandler77);
        org.junit.Assert.assertNotNull(log83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertTrue("'" + logLevel86 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel86.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(restAdapter94);
        org.junit.Assert.assertNotNull(errorHandler95);
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertNotNull(builder98);
        org.junit.Assert.assertNotNull(builder99);
    }

    @Test
    public void test02735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02735");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder1 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler2 = builder1.errorHandler;
        retrofit.client.Client.Provider provider3 = null;
        builder1.clientProvider = provider3;
        retrofit.Server server7 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder8 = builder1.setServer(server7);
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler10 = builder9.errorHandler;
        retrofit.client.Client.Provider provider11 = null;
        builder9.clientProvider = provider11;
        retrofit.converter.Converter converter13 = builder9.converter;
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder15 = builder9.setLogLevel(logLevel14);
        builder1.logLevel = logLevel14;
        builder0.logLevel = logLevel14;
        retrofit.RequestInterceptor requestInterceptor18 = builder0.requestInterceptor;
        retrofit.Profiler profiler19 = null;
        builder0.profiler = profiler19;
        retrofit.RequestInterceptor requestInterceptor21 = builder0.requestInterceptor;
        java.util.concurrent.Executor executor22 = builder0.callbackExecutor;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter23 = builder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(requestInterceptor18);
        org.junit.Assert.assertNull(requestInterceptor21);
        org.junit.Assert.assertNull(executor22);
    }

    @Test
    public void test02736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02736");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter0.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor4 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.Log log5 = restAdapter0.log;
        retrofit.converter.Converter converter6 = restAdapter0.converter;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler8 = builder7.errorHandler;
        retrofit.Server server11 = new retrofit.Server("", "");
        builder7.server = server11;
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        builder7.log = log13;
        retrofit.RestAdapter.Builder builder16 = builder7.setServer("default");
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        log17.log("hi!");
        log17.log("hi!");
        log17.log("");
        log17.log("default");
        builder7.log = log17;
        retrofit.RestAdapter.LogLevel logLevel27 = builder7.logLevel;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider29 = builder28.clientProvider;
        java.util.concurrent.Executor executor30 = null;
        builder28.callbackExecutor = executor30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.Server server35 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder36 = builder32.setServer(server35);
        java.lang.String str37 = server35.getUrl();
        retrofit.RestAdapter.Builder builder38 = builder28.setServer(server35);
        java.lang.String str39 = server35.getName();
        builder7.server = server35;
        restAdapter0.server = server35;
        java.lang.String str42 = server35.getUrl();
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNotNull(log13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(provider29);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
    }

    @Test
    public void test02737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02737");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.ErrorHandler errorHandler3 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler7 = builder6.errorHandler;
        retrofit.ErrorHandler errorHandler8 = builder6.errorHandler;
        retrofit.Profiler profiler9 = builder6.profiler;
        retrofit.RestAdapter.Log log10 = builder6.log;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.FULL;
        builder6.logLevel = logLevel11;
        retrofit.RestAdapter.Builder builder13 = builder5.setLogLevel(logLevel11);
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.Server server17 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder18 = builder14.setServer(server17);
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor20 = restAdapter19.callbackExecutor;
        java.util.concurrent.Executor executor21 = restAdapter19.callbackExecutor;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler23 = restAdapter22.errorHandler;
        retrofit.Server server26 = new retrofit.Server("", "");
        restAdapter22.server = server26;
        restAdapter19.server = server26;
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        restAdapter19.log = log29;
        retrofit.RestAdapter.Builder builder31 = builder18.setLog(log29);
        retrofit.RestAdapter.Builder builder33 = builder18.setServer("hi!");
        retrofit.RestAdapter.Log log34 = builder33.log;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler36 = builder35.errorHandler;
        retrofit.ErrorHandler errorHandler37 = builder35.errorHandler;
        java.util.concurrent.Executor executor38 = builder35.callbackExecutor;
        java.util.concurrent.Executor executor39 = null;
        builder35.callbackExecutor = executor39;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler42 = builder41.errorHandler;
        retrofit.Server server45 = new retrofit.Server("", "");
        builder41.server = server45;
        retrofit.RestAdapter.Log log47 = retrofit.RestAdapter.Log.NONE;
        builder41.log = log47;
        retrofit.RestAdapter.LogLevel logLevel49 = builder41.logLevel;
        retrofit.RestAdapter.Builder builder50 = builder35.setLogLevel(logLevel49);
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler52 = builder51.errorHandler;
        retrofit.client.Client.Provider provider53 = null;
        builder51.clientProvider = provider53;
        retrofit.Server server57 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder58 = builder51.setServer(server57);
        retrofit.converter.Converter converter59 = null;
        builder58.converter = converter59;
        retrofit.RestAdapter restAdapter61 = builder58.build();
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler63 = builder62.errorHandler;
        java.util.concurrent.Executor executor64 = null;
        builder62.callbackExecutor = executor64;
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider67 = builder66.clientProvider;
        java.util.concurrent.Executor executor68 = null;
        builder66.callbackExecutor = executor68;
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        retrofit.Server server73 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder74 = builder70.setServer(server73);
        java.lang.String str75 = server73.getUrl();
        retrofit.RestAdapter.Builder builder76 = builder66.setServer(server73);
        retrofit.RestAdapter.Builder builder77 = builder62.setServer(server73);
        restAdapter61.server = server73;
        retrofit.client.Client.Provider provider79 = restAdapter61.clientProvider;
        retrofit.RestAdapter.Builder builder80 = builder50.setClient(provider79);
        retrofit.RestAdapter.Builder builder81 = builder33.setClient(provider79);
        retrofit.RestAdapter.Builder builder82 = builder13.setClient(provider79);
        retrofit.RestAdapter.Log log83 = builder13.log;
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNull(profiler9);
        org.junit.Assert.assertNull(log10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertNull(errorHandler36);
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNull(errorHandler42);
        org.junit.Assert.assertNotNull(log47);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(errorHandler52);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(restAdapter61);
        org.junit.Assert.assertNull(errorHandler63);
        org.junit.Assert.assertNull(provider67);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "hi!" + "'", str75, "hi!");
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(provider79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNull(log83);
    }

    @Test
    public void test02738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02738");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        java.util.concurrent.Executor executor3 = builder0.callbackExecutor;
        java.util.concurrent.Executor executor4 = null;
        builder0.callbackExecutor = executor4;
        retrofit.RestAdapter restAdapter6 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor7 = restAdapter6.callbackExecutor;
        java.util.concurrent.Executor executor8 = restAdapter6.callbackExecutor;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler10 = restAdapter9.errorHandler;
        retrofit.Server server13 = new retrofit.Server("", "");
        restAdapter9.server = server13;
        restAdapter6.server = server13;
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter6.new RestHandler();
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor18 = restAdapter17.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter17.new RestHandler();
        retrofit.Server server22 = new retrofit.Server("hi!", "hi!");
        restAdapter17.server = server22;
        retrofit.Server server24 = restAdapter17.server;
        restAdapter6.server = server24;
        retrofit.RestAdapter.Builder builder26 = builder0.setServer(server24);
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler28 = null;
        builder27.errorHandler = errorHandler28;
        retrofit.ErrorHandler errorHandler30 = builder27.errorHandler;
        retrofit.RestAdapter.Builder builder32 = builder27.setServer("hi!");
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler34 = builder33.errorHandler;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.Server server38 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder39 = builder35.setServer(server38);
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor41 = restAdapter40.callbackExecutor;
        java.util.concurrent.Executor executor42 = restAdapter40.callbackExecutor;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler44 = restAdapter43.errorHandler;
        retrofit.Server server47 = new retrofit.Server("", "");
        restAdapter43.server = server47;
        restAdapter40.server = server47;
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        restAdapter40.log = log50;
        retrofit.RestAdapter.Builder builder52 = builder39.setLog(log50);
        retrofit.RestAdapter.Builder builder53 = builder33.setLog(log50);
        builder27.log = log50;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler56 = builder55.errorHandler;
        retrofit.client.Client.Provider provider57 = null;
        builder55.clientProvider = provider57;
        retrofit.Server server61 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder62 = builder55.setServer(server61);
        retrofit.converter.Converter converter63 = null;
        builder62.converter = converter63;
        retrofit.RestAdapter restAdapter65 = builder62.build();
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler67 = builder66.errorHandler;
        java.util.concurrent.Executor executor68 = null;
        builder66.callbackExecutor = executor68;
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider71 = builder70.clientProvider;
        java.util.concurrent.Executor executor72 = null;
        builder70.callbackExecutor = executor72;
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        retrofit.Server server77 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder78 = builder74.setServer(server77);
        java.lang.String str79 = server77.getUrl();
        retrofit.RestAdapter.Builder builder80 = builder70.setServer(server77);
        retrofit.RestAdapter.Builder builder81 = builder66.setServer(server77);
        restAdapter65.server = server77;
        retrofit.client.Client.Provider provider83 = restAdapter65.clientProvider;
        retrofit.RestAdapter.Builder builder84 = builder27.setClient(provider83);
        retrofit.client.Client.Provider provider85 = builder84.clientProvider;
        retrofit.RestAdapter.Log log86 = builder84.log;
        java.util.concurrent.Executor executor87 = builder84.callbackExecutor;
        retrofit.RestAdapter.Builder builder88 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler89 = builder88.errorHandler;
        retrofit.ErrorHandler errorHandler90 = builder88.errorHandler;
        java.util.concurrent.Executor executor91 = builder88.callbackExecutor;
        retrofit.Profiler profiler92 = builder88.profiler;
        builder88.ensureSaneDefaults();
        retrofit.RestAdapter.LogLevel logLevel94 = builder88.logLevel;
        builder84.logLevel = logLevel94;
        retrofit.RestAdapter.Builder builder96 = builder26.setLogLevel(logLevel94);
        retrofit.converter.Converter converter97 = builder96.converter;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNotNull(server24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(errorHandler30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(errorHandler34);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(executor41);
        org.junit.Assert.assertNull(executor42);
        org.junit.Assert.assertNull(errorHandler44);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(errorHandler56);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(restAdapter65);
        org.junit.Assert.assertNull(errorHandler67);
        org.junit.Assert.assertNull(provider71);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "hi!" + "'", str79, "hi!");
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(provider83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(provider85);
        org.junit.Assert.assertNotNull(log86);
        org.junit.Assert.assertNull(executor87);
        org.junit.Assert.assertNull(errorHandler89);
        org.junit.Assert.assertNull(errorHandler90);
        org.junit.Assert.assertNull(executor91);
        org.junit.Assert.assertNull(profiler92);
        org.junit.Assert.assertTrue("'" + logLevel94 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel94.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNull(converter97);
    }

    @Test
    public void test02739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02739");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        java.util.concurrent.Executor executor14 = null;
        restAdapter12.callbackExecutor = executor14;
        retrofit.client.Header[] headerArray32 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList33 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList33, headerArray32);
        retrofit.mime.TypedOutput typedOutput35 = null;
        retrofit.client.Request request36 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList33, typedOutput35);
        retrofit.mime.TypedOutput typedOutput37 = null;
        retrofit.client.Request request38 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList33, typedOutput37);
        retrofit.mime.TypedOutput typedOutput39 = null;
        retrofit.client.Request request40 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList33, typedOutput39);
        retrofit.mime.TypedOutput typedOutput41 = null;
        retrofit.client.Request request42 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList33, typedOutput41);
        retrofit.mime.TypedOutput typedOutput43 = null;
        retrofit.client.Request request44 = new retrofit.client.Request("default", "hi!", (java.util.List<retrofit.client.Header>) headerList33, typedOutput43);
        retrofit.mime.TypedOutput typedOutput45 = null;
        retrofit.client.Request request46 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList33, typedOutput45);
        retrofit.mime.TypedOutput typedOutput47 = null;
        retrofit.client.Request request48 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList33, typedOutput47);
        retrofit.mime.TypedOutput typedOutput49 = null;
        retrofit.client.Request request50 = new retrofit.client.Request("hi!", "default", (java.util.List<retrofit.client.Header>) headerList33, typedOutput49);
        retrofit.client.Request request51 = restAdapter12.logAndReplaceRequest(request50);
        retrofit.ErrorHandler errorHandler52 = restAdapter12.errorHandler;
        retrofit.Server server53 = restAdapter12.server;
        java.util.concurrent.Executor executor54 = restAdapter12.callbackExecutor;
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(request51);
        org.junit.Assert.assertNull(errorHandler52);
        org.junit.Assert.assertNull(server53);
        org.junit.Assert.assertNull(executor54);
    }

    @Test
    public void test02740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02740");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.ErrorHandler errorHandler3 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler7 = builder6.errorHandler;
        retrofit.ErrorHandler errorHandler8 = builder6.errorHandler;
        retrofit.Profiler profiler9 = builder6.profiler;
        retrofit.RestAdapter.Log log10 = builder6.log;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.FULL;
        builder6.logLevel = logLevel11;
        retrofit.RestAdapter.Builder builder13 = builder5.setLogLevel(logLevel11);
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        log22.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel25);
        log22.log("");
        retrofit.RestAdapter.Builder builder29 = builder13.setLog(log22);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.Server server33 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder34 = builder30.setServer(server33);
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor36 = restAdapter35.callbackExecutor;
        java.util.concurrent.Executor executor37 = restAdapter35.callbackExecutor;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler39 = restAdapter38.errorHandler;
        retrofit.Server server42 = new retrofit.Server("", "");
        restAdapter38.server = server42;
        restAdapter35.server = server42;
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        restAdapter35.log = log45;
        retrofit.RestAdapter.Builder builder47 = builder34.setLog(log45);
        retrofit.converter.Converter converter48 = null;
        builder47.converter = converter48;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler51 = builder50.errorHandler;
        retrofit.ErrorHandler errorHandler52 = builder50.errorHandler;
        retrofit.Profiler profiler53 = builder50.profiler;
        retrofit.RestAdapter.Log log54 = builder50.log;
        retrofit.Server server55 = null;
        retrofit.client.Client.Provider provider56 = null;
        java.util.concurrent.Executor executor57 = null;
        java.util.concurrent.Executor executor58 = null;
        retrofit.RequestInterceptor requestInterceptor59 = null;
        retrofit.converter.Converter converter60 = null;
        retrofit.Profiler profiler61 = null;
        retrofit.ErrorHandler errorHandler62 = null;
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        log63.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel66 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter(server55, provider56, executor57, executor58, requestInterceptor59, converter60, profiler61, errorHandler62, log63, logLevel66);
        builder50.log = log63;
        retrofit.RestAdapter.Builder builder69 = builder47.setLog(log63);
        builder29.log = log63;
        java.util.concurrent.Executor executor71 = builder29.callbackExecutor;
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNull(profiler9);
        org.junit.Assert.assertNull(log10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(executor36);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(errorHandler51);
        org.junit.Assert.assertNull(errorHandler52);
        org.junit.Assert.assertNull(profiler53);
        org.junit.Assert.assertNull(log54);
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNull(executor71);
    }

    @Test
    public void test02741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02741");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        restAdapter12.log = log14;
        retrofit.converter.Converter converter16 = null;
        restAdapter12.converter = converter16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter12.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor19 = null;
        restAdapter12.requestInterceptor = requestInterceptor19;
        retrofit.RestAdapter.LogLevel logLevel21 = restAdapter12.logLevel;
        retrofit.RequestInterceptor requestInterceptor22 = restAdapter12.requestInterceptor;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.RequestInterceptor requestInterceptor24 = null;
        builder23.requestInterceptor = requestInterceptor24;
        retrofit.converter.Converter converter26 = builder23.converter;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler28 = builder27.errorHandler;
        java.util.concurrent.Executor executor29 = builder27.callbackExecutor;
        retrofit.RestAdapter.Builder builder31 = builder27.setServer("hi!");
        builder31.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler34 = builder33.errorHandler;
        retrofit.Server server37 = new retrofit.Server("", "");
        builder33.server = server37;
        java.util.concurrent.Executor executor39 = builder33.callbackExecutor;
        retrofit.Server server40 = null;
        builder33.server = server40;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.NONE;
        builder33.logLevel = logLevel42;
        retrofit.RestAdapter.Builder builder44 = builder31.setLogLevel(logLevel42);
        retrofit.RequestInterceptor requestInterceptor45 = builder31.requestInterceptor;
        builder23.requestInterceptor = requestInterceptor45;
        restAdapter12.requestInterceptor = requestInterceptor45;
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNull(converter26);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(errorHandler34);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(requestInterceptor45);
    }

    @Test
    public void test02742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02742");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider5 = builder4.clientProvider;
        java.util.concurrent.Executor executor6 = null;
        builder4.callbackExecutor = executor6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.Server server11 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder12 = builder8.setServer(server11);
        java.lang.String str13 = server11.getUrl();
        retrofit.RestAdapter.Builder builder14 = builder4.setServer(server11);
        retrofit.RestAdapter.Builder builder15 = builder0.setServer(server11);
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor17 = restAdapter16.callbackExecutor;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor19 = restAdapter18.callbackExecutor;
        java.util.concurrent.Executor executor20 = restAdapter18.callbackExecutor;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler22 = restAdapter21.errorHandler;
        retrofit.Server server25 = new retrofit.Server("", "");
        restAdapter21.server = server25;
        restAdapter18.server = server25;
        restAdapter16.server = server25;
        retrofit.Profiler profiler29 = restAdapter16.profiler;
        retrofit.converter.Converter converter30 = restAdapter16.converter;
        retrofit.ErrorHandler errorHandler31 = null;
        restAdapter16.errorHandler = errorHandler31;
        retrofit.RestAdapter.RestHandler restHandler33 = restAdapter16.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler34 = restAdapter16.new RestHandler();
        retrofit.converter.Converter converter35 = restAdapter16.converter;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.Server server39 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder40 = builder36.setServer(server39);
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor42 = restAdapter41.callbackExecutor;
        java.util.concurrent.Executor executor43 = restAdapter41.callbackExecutor;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler45 = restAdapter44.errorHandler;
        retrofit.Server server48 = new retrofit.Server("", "");
        restAdapter44.server = server48;
        restAdapter41.server = server48;
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        restAdapter41.log = log51;
        retrofit.RestAdapter.Builder builder53 = builder40.setLog(log51);
        log51.log("");
        restAdapter16.log = log51;
        retrofit.RequestInterceptor requestInterceptor57 = restAdapter16.requestInterceptor;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.Server server61 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder62 = builder58.setServer(server61);
        retrofit.RestAdapter.LogLevel logLevel63 = builder62.logLevel;
        java.util.concurrent.Executor executor64 = builder62.httpExecutor;
        retrofit.RestAdapter restAdapter65 = builder62.build();
        retrofit.Server server66 = builder62.server;
        restAdapter16.server = server66;
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        retrofit.Server server71 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder72 = builder68.setServer(server71);
        retrofit.RestAdapter.LogLevel logLevel73 = builder72.logLevel;
        java.util.concurrent.Executor executor74 = builder72.httpExecutor;
        retrofit.RestAdapter restAdapter75 = builder72.build();
        retrofit.Server server76 = builder72.server;
        retrofit.RestAdapter restAdapter77 = builder72.build();
        retrofit.client.Client.Provider provider78 = restAdapter77.clientProvider;
        restAdapter16.clientProvider = provider78;
        retrofit.RestAdapter.Builder builder80 = builder15.setClient(provider78);
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNull(profiler29);
        org.junit.Assert.assertNull(converter30);
        org.junit.Assert.assertNull(converter35);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(executor42);
        org.junit.Assert.assertNull(executor43);
        org.junit.Assert.assertNull(errorHandler45);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(requestInterceptor57);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor64);
        org.junit.Assert.assertNotNull(restAdapter65);
        org.junit.Assert.assertNotNull(server66);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor74);
        org.junit.Assert.assertNotNull(restAdapter75);
        org.junit.Assert.assertNotNull(server76);
        org.junit.Assert.assertNotNull(restAdapter77);
        org.junit.Assert.assertNotNull(provider78);
        org.junit.Assert.assertNotNull(builder80);
    }

    @Test
    public void test02743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02743");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server6 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder7 = builder0.setServer(server6);
        retrofit.converter.Converter converter8 = null;
        builder7.converter = converter8;
        retrofit.RestAdapter restAdapter10 = builder7.build();
        retrofit.Profiler profiler11 = builder7.profiler;
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder14 = builder7.setServer("default");
        retrofit.Server server15 = null;
        retrofit.client.Client.Provider provider16 = null;
        java.util.concurrent.Executor executor17 = null;
        java.util.concurrent.Executor executor18 = null;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        retrofit.converter.Converter converter20 = null;
        retrofit.Profiler profiler21 = null;
        retrofit.ErrorHandler errorHandler22 = null;
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        log23.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server15, provider16, executor17, executor18, requestInterceptor19, converter20, profiler21, errorHandler22, log23, logLevel26);
        retrofit.RestAdapter.RestHandler restHandler28 = restAdapter27.new RestHandler();
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        restAdapter27.log = log29;
        retrofit.converter.Converter converter31 = null;
        restAdapter27.converter = converter31;
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter27.getLogLevel();
        retrofit.ErrorHandler errorHandler34 = restAdapter27.errorHandler;
        retrofit.Profiler profiler35 = restAdapter27.profiler;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler37 = null;
        builder36.errorHandler = errorHandler37;
        retrofit.ErrorHandler errorHandler39 = builder36.errorHandler;
        retrofit.RestAdapter.Builder builder41 = builder36.setServer("hi!");
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler43 = builder42.errorHandler;
        retrofit.ErrorHandler errorHandler44 = builder42.errorHandler;
        retrofit.Profiler profiler45 = builder42.profiler;
        retrofit.RestAdapter.Log log46 = builder42.log;
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.FULL;
        builder42.logLevel = logLevel47;
        retrofit.RestAdapter.Builder builder49 = builder41.setLogLevel(logLevel47);
        retrofit.Server server50 = null;
        retrofit.client.Client.Provider provider51 = null;
        java.util.concurrent.Executor executor52 = null;
        java.util.concurrent.Executor executor53 = null;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        retrofit.converter.Converter converter55 = null;
        retrofit.Profiler profiler56 = null;
        retrofit.ErrorHandler errorHandler57 = null;
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        log58.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel61 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter(server50, provider51, executor52, executor53, requestInterceptor54, converter55, profiler56, errorHandler57, log58, logLevel61);
        log58.log("");
        retrofit.RestAdapter.Builder builder65 = builder49.setLog(log58);
        restAdapter27.log = log58;
        retrofit.RestAdapter.RestHandler restHandler67 = restAdapter27.new RestHandler();
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        retrofit.Server server71 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder72 = builder68.setServer(server71);
        retrofit.RestAdapter restAdapter73 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor74 = restAdapter73.callbackExecutor;
        java.util.concurrent.Executor executor75 = restAdapter73.callbackExecutor;
        retrofit.RestAdapter restAdapter76 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler77 = restAdapter76.errorHandler;
        retrofit.Server server80 = new retrofit.Server("", "");
        restAdapter76.server = server80;
        restAdapter73.server = server80;
        retrofit.RestAdapter.Log log83 = retrofit.RestAdapter.Log.NONE;
        restAdapter73.log = log83;
        retrofit.RestAdapter.Builder builder85 = builder72.setLog(log83);
        restAdapter27.log = log83;
        log83.log("");
        retrofit.RestAdapter.Builder builder89 = builder7.setLog(log83);
        retrofit.RestAdapter restAdapter90 = builder89.build();
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(restAdapter10);
        org.junit.Assert.assertNull(profiler11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler34);
        org.junit.Assert.assertNull(profiler35);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(errorHandler43);
        org.junit.Assert.assertNull(errorHandler44);
        org.junit.Assert.assertNull(profiler45);
        org.junit.Assert.assertNull(log46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(log58);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNull(executor74);
        org.junit.Assert.assertNull(executor75);
        org.junit.Assert.assertNull(errorHandler77);
        org.junit.Assert.assertNotNull(log83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(restAdapter90);
    }

    @Test
    public void test02744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02744");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.Server server5 = builder0.server;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.Server server9 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder10 = builder6.setServer(server9);
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor12 = restAdapter11.callbackExecutor;
        java.util.concurrent.Executor executor13 = restAdapter11.callbackExecutor;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler15 = restAdapter14.errorHandler;
        retrofit.Server server18 = new retrofit.Server("", "");
        restAdapter14.server = server18;
        restAdapter11.server = server18;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        restAdapter11.log = log21;
        retrofit.RestAdapter.Builder builder23 = builder10.setLog(log21);
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder25 = builder10.setLogLevel(logLevel24);
        builder0.logLevel = logLevel24;
        java.util.concurrent.Executor executor27 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler29 = builder28.errorHandler;
        retrofit.ErrorHandler errorHandler30 = builder28.errorHandler;
        retrofit.converter.Converter converter31 = null;
        builder28.converter = converter31;
        retrofit.RequestInterceptor requestInterceptor33 = null;
        builder28.requestInterceptor = requestInterceptor33;
        retrofit.client.Client.Provider provider35 = builder28.clientProvider;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler37 = builder36.errorHandler;
        retrofit.client.Client.Provider provider38 = null;
        builder36.clientProvider = provider38;
        retrofit.Server server42 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder43 = builder36.setServer(server42);
        retrofit.converter.Converter converter44 = null;
        builder43.converter = converter44;
        retrofit.RestAdapter restAdapter46 = builder43.build();
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler48 = builder47.errorHandler;
        java.util.concurrent.Executor executor49 = null;
        builder47.callbackExecutor = executor49;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider52 = builder51.clientProvider;
        java.util.concurrent.Executor executor53 = null;
        builder51.callbackExecutor = executor53;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.Server server58 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder59 = builder55.setServer(server58);
        java.lang.String str60 = server58.getUrl();
        retrofit.RestAdapter.Builder builder61 = builder51.setServer(server58);
        retrofit.RestAdapter.Builder builder62 = builder47.setServer(server58);
        restAdapter46.server = server58;
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler65 = builder64.errorHandler;
        retrofit.client.Client.Provider provider66 = null;
        builder64.clientProvider = provider66;
        retrofit.Server server70 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder71 = builder64.setServer(server70);
        retrofit.client.Client.Provider provider72 = null;
        java.util.concurrent.Executor executor73 = null;
        java.util.concurrent.Executor executor74 = null;
        retrofit.RequestInterceptor requestInterceptor75 = null;
        retrofit.converter.Converter converter76 = null;
        retrofit.Profiler profiler77 = null;
        retrofit.ErrorHandler errorHandler78 = null;
        retrofit.Server server79 = null;
        retrofit.client.Client.Provider provider80 = null;
        java.util.concurrent.Executor executor81 = null;
        java.util.concurrent.Executor executor82 = null;
        retrofit.RequestInterceptor requestInterceptor83 = null;
        retrofit.converter.Converter converter84 = null;
        retrofit.Profiler profiler85 = null;
        retrofit.ErrorHandler errorHandler86 = null;
        retrofit.RestAdapter.Log log87 = retrofit.RestAdapter.Log.NONE;
        log87.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel90 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter91 = new retrofit.RestAdapter(server79, provider80, executor81, executor82, requestInterceptor83, converter84, profiler85, errorHandler86, log87, logLevel90);
        retrofit.RestAdapter.LogLevel logLevel92 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter93 = new retrofit.RestAdapter(server70, provider72, executor73, executor74, requestInterceptor75, converter76, profiler77, errorHandler78, log87, logLevel92);
        boolean boolean94 = logLevel92.log();
        boolean boolean95 = logLevel92.log();
        restAdapter46.setLogLevel(logLevel92);
        retrofit.RestAdapter.Builder builder97 = builder28.setLogLevel(logLevel92);
        retrofit.RestAdapter.Builder builder98 = builder0.setLogLevel(logLevel92);
        java.util.concurrent.Executor executor99 = builder0.callbackExecutor;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(server5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNull(errorHandler30);
        org.junit.Assert.assertNull(provider35);
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(restAdapter46);
        org.junit.Assert.assertNull(errorHandler48);
        org.junit.Assert.assertNull(provider52);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(errorHandler65);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(log87);
        org.junit.Assert.assertTrue("'" + logLevel90 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel90.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel92 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel92.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertNotNull(builder98);
        org.junit.Assert.assertNull(executor99);
    }

    @Test
    public void test02745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02745");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.converter.Converter converter2 = null;
        restAdapter0.converter = converter2;
        retrofit.ErrorHandler errorHandler4 = null;
        restAdapter0.errorHandler = errorHandler4;
        retrofit.RestAdapter restAdapter6 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor7 = restAdapter6.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler8 = restAdapter6.new RestHandler();
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor10 = restAdapter9.callbackExecutor;
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor12 = restAdapter11.callbackExecutor;
        java.util.concurrent.Executor executor13 = restAdapter11.callbackExecutor;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler15 = restAdapter14.errorHandler;
        retrofit.Server server18 = new retrofit.Server("", "");
        restAdapter14.server = server18;
        restAdapter11.server = server18;
        restAdapter9.server = server18;
        retrofit.Profiler profiler22 = restAdapter9.profiler;
        retrofit.ErrorHandler errorHandler23 = null;
        restAdapter9.errorHandler = errorHandler23;
        retrofit.Profiler profiler25 = null;
        restAdapter9.profiler = profiler25;
        retrofit.RestAdapter.LogLevel logLevel27 = restAdapter9.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter9.logLevel = logLevel28;
        restAdapter6.logLevel = logLevel28;
        restAdapter0.logLevel = logLevel28;
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter0.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor33 = restAdapter0.requestInterceptor;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(logLevel27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(requestInterceptor33);
    }

    @Test
    public void test02746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02746");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.client.Client.Provider provider14 = restAdapter12.clientProvider;
        retrofit.RestAdapter.Log log15 = restAdapter12.log;
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter12.new RestHandler();
        retrofit.Profiler profiler17 = restAdapter12.profiler;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor19 = restAdapter18.callbackExecutor;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor21 = restAdapter20.callbackExecutor;
        java.util.concurrent.Executor executor22 = restAdapter20.callbackExecutor;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler24 = restAdapter23.errorHandler;
        retrofit.Server server27 = new retrofit.Server("", "");
        restAdapter23.server = server27;
        restAdapter20.server = server27;
        restAdapter18.server = server27;
        retrofit.Profiler profiler31 = restAdapter18.profiler;
        retrofit.ErrorHandler errorHandler32 = null;
        restAdapter18.errorHandler = errorHandler32;
        retrofit.Profiler profiler34 = null;
        restAdapter18.profiler = profiler34;
        retrofit.RestAdapter.RestHandler restHandler36 = restAdapter18.new RestHandler();
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.Server server40 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder41 = builder37.setServer(server40);
        retrofit.converter.Converter converter42 = builder37.converter;
        retrofit.RequestInterceptor requestInterceptor43 = builder37.requestInterceptor;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider45 = builder44.clientProvider;
        java.util.concurrent.Executor executor46 = null;
        builder44.callbackExecutor = executor46;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.Server server51 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder52 = builder48.setServer(server51);
        java.lang.String str53 = server51.getUrl();
        retrofit.RestAdapter.Builder builder54 = builder44.setServer(server51);
        builder44.ensureSaneDefaults();
        retrofit.Server server56 = null;
        retrofit.client.Client.Provider provider57 = null;
        java.util.concurrent.Executor executor58 = null;
        java.util.concurrent.Executor executor59 = null;
        retrofit.RequestInterceptor requestInterceptor60 = null;
        retrofit.converter.Converter converter61 = null;
        retrofit.Profiler profiler62 = null;
        retrofit.ErrorHandler errorHandler63 = null;
        retrofit.RestAdapter.Log log64 = retrofit.RestAdapter.Log.NONE;
        log64.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel67 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter(server56, provider57, executor58, executor59, requestInterceptor60, converter61, profiler62, errorHandler63, log64, logLevel67);
        retrofit.RestAdapter.RestHandler restHandler69 = restAdapter68.new RestHandler();
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        restAdapter68.log = log70;
        retrofit.RestAdapter.Builder builder72 = builder44.setLog(log70);
        retrofit.RestAdapter.Builder builder74 = builder44.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor75 = builder44.requestInterceptor;
        builder37.requestInterceptor = requestInterceptor75;
        restAdapter18.requestInterceptor = requestInterceptor75;
        restAdapter12.requestInterceptor = requestInterceptor75;
        java.util.concurrent.Executor executor79 = null;
        restAdapter12.callbackExecutor = executor79;
        retrofit.Profiler profiler81 = null;
        restAdapter12.profiler = profiler81;
        java.lang.Class<?> wildcardClass83 = restAdapter12.getClass();
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNull(profiler17);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNull(profiler31);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(converter42);
        org.junit.Assert.assertNull(requestInterceptor43);
        org.junit.Assert.assertNull(provider45);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(log64);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(requestInterceptor75);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test02747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02747");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = builder0.clientProvider;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server7 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder8 = builder4.setServer(server7);
        java.lang.String str9 = server7.getUrl();
        retrofit.RestAdapter.Builder builder10 = builder0.setServer(server7);
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider12 = builder11.clientProvider;
        java.util.concurrent.Executor executor13 = null;
        builder11.callbackExecutor = executor13;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.Server server18 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder19 = builder15.setServer(server18);
        java.lang.String str20 = server18.getUrl();
        retrofit.RestAdapter.Builder builder21 = builder11.setServer(server18);
        builder11.ensureSaneDefaults();
        retrofit.Server server23 = null;
        retrofit.client.Client.Provider provider24 = null;
        java.util.concurrent.Executor executor25 = null;
        java.util.concurrent.Executor executor26 = null;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        retrofit.converter.Converter converter28 = null;
        retrofit.Profiler profiler29 = null;
        retrofit.ErrorHandler errorHandler30 = null;
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        log31.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server23, provider24, executor25, executor26, requestInterceptor27, converter28, profiler29, errorHandler30, log31, logLevel34);
        retrofit.RestAdapter.RestHandler restHandler36 = restAdapter35.new RestHandler();
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        restAdapter35.log = log37;
        retrofit.RestAdapter.Builder builder39 = builder11.setLog(log37);
        retrofit.RestAdapter.Builder builder41 = builder11.setServer("hi!");
        retrofit.RestAdapter restAdapter42 = builder11.build();
        retrofit.RestAdapter.RestHandler restHandler43 = restAdapter42.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter42.logLevel;
        java.util.concurrent.Executor executor45 = restAdapter42.callbackExecutor;
        retrofit.Server server48 = new retrofit.Server("hi!", "hi!");
        restAdapter42.server = server48;
        retrofit.RestAdapter.Builder builder50 = builder0.setServer(server48);
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler52 = builder51.errorHandler;
        retrofit.Server server55 = new retrofit.Server("", "");
        builder51.server = server55;
        java.lang.String str57 = server55.getUrl();
        java.lang.String str58 = server55.getUrl();
        builder50.server = server55;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler61 = builder60.errorHandler;
        java.util.concurrent.Executor executor62 = null;
        builder60.callbackExecutor = executor62;
        java.util.concurrent.Executor executor64 = null;
        builder60.httpExecutor = executor64;
        retrofit.Profiler profiler66 = null;
        builder60.profiler = profiler66;
        retrofit.RestAdapter.Builder builder69 = builder60.setServer("hi!");
        retrofit.Profiler profiler70 = builder60.profiler;
        retrofit.RestAdapter.Log log71 = builder60.log;
        retrofit.Server server72 = builder60.server;
        retrofit.RestAdapter.Builder builder73 = builder50.setServer(server72);
        retrofit.Profiler profiler74 = builder73.profiler;
        org.junit.Assert.assertNull(provider1);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(restAdapter42);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(executor45);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(errorHandler52);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNull(errorHandler61);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNull(profiler70);
        org.junit.Assert.assertNull(log71);
        org.junit.Assert.assertNotNull(server72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNull(profiler74);
    }

    @Test
    public void test02748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02748");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = builder0.clientProvider;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server7 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder8 = builder4.setServer(server7);
        java.lang.String str9 = server7.getUrl();
        retrofit.RestAdapter.Builder builder10 = builder0.setServer(server7);
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider12 = builder11.clientProvider;
        java.util.concurrent.Executor executor13 = null;
        builder11.callbackExecutor = executor13;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.Server server18 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder19 = builder15.setServer(server18);
        java.lang.String str20 = server18.getUrl();
        retrofit.RestAdapter.Builder builder21 = builder11.setServer(server18);
        builder11.ensureSaneDefaults();
        retrofit.Server server23 = null;
        retrofit.client.Client.Provider provider24 = null;
        java.util.concurrent.Executor executor25 = null;
        java.util.concurrent.Executor executor26 = null;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        retrofit.converter.Converter converter28 = null;
        retrofit.Profiler profiler29 = null;
        retrofit.ErrorHandler errorHandler30 = null;
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        log31.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server23, provider24, executor25, executor26, requestInterceptor27, converter28, profiler29, errorHandler30, log31, logLevel34);
        retrofit.RestAdapter.RestHandler restHandler36 = restAdapter35.new RestHandler();
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        restAdapter35.log = log37;
        retrofit.RestAdapter.Builder builder39 = builder11.setLog(log37);
        retrofit.RestAdapter.Builder builder41 = builder11.setServer("hi!");
        retrofit.RestAdapter restAdapter42 = builder11.build();
        retrofit.RestAdapter.RestHandler restHandler43 = restAdapter42.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter42.logLevel;
        java.util.concurrent.Executor executor45 = restAdapter42.callbackExecutor;
        retrofit.Server server48 = new retrofit.Server("hi!", "hi!");
        restAdapter42.server = server48;
        retrofit.RestAdapter.Builder builder50 = builder0.setServer(server48);
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler52 = builder51.errorHandler;
        retrofit.Server server55 = new retrofit.Server("", "");
        builder51.server = server55;
        java.lang.String str57 = server55.getUrl();
        java.lang.String str58 = server55.getUrl();
        builder50.server = server55;
        retrofit.client.Client client60 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder61 = builder50.setClient(client60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(provider1);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(restAdapter42);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(executor45);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(errorHandler52);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
    }

    @Test
    public void test02749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02749");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.Server server5 = new retrofit.Server("hi!", "hi!");
        restAdapter0.server = server5;
        retrofit.Server server7 = restAdapter0.server;
        retrofit.converter.Converter converter8 = restAdapter0.converter;
        retrofit.Server server11 = new retrofit.Server("", "hi!");
        restAdapter0.server = server11;
        java.lang.Throwable throwable13 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable13, "default");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNotNull(server7);
        org.junit.Assert.assertNull(converter8);
    }

    @Test
    public void test02750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02750");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server4 = new retrofit.Server("", "");
        builder0.server = server4;
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        builder0.log = log6;
        retrofit.RestAdapter.Builder builder9 = builder0.setServer("default");
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        log10.log("hi!");
        log10.log("hi!");
        log10.log("");
        log10.log("default");
        builder0.log = log10;
        retrofit.RestAdapter.LogLevel logLevel20 = builder0.logLevel;
        retrofit.RestAdapter.Log log21 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder22 = builder0.setLog(log21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(log10);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test02751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02751");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.Profiler profiler3 = builder0.profiler;
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor5 = restAdapter4.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.Server server9 = new retrofit.Server("hi!", "hi!");
        restAdapter4.server = server9;
        retrofit.RestAdapter.Builder builder11 = builder0.setServer(server9);
        retrofit.converter.Converter converter12 = null;
        builder11.converter = converter12;
        retrofit.Profiler profiler14 = null;
        builder11.profiler = profiler14;
        retrofit.RestAdapter restAdapter16 = builder11.build();
        java.util.concurrent.Executor executor17 = builder11.callbackExecutor;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler19 = builder18.errorHandler;
        retrofit.ErrorHandler errorHandler20 = builder18.errorHandler;
        retrofit.converter.Converter converter21 = null;
        builder18.converter = converter21;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        builder18.requestInterceptor = requestInterceptor23;
        retrofit.client.Client.Provider provider25 = builder18.clientProvider;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor27 = restAdapter26.callbackExecutor;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor29 = restAdapter28.callbackExecutor;
        java.util.concurrent.Executor executor30 = restAdapter28.callbackExecutor;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler32 = restAdapter31.errorHandler;
        retrofit.Server server35 = new retrofit.Server("", "");
        restAdapter31.server = server35;
        restAdapter28.server = server35;
        restAdapter26.server = server35;
        retrofit.Profiler profiler39 = restAdapter26.profiler;
        retrofit.ErrorHandler errorHandler40 = null;
        restAdapter26.errorHandler = errorHandler40;
        retrofit.RestAdapter.RestHandler restHandler42 = restAdapter26.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler43 = restAdapter26.new RestHandler();
        retrofit.client.Client.Provider provider44 = restAdapter26.clientProvider;
        retrofit.client.Client.Provider provider45 = restAdapter26.clientProvider;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler47 = builder46.errorHandler;
        retrofit.RequestInterceptor requestInterceptor48 = null;
        builder46.requestInterceptor = requestInterceptor48;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider51 = builder50.clientProvider;
        java.util.concurrent.Executor executor52 = null;
        builder50.callbackExecutor = executor52;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.Server server57 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder58 = builder54.setServer(server57);
        java.lang.String str59 = server57.getUrl();
        retrofit.RestAdapter.Builder builder60 = builder50.setServer(server57);
        builder50.ensureSaneDefaults();
        retrofit.Server server62 = null;
        retrofit.client.Client.Provider provider63 = null;
        java.util.concurrent.Executor executor64 = null;
        java.util.concurrent.Executor executor65 = null;
        retrofit.RequestInterceptor requestInterceptor66 = null;
        retrofit.converter.Converter converter67 = null;
        retrofit.Profiler profiler68 = null;
        retrofit.ErrorHandler errorHandler69 = null;
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        log70.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter74 = new retrofit.RestAdapter(server62, provider63, executor64, executor65, requestInterceptor66, converter67, profiler68, errorHandler69, log70, logLevel73);
        retrofit.RestAdapter.RestHandler restHandler75 = restAdapter74.new RestHandler();
        retrofit.RestAdapter.Log log76 = retrofit.RestAdapter.Log.NONE;
        restAdapter74.log = log76;
        retrofit.RestAdapter.Builder builder78 = builder50.setLog(log76);
        retrofit.RestAdapter.Builder builder80 = builder50.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor81 = builder50.requestInterceptor;
        builder46.requestInterceptor = requestInterceptor81;
        restAdapter26.requestInterceptor = requestInterceptor81;
        builder18.requestInterceptor = requestInterceptor81;
        retrofit.RestAdapter.Builder builder85 = builder11.setRequestInterceptor(requestInterceptor81);
        retrofit.RequestInterceptor requestInterceptor86 = builder11.requestInterceptor;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(restAdapter16);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNull(provider25);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNull(errorHandler32);
        org.junit.Assert.assertNull(profiler39);
        org.junit.Assert.assertNull(provider44);
        org.junit.Assert.assertNull(provider45);
        org.junit.Assert.assertNull(errorHandler47);
        org.junit.Assert.assertNull(provider51);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(requestInterceptor81);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(requestInterceptor86);
    }

    @Test
    public void test02752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02752");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.RestAdapter restAdapter3 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor4 = restAdapter3.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        restAdapter3.server = server12;
        retrofit.Profiler profiler16 = restAdapter3.profiler;
        retrofit.ErrorHandler errorHandler17 = null;
        restAdapter3.errorHandler = errorHandler17;
        retrofit.Profiler profiler19 = null;
        restAdapter3.profiler = profiler19;
        retrofit.RestAdapter.LogLevel logLevel21 = restAdapter3.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter3.logLevel = logLevel22;
        restAdapter0.logLevel = logLevel22;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.Server server28 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder29 = builder25.setServer(server28);
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor31 = restAdapter30.callbackExecutor;
        java.util.concurrent.Executor executor32 = restAdapter30.callbackExecutor;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler34 = restAdapter33.errorHandler;
        retrofit.Server server37 = new retrofit.Server("", "");
        restAdapter33.server = server37;
        restAdapter30.server = server37;
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        restAdapter30.log = log40;
        retrofit.RestAdapter.Builder builder42 = builder29.setLog(log40);
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder44 = builder29.setLogLevel(logLevel43);
        retrofit.Profiler profiler45 = null;
        builder44.profiler = profiler45;
        retrofit.converter.Converter converter47 = null;
        builder44.converter = converter47;
        retrofit.ErrorHandler errorHandler49 = null;
        builder44.errorHandler = errorHandler49;
        retrofit.RestAdapter restAdapter51 = builder44.build();
        retrofit.ErrorHandler errorHandler52 = builder44.errorHandler;
        restAdapter0.errorHandler = errorHandler52;
        retrofit.converter.Converter converter54 = restAdapter0.converter;
        retrofit.RestAdapter.Log log55 = restAdapter0.log;
        java.util.concurrent.Executor executor56 = restAdapter0.callbackExecutor;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNull(profiler16);
        org.junit.Assert.assertNull(logLevel21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(errorHandler34);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(restAdapter51);
        org.junit.Assert.assertNotNull(errorHandler52);
        org.junit.Assert.assertNull(converter54);
        org.junit.Assert.assertNull(log55);
        org.junit.Assert.assertNull(executor56);
    }

    @Test
    public void test02753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02753");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.Profiler profiler3 = builder0.profiler;
        retrofit.RestAdapter.Log log4 = builder0.log;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.FULL;
        builder0.logLevel = logLevel5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.Server server10 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder11 = builder7.setServer(server10);
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor13 = restAdapter12.callbackExecutor;
        java.util.concurrent.Executor executor14 = restAdapter12.callbackExecutor;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler16 = restAdapter15.errorHandler;
        retrofit.Server server19 = new retrofit.Server("", "");
        restAdapter15.server = server19;
        restAdapter12.server = server19;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        restAdapter12.log = log22;
        retrofit.RestAdapter.Builder builder24 = builder11.setLog(log22);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder26 = builder11.setLogLevel(logLevel25);
        retrofit.Profiler profiler27 = null;
        builder26.profiler = profiler27;
        retrofit.converter.Converter converter29 = null;
        builder26.converter = converter29;
        retrofit.ErrorHandler errorHandler31 = null;
        builder26.errorHandler = errorHandler31;
        retrofit.RestAdapter restAdapter33 = builder26.build();
        retrofit.ErrorHandler errorHandler34 = builder26.errorHandler;
        retrofit.RestAdapter.Builder builder35 = builder0.setErrorHandler(errorHandler34);
        builder35.ensureSaneDefaults();
        retrofit.Server server37 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder38 = builder35.setServer(server37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(restAdapter33);
        org.junit.Assert.assertNotNull(errorHandler34);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test02754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02754");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server4 = new retrofit.Server("", "");
        builder0.server = server4;
        retrofit.client.Client.Provider provider6 = null;
        java.util.concurrent.Executor executor7 = null;
        java.util.concurrent.Executor executor8 = null;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        retrofit.converter.Converter converter10 = null;
        retrofit.Profiler profiler11 = null;
        retrofit.ErrorHandler errorHandler12 = null;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler14 = builder13.errorHandler;
        retrofit.Server server17 = new retrofit.Server("", "");
        builder13.server = server17;
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        builder13.log = log19;
        retrofit.Server server21 = null;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        log29.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel32);
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server4, provider6, executor7, executor8, requestInterceptor9, converter10, profiler11, errorHandler12, log19, logLevel32);
        retrofit.ErrorHandler errorHandler35 = null;
        restAdapter34.errorHandler = errorHandler35;
        retrofit.RestAdapter.RestHandler restHandler37 = restAdapter34.new RestHandler();
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler39 = builder38.errorHandler;
        retrofit.Server server42 = new retrofit.Server("", "");
        builder38.server = server42;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        builder38.log = log44;
        restAdapter34.log = log44;
        java.util.concurrent.Executor executor47 = restAdapter34.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler48 = restAdapter34.new RestHandler();
        retrofit.Profiler profiler49 = restAdapter34.profiler;
        retrofit.RequestInterceptor requestInterceptor50 = restAdapter34.requestInterceptor;
        retrofit.client.Client.Provider provider51 = restAdapter34.clientProvider;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNull(executor47);
        org.junit.Assert.assertNull(profiler49);
        org.junit.Assert.assertNull(requestInterceptor50);
        org.junit.Assert.assertNull(provider51);
    }

    @Test
    public void test02755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02755");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean6 = logLevel5.log();
        builder0.logLevel = logLevel5;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler9 = builder8.errorHandler;
        retrofit.ErrorHandler errorHandler10 = builder8.errorHandler;
        retrofit.converter.Converter converter11 = null;
        builder8.converter = converter11;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        builder8.requestInterceptor = requestInterceptor13;
        retrofit.client.Client.Provider provider15 = builder8.clientProvider;
        builder8.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor18 = restAdapter17.callbackExecutor;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor20 = restAdapter19.callbackExecutor;
        java.util.concurrent.Executor executor21 = restAdapter19.callbackExecutor;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler23 = restAdapter22.errorHandler;
        retrofit.Server server26 = new retrofit.Server("", "");
        restAdapter22.server = server26;
        restAdapter19.server = server26;
        restAdapter17.server = server26;
        retrofit.Profiler profiler30 = restAdapter17.profiler;
        retrofit.ErrorHandler errorHandler31 = null;
        restAdapter17.errorHandler = errorHandler31;
        retrofit.RequestInterceptor requestInterceptor33 = restAdapter17.requestInterceptor;
        retrofit.ErrorHandler errorHandler34 = restAdapter17.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler35 = restAdapter17.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler36 = restAdapter17.new RestHandler();
        retrofit.ErrorHandler errorHandler37 = restAdapter17.errorHandler;
        retrofit.client.Client.Provider provider38 = restAdapter17.clientProvider;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.Server server42 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder43 = builder39.setServer(server42);
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor45 = restAdapter44.callbackExecutor;
        java.util.concurrent.Executor executor46 = restAdapter44.callbackExecutor;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler48 = restAdapter47.errorHandler;
        retrofit.Server server51 = new retrofit.Server("", "");
        restAdapter47.server = server51;
        restAdapter44.server = server51;
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        restAdapter44.log = log54;
        retrofit.RestAdapter.Builder builder56 = builder43.setLog(log54);
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder58 = builder43.setLogLevel(logLevel57);
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler60 = builder59.errorHandler;
        retrofit.client.Client.Provider provider61 = null;
        builder59.clientProvider = provider61;
        retrofit.Server server65 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder66 = builder59.setServer(server65);
        retrofit.converter.Converter converter67 = null;
        builder66.converter = converter67;
        retrofit.RestAdapter restAdapter69 = builder66.build();
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler71 = builder70.errorHandler;
        java.util.concurrent.Executor executor72 = null;
        builder70.callbackExecutor = executor72;
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider75 = builder74.clientProvider;
        java.util.concurrent.Executor executor76 = null;
        builder74.callbackExecutor = executor76;
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        retrofit.Server server81 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder82 = builder78.setServer(server81);
        java.lang.String str83 = server81.getUrl();
        retrofit.RestAdapter.Builder builder84 = builder74.setServer(server81);
        retrofit.RestAdapter.Builder builder85 = builder70.setServer(server81);
        restAdapter69.server = server81;
        java.util.concurrent.Executor executor87 = restAdapter69.httpExecutor;
        builder43.callbackExecutor = executor87;
        restAdapter17.callbackExecutor = executor87;
        builder8.httpExecutor = executor87;
        builder0.httpExecutor = executor87;
        retrofit.Server server92 = builder0.server;
        retrofit.Profiler profiler93 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder94 = builder0.setProfiler(profiler93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNull(profiler30);
        org.junit.Assert.assertNull(requestInterceptor33);
        org.junit.Assert.assertNull(errorHandler34);
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNull(provider38);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertNull(executor46);
        org.junit.Assert.assertNull(errorHandler48);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(errorHandler60);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(restAdapter69);
        org.junit.Assert.assertNull(errorHandler71);
        org.junit.Assert.assertNull(provider75);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "hi!" + "'", str83, "hi!");
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(executor87);
        org.junit.Assert.assertNull(server92);
    }

    @Test
    public void test02756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02756");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        builder0.requestInterceptor = requestInterceptor5;
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor8 = restAdapter7.callbackExecutor;
        java.util.concurrent.Executor executor9 = restAdapter7.callbackExecutor;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.Server server14 = new retrofit.Server("", "");
        restAdapter10.server = server14;
        restAdapter7.server = server14;
        retrofit.RestAdapter.Builder builder17 = builder0.setServer(server14);
        retrofit.RestAdapter.LogLevel logLevel18 = builder0.logLevel;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler20 = builder19.errorHandler;
        retrofit.Server server23 = new retrofit.Server("", "");
        builder19.server = server23;
        retrofit.client.Client.Provider provider25 = null;
        java.util.concurrent.Executor executor26 = null;
        java.util.concurrent.Executor executor27 = null;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        retrofit.converter.Converter converter29 = null;
        retrofit.Profiler profiler30 = null;
        retrofit.ErrorHandler errorHandler31 = null;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler33 = builder32.errorHandler;
        retrofit.Server server36 = new retrofit.Server("", "");
        builder32.server = server36;
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        builder32.log = log38;
        retrofit.Server server40 = null;
        retrofit.client.Client.Provider provider41 = null;
        java.util.concurrent.Executor executor42 = null;
        java.util.concurrent.Executor executor43 = null;
        retrofit.RequestInterceptor requestInterceptor44 = null;
        retrofit.converter.Converter converter45 = null;
        retrofit.Profiler profiler46 = null;
        retrofit.ErrorHandler errorHandler47 = null;
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        log48.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter(server40, provider41, executor42, executor43, requestInterceptor44, converter45, profiler46, errorHandler47, log48, logLevel51);
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server23, provider25, executor26, executor27, requestInterceptor28, converter29, profiler30, errorHandler31, log38, logLevel51);
        retrofit.RestAdapter.Builder builder54 = builder0.setServer(server23);
        retrofit.Server server56 = new retrofit.Server("hi!");
        java.lang.String str57 = server56.getUrl();
        retrofit.RestAdapter.Builder builder58 = builder0.setServer(server56);
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider60 = builder59.clientProvider;
        java.util.concurrent.Executor executor61 = null;
        builder59.callbackExecutor = executor61;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        retrofit.Server server66 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder67 = builder63.setServer(server66);
        java.lang.String str68 = server66.getUrl();
        retrofit.RestAdapter.Builder builder69 = builder59.setServer(server66);
        builder59.ensureSaneDefaults();
        retrofit.Server server71 = null;
        retrofit.client.Client.Provider provider72 = null;
        java.util.concurrent.Executor executor73 = null;
        java.util.concurrent.Executor executor74 = null;
        retrofit.RequestInterceptor requestInterceptor75 = null;
        retrofit.converter.Converter converter76 = null;
        retrofit.Profiler profiler77 = null;
        retrofit.ErrorHandler errorHandler78 = null;
        retrofit.RestAdapter.Log log79 = retrofit.RestAdapter.Log.NONE;
        log79.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel82 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter83 = new retrofit.RestAdapter(server71, provider72, executor73, executor74, requestInterceptor75, converter76, profiler77, errorHandler78, log79, logLevel82);
        retrofit.RestAdapter.RestHandler restHandler84 = restAdapter83.new RestHandler();
        retrofit.RestAdapter.Log log85 = retrofit.RestAdapter.Log.NONE;
        restAdapter83.log = log85;
        retrofit.RestAdapter.Builder builder87 = builder59.setLog(log85);
        retrofit.RestAdapter.Builder builder88 = builder0.setLog(log85);
        java.util.concurrent.Executor executor89 = builder88.callbackExecutor;
        retrofit.RestAdapter restAdapter90 = builder88.build();
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNull(errorHandler33);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(provider60);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(log79);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNull(executor89);
        org.junit.Assert.assertNotNull(restAdapter90);
    }

    @Test
    public void test02757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02757");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        restAdapter12.log = log14;
        retrofit.converter.Converter converter16 = null;
        restAdapter12.converter = converter16;
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter12.new RestHandler();
        retrofit.Profiler profiler19 = null;
        restAdapter12.profiler = profiler19;
        retrofit.Server server21 = restAdapter12.server;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler23 = builder22.errorHandler;
        retrofit.ErrorHandler errorHandler24 = builder22.errorHandler;
        retrofit.RestAdapter.Log log25 = null;
        builder22.log = log25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler28 = builder27.errorHandler;
        retrofit.client.Client.Provider provider29 = null;
        builder27.clientProvider = provider29;
        retrofit.Server server33 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder34 = builder27.setServer(server33);
        retrofit.client.Client.Provider provider35 = null;
        java.util.concurrent.Executor executor36 = null;
        java.util.concurrent.Executor executor37 = null;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        retrofit.converter.Converter converter39 = null;
        retrofit.Profiler profiler40 = null;
        retrofit.ErrorHandler errorHandler41 = null;
        retrofit.Server server42 = null;
        retrofit.client.Client.Provider provider43 = null;
        java.util.concurrent.Executor executor44 = null;
        java.util.concurrent.Executor executor45 = null;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        retrofit.converter.Converter converter47 = null;
        retrofit.Profiler profiler48 = null;
        retrofit.ErrorHandler errorHandler49 = null;
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        log50.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter(server42, provider43, executor44, executor45, requestInterceptor46, converter47, profiler48, errorHandler49, log50, logLevel53);
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter(server33, provider35, executor36, executor37, requestInterceptor38, converter39, profiler40, errorHandler41, log50, logLevel55);
        builder22.logLevel = logLevel55;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.Server server61 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder62 = builder58.setServer(server61);
        retrofit.converter.Converter converter63 = builder58.converter;
        retrofit.RequestInterceptor requestInterceptor64 = builder58.requestInterceptor;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider66 = builder65.clientProvider;
        java.util.concurrent.Executor executor67 = null;
        builder65.callbackExecutor = executor67;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        retrofit.Server server72 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder73 = builder69.setServer(server72);
        java.lang.String str74 = server72.getUrl();
        retrofit.RestAdapter.Builder builder75 = builder65.setServer(server72);
        builder65.ensureSaneDefaults();
        retrofit.Server server77 = null;
        retrofit.client.Client.Provider provider78 = null;
        java.util.concurrent.Executor executor79 = null;
        java.util.concurrent.Executor executor80 = null;
        retrofit.RequestInterceptor requestInterceptor81 = null;
        retrofit.converter.Converter converter82 = null;
        retrofit.Profiler profiler83 = null;
        retrofit.ErrorHandler errorHandler84 = null;
        retrofit.RestAdapter.Log log85 = retrofit.RestAdapter.Log.NONE;
        log85.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel88 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter89 = new retrofit.RestAdapter(server77, provider78, executor79, executor80, requestInterceptor81, converter82, profiler83, errorHandler84, log85, logLevel88);
        retrofit.RestAdapter.RestHandler restHandler90 = restAdapter89.new RestHandler();
        retrofit.RestAdapter.Log log91 = retrofit.RestAdapter.Log.NONE;
        restAdapter89.log = log91;
        retrofit.RestAdapter.Builder builder93 = builder65.setLog(log91);
        retrofit.RestAdapter.Builder builder95 = builder65.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor96 = builder65.requestInterceptor;
        builder58.requestInterceptor = requestInterceptor96;
        retrofit.RestAdapter.Builder builder98 = builder22.setRequestInterceptor(requestInterceptor96);
        restAdapter12.requestInterceptor = requestInterceptor96;
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNull(server21);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(converter63);
        org.junit.Assert.assertNull(requestInterceptor64);
        org.junit.Assert.assertNull(provider66);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "hi!" + "'", str74, "hi!");
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(log85);
        org.junit.Assert.assertTrue("'" + logLevel88 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel88.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log91);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(requestInterceptor96);
        org.junit.Assert.assertNotNull(builder98);
    }

    @Test
    public void test02758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02758");
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        log14.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel17);
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter18.new RestHandler();
        java.util.concurrent.Executor executor20 = null;
        restAdapter18.callbackExecutor = executor20;
        retrofit.client.Header[] headerArray38 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList39 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList39, headerArray38);
        retrofit.mime.TypedOutput typedOutput41 = null;
        retrofit.client.Request request42 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList39, typedOutput41);
        retrofit.mime.TypedOutput typedOutput43 = null;
        retrofit.client.Request request44 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList39, typedOutput43);
        retrofit.mime.TypedOutput typedOutput45 = null;
        retrofit.client.Request request46 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList39, typedOutput45);
        retrofit.mime.TypedOutput typedOutput47 = null;
        retrofit.client.Request request48 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList39, typedOutput47);
        retrofit.mime.TypedOutput typedOutput49 = null;
        retrofit.client.Request request50 = new retrofit.client.Request("default", "hi!", (java.util.List<retrofit.client.Header>) headerList39, typedOutput49);
        retrofit.mime.TypedOutput typedOutput51 = null;
        retrofit.client.Request request52 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList39, typedOutput51);
        retrofit.mime.TypedOutput typedOutput53 = null;
        retrofit.client.Request request54 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList39, typedOutput53);
        retrofit.mime.TypedOutput typedOutput55 = null;
        retrofit.client.Request request56 = new retrofit.client.Request("hi!", "default", (java.util.List<retrofit.client.Header>) headerList39, typedOutput55);
        retrofit.client.Request request57 = restAdapter18.logAndReplaceRequest(request56);
        retrofit.client.Header[] headerArray64 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList65 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList65, headerArray64);
        retrofit.mime.TypedOutput typedOutput67 = null;
        retrofit.client.Request request68 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList65, typedOutput67);
        retrofit.mime.TypedOutput typedOutput69 = null;
        retrofit.client.Request request70 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList65, typedOutput69);
        retrofit.mime.TypedOutput typedOutput71 = null;
        retrofit.client.Request request72 = new retrofit.client.Request("", "default", (java.util.List<retrofit.client.Header>) headerList65, typedOutput71);
        java.util.List<retrofit.client.Header> headerList73 = request72.getHeaders();
        retrofit.client.Request request74 = restAdapter18.logAndReplaceRequest(request72);
        java.util.List<retrofit.client.Header> headerList75 = request72.getHeaders();
        retrofit.mime.TypedOutput typedOutput76 = null;
        retrofit.client.Request request77 = new retrofit.client.Request("", "hi!", headerList75, typedOutput76);
        retrofit.mime.TypedOutput typedOutput78 = null;
        retrofit.client.Request request79 = new retrofit.client.Request("", "default", headerList75, typedOutput78);
        retrofit.mime.TypedOutput typedOutput80 = null;
        retrofit.client.Request request81 = new retrofit.client.Request("default", "hi!", headerList75, typedOutput80);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(request57);
        org.junit.Assert.assertNotNull(headerArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(headerList73);
        org.junit.Assert.assertNotNull(request74);
        org.junit.Assert.assertNotNull(headerList75);
    }

    @Test
    public void test02759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02759");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        restAdapter12.log = log14;
        retrofit.converter.Converter converter16 = null;
        restAdapter12.converter = converter16;
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter12.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor19 = restAdapter12.requestInterceptor;
        retrofit.Server server20 = restAdapter12.server;
        retrofit.RestAdapter.RestHandler restHandler21 = restAdapter12.new RestHandler();
        retrofit.client.Header[] headerArray32 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList33 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList33, headerArray32);
        retrofit.mime.TypedOutput typedOutput35 = null;
        retrofit.client.Request request36 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList33, typedOutput35);
        retrofit.mime.TypedOutput typedOutput37 = null;
        retrofit.client.Request request38 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList33, typedOutput37);
        retrofit.mime.TypedOutput typedOutput39 = null;
        retrofit.client.Request request40 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList33, typedOutput39);
        retrofit.mime.TypedOutput typedOutput41 = null;
        retrofit.client.Request request42 = new retrofit.client.Request("hi!", "default", (java.util.List<retrofit.client.Header>) headerList33, typedOutput41);
        retrofit.mime.TypedOutput typedOutput43 = null;
        retrofit.client.Request request44 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList33, typedOutput43);
        retrofit.client.Request request45 = restAdapter12.logAndReplaceRequest(request44);
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler47 = builder46.errorHandler;
        retrofit.client.Client.Provider provider48 = null;
        builder46.clientProvider = provider48;
        retrofit.Server server52 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder53 = builder46.setServer(server52);
        retrofit.converter.Converter converter54 = null;
        builder53.converter = converter54;
        retrofit.RestAdapter restAdapter56 = builder53.build();
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler58 = builder57.errorHandler;
        java.util.concurrent.Executor executor59 = null;
        builder57.callbackExecutor = executor59;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider62 = builder61.clientProvider;
        java.util.concurrent.Executor executor63 = null;
        builder61.callbackExecutor = executor63;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.Server server68 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder69 = builder65.setServer(server68);
        java.lang.String str70 = server68.getUrl();
        retrofit.RestAdapter.Builder builder71 = builder61.setServer(server68);
        retrofit.RestAdapter.Builder builder72 = builder57.setServer(server68);
        restAdapter56.server = server68;
        java.util.concurrent.Executor executor74 = restAdapter56.httpExecutor;
        retrofit.client.Header[] headerArray79 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList80 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList80, headerArray79);
        retrofit.mime.TypedOutput typedOutput82 = null;
        retrofit.client.Request request83 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList80, typedOutput82);
        java.lang.String str84 = request83.getMethod();
        java.util.List<retrofit.client.Header> headerList85 = request83.getHeaders();
        retrofit.mime.TypedOutput typedOutput86 = null;
        retrofit.client.Request request87 = new retrofit.client.Request("default", "hi!", headerList85, typedOutput86);
        retrofit.client.Request request88 = restAdapter56.logAndReplaceRequest(request87);
        retrofit.mime.TypedOutput typedOutput89 = request88.getBody();
        retrofit.client.Request request90 = restAdapter12.logAndReplaceRequest(request88);
        java.lang.String str91 = request90.getUrl();
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNull(requestInterceptor19);
        org.junit.Assert.assertNull(server20);
        org.junit.Assert.assertNotNull(headerArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(request45);
        org.junit.Assert.assertNull(errorHandler47);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(restAdapter56);
        org.junit.Assert.assertNull(errorHandler58);
        org.junit.Assert.assertNull(provider62);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hi!" + "'", str70, "hi!");
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(executor74);
        org.junit.Assert.assertNotNull(headerArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNotNull(headerList85);
        org.junit.Assert.assertNotNull(request88);
        org.junit.Assert.assertNull(typedOutput89);
        org.junit.Assert.assertNotNull(request90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "hi!" + "'", str91, "hi!");
    }

    @Test
    public void test02760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02760");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = restAdapter0.errorHandler;
        java.util.concurrent.Executor executor15 = null;
        restAdapter0.httpExecutor = executor15;
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter0.logLevel;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler19 = null;
        builder18.errorHandler = errorHandler19;
        retrofit.ErrorHandler errorHandler21 = builder18.errorHandler;
        retrofit.RestAdapter.Builder builder23 = builder18.setServer("hi!");
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler25 = builder24.errorHandler;
        retrofit.ErrorHandler errorHandler26 = builder24.errorHandler;
        retrofit.Profiler profiler27 = builder24.profiler;
        retrofit.RestAdapter.Log log28 = builder24.log;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.FULL;
        builder24.logLevel = logLevel29;
        retrofit.RestAdapter.Builder builder31 = builder23.setLogLevel(logLevel29);
        retrofit.Server server32 = null;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        log40.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log40, logLevel43);
        log40.log("");
        retrofit.RestAdapter.Builder builder47 = builder31.setLog(log40);
        retrofit.Profiler profiler48 = null;
        builder47.profiler = profiler48;
        retrofit.Server server50 = null;
        retrofit.client.Client.Provider provider51 = null;
        java.util.concurrent.Executor executor52 = null;
        java.util.concurrent.Executor executor53 = null;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        retrofit.converter.Converter converter55 = null;
        retrofit.Profiler profiler56 = null;
        retrofit.ErrorHandler errorHandler57 = null;
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        log58.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel61 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter(server50, provider51, executor52, executor53, requestInterceptor54, converter55, profiler56, errorHandler57, log58, logLevel61);
        retrofit.RestAdapter.RestHandler restHandler63 = restAdapter62.new RestHandler();
        retrofit.RestAdapter.Log log64 = retrofit.RestAdapter.Log.NONE;
        restAdapter62.log = log64;
        retrofit.converter.Converter converter66 = null;
        restAdapter62.converter = converter66;
        retrofit.RestAdapter.RestHandler restHandler68 = restAdapter62.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor69 = restAdapter62.requestInterceptor;
        retrofit.Server server70 = restAdapter62.server;
        retrofit.RestAdapter.LogLevel logLevel71 = restAdapter62.getLogLevel();
        builder47.logLevel = logLevel71;
        restAdapter0.logLevel = logLevel71;
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler75 = builder74.errorHandler;
        retrofit.client.Client.Provider provider76 = null;
        builder74.clientProvider = provider76;
        retrofit.Server server80 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder81 = builder74.setServer(server80);
        retrofit.converter.Converter converter82 = null;
        builder81.converter = converter82;
        retrofit.RestAdapter restAdapter84 = builder81.build();
        retrofit.Profiler profiler85 = builder81.profiler;
        java.util.concurrent.Executor executor86 = builder81.httpExecutor;
        restAdapter0.httpExecutor = executor86;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(errorHandler25);
        org.junit.Assert.assertNull(errorHandler26);
        org.junit.Assert.assertNull(profiler27);
        org.junit.Assert.assertNull(log28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(log58);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log64);
        org.junit.Assert.assertNull(requestInterceptor69);
        org.junit.Assert.assertNull(server70);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler75);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(restAdapter84);
        org.junit.Assert.assertNull(profiler85);
        org.junit.Assert.assertNotNull(executor86);
    }

    @Test
    public void test02761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02761");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter0.getLogLevel();
        retrofit.client.Client.Provider provider20 = null;
        restAdapter0.clientProvider = provider20;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean23 = logLevel22.log();
        restAdapter0.logLevel = logLevel22;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        restAdapter0.requestInterceptor = requestInterceptor25;
        retrofit.ErrorHandler errorHandler27 = restAdapter0.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler28 = restAdapter0.new RestHandler();
        retrofit.Server server29 = restAdapter0.server;
        retrofit.RestAdapter.RestHandler restHandler30 = restAdapter0.new RestHandler();
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor32 = restAdapter31.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler33 = restAdapter31.new RestHandler();
        retrofit.Server server36 = new retrofit.Server("hi!", "hi!");
        restAdapter31.server = server36;
        retrofit.Server server38 = restAdapter31.server;
        retrofit.RestAdapter.RestHandler restHandler39 = restAdapter31.new RestHandler();
        java.lang.reflect.Method method40 = null;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor42 = restAdapter41.callbackExecutor;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor44 = restAdapter43.callbackExecutor;
        java.util.concurrent.Executor executor45 = restAdapter43.callbackExecutor;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler47 = restAdapter46.errorHandler;
        retrofit.Server server50 = new retrofit.Server("", "");
        restAdapter46.server = server50;
        restAdapter43.server = server50;
        restAdapter41.server = server50;
        retrofit.Profiler profiler54 = restAdapter41.profiler;
        retrofit.ErrorHandler errorHandler55 = null;
        restAdapter41.errorHandler = errorHandler55;
        retrofit.RequestInterceptor requestInterceptor57 = restAdapter41.requestInterceptor;
        retrofit.ErrorHandler errorHandler58 = restAdapter41.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler59 = restAdapter41.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler60 = restAdapter41.new RestHandler();
        retrofit.ErrorHandler errorHandler61 = restAdapter41.errorHandler;
        retrofit.client.Client.Provider provider62 = restAdapter41.clientProvider;
        retrofit.converter.Converter converter63 = null;
        restAdapter41.converter = converter63;
        retrofit.client.Header[] headerArray71 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList72 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList72, headerArray71);
        retrofit.mime.TypedOutput typedOutput74 = null;
        retrofit.client.Request request75 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList72, typedOutput74);
        retrofit.mime.TypedOutput typedOutput76 = null;
        retrofit.client.Request request77 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList72, typedOutput76);
        retrofit.mime.TypedOutput typedOutput78 = null;
        retrofit.client.Request request79 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList72, typedOutput78);
        java.lang.Object[] objArray80 = new java.lang.Object[] { converter63, "" };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj81 = restHandler30.invoke((java.lang.Object) restAdapter31, method40, objArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNotNull(server29);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNotNull(server38);
        org.junit.Assert.assertNull(executor42);
        org.junit.Assert.assertNull(executor44);
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertNull(errorHandler47);
        org.junit.Assert.assertNull(profiler54);
        org.junit.Assert.assertNull(requestInterceptor57);
        org.junit.Assert.assertNull(errorHandler58);
        org.junit.Assert.assertNull(errorHandler61);
        org.junit.Assert.assertNull(provider62);
        org.junit.Assert.assertNotNull(headerArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[null, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[null, ]");
    }

    @Test
    public void test02762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02762");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.client.Client.Provider provider14 = restAdapter12.clientProvider;
        retrofit.RestAdapter.Log log15 = restAdapter12.log;
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter12.new RestHandler();
        retrofit.Profiler profiler17 = restAdapter12.profiler;
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter12.new RestHandler();
        retrofit.Server server19 = restAdapter12.server;
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter12.new RestHandler();
        retrofit.Profiler profiler21 = null;
        restAdapter12.profiler = profiler21;
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNull(profiler17);
        org.junit.Assert.assertNull(server19);
    }

    @Test
    public void test02763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02763");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RequestInterceptor requestInterceptor1 = builder0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor2 = builder0.requestInterceptor;
        retrofit.RestAdapter restAdapter3 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor4 = restAdapter3.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        restAdapter3.server = server12;
        retrofit.Profiler profiler16 = restAdapter3.profiler;
        retrofit.ErrorHandler errorHandler17 = null;
        restAdapter3.errorHandler = errorHandler17;
        retrofit.Profiler profiler19 = null;
        restAdapter3.profiler = profiler19;
        retrofit.RestAdapter.LogLevel logLevel21 = restAdapter3.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter3.getLogLevel();
        retrofit.client.Client.Provider provider23 = null;
        restAdapter3.clientProvider = provider23;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean26 = logLevel25.log();
        restAdapter3.logLevel = logLevel25;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        restAdapter3.requestInterceptor = requestInterceptor28;
        retrofit.RestAdapter.Log log30 = restAdapter3.log;
        retrofit.Server server31 = restAdapter3.server;
        retrofit.ErrorHandler errorHandler32 = restAdapter3.errorHandler;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler34 = builder33.errorHandler;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        builder33.requestInterceptor = requestInterceptor35;
        java.util.concurrent.Executor executor37 = builder33.httpExecutor;
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        log38.log("default");
        builder33.log = log38;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler43 = builder42.errorHandler;
        retrofit.client.Client.Provider provider44 = null;
        builder42.clientProvider = provider44;
        retrofit.Server server48 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder49 = builder42.setServer(server48);
        retrofit.converter.Converter converter50 = null;
        builder49.converter = converter50;
        retrofit.RestAdapter restAdapter52 = builder49.build();
        retrofit.Profiler profiler53 = builder49.profiler;
        retrofit.Profiler profiler54 = builder49.profiler;
        retrofit.client.Client.Provider provider55 = builder49.clientProvider;
        retrofit.RestAdapter.Builder builder56 = builder33.setClient(provider55);
        restAdapter3.clientProvider = provider55;
        retrofit.RestAdapter.Builder builder58 = builder0.setClient(provider55);
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler60 = restAdapter59.new RestHandler();
        java.util.concurrent.Executor executor61 = null;
        restAdapter59.httpExecutor = executor61;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler64 = builder63.errorHandler;
        retrofit.ErrorHandler errorHandler65 = builder63.errorHandler;
        retrofit.converter.Converter converter66 = null;
        builder63.converter = converter66;
        retrofit.RequestInterceptor requestInterceptor68 = null;
        builder63.requestInterceptor = requestInterceptor68;
        retrofit.client.Client.Provider provider70 = builder63.clientProvider;
        builder63.ensureSaneDefaults();
        retrofit.client.Client.Provider provider72 = builder63.clientProvider;
        restAdapter59.clientProvider = provider72;
        builder0.clientProvider = provider72;
        retrofit.RestAdapter.Builder builder76 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel77 = builder76.logLevel;
        boolean boolean78 = logLevel77.log();
        org.junit.Assert.assertNull(requestInterceptor1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNull(profiler16);
        org.junit.Assert.assertNull(logLevel21);
        org.junit.Assert.assertNull(logLevel22);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(log30);
        org.junit.Assert.assertNotNull(server31);
        org.junit.Assert.assertNull(errorHandler32);
        org.junit.Assert.assertNull(errorHandler34);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNull(errorHandler43);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(restAdapter52);
        org.junit.Assert.assertNull(profiler53);
        org.junit.Assert.assertNull(profiler54);
        org.junit.Assert.assertNotNull(provider55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(errorHandler64);
        org.junit.Assert.assertNull(errorHandler65);
        org.junit.Assert.assertNull(provider70);
        org.junit.Assert.assertNotNull(provider72);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test02764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02764");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter0.getLogLevel();
        retrofit.client.Client.Provider provider20 = null;
        restAdapter0.clientProvider = provider20;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean23 = logLevel22.log();
        restAdapter0.logLevel = logLevel22;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        restAdapter0.requestInterceptor = requestInterceptor25;
        retrofit.RestAdapter.Log log27 = restAdapter0.log;
        retrofit.Server server28 = restAdapter0.server;
        retrofit.ErrorHandler errorHandler29 = restAdapter0.errorHandler;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler31 = builder30.errorHandler;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        builder30.requestInterceptor = requestInterceptor32;
        java.util.concurrent.Executor executor34 = builder30.httpExecutor;
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        log35.log("default");
        builder30.log = log35;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler40 = builder39.errorHandler;
        retrofit.client.Client.Provider provider41 = null;
        builder39.clientProvider = provider41;
        retrofit.Server server45 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder46 = builder39.setServer(server45);
        retrofit.converter.Converter converter47 = null;
        builder46.converter = converter47;
        retrofit.RestAdapter restAdapter49 = builder46.build();
        retrofit.Profiler profiler50 = builder46.profiler;
        retrofit.Profiler profiler51 = builder46.profiler;
        retrofit.client.Client.Provider provider52 = builder46.clientProvider;
        retrofit.RestAdapter.Builder builder53 = builder30.setClient(provider52);
        restAdapter0.clientProvider = provider52;
        retrofit.client.Header[] headerArray67 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList68 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList68, headerArray67);
        retrofit.mime.TypedOutput typedOutput70 = null;
        retrofit.client.Request request71 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList68, typedOutput70);
        retrofit.mime.TypedOutput typedOutput72 = null;
        retrofit.client.Request request73 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList68, typedOutput72);
        retrofit.mime.TypedOutput typedOutput74 = null;
        retrofit.client.Request request75 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList68, typedOutput74);
        retrofit.mime.TypedOutput typedOutput76 = null;
        retrofit.client.Request request77 = new retrofit.client.Request("default", "hi!", (java.util.List<retrofit.client.Header>) headerList68, typedOutput76);
        retrofit.mime.TypedOutput typedOutput78 = null;
        retrofit.client.Request request79 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList68, typedOutput78);
        retrofit.mime.TypedOutput typedOutput80 = null;
        retrofit.client.Request request81 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList68, typedOutput80);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request82 = restAdapter0.logAndReplaceRequest(request81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(log27);
        org.junit.Assert.assertNotNull(server28);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNull(errorHandler31);
        org.junit.Assert.assertNull(executor34);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(restAdapter49);
        org.junit.Assert.assertNull(profiler50);
        org.junit.Assert.assertNull(profiler51);
        org.junit.Assert.assertNotNull(provider52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(headerArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test02765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02765");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.converter.Converter converter4 = builder0.converter;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor8 = restAdapter7.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean10 = logLevel9.log();
        restAdapter7.logLevel = logLevel9;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler13 = builder12.errorHandler;
        retrofit.client.Client.Provider provider14 = null;
        builder12.clientProvider = provider14;
        retrofit.Server server18 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder19 = builder12.setServer(server18);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler21 = builder20.errorHandler;
        retrofit.client.Client.Provider provider22 = null;
        builder20.clientProvider = provider22;
        retrofit.converter.Converter converter24 = builder20.converter;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder26 = builder20.setLogLevel(logLevel25);
        builder12.logLevel = logLevel25;
        boolean boolean28 = logLevel25.log();
        restAdapter7.logLevel = logLevel25;
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor32 = restAdapter31.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean34 = logLevel33.log();
        restAdapter31.logLevel = logLevel33;
        builder30.logLevel = logLevel33;
        retrofit.Server server37 = builder30.server;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler39 = builder38.errorHandler;
        retrofit.ErrorHandler errorHandler40 = builder38.errorHandler;
        retrofit.Profiler profiler41 = builder38.profiler;
        retrofit.RestAdapter.Log log42 = builder38.log;
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.FULL;
        builder38.logLevel = logLevel43;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.Server server48 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder49 = builder45.setServer(server48);
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor51 = restAdapter50.callbackExecutor;
        java.util.concurrent.Executor executor52 = restAdapter50.callbackExecutor;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler54 = restAdapter53.errorHandler;
        retrofit.Server server57 = new retrofit.Server("", "");
        restAdapter53.server = server57;
        restAdapter50.server = server57;
        retrofit.RestAdapter.Log log60 = retrofit.RestAdapter.Log.NONE;
        restAdapter50.log = log60;
        retrofit.RestAdapter.Builder builder62 = builder49.setLog(log60);
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder64 = builder49.setLogLevel(logLevel63);
        retrofit.Profiler profiler65 = null;
        builder64.profiler = profiler65;
        retrofit.converter.Converter converter67 = null;
        builder64.converter = converter67;
        retrofit.ErrorHandler errorHandler69 = null;
        builder64.errorHandler = errorHandler69;
        retrofit.RestAdapter restAdapter71 = builder64.build();
        retrofit.ErrorHandler errorHandler72 = builder64.errorHandler;
        retrofit.RestAdapter.Builder builder73 = builder38.setErrorHandler(errorHandler72);
        retrofit.RestAdapter.Builder builder74 = builder30.setErrorHandler(errorHandler72);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter75 = builder74.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(converter24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(server37);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNull(profiler41);
        org.junit.Assert.assertNull(log42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(executor51);
        org.junit.Assert.assertNull(executor52);
        org.junit.Assert.assertNull(errorHandler54);
        org.junit.Assert.assertNotNull(log60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(restAdapter71);
        org.junit.Assert.assertNotNull(errorHandler72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
    }

    @Test
    public void test02766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02766");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        log21.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel24);
        retrofit.Profiler profiler26 = restAdapter25.profiler;
        java.util.concurrent.Executor executor27 = null;
        restAdapter25.callbackExecutor = executor27;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor30 = restAdapter29.callbackExecutor;
        java.util.concurrent.Executor executor31 = restAdapter29.callbackExecutor;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler33 = restAdapter32.errorHandler;
        retrofit.Server server36 = new retrofit.Server("", "");
        restAdapter32.server = server36;
        restAdapter29.server = server36;
        restAdapter25.server = server36;
        restAdapter12.server = server36;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler42 = builder41.errorHandler;
        retrofit.ErrorHandler errorHandler43 = builder41.errorHandler;
        java.util.concurrent.Executor executor44 = builder41.callbackExecutor;
        java.util.concurrent.Executor executor45 = null;
        builder41.callbackExecutor = executor45;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler48 = builder47.errorHandler;
        retrofit.Server server51 = new retrofit.Server("", "");
        builder47.server = server51;
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        builder47.log = log53;
        retrofit.RestAdapter.LogLevel logLevel55 = builder47.logLevel;
        retrofit.RestAdapter.Builder builder56 = builder41.setLogLevel(logLevel55);
        restAdapter12.setLogLevel(logLevel55);
        retrofit.RestAdapter.LogLevel logLevel58 = restAdapter12.logLevel;
        retrofit.RestAdapter.RestHandler restHandler59 = restAdapter12.new RestHandler();
        retrofit.Server server60 = restAdapter12.server;
        retrofit.converter.Converter converter61 = restAdapter12.converter;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler63 = builder62.errorHandler;
        java.util.concurrent.Executor executor64 = builder62.callbackExecutor;
        retrofit.RestAdapter.Builder builder66 = builder62.setServer("hi!");
        builder66.ensureSaneDefaults();
        retrofit.Server server68 = null;
        retrofit.client.Client.Provider provider69 = null;
        java.util.concurrent.Executor executor70 = null;
        java.util.concurrent.Executor executor71 = null;
        retrofit.RequestInterceptor requestInterceptor72 = null;
        retrofit.converter.Converter converter73 = null;
        retrofit.Profiler profiler74 = null;
        retrofit.ErrorHandler errorHandler75 = null;
        retrofit.RestAdapter.Log log76 = retrofit.RestAdapter.Log.NONE;
        log76.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel79 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter80 = new retrofit.RestAdapter(server68, provider69, executor70, executor71, requestInterceptor72, converter73, profiler74, errorHandler75, log76, logLevel79);
        retrofit.RestAdapter.RestHandler restHandler81 = restAdapter80.new RestHandler();
        retrofit.RestAdapter.Log log82 = retrofit.RestAdapter.Log.NONE;
        restAdapter80.log = log82;
        retrofit.converter.Converter converter84 = null;
        restAdapter80.converter = converter84;
        retrofit.RestAdapter.LogLevel logLevel86 = restAdapter80.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor87 = null;
        restAdapter80.requestInterceptor = requestInterceptor87;
        retrofit.RestAdapter.LogLevel logLevel89 = restAdapter80.logLevel;
        retrofit.RestAdapter.Builder builder90 = builder66.setLogLevel(logLevel89);
        retrofit.client.Client.Provider provider91 = builder66.clientProvider;
        restAdapter12.clientProvider = provider91;
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler26);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNull(errorHandler33);
        org.junit.Assert.assertNull(errorHandler42);
        org.junit.Assert.assertNull(errorHandler43);
        org.junit.Assert.assertNull(executor44);
        org.junit.Assert.assertNull(errorHandler48);
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(server60);
        org.junit.Assert.assertNull(converter61);
        org.junit.Assert.assertNull(errorHandler63);
        org.junit.Assert.assertNull(executor64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(log76);
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log82);
        org.junit.Assert.assertTrue("'" + logLevel86 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel86.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel89 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel89.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(provider91);
    }

    @Test
    public void test02767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02767");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.Server server5 = builder0.server;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.Server server9 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder10 = builder6.setServer(server9);
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor12 = restAdapter11.callbackExecutor;
        java.util.concurrent.Executor executor13 = restAdapter11.callbackExecutor;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler15 = restAdapter14.errorHandler;
        retrofit.Server server18 = new retrofit.Server("", "");
        restAdapter14.server = server18;
        restAdapter11.server = server18;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        restAdapter11.log = log21;
        retrofit.RestAdapter.Builder builder23 = builder10.setLog(log21);
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder25 = builder10.setLogLevel(logLevel24);
        builder0.logLevel = logLevel24;
        java.util.concurrent.Executor executor27 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.Server server31 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder32 = builder28.setServer(server31);
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor34 = restAdapter33.callbackExecutor;
        java.util.concurrent.Executor executor35 = restAdapter33.callbackExecutor;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler37 = restAdapter36.errorHandler;
        retrofit.Server server40 = new retrofit.Server("", "");
        restAdapter36.server = server40;
        restAdapter33.server = server40;
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        restAdapter33.log = log43;
        retrofit.RestAdapter.Builder builder45 = builder32.setLog(log43);
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder47 = builder32.setLogLevel(logLevel46);
        retrofit.Profiler profiler48 = null;
        builder47.profiler = profiler48;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.Server server53 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder54 = builder50.setServer(server53);
        retrofit.RestAdapter.LogLevel logLevel55 = builder54.logLevel;
        retrofit.RestAdapter.Builder builder56 = builder47.setLogLevel(logLevel55);
        retrofit.RestAdapter restAdapter57 = builder47.build();
        retrofit.RestAdapter.RestHandler restHandler58 = restAdapter57.new RestHandler();
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler60 = builder59.errorHandler;
        retrofit.client.Client.Provider provider61 = null;
        builder59.clientProvider = provider61;
        retrofit.Server server65 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder66 = builder59.setServer(server65);
        retrofit.converter.Converter converter67 = null;
        builder66.converter = converter67;
        retrofit.RestAdapter restAdapter69 = builder66.build();
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler71 = builder70.errorHandler;
        java.util.concurrent.Executor executor72 = null;
        builder70.callbackExecutor = executor72;
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider75 = builder74.clientProvider;
        java.util.concurrent.Executor executor76 = null;
        builder74.callbackExecutor = executor76;
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        retrofit.Server server81 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder82 = builder78.setServer(server81);
        java.lang.String str83 = server81.getUrl();
        retrofit.RestAdapter.Builder builder84 = builder74.setServer(server81);
        retrofit.RestAdapter.Builder builder85 = builder70.setServer(server81);
        restAdapter69.server = server81;
        retrofit.Server server87 = restAdapter69.server;
        retrofit.RestAdapter.RestHandler restHandler88 = restAdapter69.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel89 = restAdapter69.getLogLevel();
        restAdapter57.setLogLevel(logLevel89);
        retrofit.converter.Converter converter91 = restAdapter57.converter;
        builder0.converter = converter91;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(server5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(executor34);
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(restAdapter57);
        org.junit.Assert.assertNull(errorHandler60);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(restAdapter69);
        org.junit.Assert.assertNull(errorHandler71);
        org.junit.Assert.assertNull(provider75);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "hi!" + "'", str83, "hi!");
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(server87);
        org.junit.Assert.assertTrue("'" + logLevel89 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel89.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(converter91);
    }

    @Test
    public void test02768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02768");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = null;
        restAdapter0.httpExecutor = executor2;
        retrofit.RestAdapter.RestHandler restHandler4 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter0.logLevel;
        retrofit.ErrorHandler errorHandler6 = null;
        restAdapter0.errorHandler = errorHandler6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler9 = null;
        builder8.errorHandler = errorHandler9;
        retrofit.ErrorHandler errorHandler11 = builder8.errorHandler;
        retrofit.RestAdapter.Builder builder13 = builder8.setServer("hi!");
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler15 = builder14.errorHandler;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.Server server19 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder20 = builder16.setServer(server19);
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor22 = restAdapter21.callbackExecutor;
        java.util.concurrent.Executor executor23 = restAdapter21.callbackExecutor;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler25 = restAdapter24.errorHandler;
        retrofit.Server server28 = new retrofit.Server("", "");
        restAdapter24.server = server28;
        restAdapter21.server = server28;
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        restAdapter21.log = log31;
        retrofit.RestAdapter.Builder builder33 = builder20.setLog(log31);
        retrofit.RestAdapter.Builder builder34 = builder14.setLog(log31);
        builder8.log = log31;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler37 = builder36.errorHandler;
        retrofit.client.Client.Provider provider38 = null;
        builder36.clientProvider = provider38;
        retrofit.Server server42 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder43 = builder36.setServer(server42);
        retrofit.converter.Converter converter44 = null;
        builder43.converter = converter44;
        retrofit.RestAdapter restAdapter46 = builder43.build();
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler48 = builder47.errorHandler;
        java.util.concurrent.Executor executor49 = null;
        builder47.callbackExecutor = executor49;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider52 = builder51.clientProvider;
        java.util.concurrent.Executor executor53 = null;
        builder51.callbackExecutor = executor53;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.Server server58 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder59 = builder55.setServer(server58);
        java.lang.String str60 = server58.getUrl();
        retrofit.RestAdapter.Builder builder61 = builder51.setServer(server58);
        retrofit.RestAdapter.Builder builder62 = builder47.setServer(server58);
        restAdapter46.server = server58;
        retrofit.client.Client.Provider provider64 = restAdapter46.clientProvider;
        retrofit.RestAdapter.Builder builder65 = builder8.setClient(provider64);
        retrofit.RestAdapter restAdapter66 = builder8.build();
        retrofit.Profiler profiler67 = null;
        restAdapter66.profiler = profiler67;
        retrofit.client.Header[] headerArray77 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList78 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList78, headerArray77);
        retrofit.mime.TypedOutput typedOutput80 = null;
        retrofit.client.Request request81 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList78, typedOutput80);
        retrofit.mime.TypedOutput typedOutput82 = null;
        retrofit.client.Request request83 = new retrofit.client.Request("", "default", (java.util.List<retrofit.client.Header>) headerList78, typedOutput82);
        retrofit.mime.TypedOutput typedOutput84 = null;
        retrofit.client.Request request85 = new retrofit.client.Request("default", "", (java.util.List<retrofit.client.Header>) headerList78, typedOutput84);
        retrofit.mime.TypedOutput typedOutput86 = null;
        retrofit.client.Request request87 = new retrofit.client.Request("default", "hi!", (java.util.List<retrofit.client.Header>) headerList78, typedOutput86);
        retrofit.client.Request request88 = restAdapter66.logAndReplaceRequest(request87);
        retrofit.RestAdapter.Log log89 = restAdapter66.log;
        log89.log("default");
        restAdapter0.log = log89;
        java.util.concurrent.Executor executor93 = restAdapter0.httpExecutor;
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNull(errorHandler25);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(restAdapter46);
        org.junit.Assert.assertNull(errorHandler48);
        org.junit.Assert.assertNull(provider52);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(provider64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(restAdapter66);
        org.junit.Assert.assertNotNull(headerArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(request88);
        org.junit.Assert.assertNotNull(log89);
        org.junit.Assert.assertNull(executor93);
    }

    @Test
    public void test02769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02769");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server4 = new retrofit.Server("", "");
        builder0.server = server4;
        java.util.concurrent.Executor executor6 = builder0.callbackExecutor;
        retrofit.converter.Converter converter7 = null;
        builder0.converter = converter7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler10 = builder9.errorHandler;
        retrofit.client.Client.Provider provider11 = null;
        builder9.clientProvider = provider11;
        retrofit.converter.Converter converter13 = builder9.converter;
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder15 = builder9.setLogLevel(logLevel14);
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor17 = restAdapter16.callbackExecutor;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor19 = restAdapter18.callbackExecutor;
        java.util.concurrent.Executor executor20 = restAdapter18.callbackExecutor;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler22 = restAdapter21.errorHandler;
        retrofit.Server server25 = new retrofit.Server("", "");
        restAdapter21.server = server25;
        restAdapter18.server = server25;
        restAdapter16.server = server25;
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler37 = builder36.errorHandler;
        retrofit.Server server40 = new retrofit.Server("", "");
        builder36.server = server40;
        retrofit.client.Client.Provider provider42 = null;
        java.util.concurrent.Executor executor43 = null;
        java.util.concurrent.Executor executor44 = null;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        retrofit.converter.Converter converter46 = null;
        retrofit.Profiler profiler47 = null;
        retrofit.ErrorHandler errorHandler48 = null;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler50 = builder49.errorHandler;
        retrofit.Server server53 = new retrofit.Server("", "");
        builder49.server = server53;
        retrofit.RestAdapter.Log log55 = retrofit.RestAdapter.Log.NONE;
        builder49.log = log55;
        retrofit.Server server57 = null;
        retrofit.client.Client.Provider provider58 = null;
        java.util.concurrent.Executor executor59 = null;
        java.util.concurrent.Executor executor60 = null;
        retrofit.RequestInterceptor requestInterceptor61 = null;
        retrofit.converter.Converter converter62 = null;
        retrofit.Profiler profiler63 = null;
        retrofit.ErrorHandler errorHandler64 = null;
        retrofit.RestAdapter.Log log65 = retrofit.RestAdapter.Log.NONE;
        log65.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel68 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter(server57, provider58, executor59, executor60, requestInterceptor61, converter62, profiler63, errorHandler64, log65, logLevel68);
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter(server40, provider42, executor43, executor44, requestInterceptor45, converter46, profiler47, errorHandler48, log55, logLevel68);
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        retrofit.Server server74 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder75 = builder71.setServer(server74);
        retrofit.RestAdapter restAdapter76 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor77 = restAdapter76.callbackExecutor;
        java.util.concurrent.Executor executor78 = restAdapter76.callbackExecutor;
        retrofit.RestAdapter restAdapter79 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler80 = restAdapter79.errorHandler;
        retrofit.Server server83 = new retrofit.Server("", "");
        restAdapter79.server = server83;
        restAdapter76.server = server83;
        retrofit.RestAdapter.Log log86 = retrofit.RestAdapter.Log.NONE;
        restAdapter76.log = log86;
        retrofit.RestAdapter.Builder builder88 = builder75.setLog(log86);
        retrofit.RestAdapter.LogLevel logLevel89 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder90 = builder75.setLogLevel(logLevel89);
        retrofit.RestAdapter restAdapter91 = new retrofit.RestAdapter(server25, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log55, logLevel89);
        builder9.logLevel = logLevel89;
        retrofit.RestAdapter.Builder builder93 = builder0.setLogLevel(logLevel89);
        retrofit.client.Client.Provider provider94 = builder93.clientProvider;
        retrofit.RestAdapter restAdapter95 = builder93.build();
        retrofit.Server server96 = builder93.server;
        retrofit.Server server97 = builder93.server;
        retrofit.Server server98 = builder93.server;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNull(errorHandler50);
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertNotNull(log65);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNull(executor77);
        org.junit.Assert.assertNull(executor78);
        org.junit.Assert.assertNull(errorHandler80);
        org.junit.Assert.assertNotNull(log86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertTrue("'" + logLevel89 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel89.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNull(provider94);
        org.junit.Assert.assertNotNull(restAdapter95);
        org.junit.Assert.assertNotNull(server96);
        org.junit.Assert.assertNotNull(server97);
        org.junit.Assert.assertNotNull(server98);
    }

    @Test
    public void test02770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02770");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.converter.Converter converter14 = restAdapter0.converter;
        retrofit.ErrorHandler errorHandler15 = null;
        restAdapter0.errorHandler = errorHandler15;
        retrofit.converter.Converter converter17 = restAdapter0.converter;
        retrofit.RestAdapter.Log log18 = restAdapter0.log;
        retrofit.Profiler profiler19 = restAdapter0.profiler;
        retrofit.client.Response response21 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response23 = restAdapter0.logAndReplaceResponse("hi!", response21, (long) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(converter17);
        org.junit.Assert.assertNull(log18);
        org.junit.Assert.assertNull(profiler19);
    }

    @Test
    public void test02771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02771");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        restAdapter5.log = log15;
        retrofit.RestAdapter.Builder builder17 = builder4.setLog(log15);
        retrofit.converter.Converter converter18 = null;
        builder17.converter = converter18;
        retrofit.RestAdapter.Builder builder21 = builder17.setServer("hi!");
        retrofit.Server server22 = null;
        retrofit.client.Client.Provider provider23 = null;
        java.util.concurrent.Executor executor24 = null;
        java.util.concurrent.Executor executor25 = null;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        retrofit.converter.Converter converter27 = null;
        retrofit.Profiler profiler28 = null;
        retrofit.ErrorHandler errorHandler29 = null;
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        log30.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server22, provider23, executor24, executor25, requestInterceptor26, converter27, profiler28, errorHandler29, log30, logLevel33);
        retrofit.RestAdapter.RestHandler restHandler35 = restAdapter34.new RestHandler();
        retrofit.client.Header[] headerArray44 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList45 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList45, headerArray44);
        retrofit.mime.TypedOutput typedOutput47 = null;
        retrofit.client.Request request48 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList45, typedOutput47);
        retrofit.mime.TypedOutput typedOutput49 = null;
        retrofit.client.Request request50 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList45, typedOutput49);
        retrofit.mime.TypedOutput typedOutput51 = null;
        retrofit.client.Request request52 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList45, typedOutput51);
        retrofit.mime.TypedOutput typedOutput53 = null;
        retrofit.client.Request request54 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList45, typedOutput53);
        retrofit.mime.TypedOutput typedOutput55 = request54.getBody();
        retrofit.client.Request request56 = restAdapter34.logAndReplaceRequest(request54);
        retrofit.client.Client.Provider provider57 = null;
        restAdapter34.clientProvider = provider57;
        retrofit.RestAdapter.RestHandler restHandler59 = restAdapter34.new RestHandler();
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.Server server63 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder64 = builder60.setServer(server63);
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor66 = restAdapter65.callbackExecutor;
        java.util.concurrent.Executor executor67 = restAdapter65.callbackExecutor;
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler69 = restAdapter68.errorHandler;
        retrofit.Server server72 = new retrofit.Server("", "");
        restAdapter68.server = server72;
        restAdapter65.server = server72;
        retrofit.RestAdapter.Log log75 = retrofit.RestAdapter.Log.NONE;
        restAdapter65.log = log75;
        retrofit.RestAdapter.Builder builder77 = builder64.setLog(log75);
        retrofit.RestAdapter.LogLevel logLevel78 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder79 = builder64.setLogLevel(logLevel78);
        retrofit.Profiler profiler80 = null;
        builder79.profiler = profiler80;
        retrofit.converter.Converter converter82 = null;
        builder79.converter = converter82;
        retrofit.ErrorHandler errorHandler84 = null;
        builder79.errorHandler = errorHandler84;
        retrofit.RestAdapter restAdapter86 = builder79.build();
        retrofit.ErrorHandler errorHandler87 = builder79.errorHandler;
        restAdapter34.errorHandler = errorHandler87;
        retrofit.RestAdapter.Builder builder89 = builder17.setErrorHandler(errorHandler87);
        retrofit.client.Client.Provider provider90 = builder89.clientProvider;
        builder89.ensureSaneDefaults();
        retrofit.RestAdapter.Log log92 = builder89.log;
        retrofit.Profiler profiler93 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder94 = builder89.setProfiler(profiler93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(typedOutput55);
        org.junit.Assert.assertNotNull(request56);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(executor66);
        org.junit.Assert.assertNull(executor67);
        org.junit.Assert.assertNull(errorHandler69);
        org.junit.Assert.assertNotNull(log75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(restAdapter86);
        org.junit.Assert.assertNotNull(errorHandler87);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNull(provider90);
        org.junit.Assert.assertNotNull(log92);
    }

    @Test
    public void test02772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02772");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter0.getLogLevel();
        retrofit.client.Client.Provider provider20 = null;
        restAdapter0.clientProvider = provider20;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean23 = logLevel22.log();
        restAdapter0.logLevel = logLevel22;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        restAdapter0.requestInterceptor = requestInterceptor25;
        retrofit.RestAdapter.RestHandler restHandler27 = restAdapter0.new RestHandler();
        retrofit.Profiler profiler28 = restAdapter0.profiler;
        retrofit.Server server29 = null;
        retrofit.client.Client.Provider provider30 = null;
        java.util.concurrent.Executor executor31 = null;
        java.util.concurrent.Executor executor32 = null;
        retrofit.RequestInterceptor requestInterceptor33 = null;
        retrofit.converter.Converter converter34 = null;
        retrofit.Profiler profiler35 = null;
        retrofit.ErrorHandler errorHandler36 = null;
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        log37.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter(server29, provider30, executor31, executor32, requestInterceptor33, converter34, profiler35, errorHandler36, log37, logLevel40);
        retrofit.RestAdapter.RestHandler restHandler42 = restAdapter41.new RestHandler();
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler44 = builder43.errorHandler;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        builder43.requestInterceptor = requestInterceptor45;
        retrofit.Server server47 = null;
        retrofit.client.Client.Provider provider48 = null;
        java.util.concurrent.Executor executor49 = null;
        java.util.concurrent.Executor executor50 = null;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        retrofit.converter.Converter converter52 = null;
        retrofit.Profiler profiler53 = null;
        retrofit.ErrorHandler errorHandler54 = null;
        retrofit.RestAdapter.Log log55 = retrofit.RestAdapter.Log.NONE;
        log55.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter(server47, provider48, executor49, executor50, requestInterceptor51, converter52, profiler53, errorHandler54, log55, logLevel58);
        builder43.log = log55;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler62 = builder61.errorHandler;
        retrofit.client.Client.Provider provider63 = null;
        builder61.clientProvider = provider63;
        retrofit.Server server67 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder68 = builder61.setServer(server67);
        retrofit.converter.Converter converter69 = null;
        builder68.converter = converter69;
        retrofit.RestAdapter restAdapter71 = builder68.build();
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler73 = builder72.errorHandler;
        java.util.concurrent.Executor executor74 = null;
        builder72.callbackExecutor = executor74;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider77 = builder76.clientProvider;
        java.util.concurrent.Executor executor78 = null;
        builder76.callbackExecutor = executor78;
        retrofit.RestAdapter.Builder builder80 = new retrofit.RestAdapter.Builder();
        retrofit.Server server83 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder84 = builder80.setServer(server83);
        java.lang.String str85 = server83.getUrl();
        retrofit.RestAdapter.Builder builder86 = builder76.setServer(server83);
        retrofit.RestAdapter.Builder builder87 = builder72.setServer(server83);
        restAdapter71.server = server83;
        retrofit.client.Client.Provider provider89 = restAdapter71.clientProvider;
        builder43.clientProvider = provider89;
        restAdapter41.clientProvider = provider89;
        restAdapter0.clientProvider = provider89;
        retrofit.ErrorHandler errorHandler93 = restAdapter0.errorHandler;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(profiler28);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler44);
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler62);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(restAdapter71);
        org.junit.Assert.assertNull(errorHandler73);
        org.junit.Assert.assertNull(provider77);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "hi!" + "'", str85, "hi!");
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(provider89);
        org.junit.Assert.assertNull(errorHandler93);
    }

    @Test
    public void test02773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02773");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        java.util.concurrent.Executor executor4 = null;
        builder0.httpExecutor = executor4;
        retrofit.Profiler profiler6 = null;
        builder0.profiler = profiler6;
        retrofit.RestAdapter.Builder builder9 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.Server server13 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder14 = builder10.setServer(server13);
        retrofit.RestAdapter.LogLevel logLevel15 = builder14.logLevel;
        java.util.concurrent.Executor executor16 = builder14.httpExecutor;
        retrofit.RestAdapter restAdapter17 = builder14.build();
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor19 = restAdapter18.callbackExecutor;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor21 = restAdapter20.callbackExecutor;
        java.util.concurrent.Executor executor22 = restAdapter20.callbackExecutor;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler24 = restAdapter23.errorHandler;
        retrofit.Server server27 = new retrofit.Server("", "");
        restAdapter23.server = server27;
        restAdapter20.server = server27;
        restAdapter18.server = server27;
        retrofit.Profiler profiler31 = restAdapter18.profiler;
        retrofit.ErrorHandler errorHandler32 = null;
        restAdapter18.errorHandler = errorHandler32;
        retrofit.Profiler profiler34 = null;
        restAdapter18.profiler = profiler34;
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter18.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter18.logLevel = logLevel37;
        retrofit.RestAdapter.RestHandler restHandler39 = restAdapter18.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor40 = null;
        restAdapter18.requestInterceptor = requestInterceptor40;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler43 = builder42.errorHandler;
        retrofit.RequestInterceptor requestInterceptor44 = null;
        builder42.requestInterceptor = requestInterceptor44;
        retrofit.Server server46 = null;
        retrofit.client.Client.Provider provider47 = null;
        java.util.concurrent.Executor executor48 = null;
        java.util.concurrent.Executor executor49 = null;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        retrofit.converter.Converter converter51 = null;
        retrofit.Profiler profiler52 = null;
        retrofit.ErrorHandler errorHandler53 = null;
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        log54.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter(server46, provider47, executor48, executor49, requestInterceptor50, converter51, profiler52, errorHandler53, log54, logLevel57);
        builder42.log = log54;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler61 = builder60.errorHandler;
        retrofit.client.Client.Provider provider62 = null;
        builder60.clientProvider = provider62;
        retrofit.Server server66 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder67 = builder60.setServer(server66);
        retrofit.converter.Converter converter68 = null;
        builder67.converter = converter68;
        retrofit.RestAdapter restAdapter70 = builder67.build();
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler72 = builder71.errorHandler;
        java.util.concurrent.Executor executor73 = null;
        builder71.callbackExecutor = executor73;
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider76 = builder75.clientProvider;
        java.util.concurrent.Executor executor77 = null;
        builder75.callbackExecutor = executor77;
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        retrofit.Server server82 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder83 = builder79.setServer(server82);
        java.lang.String str84 = server82.getUrl();
        retrofit.RestAdapter.Builder builder85 = builder75.setServer(server82);
        retrofit.RestAdapter.Builder builder86 = builder71.setServer(server82);
        restAdapter70.server = server82;
        retrofit.client.Client.Provider provider88 = restAdapter70.clientProvider;
        builder42.clientProvider = provider88;
        restAdapter18.clientProvider = provider88;
        retrofit.RestAdapter.Builder builder91 = builder14.setClient(provider88);
        retrofit.Profiler profiler92 = builder14.profiler;
        retrofit.converter.Converter converter93 = builder14.converter;
        builder0.converter = converter93;
        retrofit.RestAdapter restAdapter95 = builder0.build();
        retrofit.client.Client.Provider provider96 = restAdapter95.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel97 = restAdapter95.logLevel;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNotNull(restAdapter17);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNull(profiler31);
        org.junit.Assert.assertNull(logLevel36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler43);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler61);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(restAdapter70);
        org.junit.Assert.assertNull(errorHandler72);
        org.junit.Assert.assertNull(provider76);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "hi!" + "'", str84, "hi!");
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(provider88);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNull(profiler92);
        org.junit.Assert.assertNotNull(converter93);
        org.junit.Assert.assertNotNull(restAdapter95);
        org.junit.Assert.assertNotNull(provider96);
        org.junit.Assert.assertTrue("'" + logLevel97 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel97.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test02774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02774");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.logLevel;
        retrofit.Profiler profiler2 = null;
        restAdapter0.profiler = profiler2;
        retrofit.RestAdapter.Log log4 = restAdapter0.log;
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter0.new RestHandler();
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor8 = restAdapter7.callbackExecutor;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor10 = restAdapter9.callbackExecutor;
        java.util.concurrent.Executor executor11 = restAdapter9.callbackExecutor;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler13 = restAdapter12.errorHandler;
        retrofit.Server server16 = new retrofit.Server("", "");
        restAdapter12.server = server16;
        restAdapter9.server = server16;
        restAdapter7.server = server16;
        retrofit.Profiler profiler20 = restAdapter7.profiler;
        retrofit.ErrorHandler errorHandler21 = null;
        restAdapter7.errorHandler = errorHandler21;
        retrofit.Profiler profiler23 = null;
        restAdapter7.profiler = profiler23;
        java.util.concurrent.Executor executor25 = restAdapter7.httpExecutor;
        retrofit.client.Client.Provider provider26 = restAdapter7.clientProvider;
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        log27.log("default");
        restAdapter7.log = log27;
        restAdapter0.log = log27;
        retrofit.ErrorHandler errorHandler32 = null;
        restAdapter0.errorHandler = errorHandler32;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(profiler20);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(provider26);
        org.junit.Assert.assertNotNull(log27);
    }

    @Test
    public void test02775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02775");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        builder4.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter6 = builder4.build();
        retrofit.client.Header[] headerArray19 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList20 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList20, headerArray19);
        retrofit.mime.TypedOutput typedOutput22 = null;
        retrofit.client.Request request23 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList20, typedOutput22);
        retrofit.mime.TypedOutput typedOutput24 = null;
        retrofit.client.Request request25 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList20, typedOutput24);
        retrofit.mime.TypedOutput typedOutput26 = null;
        retrofit.client.Request request27 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList20, typedOutput26);
        retrofit.mime.TypedOutput typedOutput28 = null;
        retrofit.client.Request request29 = new retrofit.client.Request("default", "hi!", (java.util.List<retrofit.client.Header>) headerList20, typedOutput28);
        retrofit.mime.TypedOutput typedOutput30 = null;
        retrofit.client.Request request31 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList20, typedOutput30);
        retrofit.mime.TypedOutput typedOutput32 = null;
        retrofit.client.Request request33 = new retrofit.client.Request("hi!", "default", (java.util.List<retrofit.client.Header>) headerList20, typedOutput32);
        retrofit.client.Request request34 = restAdapter6.logAndReplaceRequest(request33);
        java.lang.String str35 = request34.getMethod();
        java.lang.String str36 = request34.getUrl();
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(restAdapter6);
        org.junit.Assert.assertNotNull(headerArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(request34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "default" + "'", str36, "default");
    }

    @Test
    public void test02776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02776");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = builder0.clientProvider;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server7 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder8 = builder4.setServer(server7);
        java.lang.String str9 = server7.getUrl();
        retrofit.RestAdapter.Builder builder10 = builder0.setServer(server7);
        builder0.ensureSaneDefaults();
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        log20.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel23);
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter24.new RestHandler();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        restAdapter24.log = log26;
        retrofit.RestAdapter.Builder builder28 = builder0.setLog(log26);
        retrofit.RestAdapter.Builder builder30 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter31 = builder0.build();
        retrofit.RestAdapter.RestHandler restHandler32 = restAdapter31.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter31.logLevel;
        java.util.concurrent.Executor executor34 = restAdapter31.callbackExecutor;
        retrofit.Profiler profiler35 = restAdapter31.profiler;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler37 = builder36.errorHandler;
        retrofit.Server server40 = new retrofit.Server("", "");
        builder36.server = server40;
        retrofit.client.Client.Provider provider42 = null;
        java.util.concurrent.Executor executor43 = null;
        java.util.concurrent.Executor executor44 = null;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        retrofit.converter.Converter converter46 = null;
        retrofit.Profiler profiler47 = null;
        retrofit.ErrorHandler errorHandler48 = null;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler50 = builder49.errorHandler;
        retrofit.Server server53 = new retrofit.Server("", "");
        builder49.server = server53;
        retrofit.RestAdapter.Log log55 = retrofit.RestAdapter.Log.NONE;
        builder49.log = log55;
        retrofit.Server server57 = null;
        retrofit.client.Client.Provider provider58 = null;
        java.util.concurrent.Executor executor59 = null;
        java.util.concurrent.Executor executor60 = null;
        retrofit.RequestInterceptor requestInterceptor61 = null;
        retrofit.converter.Converter converter62 = null;
        retrofit.Profiler profiler63 = null;
        retrofit.ErrorHandler errorHandler64 = null;
        retrofit.RestAdapter.Log log65 = retrofit.RestAdapter.Log.NONE;
        log65.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel68 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter(server57, provider58, executor59, executor60, requestInterceptor61, converter62, profiler63, errorHandler64, log65, logLevel68);
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter(server40, provider42, executor43, executor44, requestInterceptor45, converter46, profiler47, errorHandler48, log55, logLevel68);
        log55.log("hi!");
        restAdapter31.log = log55;
        log55.log("hi!");
        org.junit.Assert.assertNull(provider1);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(restAdapter31);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(executor34);
        org.junit.Assert.assertNull(profiler35);
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNull(errorHandler50);
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertNotNull(log65);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test02777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02777");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.Server server5 = builder0.server;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.Server server9 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder10 = builder6.setServer(server9);
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor12 = restAdapter11.callbackExecutor;
        java.util.concurrent.Executor executor13 = restAdapter11.callbackExecutor;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler15 = restAdapter14.errorHandler;
        retrofit.Server server18 = new retrofit.Server("", "");
        restAdapter14.server = server18;
        restAdapter11.server = server18;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        restAdapter11.log = log21;
        retrofit.RestAdapter.Builder builder23 = builder10.setLog(log21);
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder25 = builder10.setLogLevel(logLevel24);
        builder0.logLevel = logLevel24;
        java.util.concurrent.Executor executor27 = builder0.httpExecutor;
        java.util.concurrent.Executor executor28 = builder0.callbackExecutor;
        java.util.concurrent.Executor executor29 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.Server server33 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder34 = builder30.setServer(server33);
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor36 = restAdapter35.callbackExecutor;
        java.util.concurrent.Executor executor37 = restAdapter35.callbackExecutor;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler39 = restAdapter38.errorHandler;
        retrofit.Server server42 = new retrofit.Server("", "");
        restAdapter38.server = server42;
        restAdapter35.server = server42;
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        restAdapter35.log = log45;
        retrofit.RestAdapter.Builder builder47 = builder34.setLog(log45);
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder49 = builder34.setLogLevel(logLevel48);
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider51 = builder50.clientProvider;
        java.util.concurrent.Executor executor52 = null;
        builder50.callbackExecutor = executor52;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.Server server57 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder58 = builder54.setServer(server57);
        java.lang.String str59 = server57.getUrl();
        retrofit.RestAdapter.Builder builder60 = builder50.setServer(server57);
        builder50.ensureSaneDefaults();
        retrofit.Server server62 = null;
        retrofit.client.Client.Provider provider63 = null;
        java.util.concurrent.Executor executor64 = null;
        java.util.concurrent.Executor executor65 = null;
        retrofit.RequestInterceptor requestInterceptor66 = null;
        retrofit.converter.Converter converter67 = null;
        retrofit.Profiler profiler68 = null;
        retrofit.ErrorHandler errorHandler69 = null;
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        log70.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter74 = new retrofit.RestAdapter(server62, provider63, executor64, executor65, requestInterceptor66, converter67, profiler68, errorHandler69, log70, logLevel73);
        retrofit.RestAdapter.RestHandler restHandler75 = restAdapter74.new RestHandler();
        retrofit.RestAdapter.Log log76 = retrofit.RestAdapter.Log.NONE;
        restAdapter74.log = log76;
        retrofit.RestAdapter.Builder builder78 = builder50.setLog(log76);
        retrofit.RestAdapter.Builder builder80 = builder50.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor81 = builder50.requestInterceptor;
        builder49.requestInterceptor = requestInterceptor81;
        retrofit.RestAdapter.Builder builder83 = builder0.setRequestInterceptor(requestInterceptor81);
        builder83.ensureSaneDefaults();
        java.util.concurrent.Executor executor85 = null;
        builder83.httpExecutor = executor85;
        java.util.concurrent.Executor executor87 = builder83.callbackExecutor;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(server5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(executor36);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(provider51);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(requestInterceptor81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(executor87);
    }

    @Test
    public void test02778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02778");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        restAdapter5.log = log15;
        retrofit.RestAdapter.Builder builder17 = builder4.setLog(log15);
        retrofit.converter.Converter converter18 = null;
        builder17.converter = converter18;
        retrofit.RestAdapter.Builder builder21 = builder17.setServer("hi!");
        retrofit.Server server22 = null;
        retrofit.client.Client.Provider provider23 = null;
        java.util.concurrent.Executor executor24 = null;
        java.util.concurrent.Executor executor25 = null;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        retrofit.converter.Converter converter27 = null;
        retrofit.Profiler profiler28 = null;
        retrofit.ErrorHandler errorHandler29 = null;
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        log30.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server22, provider23, executor24, executor25, requestInterceptor26, converter27, profiler28, errorHandler29, log30, logLevel33);
        retrofit.RestAdapter.RestHandler restHandler35 = restAdapter34.new RestHandler();
        retrofit.client.Header[] headerArray44 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList45 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList45, headerArray44);
        retrofit.mime.TypedOutput typedOutput47 = null;
        retrofit.client.Request request48 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList45, typedOutput47);
        retrofit.mime.TypedOutput typedOutput49 = null;
        retrofit.client.Request request50 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList45, typedOutput49);
        retrofit.mime.TypedOutput typedOutput51 = null;
        retrofit.client.Request request52 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList45, typedOutput51);
        retrofit.mime.TypedOutput typedOutput53 = null;
        retrofit.client.Request request54 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList45, typedOutput53);
        retrofit.mime.TypedOutput typedOutput55 = request54.getBody();
        retrofit.client.Request request56 = restAdapter34.logAndReplaceRequest(request54);
        retrofit.client.Client.Provider provider57 = null;
        restAdapter34.clientProvider = provider57;
        retrofit.RestAdapter.RestHandler restHandler59 = restAdapter34.new RestHandler();
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.Server server63 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder64 = builder60.setServer(server63);
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor66 = restAdapter65.callbackExecutor;
        java.util.concurrent.Executor executor67 = restAdapter65.callbackExecutor;
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler69 = restAdapter68.errorHandler;
        retrofit.Server server72 = new retrofit.Server("", "");
        restAdapter68.server = server72;
        restAdapter65.server = server72;
        retrofit.RestAdapter.Log log75 = retrofit.RestAdapter.Log.NONE;
        restAdapter65.log = log75;
        retrofit.RestAdapter.Builder builder77 = builder64.setLog(log75);
        retrofit.RestAdapter.LogLevel logLevel78 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder79 = builder64.setLogLevel(logLevel78);
        retrofit.Profiler profiler80 = null;
        builder79.profiler = profiler80;
        retrofit.converter.Converter converter82 = null;
        builder79.converter = converter82;
        retrofit.ErrorHandler errorHandler84 = null;
        builder79.errorHandler = errorHandler84;
        retrofit.RestAdapter restAdapter86 = builder79.build();
        retrofit.ErrorHandler errorHandler87 = builder79.errorHandler;
        restAdapter34.errorHandler = errorHandler87;
        retrofit.RestAdapter.Builder builder89 = builder17.setErrorHandler(errorHandler87);
        retrofit.RequestInterceptor requestInterceptor90 = builder89.requestInterceptor;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(typedOutput55);
        org.junit.Assert.assertNotNull(request56);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(executor66);
        org.junit.Assert.assertNull(executor67);
        org.junit.Assert.assertNull(errorHandler69);
        org.junit.Assert.assertNotNull(log75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(restAdapter86);
        org.junit.Assert.assertNotNull(errorHandler87);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNull(requestInterceptor90);
    }

    @Test
    public void test02779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02779");
        retrofit.client.Header[] headerArray18 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList19 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList19, headerArray18);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList19, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList19, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList19, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("default", "hi!", (java.util.List<retrofit.client.Header>) headerList19, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList19, typedOutput29);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("", "default", (java.util.List<retrofit.client.Header>) headerList19, typedOutput31);
        retrofit.mime.TypedOutput typedOutput33 = null;
        retrofit.client.Request request34 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList19, typedOutput33);
        retrofit.mime.TypedOutput typedOutput35 = null;
        retrofit.client.Request request36 = new retrofit.client.Request("default", "", (java.util.List<retrofit.client.Header>) headerList19, typedOutput35);
        retrofit.mime.TypedOutput typedOutput37 = null;
        retrofit.client.Request request38 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList19, typedOutput37);
        org.junit.Assert.assertNotNull(headerArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test02780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02780");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server6 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder7 = builder0.setServer(server6);
        retrofit.converter.Converter converter8 = null;
        builder7.converter = converter8;
        retrofit.RestAdapter restAdapter10 = builder7.build();
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler12 = builder11.errorHandler;
        java.util.concurrent.Executor executor13 = null;
        builder11.callbackExecutor = executor13;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider16 = builder15.clientProvider;
        java.util.concurrent.Executor executor17 = null;
        builder15.callbackExecutor = executor17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.Server server22 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder23 = builder19.setServer(server22);
        java.lang.String str24 = server22.getUrl();
        retrofit.RestAdapter.Builder builder25 = builder15.setServer(server22);
        retrofit.RestAdapter.Builder builder26 = builder11.setServer(server22);
        restAdapter10.server = server22;
        retrofit.client.Client.Provider provider28 = restAdapter10.clientProvider;
        java.util.concurrent.Executor executor29 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler30 = restAdapter10.new RestHandler();
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(restAdapter10);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(provider16);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(provider28);
        org.junit.Assert.assertNotNull(executor29);
    }

    @Test
    public void test02781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02781");
        retrofit.client.Header[] headerArray14 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList15 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList15, headerArray14);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList15, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList15, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList15, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList15, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("default", "hi!", (java.util.List<retrofit.client.Header>) headerList15, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList15, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("", "default", (java.util.List<retrofit.client.Header>) headerList15, typedOutput29);
        org.junit.Assert.assertNotNull(headerArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test02782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02782");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        restAdapter12.log = log14;
        retrofit.converter.Converter converter16 = null;
        restAdapter12.converter = converter16;
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter12.new RestHandler();
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor20 = restAdapter19.callbackExecutor;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler22 = builder21.errorHandler;
        retrofit.Server server25 = new retrofit.Server("", "");
        builder21.server = server25;
        retrofit.client.Client.Provider provider27 = null;
        java.util.concurrent.Executor executor28 = null;
        java.util.concurrent.Executor executor29 = null;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        retrofit.converter.Converter converter31 = null;
        retrofit.Profiler profiler32 = null;
        retrofit.ErrorHandler errorHandler33 = null;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler35 = builder34.errorHandler;
        retrofit.Server server38 = new retrofit.Server("", "");
        builder34.server = server38;
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        builder34.log = log40;
        retrofit.Server server42 = null;
        retrofit.client.Client.Provider provider43 = null;
        java.util.concurrent.Executor executor44 = null;
        java.util.concurrent.Executor executor45 = null;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        retrofit.converter.Converter converter47 = null;
        retrofit.Profiler profiler48 = null;
        retrofit.ErrorHandler errorHandler49 = null;
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        log50.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter(server42, provider43, executor44, executor45, requestInterceptor46, converter47, profiler48, errorHandler49, log50, logLevel53);
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter(server25, provider27, executor28, executor29, requestInterceptor30, converter31, profiler32, errorHandler33, log40, logLevel53);
        restAdapter19.server = server25;
        restAdapter12.server = server25;
        retrofit.client.Header[] headerArray66 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList67 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList67, headerArray66);
        retrofit.mime.TypedOutput typedOutput69 = null;
        retrofit.client.Request request70 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList67, typedOutput69);
        retrofit.mime.TypedOutput typedOutput71 = null;
        retrofit.client.Request request72 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList67, typedOutput71);
        retrofit.mime.TypedOutput typedOutput73 = null;
        retrofit.client.Request request74 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList67, typedOutput73);
        retrofit.mime.TypedOutput typedOutput75 = null;
        retrofit.client.Request request76 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList67, typedOutput75);
        retrofit.client.Request request77 = restAdapter12.logAndReplaceRequest(request76);
        retrofit.client.Client.Provider provider78 = restAdapter12.clientProvider;
        retrofit.RequestInterceptor requestInterceptor79 = restAdapter12.requestInterceptor;
        retrofit.Profiler profiler80 = restAdapter12.profiler;
        retrofit.Server server81 = restAdapter12.server;
        retrofit.RestAdapter.Log log82 = restAdapter12.log;
        log82.log("hi!");
        java.lang.Class<?> wildcardClass85 = log82.getClass();
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNull(errorHandler35);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(request77);
        org.junit.Assert.assertNull(provider78);
        org.junit.Assert.assertNull(requestInterceptor79);
        org.junit.Assert.assertNull(profiler80);
        org.junit.Assert.assertNotNull(server81);
        org.junit.Assert.assertNotNull(log82);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test02783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02783");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        builder0.requestInterceptor = requestInterceptor5;
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor8 = restAdapter7.callbackExecutor;
        java.util.concurrent.Executor executor9 = restAdapter7.callbackExecutor;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.Server server14 = new retrofit.Server("", "");
        restAdapter10.server = server14;
        restAdapter7.server = server14;
        retrofit.RestAdapter.Builder builder17 = builder0.setServer(server14);
        retrofit.RestAdapter.LogLevel logLevel18 = builder0.logLevel;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler20 = builder19.errorHandler;
        retrofit.Server server23 = new retrofit.Server("", "");
        builder19.server = server23;
        retrofit.client.Client.Provider provider25 = null;
        java.util.concurrent.Executor executor26 = null;
        java.util.concurrent.Executor executor27 = null;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        retrofit.converter.Converter converter29 = null;
        retrofit.Profiler profiler30 = null;
        retrofit.ErrorHandler errorHandler31 = null;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler33 = builder32.errorHandler;
        retrofit.Server server36 = new retrofit.Server("", "");
        builder32.server = server36;
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        builder32.log = log38;
        retrofit.Server server40 = null;
        retrofit.client.Client.Provider provider41 = null;
        java.util.concurrent.Executor executor42 = null;
        java.util.concurrent.Executor executor43 = null;
        retrofit.RequestInterceptor requestInterceptor44 = null;
        retrofit.converter.Converter converter45 = null;
        retrofit.Profiler profiler46 = null;
        retrofit.ErrorHandler errorHandler47 = null;
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        log48.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter(server40, provider41, executor42, executor43, requestInterceptor44, converter45, profiler46, errorHandler47, log48, logLevel51);
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server23, provider25, executor26, executor27, requestInterceptor28, converter29, profiler30, errorHandler31, log38, logLevel51);
        retrofit.RestAdapter.Builder builder54 = builder0.setServer(server23);
        java.lang.String str55 = server23.getUrl();
        java.lang.String str56 = server23.getName();
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNull(errorHandler33);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
    }

    @Test
    public void test02784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02784");
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        log12.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel15);
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter16.new RestHandler();
        java.util.concurrent.Executor executor18 = null;
        restAdapter16.callbackExecutor = executor18;
        retrofit.client.Header[] headerArray36 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList37 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList37, headerArray36);
        retrofit.mime.TypedOutput typedOutput39 = null;
        retrofit.client.Request request40 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList37, typedOutput39);
        retrofit.mime.TypedOutput typedOutput41 = null;
        retrofit.client.Request request42 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList37, typedOutput41);
        retrofit.mime.TypedOutput typedOutput43 = null;
        retrofit.client.Request request44 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList37, typedOutput43);
        retrofit.mime.TypedOutput typedOutput45 = null;
        retrofit.client.Request request46 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList37, typedOutput45);
        retrofit.mime.TypedOutput typedOutput47 = null;
        retrofit.client.Request request48 = new retrofit.client.Request("default", "hi!", (java.util.List<retrofit.client.Header>) headerList37, typedOutput47);
        retrofit.mime.TypedOutput typedOutput49 = null;
        retrofit.client.Request request50 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList37, typedOutput49);
        retrofit.mime.TypedOutput typedOutput51 = null;
        retrofit.client.Request request52 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList37, typedOutput51);
        retrofit.mime.TypedOutput typedOutput53 = null;
        retrofit.client.Request request54 = new retrofit.client.Request("hi!", "default", (java.util.List<retrofit.client.Header>) headerList37, typedOutput53);
        retrofit.client.Request request55 = restAdapter16.logAndReplaceRequest(request54);
        retrofit.client.Header[] headerArray62 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList63 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList63, headerArray62);
        retrofit.mime.TypedOutput typedOutput65 = null;
        retrofit.client.Request request66 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList63, typedOutput65);
        retrofit.mime.TypedOutput typedOutput67 = null;
        retrofit.client.Request request68 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList63, typedOutput67);
        retrofit.mime.TypedOutput typedOutput69 = null;
        retrofit.client.Request request70 = new retrofit.client.Request("", "default", (java.util.List<retrofit.client.Header>) headerList63, typedOutput69);
        java.util.List<retrofit.client.Header> headerList71 = request70.getHeaders();
        retrofit.client.Request request72 = restAdapter16.logAndReplaceRequest(request70);
        java.util.List<retrofit.client.Header> headerList73 = request70.getHeaders();
        java.util.List<retrofit.client.Header> headerList74 = request70.getHeaders();
        retrofit.mime.TypedOutput typedOutput75 = null;
        retrofit.client.Request request76 = new retrofit.client.Request("hi!", "", headerList74, typedOutput75);
        retrofit.mime.TypedOutput typedOutput77 = null;
        retrofit.client.Request request78 = new retrofit.client.Request("hi!", "", headerList74, typedOutput77);
        retrofit.mime.TypedOutput typedOutput79 = request78.getBody();
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(request55);
        org.junit.Assert.assertNotNull(headerArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(headerList71);
        org.junit.Assert.assertNotNull(request72);
        org.junit.Assert.assertNotNull(headerList73);
        org.junit.Assert.assertNotNull(headerList74);
        org.junit.Assert.assertNull(typedOutput79);
    }

    @Test
    public void test02785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02785");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider5 = builder4.clientProvider;
        java.util.concurrent.Executor executor6 = null;
        builder4.callbackExecutor = executor6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.Server server11 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder12 = builder8.setServer(server11);
        java.lang.String str13 = server11.getUrl();
        retrofit.RestAdapter.Builder builder14 = builder4.setServer(server11);
        retrofit.RestAdapter.Builder builder15 = builder0.setServer(server11);
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider17 = builder16.clientProvider;
        java.util.concurrent.Executor executor18 = null;
        builder16.callbackExecutor = executor18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.Server server23 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder24 = builder20.setServer(server23);
        java.lang.String str25 = server23.getUrl();
        retrofit.RestAdapter.Builder builder26 = builder16.setServer(server23);
        builder16.ensureSaneDefaults();
        retrofit.Server server28 = null;
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        log36.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server28, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log36, logLevel39);
        retrofit.RestAdapter.RestHandler restHandler41 = restAdapter40.new RestHandler();
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        restAdapter40.log = log42;
        retrofit.RestAdapter.Builder builder44 = builder16.setLog(log42);
        retrofit.RestAdapter.LogLevel logLevel45 = builder16.logLevel;
        retrofit.RestAdapter.Builder builder46 = builder15.setLogLevel(logLevel45);
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler48 = builder47.errorHandler;
        retrofit.ErrorHandler errorHandler49 = builder47.errorHandler;
        retrofit.Profiler profiler50 = builder47.profiler;
        retrofit.RestAdapter.Log log51 = builder47.log;
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.FULL;
        builder47.logLevel = logLevel52;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.Server server57 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder58 = builder54.setServer(server57);
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor60 = restAdapter59.callbackExecutor;
        java.util.concurrent.Executor executor61 = restAdapter59.callbackExecutor;
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler63 = restAdapter62.errorHandler;
        retrofit.Server server66 = new retrofit.Server("", "");
        restAdapter62.server = server66;
        restAdapter59.server = server66;
        retrofit.RestAdapter.Log log69 = retrofit.RestAdapter.Log.NONE;
        restAdapter59.log = log69;
        retrofit.RestAdapter.Builder builder71 = builder58.setLog(log69);
        retrofit.RestAdapter.LogLevel logLevel72 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder73 = builder58.setLogLevel(logLevel72);
        retrofit.Profiler profiler74 = null;
        builder73.profiler = profiler74;
        retrofit.converter.Converter converter76 = null;
        builder73.converter = converter76;
        retrofit.ErrorHandler errorHandler78 = null;
        builder73.errorHandler = errorHandler78;
        retrofit.RestAdapter restAdapter80 = builder73.build();
        retrofit.ErrorHandler errorHandler81 = builder73.errorHandler;
        retrofit.RestAdapter.Builder builder82 = builder47.setErrorHandler(errorHandler81);
        builder46.errorHandler = errorHandler81;
        retrofit.ErrorHandler errorHandler84 = builder46.errorHandler;
        retrofit.RequestInterceptor requestInterceptor85 = builder46.requestInterceptor;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(provider17);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(errorHandler48);
        org.junit.Assert.assertNull(errorHandler49);
        org.junit.Assert.assertNull(profiler50);
        org.junit.Assert.assertNull(log51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(executor60);
        org.junit.Assert.assertNull(executor61);
        org.junit.Assert.assertNull(errorHandler63);
        org.junit.Assert.assertNotNull(log69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(restAdapter80);
        org.junit.Assert.assertNotNull(errorHandler81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(errorHandler84);
        org.junit.Assert.assertNull(requestInterceptor85);
    }

    @Test
    public void test02786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02786");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter0.getLogLevel();
        retrofit.client.Client.Provider provider20 = null;
        restAdapter0.clientProvider = provider20;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean23 = logLevel22.log();
        restAdapter0.logLevel = logLevel22;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        restAdapter0.requestInterceptor = requestInterceptor25;
        retrofit.RestAdapter.Log log27 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler28 = restAdapter0.errorHandler;
        retrofit.RestAdapter.Log log29 = restAdapter0.log;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider31 = builder30.clientProvider;
        java.util.concurrent.Executor executor32 = null;
        builder30.callbackExecutor = executor32;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler35 = builder34.errorHandler;
        retrofit.Server server38 = new retrofit.Server("", "");
        builder34.server = server38;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor41 = restAdapter40.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler42 = restAdapter40.new RestHandler();
        retrofit.Server server45 = new retrofit.Server("hi!", "hi!");
        restAdapter40.server = server45;
        retrofit.RestAdapter.Builder builder47 = builder34.setServer(server45);
        retrofit.RestAdapter.Log log48 = builder34.log;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler50 = null;
        builder49.errorHandler = errorHandler50;
        retrofit.converter.Converter converter52 = builder49.converter;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.Server server56 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder57 = builder53.setServer(server56);
        retrofit.converter.Converter converter58 = builder53.converter;
        retrofit.RequestInterceptor requestInterceptor59 = builder53.requestInterceptor;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider61 = builder60.clientProvider;
        java.util.concurrent.Executor executor62 = null;
        builder60.callbackExecutor = executor62;
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.Server server67 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder68 = builder64.setServer(server67);
        java.lang.String str69 = server67.getUrl();
        retrofit.RestAdapter.Builder builder70 = builder60.setServer(server67);
        builder60.ensureSaneDefaults();
        retrofit.Server server72 = null;
        retrofit.client.Client.Provider provider73 = null;
        java.util.concurrent.Executor executor74 = null;
        java.util.concurrent.Executor executor75 = null;
        retrofit.RequestInterceptor requestInterceptor76 = null;
        retrofit.converter.Converter converter77 = null;
        retrofit.Profiler profiler78 = null;
        retrofit.ErrorHandler errorHandler79 = null;
        retrofit.RestAdapter.Log log80 = retrofit.RestAdapter.Log.NONE;
        log80.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel83 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter84 = new retrofit.RestAdapter(server72, provider73, executor74, executor75, requestInterceptor76, converter77, profiler78, errorHandler79, log80, logLevel83);
        retrofit.RestAdapter.RestHandler restHandler85 = restAdapter84.new RestHandler();
        retrofit.RestAdapter.Log log86 = retrofit.RestAdapter.Log.NONE;
        restAdapter84.log = log86;
        retrofit.RestAdapter.Builder builder88 = builder60.setLog(log86);
        retrofit.RestAdapter.Builder builder90 = builder60.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor91 = builder60.requestInterceptor;
        builder53.requestInterceptor = requestInterceptor91;
        builder49.requestInterceptor = requestInterceptor91;
        builder34.requestInterceptor = requestInterceptor91;
        retrofit.RestAdapter.Builder builder95 = builder30.setRequestInterceptor(requestInterceptor91);
        restAdapter0.requestInterceptor = requestInterceptor91;
        java.util.concurrent.Executor executor97 = restAdapter0.callbackExecutor;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(log27);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertNull(log29);
        org.junit.Assert.assertNull(provider31);
        org.junit.Assert.assertNull(errorHandler35);
        org.junit.Assert.assertNull(executor41);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(log48);
        org.junit.Assert.assertNull(converter52);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(converter58);
        org.junit.Assert.assertNull(requestInterceptor59);
        org.junit.Assert.assertNull(provider61);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(log80);
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(requestInterceptor91);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNull(executor97);
    }

    @Test
    public void test02787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02787");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter0.new RestHandler();
        retrofit.converter.Converter converter18 = restAdapter0.converter;
        retrofit.client.Client.Provider provider19 = restAdapter0.clientProvider;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(converter18);
        org.junit.Assert.assertNull(provider19);
    }

    @Test
    public void test02788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02788");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server4 = new retrofit.Server("", "");
        builder0.server = server4;
        retrofit.client.Client.Provider provider6 = builder0.clientProvider;
        retrofit.Profiler profiler7 = null;
        builder0.profiler = profiler7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler10 = builder9.errorHandler;
        retrofit.ErrorHandler errorHandler11 = builder9.errorHandler;
        retrofit.RestAdapter.Log log12 = null;
        builder9.log = log12;
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean15 = logLevel14.log();
        builder9.logLevel = logLevel14;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler18 = null;
        builder17.errorHandler = errorHandler18;
        retrofit.ErrorHandler errorHandler20 = builder17.errorHandler;
        retrofit.RestAdapter.Builder builder22 = builder17.setServer("hi!");
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler24 = builder23.errorHandler;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.Server server28 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder29 = builder25.setServer(server28);
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor31 = restAdapter30.callbackExecutor;
        java.util.concurrent.Executor executor32 = restAdapter30.callbackExecutor;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler34 = restAdapter33.errorHandler;
        retrofit.Server server37 = new retrofit.Server("", "");
        restAdapter33.server = server37;
        restAdapter30.server = server37;
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        restAdapter30.log = log40;
        retrofit.RestAdapter.Builder builder42 = builder29.setLog(log40);
        retrofit.RestAdapter.Builder builder43 = builder23.setLog(log40);
        builder17.log = log40;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler46 = builder45.errorHandler;
        retrofit.client.Client.Provider provider47 = null;
        builder45.clientProvider = provider47;
        retrofit.Server server51 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder52 = builder45.setServer(server51);
        retrofit.converter.Converter converter53 = null;
        builder52.converter = converter53;
        retrofit.RestAdapter restAdapter55 = builder52.build();
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler57 = builder56.errorHandler;
        java.util.concurrent.Executor executor58 = null;
        builder56.callbackExecutor = executor58;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider61 = builder60.clientProvider;
        java.util.concurrent.Executor executor62 = null;
        builder60.callbackExecutor = executor62;
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.Server server67 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder68 = builder64.setServer(server67);
        java.lang.String str69 = server67.getUrl();
        retrofit.RestAdapter.Builder builder70 = builder60.setServer(server67);
        retrofit.RestAdapter.Builder builder71 = builder56.setServer(server67);
        restAdapter55.server = server67;
        retrofit.client.Client.Provider provider73 = restAdapter55.clientProvider;
        retrofit.RestAdapter.Builder builder74 = builder17.setClient(provider73);
        retrofit.RestAdapter restAdapter75 = builder17.build();
        retrofit.ErrorHandler errorHandler76 = restAdapter75.errorHandler;
        retrofit.converter.Converter converter77 = restAdapter75.converter;
        builder9.converter = converter77;
        retrofit.RestAdapter.Builder builder79 = builder0.setConverter(converter77);
        retrofit.RestAdapter.Builder builder80 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler81 = builder80.errorHandler;
        retrofit.Server server84 = new retrofit.Server("", "");
        builder80.server = server84;
        java.util.concurrent.Executor executor86 = null;
        builder80.httpExecutor = executor86;
        retrofit.RestAdapter.Builder builder89 = builder80.setServer("default");
        retrofit.converter.Converter converter90 = builder80.converter;
        retrofit.RestAdapter.Log log91 = builder80.log;
        retrofit.RestAdapter restAdapter92 = builder80.build();
        retrofit.ErrorHandler errorHandler93 = builder80.errorHandler;
        retrofit.RestAdapter.Builder builder94 = builder0.setErrorHandler(errorHandler93);
        retrofit.RestAdapter restAdapter95 = builder94.build();
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(provider6);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(errorHandler34);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(errorHandler46);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(restAdapter55);
        org.junit.Assert.assertNull(errorHandler57);
        org.junit.Assert.assertNull(provider61);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(provider73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(restAdapter75);
        org.junit.Assert.assertNotNull(errorHandler76);
        org.junit.Assert.assertNotNull(converter77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNull(errorHandler81);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNull(converter90);
        org.junit.Assert.assertNull(log91);
        org.junit.Assert.assertNotNull(restAdapter92);
        org.junit.Assert.assertNotNull(errorHandler93);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(restAdapter95);
    }

    @Test
    public void test02789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02789");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter0.requestInterceptor;
        retrofit.ErrorHandler errorHandler17 = restAdapter0.errorHandler;
        java.util.concurrent.Executor executor18 = null;
        restAdapter0.callbackExecutor = executor18;
        java.util.concurrent.Executor executor20 = restAdapter0.httpExecutor;
        retrofit.client.Client.Provider provider21 = restAdapter0.clientProvider;
        retrofit.RestAdapter.RestHandler restHandler22 = restAdapter0.new RestHandler();
        retrofit.Server server23 = restAdapter0.server;
        java.lang.String str24 = server23.getUrl();
        java.lang.String str25 = server23.getName();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(provider21);
        org.junit.Assert.assertNotNull(server23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test02790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02790");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        restAdapter5.log = log15;
        retrofit.RestAdapter.Builder builder17 = builder4.setLog(log15);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder19 = builder4.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler21 = builder20.errorHandler;
        retrofit.Server server24 = new retrofit.Server("", "");
        builder20.server = server24;
        java.util.concurrent.Executor executor26 = builder20.callbackExecutor;
        retrofit.Server server27 = null;
        builder20.server = server27;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.NONE;
        builder20.logLevel = logLevel29;
        builder19.logLevel = logLevel29;
        retrofit.RestAdapter.Builder builder33 = builder19.setServer("hi!");
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider35 = builder34.clientProvider;
        java.util.concurrent.Executor executor36 = null;
        builder34.callbackExecutor = executor36;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.Server server41 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder42 = builder38.setServer(server41);
        java.lang.String str43 = server41.getUrl();
        retrofit.RestAdapter.Builder builder44 = builder34.setServer(server41);
        builder34.ensureSaneDefaults();
        retrofit.Server server46 = null;
        retrofit.client.Client.Provider provider47 = null;
        java.util.concurrent.Executor executor48 = null;
        java.util.concurrent.Executor executor49 = null;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        retrofit.converter.Converter converter51 = null;
        retrofit.Profiler profiler52 = null;
        retrofit.ErrorHandler errorHandler53 = null;
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        log54.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter(server46, provider47, executor48, executor49, requestInterceptor50, converter51, profiler52, errorHandler53, log54, logLevel57);
        retrofit.RestAdapter.RestHandler restHandler59 = restAdapter58.new RestHandler();
        retrofit.RestAdapter.Log log60 = retrofit.RestAdapter.Log.NONE;
        restAdapter58.log = log60;
        retrofit.RestAdapter.Builder builder62 = builder34.setLog(log60);
        retrofit.Profiler profiler63 = null;
        builder62.profiler = profiler63;
        retrofit.RequestInterceptor requestInterceptor65 = builder62.requestInterceptor;
        retrofit.RestAdapter restAdapter66 = builder62.build();
        retrofit.RequestInterceptor requestInterceptor67 = builder62.requestInterceptor;
        java.util.concurrent.Executor executor68 = builder62.callbackExecutor;
        retrofit.client.Client.Provider provider69 = builder62.clientProvider;
        builder33.clientProvider = provider69;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(provider35);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(requestInterceptor65);
        org.junit.Assert.assertNotNull(restAdapter66);
        org.junit.Assert.assertNotNull(requestInterceptor67);
        org.junit.Assert.assertNotNull(executor68);
        org.junit.Assert.assertNotNull(provider69);
    }

    @Test
    public void test02791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02791");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        restAdapter12.log = log14;
        retrofit.converter.Converter converter16 = null;
        restAdapter12.converter = converter16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter12.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor19 = null;
        restAdapter12.requestInterceptor = requestInterceptor19;
        retrofit.RestAdapter.Log log21 = null;
        restAdapter12.log = log21;
        retrofit.RestAdapter.RestHandler restHandler23 = restAdapter12.new RestHandler();
        retrofit.client.Header[] headerArray32 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList33 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList33, headerArray32);
        retrofit.mime.TypedOutput typedOutput35 = null;
        retrofit.client.Request request36 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList33, typedOutput35);
        retrofit.mime.TypedOutput typedOutput37 = null;
        retrofit.client.Request request38 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList33, typedOutput37);
        retrofit.mime.TypedOutput typedOutput39 = null;
        retrofit.client.Request request40 = new retrofit.client.Request("default", "", (java.util.List<retrofit.client.Header>) headerList33, typedOutput39);
        retrofit.mime.TypedOutput typedOutput41 = null;
        retrofit.client.Request request42 = new retrofit.client.Request("default", "", (java.util.List<retrofit.client.Header>) headerList33, typedOutput41);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request43 = restAdapter12.logAndReplaceRequest(request42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test02792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02792");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        restAdapter5.log = log15;
        retrofit.RestAdapter.Builder builder17 = builder4.setLog(log15);
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server21 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder22 = builder18.setServer(server21);
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor24 = restAdapter23.callbackExecutor;
        java.util.concurrent.Executor executor25 = restAdapter23.callbackExecutor;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler27 = restAdapter26.errorHandler;
        retrofit.Server server30 = new retrofit.Server("", "");
        restAdapter26.server = server30;
        restAdapter23.server = server30;
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        restAdapter23.log = log33;
        retrofit.RestAdapter.Builder builder35 = builder22.setLog(log33);
        retrofit.converter.Converter converter36 = null;
        builder35.converter = converter36;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler39 = builder38.errorHandler;
        retrofit.ErrorHandler errorHandler40 = builder38.errorHandler;
        retrofit.Profiler profiler41 = builder38.profiler;
        retrofit.RestAdapter.Log log42 = builder38.log;
        retrofit.Server server43 = null;
        retrofit.client.Client.Provider provider44 = null;
        java.util.concurrent.Executor executor45 = null;
        java.util.concurrent.Executor executor46 = null;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        retrofit.converter.Converter converter48 = null;
        retrofit.Profiler profiler49 = null;
        retrofit.ErrorHandler errorHandler50 = null;
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        log51.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter(server43, provider44, executor45, executor46, requestInterceptor47, converter48, profiler49, errorHandler50, log51, logLevel54);
        builder38.log = log51;
        retrofit.RestAdapter.Builder builder57 = builder35.setLog(log51);
        retrofit.RestAdapter.LogLevel logLevel58 = builder35.logLevel;
        retrofit.RestAdapter.Builder builder59 = builder17.setLogLevel(logLevel58);
        retrofit.RestAdapter restAdapter60 = builder17.build();
        retrofit.Profiler profiler61 = builder17.profiler;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNull(profiler41);
        org.junit.Assert.assertNull(log42);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(restAdapter60);
        org.junit.Assert.assertNull(profiler61);
    }

    @Test
    public void test02793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02793");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.ErrorHandler errorHandler3 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor6 = builder0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel7 = builder0.logLevel;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor9 = restAdapter8.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler10 = restAdapter8.new RestHandler();
        retrofit.client.Client.Provider provider11 = null;
        restAdapter8.clientProvider = provider11;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        log21.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel24);
        retrofit.RestAdapter.RestHandler restHandler26 = restAdapter25.new RestHandler();
        retrofit.client.Header[] headerArray35 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList36 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList36, headerArray35);
        retrofit.mime.TypedOutput typedOutput38 = null;
        retrofit.client.Request request39 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList36, typedOutput38);
        retrofit.mime.TypedOutput typedOutput40 = null;
        retrofit.client.Request request41 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList36, typedOutput40);
        retrofit.mime.TypedOutput typedOutput42 = null;
        retrofit.client.Request request43 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList36, typedOutput42);
        retrofit.mime.TypedOutput typedOutput44 = null;
        retrofit.client.Request request45 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList36, typedOutput44);
        retrofit.mime.TypedOutput typedOutput46 = request45.getBody();
        retrofit.client.Request request47 = restAdapter25.logAndReplaceRequest(request45);
        retrofit.client.Client.Provider provider48 = null;
        restAdapter25.clientProvider = provider48;
        retrofit.RestAdapter.RestHandler restHandler50 = restAdapter25.new RestHandler();
        retrofit.Server server51 = null;
        retrofit.client.Client.Provider provider52 = null;
        java.util.concurrent.Executor executor53 = null;
        java.util.concurrent.Executor executor54 = null;
        retrofit.RequestInterceptor requestInterceptor55 = null;
        retrofit.converter.Converter converter56 = null;
        retrofit.Profiler profiler57 = null;
        retrofit.ErrorHandler errorHandler58 = null;
        retrofit.RestAdapter.Log log59 = retrofit.RestAdapter.Log.NONE;
        log59.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter(server51, provider52, executor53, executor54, requestInterceptor55, converter56, profiler57, errorHandler58, log59, logLevel62);
        retrofit.RestAdapter.RestHandler restHandler64 = restAdapter63.new RestHandler();
        retrofit.RestAdapter.Log log65 = retrofit.RestAdapter.Log.NONE;
        restAdapter63.log = log65;
        retrofit.converter.Converter converter67 = restAdapter63.converter;
        retrofit.RestAdapter.LogLevel logLevel68 = restAdapter63.logLevel;
        restAdapter25.setLogLevel(logLevel68);
        restAdapter8.logLevel = logLevel68;
        builder0.logLevel = logLevel68;
        retrofit.RestAdapter.Builder builder73 = builder0.setServer("default");
        retrofit.RestAdapter restAdapter74 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor75 = restAdapter74.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler76 = restAdapter74.new RestHandler();
        retrofit.Server server79 = new retrofit.Server("hi!", "hi!");
        restAdapter74.server = server79;
        java.util.concurrent.Executor executor81 = restAdapter74.httpExecutor;
        retrofit.Profiler profiler82 = restAdapter74.profiler;
        retrofit.RestAdapter.RestHandler restHandler83 = restAdapter74.new RestHandler();
        retrofit.RestAdapter.Builder builder84 = new retrofit.RestAdapter.Builder();
        retrofit.Server server87 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder88 = builder84.setServer(server87);
        retrofit.converter.Converter converter89 = builder84.converter;
        retrofit.RequestInterceptor requestInterceptor90 = builder84.requestInterceptor;
        java.util.concurrent.Executor executor91 = builder84.callbackExecutor;
        retrofit.Profiler profiler92 = builder84.profiler;
        java.util.concurrent.Executor executor93 = builder84.callbackExecutor;
        retrofit.Server server94 = builder84.server;
        restAdapter74.server = server94;
        builder0.server = server94;
        retrofit.RequestInterceptor requestInterceptor97 = builder0.requestInterceptor;
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertTrue("'" + logLevel7 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel7.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(typedOutput46);
        org.junit.Assert.assertNotNull(request47);
        org.junit.Assert.assertNotNull(log59);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log65);
        org.junit.Assert.assertNull(converter67);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNull(executor75);
        org.junit.Assert.assertNull(executor81);
        org.junit.Assert.assertNull(profiler82);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNull(converter89);
        org.junit.Assert.assertNull(requestInterceptor90);
        org.junit.Assert.assertNull(executor91);
        org.junit.Assert.assertNull(profiler92);
        org.junit.Assert.assertNull(executor93);
        org.junit.Assert.assertNotNull(server94);
        org.junit.Assert.assertNull(requestInterceptor97);
    }

    @Test
    public void test02794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02794");
        retrofit.client.Header[] headerArray14 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList15 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList15, headerArray14);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList15, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList15, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList15, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList15, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList15, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("default", "", (java.util.List<retrofit.client.Header>) headerList15, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList15, typedOutput29);
        org.junit.Assert.assertNotNull(headerArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test02795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02795");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter3 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler4 = restAdapter3.errorHandler;
        retrofit.Server server7 = new retrofit.Server("", "");
        restAdapter3.server = server7;
        restAdapter0.server = server7;
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        restAdapter0.log = log10;
        retrofit.Profiler profiler12 = restAdapter0.profiler;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter0.logLevel;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(errorHandler4);
        org.junit.Assert.assertNotNull(log10);
        org.junit.Assert.assertNull(profiler12);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel14);
    }

    @Test
    public void test02796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02796");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = builder0.clientProvider;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        log12.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel15);
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter16.new RestHandler();
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        restAdapter16.log = log18;
        retrofit.converter.Converter converter20 = null;
        restAdapter16.converter = converter20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.Server server25 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder26 = builder22.setServer(server25);
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor28 = restAdapter27.callbackExecutor;
        java.util.concurrent.Executor executor29 = restAdapter27.callbackExecutor;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler31 = restAdapter30.errorHandler;
        retrofit.Server server34 = new retrofit.Server("", "");
        restAdapter30.server = server34;
        restAdapter27.server = server34;
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        restAdapter27.log = log37;
        retrofit.RestAdapter.Builder builder39 = builder26.setLog(log37);
        restAdapter16.log = log37;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler42 = builder41.errorHandler;
        retrofit.Server server45 = new retrofit.Server("", "");
        builder41.server = server45;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor48 = restAdapter47.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler49 = restAdapter47.new RestHandler();
        retrofit.Server server52 = new retrofit.Server("hi!", "hi!");
        restAdapter47.server = server52;
        retrofit.RestAdapter.Builder builder54 = builder41.setServer(server52);
        restAdapter16.server = server52;
        retrofit.Profiler profiler56 = restAdapter16.profiler;
        retrofit.Server server57 = restAdapter16.server;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.Server server61 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder62 = builder58.setServer(server61);
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor64 = restAdapter63.callbackExecutor;
        java.util.concurrent.Executor executor65 = restAdapter63.callbackExecutor;
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler67 = restAdapter66.errorHandler;
        retrofit.Server server70 = new retrofit.Server("", "");
        restAdapter66.server = server70;
        restAdapter63.server = server70;
        retrofit.RestAdapter.Log log73 = retrofit.RestAdapter.Log.NONE;
        restAdapter63.log = log73;
        retrofit.RestAdapter.Builder builder75 = builder62.setLog(log73);
        retrofit.RestAdapter.LogLevel logLevel76 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder77 = builder62.setLogLevel(logLevel76);
        retrofit.RestAdapter.Log log78 = builder62.log;
        retrofit.RestAdapter restAdapter79 = builder62.build();
        java.util.concurrent.Executor executor80 = restAdapter79.callbackExecutor;
        restAdapter16.httpExecutor = executor80;
        builder0.callbackExecutor = executor80;
        retrofit.RestAdapter.Log log83 = builder0.log;
        org.junit.Assert.assertNull(provider1);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log18);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(errorHandler31);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(errorHandler42);
        org.junit.Assert.assertNull(executor48);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(profiler56);
        org.junit.Assert.assertNotNull(server57);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(executor64);
        org.junit.Assert.assertNull(executor65);
        org.junit.Assert.assertNull(errorHandler67);
        org.junit.Assert.assertNotNull(log73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(log78);
        org.junit.Assert.assertNotNull(restAdapter79);
        org.junit.Assert.assertNotNull(executor80);
        org.junit.Assert.assertNull(log83);
    }

    @Test
    public void test02797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02797");
        retrofit.client.Header[] headerArray14 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList15 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList15, headerArray14);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList15, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList15, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList15, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("default", "default", (java.util.List<retrofit.client.Header>) headerList15, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("default", "hi!", (java.util.List<retrofit.client.Header>) headerList15, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("hi!", "default", (java.util.List<retrofit.client.Header>) headerList15, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList15, typedOutput29);
        retrofit.mime.TypedOutput typedOutput31 = request30.getBody();
        org.junit.Assert.assertNotNull(headerArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(typedOutput31);
    }

    @Test
    public void test02798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02798");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.RestAdapter restAdapter3 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor4 = restAdapter3.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        restAdapter3.server = server12;
        retrofit.Profiler profiler16 = restAdapter3.profiler;
        retrofit.ErrorHandler errorHandler17 = null;
        restAdapter3.errorHandler = errorHandler17;
        retrofit.Profiler profiler19 = null;
        restAdapter3.profiler = profiler19;
        retrofit.RestAdapter.LogLevel logLevel21 = restAdapter3.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter3.logLevel = logLevel22;
        restAdapter0.logLevel = logLevel22;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.Server server28 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder29 = builder25.setServer(server28);
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor31 = restAdapter30.callbackExecutor;
        java.util.concurrent.Executor executor32 = restAdapter30.callbackExecutor;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler34 = restAdapter33.errorHandler;
        retrofit.Server server37 = new retrofit.Server("", "");
        restAdapter33.server = server37;
        restAdapter30.server = server37;
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        restAdapter30.log = log40;
        retrofit.RestAdapter.Builder builder42 = builder29.setLog(log40);
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder44 = builder29.setLogLevel(logLevel43);
        retrofit.Profiler profiler45 = null;
        builder44.profiler = profiler45;
        retrofit.converter.Converter converter47 = null;
        builder44.converter = converter47;
        retrofit.ErrorHandler errorHandler49 = null;
        builder44.errorHandler = errorHandler49;
        retrofit.RestAdapter restAdapter51 = builder44.build();
        retrofit.ErrorHandler errorHandler52 = builder44.errorHandler;
        restAdapter0.errorHandler = errorHandler52;
        retrofit.converter.Converter converter54 = restAdapter0.converter;
        retrofit.RestAdapter.Log log55 = restAdapter0.log;
        retrofit.Profiler profiler56 = null;
        restAdapter0.profiler = profiler56;
        retrofit.client.Response response59 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response61 = restAdapter0.logAndReplaceResponse("default", response59, 1L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNull(profiler16);
        org.junit.Assert.assertNull(logLevel21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(errorHandler34);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(restAdapter51);
        org.junit.Assert.assertNotNull(errorHandler52);
        org.junit.Assert.assertNull(converter54);
        org.junit.Assert.assertNull(log55);
    }

    @Test
    public void test02799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02799");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RequestInterceptor requestInterceptor13 = null;
        restAdapter12.requestInterceptor = requestInterceptor13;
        retrofit.RestAdapter.LogLevel logLevel15 = restAdapter12.logLevel;
        java.util.concurrent.Executor executor16 = restAdapter12.callbackExecutor;
        retrofit.client.Header[] headerArray29 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList30 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList30, headerArray29);
        retrofit.mime.TypedOutput typedOutput32 = null;
        retrofit.client.Request request33 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList30, typedOutput32);
        retrofit.mime.TypedOutput typedOutput34 = null;
        retrofit.client.Request request35 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList30, typedOutput34);
        retrofit.mime.TypedOutput typedOutput36 = null;
        retrofit.client.Request request37 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList30, typedOutput36);
        retrofit.mime.TypedOutput typedOutput38 = null;
        retrofit.client.Request request39 = new retrofit.client.Request("hi!", "default", (java.util.List<retrofit.client.Header>) headerList30, typedOutput38);
        retrofit.mime.TypedOutput typedOutput40 = null;
        retrofit.client.Request request41 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList30, typedOutput40);
        retrofit.mime.TypedOutput typedOutput42 = null;
        retrofit.client.Request request43 = new retrofit.client.Request("hi!", "default", (java.util.List<retrofit.client.Header>) headerList30, typedOutput42);
        retrofit.client.Request request44 = restAdapter12.logAndReplaceRequest(request43);
        retrofit.mime.TypedOutput typedOutput45 = request44.getBody();
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNotNull(headerArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(request44);
        org.junit.Assert.assertNull(typedOutput45);
    }

    @Test
    public void test02800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02800");
        retrofit.client.Header[] headerArray10 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList11 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList11, headerArray10);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList11, typedOutput13);
        java.util.List<retrofit.client.Header> headerList15 = request14.getHeaders();
        java.util.List<retrofit.client.Header> headerList16 = request14.getHeaders();
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("hi!", "hi!", headerList16, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "", headerList16, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("default", "hi!", headerList16, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("default", "", headerList16, typedOutput23);
        java.lang.String str25 = request24.getUrl();
        org.junit.Assert.assertNotNull(headerArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertNotNull(headerList16);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test02801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02801");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler21 = builder20.errorHandler;
        retrofit.Server server24 = new retrofit.Server("", "");
        builder20.server = server24;
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler34 = builder33.errorHandler;
        retrofit.Server server37 = new retrofit.Server("", "");
        builder33.server = server37;
        retrofit.RestAdapter.Log log39 = retrofit.RestAdapter.Log.NONE;
        builder33.log = log39;
        retrofit.Server server41 = null;
        retrofit.client.Client.Provider provider42 = null;
        java.util.concurrent.Executor executor43 = null;
        java.util.concurrent.Executor executor44 = null;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        retrofit.converter.Converter converter46 = null;
        retrofit.Profiler profiler47 = null;
        retrofit.ErrorHandler errorHandler48 = null;
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        log49.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server41, provider42, executor43, executor44, requestInterceptor45, converter46, profiler47, errorHandler48, log49, logLevel52);
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter(server24, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log39, logLevel52);
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.Server server58 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder59 = builder55.setServer(server58);
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor61 = restAdapter60.callbackExecutor;
        java.util.concurrent.Executor executor62 = restAdapter60.callbackExecutor;
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler64 = restAdapter63.errorHandler;
        retrofit.Server server67 = new retrofit.Server("", "");
        restAdapter63.server = server67;
        restAdapter60.server = server67;
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        restAdapter60.log = log70;
        retrofit.RestAdapter.Builder builder72 = builder59.setLog(log70);
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder74 = builder59.setLogLevel(logLevel73);
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter(server9, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log39, logLevel73);
        retrofit.ErrorHandler errorHandler76 = null;
        restAdapter75.errorHandler = errorHandler76;
        retrofit.RequestInterceptor requestInterceptor78 = restAdapter75.requestInterceptor;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(errorHandler34);
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(executor61);
        org.junit.Assert.assertNull(executor62);
        org.junit.Assert.assertNull(errorHandler64);
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNull(requestInterceptor78);
    }

    @Test
    public void test02802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02802");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server6 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder7 = builder0.setServer(server6);
        retrofit.converter.Converter converter8 = null;
        builder7.converter = converter8;
        retrofit.RestAdapter restAdapter10 = builder7.build();
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler12 = builder11.errorHandler;
        java.util.concurrent.Executor executor13 = null;
        builder11.callbackExecutor = executor13;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider16 = builder15.clientProvider;
        java.util.concurrent.Executor executor17 = null;
        builder15.callbackExecutor = executor17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.Server server22 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder23 = builder19.setServer(server22);
        java.lang.String str24 = server22.getUrl();
        retrofit.RestAdapter.Builder builder25 = builder15.setServer(server22);
        retrofit.RestAdapter.Builder builder26 = builder11.setServer(server22);
        restAdapter10.server = server22;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler29 = builder28.errorHandler;
        retrofit.client.Client.Provider provider30 = null;
        builder28.clientProvider = provider30;
        retrofit.Server server34 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder35 = builder28.setServer(server34);
        retrofit.client.Client.Provider provider36 = null;
        java.util.concurrent.Executor executor37 = null;
        java.util.concurrent.Executor executor38 = null;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        retrofit.converter.Converter converter40 = null;
        retrofit.Profiler profiler41 = null;
        retrofit.ErrorHandler errorHandler42 = null;
        retrofit.Server server43 = null;
        retrofit.client.Client.Provider provider44 = null;
        java.util.concurrent.Executor executor45 = null;
        java.util.concurrent.Executor executor46 = null;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        retrofit.converter.Converter converter48 = null;
        retrofit.Profiler profiler49 = null;
        retrofit.ErrorHandler errorHandler50 = null;
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        log51.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter(server43, provider44, executor45, executor46, requestInterceptor47, converter48, profiler49, errorHandler50, log51, logLevel54);
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter(server34, provider36, executor37, executor38, requestInterceptor39, converter40, profiler41, errorHandler42, log51, logLevel56);
        boolean boolean58 = logLevel56.log();
        boolean boolean59 = logLevel56.log();
        restAdapter10.setLogLevel(logLevel56);
        retrofit.RequestInterceptor requestInterceptor61 = null;
        restAdapter10.requestInterceptor = requestInterceptor61;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler64 = builder63.errorHandler;
        retrofit.Server server67 = new retrofit.Server("", "");
        builder63.server = server67;
        retrofit.client.Client.Provider provider69 = null;
        java.util.concurrent.Executor executor70 = null;
        java.util.concurrent.Executor executor71 = null;
        retrofit.RequestInterceptor requestInterceptor72 = null;
        retrofit.converter.Converter converter73 = null;
        retrofit.Profiler profiler74 = null;
        retrofit.ErrorHandler errorHandler75 = null;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler77 = builder76.errorHandler;
        retrofit.Server server80 = new retrofit.Server("", "");
        builder76.server = server80;
        retrofit.RestAdapter.Log log82 = retrofit.RestAdapter.Log.NONE;
        builder76.log = log82;
        retrofit.Server server84 = null;
        retrofit.client.Client.Provider provider85 = null;
        java.util.concurrent.Executor executor86 = null;
        java.util.concurrent.Executor executor87 = null;
        retrofit.RequestInterceptor requestInterceptor88 = null;
        retrofit.converter.Converter converter89 = null;
        retrofit.Profiler profiler90 = null;
        retrofit.ErrorHandler errorHandler91 = null;
        retrofit.RestAdapter.Log log92 = retrofit.RestAdapter.Log.NONE;
        log92.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel95 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter96 = new retrofit.RestAdapter(server84, provider85, executor86, executor87, requestInterceptor88, converter89, profiler90, errorHandler91, log92, logLevel95);
        retrofit.RestAdapter restAdapter97 = new retrofit.RestAdapter(server67, provider69, executor70, executor71, requestInterceptor72, converter73, profiler74, errorHandler75, log82, logLevel95);
        restAdapter10.setLogLevel(logLevel95);
        retrofit.RestAdapter.RestHandler restHandler99 = restAdapter10.new RestHandler();
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(restAdapter10);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(provider16);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNull(errorHandler64);
        org.junit.Assert.assertNull(errorHandler77);
        org.junit.Assert.assertNotNull(log82);
        org.junit.Assert.assertNotNull(log92);
        org.junit.Assert.assertTrue("'" + logLevel95 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel95.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test02803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02803");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        restAdapter5.log = log15;
        retrofit.RestAdapter.Builder builder17 = builder4.setLog(log15);
        retrofit.RequestInterceptor requestInterceptor18 = builder4.requestInterceptor;
        retrofit.converter.Converter converter19 = builder4.converter;
        retrofit.RestAdapter restAdapter20 = builder4.build();
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        log21.log("hi!");
        log21.log("hi!");
        log21.log("");
        log21.log("hi!");
        retrofit.RestAdapter.Builder builder30 = builder4.setLog(log21);
        retrofit.ErrorHandler errorHandler31 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder32 = builder30.setErrorHandler(errorHandler31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Error handler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(requestInterceptor18);
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNotNull(restAdapter20);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test02804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02804");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.Profiler profiler19 = restAdapter0.profiler;
        java.util.concurrent.Executor executor20 = restAdapter0.callbackExecutor;
        retrofit.client.Response response22 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response24 = restAdapter0.logAndReplaceResponse("default", response22, (long) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(profiler19);
        org.junit.Assert.assertNull(executor20);
    }

    @Test
    public void test02805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02805");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean6 = logLevel5.log();
        builder0.logLevel = logLevel5;
        retrofit.ErrorHandler errorHandler8 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder10 = builder0.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor11 = null;
        builder10.requestInterceptor = requestInterceptor11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler14 = builder13.errorHandler;
        retrofit.client.Client.Provider provider15 = null;
        builder13.clientProvider = provider15;
        retrofit.Server server19 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder20 = builder13.setServer(server19);
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.Server server28 = null;
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        log36.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server28, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log36, logLevel39);
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter(server19, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log36, logLevel41);
        log36.log("");
        builder10.log = log36;
        retrofit.RestAdapter.Log log46 = builder10.log;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler48 = null;
        builder47.errorHandler = errorHandler48;
        retrofit.ErrorHandler errorHandler50 = builder47.errorHandler;
        retrofit.RestAdapter.Builder builder52 = builder47.setServer("hi!");
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler54 = builder53.errorHandler;
        retrofit.ErrorHandler errorHandler55 = builder53.errorHandler;
        retrofit.Profiler profiler56 = builder53.profiler;
        retrofit.RestAdapter.Log log57 = builder53.log;
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.FULL;
        builder53.logLevel = logLevel58;
        retrofit.RestAdapter.Builder builder60 = builder52.setLogLevel(logLevel58);
        retrofit.Server server61 = null;
        retrofit.client.Client.Provider provider62 = null;
        java.util.concurrent.Executor executor63 = null;
        java.util.concurrent.Executor executor64 = null;
        retrofit.RequestInterceptor requestInterceptor65 = null;
        retrofit.converter.Converter converter66 = null;
        retrofit.Profiler profiler67 = null;
        retrofit.ErrorHandler errorHandler68 = null;
        retrofit.RestAdapter.Log log69 = retrofit.RestAdapter.Log.NONE;
        log69.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel72 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter73 = new retrofit.RestAdapter(server61, provider62, executor63, executor64, requestInterceptor65, converter66, profiler67, errorHandler68, log69, logLevel72);
        log69.log("");
        retrofit.RestAdapter.Builder builder76 = builder60.setLog(log69);
        retrofit.RestAdapter.Builder builder77 = builder10.setLog(log69);
        log69.log("hi!");
        log69.log("default");
        log69.log("hi!");
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertNull(errorHandler50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(errorHandler54);
        org.junit.Assert.assertNull(errorHandler55);
        org.junit.Assert.assertNull(profiler56);
        org.junit.Assert.assertNull(log57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(log69);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
    }

    @Test
    public void test02806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02806");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server6 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder7 = builder0.setServer(server6);
        retrofit.converter.Converter converter8 = null;
        builder7.converter = converter8;
        retrofit.RestAdapter restAdapter10 = builder7.build();
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler12 = builder11.errorHandler;
        java.util.concurrent.Executor executor13 = null;
        builder11.callbackExecutor = executor13;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider16 = builder15.clientProvider;
        java.util.concurrent.Executor executor17 = null;
        builder15.callbackExecutor = executor17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.Server server22 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder23 = builder19.setServer(server22);
        java.lang.String str24 = server22.getUrl();
        retrofit.RestAdapter.Builder builder25 = builder15.setServer(server22);
        retrofit.RestAdapter.Builder builder26 = builder11.setServer(server22);
        restAdapter10.server = server22;
        retrofit.Server server28 = restAdapter10.server;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler30 = builder29.errorHandler;
        java.util.concurrent.Executor executor31 = builder29.callbackExecutor;
        retrofit.RestAdapter.Builder builder33 = builder29.setServer("hi!");
        builder33.ensureSaneDefaults();
        retrofit.Server server35 = null;
        retrofit.client.Client.Provider provider36 = null;
        java.util.concurrent.Executor executor37 = null;
        java.util.concurrent.Executor executor38 = null;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        retrofit.converter.Converter converter40 = null;
        retrofit.Profiler profiler41 = null;
        retrofit.ErrorHandler errorHandler42 = null;
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        log43.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter(server35, provider36, executor37, executor38, requestInterceptor39, converter40, profiler41, errorHandler42, log43, logLevel46);
        retrofit.RestAdapter.RestHandler restHandler48 = restAdapter47.new RestHandler();
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        restAdapter47.log = log49;
        retrofit.converter.Converter converter51 = null;
        restAdapter47.converter = converter51;
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter47.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor54 = null;
        restAdapter47.requestInterceptor = requestInterceptor54;
        retrofit.RestAdapter.LogLevel logLevel56 = restAdapter47.logLevel;
        retrofit.RestAdapter.Builder builder57 = builder33.setLogLevel(logLevel56);
        restAdapter10.logLevel = logLevel56;
        retrofit.RestAdapter.Log log59 = null;
        restAdapter10.log = log59;
        retrofit.converter.Converter converter61 = restAdapter10.converter;
        retrofit.RequestInterceptor requestInterceptor62 = restAdapter10.requestInterceptor;
        retrofit.Server server63 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel64 = restAdapter10.getLogLevel();
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(restAdapter10);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(provider16);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(server28);
        org.junit.Assert.assertNull(errorHandler30);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(converter61);
        org.junit.Assert.assertNotNull(requestInterceptor62);
        org.junit.Assert.assertNotNull(server63);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test02807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02807");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server6 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder7 = builder0.setServer(server6);
        retrofit.Server server10 = new retrofit.Server("", "");
        builder7.server = server10;
        retrofit.Profiler profiler12 = builder7.profiler;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler14 = builder13.errorHandler;
        retrofit.ErrorHandler errorHandler15 = builder13.errorHandler;
        retrofit.RestAdapter.Log log16 = null;
        builder13.log = log16;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        builder13.requestInterceptor = requestInterceptor18;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor21 = restAdapter20.callbackExecutor;
        java.util.concurrent.Executor executor22 = restAdapter20.callbackExecutor;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler24 = restAdapter23.errorHandler;
        retrofit.Server server27 = new retrofit.Server("", "");
        restAdapter23.server = server27;
        restAdapter20.server = server27;
        retrofit.RestAdapter.Builder builder30 = builder13.setServer(server27);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler32 = builder31.errorHandler;
        retrofit.client.Client.Provider provider33 = null;
        builder31.clientProvider = provider33;
        retrofit.Server server37 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder38 = builder31.setServer(server37);
        retrofit.client.Client.Provider provider39 = null;
        java.util.concurrent.Executor executor40 = null;
        java.util.concurrent.Executor executor41 = null;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        retrofit.converter.Converter converter43 = null;
        retrofit.Profiler profiler44 = null;
        retrofit.ErrorHandler errorHandler45 = null;
        retrofit.Server server46 = null;
        retrofit.client.Client.Provider provider47 = null;
        java.util.concurrent.Executor executor48 = null;
        java.util.concurrent.Executor executor49 = null;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        retrofit.converter.Converter converter51 = null;
        retrofit.Profiler profiler52 = null;
        retrofit.ErrorHandler errorHandler53 = null;
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        log54.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter(server46, provider47, executor48, executor49, requestInterceptor50, converter51, profiler52, errorHandler53, log54, logLevel57);
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter(server37, provider39, executor40, executor41, requestInterceptor42, converter43, profiler44, errorHandler45, log54, logLevel59);
        retrofit.RestAdapter.Builder builder61 = builder13.setLogLevel(logLevel59);
        java.util.concurrent.Executor executor62 = builder61.httpExecutor;
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        log63.log("hi!");
        log63.log("hi!");
        log63.log("");
        builder61.log = log63;
        builder7.log = log63;
        retrofit.RequestInterceptor requestInterceptor72 = builder7.requestInterceptor;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(profiler12);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(errorHandler32);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(executor62);
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertNull(requestInterceptor72);
    }

    @Test
    public void test02808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02808");
        retrofit.client.Header[] headerArray12 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList13 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList13, headerArray12);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList13, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList13, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList13, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList13, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("default", "hi!", (java.util.List<retrofit.client.Header>) headerList13, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("default", "", (java.util.List<retrofit.client.Header>) headerList13, typedOutput25);
        java.util.List<retrofit.client.Header> headerList27 = request26.getHeaders();
        org.junit.Assert.assertNotNull(headerArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(headerList27);
    }

    @Test
    public void test02809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02809");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.ErrorHandler errorHandler3 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler7 = builder6.errorHandler;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.Server server11 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder12 = builder8.setServer(server11);
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor14 = restAdapter13.callbackExecutor;
        java.util.concurrent.Executor executor15 = restAdapter13.callbackExecutor;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler17 = restAdapter16.errorHandler;
        retrofit.Server server20 = new retrofit.Server("", "");
        restAdapter16.server = server20;
        restAdapter13.server = server20;
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        restAdapter13.log = log23;
        retrofit.RestAdapter.Builder builder25 = builder12.setLog(log23);
        retrofit.RestAdapter.Builder builder26 = builder6.setLog(log23);
        builder0.log = log23;
        retrofit.RestAdapter.LogLevel logLevel28 = builder0.logLevel;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.Server server32 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder33 = builder29.setServer(server32);
        retrofit.Profiler profiler34 = builder29.profiler;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler36 = builder35.errorHandler;
        java.util.concurrent.Executor executor37 = builder35.callbackExecutor;
        java.util.concurrent.Executor executor38 = builder35.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel39 = builder35.logLevel;
        retrofit.RestAdapter.Builder builder40 = builder29.setLogLevel(logLevel39);
        retrofit.RestAdapter.Builder builder41 = builder0.setLogLevel(logLevel39);
        retrofit.RequestInterceptor requestInterceptor42 = builder0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor43 = builder0.requestInterceptor;
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(profiler34);
        org.junit.Assert.assertNull(errorHandler36);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(requestInterceptor42);
        org.junit.Assert.assertNull(requestInterceptor43);
    }

    @Test
    public void test02810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02810");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server6 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder7 = builder0.setServer(server6);
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.Server server15 = null;
        retrofit.client.Client.Provider provider16 = null;
        java.util.concurrent.Executor executor17 = null;
        java.util.concurrent.Executor executor18 = null;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        retrofit.converter.Converter converter20 = null;
        retrofit.Profiler profiler21 = null;
        retrofit.ErrorHandler errorHandler22 = null;
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        log23.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server15, provider16, executor17, executor18, requestInterceptor19, converter20, profiler21, errorHandler22, log23, logLevel26);
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server6, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log23, logLevel28);
        retrofit.converter.Converter converter30 = restAdapter29.converter;
        retrofit.RestAdapter.RestHandler restHandler31 = restAdapter29.new RestHandler();
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter30);
    }

    @Test
    public void test02811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02811");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        restAdapter12.log = log14;
        retrofit.converter.Converter converter16 = null;
        restAdapter12.converter = converter16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter12.getLogLevel();
        retrofit.ErrorHandler errorHandler19 = restAdapter12.errorHandler;
        retrofit.Profiler profiler20 = restAdapter12.profiler;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler22 = null;
        builder21.errorHandler = errorHandler22;
        retrofit.ErrorHandler errorHandler24 = builder21.errorHandler;
        retrofit.RestAdapter.Builder builder26 = builder21.setServer("hi!");
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler28 = builder27.errorHandler;
        retrofit.ErrorHandler errorHandler29 = builder27.errorHandler;
        retrofit.Profiler profiler30 = builder27.profiler;
        retrofit.RestAdapter.Log log31 = builder27.log;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.FULL;
        builder27.logLevel = logLevel32;
        retrofit.RestAdapter.Builder builder34 = builder26.setLogLevel(logLevel32);
        retrofit.Server server35 = null;
        retrofit.client.Client.Provider provider36 = null;
        java.util.concurrent.Executor executor37 = null;
        java.util.concurrent.Executor executor38 = null;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        retrofit.converter.Converter converter40 = null;
        retrofit.Profiler profiler41 = null;
        retrofit.ErrorHandler errorHandler42 = null;
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        log43.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter(server35, provider36, executor37, executor38, requestInterceptor39, converter40, profiler41, errorHandler42, log43, logLevel46);
        log43.log("");
        retrofit.RestAdapter.Builder builder50 = builder34.setLog(log43);
        restAdapter12.log = log43;
        retrofit.RestAdapter.RestHandler restHandler52 = restAdapter12.new RestHandler();
        java.util.concurrent.Executor executor53 = restAdapter12.httpExecutor;
        java.util.concurrent.Executor executor54 = restAdapter12.httpExecutor;
        retrofit.Profiler profiler55 = null;
        restAdapter12.profiler = profiler55;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler58 = builder57.errorHandler;
        java.util.concurrent.Executor executor59 = null;
        builder57.callbackExecutor = executor59;
        retrofit.converter.Converter converter61 = builder57.converter;
        retrofit.RestAdapter.Builder builder63 = builder57.setServer("hi!");
        builder57.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor66 = restAdapter65.callbackExecutor;
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor68 = restAdapter67.callbackExecutor;
        java.util.concurrent.Executor executor69 = restAdapter67.callbackExecutor;
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler71 = restAdapter70.errorHandler;
        retrofit.Server server74 = new retrofit.Server("", "");
        restAdapter70.server = server74;
        restAdapter67.server = server74;
        restAdapter65.server = server74;
        java.lang.String str78 = server74.getName();
        builder57.server = server74;
        java.lang.String str80 = server74.getName();
        restAdapter12.server = server74;
        java.lang.String str82 = server74.getUrl();
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(profiler20);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNull(profiler30);
        org.junit.Assert.assertNull(log31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(executor53);
        org.junit.Assert.assertNull(executor54);
        org.junit.Assert.assertNull(errorHandler58);
        org.junit.Assert.assertNull(converter61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(executor66);
        org.junit.Assert.assertNull(executor68);
        org.junit.Assert.assertNull(executor69);
        org.junit.Assert.assertNull(errorHandler71);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
    }

    @Test
    public void test02812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02812");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter12.new RestHandler();
        retrofit.client.Response response16 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response18 = restAdapter12.logAndReplaceResponse("", response16, (long) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test02813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02813");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter0.getLogLevel();
        retrofit.client.Client.Provider provider20 = null;
        restAdapter0.clientProvider = provider20;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean23 = logLevel22.log();
        restAdapter0.logLevel = logLevel22;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        restAdapter0.requestInterceptor = requestInterceptor25;
        retrofit.ErrorHandler errorHandler27 = restAdapter0.errorHandler;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler29 = builder28.errorHandler;
        retrofit.ErrorHandler errorHandler30 = builder28.errorHandler;
        retrofit.RestAdapter.Log log31 = null;
        builder28.log = log31;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean34 = logLevel33.log();
        builder28.logLevel = logLevel33;
        retrofit.ErrorHandler errorHandler36 = builder28.errorHandler;
        retrofit.RestAdapter.Builder builder38 = builder28.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor39 = null;
        builder38.requestInterceptor = requestInterceptor39;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler42 = builder41.errorHandler;
        retrofit.client.Client.Provider provider43 = null;
        builder41.clientProvider = provider43;
        retrofit.Server server47 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder48 = builder41.setServer(server47);
        retrofit.client.Client.Provider provider49 = null;
        java.util.concurrent.Executor executor50 = null;
        java.util.concurrent.Executor executor51 = null;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        retrofit.converter.Converter converter53 = null;
        retrofit.Profiler profiler54 = null;
        retrofit.ErrorHandler errorHandler55 = null;
        retrofit.Server server56 = null;
        retrofit.client.Client.Provider provider57 = null;
        java.util.concurrent.Executor executor58 = null;
        java.util.concurrent.Executor executor59 = null;
        retrofit.RequestInterceptor requestInterceptor60 = null;
        retrofit.converter.Converter converter61 = null;
        retrofit.Profiler profiler62 = null;
        retrofit.ErrorHandler errorHandler63 = null;
        retrofit.RestAdapter.Log log64 = retrofit.RestAdapter.Log.NONE;
        log64.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel67 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter(server56, provider57, executor58, executor59, requestInterceptor60, converter61, profiler62, errorHandler63, log64, logLevel67);
        retrofit.RestAdapter.LogLevel logLevel69 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter(server47, provider49, executor50, executor51, requestInterceptor52, converter53, profiler54, errorHandler55, log64, logLevel69);
        log64.log("");
        builder38.log = log64;
        log64.log("default");
        restAdapter0.log = log64;
        log64.log("");
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNull(errorHandler30);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(errorHandler36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(errorHandler42);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(log64);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test02814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02814");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = null;
        restAdapter0.callbackExecutor = executor2;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.client.Client.Provider provider6 = restAdapter0.clientProvider;
        retrofit.ErrorHandler errorHandler7 = restAdapter0.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler8 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Log log9 = restAdapter0.log;
        retrofit.RestAdapter.RestHandler restHandler10 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(provider6);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(log9);
    }

    @Test
    public void test02815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02815");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        java.util.concurrent.Executor executor16 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor17 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler20 = null;
        builder19.errorHandler = errorHandler20;
        retrofit.ErrorHandler errorHandler22 = builder19.errorHandler;
        retrofit.RestAdapter.Builder builder24 = builder19.setServer("hi!");
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler26 = builder25.errorHandler;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.Server server30 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder31 = builder27.setServer(server30);
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor33 = restAdapter32.callbackExecutor;
        java.util.concurrent.Executor executor34 = restAdapter32.callbackExecutor;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler36 = restAdapter35.errorHandler;
        retrofit.Server server39 = new retrofit.Server("", "");
        restAdapter35.server = server39;
        restAdapter32.server = server39;
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        restAdapter32.log = log42;
        retrofit.RestAdapter.Builder builder44 = builder31.setLog(log42);
        retrofit.RestAdapter.Builder builder45 = builder25.setLog(log42);
        builder19.log = log42;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler48 = builder47.errorHandler;
        retrofit.client.Client.Provider provider49 = null;
        builder47.clientProvider = provider49;
        retrofit.Server server53 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder54 = builder47.setServer(server53);
        retrofit.converter.Converter converter55 = null;
        builder54.converter = converter55;
        retrofit.RestAdapter restAdapter57 = builder54.build();
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler59 = builder58.errorHandler;
        java.util.concurrent.Executor executor60 = null;
        builder58.callbackExecutor = executor60;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider63 = builder62.clientProvider;
        java.util.concurrent.Executor executor64 = null;
        builder62.callbackExecutor = executor64;
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        retrofit.Server server69 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder70 = builder66.setServer(server69);
        java.lang.String str71 = server69.getUrl();
        retrofit.RestAdapter.Builder builder72 = builder62.setServer(server69);
        retrofit.RestAdapter.Builder builder73 = builder58.setServer(server69);
        restAdapter57.server = server69;
        retrofit.client.Client.Provider provider75 = restAdapter57.clientProvider;
        retrofit.RestAdapter.Builder builder76 = builder19.setClient(provider75);
        retrofit.client.Client.Provider provider77 = builder76.clientProvider;
        retrofit.converter.Converter converter78 = null;
        builder76.converter = converter78;
        retrofit.RestAdapter restAdapter80 = builder76.build();
        retrofit.RestAdapter.Log log81 = restAdapter80.log;
        restAdapter0.log = log81;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(errorHandler26);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertNull(executor34);
        org.junit.Assert.assertNull(errorHandler36);
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(errorHandler48);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(restAdapter57);
        org.junit.Assert.assertNull(errorHandler59);
        org.junit.Assert.assertNull(provider63);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(provider75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(provider77);
        org.junit.Assert.assertNotNull(restAdapter80);
        org.junit.Assert.assertNotNull(log81);
    }

    @Test
    public void test02816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02816");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server4 = new retrofit.Server("", "");
        builder0.server = server4;
        retrofit.client.Client.Provider provider6 = builder0.clientProvider;
        retrofit.Profiler profiler7 = null;
        builder0.profiler = profiler7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler10 = builder9.errorHandler;
        retrofit.ErrorHandler errorHandler11 = builder9.errorHandler;
        retrofit.RestAdapter.Log log12 = null;
        builder9.log = log12;
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean15 = logLevel14.log();
        builder9.logLevel = logLevel14;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler18 = null;
        builder17.errorHandler = errorHandler18;
        retrofit.ErrorHandler errorHandler20 = builder17.errorHandler;
        retrofit.RestAdapter.Builder builder22 = builder17.setServer("hi!");
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler24 = builder23.errorHandler;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.Server server28 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder29 = builder25.setServer(server28);
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor31 = restAdapter30.callbackExecutor;
        java.util.concurrent.Executor executor32 = restAdapter30.callbackExecutor;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler34 = restAdapter33.errorHandler;
        retrofit.Server server37 = new retrofit.Server("", "");
        restAdapter33.server = server37;
        restAdapter30.server = server37;
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        restAdapter30.log = log40;
        retrofit.RestAdapter.Builder builder42 = builder29.setLog(log40);
        retrofit.RestAdapter.Builder builder43 = builder23.setLog(log40);
        builder17.log = log40;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler46 = builder45.errorHandler;
        retrofit.client.Client.Provider provider47 = null;
        builder45.clientProvider = provider47;
        retrofit.Server server51 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder52 = builder45.setServer(server51);
        retrofit.converter.Converter converter53 = null;
        builder52.converter = converter53;
        retrofit.RestAdapter restAdapter55 = builder52.build();
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler57 = builder56.errorHandler;
        java.util.concurrent.Executor executor58 = null;
        builder56.callbackExecutor = executor58;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider61 = builder60.clientProvider;
        java.util.concurrent.Executor executor62 = null;
        builder60.callbackExecutor = executor62;
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.Server server67 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder68 = builder64.setServer(server67);
        java.lang.String str69 = server67.getUrl();
        retrofit.RestAdapter.Builder builder70 = builder60.setServer(server67);
        retrofit.RestAdapter.Builder builder71 = builder56.setServer(server67);
        restAdapter55.server = server67;
        retrofit.client.Client.Provider provider73 = restAdapter55.clientProvider;
        retrofit.RestAdapter.Builder builder74 = builder17.setClient(provider73);
        retrofit.RestAdapter restAdapter75 = builder17.build();
        retrofit.ErrorHandler errorHandler76 = restAdapter75.errorHandler;
        retrofit.converter.Converter converter77 = restAdapter75.converter;
        builder9.converter = converter77;
        retrofit.RestAdapter.Builder builder79 = builder0.setConverter(converter77);
        retrofit.RestAdapter.Builder builder80 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler81 = builder80.errorHandler;
        retrofit.Server server84 = new retrofit.Server("", "");
        builder80.server = server84;
        java.util.concurrent.Executor executor86 = null;
        builder80.httpExecutor = executor86;
        retrofit.RestAdapter.Builder builder88 = new retrofit.RestAdapter.Builder();
        retrofit.Server server91 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder92 = builder88.setServer(server91);
        retrofit.RestAdapter.LogLevel logLevel93 = builder92.logLevel;
        java.util.concurrent.Executor executor94 = builder92.httpExecutor;
        retrofit.RestAdapter restAdapter95 = builder92.build();
        retrofit.Server server96 = builder92.server;
        java.lang.String str97 = server96.getName();
        retrofit.RestAdapter.Builder builder98 = builder80.setServer(server96);
        builder0.server = server96;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(provider6);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(errorHandler34);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(errorHandler46);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(restAdapter55);
        org.junit.Assert.assertNull(errorHandler57);
        org.junit.Assert.assertNull(provider61);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(provider73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(restAdapter75);
        org.junit.Assert.assertNotNull(errorHandler76);
        org.junit.Assert.assertNotNull(converter77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNull(errorHandler81);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertTrue("'" + logLevel93 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel93.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor94);
        org.junit.Assert.assertNotNull(restAdapter95);
        org.junit.Assert.assertNotNull(server96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "hi!" + "'", str97, "hi!");
        org.junit.Assert.assertNotNull(builder98);
    }

    @Test
    public void test02817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02817");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.converter.Converter converter4 = builder0.converter;
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.converter.Converter converter7 = builder6.converter;
        java.util.concurrent.Executor executor8 = builder6.httpExecutor;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler10 = builder9.errorHandler;
        retrofit.ErrorHandler errorHandler11 = builder9.errorHandler;
        retrofit.Profiler profiler12 = builder9.profiler;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor14 = restAdapter13.callbackExecutor;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor16 = restAdapter15.callbackExecutor;
        java.util.concurrent.Executor executor17 = restAdapter15.callbackExecutor;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler19 = restAdapter18.errorHandler;
        retrofit.Server server22 = new retrofit.Server("", "");
        restAdapter18.server = server22;
        restAdapter15.server = server22;
        restAdapter13.server = server22;
        retrofit.Profiler profiler26 = restAdapter13.profiler;
        retrofit.ErrorHandler errorHandler27 = null;
        restAdapter13.errorHandler = errorHandler27;
        retrofit.Profiler profiler29 = null;
        restAdapter13.profiler = profiler29;
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter13.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter13.getLogLevel();
        retrofit.ErrorHandler errorHandler33 = null;
        restAdapter13.errorHandler = errorHandler33;
        retrofit.client.Client.Provider provider35 = null;
        restAdapter13.clientProvider = provider35;
        retrofit.RestAdapter.Log log37 = restAdapter13.log;
        retrofit.RestAdapter.RestHandler restHandler38 = restAdapter13.new RestHandler();
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler40 = null;
        builder39.errorHandler = errorHandler40;
        retrofit.ErrorHandler errorHandler42 = builder39.errorHandler;
        retrofit.RestAdapter.Builder builder44 = builder39.setServer("hi!");
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler46 = builder45.errorHandler;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.Server server50 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder51 = builder47.setServer(server50);
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor53 = restAdapter52.callbackExecutor;
        java.util.concurrent.Executor executor54 = restAdapter52.callbackExecutor;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler56 = restAdapter55.errorHandler;
        retrofit.Server server59 = new retrofit.Server("", "");
        restAdapter55.server = server59;
        restAdapter52.server = server59;
        retrofit.RestAdapter.Log log62 = retrofit.RestAdapter.Log.NONE;
        restAdapter52.log = log62;
        retrofit.RestAdapter.Builder builder64 = builder51.setLog(log62);
        retrofit.RestAdapter.Builder builder65 = builder45.setLog(log62);
        builder39.log = log62;
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler68 = builder67.errorHandler;
        retrofit.client.Client.Provider provider69 = null;
        builder67.clientProvider = provider69;
        retrofit.Server server73 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder74 = builder67.setServer(server73);
        retrofit.converter.Converter converter75 = null;
        builder74.converter = converter75;
        retrofit.RestAdapter restAdapter77 = builder74.build();
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler79 = builder78.errorHandler;
        java.util.concurrent.Executor executor80 = null;
        builder78.callbackExecutor = executor80;
        retrofit.RestAdapter.Builder builder82 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider83 = builder82.clientProvider;
        java.util.concurrent.Executor executor84 = null;
        builder82.callbackExecutor = executor84;
        retrofit.RestAdapter.Builder builder86 = new retrofit.RestAdapter.Builder();
        retrofit.Server server89 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder90 = builder86.setServer(server89);
        java.lang.String str91 = server89.getUrl();
        retrofit.RestAdapter.Builder builder92 = builder82.setServer(server89);
        retrofit.RestAdapter.Builder builder93 = builder78.setServer(server89);
        restAdapter77.server = server89;
        retrofit.client.Client.Provider provider95 = restAdapter77.clientProvider;
        retrofit.RestAdapter.Builder builder96 = builder39.setClient(provider95);
        restAdapter13.clientProvider = provider95;
        builder9.clientProvider = provider95;
        retrofit.RestAdapter.Builder builder99 = builder6.setClient(provider95);
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(profiler12);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(profiler26);
        org.junit.Assert.assertNull(logLevel31);
        org.junit.Assert.assertNull(logLevel32);
        org.junit.Assert.assertNull(log37);
        org.junit.Assert.assertNull(errorHandler42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(errorHandler46);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(executor53);
        org.junit.Assert.assertNull(executor54);
        org.junit.Assert.assertNull(errorHandler56);
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(errorHandler68);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(restAdapter77);
        org.junit.Assert.assertNull(errorHandler79);
        org.junit.Assert.assertNull(provider83);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "hi!" + "'", str91, "hi!");
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(provider95);
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNotNull(builder99);
    }

    @Test
    public void test02818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02818");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.client.Header[] headerArray22 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList23 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList23, headerArray22);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList23, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList23, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList23, typedOutput29);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList23, typedOutput31);
        retrofit.mime.TypedOutput typedOutput33 = request32.getBody();
        retrofit.client.Request request34 = restAdapter12.logAndReplaceRequest(request32);
        retrofit.ErrorHandler errorHandler35 = restAdapter12.errorHandler;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler37 = builder36.errorHandler;
        retrofit.ErrorHandler errorHandler38 = builder36.errorHandler;
        retrofit.converter.Converter converter39 = null;
        builder36.converter = converter39;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler42 = builder41.errorHandler;
        retrofit.client.Client.Provider provider43 = null;
        builder41.clientProvider = provider43;
        retrofit.Server server47 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder48 = builder41.setServer(server47);
        retrofit.converter.Converter converter49 = null;
        builder48.converter = converter49;
        retrofit.RestAdapter restAdapter51 = builder48.build();
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler53 = builder52.errorHandler;
        java.util.concurrent.Executor executor54 = null;
        builder52.callbackExecutor = executor54;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider57 = builder56.clientProvider;
        java.util.concurrent.Executor executor58 = null;
        builder56.callbackExecutor = executor58;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.Server server63 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder64 = builder60.setServer(server63);
        java.lang.String str65 = server63.getUrl();
        retrofit.RestAdapter.Builder builder66 = builder56.setServer(server63);
        retrofit.RestAdapter.Builder builder67 = builder52.setServer(server63);
        restAdapter51.server = server63;
        retrofit.Server server69 = restAdapter51.server;
        retrofit.RestAdapter.RestHandler restHandler70 = restAdapter51.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel71 = restAdapter51.getLogLevel();
        builder36.logLevel = logLevel71;
        restAdapter12.setLogLevel(logLevel71);
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        retrofit.Server server77 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder78 = builder74.setServer(server77);
        retrofit.RestAdapter restAdapter79 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor80 = restAdapter79.callbackExecutor;
        java.util.concurrent.Executor executor81 = restAdapter79.callbackExecutor;
        retrofit.RestAdapter restAdapter82 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler83 = restAdapter82.errorHandler;
        retrofit.Server server86 = new retrofit.Server("", "");
        restAdapter82.server = server86;
        restAdapter79.server = server86;
        retrofit.RestAdapter.Log log89 = retrofit.RestAdapter.Log.NONE;
        restAdapter79.log = log89;
        retrofit.RestAdapter.Builder builder91 = builder78.setLog(log89);
        log89.log("");
        restAdapter12.log = log89;
        retrofit.RestAdapter.Log log95 = restAdapter12.log;
        java.lang.Class<?> wildcardClass96 = restAdapter12.getClass();
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(typedOutput33);
        org.junit.Assert.assertNotNull(request34);
        org.junit.Assert.assertNull(errorHandler35);
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNull(errorHandler38);
        org.junit.Assert.assertNull(errorHandler42);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(restAdapter51);
        org.junit.Assert.assertNull(errorHandler53);
        org.junit.Assert.assertNull(provider57);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "hi!" + "'", str65, "hi!");
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(server69);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNull(executor80);
        org.junit.Assert.assertNull(executor81);
        org.junit.Assert.assertNull(errorHandler83);
        org.junit.Assert.assertNotNull(log89);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(log95);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test02819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02819");
        retrofit.client.Header[] headerArray12 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList13 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList13, headerArray12);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList13, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList13, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList13, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("hi!", "default", (java.util.List<retrofit.client.Header>) headerList13, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList13, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("hi!", "default", (java.util.List<retrofit.client.Header>) headerList13, typedOutput25);
        java.lang.String str27 = request26.getUrl();
        org.junit.Assert.assertNotNull(headerArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "default" + "'", str27, "default");
    }

    @Test
    public void test02820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02820");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        restAdapter5.log = log15;
        retrofit.RestAdapter.Builder builder17 = builder4.setLog(log15);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder19 = builder4.setLogLevel(logLevel18);
        retrofit.Profiler profiler20 = null;
        builder19.profiler = profiler20;
        retrofit.converter.Converter converter22 = null;
        builder19.converter = converter22;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor25 = restAdapter24.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler26 = restAdapter24.new RestHandler();
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor28 = restAdapter27.callbackExecutor;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor30 = restAdapter29.callbackExecutor;
        java.util.concurrent.Executor executor31 = restAdapter29.callbackExecutor;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler33 = restAdapter32.errorHandler;
        retrofit.Server server36 = new retrofit.Server("", "");
        restAdapter32.server = server36;
        restAdapter29.server = server36;
        restAdapter27.server = server36;
        retrofit.Profiler profiler40 = restAdapter27.profiler;
        retrofit.ErrorHandler errorHandler41 = null;
        restAdapter27.errorHandler = errorHandler41;
        retrofit.Profiler profiler43 = null;
        restAdapter27.profiler = profiler43;
        retrofit.RestAdapter.LogLevel logLevel45 = restAdapter27.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter27.logLevel = logLevel46;
        restAdapter24.logLevel = logLevel46;
        retrofit.RestAdapter.Builder builder49 = builder19.setLogLevel(logLevel46);
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor51 = restAdapter50.callbackExecutor;
        java.util.concurrent.Executor executor52 = restAdapter50.callbackExecutor;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler54 = restAdapter53.errorHandler;
        retrofit.Server server57 = new retrofit.Server("", "");
        restAdapter53.server = server57;
        restAdapter50.server = server57;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor61 = restAdapter60.callbackExecutor;
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor63 = restAdapter62.callbackExecutor;
        java.util.concurrent.Executor executor64 = restAdapter62.callbackExecutor;
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler66 = restAdapter65.errorHandler;
        retrofit.Server server69 = new retrofit.Server("", "");
        restAdapter65.server = server69;
        restAdapter62.server = server69;
        restAdapter60.server = server69;
        retrofit.Profiler profiler73 = restAdapter60.profiler;
        retrofit.ErrorHandler errorHandler74 = null;
        restAdapter60.errorHandler = errorHandler74;
        retrofit.Profiler profiler76 = null;
        restAdapter60.profiler = profiler76;
        retrofit.RestAdapter.LogLevel logLevel78 = restAdapter60.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel79 = restAdapter60.getLogLevel();
        retrofit.client.Client.Provider provider80 = null;
        restAdapter60.clientProvider = provider80;
        retrofit.RestAdapter.LogLevel logLevel82 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean83 = logLevel82.log();
        restAdapter60.logLevel = logLevel82;
        restAdapter50.logLevel = logLevel82;
        retrofit.RestAdapter.Builder builder86 = builder49.setLogLevel(logLevel82);
        retrofit.client.Client client87 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder88 = builder49.setClient(client87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNull(errorHandler33);
        org.junit.Assert.assertNull(profiler40);
        org.junit.Assert.assertNull(logLevel45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(executor51);
        org.junit.Assert.assertNull(executor52);
        org.junit.Assert.assertNull(errorHandler54);
        org.junit.Assert.assertNull(executor61);
        org.junit.Assert.assertNull(executor63);
        org.junit.Assert.assertNull(executor64);
        org.junit.Assert.assertNull(errorHandler66);
        org.junit.Assert.assertNull(profiler73);
        org.junit.Assert.assertNull(logLevel78);
        org.junit.Assert.assertNull(logLevel79);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test02821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02821");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        restAdapter12.log = log14;
        retrofit.converter.Converter converter16 = null;
        restAdapter12.converter = converter16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server21 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder22 = builder18.setServer(server21);
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor24 = restAdapter23.callbackExecutor;
        java.util.concurrent.Executor executor25 = restAdapter23.callbackExecutor;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler27 = restAdapter26.errorHandler;
        retrofit.Server server30 = new retrofit.Server("", "");
        restAdapter26.server = server30;
        restAdapter23.server = server30;
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        restAdapter23.log = log33;
        retrofit.RestAdapter.Builder builder35 = builder22.setLog(log33);
        restAdapter12.log = log33;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler38 = builder37.errorHandler;
        retrofit.ErrorHandler errorHandler39 = builder37.errorHandler;
        retrofit.Profiler profiler40 = builder37.profiler;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler42 = builder41.errorHandler;
        java.util.concurrent.Executor executor43 = null;
        builder41.callbackExecutor = executor43;
        retrofit.converter.Converter converter45 = builder41.converter;
        retrofit.RestAdapter.Builder builder47 = builder41.setServer("hi!");
        builder41.ensureSaneDefaults();
        retrofit.Profiler profiler49 = builder41.profiler;
        retrofit.RequestInterceptor requestInterceptor50 = builder41.requestInterceptor;
        retrofit.RestAdapter.Builder builder51 = builder37.setRequestInterceptor(requestInterceptor50);
        retrofit.RequestInterceptor requestInterceptor52 = builder37.requestInterceptor;
        restAdapter12.requestInterceptor = requestInterceptor52;
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(errorHandler38);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNull(profiler40);
        org.junit.Assert.assertNull(errorHandler42);
        org.junit.Assert.assertNull(converter45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(profiler49);
        org.junit.Assert.assertNotNull(requestInterceptor50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(requestInterceptor52);
    }

    @Test
    public void test02822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02822");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.Server server5 = null;
        retrofit.client.Client.Provider provider6 = null;
        java.util.concurrent.Executor executor7 = null;
        java.util.concurrent.Executor executor8 = null;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        retrofit.converter.Converter converter10 = null;
        retrofit.Profiler profiler11 = null;
        retrofit.ErrorHandler errorHandler12 = null;
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        log13.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server5, provider6, executor7, executor8, requestInterceptor9, converter10, profiler11, errorHandler12, log13, logLevel16);
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter17.new RestHandler();
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        restAdapter17.log = log19;
        retrofit.converter.Converter converter21 = null;
        restAdapter17.converter = converter21;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.Server server26 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder27 = builder23.setServer(server26);
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor29 = restAdapter28.callbackExecutor;
        java.util.concurrent.Executor executor30 = restAdapter28.callbackExecutor;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler32 = restAdapter31.errorHandler;
        retrofit.Server server35 = new retrofit.Server("", "");
        restAdapter31.server = server35;
        restAdapter28.server = server35;
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        restAdapter28.log = log38;
        retrofit.RestAdapter.Builder builder40 = builder27.setLog(log38);
        restAdapter17.log = log38;
        retrofit.RestAdapter.RestHandler restHandler42 = restAdapter17.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel43 = restAdapter17.logLevel;
        retrofit.RestAdapter.Log log44 = restAdapter17.log;
        retrofit.RestAdapter.Builder builder45 = builder0.setLog(log44);
        java.util.concurrent.Executor executor46 = null;
        builder45.callbackExecutor = executor46;
        retrofit.RestAdapter.Builder builder49 = builder45.setServer("hi!");
        retrofit.Profiler profiler50 = builder49.profiler;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log13);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNull(errorHandler32);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(profiler50);
    }

    @Test
    public void test02823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02823");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider5 = builder4.clientProvider;
        java.util.concurrent.Executor executor6 = null;
        builder4.callbackExecutor = executor6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.Server server11 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder12 = builder8.setServer(server11);
        java.lang.String str13 = server11.getUrl();
        retrofit.RestAdapter.Builder builder14 = builder4.setServer(server11);
        retrofit.RestAdapter.Builder builder15 = builder0.setServer(server11);
        retrofit.RestAdapter.Builder builder17 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor18 = builder0.callbackExecutor;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(executor18);
    }

    @Test
    public void test02824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02824");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        java.util.concurrent.Executor executor16 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor17 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor19 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler21 = builder20.errorHandler;
        java.util.concurrent.Executor executor22 = builder20.callbackExecutor;
        retrofit.RestAdapter.Builder builder24 = builder20.setServer("hi!");
        builder24.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler27 = builder26.errorHandler;
        retrofit.ErrorHandler errorHandler28 = builder26.errorHandler;
        retrofit.RestAdapter.Log log29 = null;
        builder26.log = log29;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean32 = logLevel31.log();
        builder26.logLevel = logLevel31;
        retrofit.ErrorHandler errorHandler34 = builder26.errorHandler;
        retrofit.RestAdapter.Builder builder36 = builder26.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor37 = null;
        builder36.requestInterceptor = requestInterceptor37;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler40 = builder39.errorHandler;
        retrofit.client.Client.Provider provider41 = null;
        builder39.clientProvider = provider41;
        retrofit.Server server45 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder46 = builder39.setServer(server45);
        retrofit.client.Client.Provider provider47 = null;
        java.util.concurrent.Executor executor48 = null;
        java.util.concurrent.Executor executor49 = null;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        retrofit.converter.Converter converter51 = null;
        retrofit.Profiler profiler52 = null;
        retrofit.ErrorHandler errorHandler53 = null;
        retrofit.Server server54 = null;
        retrofit.client.Client.Provider provider55 = null;
        java.util.concurrent.Executor executor56 = null;
        java.util.concurrent.Executor executor57 = null;
        retrofit.RequestInterceptor requestInterceptor58 = null;
        retrofit.converter.Converter converter59 = null;
        retrofit.Profiler profiler60 = null;
        retrofit.ErrorHandler errorHandler61 = null;
        retrofit.RestAdapter.Log log62 = retrofit.RestAdapter.Log.NONE;
        log62.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel65 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter(server54, provider55, executor56, executor57, requestInterceptor58, converter59, profiler60, errorHandler61, log62, logLevel65);
        retrofit.RestAdapter.LogLevel logLevel67 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter(server45, provider47, executor48, executor49, requestInterceptor50, converter51, profiler52, errorHandler53, log62, logLevel67);
        log62.log("");
        builder36.log = log62;
        retrofit.RestAdapter.Log log72 = builder36.log;
        retrofit.RestAdapter.Builder builder73 = builder24.setLog(log72);
        java.util.concurrent.Executor executor74 = builder24.callbackExecutor;
        restAdapter0.callbackExecutor = executor74;
        retrofit.ErrorHandler errorHandler76 = null;
        restAdapter0.errorHandler = errorHandler76;
        retrofit.converter.Converter converter78 = restAdapter0.converter;
        retrofit.Server server79 = restAdapter0.server;
        java.lang.String str80 = server79.getName();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(errorHandler34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(executor74);
        org.junit.Assert.assertNull(converter78);
        org.junit.Assert.assertNotNull(server79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
    }

    @Test
    public void test02825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02825");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        java.util.concurrent.Executor executor4 = null;
        builder0.httpExecutor = executor4;
        retrofit.Profiler profiler6 = null;
        builder0.profiler = profiler6;
        retrofit.RestAdapter.Builder builder9 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel10 = builder0.logLevel;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler12 = builder11.errorHandler;
        java.util.concurrent.Executor executor13 = builder11.callbackExecutor;
        retrofit.RestAdapter.Builder builder15 = builder11.setServer("hi!");
        builder15.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler18 = builder17.errorHandler;
        retrofit.ErrorHandler errorHandler19 = builder17.errorHandler;
        retrofit.RestAdapter.Log log20 = null;
        builder17.log = log20;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean23 = logLevel22.log();
        builder17.logLevel = logLevel22;
        retrofit.ErrorHandler errorHandler25 = builder17.errorHandler;
        retrofit.RestAdapter.Builder builder27 = builder17.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor28 = null;
        builder27.requestInterceptor = requestInterceptor28;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler31 = builder30.errorHandler;
        retrofit.client.Client.Provider provider32 = null;
        builder30.clientProvider = provider32;
        retrofit.Server server36 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder37 = builder30.setServer(server36);
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.Server server45 = null;
        retrofit.client.Client.Provider provider46 = null;
        java.util.concurrent.Executor executor47 = null;
        java.util.concurrent.Executor executor48 = null;
        retrofit.RequestInterceptor requestInterceptor49 = null;
        retrofit.converter.Converter converter50 = null;
        retrofit.Profiler profiler51 = null;
        retrofit.ErrorHandler errorHandler52 = null;
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        log53.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter(server45, provider46, executor47, executor48, requestInterceptor49, converter50, profiler51, errorHandler52, log53, logLevel56);
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter(server36, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log53, logLevel58);
        log53.log("");
        builder27.log = log53;
        retrofit.RestAdapter.Log log63 = builder27.log;
        retrofit.RestAdapter.Builder builder64 = builder15.setLog(log63);
        retrofit.RequestInterceptor requestInterceptor65 = builder15.requestInterceptor;
        retrofit.RestAdapter.Builder builder66 = builder0.setRequestInterceptor(requestInterceptor65);
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler68 = builder67.errorHandler;
        retrofit.ErrorHandler errorHandler69 = builder67.errorHandler;
        retrofit.Profiler profiler70 = builder67.profiler;
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor72 = restAdapter71.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler73 = restAdapter71.new RestHandler();
        retrofit.Server server76 = new retrofit.Server("hi!", "hi!");
        restAdapter71.server = server76;
        retrofit.RestAdapter.Builder builder78 = builder67.setServer(server76);
        retrofit.converter.Converter converter79 = null;
        builder78.converter = converter79;
        retrofit.Server server81 = null;
        retrofit.client.Client.Provider provider82 = null;
        java.util.concurrent.Executor executor83 = null;
        java.util.concurrent.Executor executor84 = null;
        retrofit.RequestInterceptor requestInterceptor85 = null;
        retrofit.converter.Converter converter86 = null;
        retrofit.Profiler profiler87 = null;
        retrofit.ErrorHandler errorHandler88 = null;
        retrofit.RestAdapter.Log log89 = retrofit.RestAdapter.Log.NONE;
        log89.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel92 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter93 = new retrofit.RestAdapter(server81, provider82, executor83, executor84, requestInterceptor85, converter86, profiler87, errorHandler88, log89, logLevel92);
        builder78.logLevel = logLevel92;
        builder78.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor96 = builder78.requestInterceptor;
        retrofit.RestAdapter.Builder builder97 = builder66.setRequestInterceptor(requestInterceptor96);
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(errorHandler18);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(errorHandler25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(errorHandler31);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(requestInterceptor65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(errorHandler68);
        org.junit.Assert.assertNull(errorHandler69);
        org.junit.Assert.assertNull(profiler70);
        org.junit.Assert.assertNull(executor72);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(log89);
        org.junit.Assert.assertTrue("'" + logLevel92 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel92.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(requestInterceptor96);
        org.junit.Assert.assertNotNull(builder97);
    }

    @Test
    public void test02826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02826");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.converter.Converter converter4 = builder0.converter;
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler8 = builder7.errorHandler;
        retrofit.Server server11 = new retrofit.Server("", "");
        builder7.server = server11;
        retrofit.RestAdapter restAdapter13 = builder7.build();
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler15 = builder14.errorHandler;
        java.util.concurrent.Executor executor16 = null;
        builder14.callbackExecutor = executor16;
        retrofit.converter.Converter converter18 = builder14.converter;
        retrofit.RestAdapter.Builder builder20 = builder14.setServer("default");
        retrofit.Profiler profiler21 = builder14.profiler;
        retrofit.Server server22 = null;
        retrofit.client.Client.Provider provider23 = null;
        java.util.concurrent.Executor executor24 = null;
        java.util.concurrent.Executor executor25 = null;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        retrofit.converter.Converter converter27 = null;
        retrofit.Profiler profiler28 = null;
        retrofit.ErrorHandler errorHandler29 = null;
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        log30.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server22, provider23, executor24, executor25, requestInterceptor26, converter27, profiler28, errorHandler29, log30, logLevel33);
        retrofit.RestAdapter.RestHandler restHandler35 = restAdapter34.new RestHandler();
        retrofit.client.Header[] headerArray44 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList45 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList45, headerArray44);
        retrofit.mime.TypedOutput typedOutput47 = null;
        retrofit.client.Request request48 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList45, typedOutput47);
        retrofit.mime.TypedOutput typedOutput49 = null;
        retrofit.client.Request request50 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList45, typedOutput49);
        retrofit.mime.TypedOutput typedOutput51 = null;
        retrofit.client.Request request52 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList45, typedOutput51);
        retrofit.mime.TypedOutput typedOutput53 = null;
        retrofit.client.Request request54 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList45, typedOutput53);
        retrofit.mime.TypedOutput typedOutput55 = request54.getBody();
        retrofit.client.Request request56 = restAdapter34.logAndReplaceRequest(request54);
        retrofit.client.Client.Provider provider57 = null;
        restAdapter34.clientProvider = provider57;
        retrofit.RestAdapter.RestHandler restHandler59 = restAdapter34.new RestHandler();
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.Server server63 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder64 = builder60.setServer(server63);
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor66 = restAdapter65.callbackExecutor;
        java.util.concurrent.Executor executor67 = restAdapter65.callbackExecutor;
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler69 = restAdapter68.errorHandler;
        retrofit.Server server72 = new retrofit.Server("", "");
        restAdapter68.server = server72;
        restAdapter65.server = server72;
        retrofit.RestAdapter.Log log75 = retrofit.RestAdapter.Log.NONE;
        restAdapter65.log = log75;
        retrofit.RestAdapter.Builder builder77 = builder64.setLog(log75);
        retrofit.RestAdapter.LogLevel logLevel78 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder79 = builder64.setLogLevel(logLevel78);
        retrofit.Profiler profiler80 = null;
        builder79.profiler = profiler80;
        retrofit.converter.Converter converter82 = null;
        builder79.converter = converter82;
        retrofit.ErrorHandler errorHandler84 = null;
        builder79.errorHandler = errorHandler84;
        retrofit.RestAdapter restAdapter86 = builder79.build();
        retrofit.ErrorHandler errorHandler87 = builder79.errorHandler;
        restAdapter34.errorHandler = errorHandler87;
        builder14.errorHandler = errorHandler87;
        restAdapter13.errorHandler = errorHandler87;
        retrofit.RestAdapter.Builder builder91 = builder6.setErrorHandler(errorHandler87);
        retrofit.converter.Converter converter92 = builder91.converter;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder94 = builder91.setServer("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be blank.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNotNull(restAdapter13);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNull(converter18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(profiler21);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(typedOutput55);
        org.junit.Assert.assertNotNull(request56);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(executor66);
        org.junit.Assert.assertNull(executor67);
        org.junit.Assert.assertNull(errorHandler69);
        org.junit.Assert.assertNotNull(log75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(restAdapter86);
        org.junit.Assert.assertNotNull(errorHandler87);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNull(converter92);
    }

    @Test
    public void test02827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02827");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.converter.Converter converter4 = builder0.converter;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder6 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor8 = restAdapter7.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean10 = logLevel9.log();
        restAdapter7.logLevel = logLevel9;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler13 = builder12.errorHandler;
        retrofit.client.Client.Provider provider14 = null;
        builder12.clientProvider = provider14;
        retrofit.Server server18 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder19 = builder12.setServer(server18);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler21 = builder20.errorHandler;
        retrofit.client.Client.Provider provider22 = null;
        builder20.clientProvider = provider22;
        retrofit.converter.Converter converter24 = builder20.converter;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder26 = builder20.setLogLevel(logLevel25);
        builder12.logLevel = logLevel25;
        boolean boolean28 = logLevel25.log();
        restAdapter7.logLevel = logLevel25;
        retrofit.RestAdapter.Builder builder30 = builder6.setLogLevel(logLevel25);
        builder6.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler33 = builder32.errorHandler;
        retrofit.Server server36 = new retrofit.Server("", "");
        builder32.server = server36;
        retrofit.client.Client.Provider provider38 = builder32.clientProvider;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler40 = builder39.errorHandler;
        retrofit.client.Client.Provider provider41 = null;
        builder39.clientProvider = provider41;
        retrofit.Server server45 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder46 = builder39.setServer(server45);
        retrofit.converter.Converter converter47 = null;
        builder46.converter = converter47;
        retrofit.RestAdapter restAdapter49 = builder46.build();
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler51 = builder50.errorHandler;
        java.util.concurrent.Executor executor52 = null;
        builder50.callbackExecutor = executor52;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider55 = builder54.clientProvider;
        java.util.concurrent.Executor executor56 = null;
        builder54.callbackExecutor = executor56;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.Server server61 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder62 = builder58.setServer(server61);
        java.lang.String str63 = server61.getUrl();
        retrofit.RestAdapter.Builder builder64 = builder54.setServer(server61);
        retrofit.RestAdapter.Builder builder65 = builder50.setServer(server61);
        restAdapter49.server = server61;
        retrofit.Server server67 = restAdapter49.server;
        retrofit.RestAdapter.RestHandler restHandler68 = restAdapter49.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel69 = restAdapter49.getLogLevel();
        retrofit.client.Header[] headerArray72 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList73 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList73, headerArray72);
        retrofit.mime.TypedOutput typedOutput75 = null;
        retrofit.client.Request request76 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList73, typedOutput75);
        java.util.List<retrofit.client.Header> headerList77 = request76.getHeaders();
        java.util.List<retrofit.client.Header> headerList78 = request76.getHeaders();
        retrofit.mime.TypedOutput typedOutput79 = request76.getBody();
        retrofit.client.Request request80 = restAdapter49.logAndReplaceRequest(request76);
        retrofit.RestAdapter.RestHandler restHandler81 = restAdapter49.new RestHandler();
        retrofit.converter.Converter converter82 = restAdapter49.converter;
        builder32.converter = converter82;
        builder6.converter = converter82;
        java.util.concurrent.Executor executor85 = builder6.callbackExecutor;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(converter24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(errorHandler33);
        org.junit.Assert.assertNull(provider38);
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(restAdapter49);
        org.junit.Assert.assertNull(errorHandler51);
        org.junit.Assert.assertNull(provider55);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hi!" + "'", str63, "hi!");
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(server67);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(headerArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(headerList77);
        org.junit.Assert.assertNotNull(headerList78);
        org.junit.Assert.assertNull(typedOutput79);
        org.junit.Assert.assertNotNull(request80);
        org.junit.Assert.assertNotNull(converter82);
        org.junit.Assert.assertNotNull(executor85);
    }

    @Test
    public void test02828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02828");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.Profiler profiler3 = builder0.profiler;
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor5 = restAdapter4.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.Server server9 = new retrofit.Server("hi!", "hi!");
        restAdapter4.server = server9;
        retrofit.RestAdapter.Builder builder11 = builder0.setServer(server9);
        retrofit.client.Client.Provider provider12 = builder11.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel13 = builder11.logLevel;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor15 = restAdapter14.callbackExecutor;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor17 = restAdapter16.callbackExecutor;
        java.util.concurrent.Executor executor18 = restAdapter16.callbackExecutor;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler20 = restAdapter19.errorHandler;
        retrofit.Server server23 = new retrofit.Server("", "");
        restAdapter19.server = server23;
        restAdapter16.server = server23;
        restAdapter14.server = server23;
        retrofit.Profiler profiler27 = restAdapter14.profiler;
        retrofit.ErrorHandler errorHandler28 = null;
        restAdapter14.errorHandler = errorHandler28;
        retrofit.Profiler profiler30 = null;
        restAdapter14.profiler = profiler30;
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter14.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter14.logLevel = logLevel33;
        builder11.logLevel = logLevel33;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler37 = builder36.errorHandler;
        retrofit.Server server40 = new retrofit.Server("", "");
        builder36.server = server40;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor43 = restAdapter42.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler44 = restAdapter42.new RestHandler();
        retrofit.Server server47 = new retrofit.Server("hi!", "hi!");
        restAdapter42.server = server47;
        retrofit.RestAdapter.Builder builder49 = builder36.setServer(server47);
        retrofit.RestAdapter.Log log50 = builder36.log;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler52 = null;
        builder51.errorHandler = errorHandler52;
        retrofit.converter.Converter converter54 = builder51.converter;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.Server server58 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder59 = builder55.setServer(server58);
        retrofit.converter.Converter converter60 = builder55.converter;
        retrofit.RequestInterceptor requestInterceptor61 = builder55.requestInterceptor;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider63 = builder62.clientProvider;
        java.util.concurrent.Executor executor64 = null;
        builder62.callbackExecutor = executor64;
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        retrofit.Server server69 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder70 = builder66.setServer(server69);
        java.lang.String str71 = server69.getUrl();
        retrofit.RestAdapter.Builder builder72 = builder62.setServer(server69);
        builder62.ensureSaneDefaults();
        retrofit.Server server74 = null;
        retrofit.client.Client.Provider provider75 = null;
        java.util.concurrent.Executor executor76 = null;
        java.util.concurrent.Executor executor77 = null;
        retrofit.RequestInterceptor requestInterceptor78 = null;
        retrofit.converter.Converter converter79 = null;
        retrofit.Profiler profiler80 = null;
        retrofit.ErrorHandler errorHandler81 = null;
        retrofit.RestAdapter.Log log82 = retrofit.RestAdapter.Log.NONE;
        log82.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel85 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter86 = new retrofit.RestAdapter(server74, provider75, executor76, executor77, requestInterceptor78, converter79, profiler80, errorHandler81, log82, logLevel85);
        retrofit.RestAdapter.RestHandler restHandler87 = restAdapter86.new RestHandler();
        retrofit.RestAdapter.Log log88 = retrofit.RestAdapter.Log.NONE;
        restAdapter86.log = log88;
        retrofit.RestAdapter.Builder builder90 = builder62.setLog(log88);
        retrofit.RestAdapter.Builder builder92 = builder62.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor93 = builder62.requestInterceptor;
        builder55.requestInterceptor = requestInterceptor93;
        builder51.requestInterceptor = requestInterceptor93;
        builder36.requestInterceptor = requestInterceptor93;
        retrofit.RestAdapter.Builder builder97 = builder11.setRequestInterceptor(requestInterceptor93);
        retrofit.Profiler profiler98 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder99 = builder97.setProfiler(profiler98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNull(profiler27);
        org.junit.Assert.assertNull(logLevel32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNull(executor43);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(log50);
        org.junit.Assert.assertNull(converter54);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(converter60);
        org.junit.Assert.assertNull(requestInterceptor61);
        org.junit.Assert.assertNull(provider63);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(log82);
        org.junit.Assert.assertTrue("'" + logLevel85 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel85.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(requestInterceptor93);
        org.junit.Assert.assertNotNull(builder97);
    }

    @Test
    public void test02829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02829");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = builder2.errorHandler;
        retrofit.ErrorHandler errorHandler4 = builder2.errorHandler;
        retrofit.RestAdapter.Log log5 = null;
        builder2.log = log5;
        retrofit.RequestInterceptor requestInterceptor7 = null;
        builder2.requestInterceptor = requestInterceptor7;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor10 = restAdapter9.callbackExecutor;
        java.util.concurrent.Executor executor11 = restAdapter9.callbackExecutor;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler13 = restAdapter12.errorHandler;
        retrofit.Server server16 = new retrofit.Server("", "");
        restAdapter12.server = server16;
        restAdapter9.server = server16;
        retrofit.RestAdapter.Builder builder19 = builder2.setServer(server16);
        retrofit.RequestInterceptor requestInterceptor20 = null;
        builder2.requestInterceptor = requestInterceptor20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler23 = builder22.errorHandler;
        retrofit.ErrorHandler errorHandler24 = builder22.errorHandler;
        retrofit.RestAdapter.Log log25 = null;
        builder22.log = log25;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean28 = logLevel27.log();
        builder22.logLevel = logLevel27;
        retrofit.RestAdapter.Builder builder30 = builder2.setLogLevel(logLevel27);
        builder0.logLevel = logLevel27;
        retrofit.ErrorHandler errorHandler32 = builder0.errorHandler;
        retrofit.RestAdapter.Log log33 = builder0.log;
        retrofit.converter.Converter converter34 = builder0.converter;
        retrofit.RestAdapter.LogLevel logLevel35 = builder0.logLevel;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNull(errorHandler4);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(errorHandler32);
        org.junit.Assert.assertNull(log33);
        org.junit.Assert.assertNull(converter34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test02830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02830");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server4 = new retrofit.Server("", "");
        builder0.server = server4;
        java.util.concurrent.Executor executor6 = builder0.callbackExecutor;
        retrofit.Server server7 = null;
        builder0.server = server7;
        retrofit.RequestInterceptor requestInterceptor9 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler11 = builder10.errorHandler;
        retrofit.ErrorHandler errorHandler12 = builder10.errorHandler;
        retrofit.RestAdapter.Log log13 = null;
        builder10.log = log13;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        builder10.requestInterceptor = requestInterceptor15;
        retrofit.client.Client.Provider provider17 = null;
        builder10.clientProvider = provider17;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor20 = restAdapter19.callbackExecutor;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor22 = restAdapter21.callbackExecutor;
        java.util.concurrent.Executor executor23 = restAdapter21.callbackExecutor;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler25 = restAdapter24.errorHandler;
        retrofit.Server server28 = new retrofit.Server("", "");
        restAdapter24.server = server28;
        restAdapter21.server = server28;
        restAdapter19.server = server28;
        retrofit.Profiler profiler32 = restAdapter19.profiler;
        retrofit.ErrorHandler errorHandler33 = null;
        restAdapter19.errorHandler = errorHandler33;
        retrofit.RequestInterceptor requestInterceptor35 = restAdapter19.requestInterceptor;
        retrofit.ErrorHandler errorHandler36 = restAdapter19.errorHandler;
        java.util.concurrent.Executor executor37 = null;
        restAdapter19.callbackExecutor = executor37;
        java.util.concurrent.Executor executor39 = restAdapter19.httpExecutor;
        retrofit.client.Client.Provider provider40 = restAdapter19.clientProvider;
        retrofit.converter.Converter converter41 = restAdapter19.converter;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler43 = builder42.errorHandler;
        retrofit.Server server46 = new retrofit.Server("", "");
        builder42.server = server46;
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        builder42.log = log48;
        retrofit.RequestInterceptor requestInterceptor50 = builder42.requestInterceptor;
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        log51.log("hi!");
        log51.log("hi!");
        builder42.log = log51;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider58 = builder57.clientProvider;
        java.util.concurrent.Executor executor59 = null;
        builder57.callbackExecutor = executor59;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.Server server64 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder65 = builder61.setServer(server64);
        java.lang.String str66 = server64.getUrl();
        retrofit.RestAdapter.Builder builder67 = builder57.setServer(server64);
        builder57.ensureSaneDefaults();
        retrofit.Server server69 = null;
        retrofit.client.Client.Provider provider70 = null;
        java.util.concurrent.Executor executor71 = null;
        java.util.concurrent.Executor executor72 = null;
        retrofit.RequestInterceptor requestInterceptor73 = null;
        retrofit.converter.Converter converter74 = null;
        retrofit.Profiler profiler75 = null;
        retrofit.ErrorHandler errorHandler76 = null;
        retrofit.RestAdapter.Log log77 = retrofit.RestAdapter.Log.NONE;
        log77.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel80 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter81 = new retrofit.RestAdapter(server69, provider70, executor71, executor72, requestInterceptor73, converter74, profiler75, errorHandler76, log77, logLevel80);
        retrofit.RestAdapter.RestHandler restHandler82 = restAdapter81.new RestHandler();
        retrofit.RestAdapter.Log log83 = retrofit.RestAdapter.Log.NONE;
        restAdapter81.log = log83;
        retrofit.RestAdapter.Builder builder85 = builder57.setLog(log83);
        retrofit.RestAdapter.LogLevel logLevel86 = builder57.logLevel;
        boolean boolean87 = logLevel86.log();
        retrofit.RestAdapter.Builder builder88 = builder42.setLogLevel(logLevel86);
        retrofit.RestAdapter.Builder builder89 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider90 = builder89.clientProvider;
        retrofit.RestAdapter.Builder builder92 = builder89.setServer("default");
        retrofit.RestAdapter restAdapter93 = builder89.build();
        retrofit.client.Client.Provider provider94 = restAdapter93.clientProvider;
        retrofit.RestAdapter.Builder builder95 = builder88.setClient(provider94);
        restAdapter19.clientProvider = provider94;
        retrofit.RestAdapter.Builder builder97 = builder10.setClient(provider94);
        retrofit.RestAdapter.Builder builder98 = builder0.setClient(provider94);
        retrofit.Profiler profiler99 = builder0.profiler;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(requestInterceptor9);
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNull(errorHandler25);
        org.junit.Assert.assertNull(profiler32);
        org.junit.Assert.assertNull(requestInterceptor35);
        org.junit.Assert.assertNull(errorHandler36);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNull(provider40);
        org.junit.Assert.assertNull(converter41);
        org.junit.Assert.assertNull(errorHandler43);
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertNull(requestInterceptor50);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNull(provider58);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hi!" + "'", str66, "hi!");
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(log77);
        org.junit.Assert.assertTrue("'" + logLevel80 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel80.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertTrue("'" + logLevel86 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel86.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNull(provider90);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(restAdapter93);
        org.junit.Assert.assertNotNull(provider94);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertNotNull(builder98);
        org.junit.Assert.assertNull(profiler99);
    }

    @Test
    public void test02831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02831");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.Server server7 = new retrofit.Server("default", "hi!");
        java.lang.String str8 = server7.getUrl();
        retrofit.RestAdapter.Builder builder9 = builder4.setServer(server7);
        retrofit.Server server10 = null;
        retrofit.client.Client.Provider provider11 = null;
        java.util.concurrent.Executor executor12 = null;
        java.util.concurrent.Executor executor13 = null;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        retrofit.converter.Converter converter15 = null;
        retrofit.Profiler profiler16 = null;
        retrofit.ErrorHandler errorHandler17 = null;
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        log18.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter(server10, provider11, executor12, executor13, requestInterceptor14, converter15, profiler16, errorHandler17, log18, logLevel21);
        retrofit.RestAdapter.RestHandler restHandler23 = restAdapter22.new RestHandler();
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        restAdapter22.log = log24;
        retrofit.converter.Converter converter26 = null;
        restAdapter22.converter = converter26;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.Server server31 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder32 = builder28.setServer(server31);
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor34 = restAdapter33.callbackExecutor;
        java.util.concurrent.Executor executor35 = restAdapter33.callbackExecutor;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler37 = restAdapter36.errorHandler;
        retrofit.Server server40 = new retrofit.Server("", "");
        restAdapter36.server = server40;
        restAdapter33.server = server40;
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        restAdapter33.log = log43;
        retrofit.RestAdapter.Builder builder45 = builder32.setLog(log43);
        restAdapter22.log = log43;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler48 = builder47.errorHandler;
        retrofit.Server server51 = new retrofit.Server("", "");
        builder47.server = server51;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor54 = restAdapter53.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler55 = restAdapter53.new RestHandler();
        retrofit.Server server58 = new retrofit.Server("hi!", "hi!");
        restAdapter53.server = server58;
        retrofit.RestAdapter.Builder builder60 = builder47.setServer(server58);
        restAdapter22.server = server58;
        retrofit.Profiler profiler62 = restAdapter22.profiler;
        retrofit.Server server63 = restAdapter22.server;
        java.lang.String str64 = server63.getUrl();
        retrofit.RestAdapter.Builder builder65 = builder4.setServer(server63);
        retrofit.Profiler profiler66 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder67 = builder65.setProfiler(profiler66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "default" + "'", str8, "default");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(log18);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log24);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(executor34);
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(errorHandler48);
        org.junit.Assert.assertNull(executor54);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(profiler62);
        org.junit.Assert.assertNotNull(server63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hi!" + "'", str64, "hi!");
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test02832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02832");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.converter.Converter converter2 = null;
        restAdapter0.converter = converter2;
        retrofit.ErrorHandler errorHandler4 = restAdapter0.errorHandler;
        retrofit.Profiler profiler5 = null;
        restAdapter0.profiler = profiler5;
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler9 = builder8.errorHandler;
        java.util.concurrent.Executor executor10 = builder8.callbackExecutor;
        retrofit.RestAdapter.Builder builder12 = builder8.setServer("hi!");
        builder12.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler15 = builder14.errorHandler;
        retrofit.Server server18 = new retrofit.Server("", "");
        builder14.server = server18;
        java.util.concurrent.Executor executor20 = builder14.callbackExecutor;
        retrofit.Server server21 = null;
        builder14.server = server21;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.NONE;
        builder14.logLevel = logLevel23;
        retrofit.RestAdapter.Builder builder25 = builder12.setLogLevel(logLevel23);
        retrofit.RestAdapter.Log log26 = builder25.log;
        restAdapter0.log = log26;
        log26.log("hi!");
        log26.log("hi!");
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(errorHandler4);
        org.junit.Assert.assertNull(logLevel7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(log26);
    }

    @Test
    public void test02833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02833");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        restAdapter12.log = log14;
        retrofit.converter.Converter converter16 = null;
        restAdapter12.converter = converter16;
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter12.new RestHandler();
        java.util.concurrent.Executor executor19 = restAdapter12.httpExecutor;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler21 = null;
        builder20.errorHandler = errorHandler21;
        retrofit.ErrorHandler errorHandler23 = builder20.errorHandler;
        retrofit.RestAdapter.Builder builder25 = builder20.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel26 = builder20.logLevel;
        restAdapter12.logLevel = logLevel26;
        retrofit.client.Response response29 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response31 = restAdapter12.logAndReplaceResponse("default", response29, (long) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test02834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02834");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean3 = logLevel2.log();
        restAdapter0.logLevel = logLevel2;
        retrofit.Profiler profiler5 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor7 = null;
        restAdapter0.httpExecutor = executor7;
        retrofit.RestAdapter.RestHandler restHandler9 = restAdapter0.new RestHandler();
        java.lang.Throwable throwable10 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable10, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(profiler5);
    }

    @Test
    public void test02835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02835");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel3 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler4 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler6 = builder5.errorHandler;
        retrofit.ErrorHandler errorHandler7 = builder5.errorHandler;
        retrofit.converter.Converter converter8 = null;
        builder5.converter = converter8;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler11 = builder10.errorHandler;
        retrofit.ErrorHandler errorHandler12 = builder10.errorHandler;
        retrofit.RestAdapter.Log log13 = null;
        builder10.log = log13;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        builder10.requestInterceptor = requestInterceptor15;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor18 = restAdapter17.callbackExecutor;
        java.util.concurrent.Executor executor19 = restAdapter17.callbackExecutor;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler21 = restAdapter20.errorHandler;
        retrofit.Server server24 = new retrofit.Server("", "");
        restAdapter20.server = server24;
        restAdapter17.server = server24;
        retrofit.RestAdapter.Builder builder27 = builder10.setServer(server24);
        retrofit.RequestInterceptor requestInterceptor28 = null;
        builder10.requestInterceptor = requestInterceptor28;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor31 = restAdapter30.callbackExecutor;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor33 = restAdapter32.callbackExecutor;
        java.util.concurrent.Executor executor34 = restAdapter32.callbackExecutor;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler36 = restAdapter35.errorHandler;
        retrofit.Server server39 = new retrofit.Server("", "");
        restAdapter35.server = server39;
        restAdapter32.server = server39;
        restAdapter30.server = server39;
        retrofit.Profiler profiler43 = restAdapter30.profiler;
        retrofit.ErrorHandler errorHandler44 = null;
        restAdapter30.errorHandler = errorHandler44;
        retrofit.Profiler profiler46 = null;
        restAdapter30.profiler = profiler46;
        java.util.concurrent.Executor executor48 = null;
        restAdapter30.httpExecutor = executor48;
        retrofit.RestAdapter.LogLevel logLevel50 = restAdapter30.logLevel;
        retrofit.converter.Converter converter51 = restAdapter30.converter;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler53 = builder52.errorHandler;
        retrofit.ErrorHandler errorHandler54 = builder52.errorHandler;
        java.util.concurrent.Executor executor55 = builder52.callbackExecutor;
        java.util.concurrent.Executor executor56 = null;
        builder52.callbackExecutor = executor56;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler59 = builder58.errorHandler;
        retrofit.Server server62 = new retrofit.Server("", "");
        builder58.server = server62;
        retrofit.RestAdapter.Log log64 = retrofit.RestAdapter.Log.NONE;
        builder58.log = log64;
        retrofit.RestAdapter.LogLevel logLevel66 = builder58.logLevel;
        retrofit.RestAdapter.Builder builder67 = builder52.setLogLevel(logLevel66);
        restAdapter30.logLevel = logLevel66;
        retrofit.RestAdapter.Builder builder69 = builder10.setLogLevel(logLevel66);
        retrofit.RestAdapter.Builder builder70 = builder5.setLogLevel(logLevel66);
        restAdapter0.logLevel = logLevel66;
        retrofit.converter.Converter converter72 = restAdapter0.converter;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(logLevel3);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertNull(executor34);
        org.junit.Assert.assertNull(errorHandler36);
        org.junit.Assert.assertNull(profiler43);
        org.junit.Assert.assertNull(logLevel50);
        org.junit.Assert.assertNull(converter51);
        org.junit.Assert.assertNull(errorHandler53);
        org.junit.Assert.assertNull(errorHandler54);
        org.junit.Assert.assertNull(executor55);
        org.junit.Assert.assertNull(errorHandler59);
        org.junit.Assert.assertNotNull(log64);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(converter72);
    }

    @Test
    public void test02836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02836");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.client.Client.Provider provider2 = restAdapter0.clientProvider;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler4 = builder3.errorHandler;
        retrofit.Server server7 = new retrofit.Server("", "");
        builder3.server = server7;
        retrofit.RestAdapter.Log log9 = retrofit.RestAdapter.Log.NONE;
        builder3.log = log9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler12 = builder11.errorHandler;
        retrofit.client.Client.Provider provider13 = null;
        builder11.clientProvider = provider13;
        retrofit.Server server17 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder18 = builder11.setServer(server17);
        retrofit.converter.Converter converter19 = null;
        builder18.converter = converter19;
        retrofit.RestAdapter restAdapter21 = builder18.build();
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler23 = builder22.errorHandler;
        java.util.concurrent.Executor executor24 = null;
        builder22.callbackExecutor = executor24;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider27 = builder26.clientProvider;
        java.util.concurrent.Executor executor28 = null;
        builder26.callbackExecutor = executor28;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.Server server33 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder34 = builder30.setServer(server33);
        java.lang.String str35 = server33.getUrl();
        retrofit.RestAdapter.Builder builder36 = builder26.setServer(server33);
        retrofit.RestAdapter.Builder builder37 = builder22.setServer(server33);
        restAdapter21.server = server33;
        java.util.concurrent.Executor executor39 = restAdapter21.httpExecutor;
        builder3.httpExecutor = executor39;
        restAdapter0.callbackExecutor = executor39;
        retrofit.converter.Converter converter42 = restAdapter0.converter;
        retrofit.RestAdapter.RestHandler restHandler43 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(provider2);
        org.junit.Assert.assertNull(errorHandler4);
        org.junit.Assert.assertNotNull(log9);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(restAdapter21);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNull(provider27);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(executor39);
        org.junit.Assert.assertNull(converter42);
    }

    @Test
    public void test02837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02837");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.Server server7 = new retrofit.Server("default", "hi!");
        java.lang.String str8 = server7.getUrl();
        retrofit.RestAdapter.Builder builder9 = builder4.setServer(server7);
        retrofit.RestAdapter.LogLevel logLevel10 = builder9.logLevel;
        retrofit.ErrorHandler errorHandler11 = builder9.errorHandler;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler13 = builder12.errorHandler;
        java.util.concurrent.Executor executor14 = builder12.callbackExecutor;
        retrofit.RestAdapter.Builder builder16 = builder12.setServer("hi!");
        retrofit.Server server19 = new retrofit.Server("default", "hi!");
        java.lang.String str20 = server19.getUrl();
        retrofit.RestAdapter.Builder builder21 = builder16.setServer(server19);
        builder9.server = server19;
        retrofit.Server server23 = builder9.server;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor25 = restAdapter24.callbackExecutor;
        retrofit.converter.Converter converter26 = null;
        restAdapter24.converter = converter26;
        retrofit.ErrorHandler errorHandler28 = restAdapter24.errorHandler;
        retrofit.Profiler profiler29 = null;
        restAdapter24.profiler = profiler29;
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter24.getLogLevel();
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler33 = builder32.errorHandler;
        java.util.concurrent.Executor executor34 = builder32.callbackExecutor;
        retrofit.RestAdapter.Builder builder36 = builder32.setServer("hi!");
        builder36.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler39 = builder38.errorHandler;
        retrofit.Server server42 = new retrofit.Server("", "");
        builder38.server = server42;
        java.util.concurrent.Executor executor44 = builder38.callbackExecutor;
        retrofit.Server server45 = null;
        builder38.server = server45;
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.NONE;
        builder38.logLevel = logLevel47;
        retrofit.RestAdapter.Builder builder49 = builder36.setLogLevel(logLevel47);
        retrofit.RestAdapter.Log log50 = builder49.log;
        restAdapter24.log = log50;
        log50.log("hi!");
        log50.log("default");
        builder9.log = log50;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "default" + "'", str8, "default");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "default" + "'", str20, "default");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(server23);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertNull(logLevel31);
        org.junit.Assert.assertNull(errorHandler33);
        org.junit.Assert.assertNull(executor34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNull(executor44);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(log50);
    }

    @Test
    public void test02838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02838");
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        log14.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel17);
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter18.new RestHandler();
        retrofit.client.Header[] headerArray28 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList29 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList29, headerArray28);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList29, typedOutput31);
        retrofit.mime.TypedOutput typedOutput33 = null;
        retrofit.client.Request request34 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList29, typedOutput33);
        retrofit.mime.TypedOutput typedOutput35 = null;
        retrofit.client.Request request36 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList29, typedOutput35);
        retrofit.mime.TypedOutput typedOutput37 = null;
        retrofit.client.Request request38 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList29, typedOutput37);
        retrofit.mime.TypedOutput typedOutput39 = request38.getBody();
        retrofit.client.Request request40 = restAdapter18.logAndReplaceRequest(request38);
        retrofit.mime.TypedOutput typedOutput41 = request38.getBody();
        retrofit.mime.TypedOutput typedOutput42 = request38.getBody();
        java.util.List<retrofit.client.Header> headerList43 = request38.getHeaders();
        java.util.List<retrofit.client.Header> headerList44 = request38.getHeaders();
        retrofit.mime.TypedOutput typedOutput45 = null;
        retrofit.client.Request request46 = new retrofit.client.Request("default", "hi!", headerList44, typedOutput45);
        retrofit.mime.TypedOutput typedOutput47 = null;
        retrofit.client.Request request48 = new retrofit.client.Request("default", "hi!", headerList44, typedOutput47);
        retrofit.mime.TypedOutput typedOutput49 = null;
        retrofit.client.Request request50 = new retrofit.client.Request("", "", headerList44, typedOutput49);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(typedOutput39);
        org.junit.Assert.assertNotNull(request40);
        org.junit.Assert.assertNull(typedOutput41);
        org.junit.Assert.assertNull(typedOutput42);
        org.junit.Assert.assertNotNull(headerList43);
        org.junit.Assert.assertNotNull(headerList44);
    }

    @Test
    public void test02839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02839");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = builder0.clientProvider;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server7 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder8 = builder4.setServer(server7);
        java.lang.String str9 = server7.getUrl();
        retrofit.RestAdapter.Builder builder10 = builder0.setServer(server7);
        builder0.ensureSaneDefaults();
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        log20.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel23);
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter24.new RestHandler();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        restAdapter24.log = log26;
        retrofit.RestAdapter.Builder builder28 = builder0.setLog(log26);
        retrofit.RestAdapter.Builder builder30 = builder0.setServer("hi!");
        retrofit.Profiler profiler31 = null;
        builder30.profiler = profiler31;
        retrofit.Profiler profiler33 = null;
        builder30.profiler = profiler33;
        retrofit.Profiler profiler35 = builder30.profiler;
        org.junit.Assert.assertNull(provider1);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(profiler35);
    }

    @Test
    public void test02840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02840");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.converter.Converter converter4 = builder0.converter;
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("default");
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler8 = builder7.errorHandler;
        retrofit.client.Client.Provider provider9 = null;
        builder7.clientProvider = provider9;
        retrofit.Server server13 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder14 = builder7.setServer(server13);
        retrofit.converter.Converter converter15 = null;
        builder14.converter = converter15;
        retrofit.RestAdapter restAdapter17 = builder14.build();
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler19 = builder18.errorHandler;
        java.util.concurrent.Executor executor20 = null;
        builder18.callbackExecutor = executor20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider23 = builder22.clientProvider;
        java.util.concurrent.Executor executor24 = null;
        builder22.callbackExecutor = executor24;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.Server server29 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder30 = builder26.setServer(server29);
        java.lang.String str31 = server29.getUrl();
        retrofit.RestAdapter.Builder builder32 = builder22.setServer(server29);
        retrofit.RestAdapter.Builder builder33 = builder18.setServer(server29);
        restAdapter17.server = server29;
        retrofit.client.Client.Provider provider35 = restAdapter17.clientProvider;
        builder6.clientProvider = provider35;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler38 = builder37.errorHandler;
        retrofit.ErrorHandler errorHandler39 = builder37.errorHandler;
        retrofit.Profiler profiler40 = builder37.profiler;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor42 = restAdapter41.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler43 = restAdapter41.new RestHandler();
        retrofit.Server server46 = new retrofit.Server("hi!", "hi!");
        restAdapter41.server = server46;
        retrofit.RestAdapter.Builder builder48 = builder37.setServer(server46);
        retrofit.converter.Converter converter49 = null;
        builder48.converter = converter49;
        builder48.ensureSaneDefaults();
        retrofit.RestAdapter.Log log52 = null;
        builder48.log = log52;
        retrofit.RequestInterceptor requestInterceptor54 = builder48.requestInterceptor;
        retrofit.RestAdapter.Builder builder55 = builder6.setRequestInterceptor(requestInterceptor54);
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.Server server59 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder60 = builder56.setServer(server59);
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor62 = restAdapter61.callbackExecutor;
        java.util.concurrent.Executor executor63 = restAdapter61.callbackExecutor;
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler65 = restAdapter64.errorHandler;
        retrofit.Server server68 = new retrofit.Server("", "");
        restAdapter64.server = server68;
        restAdapter61.server = server68;
        retrofit.RestAdapter.Log log71 = retrofit.RestAdapter.Log.NONE;
        restAdapter61.log = log71;
        retrofit.RestAdapter.Builder builder73 = builder60.setLog(log71);
        retrofit.RestAdapter.Builder builder75 = builder60.setServer("hi!");
        retrofit.RestAdapter.Log log76 = builder75.log;
        builder55.log = log76;
        log76.log("hi!");
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(restAdapter17);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(provider23);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(provider35);
        org.junit.Assert.assertNull(errorHandler38);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNull(profiler40);
        org.junit.Assert.assertNull(executor42);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(requestInterceptor54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(executor62);
        org.junit.Assert.assertNull(executor63);
        org.junit.Assert.assertNull(errorHandler65);
        org.junit.Assert.assertNotNull(log71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(log76);
    }

    @Test
    public void test02841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02841");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.Profiler profiler3 = builder0.profiler;
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor5 = restAdapter4.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.Server server9 = new retrofit.Server("hi!", "hi!");
        restAdapter4.server = server9;
        retrofit.RestAdapter.Builder builder11 = builder0.setServer(server9);
        retrofit.converter.Converter converter12 = null;
        builder11.converter = converter12;
        builder11.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder11.log = log15;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler18 = builder17.errorHandler;
        retrofit.ErrorHandler errorHandler19 = builder17.errorHandler;
        retrofit.RestAdapter.Log log20 = null;
        builder17.log = log20;
        retrofit.Server server24 = new retrofit.Server("hi!", "hi!");
        builder17.server = server24;
        retrofit.client.Client.Provider provider26 = null;
        builder17.clientProvider = provider26;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor29 = restAdapter28.callbackExecutor;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor31 = restAdapter30.callbackExecutor;
        java.util.concurrent.Executor executor32 = restAdapter30.callbackExecutor;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler34 = restAdapter33.errorHandler;
        retrofit.Server server37 = new retrofit.Server("", "");
        restAdapter33.server = server37;
        restAdapter30.server = server37;
        restAdapter28.server = server37;
        retrofit.Profiler profiler41 = restAdapter28.profiler;
        retrofit.ErrorHandler errorHandler42 = null;
        restAdapter28.errorHandler = errorHandler42;
        retrofit.RequestInterceptor requestInterceptor44 = restAdapter28.requestInterceptor;
        retrofit.RestAdapter.RestHandler restHandler45 = restAdapter28.new RestHandler();
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler47 = builder46.errorHandler;
        retrofit.client.Client.Provider provider48 = null;
        builder46.clientProvider = provider48;
        retrofit.Server server52 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder53 = builder46.setServer(server52);
        retrofit.converter.Converter converter54 = null;
        builder53.converter = converter54;
        retrofit.RestAdapter restAdapter56 = builder53.build();
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler58 = builder57.errorHandler;
        java.util.concurrent.Executor executor59 = null;
        builder57.callbackExecutor = executor59;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider62 = builder61.clientProvider;
        java.util.concurrent.Executor executor63 = null;
        builder61.callbackExecutor = executor63;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.Server server68 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder69 = builder65.setServer(server68);
        java.lang.String str70 = server68.getUrl();
        retrofit.RestAdapter.Builder builder71 = builder61.setServer(server68);
        retrofit.RestAdapter.Builder builder72 = builder57.setServer(server68);
        restAdapter56.server = server68;
        java.util.concurrent.Executor executor74 = restAdapter56.httpExecutor;
        restAdapter28.httpExecutor = executor74;
        builder17.httpExecutor = executor74;
        builder11.callbackExecutor = executor74;
        retrofit.RestAdapter.Log log78 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder79 = builder11.setLog(log78);
        retrofit.RequestInterceptor requestInterceptor80 = builder79.requestInterceptor;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(errorHandler18);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(errorHandler34);
        org.junit.Assert.assertNull(profiler41);
        org.junit.Assert.assertNull(requestInterceptor44);
        org.junit.Assert.assertNull(errorHandler47);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(restAdapter56);
        org.junit.Assert.assertNull(errorHandler58);
        org.junit.Assert.assertNull(provider62);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hi!" + "'", str70, "hi!");
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(executor74);
        org.junit.Assert.assertNotNull(log78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(requestInterceptor80);
    }

    @Test
    public void test02842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02842");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        java.util.concurrent.Executor executor19 = null;
        restAdapter0.callbackExecutor = executor19;
        retrofit.ErrorHandler errorHandler21 = null;
        restAdapter0.errorHandler = errorHandler21;
        java.util.concurrent.Executor executor23 = restAdapter0.httpExecutor;
        retrofit.client.Client.Provider provider24 = restAdapter0.clientProvider;
        retrofit.converter.Converter converter25 = restAdapter0.converter;
        retrofit.Profiler profiler26 = null;
        restAdapter0.profiler = profiler26;
        java.lang.Throwable throwable28 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable28, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNull(provider24);
        org.junit.Assert.assertNull(converter25);
    }

    @Test
    public void test02843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02843");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        restAdapter12.log = log14;
        retrofit.converter.Converter converter16 = null;
        restAdapter12.converter = converter16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server21 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder22 = builder18.setServer(server21);
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor24 = restAdapter23.callbackExecutor;
        java.util.concurrent.Executor executor25 = restAdapter23.callbackExecutor;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler27 = restAdapter26.errorHandler;
        retrofit.Server server30 = new retrofit.Server("", "");
        restAdapter26.server = server30;
        restAdapter23.server = server30;
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        restAdapter23.log = log33;
        retrofit.RestAdapter.Builder builder35 = builder22.setLog(log33);
        restAdapter12.log = log33;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler38 = builder37.errorHandler;
        retrofit.Server server41 = new retrofit.Server("", "");
        builder37.server = server41;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor44 = restAdapter43.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler45 = restAdapter43.new RestHandler();
        retrofit.Server server48 = new retrofit.Server("hi!", "hi!");
        restAdapter43.server = server48;
        retrofit.RestAdapter.Builder builder50 = builder37.setServer(server48);
        restAdapter12.server = server48;
        retrofit.Profiler profiler52 = restAdapter12.profiler;
        retrofit.Server server53 = restAdapter12.server;
        java.lang.String str54 = server53.getUrl();
        java.lang.String str55 = server53.getName();
        java.lang.String str56 = server53.getName();
        java.lang.String str57 = server53.getUrl();
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(errorHandler38);
        org.junit.Assert.assertNull(executor44);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(profiler52);
        org.junit.Assert.assertNotNull(server53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
    }

    @Test
    public void test02844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02844");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter0.requestInterceptor;
        retrofit.ErrorHandler errorHandler17 = restAdapter0.errorHandler;
        java.util.concurrent.Executor executor18 = null;
        restAdapter0.callbackExecutor = executor18;
        java.util.concurrent.Executor executor20 = restAdapter0.httpExecutor;
        retrofit.client.Client.Provider provider21 = restAdapter0.clientProvider;
        retrofit.RestAdapter.RestHandler restHandler22 = restAdapter0.new RestHandler();
        retrofit.client.Client.Provider provider23 = restAdapter0.clientProvider;
        retrofit.client.Client.Provider provider24 = restAdapter0.clientProvider;
        retrofit.converter.Converter converter25 = null;
        restAdapter0.converter = converter25;
        retrofit.RestAdapter.LogLevel logLevel27 = restAdapter0.getLogLevel();
        retrofit.client.Header[] headerArray42 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList43 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList43, headerArray42);
        retrofit.mime.TypedOutput typedOutput45 = null;
        retrofit.client.Request request46 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList43, typedOutput45);
        retrofit.mime.TypedOutput typedOutput47 = null;
        retrofit.client.Request request48 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList43, typedOutput47);
        retrofit.mime.TypedOutput typedOutput49 = null;
        retrofit.client.Request request50 = new retrofit.client.Request("default", "", (java.util.List<retrofit.client.Header>) headerList43, typedOutput49);
        retrofit.mime.TypedOutput typedOutput51 = null;
        retrofit.client.Request request52 = new retrofit.client.Request("default", "", (java.util.List<retrofit.client.Header>) headerList43, typedOutput51);
        java.util.List<retrofit.client.Header> headerList53 = request52.getHeaders();
        retrofit.mime.TypedOutput typedOutput54 = null;
        retrofit.client.Request request55 = new retrofit.client.Request("", "", headerList53, typedOutput54);
        retrofit.mime.TypedOutput typedOutput56 = null;
        retrofit.client.Request request57 = new retrofit.client.Request("default", "default", headerList53, typedOutput56);
        retrofit.mime.TypedOutput typedOutput58 = null;
        retrofit.client.Request request59 = new retrofit.client.Request("default", "default", headerList53, typedOutput58);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request60 = restAdapter0.logAndReplaceRequest(request59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(provider21);
        org.junit.Assert.assertNull(provider23);
        org.junit.Assert.assertNull(provider24);
        org.junit.Assert.assertNull(logLevel27);
        org.junit.Assert.assertNotNull(headerArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(headerList53);
    }

    @Test
    public void test02845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02845");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.client.Header[] headerArray22 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList23 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList23, headerArray22);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList23, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList23, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList23, typedOutput29);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList23, typedOutput31);
        retrofit.mime.TypedOutput typedOutput33 = request32.getBody();
        retrofit.client.Request request34 = restAdapter12.logAndReplaceRequest(request32);
        retrofit.client.Client.Provider provider35 = null;
        restAdapter12.clientProvider = provider35;
        retrofit.RestAdapter.RestHandler restHandler37 = restAdapter12.new RestHandler();
        retrofit.Server server38 = null;
        retrofit.client.Client.Provider provider39 = null;
        java.util.concurrent.Executor executor40 = null;
        java.util.concurrent.Executor executor41 = null;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        retrofit.converter.Converter converter43 = null;
        retrofit.Profiler profiler44 = null;
        retrofit.ErrorHandler errorHandler45 = null;
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        log46.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter(server38, provider39, executor40, executor41, requestInterceptor42, converter43, profiler44, errorHandler45, log46, logLevel49);
        retrofit.RestAdapter.RestHandler restHandler51 = restAdapter50.new RestHandler();
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        restAdapter50.log = log52;
        retrofit.converter.Converter converter54 = restAdapter50.converter;
        retrofit.RestAdapter.LogLevel logLevel55 = restAdapter50.logLevel;
        restAdapter12.setLogLevel(logLevel55);
        java.lang.Throwable throwable57 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter12.logException(throwable57, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(typedOutput33);
        org.junit.Assert.assertNotNull(request34);
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNull(converter54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test02846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02846");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RequestInterceptor requestInterceptor1 = null;
        builder0.requestInterceptor = requestInterceptor1;
        retrofit.Server server3 = null;
        retrofit.client.Client.Provider provider4 = null;
        java.util.concurrent.Executor executor5 = null;
        java.util.concurrent.Executor executor6 = null;
        retrofit.RequestInterceptor requestInterceptor7 = null;
        retrofit.converter.Converter converter8 = null;
        retrofit.Profiler profiler9 = null;
        retrofit.ErrorHandler errorHandler10 = null;
        retrofit.RestAdapter.Log log11 = retrofit.RestAdapter.Log.NONE;
        log11.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter(server3, provider4, executor5, executor6, requestInterceptor7, converter8, profiler9, errorHandler10, log11, logLevel14);
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter15.new RestHandler();
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        restAdapter15.log = log17;
        retrofit.converter.Converter converter19 = null;
        restAdapter15.converter = converter19;
        retrofit.RestAdapter.LogLevel logLevel21 = restAdapter15.getLogLevel();
        builder0.logLevel = logLevel21;
        retrofit.RequestInterceptor requestInterceptor23 = builder0.requestInterceptor;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder25 = builder0.setServer("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be blank.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(log11);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(requestInterceptor23);
    }

    @Test
    public void test02847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02847");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.converter.Converter converter14 = restAdapter0.converter;
        retrofit.ErrorHandler errorHandler15 = null;
        restAdapter0.errorHandler = errorHandler15;
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.Server server22 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder23 = builder19.setServer(server22);
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor25 = restAdapter24.callbackExecutor;
        java.util.concurrent.Executor executor26 = restAdapter24.callbackExecutor;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler28 = restAdapter27.errorHandler;
        retrofit.Server server31 = new retrofit.Server("", "");
        restAdapter27.server = server31;
        restAdapter24.server = server31;
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        restAdapter24.log = log34;
        retrofit.RestAdapter.Builder builder36 = builder23.setLog(log34);
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder38 = builder23.setLogLevel(logLevel37);
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler40 = builder39.errorHandler;
        retrofit.Server server43 = new retrofit.Server("", "");
        builder39.server = server43;
        java.util.concurrent.Executor executor45 = builder39.callbackExecutor;
        retrofit.Server server46 = null;
        builder39.server = server46;
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.NONE;
        builder39.logLevel = logLevel48;
        builder38.logLevel = logLevel48;
        restAdapter0.logLevel = logLevel48;
        retrofit.Profiler profiler52 = restAdapter0.profiler;
        java.util.concurrent.Executor executor53 = restAdapter0.callbackExecutor;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler52);
        org.junit.Assert.assertNull(executor53);
    }

    @Test
    public void test02848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02848");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server6 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder7 = builder0.setServer(server6);
        retrofit.Server server10 = new retrofit.Server("", "");
        builder7.server = server10;
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler14 = builder13.errorHandler;
        retrofit.Server server17 = new retrofit.Server("", "");
        builder13.server = server17;
        java.util.concurrent.Executor executor19 = builder13.callbackExecutor;
        retrofit.Server server20 = null;
        builder13.server = server20;
        retrofit.RequestInterceptor requestInterceptor22 = builder13.requestInterceptor;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler24 = builder23.errorHandler;
        java.util.concurrent.Executor executor25 = builder23.callbackExecutor;
        retrofit.RestAdapter.Builder builder27 = builder23.setServer("hi!");
        builder27.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler30 = builder29.errorHandler;
        retrofit.ErrorHandler errorHandler31 = builder29.errorHandler;
        retrofit.RestAdapter.Log log32 = null;
        builder29.log = log32;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean35 = logLevel34.log();
        builder29.logLevel = logLevel34;
        retrofit.ErrorHandler errorHandler37 = builder29.errorHandler;
        retrofit.RestAdapter.Builder builder39 = builder29.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor40 = null;
        builder39.requestInterceptor = requestInterceptor40;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler43 = builder42.errorHandler;
        retrofit.client.Client.Provider provider44 = null;
        builder42.clientProvider = provider44;
        retrofit.Server server48 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder49 = builder42.setServer(server48);
        retrofit.client.Client.Provider provider50 = null;
        java.util.concurrent.Executor executor51 = null;
        java.util.concurrent.Executor executor52 = null;
        retrofit.RequestInterceptor requestInterceptor53 = null;
        retrofit.converter.Converter converter54 = null;
        retrofit.Profiler profiler55 = null;
        retrofit.ErrorHandler errorHandler56 = null;
        retrofit.Server server57 = null;
        retrofit.client.Client.Provider provider58 = null;
        java.util.concurrent.Executor executor59 = null;
        java.util.concurrent.Executor executor60 = null;
        retrofit.RequestInterceptor requestInterceptor61 = null;
        retrofit.converter.Converter converter62 = null;
        retrofit.Profiler profiler63 = null;
        retrofit.ErrorHandler errorHandler64 = null;
        retrofit.RestAdapter.Log log65 = retrofit.RestAdapter.Log.NONE;
        log65.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel68 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter(server57, provider58, executor59, executor60, requestInterceptor61, converter62, profiler63, errorHandler64, log65, logLevel68);
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter(server48, provider50, executor51, executor52, requestInterceptor53, converter54, profiler55, errorHandler56, log65, logLevel70);
        log65.log("");
        builder39.log = log65;
        retrofit.RestAdapter.Log log75 = builder39.log;
        retrofit.RestAdapter.Builder builder76 = builder27.setLog(log75);
        java.util.concurrent.Executor executor77 = builder27.callbackExecutor;
        builder13.httpExecutor = executor77;
        builder7.callbackExecutor = executor77;
        java.lang.Class<?> wildcardClass80 = executor77.getClass();
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(errorHandler30);
        org.junit.Assert.assertNull(errorHandler31);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(errorHandler43);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(log65);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(executor77);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test02849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02849");
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        log14.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel17);
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter18.new RestHandler();
        java.util.concurrent.Executor executor20 = null;
        restAdapter18.callbackExecutor = executor20;
        retrofit.client.Header[] headerArray24 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList25 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList25, headerArray24);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList25, typedOutput27);
        retrofit.client.Request request29 = restAdapter18.logAndReplaceRequest(request28);
        java.util.List<retrofit.client.Header> headerList30 = request28.getHeaders();
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("", "hi!", headerList30, typedOutput31);
        retrofit.mime.TypedOutput typedOutput33 = null;
        retrofit.client.Request request34 = new retrofit.client.Request("hi!", "default", headerList30, typedOutput33);
        retrofit.mime.TypedOutput typedOutput35 = null;
        retrofit.client.Request request36 = new retrofit.client.Request("default", "default", headerList30, typedOutput35);
        java.lang.String str37 = request36.getMethod();
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(request29);
        org.junit.Assert.assertNotNull(headerList30);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "default" + "'", str37, "default");
    }

    @Test
    public void test02850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02850");
        retrofit.client.Header[] headerArray12 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList13 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList13, headerArray12);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList13, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList13, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList13, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("hi!", "default", (java.util.List<retrofit.client.Header>) headerList13, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList13, typedOutput23);
        java.util.List<retrofit.client.Header> headerList25 = request24.getHeaders();
        retrofit.mime.TypedOutput typedOutput26 = null;
        retrofit.client.Request request27 = new retrofit.client.Request("", "", headerList25, typedOutput26);
        java.lang.String str28 = request27.getMethod();
        java.lang.String str29 = request27.getMethod();
        java.lang.String str30 = request27.getMethod();
        org.junit.Assert.assertNotNull(headerArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(headerList25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
    }

    @Test
    public void test02851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02851");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server4 = new retrofit.Server("", "");
        builder0.server = server4;
        java.util.concurrent.Executor executor6 = builder0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel7 = null;
        builder0.logLevel = logLevel7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler10 = builder9.errorHandler;
        retrofit.client.Client.Provider provider11 = null;
        builder9.clientProvider = provider11;
        retrofit.Server server15 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder16 = builder9.setServer(server15);
        retrofit.converter.Converter converter17 = null;
        builder16.converter = converter17;
        retrofit.RestAdapter restAdapter19 = builder16.build();
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler21 = builder20.errorHandler;
        java.util.concurrent.Executor executor22 = null;
        builder20.callbackExecutor = executor22;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider25 = builder24.clientProvider;
        java.util.concurrent.Executor executor26 = null;
        builder24.callbackExecutor = executor26;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.Server server31 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder32 = builder28.setServer(server31);
        java.lang.String str33 = server31.getUrl();
        retrofit.RestAdapter.Builder builder34 = builder24.setServer(server31);
        retrofit.RestAdapter.Builder builder35 = builder20.setServer(server31);
        restAdapter19.server = server31;
        java.util.concurrent.Executor executor37 = restAdapter19.httpExecutor;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler39 = builder38.errorHandler;
        retrofit.Server server42 = new retrofit.Server("", "");
        builder38.server = server42;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        builder38.log = log44;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler47 = builder46.errorHandler;
        retrofit.client.Client.Provider provider48 = null;
        builder46.clientProvider = provider48;
        retrofit.Server server52 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder53 = builder46.setServer(server52);
        retrofit.converter.Converter converter54 = null;
        builder53.converter = converter54;
        retrofit.RestAdapter restAdapter56 = builder53.build();
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler58 = builder57.errorHandler;
        java.util.concurrent.Executor executor59 = null;
        builder57.callbackExecutor = executor59;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider62 = builder61.clientProvider;
        java.util.concurrent.Executor executor63 = null;
        builder61.callbackExecutor = executor63;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.Server server68 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder69 = builder65.setServer(server68);
        java.lang.String str70 = server68.getUrl();
        retrofit.RestAdapter.Builder builder71 = builder61.setServer(server68);
        retrofit.RestAdapter.Builder builder72 = builder57.setServer(server68);
        restAdapter56.server = server68;
        java.util.concurrent.Executor executor74 = restAdapter56.httpExecutor;
        builder38.httpExecutor = executor74;
        retrofit.RestAdapter.Builder builder76 = builder0.setExecutors(executor37, executor74);
        retrofit.converter.Converter converter77 = builder76.converter;
        retrofit.RestAdapter.Log log78 = builder76.log;
        retrofit.RestAdapter.Builder builder80 = builder76.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel81 = builder76.logLevel;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(restAdapter19);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(provider25);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(executor37);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNull(errorHandler47);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(restAdapter56);
        org.junit.Assert.assertNull(errorHandler58);
        org.junit.Assert.assertNull(provider62);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hi!" + "'", str70, "hi!");
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(executor74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNull(converter77);
        org.junit.Assert.assertNull(log78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNull(logLevel81);
    }

    @Test
    public void test02852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02852");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        builder0.requestInterceptor = requestInterceptor2;
        java.util.concurrent.Executor executor4 = builder0.httpExecutor;
        retrofit.Server server5 = null;
        retrofit.client.Client.Provider provider6 = null;
        java.util.concurrent.Executor executor7 = null;
        java.util.concurrent.Executor executor8 = null;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        retrofit.converter.Converter converter10 = null;
        retrofit.Profiler profiler11 = null;
        retrofit.ErrorHandler errorHandler12 = null;
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        log13.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server5, provider6, executor7, executor8, requestInterceptor9, converter10, profiler11, errorHandler12, log13, logLevel16);
        retrofit.RequestInterceptor requestInterceptor18 = null;
        restAdapter17.requestInterceptor = requestInterceptor18;
        retrofit.ErrorHandler errorHandler20 = restAdapter17.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler21 = restAdapter17.new RestHandler();
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler23 = builder22.errorHandler;
        retrofit.client.Client.Provider provider24 = null;
        builder22.clientProvider = provider24;
        retrofit.converter.Converter converter26 = builder22.converter;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder28 = builder22.setLogLevel(logLevel27);
        restAdapter17.setLogLevel(logLevel27);
        boolean boolean30 = logLevel27.log();
        retrofit.RestAdapter.Builder builder31 = builder0.setLogLevel(logLevel27);
        retrofit.ErrorHandler errorHandler32 = builder31.errorHandler;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNotNull(log13);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNull(converter26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(errorHandler32);
    }

    @Test
    public void test02853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02853");
        retrofit.client.Header[] headerArray10 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList11 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList11, headerArray10);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList11, typedOutput13);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList11, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("default", "", (java.util.List<retrofit.client.Header>) headerList11, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("default", "", (java.util.List<retrofit.client.Header>) headerList11, typedOutput19);
        java.util.List<retrofit.client.Header> headerList21 = request20.getHeaders();
        retrofit.mime.TypedOutput typedOutput22 = null;
        retrofit.client.Request request23 = new retrofit.client.Request("default", "", headerList21, typedOutput22);
        retrofit.mime.TypedOutput typedOutput24 = request23.getBody();
        org.junit.Assert.assertNotNull(headerArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(headerList21);
        org.junit.Assert.assertNull(typedOutput24);
    }

    @Test
    public void test02854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02854");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean6 = logLevel5.log();
        builder0.logLevel = logLevel5;
        retrofit.ErrorHandler errorHandler8 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder10 = builder0.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor11 = null;
        builder10.requestInterceptor = requestInterceptor11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler14 = builder13.errorHandler;
        retrofit.client.Client.Provider provider15 = null;
        builder13.clientProvider = provider15;
        retrofit.Server server19 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder20 = builder13.setServer(server19);
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.Server server28 = null;
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        log36.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server28, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log36, logLevel39);
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter(server19, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log36, logLevel41);
        log36.log("");
        builder10.log = log36;
        retrofit.RestAdapter.Log log46 = builder10.log;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler48 = builder47.errorHandler;
        retrofit.Server server51 = new retrofit.Server("", "");
        builder47.server = server51;
        retrofit.client.Client.Provider provider53 = null;
        java.util.concurrent.Executor executor54 = null;
        java.util.concurrent.Executor executor55 = null;
        retrofit.RequestInterceptor requestInterceptor56 = null;
        retrofit.converter.Converter converter57 = null;
        retrofit.Profiler profiler58 = null;
        retrofit.ErrorHandler errorHandler59 = null;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler61 = builder60.errorHandler;
        retrofit.Server server64 = new retrofit.Server("", "");
        builder60.server = server64;
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        builder60.log = log66;
        retrofit.Server server68 = null;
        retrofit.client.Client.Provider provider69 = null;
        java.util.concurrent.Executor executor70 = null;
        java.util.concurrent.Executor executor71 = null;
        retrofit.RequestInterceptor requestInterceptor72 = null;
        retrofit.converter.Converter converter73 = null;
        retrofit.Profiler profiler74 = null;
        retrofit.ErrorHandler errorHandler75 = null;
        retrofit.RestAdapter.Log log76 = retrofit.RestAdapter.Log.NONE;
        log76.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel79 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter80 = new retrofit.RestAdapter(server68, provider69, executor70, executor71, requestInterceptor72, converter73, profiler74, errorHandler75, log76, logLevel79);
        retrofit.RestAdapter restAdapter81 = new retrofit.RestAdapter(server51, provider53, executor54, executor55, requestInterceptor56, converter57, profiler58, errorHandler59, log66, logLevel79);
        retrofit.RestAdapter.Builder builder82 = builder10.setLog(log66);
        retrofit.RestAdapter.LogLevel logLevel83 = builder82.logLevel;
        retrofit.Profiler profiler84 = builder82.profiler;
        retrofit.RequestInterceptor requestInterceptor85 = builder82.requestInterceptor;
        retrofit.converter.Converter converter86 = builder82.converter;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertNull(errorHandler48);
        org.junit.Assert.assertNull(errorHandler61);
        org.junit.Assert.assertNotNull(log66);
        org.junit.Assert.assertNotNull(log76);
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler84);
        org.junit.Assert.assertNull(requestInterceptor85);
        org.junit.Assert.assertNull(converter86);
    }

    @Test
    public void test02855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02855");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        restAdapter12.log = log14;
        retrofit.converter.Converter converter16 = null;
        restAdapter12.converter = converter16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter12.getLogLevel();
        retrofit.ErrorHandler errorHandler19 = restAdapter12.errorHandler;
        retrofit.Profiler profiler20 = restAdapter12.profiler;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler22 = null;
        builder21.errorHandler = errorHandler22;
        retrofit.ErrorHandler errorHandler24 = builder21.errorHandler;
        retrofit.RestAdapter.Builder builder26 = builder21.setServer("hi!");
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler28 = builder27.errorHandler;
        retrofit.ErrorHandler errorHandler29 = builder27.errorHandler;
        retrofit.Profiler profiler30 = builder27.profiler;
        retrofit.RestAdapter.Log log31 = builder27.log;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.FULL;
        builder27.logLevel = logLevel32;
        retrofit.RestAdapter.Builder builder34 = builder26.setLogLevel(logLevel32);
        retrofit.Server server35 = null;
        retrofit.client.Client.Provider provider36 = null;
        java.util.concurrent.Executor executor37 = null;
        java.util.concurrent.Executor executor38 = null;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        retrofit.converter.Converter converter40 = null;
        retrofit.Profiler profiler41 = null;
        retrofit.ErrorHandler errorHandler42 = null;
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        log43.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter(server35, provider36, executor37, executor38, requestInterceptor39, converter40, profiler41, errorHandler42, log43, logLevel46);
        log43.log("");
        retrofit.RestAdapter.Builder builder50 = builder34.setLog(log43);
        restAdapter12.log = log43;
        retrofit.RestAdapter.RestHandler restHandler52 = restAdapter12.new RestHandler();
        java.util.concurrent.Executor executor53 = restAdapter12.httpExecutor;
        java.util.concurrent.Executor executor54 = restAdapter12.httpExecutor;
        retrofit.Profiler profiler55 = null;
        restAdapter12.profiler = profiler55;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler58 = builder57.errorHandler;
        java.util.concurrent.Executor executor59 = null;
        builder57.callbackExecutor = executor59;
        retrofit.converter.Converter converter61 = builder57.converter;
        retrofit.RestAdapter.Builder builder63 = builder57.setServer("hi!");
        builder57.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor66 = restAdapter65.callbackExecutor;
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor68 = restAdapter67.callbackExecutor;
        java.util.concurrent.Executor executor69 = restAdapter67.callbackExecutor;
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler71 = restAdapter70.errorHandler;
        retrofit.Server server74 = new retrofit.Server("", "");
        restAdapter70.server = server74;
        restAdapter67.server = server74;
        restAdapter65.server = server74;
        java.lang.String str78 = server74.getName();
        builder57.server = server74;
        java.lang.String str80 = server74.getName();
        restAdapter12.server = server74;
        retrofit.RestAdapter.LogLevel logLevel82 = restAdapter12.logLevel;
        retrofit.RestAdapter.Builder builder83 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler84 = builder83.errorHandler;
        retrofit.Server server87 = new retrofit.Server("", "");
        builder83.server = server87;
        retrofit.RestAdapter restAdapter89 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor90 = restAdapter89.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler91 = restAdapter89.new RestHandler();
        retrofit.Server server94 = new retrofit.Server("hi!", "hi!");
        restAdapter89.server = server94;
        retrofit.RestAdapter.Builder builder96 = builder83.setServer(server94);
        java.lang.String str97 = server94.getName();
        java.lang.String str98 = server94.getUrl();
        restAdapter12.server = server94;
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(profiler20);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNull(profiler30);
        org.junit.Assert.assertNull(log31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(executor53);
        org.junit.Assert.assertNull(executor54);
        org.junit.Assert.assertNull(errorHandler58);
        org.junit.Assert.assertNull(converter61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(executor66);
        org.junit.Assert.assertNull(executor68);
        org.junit.Assert.assertNull(executor69);
        org.junit.Assert.assertNull(errorHandler71);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler84);
        org.junit.Assert.assertNull(executor90);
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "hi!" + "'", str97, "hi!");
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "hi!" + "'", str98, "hi!");
    }

    @Test
    public void test02856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02856");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.converter.Converter converter4 = builder0.converter;
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler8 = builder7.errorHandler;
        retrofit.Server server11 = new retrofit.Server("", "");
        builder7.server = server11;
        retrofit.RestAdapter restAdapter13 = builder7.build();
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler15 = builder14.errorHandler;
        java.util.concurrent.Executor executor16 = null;
        builder14.callbackExecutor = executor16;
        retrofit.converter.Converter converter18 = builder14.converter;
        retrofit.RestAdapter.Builder builder20 = builder14.setServer("default");
        retrofit.Profiler profiler21 = builder14.profiler;
        retrofit.Server server22 = null;
        retrofit.client.Client.Provider provider23 = null;
        java.util.concurrent.Executor executor24 = null;
        java.util.concurrent.Executor executor25 = null;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        retrofit.converter.Converter converter27 = null;
        retrofit.Profiler profiler28 = null;
        retrofit.ErrorHandler errorHandler29 = null;
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        log30.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server22, provider23, executor24, executor25, requestInterceptor26, converter27, profiler28, errorHandler29, log30, logLevel33);
        retrofit.RestAdapter.RestHandler restHandler35 = restAdapter34.new RestHandler();
        retrofit.client.Header[] headerArray44 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList45 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList45, headerArray44);
        retrofit.mime.TypedOutput typedOutput47 = null;
        retrofit.client.Request request48 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList45, typedOutput47);
        retrofit.mime.TypedOutput typedOutput49 = null;
        retrofit.client.Request request50 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList45, typedOutput49);
        retrofit.mime.TypedOutput typedOutput51 = null;
        retrofit.client.Request request52 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList45, typedOutput51);
        retrofit.mime.TypedOutput typedOutput53 = null;
        retrofit.client.Request request54 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList45, typedOutput53);
        retrofit.mime.TypedOutput typedOutput55 = request54.getBody();
        retrofit.client.Request request56 = restAdapter34.logAndReplaceRequest(request54);
        retrofit.client.Client.Provider provider57 = null;
        restAdapter34.clientProvider = provider57;
        retrofit.RestAdapter.RestHandler restHandler59 = restAdapter34.new RestHandler();
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.Server server63 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder64 = builder60.setServer(server63);
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor66 = restAdapter65.callbackExecutor;
        java.util.concurrent.Executor executor67 = restAdapter65.callbackExecutor;
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler69 = restAdapter68.errorHandler;
        retrofit.Server server72 = new retrofit.Server("", "");
        restAdapter68.server = server72;
        restAdapter65.server = server72;
        retrofit.RestAdapter.Log log75 = retrofit.RestAdapter.Log.NONE;
        restAdapter65.log = log75;
        retrofit.RestAdapter.Builder builder77 = builder64.setLog(log75);
        retrofit.RestAdapter.LogLevel logLevel78 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder79 = builder64.setLogLevel(logLevel78);
        retrofit.Profiler profiler80 = null;
        builder79.profiler = profiler80;
        retrofit.converter.Converter converter82 = null;
        builder79.converter = converter82;
        retrofit.ErrorHandler errorHandler84 = null;
        builder79.errorHandler = errorHandler84;
        retrofit.RestAdapter restAdapter86 = builder79.build();
        retrofit.ErrorHandler errorHandler87 = builder79.errorHandler;
        restAdapter34.errorHandler = errorHandler87;
        builder14.errorHandler = errorHandler87;
        restAdapter13.errorHandler = errorHandler87;
        retrofit.RestAdapter.Builder builder91 = builder6.setErrorHandler(errorHandler87);
        retrofit.Server server92 = builder91.server;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNotNull(restAdapter13);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNull(converter18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(profiler21);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(typedOutput55);
        org.junit.Assert.assertNotNull(request56);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(executor66);
        org.junit.Assert.assertNull(executor67);
        org.junit.Assert.assertNull(errorHandler69);
        org.junit.Assert.assertNotNull(log75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(restAdapter86);
        org.junit.Assert.assertNotNull(errorHandler87);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(server92);
    }

    @Test
    public void test02857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02857");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.Server server7 = new retrofit.Server("default", "hi!");
        java.lang.String str8 = server7.getUrl();
        retrofit.RestAdapter.Builder builder9 = builder4.setServer(server7);
        retrofit.RestAdapter.LogLevel logLevel10 = builder9.logLevel;
        retrofit.ErrorHandler errorHandler11 = builder9.errorHandler;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler13 = builder12.errorHandler;
        java.util.concurrent.Executor executor14 = null;
        builder12.callbackExecutor = executor14;
        java.util.concurrent.Executor executor16 = null;
        builder12.httpExecutor = executor16;
        retrofit.Profiler profiler18 = null;
        builder12.profiler = profiler18;
        retrofit.RestAdapter.Builder builder21 = builder12.setServer("hi!");
        retrofit.Profiler profiler22 = builder12.profiler;
        retrofit.RequestInterceptor requestInterceptor23 = builder12.requestInterceptor;
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        log24.log("hi!");
        log24.log("hi!");
        retrofit.RestAdapter.Builder builder29 = builder12.setLog(log24);
        retrofit.RestAdapter.Builder builder30 = builder9.setLog(log24);
        java.util.concurrent.Executor executor31 = builder9.httpExecutor;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder33 = builder9.setServer("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be blank.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "default" + "'", str8, "default");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(log24);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(executor31);
    }

    @Test
    public void test02858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02858");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.ErrorHandler errorHandler3 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder7 = builder5.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor8 = builder5.requestInterceptor;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler10 = builder9.errorHandler;
        retrofit.Server server13 = new retrofit.Server("", "");
        builder9.server = server13;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        builder9.log = log15;
        retrofit.RestAdapter.LogLevel logLevel17 = builder9.logLevel;
        boolean boolean18 = logLevel17.log();
        boolean boolean19 = logLevel17.log();
        retrofit.RestAdapter.Builder builder20 = builder5.setLogLevel(logLevel17);
        retrofit.RequestInterceptor requestInterceptor21 = null;
        builder20.requestInterceptor = requestInterceptor21;
        java.util.concurrent.Executor executor23 = builder20.callbackExecutor;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor25 = restAdapter24.callbackExecutor;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor27 = restAdapter26.callbackExecutor;
        java.util.concurrent.Executor executor28 = restAdapter26.callbackExecutor;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.Server server33 = new retrofit.Server("", "");
        restAdapter29.server = server33;
        restAdapter26.server = server33;
        restAdapter24.server = server33;
        retrofit.Profiler profiler37 = restAdapter24.profiler;
        retrofit.ErrorHandler errorHandler38 = restAdapter24.errorHandler;
        java.util.concurrent.Executor executor39 = restAdapter24.httpExecutor;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler41 = builder40.errorHandler;
        java.util.concurrent.Executor executor42 = builder40.callbackExecutor;
        retrofit.RestAdapter.Builder builder44 = builder40.setServer("hi!");
        builder44.ensureSaneDefaults();
        java.util.concurrent.Executor executor46 = builder44.callbackExecutor;
        restAdapter24.callbackExecutor = executor46;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler49 = builder48.errorHandler;
        retrofit.ErrorHandler errorHandler50 = builder48.errorHandler;
        retrofit.Profiler profiler51 = builder48.profiler;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor53 = restAdapter52.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler54 = restAdapter52.new RestHandler();
        retrofit.Server server57 = new retrofit.Server("hi!", "hi!");
        restAdapter52.server = server57;
        retrofit.RestAdapter.Builder builder59 = builder48.setServer(server57);
        retrofit.RestAdapter restAdapter60 = builder59.build();
        java.util.concurrent.Executor executor61 = builder59.callbackExecutor;
        retrofit.RestAdapter.Log log62 = builder59.log;
        retrofit.RestAdapter restAdapter63 = builder59.build();
        java.util.concurrent.Executor executor64 = restAdapter63.callbackExecutor;
        retrofit.RestAdapter.Builder builder65 = builder20.setExecutors(executor46, executor64);
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNull(errorHandler30);
        org.junit.Assert.assertNull(profiler37);
        org.junit.Assert.assertNull(errorHandler38);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNull(errorHandler41);
        org.junit.Assert.assertNull(executor42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(executor46);
        org.junit.Assert.assertNull(errorHandler49);
        org.junit.Assert.assertNull(errorHandler50);
        org.junit.Assert.assertNull(profiler51);
        org.junit.Assert.assertNull(executor53);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(restAdapter60);
        org.junit.Assert.assertNotNull(executor61);
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertNotNull(restAdapter63);
        org.junit.Assert.assertNotNull(executor64);
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test02859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02859");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler21 = builder20.errorHandler;
        retrofit.Server server24 = new retrofit.Server("", "");
        builder20.server = server24;
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler34 = builder33.errorHandler;
        retrofit.Server server37 = new retrofit.Server("", "");
        builder33.server = server37;
        retrofit.RestAdapter.Log log39 = retrofit.RestAdapter.Log.NONE;
        builder33.log = log39;
        retrofit.Server server41 = null;
        retrofit.client.Client.Provider provider42 = null;
        java.util.concurrent.Executor executor43 = null;
        java.util.concurrent.Executor executor44 = null;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        retrofit.converter.Converter converter46 = null;
        retrofit.Profiler profiler47 = null;
        retrofit.ErrorHandler errorHandler48 = null;
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        log49.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server41, provider42, executor43, executor44, requestInterceptor45, converter46, profiler47, errorHandler48, log49, logLevel52);
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter(server24, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log39, logLevel52);
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.Server server58 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder59 = builder55.setServer(server58);
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor61 = restAdapter60.callbackExecutor;
        java.util.concurrent.Executor executor62 = restAdapter60.callbackExecutor;
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler64 = restAdapter63.errorHandler;
        retrofit.Server server67 = new retrofit.Server("", "");
        restAdapter63.server = server67;
        restAdapter60.server = server67;
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        restAdapter60.log = log70;
        retrofit.RestAdapter.Builder builder72 = builder59.setLog(log70);
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder74 = builder59.setLogLevel(logLevel73);
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter(server9, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log39, logLevel73);
        retrofit.ErrorHandler errorHandler76 = null;
        restAdapter75.errorHandler = errorHandler76;
        retrofit.RestAdapter.Log log78 = restAdapter75.log;
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler80 = builder79.errorHandler;
        retrofit.Server server83 = new retrofit.Server("", "");
        builder79.server = server83;
        retrofit.RestAdapter.LogLevel logLevel85 = builder79.logLevel;
        restAdapter75.setLogLevel(logLevel85);
        retrofit.client.Response response88 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response90 = restAdapter75.logAndReplaceResponse("", response88, (long) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(errorHandler34);
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(executor61);
        org.junit.Assert.assertNull(executor62);
        org.junit.Assert.assertNull(errorHandler64);
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(log78);
        org.junit.Assert.assertNull(errorHandler80);
        org.junit.Assert.assertTrue("'" + logLevel85 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel85.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test02860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02860");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.converter.Converter converter5 = builder0.converter;
        retrofit.RequestInterceptor requestInterceptor6 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider8 = builder7.clientProvider;
        java.util.concurrent.Executor executor9 = null;
        builder7.callbackExecutor = executor9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.Server server14 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder15 = builder11.setServer(server14);
        java.lang.String str16 = server14.getUrl();
        retrofit.RestAdapter.Builder builder17 = builder7.setServer(server14);
        builder7.ensureSaneDefaults();
        retrofit.Server server19 = null;
        retrofit.client.Client.Provider provider20 = null;
        java.util.concurrent.Executor executor21 = null;
        java.util.concurrent.Executor executor22 = null;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        retrofit.converter.Converter converter24 = null;
        retrofit.Profiler profiler25 = null;
        retrofit.ErrorHandler errorHandler26 = null;
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        log27.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter(server19, provider20, executor21, executor22, requestInterceptor23, converter24, profiler25, errorHandler26, log27, logLevel30);
        retrofit.RestAdapter.RestHandler restHandler32 = restAdapter31.new RestHandler();
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        restAdapter31.log = log33;
        retrofit.RestAdapter.Builder builder35 = builder7.setLog(log33);
        retrofit.RestAdapter.Builder builder37 = builder7.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor38 = builder7.requestInterceptor;
        builder0.requestInterceptor = requestInterceptor38;
        retrofit.RestAdapter.LogLevel logLevel40 = builder0.logLevel;
        java.util.concurrent.Executor executor41 = builder0.httpExecutor;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(converter5);
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(requestInterceptor38);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor41);
    }

    @Test
    public void test02861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02861");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server4 = new retrofit.Server("", "");
        builder0.server = server4;
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        builder0.log = log6;
        retrofit.RestAdapter.Builder builder9 = builder0.setServer("default");
        retrofit.converter.Converter converter10 = builder9.converter;
        retrofit.Server server13 = new retrofit.Server("", "");
        java.lang.String str14 = server13.getName();
        retrofit.RestAdapter.Builder builder15 = builder9.setServer(server13);
        retrofit.Server server16 = null;
        builder15.server = server16;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(converter10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test02862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02862");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        java.util.concurrent.Executor executor6 = builder4.httpExecutor;
        java.util.concurrent.Executor executor7 = builder4.callbackExecutor;
        retrofit.converter.Converter converter8 = builder4.converter;
        retrofit.Server server9 = null;
        retrofit.client.Client.Provider provider10 = null;
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        retrofit.converter.Converter converter14 = null;
        retrofit.Profiler profiler15 = null;
        retrofit.ErrorHandler errorHandler16 = null;
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        log17.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter(server9, provider10, executor11, executor12, requestInterceptor13, converter14, profiler15, errorHandler16, log17, logLevel20);
        retrofit.RestAdapter.RestHandler restHandler22 = restAdapter21.new RestHandler();
        retrofit.client.Header[] headerArray31 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList32 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList32, headerArray31);
        retrofit.mime.TypedOutput typedOutput34 = null;
        retrofit.client.Request request35 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList32, typedOutput34);
        retrofit.mime.TypedOutput typedOutput36 = null;
        retrofit.client.Request request37 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList32, typedOutput36);
        retrofit.mime.TypedOutput typedOutput38 = null;
        retrofit.client.Request request39 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList32, typedOutput38);
        retrofit.mime.TypedOutput typedOutput40 = null;
        retrofit.client.Request request41 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList32, typedOutput40);
        retrofit.mime.TypedOutput typedOutput42 = request41.getBody();
        retrofit.client.Request request43 = restAdapter21.logAndReplaceRequest(request41);
        retrofit.RestAdapter.RestHandler restHandler44 = restAdapter21.new RestHandler();
        retrofit.client.Client.Provider provider45 = restAdapter21.clientProvider;
        retrofit.RestAdapter.RestHandler restHandler46 = restAdapter21.new RestHandler();
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor48 = restAdapter47.callbackExecutor;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor50 = restAdapter49.callbackExecutor;
        java.util.concurrent.Executor executor51 = restAdapter49.callbackExecutor;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler53 = restAdapter52.errorHandler;
        retrofit.Server server56 = new retrofit.Server("", "");
        restAdapter52.server = server56;
        restAdapter49.server = server56;
        restAdapter47.server = server56;
        retrofit.Profiler profiler60 = restAdapter47.profiler;
        retrofit.ErrorHandler errorHandler61 = null;
        restAdapter47.errorHandler = errorHandler61;
        retrofit.Profiler profiler63 = null;
        restAdapter47.profiler = profiler63;
        retrofit.RequestInterceptor requestInterceptor65 = null;
        restAdapter47.requestInterceptor = requestInterceptor65;
        retrofit.RestAdapter.LogLevel logLevel67 = restAdapter47.getLogLevel();
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        retrofit.Server server71 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder72 = builder68.setServer(server71);
        retrofit.RestAdapter restAdapter73 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor74 = restAdapter73.callbackExecutor;
        java.util.concurrent.Executor executor75 = restAdapter73.callbackExecutor;
        retrofit.RestAdapter restAdapter76 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler77 = restAdapter76.errorHandler;
        retrofit.Server server80 = new retrofit.Server("", "");
        restAdapter76.server = server80;
        restAdapter73.server = server80;
        retrofit.RestAdapter.Log log83 = retrofit.RestAdapter.Log.NONE;
        restAdapter73.log = log83;
        retrofit.RestAdapter.Builder builder85 = builder72.setLog(log83);
        retrofit.RestAdapter.LogLevel logLevel86 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder87 = builder72.setLogLevel(logLevel86);
        retrofit.Profiler profiler88 = null;
        builder87.profiler = profiler88;
        retrofit.converter.Converter converter90 = null;
        builder87.converter = converter90;
        retrofit.ErrorHandler errorHandler92 = null;
        builder87.errorHandler = errorHandler92;
        retrofit.RestAdapter restAdapter94 = builder87.build();
        retrofit.ErrorHandler errorHandler95 = builder87.errorHandler;
        restAdapter47.errorHandler = errorHandler95;
        restAdapter21.errorHandler = errorHandler95;
        retrofit.RestAdapter.Builder builder98 = builder4.setErrorHandler(errorHandler95);
        retrofit.RequestInterceptor requestInterceptor99 = builder4.requestInterceptor;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(typedOutput42);
        org.junit.Assert.assertNotNull(request43);
        org.junit.Assert.assertNull(provider45);
        org.junit.Assert.assertNull(executor48);
        org.junit.Assert.assertNull(executor50);
        org.junit.Assert.assertNull(executor51);
        org.junit.Assert.assertNull(errorHandler53);
        org.junit.Assert.assertNull(profiler60);
        org.junit.Assert.assertNull(logLevel67);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNull(executor74);
        org.junit.Assert.assertNull(executor75);
        org.junit.Assert.assertNull(errorHandler77);
        org.junit.Assert.assertNotNull(log83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertTrue("'" + logLevel86 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel86.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(restAdapter94);
        org.junit.Assert.assertNotNull(errorHandler95);
        org.junit.Assert.assertNotNull(builder98);
        org.junit.Assert.assertNull(requestInterceptor99);
    }

    @Test
    public void test02863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02863");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.client.Client.Provider provider14 = restAdapter12.clientProvider;
        retrofit.RestAdapter.Log log15 = restAdapter12.log;
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter12.new RestHandler();
        retrofit.converter.Converter converter17 = restAdapter12.converter;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor19 = null;
        restAdapter18.requestInterceptor = requestInterceptor19;
        retrofit.RestAdapter.RestHandler restHandler21 = restAdapter18.new RestHandler();
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor23 = restAdapter22.callbackExecutor;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor25 = restAdapter24.callbackExecutor;
        java.util.concurrent.Executor executor26 = restAdapter24.callbackExecutor;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler28 = restAdapter27.errorHandler;
        retrofit.Server server31 = new retrofit.Server("", "");
        restAdapter27.server = server31;
        restAdapter24.server = server31;
        restAdapter22.server = server31;
        retrofit.Profiler profiler35 = restAdapter22.profiler;
        retrofit.ErrorHandler errorHandler36 = null;
        restAdapter22.errorHandler = errorHandler36;
        retrofit.Profiler profiler38 = null;
        restAdapter22.profiler = profiler38;
        retrofit.RestAdapter.LogLevel logLevel40 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter22.getLogLevel();
        retrofit.ErrorHandler errorHandler42 = null;
        restAdapter22.errorHandler = errorHandler42;
        retrofit.client.Client.Provider provider44 = null;
        restAdapter22.clientProvider = provider44;
        retrofit.ErrorHandler errorHandler46 = restAdapter22.errorHandler;
        retrofit.Server server47 = restAdapter22.server;
        java.lang.String str48 = server47.getName();
        restAdapter18.server = server47;
        java.lang.String str50 = server47.getName();
        java.lang.String str51 = server47.getName();
        java.lang.String str52 = server47.getName();
        restAdapter12.server = server47;
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNull(converter17);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertNull(profiler35);
        org.junit.Assert.assertNull(logLevel40);
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertNull(errorHandler46);
        org.junit.Assert.assertNotNull(server47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
    }

    @Test
    public void test02864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02864");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = null;
        restAdapter0.httpExecutor = executor2;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.logLevel;
        retrofit.Server server5 = restAdapter0.server;
        retrofit.Server server6 = restAdapter0.server;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass7 = server6.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNull(server6);
    }

    @Test
    public void test02865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02865");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.converter.Converter converter4 = builder0.converter;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler6 = builder5.errorHandler;
        retrofit.RequestInterceptor requestInterceptor7 = null;
        builder5.requestInterceptor = requestInterceptor7;
        retrofit.Server server9 = null;
        retrofit.client.Client.Provider provider10 = null;
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        retrofit.converter.Converter converter14 = null;
        retrofit.Profiler profiler15 = null;
        retrofit.ErrorHandler errorHandler16 = null;
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        log17.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter(server9, provider10, executor11, executor12, requestInterceptor13, converter14, profiler15, errorHandler16, log17, logLevel20);
        builder5.log = log17;
        retrofit.Server server23 = null;
        retrofit.client.Client.Provider provider24 = null;
        java.util.concurrent.Executor executor25 = null;
        java.util.concurrent.Executor executor26 = null;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        retrofit.converter.Converter converter28 = null;
        retrofit.Profiler profiler29 = null;
        retrofit.ErrorHandler errorHandler30 = null;
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        log31.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server23, provider24, executor25, executor26, requestInterceptor27, converter28, profiler29, errorHandler30, log31, logLevel34);
        retrofit.RestAdapter.RestHandler restHandler36 = restAdapter35.new RestHandler();
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        restAdapter35.log = log37;
        log37.log("default");
        builder5.log = log37;
        retrofit.RestAdapter.Builder builder42 = builder0.setLog(log37);
        retrofit.Server server43 = builder0.server;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(server43);
    }

    @Test
    public void test02866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02866");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        restAdapter12.log = log14;
        retrofit.converter.Converter converter16 = null;
        restAdapter12.converter = converter16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server21 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder22 = builder18.setServer(server21);
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor24 = restAdapter23.callbackExecutor;
        java.util.concurrent.Executor executor25 = restAdapter23.callbackExecutor;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler27 = restAdapter26.errorHandler;
        retrofit.Server server30 = new retrofit.Server("", "");
        restAdapter26.server = server30;
        restAdapter23.server = server30;
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        restAdapter23.log = log33;
        retrofit.RestAdapter.Builder builder35 = builder22.setLog(log33);
        restAdapter12.log = log33;
        retrofit.RestAdapter.RestHandler restHandler37 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel38 = restAdapter12.logLevel;
        retrofit.RestAdapter.RestHandler restHandler39 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler40 = restAdapter12.new RestHandler();
        retrofit.Profiler profiler41 = null;
        restAdapter12.profiler = profiler41;
        retrofit.RestAdapter.RestHandler restHandler43 = restAdapter12.new RestHandler();
        java.util.concurrent.Executor executor44 = restAdapter12.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler45 = restAdapter12.new RestHandler();
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor44);
    }

    @Test
    public void test02867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02867");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        builder0.requestInterceptor = requestInterceptor5;
        retrofit.client.Client.Provider provider7 = null;
        builder0.clientProvider = provider7;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor10 = restAdapter9.callbackExecutor;
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor12 = restAdapter11.callbackExecutor;
        java.util.concurrent.Executor executor13 = restAdapter11.callbackExecutor;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler15 = restAdapter14.errorHandler;
        retrofit.Server server18 = new retrofit.Server("", "");
        restAdapter14.server = server18;
        restAdapter11.server = server18;
        restAdapter9.server = server18;
        retrofit.Profiler profiler22 = restAdapter9.profiler;
        retrofit.ErrorHandler errorHandler23 = null;
        restAdapter9.errorHandler = errorHandler23;
        retrofit.RequestInterceptor requestInterceptor25 = restAdapter9.requestInterceptor;
        retrofit.ErrorHandler errorHandler26 = restAdapter9.errorHandler;
        java.util.concurrent.Executor executor27 = null;
        restAdapter9.callbackExecutor = executor27;
        java.util.concurrent.Executor executor29 = restAdapter9.httpExecutor;
        retrofit.client.Client.Provider provider30 = restAdapter9.clientProvider;
        retrofit.converter.Converter converter31 = restAdapter9.converter;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler33 = builder32.errorHandler;
        retrofit.Server server36 = new retrofit.Server("", "");
        builder32.server = server36;
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        builder32.log = log38;
        retrofit.RequestInterceptor requestInterceptor40 = builder32.requestInterceptor;
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        log41.log("hi!");
        log41.log("hi!");
        builder32.log = log41;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider48 = builder47.clientProvider;
        java.util.concurrent.Executor executor49 = null;
        builder47.callbackExecutor = executor49;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.Server server54 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder55 = builder51.setServer(server54);
        java.lang.String str56 = server54.getUrl();
        retrofit.RestAdapter.Builder builder57 = builder47.setServer(server54);
        builder47.ensureSaneDefaults();
        retrofit.Server server59 = null;
        retrofit.client.Client.Provider provider60 = null;
        java.util.concurrent.Executor executor61 = null;
        java.util.concurrent.Executor executor62 = null;
        retrofit.RequestInterceptor requestInterceptor63 = null;
        retrofit.converter.Converter converter64 = null;
        retrofit.Profiler profiler65 = null;
        retrofit.ErrorHandler errorHandler66 = null;
        retrofit.RestAdapter.Log log67 = retrofit.RestAdapter.Log.NONE;
        log67.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter(server59, provider60, executor61, executor62, requestInterceptor63, converter64, profiler65, errorHandler66, log67, logLevel70);
        retrofit.RestAdapter.RestHandler restHandler72 = restAdapter71.new RestHandler();
        retrofit.RestAdapter.Log log73 = retrofit.RestAdapter.Log.NONE;
        restAdapter71.log = log73;
        retrofit.RestAdapter.Builder builder75 = builder47.setLog(log73);
        retrofit.RestAdapter.LogLevel logLevel76 = builder47.logLevel;
        boolean boolean77 = logLevel76.log();
        retrofit.RestAdapter.Builder builder78 = builder32.setLogLevel(logLevel76);
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider80 = builder79.clientProvider;
        retrofit.RestAdapter.Builder builder82 = builder79.setServer("default");
        retrofit.RestAdapter restAdapter83 = builder79.build();
        retrofit.client.Client.Provider provider84 = restAdapter83.clientProvider;
        retrofit.RestAdapter.Builder builder85 = builder78.setClient(provider84);
        restAdapter9.clientProvider = provider84;
        retrofit.RestAdapter.Builder builder87 = builder0.setClient(provider84);
        retrofit.RestAdapter.Builder builder89 = builder0.setServer("default");
        retrofit.client.Client client90 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder91 = builder0.setClient(client90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(requestInterceptor25);
        org.junit.Assert.assertNull(errorHandler26);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(provider30);
        org.junit.Assert.assertNull(converter31);
        org.junit.Assert.assertNull(errorHandler33);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNull(requestInterceptor40);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertNull(provider48);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(log67);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNull(provider80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(restAdapter83);
        org.junit.Assert.assertNotNull(provider84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder89);
    }

    @Test
    public void test02868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02868");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean6 = logLevel5.log();
        builder0.logLevel = logLevel5;
        retrofit.ErrorHandler errorHandler8 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder10 = builder0.setServer("hi!");
        retrofit.ErrorHandler errorHandler11 = builder0.errorHandler;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Log log13 = builder0.log;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler15 = builder14.errorHandler;
        retrofit.ErrorHandler errorHandler16 = builder14.errorHandler;
        retrofit.Profiler profiler17 = builder14.profiler;
        retrofit.RestAdapter.Log log18 = builder14.log;
        retrofit.RequestInterceptor requestInterceptor19 = builder14.requestInterceptor;
        builder14.ensureSaneDefaults();
        retrofit.Server server22 = new retrofit.Server("default");
        retrofit.client.Client.Provider provider23 = null;
        java.util.concurrent.Executor executor24 = null;
        java.util.concurrent.Executor executor25 = null;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        retrofit.converter.Converter converter27 = null;
        retrofit.Profiler profiler28 = null;
        retrofit.ErrorHandler errorHandler29 = null;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler31 = builder30.errorHandler;
        retrofit.ErrorHandler errorHandler32 = builder30.errorHandler;
        retrofit.Profiler profiler33 = builder30.profiler;
        retrofit.RestAdapter.Log log34 = builder30.log;
        retrofit.Server server35 = null;
        retrofit.client.Client.Provider provider36 = null;
        java.util.concurrent.Executor executor37 = null;
        java.util.concurrent.Executor executor38 = null;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        retrofit.converter.Converter converter40 = null;
        retrofit.Profiler profiler41 = null;
        retrofit.ErrorHandler errorHandler42 = null;
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        log43.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter(server35, provider36, executor37, executor38, requestInterceptor39, converter40, profiler41, errorHandler42, log43, logLevel46);
        builder30.log = log43;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler50 = builder49.errorHandler;
        retrofit.ErrorHandler errorHandler51 = builder49.errorHandler;
        retrofit.Profiler profiler52 = builder49.profiler;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor54 = restAdapter53.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler55 = restAdapter53.new RestHandler();
        retrofit.Server server58 = new retrofit.Server("hi!", "hi!");
        restAdapter53.server = server58;
        retrofit.RestAdapter.Builder builder60 = builder49.setServer(server58);
        retrofit.converter.Converter converter61 = null;
        builder60.converter = converter61;
        retrofit.Server server63 = null;
        retrofit.client.Client.Provider provider64 = null;
        java.util.concurrent.Executor executor65 = null;
        java.util.concurrent.Executor executor66 = null;
        retrofit.RequestInterceptor requestInterceptor67 = null;
        retrofit.converter.Converter converter68 = null;
        retrofit.Profiler profiler69 = null;
        retrofit.ErrorHandler errorHandler70 = null;
        retrofit.RestAdapter.Log log71 = retrofit.RestAdapter.Log.NONE;
        log71.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel74 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter(server63, provider64, executor65, executor66, requestInterceptor67, converter68, profiler69, errorHandler70, log71, logLevel74);
        builder60.logLevel = logLevel74;
        retrofit.RestAdapter restAdapter77 = new retrofit.RestAdapter(server22, provider23, executor24, executor25, requestInterceptor26, converter27, profiler28, errorHandler29, log43, logLevel74);
        retrofit.RestAdapter.Builder builder78 = builder14.setLog(log43);
        retrofit.RestAdapter.Builder builder79 = builder0.setLog(log43);
        retrofit.RestAdapter.Builder builder80 = new retrofit.RestAdapter.Builder();
        retrofit.Server server83 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder84 = builder80.setServer(server83);
        retrofit.converter.Converter converter85 = builder80.converter;
        retrofit.RequestInterceptor requestInterceptor86 = builder80.requestInterceptor;
        java.util.concurrent.Executor executor87 = builder80.callbackExecutor;
        retrofit.Profiler profiler88 = builder80.profiler;
        retrofit.Server server91 = new retrofit.Server("", "hi!");
        builder80.server = server91;
        retrofit.RestAdapter restAdapter93 = builder80.build();
        retrofit.RestAdapter.LogLevel logLevel94 = builder80.logLevel;
        retrofit.RestAdapter.Builder builder95 = builder79.setLogLevel(logLevel94);
        boolean boolean96 = logLevel94.log();
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNotNull(log13);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNull(profiler17);
        org.junit.Assert.assertNull(log18);
        org.junit.Assert.assertNull(requestInterceptor19);
        org.junit.Assert.assertNull(errorHandler31);
        org.junit.Assert.assertNull(errorHandler32);
        org.junit.Assert.assertNull(profiler33);
        org.junit.Assert.assertNull(log34);
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler50);
        org.junit.Assert.assertNull(errorHandler51);
        org.junit.Assert.assertNull(profiler52);
        org.junit.Assert.assertNull(executor54);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(log71);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNull(converter85);
        org.junit.Assert.assertNull(requestInterceptor86);
        org.junit.Assert.assertNull(executor87);
        org.junit.Assert.assertNull(profiler88);
        org.junit.Assert.assertNotNull(restAdapter93);
        org.junit.Assert.assertTrue("'" + logLevel94 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel94.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test02869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02869");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = null;
        restAdapter0.httpExecutor = executor2;
        retrofit.RequestInterceptor requestInterceptor4 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler6 = builder5.errorHandler;
        retrofit.client.Client.Provider provider7 = null;
        builder5.clientProvider = provider7;
        retrofit.Server server11 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder12 = builder5.setServer(server11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler14 = builder13.errorHandler;
        retrofit.client.Client.Provider provider15 = null;
        builder13.clientProvider = provider15;
        retrofit.converter.Converter converter17 = builder13.converter;
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder19 = builder13.setLogLevel(logLevel18);
        builder5.logLevel = logLevel18;
        restAdapter0.logLevel = logLevel18;
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter0.getLogLevel();
        retrofit.converter.Converter converter23 = restAdapter0.converter;
        retrofit.client.Response response25 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response27 = restAdapter0.logAndReplaceResponse("hi!", response25, (long) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(converter17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter23);
    }

    @Test
    public void test02870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02870");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        builder0.requestInterceptor = requestInterceptor2;
        java.util.concurrent.Executor executor4 = null;
        builder0.httpExecutor = executor4;
        retrofit.Server server6 = builder0.server;
        java.util.concurrent.Executor executor7 = builder0.callbackExecutor;
        retrofit.Profiler profiler8 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder9 = builder0.setProfiler(profiler8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertNull(executor7);
    }

    @Test
    public void test02871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02871");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        java.util.concurrent.Executor executor3 = builder0.callbackExecutor;
        java.util.concurrent.Executor executor4 = null;
        builder0.callbackExecutor = executor4;
        retrofit.Server server6 = builder0.server;
        java.util.concurrent.Executor executor7 = builder0.httpExecutor;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertNull(executor7);
    }

    @Test
    public void test02872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02872");
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        log12.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel15);
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter16.new RestHandler();
        java.util.concurrent.Executor executor18 = null;
        restAdapter16.callbackExecutor = executor18;
        retrofit.client.Header[] headerArray22 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList23 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList23, headerArray22);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList23, typedOutput25);
        retrofit.client.Request request27 = restAdapter16.logAndReplaceRequest(request26);
        java.util.List<retrofit.client.Header> headerList28 = request26.getHeaders();
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("", "hi!", headerList28, typedOutput29);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("", "", headerList28, typedOutput31);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(request27);
        org.junit.Assert.assertNotNull(headerList28);
    }

    @Test
    public void test02873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02873");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter0.getLogLevel();
        retrofit.ErrorHandler errorHandler20 = null;
        restAdapter0.errorHandler = errorHandler20;
        retrofit.client.Client.Provider provider22 = null;
        restAdapter0.clientProvider = provider22;
        retrofit.ErrorHandler errorHandler24 = restAdapter0.errorHandler;
        retrofit.Server server25 = restAdapter0.server;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler27 = builder26.errorHandler;
        retrofit.ErrorHandler errorHandler28 = builder26.errorHandler;
        retrofit.RestAdapter.Log log29 = null;
        builder26.log = log29;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean32 = logLevel31.log();
        builder26.logLevel = logLevel31;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler35 = restAdapter34.new RestHandler();
        java.util.concurrent.Executor executor36 = null;
        restAdapter34.callbackExecutor = executor36;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor39 = restAdapter38.callbackExecutor;
        java.util.concurrent.Executor executor40 = restAdapter38.callbackExecutor;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler42 = restAdapter41.errorHandler;
        retrofit.Server server45 = new retrofit.Server("", "");
        restAdapter41.server = server45;
        restAdapter38.server = server45;
        restAdapter34.server = server45;
        retrofit.RestAdapter.Builder builder49 = builder26.setServer(server45);
        restAdapter0.server = server45;
        retrofit.RestAdapter.RestHandler restHandler51 = restAdapter0.new RestHandler();
        retrofit.client.Header[] headerArray68 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList69 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList69, headerArray68);
        retrofit.mime.TypedOutput typedOutput71 = null;
        retrofit.client.Request request72 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList69, typedOutput71);
        retrofit.mime.TypedOutput typedOutput73 = null;
        retrofit.client.Request request74 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList69, typedOutput73);
        retrofit.mime.TypedOutput typedOutput75 = null;
        retrofit.client.Request request76 = new retrofit.client.Request("default", "", (java.util.List<retrofit.client.Header>) headerList69, typedOutput75);
        retrofit.mime.TypedOutput typedOutput77 = null;
        retrofit.client.Request request78 = new retrofit.client.Request("default", "", (java.util.List<retrofit.client.Header>) headerList69, typedOutput77);
        java.util.List<retrofit.client.Header> headerList79 = request78.getHeaders();
        retrofit.mime.TypedOutput typedOutput80 = null;
        retrofit.client.Request request81 = new retrofit.client.Request("", "hi!", headerList79, typedOutput80);
        retrofit.mime.TypedOutput typedOutput82 = null;
        retrofit.client.Request request83 = new retrofit.client.Request("hi!", "default", headerList79, typedOutput82);
        retrofit.mime.TypedOutput typedOutput84 = null;
        retrofit.client.Request request85 = new retrofit.client.Request("default", "hi!", headerList79, typedOutput84);
        java.util.List<retrofit.client.Header> headerList86 = request85.getHeaders();
        retrofit.mime.TypedOutput typedOutput87 = null;
        retrofit.client.Request request88 = new retrofit.client.Request("", "hi!", headerList86, typedOutput87);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request89 = restAdapter0.logAndReplaceRequest(request88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNotNull(server25);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNull(executor40);
        org.junit.Assert.assertNull(errorHandler42);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(headerArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(headerList79);
        org.junit.Assert.assertNotNull(headerList86);
    }

    @Test
    public void test02874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02874");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = builder0.clientProvider;
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("default");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor5 = restAdapter4.callbackExecutor;
        retrofit.converter.Converter converter6 = null;
        restAdapter4.converter = converter6;
        retrofit.RestAdapter.RestHandler restHandler8 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel9 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler11 = null;
        builder10.errorHandler = errorHandler11;
        retrofit.converter.Converter converter13 = builder10.converter;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        log22.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel25);
        retrofit.RestAdapter.RestHandler restHandler27 = restAdapter26.new RestHandler();
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler29 = null;
        builder28.errorHandler = errorHandler29;
        retrofit.converter.Converter converter31 = builder28.converter;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.Server server35 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder36 = builder32.setServer(server35);
        retrofit.converter.Converter converter37 = builder32.converter;
        retrofit.RequestInterceptor requestInterceptor38 = builder32.requestInterceptor;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider40 = builder39.clientProvider;
        java.util.concurrent.Executor executor41 = null;
        builder39.callbackExecutor = executor41;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.Server server46 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder47 = builder43.setServer(server46);
        java.lang.String str48 = server46.getUrl();
        retrofit.RestAdapter.Builder builder49 = builder39.setServer(server46);
        builder39.ensureSaneDefaults();
        retrofit.Server server51 = null;
        retrofit.client.Client.Provider provider52 = null;
        java.util.concurrent.Executor executor53 = null;
        java.util.concurrent.Executor executor54 = null;
        retrofit.RequestInterceptor requestInterceptor55 = null;
        retrofit.converter.Converter converter56 = null;
        retrofit.Profiler profiler57 = null;
        retrofit.ErrorHandler errorHandler58 = null;
        retrofit.RestAdapter.Log log59 = retrofit.RestAdapter.Log.NONE;
        log59.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter(server51, provider52, executor53, executor54, requestInterceptor55, converter56, profiler57, errorHandler58, log59, logLevel62);
        retrofit.RestAdapter.RestHandler restHandler64 = restAdapter63.new RestHandler();
        retrofit.RestAdapter.Log log65 = retrofit.RestAdapter.Log.NONE;
        restAdapter63.log = log65;
        retrofit.RestAdapter.Builder builder67 = builder39.setLog(log65);
        retrofit.RestAdapter.Builder builder69 = builder39.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor70 = builder39.requestInterceptor;
        builder32.requestInterceptor = requestInterceptor70;
        builder28.requestInterceptor = requestInterceptor70;
        restAdapter26.requestInterceptor = requestInterceptor70;
        retrofit.RestAdapter.Builder builder74 = builder10.setRequestInterceptor(requestInterceptor70);
        restAdapter4.requestInterceptor = requestInterceptor70;
        builder3.requestInterceptor = requestInterceptor70;
        retrofit.Profiler profiler77 = builder3.profiler;
        retrofit.RequestInterceptor requestInterceptor78 = builder3.requestInterceptor;
        org.junit.Assert.assertNull(provider1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(logLevel9);
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter31);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(converter37);
        org.junit.Assert.assertNull(requestInterceptor38);
        org.junit.Assert.assertNull(provider40);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(log59);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(requestInterceptor70);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNull(profiler77);
        org.junit.Assert.assertNotNull(requestInterceptor78);
    }

    @Test
    public void test02875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02875");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        java.util.concurrent.Executor executor3 = builder0.callbackExecutor;
        retrofit.Profiler profiler4 = builder0.profiler;
        retrofit.ErrorHandler errorHandler5 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.Server server9 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder10 = builder6.setServer(server9);
        retrofit.converter.Converter converter11 = builder6.converter;
        builder6.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler14 = builder13.errorHandler;
        retrofit.Server server17 = new retrofit.Server("", "");
        builder13.server = server17;
        retrofit.RestAdapter restAdapter19 = builder13.build();
        retrofit.Server server20 = restAdapter19.server;
        retrofit.RestAdapter.Builder builder21 = builder6.setServer(server20);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider23 = builder22.clientProvider;
        java.util.concurrent.Executor executor24 = null;
        builder22.callbackExecutor = executor24;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.Server server29 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder30 = builder26.setServer(server29);
        java.lang.String str31 = server29.getUrl();
        retrofit.RestAdapter.Builder builder32 = builder22.setServer(server29);
        builder22.ensureSaneDefaults();
        retrofit.Server server34 = null;
        retrofit.client.Client.Provider provider35 = null;
        java.util.concurrent.Executor executor36 = null;
        java.util.concurrent.Executor executor37 = null;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        retrofit.converter.Converter converter39 = null;
        retrofit.Profiler profiler40 = null;
        retrofit.ErrorHandler errorHandler41 = null;
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        log42.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter(server34, provider35, executor36, executor37, requestInterceptor38, converter39, profiler40, errorHandler41, log42, logLevel45);
        retrofit.RestAdapter.RestHandler restHandler47 = restAdapter46.new RestHandler();
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        restAdapter46.log = log48;
        retrofit.RestAdapter.Builder builder50 = builder22.setLog(log48);
        retrofit.Profiler profiler51 = null;
        builder50.profiler = profiler51;
        retrofit.RequestInterceptor requestInterceptor53 = builder50.requestInterceptor;
        retrofit.RestAdapter restAdapter54 = builder50.build();
        retrofit.RequestInterceptor requestInterceptor55 = builder50.requestInterceptor;
        builder6.requestInterceptor = requestInterceptor55;
        retrofit.RestAdapter.Builder builder57 = builder0.setRequestInterceptor(requestInterceptor55);
        retrofit.Profiler profiler58 = null;
        builder0.profiler = profiler58;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(errorHandler5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNotNull(restAdapter19);
        org.junit.Assert.assertNotNull(server20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(provider23);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(requestInterceptor53);
        org.junit.Assert.assertNotNull(restAdapter54);
        org.junit.Assert.assertNotNull(requestInterceptor55);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test02876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02876");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.client.Header[] headerArray22 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList23 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList23, headerArray22);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList23, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList23, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList23, typedOutput29);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList23, typedOutput31);
        retrofit.mime.TypedOutput typedOutput33 = request32.getBody();
        retrofit.client.Request request34 = restAdapter12.logAndReplaceRequest(request32);
        retrofit.RestAdapter.RestHandler restHandler35 = restAdapter12.new RestHandler();
        retrofit.client.Client.Provider provider36 = restAdapter12.clientProvider;
        retrofit.Server server37 = null;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        log45.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log45, logLevel48);
        retrofit.RestAdapter.RestHandler restHandler50 = restAdapter49.new RestHandler();
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        restAdapter49.log = log51;
        retrofit.converter.Converter converter53 = null;
        restAdapter49.converter = converter53;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.Server server58 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder59 = builder55.setServer(server58);
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor61 = restAdapter60.callbackExecutor;
        java.util.concurrent.Executor executor62 = restAdapter60.callbackExecutor;
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler64 = restAdapter63.errorHandler;
        retrofit.Server server67 = new retrofit.Server("", "");
        restAdapter63.server = server67;
        restAdapter60.server = server67;
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        restAdapter60.log = log70;
        retrofit.RestAdapter.Builder builder72 = builder59.setLog(log70);
        restAdapter49.log = log70;
        retrofit.RestAdapter.RestHandler restHandler74 = restAdapter49.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel75 = restAdapter49.logLevel;
        boolean boolean76 = logLevel75.log();
        restAdapter12.logLevel = logLevel75;
        boolean boolean78 = logLevel75.log();
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(typedOutput33);
        org.junit.Assert.assertNotNull(request34);
        org.junit.Assert.assertNull(provider36);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(executor61);
        org.junit.Assert.assertNull(executor62);
        org.junit.Assert.assertNull(errorHandler64);
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test02877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02877");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        builder4.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter6 = builder4.build();
        retrofit.client.Header[] headerArray19 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList20 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList20, headerArray19);
        retrofit.mime.TypedOutput typedOutput22 = null;
        retrofit.client.Request request23 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList20, typedOutput22);
        retrofit.mime.TypedOutput typedOutput24 = null;
        retrofit.client.Request request25 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList20, typedOutput24);
        retrofit.mime.TypedOutput typedOutput26 = null;
        retrofit.client.Request request27 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList20, typedOutput26);
        retrofit.mime.TypedOutput typedOutput28 = null;
        retrofit.client.Request request29 = new retrofit.client.Request("default", "hi!", (java.util.List<retrofit.client.Header>) headerList20, typedOutput28);
        retrofit.mime.TypedOutput typedOutput30 = null;
        retrofit.client.Request request31 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList20, typedOutput30);
        retrofit.mime.TypedOutput typedOutput32 = null;
        retrofit.client.Request request33 = new retrofit.client.Request("hi!", "default", (java.util.List<retrofit.client.Header>) headerList20, typedOutput32);
        retrofit.client.Request request34 = restAdapter6.logAndReplaceRequest(request33);
        retrofit.client.Client.Provider provider35 = restAdapter6.clientProvider;
        retrofit.Profiler profiler36 = restAdapter6.profiler;
        retrofit.Server server37 = restAdapter6.server;
        retrofit.client.Response response39 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response41 = restAdapter6.logAndReplaceResponse("default", response39, (long) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(restAdapter6);
        org.junit.Assert.assertNotNull(headerArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(request34);
        org.junit.Assert.assertNotNull(provider35);
        org.junit.Assert.assertNull(profiler36);
        org.junit.Assert.assertNotNull(server37);
    }

    @Test
    public void test02878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02878");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter3 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler4 = restAdapter3.errorHandler;
        retrofit.Server server7 = new retrofit.Server("", "");
        restAdapter3.server = server7;
        restAdapter0.server = server7;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor11 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor13 = restAdapter12.callbackExecutor;
        java.util.concurrent.Executor executor14 = restAdapter12.callbackExecutor;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler16 = restAdapter15.errorHandler;
        retrofit.Server server19 = new retrofit.Server("", "");
        restAdapter15.server = server19;
        restAdapter12.server = server19;
        restAdapter10.server = server19;
        retrofit.Profiler profiler23 = restAdapter10.profiler;
        retrofit.ErrorHandler errorHandler24 = null;
        restAdapter10.errorHandler = errorHandler24;
        retrofit.Profiler profiler26 = null;
        restAdapter10.profiler = profiler26;
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel29 = restAdapter10.getLogLevel();
        retrofit.client.Client.Provider provider30 = null;
        restAdapter10.clientProvider = provider30;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean33 = logLevel32.log();
        restAdapter10.logLevel = logLevel32;
        restAdapter0.logLevel = logLevel32;
        retrofit.client.Client.Provider provider36 = restAdapter0.clientProvider;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider38 = builder37.clientProvider;
        java.util.concurrent.Executor executor39 = null;
        builder37.callbackExecutor = executor39;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.Server server44 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder45 = builder41.setServer(server44);
        java.lang.String str46 = server44.getUrl();
        retrofit.RestAdapter.Builder builder47 = builder37.setServer(server44);
        builder37.ensureSaneDefaults();
        retrofit.Server server49 = null;
        retrofit.client.Client.Provider provider50 = null;
        java.util.concurrent.Executor executor51 = null;
        java.util.concurrent.Executor executor52 = null;
        retrofit.RequestInterceptor requestInterceptor53 = null;
        retrofit.converter.Converter converter54 = null;
        retrofit.Profiler profiler55 = null;
        retrofit.ErrorHandler errorHandler56 = null;
        retrofit.RestAdapter.Log log57 = retrofit.RestAdapter.Log.NONE;
        log57.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter(server49, provider50, executor51, executor52, requestInterceptor53, converter54, profiler55, errorHandler56, log57, logLevel60);
        retrofit.RestAdapter.RestHandler restHandler62 = restAdapter61.new RestHandler();
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        restAdapter61.log = log63;
        retrofit.RestAdapter.Builder builder65 = builder37.setLog(log63);
        retrofit.RestAdapter.Builder builder67 = builder37.setServer("hi!");
        retrofit.RestAdapter restAdapter68 = builder37.build();
        retrofit.RestAdapter.RestHandler restHandler69 = restAdapter68.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel70 = restAdapter68.logLevel;
        java.util.concurrent.Executor executor71 = restAdapter68.callbackExecutor;
        retrofit.Server server74 = new retrofit.Server("hi!", "hi!");
        restAdapter68.server = server74;
        restAdapter0.server = server74;
        retrofit.RestAdapter.LogLevel logLevel77 = restAdapter0.logLevel;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(errorHandler4);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNull(profiler23);
        org.junit.Assert.assertNull(logLevel28);
        org.junit.Assert.assertNull(logLevel29);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(provider36);
        org.junit.Assert.assertNull(provider38);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(log57);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(restAdapter68);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(executor71);
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test02879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02879");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean6 = logLevel5.log();
        builder0.logLevel = logLevel5;
        retrofit.ErrorHandler errorHandler8 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder10 = builder0.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor11 = null;
        builder10.requestInterceptor = requestInterceptor11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler14 = builder13.errorHandler;
        retrofit.client.Client.Provider provider15 = null;
        builder13.clientProvider = provider15;
        retrofit.Server server19 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder20 = builder13.setServer(server19);
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.Server server28 = null;
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        log36.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server28, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log36, logLevel39);
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter(server19, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log36, logLevel41);
        log36.log("");
        builder10.log = log36;
        retrofit.RestAdapter.Log log46 = builder10.log;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler48 = builder47.errorHandler;
        retrofit.Server server51 = new retrofit.Server("", "");
        builder47.server = server51;
        retrofit.client.Client.Provider provider53 = null;
        java.util.concurrent.Executor executor54 = null;
        java.util.concurrent.Executor executor55 = null;
        retrofit.RequestInterceptor requestInterceptor56 = null;
        retrofit.converter.Converter converter57 = null;
        retrofit.Profiler profiler58 = null;
        retrofit.ErrorHandler errorHandler59 = null;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler61 = builder60.errorHandler;
        retrofit.Server server64 = new retrofit.Server("", "");
        builder60.server = server64;
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        builder60.log = log66;
        retrofit.Server server68 = null;
        retrofit.client.Client.Provider provider69 = null;
        java.util.concurrent.Executor executor70 = null;
        java.util.concurrent.Executor executor71 = null;
        retrofit.RequestInterceptor requestInterceptor72 = null;
        retrofit.converter.Converter converter73 = null;
        retrofit.Profiler profiler74 = null;
        retrofit.ErrorHandler errorHandler75 = null;
        retrofit.RestAdapter.Log log76 = retrofit.RestAdapter.Log.NONE;
        log76.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel79 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter80 = new retrofit.RestAdapter(server68, provider69, executor70, executor71, requestInterceptor72, converter73, profiler74, errorHandler75, log76, logLevel79);
        retrofit.RestAdapter restAdapter81 = new retrofit.RestAdapter(server51, provider53, executor54, executor55, requestInterceptor56, converter57, profiler58, errorHandler59, log66, logLevel79);
        retrofit.RestAdapter.Builder builder82 = builder10.setLog(log66);
        java.util.concurrent.Executor executor83 = builder10.callbackExecutor;
        retrofit.Profiler profiler84 = builder10.profiler;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder86 = builder10.setServer("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be blank.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertNull(errorHandler48);
        org.junit.Assert.assertNull(errorHandler61);
        org.junit.Assert.assertNotNull(log66);
        org.junit.Assert.assertNotNull(log76);
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNull(executor83);
        org.junit.Assert.assertNull(profiler84);
    }

    @Test
    public void test02880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02880");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder1 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler2 = builder1.errorHandler;
        retrofit.client.Client.Provider provider3 = null;
        builder1.clientProvider = provider3;
        retrofit.Server server7 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder8 = builder1.setServer(server7);
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler10 = builder9.errorHandler;
        retrofit.client.Client.Provider provider11 = null;
        builder9.clientProvider = provider11;
        retrofit.converter.Converter converter13 = builder9.converter;
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder15 = builder9.setLogLevel(logLevel14);
        builder1.logLevel = logLevel14;
        builder0.logLevel = logLevel14;
        retrofit.RequestInterceptor requestInterceptor18 = builder0.requestInterceptor;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor20 = restAdapter19.callbackExecutor;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor22 = restAdapter21.callbackExecutor;
        java.util.concurrent.Executor executor23 = restAdapter21.callbackExecutor;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler25 = restAdapter24.errorHandler;
        retrofit.Server server28 = new retrofit.Server("", "");
        restAdapter24.server = server28;
        restAdapter21.server = server28;
        restAdapter19.server = server28;
        retrofit.Profiler profiler32 = restAdapter19.profiler;
        retrofit.ErrorHandler errorHandler33 = null;
        restAdapter19.errorHandler = errorHandler33;
        retrofit.Profiler profiler35 = null;
        restAdapter19.profiler = profiler35;
        retrofit.RestAdapter.LogLevel logLevel37 = restAdapter19.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter19.logLevel = logLevel38;
        retrofit.RestAdapter.RestHandler restHandler40 = restAdapter19.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor41 = null;
        restAdapter19.requestInterceptor = requestInterceptor41;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler44 = builder43.errorHandler;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        builder43.requestInterceptor = requestInterceptor45;
        retrofit.Server server47 = null;
        retrofit.client.Client.Provider provider48 = null;
        java.util.concurrent.Executor executor49 = null;
        java.util.concurrent.Executor executor50 = null;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        retrofit.converter.Converter converter52 = null;
        retrofit.Profiler profiler53 = null;
        retrofit.ErrorHandler errorHandler54 = null;
        retrofit.RestAdapter.Log log55 = retrofit.RestAdapter.Log.NONE;
        log55.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter(server47, provider48, executor49, executor50, requestInterceptor51, converter52, profiler53, errorHandler54, log55, logLevel58);
        builder43.log = log55;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler62 = builder61.errorHandler;
        retrofit.client.Client.Provider provider63 = null;
        builder61.clientProvider = provider63;
        retrofit.Server server67 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder68 = builder61.setServer(server67);
        retrofit.converter.Converter converter69 = null;
        builder68.converter = converter69;
        retrofit.RestAdapter restAdapter71 = builder68.build();
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler73 = builder72.errorHandler;
        java.util.concurrent.Executor executor74 = null;
        builder72.callbackExecutor = executor74;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider77 = builder76.clientProvider;
        java.util.concurrent.Executor executor78 = null;
        builder76.callbackExecutor = executor78;
        retrofit.RestAdapter.Builder builder80 = new retrofit.RestAdapter.Builder();
        retrofit.Server server83 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder84 = builder80.setServer(server83);
        java.lang.String str85 = server83.getUrl();
        retrofit.RestAdapter.Builder builder86 = builder76.setServer(server83);
        retrofit.RestAdapter.Builder builder87 = builder72.setServer(server83);
        restAdapter71.server = server83;
        retrofit.client.Client.Provider provider89 = restAdapter71.clientProvider;
        builder43.clientProvider = provider89;
        restAdapter19.clientProvider = provider89;
        builder0.clientProvider = provider89;
        retrofit.ErrorHandler errorHandler93 = builder0.errorHandler;
        retrofit.converter.Converter converter94 = builder0.converter;
        java.util.concurrent.Executor executor95 = builder0.callbackExecutor;
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(requestInterceptor18);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNull(errorHandler25);
        org.junit.Assert.assertNull(profiler32);
        org.junit.Assert.assertNull(logLevel37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler44);
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler62);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(restAdapter71);
        org.junit.Assert.assertNull(errorHandler73);
        org.junit.Assert.assertNull(provider77);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "hi!" + "'", str85, "hi!");
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(provider89);
        org.junit.Assert.assertNull(errorHandler93);
        org.junit.Assert.assertNull(converter94);
        org.junit.Assert.assertNull(executor95);
    }

    @Test
    public void test02881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02881");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter0.getLogLevel();
        retrofit.client.Client.Provider provider20 = null;
        restAdapter0.clientProvider = provider20;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean23 = logLevel22.log();
        restAdapter0.logLevel = logLevel22;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        restAdapter0.requestInterceptor = requestInterceptor25;
        retrofit.RestAdapter.RestHandler restHandler27 = restAdapter0.new RestHandler();
        retrofit.Profiler profiler28 = restAdapter0.profiler;
        retrofit.Server server29 = null;
        retrofit.client.Client.Provider provider30 = null;
        java.util.concurrent.Executor executor31 = null;
        java.util.concurrent.Executor executor32 = null;
        retrofit.RequestInterceptor requestInterceptor33 = null;
        retrofit.converter.Converter converter34 = null;
        retrofit.Profiler profiler35 = null;
        retrofit.ErrorHandler errorHandler36 = null;
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        log37.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter(server29, provider30, executor31, executor32, requestInterceptor33, converter34, profiler35, errorHandler36, log37, logLevel40);
        retrofit.RestAdapter.RestHandler restHandler42 = restAdapter41.new RestHandler();
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler44 = builder43.errorHandler;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        builder43.requestInterceptor = requestInterceptor45;
        retrofit.Server server47 = null;
        retrofit.client.Client.Provider provider48 = null;
        java.util.concurrent.Executor executor49 = null;
        java.util.concurrent.Executor executor50 = null;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        retrofit.converter.Converter converter52 = null;
        retrofit.Profiler profiler53 = null;
        retrofit.ErrorHandler errorHandler54 = null;
        retrofit.RestAdapter.Log log55 = retrofit.RestAdapter.Log.NONE;
        log55.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter(server47, provider48, executor49, executor50, requestInterceptor51, converter52, profiler53, errorHandler54, log55, logLevel58);
        builder43.log = log55;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler62 = builder61.errorHandler;
        retrofit.client.Client.Provider provider63 = null;
        builder61.clientProvider = provider63;
        retrofit.Server server67 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder68 = builder61.setServer(server67);
        retrofit.converter.Converter converter69 = null;
        builder68.converter = converter69;
        retrofit.RestAdapter restAdapter71 = builder68.build();
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler73 = builder72.errorHandler;
        java.util.concurrent.Executor executor74 = null;
        builder72.callbackExecutor = executor74;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider77 = builder76.clientProvider;
        java.util.concurrent.Executor executor78 = null;
        builder76.callbackExecutor = executor78;
        retrofit.RestAdapter.Builder builder80 = new retrofit.RestAdapter.Builder();
        retrofit.Server server83 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder84 = builder80.setServer(server83);
        java.lang.String str85 = server83.getUrl();
        retrofit.RestAdapter.Builder builder86 = builder76.setServer(server83);
        retrofit.RestAdapter.Builder builder87 = builder72.setServer(server83);
        restAdapter71.server = server83;
        retrofit.client.Client.Provider provider89 = restAdapter71.clientProvider;
        builder43.clientProvider = provider89;
        restAdapter41.clientProvider = provider89;
        restAdapter0.clientProvider = provider89;
        retrofit.RestAdapter.RestHandler restHandler93 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel94 = restAdapter0.logLevel;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(profiler28);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler44);
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler62);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(restAdapter71);
        org.junit.Assert.assertNull(errorHandler73);
        org.junit.Assert.assertNull(provider77);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "hi!" + "'", str85, "hi!");
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(provider89);
        org.junit.Assert.assertTrue("'" + logLevel94 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel94.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test02882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02882");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        java.util.concurrent.Executor executor18 = null;
        restAdapter0.httpExecutor = executor18;
        retrofit.Server server20 = restAdapter0.server;
        retrofit.ErrorHandler errorHandler21 = restAdapter0.errorHandler;
        retrofit.Profiler profiler22 = null;
        restAdapter0.profiler = profiler22;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNotNull(server20);
        org.junit.Assert.assertNull(errorHandler21);
    }

    @Test
    public void test02883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02883");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.converter.Converter converter3 = null;
        builder0.converter = converter3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        builder0.requestInterceptor = requestInterceptor5;
        retrofit.RestAdapter.Log log7 = builder0.log;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor9 = restAdapter8.callbackExecutor;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor11 = restAdapter10.callbackExecutor;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler14 = restAdapter13.errorHandler;
        retrofit.Server server17 = new retrofit.Server("", "");
        restAdapter13.server = server17;
        restAdapter10.server = server17;
        restAdapter8.server = server17;
        retrofit.Profiler profiler21 = restAdapter8.profiler;
        retrofit.ErrorHandler errorHandler22 = null;
        restAdapter8.errorHandler = errorHandler22;
        retrofit.RequestInterceptor requestInterceptor24 = restAdapter8.requestInterceptor;
        retrofit.ErrorHandler errorHandler25 = restAdapter8.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler26 = restAdapter8.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler27 = restAdapter8.new RestHandler();
        retrofit.ErrorHandler errorHandler28 = restAdapter8.errorHandler;
        retrofit.client.Client.Provider provider29 = restAdapter8.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter8.getLogLevel();
        retrofit.converter.Converter converter31 = restAdapter8.converter;
        retrofit.Server server32 = restAdapter8.server;
        java.lang.String str33 = server32.getName();
        retrofit.RestAdapter.Builder builder34 = builder0.setServer(server32);
        retrofit.Server server35 = builder0.server;
        retrofit.RequestInterceptor requestInterceptor36 = builder0.requestInterceptor;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(profiler21);
        org.junit.Assert.assertNull(requestInterceptor24);
        org.junit.Assert.assertNull(errorHandler25);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertNull(provider29);
        org.junit.Assert.assertNull(logLevel30);
        org.junit.Assert.assertNull(converter31);
        org.junit.Assert.assertNotNull(server32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(server35);
        org.junit.Assert.assertNull(requestInterceptor36);
    }

    @Test
    public void test02884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02884");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.Profiler profiler3 = builder0.profiler;
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor5 = restAdapter4.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.Server server9 = new retrofit.Server("hi!", "hi!");
        restAdapter4.server = server9;
        retrofit.RestAdapter.Builder builder11 = builder0.setServer(server9);
        retrofit.converter.Converter converter12 = null;
        builder11.converter = converter12;
        retrofit.Server server16 = new retrofit.Server("hi!", "");
        builder11.server = server16;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor19 = restAdapter18.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter18.new RestHandler();
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor22 = restAdapter21.callbackExecutor;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor24 = restAdapter23.callbackExecutor;
        java.util.concurrent.Executor executor25 = restAdapter23.callbackExecutor;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler27 = restAdapter26.errorHandler;
        retrofit.Server server30 = new retrofit.Server("", "");
        restAdapter26.server = server30;
        restAdapter23.server = server30;
        restAdapter21.server = server30;
        retrofit.Profiler profiler34 = restAdapter21.profiler;
        retrofit.ErrorHandler errorHandler35 = null;
        restAdapter21.errorHandler = errorHandler35;
        retrofit.Profiler profiler37 = null;
        restAdapter21.profiler = profiler37;
        retrofit.RestAdapter.LogLevel logLevel39 = restAdapter21.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter21.logLevel = logLevel40;
        restAdapter18.logLevel = logLevel40;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.Server server46 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder47 = builder43.setServer(server46);
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor49 = restAdapter48.callbackExecutor;
        java.util.concurrent.Executor executor50 = restAdapter48.callbackExecutor;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler52 = restAdapter51.errorHandler;
        retrofit.Server server55 = new retrofit.Server("", "");
        restAdapter51.server = server55;
        restAdapter48.server = server55;
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        restAdapter48.log = log58;
        retrofit.RestAdapter.Builder builder60 = builder47.setLog(log58);
        retrofit.RestAdapter.LogLevel logLevel61 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder62 = builder47.setLogLevel(logLevel61);
        retrofit.Profiler profiler63 = null;
        builder62.profiler = profiler63;
        retrofit.converter.Converter converter65 = null;
        builder62.converter = converter65;
        retrofit.ErrorHandler errorHandler67 = null;
        builder62.errorHandler = errorHandler67;
        retrofit.RestAdapter restAdapter69 = builder62.build();
        retrofit.ErrorHandler errorHandler70 = builder62.errorHandler;
        restAdapter18.errorHandler = errorHandler70;
        retrofit.RestAdapter.Builder builder72 = builder11.setErrorHandler(errorHandler70);
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler74 = builder73.errorHandler;
        retrofit.client.Client.Provider provider75 = null;
        builder73.clientProvider = provider75;
        retrofit.converter.Converter converter77 = builder73.converter;
        retrofit.RestAdapter.LogLevel logLevel78 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder79 = builder73.setLogLevel(logLevel78);
        builder11.logLevel = logLevel78;
        retrofit.RestAdapter restAdapter81 = builder11.build();
        retrofit.Profiler profiler82 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder83 = builder11.setProfiler(profiler82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNull(profiler34);
        org.junit.Assert.assertNull(logLevel39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(executor49);
        org.junit.Assert.assertNull(executor50);
        org.junit.Assert.assertNull(errorHandler52);
        org.junit.Assert.assertNotNull(log58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(restAdapter69);
        org.junit.Assert.assertNotNull(errorHandler70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNull(errorHandler74);
        org.junit.Assert.assertNull(converter77);
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(restAdapter81);
    }

    @Test
    public void test02885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02885");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RequestInterceptor requestInterceptor13 = null;
        restAdapter12.requestInterceptor = requestInterceptor13;
        retrofit.client.Response response16 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response18 = restAdapter12.logAndReplaceResponse("hi!", response16, (long) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test02886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02886");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.client.Header[] headerArray22 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList23 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList23, headerArray22);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList23, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList23, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList23, typedOutput29);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList23, typedOutput31);
        retrofit.mime.TypedOutput typedOutput33 = request32.getBody();
        retrofit.client.Request request34 = restAdapter12.logAndReplaceRequest(request32);
        retrofit.RestAdapter.RestHandler restHandler35 = restAdapter12.new RestHandler();
        retrofit.client.Client.Provider provider36 = restAdapter12.clientProvider;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor38 = restAdapter37.callbackExecutor;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor40 = restAdapter39.callbackExecutor;
        java.util.concurrent.Executor executor41 = restAdapter39.callbackExecutor;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler43 = restAdapter42.errorHandler;
        retrofit.Server server46 = new retrofit.Server("", "");
        restAdapter42.server = server46;
        restAdapter39.server = server46;
        restAdapter37.server = server46;
        retrofit.Profiler profiler50 = restAdapter37.profiler;
        retrofit.ErrorHandler errorHandler51 = null;
        restAdapter37.errorHandler = errorHandler51;
        retrofit.Profiler profiler53 = null;
        restAdapter37.profiler = profiler53;
        retrofit.RestAdapter.LogLevel logLevel55 = restAdapter37.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel56 = restAdapter37.getLogLevel();
        retrofit.ErrorHandler errorHandler57 = null;
        restAdapter37.errorHandler = errorHandler57;
        retrofit.client.Client.Provider provider59 = null;
        restAdapter37.clientProvider = provider59;
        retrofit.ErrorHandler errorHandler61 = restAdapter37.errorHandler;
        retrofit.Server server62 = restAdapter37.server;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler64 = builder63.errorHandler;
        retrofit.ErrorHandler errorHandler65 = builder63.errorHandler;
        retrofit.RestAdapter.Log log66 = null;
        builder63.log = log66;
        retrofit.RestAdapter.LogLevel logLevel68 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean69 = logLevel68.log();
        builder63.logLevel = logLevel68;
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler72 = restAdapter71.new RestHandler();
        java.util.concurrent.Executor executor73 = null;
        restAdapter71.callbackExecutor = executor73;
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor76 = restAdapter75.callbackExecutor;
        java.util.concurrent.Executor executor77 = restAdapter75.callbackExecutor;
        retrofit.RestAdapter restAdapter78 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler79 = restAdapter78.errorHandler;
        retrofit.Server server82 = new retrofit.Server("", "");
        restAdapter78.server = server82;
        restAdapter75.server = server82;
        restAdapter71.server = server82;
        retrofit.RestAdapter.Builder builder86 = builder63.setServer(server82);
        restAdapter37.server = server82;
        restAdapter12.server = server82;
        retrofit.RestAdapter.Builder builder89 = new retrofit.RestAdapter.Builder();
        retrofit.Server server92 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder93 = builder89.setServer(server92);
        retrofit.RestAdapter.LogLevel logLevel94 = builder93.logLevel;
        restAdapter12.setLogLevel(logLevel94);
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(typedOutput33);
        org.junit.Assert.assertNotNull(request34);
        org.junit.Assert.assertNull(provider36);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNull(executor40);
        org.junit.Assert.assertNull(executor41);
        org.junit.Assert.assertNull(errorHandler43);
        org.junit.Assert.assertNull(profiler50);
        org.junit.Assert.assertNull(logLevel55);
        org.junit.Assert.assertNull(logLevel56);
        org.junit.Assert.assertNull(errorHandler61);
        org.junit.Assert.assertNotNull(server62);
        org.junit.Assert.assertNull(errorHandler64);
        org.junit.Assert.assertNull(errorHandler65);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(executor76);
        org.junit.Assert.assertNull(executor77);
        org.junit.Assert.assertNull(errorHandler79);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertTrue("'" + logLevel94 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel94.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test02887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02887");
        retrofit.client.Header[] headerArray10 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList11 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList11, headerArray10);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList11, typedOutput13);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList11, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList11, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("default", "hi!", (java.util.List<retrofit.client.Header>) headerList11, typedOutput19);
        java.util.List<retrofit.client.Header> headerList21 = request20.getHeaders();
        retrofit.mime.TypedOutput typedOutput22 = null;
        retrofit.client.Request request23 = new retrofit.client.Request("default", "default", headerList21, typedOutput22);
        org.junit.Assert.assertNotNull(headerArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(headerList21);
    }

    @Test
    public void test02888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02888");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        builder0.requestInterceptor = requestInterceptor5;
        retrofit.RestAdapter.LogLevel logLevel7 = builder0.logLevel;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler9 = builder8.errorHandler;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        builder8.requestInterceptor = requestInterceptor10;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler13 = builder12.errorHandler;
        retrofit.ErrorHandler errorHandler14 = builder12.errorHandler;
        retrofit.Profiler profiler15 = builder12.profiler;
        retrofit.RestAdapter.Log log16 = builder12.log;
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.FULL;
        builder12.logLevel = logLevel17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.Server server22 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder23 = builder19.setServer(server22);
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor25 = restAdapter24.callbackExecutor;
        java.util.concurrent.Executor executor26 = restAdapter24.callbackExecutor;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler28 = restAdapter27.errorHandler;
        retrofit.Server server31 = new retrofit.Server("", "");
        restAdapter27.server = server31;
        restAdapter24.server = server31;
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        restAdapter24.log = log34;
        retrofit.RestAdapter.Builder builder36 = builder23.setLog(log34);
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder38 = builder23.setLogLevel(logLevel37);
        retrofit.Profiler profiler39 = null;
        builder38.profiler = profiler39;
        retrofit.converter.Converter converter41 = null;
        builder38.converter = converter41;
        retrofit.ErrorHandler errorHandler43 = null;
        builder38.errorHandler = errorHandler43;
        retrofit.RestAdapter restAdapter45 = builder38.build();
        retrofit.ErrorHandler errorHandler46 = builder38.errorHandler;
        retrofit.RestAdapter.Builder builder47 = builder12.setErrorHandler(errorHandler46);
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler49 = builder48.errorHandler;
        retrofit.ErrorHandler errorHandler50 = builder48.errorHandler;
        retrofit.Profiler profiler51 = builder48.profiler;
        retrofit.RestAdapter.Log log52 = builder48.log;
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.FULL;
        builder48.logLevel = logLevel53;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.Server server58 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder59 = builder55.setServer(server58);
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor61 = restAdapter60.callbackExecutor;
        java.util.concurrent.Executor executor62 = restAdapter60.callbackExecutor;
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler64 = restAdapter63.errorHandler;
        retrofit.Server server67 = new retrofit.Server("", "");
        restAdapter63.server = server67;
        restAdapter60.server = server67;
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        restAdapter60.log = log70;
        retrofit.RestAdapter.Builder builder72 = builder59.setLog(log70);
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder74 = builder59.setLogLevel(logLevel73);
        retrofit.Profiler profiler75 = null;
        builder74.profiler = profiler75;
        retrofit.converter.Converter converter77 = null;
        builder74.converter = converter77;
        retrofit.ErrorHandler errorHandler79 = null;
        builder74.errorHandler = errorHandler79;
        retrofit.RestAdapter restAdapter81 = builder74.build();
        retrofit.ErrorHandler errorHandler82 = builder74.errorHandler;
        retrofit.RestAdapter.Builder builder83 = builder48.setErrorHandler(errorHandler82);
        retrofit.RestAdapter.Builder builder84 = builder12.setErrorHandler(errorHandler82);
        retrofit.RestAdapter.Builder builder85 = builder8.setErrorHandler(errorHandler82);
        builder0.errorHandler = errorHandler82;
        retrofit.RestAdapter.Builder builder88 = builder0.setServer("default");
        retrofit.Profiler profiler89 = builder88.profiler;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertTrue("'" + logLevel7 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel7.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNull(log16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(restAdapter45);
        org.junit.Assert.assertNotNull(errorHandler46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(errorHandler49);
        org.junit.Assert.assertNull(errorHandler50);
        org.junit.Assert.assertNull(profiler51);
        org.junit.Assert.assertNull(log52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(executor61);
        org.junit.Assert.assertNull(executor62);
        org.junit.Assert.assertNull(errorHandler64);
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(restAdapter81);
        org.junit.Assert.assertNotNull(errorHandler82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNull(profiler89);
    }

    @Test
    public void test02889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02889");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        builder0.requestInterceptor = requestInterceptor2;
        java.util.concurrent.Executor executor4 = null;
        builder0.httpExecutor = executor4;
        retrofit.converter.Converter converter6 = builder0.converter;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler8 = builder7.errorHandler;
        retrofit.client.Client.Provider provider9 = null;
        builder7.clientProvider = provider9;
        retrofit.Server server13 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder14 = builder7.setServer(server13);
        retrofit.converter.Converter converter15 = null;
        builder14.converter = converter15;
        retrofit.RestAdapter restAdapter17 = builder14.build();
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler19 = builder18.errorHandler;
        java.util.concurrent.Executor executor20 = null;
        builder18.callbackExecutor = executor20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider23 = builder22.clientProvider;
        java.util.concurrent.Executor executor24 = null;
        builder22.callbackExecutor = executor24;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.Server server29 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder30 = builder26.setServer(server29);
        java.lang.String str31 = server29.getUrl();
        retrofit.RestAdapter.Builder builder32 = builder22.setServer(server29);
        retrofit.RestAdapter.Builder builder33 = builder18.setServer(server29);
        restAdapter17.server = server29;
        retrofit.Server server35 = restAdapter17.server;
        retrofit.RestAdapter.RestHandler restHandler36 = restAdapter17.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel37 = restAdapter17.getLogLevel();
        retrofit.RestAdapter.Builder builder38 = builder0.setLogLevel(logLevel37);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter39 = builder38.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(restAdapter17);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(provider23);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(server35);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test02890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02890");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.client.Client.Provider provider2 = restAdapter0.clientProvider;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler4 = builder3.errorHandler;
        retrofit.Server server7 = new retrofit.Server("", "");
        builder3.server = server7;
        retrofit.RestAdapter.Log log9 = retrofit.RestAdapter.Log.NONE;
        builder3.log = log9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler12 = builder11.errorHandler;
        retrofit.client.Client.Provider provider13 = null;
        builder11.clientProvider = provider13;
        retrofit.Server server17 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder18 = builder11.setServer(server17);
        retrofit.converter.Converter converter19 = null;
        builder18.converter = converter19;
        retrofit.RestAdapter restAdapter21 = builder18.build();
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler23 = builder22.errorHandler;
        java.util.concurrent.Executor executor24 = null;
        builder22.callbackExecutor = executor24;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider27 = builder26.clientProvider;
        java.util.concurrent.Executor executor28 = null;
        builder26.callbackExecutor = executor28;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.Server server33 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder34 = builder30.setServer(server33);
        java.lang.String str35 = server33.getUrl();
        retrofit.RestAdapter.Builder builder36 = builder26.setServer(server33);
        retrofit.RestAdapter.Builder builder37 = builder22.setServer(server33);
        restAdapter21.server = server33;
        java.util.concurrent.Executor executor39 = restAdapter21.httpExecutor;
        builder3.httpExecutor = executor39;
        restAdapter0.callbackExecutor = executor39;
        retrofit.RestAdapter.RestHandler restHandler42 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor43 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.Log log44 = restAdapter0.log;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler46 = builder45.errorHandler;
        retrofit.client.Client.Provider provider47 = null;
        builder45.clientProvider = provider47;
        retrofit.converter.Converter converter49 = builder45.converter;
        retrofit.RestAdapter.LogLevel logLevel50 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder51 = builder45.setLogLevel(logLevel50);
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor53 = restAdapter52.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean55 = logLevel54.log();
        restAdapter52.logLevel = logLevel54;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler58 = builder57.errorHandler;
        retrofit.client.Client.Provider provider59 = null;
        builder57.clientProvider = provider59;
        retrofit.Server server63 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder64 = builder57.setServer(server63);
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler66 = builder65.errorHandler;
        retrofit.client.Client.Provider provider67 = null;
        builder65.clientProvider = provider67;
        retrofit.converter.Converter converter69 = builder65.converter;
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder71 = builder65.setLogLevel(logLevel70);
        builder57.logLevel = logLevel70;
        boolean boolean73 = logLevel70.log();
        restAdapter52.logLevel = logLevel70;
        retrofit.RestAdapter.Builder builder75 = builder51.setLogLevel(logLevel70);
        retrofit.RestAdapter restAdapter76 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor77 = restAdapter76.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel78 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean79 = logLevel78.log();
        restAdapter76.logLevel = logLevel78;
        builder75.logLevel = logLevel78;
        restAdapter0.logLevel = logLevel78;
        org.junit.Assert.assertNull(provider2);
        org.junit.Assert.assertNull(errorHandler4);
        org.junit.Assert.assertNotNull(log9);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(restAdapter21);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNull(provider27);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(executor39);
        org.junit.Assert.assertNull(executor43);
        org.junit.Assert.assertNull(log44);
        org.junit.Assert.assertNull(errorHandler46);
        org.junit.Assert.assertNull(converter49);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(executor53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(errorHandler58);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(errorHandler66);
        org.junit.Assert.assertNull(converter69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNull(executor77);
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test02891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02891");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler15 = null;
        builder14.errorHandler = errorHandler15;
        retrofit.converter.Converter converter17 = builder14.converter;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server21 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder22 = builder18.setServer(server21);
        retrofit.converter.Converter converter23 = builder18.converter;
        retrofit.RequestInterceptor requestInterceptor24 = builder18.requestInterceptor;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider26 = builder25.clientProvider;
        java.util.concurrent.Executor executor27 = null;
        builder25.callbackExecutor = executor27;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.Server server32 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder33 = builder29.setServer(server32);
        java.lang.String str34 = server32.getUrl();
        retrofit.RestAdapter.Builder builder35 = builder25.setServer(server32);
        builder25.ensureSaneDefaults();
        retrofit.Server server37 = null;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        log45.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log45, logLevel48);
        retrofit.RestAdapter.RestHandler restHandler50 = restAdapter49.new RestHandler();
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        restAdapter49.log = log51;
        retrofit.RestAdapter.Builder builder53 = builder25.setLog(log51);
        retrofit.RestAdapter.Builder builder55 = builder25.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor56 = builder25.requestInterceptor;
        builder18.requestInterceptor = requestInterceptor56;
        builder14.requestInterceptor = requestInterceptor56;
        restAdapter12.requestInterceptor = requestInterceptor56;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.Server server63 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder64 = builder60.setServer(server63);
        retrofit.RestAdapter.LogLevel logLevel65 = builder64.logLevel;
        restAdapter12.setLogLevel(logLevel65);
        java.util.concurrent.Executor executor67 = restAdapter12.httpExecutor;
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter17);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(converter23);
        org.junit.Assert.assertNull(requestInterceptor24);
        org.junit.Assert.assertNull(provider26);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(requestInterceptor56);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor67);
    }

    @Test
    public void test02892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02892");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        restAdapter5.log = log15;
        retrofit.RestAdapter.Builder builder17 = builder4.setLog(log15);
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server21 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder22 = builder18.setServer(server21);
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor24 = restAdapter23.callbackExecutor;
        java.util.concurrent.Executor executor25 = restAdapter23.callbackExecutor;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler27 = restAdapter26.errorHandler;
        retrofit.Server server30 = new retrofit.Server("", "");
        restAdapter26.server = server30;
        restAdapter23.server = server30;
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        restAdapter23.log = log33;
        retrofit.RestAdapter.Builder builder35 = builder22.setLog(log33);
        retrofit.converter.Converter converter36 = null;
        builder35.converter = converter36;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler39 = builder38.errorHandler;
        retrofit.ErrorHandler errorHandler40 = builder38.errorHandler;
        retrofit.Profiler profiler41 = builder38.profiler;
        retrofit.RestAdapter.Log log42 = builder38.log;
        retrofit.Server server43 = null;
        retrofit.client.Client.Provider provider44 = null;
        java.util.concurrent.Executor executor45 = null;
        java.util.concurrent.Executor executor46 = null;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        retrofit.converter.Converter converter48 = null;
        retrofit.Profiler profiler49 = null;
        retrofit.ErrorHandler errorHandler50 = null;
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        log51.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter(server43, provider44, executor45, executor46, requestInterceptor47, converter48, profiler49, errorHandler50, log51, logLevel54);
        builder38.log = log51;
        retrofit.RestAdapter.Builder builder57 = builder35.setLog(log51);
        retrofit.RestAdapter.LogLevel logLevel58 = builder35.logLevel;
        retrofit.RestAdapter.Builder builder59 = builder17.setLogLevel(logLevel58);
        retrofit.RestAdapter restAdapter60 = builder17.build();
        retrofit.Server server61 = null;
        retrofit.client.Client.Provider provider62 = null;
        java.util.concurrent.Executor executor63 = null;
        java.util.concurrent.Executor executor64 = null;
        retrofit.RequestInterceptor requestInterceptor65 = null;
        retrofit.converter.Converter converter66 = null;
        retrofit.Profiler profiler67 = null;
        retrofit.ErrorHandler errorHandler68 = null;
        retrofit.RestAdapter.Log log69 = retrofit.RestAdapter.Log.NONE;
        log69.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel72 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter73 = new retrofit.RestAdapter(server61, provider62, executor63, executor64, requestInterceptor65, converter66, profiler67, errorHandler68, log69, logLevel72);
        retrofit.RequestInterceptor requestInterceptor74 = null;
        restAdapter73.requestInterceptor = requestInterceptor74;
        retrofit.RestAdapter.LogLevel logLevel76 = restAdapter73.logLevel;
        retrofit.Server server77 = restAdapter73.server;
        retrofit.client.Header[] headerArray86 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList87 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList87, headerArray86);
        retrofit.mime.TypedOutput typedOutput89 = null;
        retrofit.client.Request request90 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList87, typedOutput89);
        retrofit.mime.TypedOutput typedOutput91 = null;
        retrofit.client.Request request92 = new retrofit.client.Request("", "default", (java.util.List<retrofit.client.Header>) headerList87, typedOutput91);
        retrofit.mime.TypedOutput typedOutput93 = null;
        retrofit.client.Request request94 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList87, typedOutput93);
        retrofit.mime.TypedOutput typedOutput95 = null;
        retrofit.client.Request request96 = new retrofit.client.Request("", "default", (java.util.List<retrofit.client.Header>) headerList87, typedOutput95);
        retrofit.client.Request request97 = restAdapter73.logAndReplaceRequest(request96);
        retrofit.client.Request request98 = restAdapter60.logAndReplaceRequest(request96);
        retrofit.RestAdapter.Log log99 = restAdapter60.log;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNull(profiler41);
        org.junit.Assert.assertNull(log42);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(restAdapter60);
        org.junit.Assert.assertNotNull(log69);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(server77);
        org.junit.Assert.assertNotNull(headerArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(request97);
        org.junit.Assert.assertNotNull(request98);
        org.junit.Assert.assertNotNull(log99);
    }

    @Test
    public void test02893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02893");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = builder0.clientProvider;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server7 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder8 = builder4.setServer(server7);
        java.lang.String str9 = server7.getUrl();
        retrofit.RestAdapter.Builder builder10 = builder0.setServer(server7);
        builder0.ensureSaneDefaults();
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        log20.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel23);
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter24.new RestHandler();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        restAdapter24.log = log26;
        retrofit.RestAdapter.Builder builder28 = builder0.setLog(log26);
        retrofit.RestAdapter.Builder builder30 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder32 = builder30.setServer("hi!");
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler34 = builder33.errorHandler;
        retrofit.Server server37 = new retrofit.Server("", "");
        builder33.server = server37;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor40 = restAdapter39.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler41 = restAdapter39.new RestHandler();
        retrofit.Server server44 = new retrofit.Server("hi!", "hi!");
        restAdapter39.server = server44;
        retrofit.RestAdapter.Builder builder46 = builder33.setServer(server44);
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler48 = builder47.errorHandler;
        retrofit.RequestInterceptor requestInterceptor49 = null;
        builder47.requestInterceptor = requestInterceptor49;
        java.util.concurrent.Executor executor51 = null;
        builder47.httpExecutor = executor51;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler54 = null;
        builder53.errorHandler = errorHandler54;
        retrofit.ErrorHandler errorHandler56 = builder53.errorHandler;
        retrofit.RestAdapter.Builder builder58 = builder53.setServer("hi!");
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler60 = builder59.errorHandler;
        retrofit.ErrorHandler errorHandler61 = builder59.errorHandler;
        retrofit.Profiler profiler62 = builder59.profiler;
        retrofit.RestAdapter.Log log63 = builder59.log;
        retrofit.RestAdapter.LogLevel logLevel64 = retrofit.RestAdapter.LogLevel.FULL;
        builder59.logLevel = logLevel64;
        retrofit.RestAdapter.Builder builder66 = builder58.setLogLevel(logLevel64);
        retrofit.RestAdapter.Builder builder67 = builder47.setLogLevel(logLevel64);
        builder46.logLevel = logLevel64;
        retrofit.RestAdapter.Log log69 = retrofit.RestAdapter.Log.NONE;
        log69.log("hi!");
        log69.log("hi!");
        log69.log("hi!");
        retrofit.RestAdapter.Builder builder76 = builder46.setLog(log69);
        log69.log("hi!");
        builder32.log = log69;
        log69.log("default");
        org.junit.Assert.assertNull(provider1);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(errorHandler34);
        org.junit.Assert.assertNull(executor40);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(errorHandler48);
        org.junit.Assert.assertNull(errorHandler56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(errorHandler60);
        org.junit.Assert.assertNull(errorHandler61);
        org.junit.Assert.assertNull(profiler62);
        org.junit.Assert.assertNull(log63);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(log69);
        org.junit.Assert.assertNotNull(builder76);
    }

    @Test
    public void test02894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02894");
        retrofit.client.Header[] headerArray16 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList17 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList17, headerArray16);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList17, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList17, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList17, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList17, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList17, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("default", "default", (java.util.List<retrofit.client.Header>) headerList17, typedOutput29);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("default", "", (java.util.List<retrofit.client.Header>) headerList17, typedOutput31);
        retrofit.mime.TypedOutput typedOutput33 = null;
        retrofit.client.Request request34 = new retrofit.client.Request("default", "default", (java.util.List<retrofit.client.Header>) headerList17, typedOutput33);
        retrofit.mime.TypedOutput typedOutput35 = request34.getBody();
        org.junit.Assert.assertNotNull(headerArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(typedOutput35);
    }

    @Test
    public void test02895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02895");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        restAdapter12.log = log14;
        retrofit.converter.Converter converter16 = null;
        restAdapter12.converter = converter16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter12.getLogLevel();
        retrofit.ErrorHandler errorHandler19 = restAdapter12.errorHandler;
        retrofit.Profiler profiler20 = restAdapter12.profiler;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler22 = null;
        builder21.errorHandler = errorHandler22;
        retrofit.ErrorHandler errorHandler24 = builder21.errorHandler;
        retrofit.RestAdapter.Builder builder26 = builder21.setServer("hi!");
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler28 = builder27.errorHandler;
        retrofit.ErrorHandler errorHandler29 = builder27.errorHandler;
        retrofit.Profiler profiler30 = builder27.profiler;
        retrofit.RestAdapter.Log log31 = builder27.log;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.FULL;
        builder27.logLevel = logLevel32;
        retrofit.RestAdapter.Builder builder34 = builder26.setLogLevel(logLevel32);
        retrofit.Server server35 = null;
        retrofit.client.Client.Provider provider36 = null;
        java.util.concurrent.Executor executor37 = null;
        java.util.concurrent.Executor executor38 = null;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        retrofit.converter.Converter converter40 = null;
        retrofit.Profiler profiler41 = null;
        retrofit.ErrorHandler errorHandler42 = null;
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        log43.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter(server35, provider36, executor37, executor38, requestInterceptor39, converter40, profiler41, errorHandler42, log43, logLevel46);
        log43.log("");
        retrofit.RestAdapter.Builder builder50 = builder34.setLog(log43);
        restAdapter12.log = log43;
        retrofit.RestAdapter.RestHandler restHandler52 = restAdapter12.new RestHandler();
        java.util.concurrent.Executor executor53 = restAdapter12.httpExecutor;
        retrofit.Server server54 = restAdapter12.server;
        retrofit.Server server55 = restAdapter12.server;
        retrofit.RestAdapter.Log log56 = restAdapter12.log;
        log56.log("");
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(profiler20);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNull(profiler30);
        org.junit.Assert.assertNull(log31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(executor53);
        org.junit.Assert.assertNull(server54);
        org.junit.Assert.assertNull(server55);
        org.junit.Assert.assertNotNull(log56);
    }

    @Test
    public void test02896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02896");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.ErrorHandler errorHandler3 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder7 = builder5.setServer("hi!");
        retrofit.ErrorHandler errorHandler8 = builder5.errorHandler;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler10 = builder9.errorHandler;
        retrofit.ErrorHandler errorHandler11 = builder9.errorHandler;
        retrofit.Profiler profiler12 = builder9.profiler;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor14 = restAdapter13.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter13.new RestHandler();
        retrofit.Server server18 = new retrofit.Server("hi!", "hi!");
        restAdapter13.server = server18;
        retrofit.RestAdapter.Builder builder20 = builder9.setServer(server18);
        retrofit.converter.Converter converter21 = null;
        builder20.converter = converter21;
        builder20.ensureSaneDefaults();
        retrofit.RestAdapter.Log log24 = null;
        builder20.log = log24;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler27 = builder26.errorHandler;
        retrofit.ErrorHandler errorHandler28 = builder26.errorHandler;
        retrofit.RestAdapter.Log log29 = null;
        builder26.log = log29;
        retrofit.Server server33 = new retrofit.Server("hi!", "hi!");
        builder26.server = server33;
        retrofit.client.Client.Provider provider35 = null;
        builder26.clientProvider = provider35;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor38 = restAdapter37.callbackExecutor;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor40 = restAdapter39.callbackExecutor;
        java.util.concurrent.Executor executor41 = restAdapter39.callbackExecutor;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler43 = restAdapter42.errorHandler;
        retrofit.Server server46 = new retrofit.Server("", "");
        restAdapter42.server = server46;
        restAdapter39.server = server46;
        restAdapter37.server = server46;
        retrofit.Profiler profiler50 = restAdapter37.profiler;
        retrofit.ErrorHandler errorHandler51 = null;
        restAdapter37.errorHandler = errorHandler51;
        retrofit.RequestInterceptor requestInterceptor53 = restAdapter37.requestInterceptor;
        retrofit.RestAdapter.RestHandler restHandler54 = restAdapter37.new RestHandler();
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler56 = builder55.errorHandler;
        retrofit.client.Client.Provider provider57 = null;
        builder55.clientProvider = provider57;
        retrofit.Server server61 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder62 = builder55.setServer(server61);
        retrofit.converter.Converter converter63 = null;
        builder62.converter = converter63;
        retrofit.RestAdapter restAdapter65 = builder62.build();
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler67 = builder66.errorHandler;
        java.util.concurrent.Executor executor68 = null;
        builder66.callbackExecutor = executor68;
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider71 = builder70.clientProvider;
        java.util.concurrent.Executor executor72 = null;
        builder70.callbackExecutor = executor72;
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        retrofit.Server server77 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder78 = builder74.setServer(server77);
        java.lang.String str79 = server77.getUrl();
        retrofit.RestAdapter.Builder builder80 = builder70.setServer(server77);
        retrofit.RestAdapter.Builder builder81 = builder66.setServer(server77);
        restAdapter65.server = server77;
        java.util.concurrent.Executor executor83 = restAdapter65.httpExecutor;
        restAdapter37.httpExecutor = executor83;
        builder26.httpExecutor = executor83;
        builder20.callbackExecutor = executor83;
        builder5.httpExecutor = executor83;
        retrofit.Profiler profiler88 = builder5.profiler;
        retrofit.client.Client client89 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder90 = builder5.setClient(client89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(profiler12);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNull(executor40);
        org.junit.Assert.assertNull(executor41);
        org.junit.Assert.assertNull(errorHandler43);
        org.junit.Assert.assertNull(profiler50);
        org.junit.Assert.assertNull(requestInterceptor53);
        org.junit.Assert.assertNull(errorHandler56);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(restAdapter65);
        org.junit.Assert.assertNull(errorHandler67);
        org.junit.Assert.assertNull(provider71);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "hi!" + "'", str79, "hi!");
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(executor83);
        org.junit.Assert.assertNull(profiler88);
    }

    @Test
    public void test02897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02897");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        java.util.concurrent.Executor executor6 = builder4.httpExecutor;
        retrofit.RestAdapter restAdapter7 = builder4.build();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler9 = builder8.errorHandler;
        java.util.concurrent.Executor executor10 = null;
        builder8.callbackExecutor = executor10;
        retrofit.converter.Converter converter12 = builder8.converter;
        retrofit.RestAdapter.Builder builder14 = builder8.setServer("hi!");
        builder8.ensureSaneDefaults();
        retrofit.Profiler profiler16 = builder8.profiler;
        java.util.concurrent.Executor executor17 = builder8.httpExecutor;
        builder4.httpExecutor = executor17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler20 = builder19.errorHandler;
        retrofit.ErrorHandler errorHandler21 = builder19.errorHandler;
        retrofit.Profiler profiler22 = builder19.profiler;
        retrofit.RestAdapter.Log log23 = builder19.log;
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.FULL;
        builder19.logLevel = logLevel24;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler27 = builder26.errorHandler;
        java.util.concurrent.Executor executor28 = null;
        builder26.callbackExecutor = executor28;
        java.util.concurrent.Executor executor30 = null;
        builder26.httpExecutor = executor30;
        retrofit.Profiler profiler32 = null;
        builder26.profiler = profiler32;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler35 = builder34.errorHandler;
        retrofit.Server server38 = new retrofit.Server("", "");
        builder34.server = server38;
        retrofit.client.Client.Provider provider40 = null;
        java.util.concurrent.Executor executor41 = null;
        java.util.concurrent.Executor executor42 = null;
        retrofit.RequestInterceptor requestInterceptor43 = null;
        retrofit.converter.Converter converter44 = null;
        retrofit.Profiler profiler45 = null;
        retrofit.ErrorHandler errorHandler46 = null;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler48 = builder47.errorHandler;
        retrofit.Server server51 = new retrofit.Server("", "");
        builder47.server = server51;
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        builder47.log = log53;
        retrofit.Server server55 = null;
        retrofit.client.Client.Provider provider56 = null;
        java.util.concurrent.Executor executor57 = null;
        java.util.concurrent.Executor executor58 = null;
        retrofit.RequestInterceptor requestInterceptor59 = null;
        retrofit.converter.Converter converter60 = null;
        retrofit.Profiler profiler61 = null;
        retrofit.ErrorHandler errorHandler62 = null;
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        log63.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel66 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter(server55, provider56, executor57, executor58, requestInterceptor59, converter60, profiler61, errorHandler62, log63, logLevel66);
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter(server38, provider40, executor41, executor42, requestInterceptor43, converter44, profiler45, errorHandler46, log53, logLevel66);
        retrofit.RestAdapter.Builder builder69 = builder26.setLogLevel(logLevel66);
        retrofit.RestAdapter.Builder builder70 = builder19.setLogLevel(logLevel66);
        retrofit.RestAdapter.Builder builder71 = builder4.setLogLevel(logLevel66);
        builder4.ensureSaneDefaults();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNull(converter12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(profiler16);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(log23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNull(errorHandler35);
        org.junit.Assert.assertNull(errorHandler48);
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
    }

    @Test
    public void test02898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02898");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.Profiler profiler13 = restAdapter12.profiler;
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter12.getLogLevel();
        retrofit.ErrorHandler errorHandler15 = restAdapter12.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter12.new RestHandler();
        retrofit.client.Response response18 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response20 = restAdapter12.logAndReplaceResponse("default", response18, (long) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler15);
    }

    @Test
    public void test02899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02899");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        java.util.concurrent.Executor executor6 = builder4.httpExecutor;
        retrofit.RestAdapter restAdapter7 = builder4.build();
        retrofit.Profiler profiler8 = restAdapter7.profiler;
        retrofit.ErrorHandler errorHandler9 = restAdapter7.errorHandler;
        java.lang.Throwable throwable10 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter7.logException(throwable10, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNull(profiler8);
        org.junit.Assert.assertNotNull(errorHandler9);
    }

    @Test
    public void test02900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02900");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter3 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler4 = restAdapter3.errorHandler;
        retrofit.Server server7 = new retrofit.Server("", "");
        restAdapter3.server = server7;
        restAdapter0.server = server7;
        retrofit.RestAdapter.RestHandler restHandler10 = restAdapter0.new RestHandler();
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor12 = restAdapter11.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter11.new RestHandler();
        retrofit.Server server16 = new retrofit.Server("hi!", "hi!");
        restAdapter11.server = server16;
        retrofit.Server server18 = restAdapter11.server;
        restAdapter0.server = server18;
        java.lang.String str20 = server18.getName();
        java.lang.String str21 = server18.getName();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(errorHandler4);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNotNull(server18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
    }

    @Test
    public void test02901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02901");
        retrofit.client.Header[] headerArray10 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList11 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList11, headerArray10);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList11, typedOutput13);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList11, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList11, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList11, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList11, typedOutput21);
        java.lang.String str23 = request22.getUrl();
        org.junit.Assert.assertNotNull(headerArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test02902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02902");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        java.util.concurrent.Executor executor3 = builder0.callbackExecutor;
        retrofit.Profiler profiler4 = builder0.profiler;
        builder0.ensureSaneDefaults();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler8 = builder7.errorHandler;
        retrofit.ErrorHandler errorHandler9 = builder7.errorHandler;
        retrofit.RestAdapter.Log log10 = null;
        builder7.log = log10;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler13 = builder12.errorHandler;
        retrofit.client.Client.Provider provider14 = null;
        builder12.clientProvider = provider14;
        retrofit.Server server18 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder19 = builder12.setServer(server18);
        retrofit.client.Client.Provider provider20 = null;
        java.util.concurrent.Executor executor21 = null;
        java.util.concurrent.Executor executor22 = null;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        retrofit.converter.Converter converter24 = null;
        retrofit.Profiler profiler25 = null;
        retrofit.ErrorHandler errorHandler26 = null;
        retrofit.Server server27 = null;
        retrofit.client.Client.Provider provider28 = null;
        java.util.concurrent.Executor executor29 = null;
        java.util.concurrent.Executor executor30 = null;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        retrofit.converter.Converter converter32 = null;
        retrofit.Profiler profiler33 = null;
        retrofit.ErrorHandler errorHandler34 = null;
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        log35.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter(server27, provider28, executor29, executor30, requestInterceptor31, converter32, profiler33, errorHandler34, log35, logLevel38);
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter(server18, provider20, executor21, executor22, requestInterceptor23, converter24, profiler25, errorHandler26, log35, logLevel40);
        builder7.logLevel = logLevel40;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider44 = builder43.clientProvider;
        java.util.concurrent.Executor executor45 = null;
        builder43.callbackExecutor = executor45;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.Server server50 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder51 = builder47.setServer(server50);
        java.lang.String str52 = server50.getUrl();
        retrofit.RestAdapter.Builder builder53 = builder43.setServer(server50);
        builder43.ensureSaneDefaults();
        retrofit.Server server55 = null;
        retrofit.client.Client.Provider provider56 = null;
        java.util.concurrent.Executor executor57 = null;
        java.util.concurrent.Executor executor58 = null;
        retrofit.RequestInterceptor requestInterceptor59 = null;
        retrofit.converter.Converter converter60 = null;
        retrofit.Profiler profiler61 = null;
        retrofit.ErrorHandler errorHandler62 = null;
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        log63.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel66 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter(server55, provider56, executor57, executor58, requestInterceptor59, converter60, profiler61, errorHandler62, log63, logLevel66);
        retrofit.RestAdapter.RestHandler restHandler68 = restAdapter67.new RestHandler();
        retrofit.RestAdapter.Log log69 = retrofit.RestAdapter.Log.NONE;
        restAdapter67.log = log69;
        retrofit.RestAdapter.Builder builder71 = builder43.setLog(log69);
        retrofit.RestAdapter.Builder builder73 = builder43.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor74 = builder43.requestInterceptor;
        retrofit.RestAdapter.Builder builder75 = builder7.setRequestInterceptor(requestInterceptor74);
        retrofit.RestAdapter.Builder builder76 = builder0.setRequestInterceptor(requestInterceptor74);
        retrofit.RestAdapter.Log log77 = builder0.log;
        retrofit.Profiler profiler78 = null;
        builder0.profiler = profiler78;
        retrofit.Server server80 = builder0.server;
        retrofit.Profiler profiler81 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder82 = builder0.setProfiler(profiler81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(provider44);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(requestInterceptor74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(log77);
        org.junit.Assert.assertNull(server80);
    }

    @Test
    public void test02903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02903");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = null;
        restAdapter0.httpExecutor = executor2;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.logLevel;
        java.util.concurrent.Executor executor5 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler7 = builder6.errorHandler;
        retrofit.client.Client.Provider provider8 = null;
        builder6.clientProvider = provider8;
        retrofit.converter.Converter converter10 = builder6.converter;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder12 = builder6.setLogLevel(logLevel11);
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor14 = restAdapter13.callbackExecutor;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor16 = restAdapter15.callbackExecutor;
        java.util.concurrent.Executor executor17 = restAdapter15.callbackExecutor;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler19 = restAdapter18.errorHandler;
        retrofit.Server server22 = new retrofit.Server("", "");
        restAdapter18.server = server22;
        restAdapter15.server = server22;
        restAdapter13.server = server22;
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler34 = builder33.errorHandler;
        retrofit.Server server37 = new retrofit.Server("", "");
        builder33.server = server37;
        retrofit.client.Client.Provider provider39 = null;
        java.util.concurrent.Executor executor40 = null;
        java.util.concurrent.Executor executor41 = null;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        retrofit.converter.Converter converter43 = null;
        retrofit.Profiler profiler44 = null;
        retrofit.ErrorHandler errorHandler45 = null;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler47 = builder46.errorHandler;
        retrofit.Server server50 = new retrofit.Server("", "");
        builder46.server = server50;
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        builder46.log = log52;
        retrofit.Server server54 = null;
        retrofit.client.Client.Provider provider55 = null;
        java.util.concurrent.Executor executor56 = null;
        java.util.concurrent.Executor executor57 = null;
        retrofit.RequestInterceptor requestInterceptor58 = null;
        retrofit.converter.Converter converter59 = null;
        retrofit.Profiler profiler60 = null;
        retrofit.ErrorHandler errorHandler61 = null;
        retrofit.RestAdapter.Log log62 = retrofit.RestAdapter.Log.NONE;
        log62.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel65 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter(server54, provider55, executor56, executor57, requestInterceptor58, converter59, profiler60, errorHandler61, log62, logLevel65);
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter(server37, provider39, executor40, executor41, requestInterceptor42, converter43, profiler44, errorHandler45, log52, logLevel65);
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        retrofit.Server server71 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder72 = builder68.setServer(server71);
        retrofit.RestAdapter restAdapter73 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor74 = restAdapter73.callbackExecutor;
        java.util.concurrent.Executor executor75 = restAdapter73.callbackExecutor;
        retrofit.RestAdapter restAdapter76 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler77 = restAdapter76.errorHandler;
        retrofit.Server server80 = new retrofit.Server("", "");
        restAdapter76.server = server80;
        restAdapter73.server = server80;
        retrofit.RestAdapter.Log log83 = retrofit.RestAdapter.Log.NONE;
        restAdapter73.log = log83;
        retrofit.RestAdapter.Builder builder85 = builder72.setLog(log83);
        retrofit.RestAdapter.LogLevel logLevel86 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder87 = builder72.setLogLevel(logLevel86);
        retrofit.RestAdapter restAdapter88 = new retrofit.RestAdapter(server22, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log52, logLevel86);
        builder6.logLevel = logLevel86;
        builder6.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter91 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor92 = restAdapter91.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel93 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean94 = logLevel93.log();
        restAdapter91.logLevel = logLevel93;
        retrofit.RestAdapter.Builder builder96 = builder6.setLogLevel(logLevel93);
        java.util.concurrent.Executor executor97 = builder96.callbackExecutor;
        restAdapter0.httpExecutor = executor97;
        retrofit.RestAdapter.RestHandler restHandler99 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(converter10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(errorHandler34);
        org.junit.Assert.assertNull(errorHandler47);
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNull(executor74);
        org.junit.Assert.assertNull(executor75);
        org.junit.Assert.assertNull(errorHandler77);
        org.junit.Assert.assertNotNull(log83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertTrue("'" + logLevel86 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel86.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNull(executor92);
        org.junit.Assert.assertTrue("'" + logLevel93 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel93.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNotNull(executor97);
    }

    @Test
    public void test02904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02904");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.Server server5 = new retrofit.Server("hi!", "hi!");
        restAdapter0.server = server5;
        retrofit.Server server7 = restAdapter0.server;
        retrofit.RestAdapter.RestHandler restHandler8 = restAdapter0.new RestHandler();
        retrofit.Server server9 = null;
        retrofit.client.Client.Provider provider10 = null;
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        retrofit.converter.Converter converter14 = null;
        retrofit.Profiler profiler15 = null;
        retrofit.ErrorHandler errorHandler16 = null;
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        log17.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter(server9, provider10, executor11, executor12, requestInterceptor13, converter14, profiler15, errorHandler16, log17, logLevel20);
        retrofit.Profiler profiler22 = restAdapter21.profiler;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler24 = builder23.errorHandler;
        java.util.concurrent.Executor executor25 = builder23.callbackExecutor;
        retrofit.RestAdapter.Builder builder27 = builder23.setServer("hi!");
        retrofit.Server server30 = new retrofit.Server("default", "hi!");
        java.lang.String str31 = server30.getUrl();
        retrofit.RestAdapter.Builder builder32 = builder27.setServer(server30);
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler34 = builder33.errorHandler;
        retrofit.ErrorHandler errorHandler35 = builder33.errorHandler;
        java.util.concurrent.Executor executor36 = builder33.callbackExecutor;
        java.util.concurrent.Executor executor37 = null;
        builder33.callbackExecutor = executor37;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler40 = builder39.errorHandler;
        retrofit.Server server43 = new retrofit.Server("", "");
        builder39.server = server43;
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        builder39.log = log45;
        retrofit.RestAdapter.LogLevel logLevel47 = builder39.logLevel;
        retrofit.RestAdapter.Builder builder48 = builder33.setLogLevel(logLevel47);
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler50 = builder49.errorHandler;
        retrofit.client.Client.Provider provider51 = null;
        builder49.clientProvider = provider51;
        retrofit.Server server55 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder56 = builder49.setServer(server55);
        retrofit.converter.Converter converter57 = null;
        builder56.converter = converter57;
        retrofit.RestAdapter restAdapter59 = builder56.build();
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler61 = builder60.errorHandler;
        java.util.concurrent.Executor executor62 = null;
        builder60.callbackExecutor = executor62;
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider65 = builder64.clientProvider;
        java.util.concurrent.Executor executor66 = null;
        builder64.callbackExecutor = executor66;
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        retrofit.Server server71 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder72 = builder68.setServer(server71);
        java.lang.String str73 = server71.getUrl();
        retrofit.RestAdapter.Builder builder74 = builder64.setServer(server71);
        retrofit.RestAdapter.Builder builder75 = builder60.setServer(server71);
        restAdapter59.server = server71;
        retrofit.client.Client.Provider provider77 = restAdapter59.clientProvider;
        retrofit.RestAdapter.Builder builder78 = builder48.setClient(provider77);
        retrofit.RestAdapter.Builder builder79 = builder32.setClient(provider77);
        retrofit.Server server80 = builder32.server;
        restAdapter21.server = server80;
        retrofit.Profiler profiler82 = restAdapter21.profiler;
        retrofit.RestAdapter.Log log83 = restAdapter21.log;
        restAdapter0.log = log83;
        log83.log("default");
        log83.log("hi!");
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNotNull(server7);
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "default" + "'", str31, "default");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(errorHandler34);
        org.junit.Assert.assertNull(errorHandler35);
        org.junit.Assert.assertNull(executor36);
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(errorHandler50);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(restAdapter59);
        org.junit.Assert.assertNull(errorHandler61);
        org.junit.Assert.assertNull(provider65);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "hi!" + "'", str73, "hi!");
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(provider77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(server80);
        org.junit.Assert.assertNull(profiler82);
        org.junit.Assert.assertNotNull(log83);
    }

    @Test
    public void test02905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02905");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.Profiler profiler3 = builder0.profiler;
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor5 = restAdapter4.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.Server server9 = new retrofit.Server("hi!", "hi!");
        restAdapter4.server = server9;
        retrofit.RestAdapter.Builder builder11 = builder0.setServer(server9);
        retrofit.converter.Converter converter12 = null;
        builder11.converter = converter12;
        retrofit.Profiler profiler14 = null;
        builder11.profiler = profiler14;
        retrofit.RestAdapter restAdapter16 = builder11.build();
        retrofit.client.Header[] headerArray23 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList24 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList24, headerArray23);
        retrofit.mime.TypedOutput typedOutput26 = null;
        retrofit.client.Request request27 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList24, typedOutput26);
        retrofit.mime.TypedOutput typedOutput28 = null;
        retrofit.client.Request request29 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList24, typedOutput28);
        retrofit.mime.TypedOutput typedOutput30 = null;
        retrofit.client.Request request31 = new retrofit.client.Request("", "default", (java.util.List<retrofit.client.Header>) headerList24, typedOutput30);
        retrofit.client.Request request32 = restAdapter16.logAndReplaceRequest(request31);
        retrofit.RestAdapter.Log log33 = restAdapter16.log;
        retrofit.RequestInterceptor requestInterceptor34 = restAdapter16.requestInterceptor;
        java.lang.Throwable throwable35 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter16.logException(throwable35, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(restAdapter16);
        org.junit.Assert.assertNotNull(headerArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(request32);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(requestInterceptor34);
    }

    @Test
    public void test02906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02906");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.ErrorHandler errorHandler3 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler7 = builder6.errorHandler;
        retrofit.ErrorHandler errorHandler8 = builder6.errorHandler;
        retrofit.Profiler profiler9 = builder6.profiler;
        retrofit.RestAdapter.Log log10 = builder6.log;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.FULL;
        builder6.logLevel = logLevel11;
        retrofit.RestAdapter.Builder builder13 = builder5.setLogLevel(logLevel11);
        retrofit.Server server16 = new retrofit.Server("hi!", "default");
        retrofit.RestAdapter.Builder builder17 = builder5.setServer(server16);
        retrofit.Server server18 = builder5.server;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.Server server22 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder23 = builder19.setServer(server22);
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor25 = restAdapter24.callbackExecutor;
        java.util.concurrent.Executor executor26 = restAdapter24.callbackExecutor;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler28 = restAdapter27.errorHandler;
        retrofit.Server server31 = new retrofit.Server("", "");
        restAdapter27.server = server31;
        restAdapter24.server = server31;
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        restAdapter24.log = log34;
        retrofit.RestAdapter.Builder builder36 = builder23.setLog(log34);
        retrofit.RestAdapter.Builder builder38 = builder23.setServer("hi!");
        retrofit.RestAdapter.Log log39 = builder38.log;
        retrofit.Server server42 = new retrofit.Server("default", "");
        builder38.server = server42;
        java.lang.String str44 = server42.getName();
        retrofit.RestAdapter.Builder builder45 = builder5.setServer(server42);
        retrofit.client.Client client46 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder47 = builder5.setClient(client46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNull(profiler9);
        org.junit.Assert.assertNull(log10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(server18);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test02907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02907");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        restAdapter5.log = log15;
        retrofit.RestAdapter.Builder builder17 = builder4.setLog(log15);
        retrofit.converter.Converter converter18 = null;
        builder17.converter = converter18;
        retrofit.converter.Converter converter20 = builder17.converter;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler22 = builder21.errorHandler;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        builder21.requestInterceptor = requestInterceptor23;
        java.util.concurrent.Executor executor25 = null;
        builder21.httpExecutor = executor25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler28 = null;
        builder27.errorHandler = errorHandler28;
        retrofit.ErrorHandler errorHandler30 = builder27.errorHandler;
        retrofit.RestAdapter.Builder builder32 = builder27.setServer("hi!");
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler34 = builder33.errorHandler;
        retrofit.ErrorHandler errorHandler35 = builder33.errorHandler;
        retrofit.Profiler profiler36 = builder33.profiler;
        retrofit.RestAdapter.Log log37 = builder33.log;
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.FULL;
        builder33.logLevel = logLevel38;
        retrofit.RestAdapter.Builder builder40 = builder32.setLogLevel(logLevel38);
        retrofit.RestAdapter.Builder builder41 = builder21.setLogLevel(logLevel38);
        retrofit.converter.Converter converter42 = null;
        builder41.converter = converter42;
        retrofit.Server server46 = new retrofit.Server("", "hi!");
        java.lang.String str47 = server46.getUrl();
        builder41.server = server46;
        builder17.server = server46;
        retrofit.RestAdapter.Builder builder51 = builder17.setServer("default");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(converter20);
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNull(errorHandler30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(errorHandler34);
        org.junit.Assert.assertNull(errorHandler35);
        org.junit.Assert.assertNull(profiler36);
        org.junit.Assert.assertNull(log37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(builder51);
    }

    @Test
    public void test02908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02908");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        builder0.requestInterceptor = requestInterceptor2;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("default");
        retrofit.Server server6 = builder0.server;
        java.util.concurrent.Executor executor7 = builder0.callbackExecutor;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(server6);
        org.junit.Assert.assertNull(executor7);
    }

    @Test
    public void test02909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02909");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter0.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor4 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor5 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler7 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler8 = restAdapter0.new RestHandler();
        retrofit.client.Header[] headerArray21 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList22 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList22, headerArray21);
        retrofit.mime.TypedOutput typedOutput24 = null;
        retrofit.client.Request request25 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList22, typedOutput24);
        retrofit.mime.TypedOutput typedOutput26 = null;
        retrofit.client.Request request27 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList22, typedOutput26);
        retrofit.mime.TypedOutput typedOutput28 = null;
        retrofit.client.Request request29 = new retrofit.client.Request("", "default", (java.util.List<retrofit.client.Header>) headerList22, typedOutput28);
        retrofit.mime.TypedOutput typedOutput30 = null;
        retrofit.client.Request request31 = new retrofit.client.Request("", "default", (java.util.List<retrofit.client.Header>) headerList22, typedOutput30);
        retrofit.mime.TypedOutput typedOutput32 = null;
        retrofit.client.Request request33 = new retrofit.client.Request("default", "", (java.util.List<retrofit.client.Header>) headerList22, typedOutput32);
        retrofit.mime.TypedOutput typedOutput34 = null;
        retrofit.client.Request request35 = new retrofit.client.Request("default", "", (java.util.List<retrofit.client.Header>) headerList22, typedOutput34);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request36 = restAdapter0.logAndReplaceRequest(request35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNotNull(headerArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test02910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02910");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter restAdapter1 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor2 = restAdapter1.callbackExecutor;
        java.util.concurrent.Executor executor3 = restAdapter1.callbackExecutor;
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler5 = restAdapter4.errorHandler;
        retrofit.Server server8 = new retrofit.Server("", "");
        restAdapter4.server = server8;
        restAdapter1.server = server8;
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler12 = restAdapter11.errorHandler;
        retrofit.Server server15 = new retrofit.Server("", "");
        restAdapter11.server = server15;
        restAdapter1.server = server15;
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider26 = builder25.clientProvider;
        java.util.concurrent.Executor executor27 = null;
        builder25.callbackExecutor = executor27;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.Server server32 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder33 = builder29.setServer(server32);
        java.lang.String str34 = server32.getUrl();
        retrofit.RestAdapter.Builder builder35 = builder25.setServer(server32);
        builder25.ensureSaneDefaults();
        retrofit.Server server37 = null;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        log45.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log45, logLevel48);
        retrofit.RestAdapter.RestHandler restHandler50 = restAdapter49.new RestHandler();
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        restAdapter49.log = log51;
        retrofit.RestAdapter.Builder builder53 = builder25.setLog(log51);
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler55 = builder54.errorHandler;
        retrofit.ErrorHandler errorHandler56 = builder54.errorHandler;
        retrofit.RestAdapter.Log log57 = null;
        builder54.log = log57;
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean60 = logLevel59.log();
        builder54.logLevel = logLevel59;
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter(server15, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log51, logLevel59);
        restAdapter0.log = log51;
        java.util.concurrent.Executor executor64 = restAdapter0.httpExecutor;
        java.lang.Class<?> wildcardClass65 = restAdapter0.getClass();
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(errorHandler5);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(provider26);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(errorHandler55);
        org.junit.Assert.assertNull(errorHandler56);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(executor64);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test02911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02911");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = builder0.clientProvider;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server7 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder8 = builder4.setServer(server7);
        java.lang.String str9 = server7.getUrl();
        retrofit.RestAdapter.Builder builder10 = builder0.setServer(server7);
        builder0.ensureSaneDefaults();
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        log20.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel23);
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter24.new RestHandler();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        restAdapter24.log = log26;
        retrofit.RestAdapter.Builder builder28 = builder0.setLog(log26);
        retrofit.RestAdapter.Builder builder30 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.Server server34 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder35 = builder31.setServer(server34);
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor37 = restAdapter36.callbackExecutor;
        java.util.concurrent.Executor executor38 = restAdapter36.callbackExecutor;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler40 = restAdapter39.errorHandler;
        retrofit.Server server43 = new retrofit.Server("", "");
        restAdapter39.server = server43;
        restAdapter36.server = server43;
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        restAdapter36.log = log46;
        retrofit.RestAdapter.Builder builder48 = builder35.setLog(log46);
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder50 = builder35.setLogLevel(logLevel49);
        retrofit.Profiler profiler51 = null;
        builder50.profiler = profiler51;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.Server server56 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder57 = builder53.setServer(server56);
        retrofit.RestAdapter.LogLevel logLevel58 = builder57.logLevel;
        retrofit.RestAdapter.Builder builder59 = builder50.setLogLevel(logLevel58);
        retrofit.RequestInterceptor requestInterceptor60 = builder59.requestInterceptor;
        retrofit.RestAdapter restAdapter61 = builder59.build();
        retrofit.ErrorHandler errorHandler62 = builder59.errorHandler;
        builder0.errorHandler = errorHandler62;
        retrofit.Profiler profiler64 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder65 = builder0.setProfiler(profiler64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(provider1);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(requestInterceptor60);
        org.junit.Assert.assertNotNull(restAdapter61);
        org.junit.Assert.assertNotNull(errorHandler62);
    }

    @Test
    public void test02912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02912");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.ErrorHandler errorHandler3 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler7 = builder6.errorHandler;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.Server server11 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder12 = builder8.setServer(server11);
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor14 = restAdapter13.callbackExecutor;
        java.util.concurrent.Executor executor15 = restAdapter13.callbackExecutor;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler17 = restAdapter16.errorHandler;
        retrofit.Server server20 = new retrofit.Server("", "");
        restAdapter16.server = server20;
        restAdapter13.server = server20;
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        restAdapter13.log = log23;
        retrofit.RestAdapter.Builder builder25 = builder12.setLog(log23);
        retrofit.RestAdapter.Builder builder26 = builder6.setLog(log23);
        builder0.log = log23;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler29 = builder28.errorHandler;
        retrofit.client.Client.Provider provider30 = null;
        builder28.clientProvider = provider30;
        retrofit.Server server34 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder35 = builder28.setServer(server34);
        retrofit.converter.Converter converter36 = null;
        builder35.converter = converter36;
        retrofit.RestAdapter restAdapter38 = builder35.build();
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler40 = builder39.errorHandler;
        java.util.concurrent.Executor executor41 = null;
        builder39.callbackExecutor = executor41;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider44 = builder43.clientProvider;
        java.util.concurrent.Executor executor45 = null;
        builder43.callbackExecutor = executor45;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.Server server50 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder51 = builder47.setServer(server50);
        java.lang.String str52 = server50.getUrl();
        retrofit.RestAdapter.Builder builder53 = builder43.setServer(server50);
        retrofit.RestAdapter.Builder builder54 = builder39.setServer(server50);
        restAdapter38.server = server50;
        retrofit.client.Client.Provider provider56 = restAdapter38.clientProvider;
        retrofit.RestAdapter.Builder builder57 = builder0.setClient(provider56);
        retrofit.client.Client.Provider provider58 = builder57.clientProvider;
        retrofit.RestAdapter.Log log59 = builder57.log;
        retrofit.RestAdapter.LogLevel logLevel60 = builder57.logLevel;
        boolean boolean61 = logLevel60.log();
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(restAdapter38);
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNull(provider44);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(provider56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(provider58);
        org.junit.Assert.assertNotNull(log59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test02913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02913");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.Server server7 = new retrofit.Server("default", "hi!");
        java.lang.String str8 = server7.getUrl();
        retrofit.RestAdapter.Builder builder9 = builder4.setServer(server7);
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler11 = builder10.errorHandler;
        retrofit.ErrorHandler errorHandler12 = builder10.errorHandler;
        java.util.concurrent.Executor executor13 = builder10.callbackExecutor;
        java.util.concurrent.Executor executor14 = null;
        builder10.callbackExecutor = executor14;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler17 = builder16.errorHandler;
        retrofit.Server server20 = new retrofit.Server("", "");
        builder16.server = server20;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        builder16.log = log22;
        retrofit.RestAdapter.LogLevel logLevel24 = builder16.logLevel;
        retrofit.RestAdapter.Builder builder25 = builder10.setLogLevel(logLevel24);
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler27 = builder26.errorHandler;
        retrofit.client.Client.Provider provider28 = null;
        builder26.clientProvider = provider28;
        retrofit.Server server32 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder33 = builder26.setServer(server32);
        retrofit.converter.Converter converter34 = null;
        builder33.converter = converter34;
        retrofit.RestAdapter restAdapter36 = builder33.build();
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler38 = builder37.errorHandler;
        java.util.concurrent.Executor executor39 = null;
        builder37.callbackExecutor = executor39;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider42 = builder41.clientProvider;
        java.util.concurrent.Executor executor43 = null;
        builder41.callbackExecutor = executor43;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.Server server48 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder49 = builder45.setServer(server48);
        java.lang.String str50 = server48.getUrl();
        retrofit.RestAdapter.Builder builder51 = builder41.setServer(server48);
        retrofit.RestAdapter.Builder builder52 = builder37.setServer(server48);
        restAdapter36.server = server48;
        retrofit.client.Client.Provider provider54 = restAdapter36.clientProvider;
        retrofit.RestAdapter.Builder builder55 = builder25.setClient(provider54);
        retrofit.RestAdapter.Builder builder56 = builder9.setClient(provider54);
        retrofit.Server server57 = builder9.server;
        retrofit.RestAdapter.LogLevel logLevel58 = builder9.logLevel;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "default" + "'", str8, "default");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(restAdapter36);
        org.junit.Assert.assertNull(errorHandler38);
        org.junit.Assert.assertNull(provider42);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(provider54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(server57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test02914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02914");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean6 = logLevel5.log();
        builder0.logLevel = logLevel5;
        retrofit.ErrorHandler errorHandler8 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder10 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider11 = builder10.clientProvider;
        retrofit.Server server12 = builder10.server;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor14 = restAdapter13.callbackExecutor;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor16 = restAdapter15.callbackExecutor;
        java.util.concurrent.Executor executor17 = restAdapter15.callbackExecutor;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler19 = restAdapter18.errorHandler;
        retrofit.Server server22 = new retrofit.Server("", "");
        restAdapter18.server = server22;
        restAdapter15.server = server22;
        restAdapter13.server = server22;
        retrofit.converter.Converter converter26 = restAdapter13.converter;
        retrofit.RestAdapter.RestHandler restHandler27 = restAdapter13.new RestHandler();
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.Server server31 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder32 = builder28.setServer(server31);
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor34 = restAdapter33.callbackExecutor;
        java.util.concurrent.Executor executor35 = restAdapter33.callbackExecutor;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler37 = restAdapter36.errorHandler;
        retrofit.Server server40 = new retrofit.Server("", "");
        restAdapter36.server = server40;
        restAdapter33.server = server40;
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        restAdapter33.log = log43;
        retrofit.RestAdapter.Builder builder45 = builder32.setLog(log43);
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder47 = builder32.setLogLevel(logLevel46);
        retrofit.Profiler profiler48 = null;
        builder47.profiler = profiler48;
        retrofit.converter.Converter converter50 = null;
        builder47.converter = converter50;
        retrofit.ErrorHandler errorHandler52 = null;
        builder47.errorHandler = errorHandler52;
        retrofit.RestAdapter.LogLevel logLevel54 = builder47.logLevel;
        restAdapter13.logLevel = logLevel54;
        retrofit.RestAdapter.Builder builder56 = builder10.setLogLevel(logLevel54);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder58 = builder56.setServer("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be blank.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertNotNull(server12);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(converter26);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(executor34);
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test02915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02915");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.lang.String str7 = request6.getUrl();
        java.util.List<retrofit.client.Header> headerList8 = request6.getHeaders();
        java.lang.String str9 = request6.getMethod();
        java.lang.String str10 = request6.getUrl();
        java.lang.String str11 = request6.getMethod();
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(headerList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test02916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02916");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor2 = null;
        restAdapter0.httpExecutor = executor2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        log12.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel15);
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter16.new RestHandler();
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        restAdapter16.log = log18;
        retrofit.converter.Converter converter20 = null;
        restAdapter16.converter = converter20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.Server server25 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder26 = builder22.setServer(server25);
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor28 = restAdapter27.callbackExecutor;
        java.util.concurrent.Executor executor29 = restAdapter27.callbackExecutor;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler31 = restAdapter30.errorHandler;
        retrofit.Server server34 = new retrofit.Server("", "");
        restAdapter30.server = server34;
        restAdapter27.server = server34;
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        restAdapter27.log = log37;
        retrofit.RestAdapter.Builder builder39 = builder26.setLog(log37);
        restAdapter16.log = log37;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler42 = builder41.errorHandler;
        retrofit.Server server45 = new retrofit.Server("", "");
        builder41.server = server45;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor48 = restAdapter47.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler49 = restAdapter47.new RestHandler();
        retrofit.Server server52 = new retrofit.Server("hi!", "hi!");
        restAdapter47.server = server52;
        retrofit.RestAdapter.Builder builder54 = builder41.setServer(server52);
        restAdapter16.server = server52;
        retrofit.Profiler profiler56 = restAdapter16.profiler;
        retrofit.Server server57 = restAdapter16.server;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.Server server61 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder62 = builder58.setServer(server61);
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor64 = restAdapter63.callbackExecutor;
        java.util.concurrent.Executor executor65 = restAdapter63.callbackExecutor;
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler67 = restAdapter66.errorHandler;
        retrofit.Server server70 = new retrofit.Server("", "");
        restAdapter66.server = server70;
        restAdapter63.server = server70;
        retrofit.RestAdapter.Log log73 = retrofit.RestAdapter.Log.NONE;
        restAdapter63.log = log73;
        retrofit.RestAdapter.Builder builder75 = builder62.setLog(log73);
        retrofit.RestAdapter.LogLevel logLevel76 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder77 = builder62.setLogLevel(logLevel76);
        retrofit.RestAdapter.Log log78 = builder62.log;
        retrofit.RestAdapter restAdapter79 = builder62.build();
        java.util.concurrent.Executor executor80 = restAdapter79.callbackExecutor;
        restAdapter16.httpExecutor = executor80;
        restAdapter0.httpExecutor = executor80;
        java.util.concurrent.Executor executor83 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler84 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log18);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(errorHandler31);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(errorHandler42);
        org.junit.Assert.assertNull(executor48);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(profiler56);
        org.junit.Assert.assertNotNull(server57);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(executor64);
        org.junit.Assert.assertNull(executor65);
        org.junit.Assert.assertNull(errorHandler67);
        org.junit.Assert.assertNotNull(log73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(log78);
        org.junit.Assert.assertNotNull(restAdapter79);
        org.junit.Assert.assertNotNull(executor80);
        org.junit.Assert.assertNotNull(executor83);
    }

    @Test
    public void test02917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02917");
        retrofit.client.Header[] headerArray18 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList19 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList19, headerArray18);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList19, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList19, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("", "default", (java.util.List<retrofit.client.Header>) headerList19, typedOutput25);
        java.util.List<retrofit.client.Header> headerList27 = request26.getHeaders();
        retrofit.mime.TypedOutput typedOutput28 = null;
        retrofit.client.Request request29 = new retrofit.client.Request("hi!", "default", headerList27, typedOutput28);
        retrofit.mime.TypedOutput typedOutput30 = null;
        retrofit.client.Request request31 = new retrofit.client.Request("", "", headerList27, typedOutput30);
        java.util.List<retrofit.client.Header> headerList32 = request31.getHeaders();
        retrofit.mime.TypedOutput typedOutput33 = null;
        retrofit.client.Request request34 = new retrofit.client.Request("hi!", "", headerList32, typedOutput33);
        retrofit.mime.TypedOutput typedOutput35 = null;
        retrofit.client.Request request36 = new retrofit.client.Request("hi!", "", headerList32, typedOutput35);
        retrofit.mime.TypedOutput typedOutput37 = null;
        retrofit.client.Request request38 = new retrofit.client.Request("", "hi!", headerList32, typedOutput37);
        retrofit.mime.TypedOutput typedOutput39 = null;
        retrofit.client.Request request40 = new retrofit.client.Request("hi!", "", headerList32, typedOutput39);
        org.junit.Assert.assertNotNull(headerArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(headerList27);
        org.junit.Assert.assertNotNull(headerList32);
    }

    @Test
    public void test02918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02918");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean6 = logLevel5.log();
        builder0.logLevel = logLevel5;
        retrofit.ErrorHandler errorHandler8 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder10 = builder0.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor11 = builder0.requestInterceptor;
        retrofit.converter.Converter converter12 = builder0.converter;
        retrofit.RestAdapter.Log log13 = builder0.log;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.Server server17 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder18 = builder14.setServer(server17);
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor20 = restAdapter19.callbackExecutor;
        java.util.concurrent.Executor executor21 = restAdapter19.callbackExecutor;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler23 = restAdapter22.errorHandler;
        retrofit.Server server26 = new retrofit.Server("", "");
        restAdapter22.server = server26;
        restAdapter19.server = server26;
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        restAdapter19.log = log29;
        retrofit.RestAdapter.Builder builder31 = builder18.setLog(log29);
        retrofit.RestAdapter.Builder builder33 = builder18.setServer("hi!");
        retrofit.RestAdapter.Log log34 = builder33.log;
        retrofit.Server server37 = new retrofit.Server("default", "");
        builder33.server = server37;
        java.lang.String str39 = server37.getName();
        retrofit.RestAdapter.Builder builder40 = builder0.setServer(server37);
        retrofit.Profiler profiler41 = builder0.profiler;
        retrofit.Server server42 = builder0.server;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNull(converter12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(profiler41);
        org.junit.Assert.assertNotNull(server42);
    }

    @Test
    public void test02919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02919");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RequestInterceptor requestInterceptor13 = null;
        restAdapter12.requestInterceptor = requestInterceptor13;
        retrofit.RestAdapter.LogLevel logLevel15 = restAdapter12.logLevel;
        java.util.concurrent.Executor executor16 = restAdapter12.callbackExecutor;
        retrofit.client.Header[] headerArray29 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList30 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList30, headerArray29);
        retrofit.mime.TypedOutput typedOutput32 = null;
        retrofit.client.Request request33 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList30, typedOutput32);
        retrofit.mime.TypedOutput typedOutput34 = null;
        retrofit.client.Request request35 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList30, typedOutput34);
        retrofit.mime.TypedOutput typedOutput36 = null;
        retrofit.client.Request request37 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList30, typedOutput36);
        retrofit.mime.TypedOutput typedOutput38 = null;
        retrofit.client.Request request39 = new retrofit.client.Request("hi!", "default", (java.util.List<retrofit.client.Header>) headerList30, typedOutput38);
        retrofit.mime.TypedOutput typedOutput40 = null;
        retrofit.client.Request request41 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList30, typedOutput40);
        retrofit.mime.TypedOutput typedOutput42 = null;
        retrofit.client.Request request43 = new retrofit.client.Request("hi!", "default", (java.util.List<retrofit.client.Header>) headerList30, typedOutput42);
        retrofit.client.Request request44 = restAdapter12.logAndReplaceRequest(request43);
        java.lang.String str45 = request44.getMethod();
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNotNull(headerArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(request44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
    }

    @Test
    public void test02920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02920");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server4 = new retrofit.Server("", "");
        builder0.server = server4;
        retrofit.client.Client.Provider provider6 = builder0.clientProvider;
        retrofit.Profiler profiler7 = null;
        builder0.profiler = profiler7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler10 = builder9.errorHandler;
        retrofit.Server server13 = new retrofit.Server("", "");
        builder9.server = server13;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler23 = builder22.errorHandler;
        retrofit.Server server26 = new retrofit.Server("", "");
        builder22.server = server26;
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        builder22.log = log28;
        retrofit.Server server30 = null;
        retrofit.client.Client.Provider provider31 = null;
        java.util.concurrent.Executor executor32 = null;
        java.util.concurrent.Executor executor33 = null;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        retrofit.converter.Converter converter35 = null;
        retrofit.Profiler profiler36 = null;
        retrofit.ErrorHandler errorHandler37 = null;
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        log38.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter(server30, provider31, executor32, executor33, requestInterceptor34, converter35, profiler36, errorHandler37, log38, logLevel41);
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter(server13, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log28, logLevel41);
        log28.log("hi!");
        log28.log("hi!");
        builder0.log = log28;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor50 = restAdapter49.callbackExecutor;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor52 = restAdapter51.callbackExecutor;
        java.util.concurrent.Executor executor53 = restAdapter51.callbackExecutor;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler55 = restAdapter54.errorHandler;
        retrofit.Server server58 = new retrofit.Server("", "");
        restAdapter54.server = server58;
        restAdapter51.server = server58;
        restAdapter49.server = server58;
        retrofit.Profiler profiler62 = restAdapter49.profiler;
        retrofit.converter.Converter converter63 = restAdapter49.converter;
        retrofit.ErrorHandler errorHandler64 = null;
        restAdapter49.errorHandler = errorHandler64;
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor67 = restAdapter66.callbackExecutor;
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor69 = restAdapter68.callbackExecutor;
        java.util.concurrent.Executor executor70 = restAdapter68.callbackExecutor;
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler72 = restAdapter71.errorHandler;
        retrofit.Server server75 = new retrofit.Server("", "");
        restAdapter71.server = server75;
        restAdapter68.server = server75;
        restAdapter66.server = server75;
        retrofit.Profiler profiler79 = restAdapter66.profiler;
        retrofit.ErrorHandler errorHandler80 = null;
        restAdapter66.errorHandler = errorHandler80;
        java.util.concurrent.Executor executor82 = restAdapter66.callbackExecutor;
        java.util.concurrent.Executor executor83 = restAdapter66.httpExecutor;
        retrofit.RestAdapter restAdapter84 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor85 = restAdapter84.callbackExecutor;
        java.util.concurrent.Executor executor86 = restAdapter84.callbackExecutor;
        retrofit.RestAdapter restAdapter87 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler88 = restAdapter87.errorHandler;
        retrofit.Server server91 = new retrofit.Server("", "");
        restAdapter87.server = server91;
        restAdapter84.server = server91;
        restAdapter66.server = server91;
        restAdapter49.server = server91;
        builder0.server = server91;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(provider6);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor50);
        org.junit.Assert.assertNull(executor52);
        org.junit.Assert.assertNull(executor53);
        org.junit.Assert.assertNull(errorHandler55);
        org.junit.Assert.assertNull(profiler62);
        org.junit.Assert.assertNull(converter63);
        org.junit.Assert.assertNull(executor67);
        org.junit.Assert.assertNull(executor69);
        org.junit.Assert.assertNull(executor70);
        org.junit.Assert.assertNull(errorHandler72);
        org.junit.Assert.assertNull(profiler79);
        org.junit.Assert.assertNull(executor82);
        org.junit.Assert.assertNull(executor83);
        org.junit.Assert.assertNull(executor85);
        org.junit.Assert.assertNull(executor86);
        org.junit.Assert.assertNull(errorHandler88);
    }

    @Test
    public void test02921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02921");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.Profiler profiler3 = builder0.profiler;
        retrofit.RestAdapter.Log log4 = builder0.log;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.FULL;
        builder0.logLevel = logLevel5;
        java.util.concurrent.Executor executor7 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler9 = builder8.errorHandler;
        retrofit.client.Client.Provider provider10 = null;
        builder8.clientProvider = provider10;
        retrofit.Server server14 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder15 = builder8.setServer(server14);
        retrofit.converter.Converter converter16 = null;
        builder15.converter = converter16;
        retrofit.RestAdapter restAdapter18 = builder15.build();
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler20 = builder19.errorHandler;
        java.util.concurrent.Executor executor21 = null;
        builder19.callbackExecutor = executor21;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider24 = builder23.clientProvider;
        java.util.concurrent.Executor executor25 = null;
        builder23.callbackExecutor = executor25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.Server server30 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder31 = builder27.setServer(server30);
        java.lang.String str32 = server30.getUrl();
        retrofit.RestAdapter.Builder builder33 = builder23.setServer(server30);
        retrofit.RestAdapter.Builder builder34 = builder19.setServer(server30);
        restAdapter18.server = server30;
        retrofit.Server server36 = restAdapter18.server;
        java.lang.String str37 = server36.getName();
        java.lang.String str38 = server36.getUrl();
        retrofit.RestAdapter.Builder builder39 = builder0.setServer(server36);
        java.util.concurrent.Executor executor40 = builder0.callbackExecutor;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(restAdapter18);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNull(provider24);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(server36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(executor40);
    }

    @Test
    public void test02922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02922");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.ErrorHandler errorHandler3 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor6 = builder0.callbackExecutor;
        retrofit.ErrorHandler errorHandler7 = builder0.errorHandler;
        retrofit.Server server8 = builder0.server;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.Server server12 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder13 = builder9.setServer(server12);
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor15 = restAdapter14.callbackExecutor;
        java.util.concurrent.Executor executor16 = restAdapter14.callbackExecutor;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler18 = restAdapter17.errorHandler;
        retrofit.Server server21 = new retrofit.Server("", "");
        restAdapter17.server = server21;
        restAdapter14.server = server21;
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        restAdapter14.log = log24;
        retrofit.RestAdapter.Builder builder26 = builder13.setLog(log24);
        retrofit.converter.Converter converter27 = null;
        builder26.converter = converter27;
        retrofit.RestAdapter.Builder builder30 = builder26.setServer("hi!");
        retrofit.Server server31 = null;
        retrofit.client.Client.Provider provider32 = null;
        java.util.concurrent.Executor executor33 = null;
        java.util.concurrent.Executor executor34 = null;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        retrofit.converter.Converter converter36 = null;
        retrofit.Profiler profiler37 = null;
        retrofit.ErrorHandler errorHandler38 = null;
        retrofit.RestAdapter.Log log39 = retrofit.RestAdapter.Log.NONE;
        log39.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter(server31, provider32, executor33, executor34, requestInterceptor35, converter36, profiler37, errorHandler38, log39, logLevel42);
        retrofit.RestAdapter.RestHandler restHandler44 = restAdapter43.new RestHandler();
        retrofit.client.Header[] headerArray53 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList54 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList54, headerArray53);
        retrofit.mime.TypedOutput typedOutput56 = null;
        retrofit.client.Request request57 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList54, typedOutput56);
        retrofit.mime.TypedOutput typedOutput58 = null;
        retrofit.client.Request request59 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList54, typedOutput58);
        retrofit.mime.TypedOutput typedOutput60 = null;
        retrofit.client.Request request61 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList54, typedOutput60);
        retrofit.mime.TypedOutput typedOutput62 = null;
        retrofit.client.Request request63 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList54, typedOutput62);
        retrofit.mime.TypedOutput typedOutput64 = request63.getBody();
        retrofit.client.Request request65 = restAdapter43.logAndReplaceRequest(request63);
        retrofit.client.Client.Provider provider66 = null;
        restAdapter43.clientProvider = provider66;
        retrofit.RestAdapter.RestHandler restHandler68 = restAdapter43.new RestHandler();
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        retrofit.Server server72 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder73 = builder69.setServer(server72);
        retrofit.RestAdapter restAdapter74 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor75 = restAdapter74.callbackExecutor;
        java.util.concurrent.Executor executor76 = restAdapter74.callbackExecutor;
        retrofit.RestAdapter restAdapter77 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler78 = restAdapter77.errorHandler;
        retrofit.Server server81 = new retrofit.Server("", "");
        restAdapter77.server = server81;
        restAdapter74.server = server81;
        retrofit.RestAdapter.Log log84 = retrofit.RestAdapter.Log.NONE;
        restAdapter74.log = log84;
        retrofit.RestAdapter.Builder builder86 = builder73.setLog(log84);
        retrofit.RestAdapter.LogLevel logLevel87 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder88 = builder73.setLogLevel(logLevel87);
        retrofit.Profiler profiler89 = null;
        builder88.profiler = profiler89;
        retrofit.converter.Converter converter91 = null;
        builder88.converter = converter91;
        retrofit.ErrorHandler errorHandler93 = null;
        builder88.errorHandler = errorHandler93;
        retrofit.RestAdapter restAdapter95 = builder88.build();
        retrofit.ErrorHandler errorHandler96 = builder88.errorHandler;
        restAdapter43.errorHandler = errorHandler96;
        retrofit.RestAdapter.Builder builder98 = builder26.setErrorHandler(errorHandler96);
        builder0.errorHandler = errorHandler96;
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNotNull(server8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(errorHandler18);
        org.junit.Assert.assertNotNull(log24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(typedOutput64);
        org.junit.Assert.assertNotNull(request65);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNull(executor75);
        org.junit.Assert.assertNull(executor76);
        org.junit.Assert.assertNull(errorHandler78);
        org.junit.Assert.assertNotNull(log84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertTrue("'" + logLevel87 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel87.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(restAdapter95);
        org.junit.Assert.assertNotNull(errorHandler96);
        org.junit.Assert.assertNotNull(builder98);
    }

    @Test
    public void test02923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02923");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.Profiler profiler3 = builder0.profiler;
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor5 = restAdapter4.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.Server server9 = new retrofit.Server("hi!", "hi!");
        restAdapter4.server = server9;
        retrofit.RestAdapter.Builder builder11 = builder0.setServer(server9);
        retrofit.converter.Converter converter12 = null;
        builder11.converter = converter12;
        retrofit.Profiler profiler14 = null;
        builder11.profiler = profiler14;
        retrofit.RestAdapter restAdapter16 = builder11.build();
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter16.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter16.logLevel;
        boolean boolean19 = logLevel18.log();
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(restAdapter16);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test02924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02924");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.Server server5 = builder0.server;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.Server server9 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder10 = builder6.setServer(server9);
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor12 = restAdapter11.callbackExecutor;
        java.util.concurrent.Executor executor13 = restAdapter11.callbackExecutor;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler15 = restAdapter14.errorHandler;
        retrofit.Server server18 = new retrofit.Server("", "");
        restAdapter14.server = server18;
        restAdapter11.server = server18;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        restAdapter11.log = log21;
        retrofit.RestAdapter.Builder builder23 = builder10.setLog(log21);
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder25 = builder10.setLogLevel(logLevel24);
        builder0.logLevel = logLevel24;
        java.util.concurrent.Executor executor27 = builder0.callbackExecutor;
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        log28.log("");
        retrofit.RestAdapter.Builder builder31 = builder0.setLog(log28);
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler33 = builder32.errorHandler;
        retrofit.ErrorHandler errorHandler34 = builder32.errorHandler;
        retrofit.RestAdapter.Log log35 = null;
        builder32.log = log35;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        builder32.requestInterceptor = requestInterceptor37;
        retrofit.client.Client.Provider provider39 = null;
        builder32.clientProvider = provider39;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.Server server44 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder45 = builder41.setServer(server44);
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor47 = restAdapter46.callbackExecutor;
        java.util.concurrent.Executor executor48 = restAdapter46.callbackExecutor;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler50 = restAdapter49.errorHandler;
        retrofit.Server server53 = new retrofit.Server("", "");
        restAdapter49.server = server53;
        restAdapter46.server = server53;
        retrofit.RestAdapter.Log log56 = retrofit.RestAdapter.Log.NONE;
        restAdapter46.log = log56;
        retrofit.RestAdapter.Builder builder58 = builder45.setLog(log56);
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder60 = builder45.setLogLevel(logLevel59);
        retrofit.RestAdapter.Log log61 = builder45.log;
        retrofit.RestAdapter.Builder builder62 = builder32.setLog(log61);
        retrofit.RestAdapter.Builder builder63 = builder31.setLog(log61);
        retrofit.RequestInterceptor requestInterceptor64 = builder63.requestInterceptor;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.Server server68 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder69 = builder65.setServer(server68);
        retrofit.converter.Converter converter70 = builder65.converter;
        builder65.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler73 = builder72.errorHandler;
        retrofit.Server server76 = new retrofit.Server("", "");
        builder72.server = server76;
        retrofit.RestAdapter restAdapter78 = builder72.build();
        retrofit.Server server79 = restAdapter78.server;
        retrofit.RestAdapter.Builder builder80 = builder65.setServer(server79);
        java.lang.String str81 = server79.getName();
        retrofit.RestAdapter.Builder builder82 = builder63.setServer(server79);
        java.lang.String str83 = server79.getUrl();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(server5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(errorHandler33);
        org.junit.Assert.assertNull(errorHandler34);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(executor47);
        org.junit.Assert.assertNull(executor48);
        org.junit.Assert.assertNull(errorHandler50);
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(log61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(requestInterceptor64);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNull(converter70);
        org.junit.Assert.assertNull(errorHandler73);
        org.junit.Assert.assertNotNull(restAdapter78);
        org.junit.Assert.assertNotNull(server79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
    }

    @Test
    public void test02925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02925");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.Profiler profiler13 = restAdapter12.profiler;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler15 = builder14.errorHandler;
        java.util.concurrent.Executor executor16 = builder14.callbackExecutor;
        retrofit.RestAdapter.Builder builder18 = builder14.setServer("hi!");
        retrofit.Server server21 = new retrofit.Server("default", "hi!");
        java.lang.String str22 = server21.getUrl();
        retrofit.RestAdapter.Builder builder23 = builder18.setServer(server21);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler25 = builder24.errorHandler;
        retrofit.ErrorHandler errorHandler26 = builder24.errorHandler;
        java.util.concurrent.Executor executor27 = builder24.callbackExecutor;
        java.util.concurrent.Executor executor28 = null;
        builder24.callbackExecutor = executor28;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler31 = builder30.errorHandler;
        retrofit.Server server34 = new retrofit.Server("", "");
        builder30.server = server34;
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        builder30.log = log36;
        retrofit.RestAdapter.LogLevel logLevel38 = builder30.logLevel;
        retrofit.RestAdapter.Builder builder39 = builder24.setLogLevel(logLevel38);
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler41 = builder40.errorHandler;
        retrofit.client.Client.Provider provider42 = null;
        builder40.clientProvider = provider42;
        retrofit.Server server46 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder47 = builder40.setServer(server46);
        retrofit.converter.Converter converter48 = null;
        builder47.converter = converter48;
        retrofit.RestAdapter restAdapter50 = builder47.build();
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler52 = builder51.errorHandler;
        java.util.concurrent.Executor executor53 = null;
        builder51.callbackExecutor = executor53;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider56 = builder55.clientProvider;
        java.util.concurrent.Executor executor57 = null;
        builder55.callbackExecutor = executor57;
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.Server server62 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder63 = builder59.setServer(server62);
        java.lang.String str64 = server62.getUrl();
        retrofit.RestAdapter.Builder builder65 = builder55.setServer(server62);
        retrofit.RestAdapter.Builder builder66 = builder51.setServer(server62);
        restAdapter50.server = server62;
        retrofit.client.Client.Provider provider68 = restAdapter50.clientProvider;
        retrofit.RestAdapter.Builder builder69 = builder39.setClient(provider68);
        retrofit.RestAdapter.Builder builder70 = builder23.setClient(provider68);
        retrofit.Server server71 = builder23.server;
        restAdapter12.server = server71;
        retrofit.Profiler profiler73 = restAdapter12.profiler;
        retrofit.RestAdapter.Log log74 = restAdapter12.log;
        retrofit.RestAdapter.RestHandler restHandler75 = restAdapter12.new RestHandler();
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "default" + "'", str22, "default");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(errorHandler25);
        org.junit.Assert.assertNull(errorHandler26);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(errorHandler31);
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(errorHandler41);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(restAdapter50);
        org.junit.Assert.assertNull(errorHandler52);
        org.junit.Assert.assertNull(provider56);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hi!" + "'", str64, "hi!");
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(provider68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(server71);
        org.junit.Assert.assertNull(profiler73);
        org.junit.Assert.assertNotNull(log74);
    }

    @Test
    public void test02926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02926");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server4 = new retrofit.Server("", "");
        builder0.server = server4;
        retrofit.client.Client.Provider provider6 = builder0.clientProvider;
        java.util.concurrent.Executor executor7 = builder0.httpExecutor;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler9 = builder8.errorHandler;
        java.util.concurrent.Executor executor10 = builder8.callbackExecutor;
        retrofit.RestAdapter.Builder builder12 = builder8.setServer("hi!");
        builder12.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler15 = builder14.errorHandler;
        retrofit.ErrorHandler errorHandler16 = builder14.errorHandler;
        retrofit.RestAdapter.Log log17 = null;
        builder14.log = log17;
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean20 = logLevel19.log();
        builder14.logLevel = logLevel19;
        retrofit.ErrorHandler errorHandler22 = builder14.errorHandler;
        retrofit.RestAdapter.Builder builder24 = builder14.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor25 = null;
        builder24.requestInterceptor = requestInterceptor25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler28 = builder27.errorHandler;
        retrofit.client.Client.Provider provider29 = null;
        builder27.clientProvider = provider29;
        retrofit.Server server33 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder34 = builder27.setServer(server33);
        retrofit.client.Client.Provider provider35 = null;
        java.util.concurrent.Executor executor36 = null;
        java.util.concurrent.Executor executor37 = null;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        retrofit.converter.Converter converter39 = null;
        retrofit.Profiler profiler40 = null;
        retrofit.ErrorHandler errorHandler41 = null;
        retrofit.Server server42 = null;
        retrofit.client.Client.Provider provider43 = null;
        java.util.concurrent.Executor executor44 = null;
        java.util.concurrent.Executor executor45 = null;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        retrofit.converter.Converter converter47 = null;
        retrofit.Profiler profiler48 = null;
        retrofit.ErrorHandler errorHandler49 = null;
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        log50.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter(server42, provider43, executor44, executor45, requestInterceptor46, converter47, profiler48, errorHandler49, log50, logLevel53);
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter(server33, provider35, executor36, executor37, requestInterceptor38, converter39, profiler40, errorHandler41, log50, logLevel55);
        log50.log("");
        builder24.log = log50;
        retrofit.RestAdapter.Log log60 = builder24.log;
        retrofit.RestAdapter.Builder builder61 = builder12.setLog(log60);
        retrofit.RequestInterceptor requestInterceptor62 = builder12.requestInterceptor;
        builder0.requestInterceptor = requestInterceptor62;
        java.lang.Class<?> wildcardClass64 = requestInterceptor62.getClass();
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(provider6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(requestInterceptor62);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test02927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02927");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        restAdapter12.log = log14;
        retrofit.converter.Converter converter16 = null;
        restAdapter12.converter = converter16;
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter12.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor19 = restAdapter12.requestInterceptor;
        retrofit.Server server20 = restAdapter12.server;
        retrofit.RestAdapter.RestHandler restHandler21 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler23 = builder22.errorHandler;
        retrofit.ErrorHandler errorHandler24 = builder22.errorHandler;
        retrofit.RestAdapter.Log log25 = null;
        builder22.log = log25;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean28 = logLevel27.log();
        builder22.logLevel = logLevel27;
        retrofit.ErrorHandler errorHandler30 = builder22.errorHandler;
        retrofit.RestAdapter.Builder builder32 = builder22.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor33 = null;
        builder32.requestInterceptor = requestInterceptor33;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler36 = builder35.errorHandler;
        retrofit.client.Client.Provider provider37 = null;
        builder35.clientProvider = provider37;
        retrofit.Server server41 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder42 = builder35.setServer(server41);
        retrofit.client.Client.Provider provider43 = null;
        java.util.concurrent.Executor executor44 = null;
        java.util.concurrent.Executor executor45 = null;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        retrofit.converter.Converter converter47 = null;
        retrofit.Profiler profiler48 = null;
        retrofit.ErrorHandler errorHandler49 = null;
        retrofit.Server server50 = null;
        retrofit.client.Client.Provider provider51 = null;
        java.util.concurrent.Executor executor52 = null;
        java.util.concurrent.Executor executor53 = null;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        retrofit.converter.Converter converter55 = null;
        retrofit.Profiler profiler56 = null;
        retrofit.ErrorHandler errorHandler57 = null;
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        log58.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel61 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter(server50, provider51, executor52, executor53, requestInterceptor54, converter55, profiler56, errorHandler57, log58, logLevel61);
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter(server41, provider43, executor44, executor45, requestInterceptor46, converter47, profiler48, errorHandler49, log58, logLevel63);
        log58.log("");
        builder32.log = log58;
        log58.log("default");
        log58.log("");
        restAdapter12.log = log58;
        retrofit.client.Client.Provider provider73 = restAdapter12.clientProvider;
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNull(requestInterceptor19);
        org.junit.Assert.assertNull(server20);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(errorHandler30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(errorHandler36);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(log58);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(provider73);
    }

    @Test
    public void test02928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02928");
        retrofit.client.Header[] headerArray16 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList17 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList17, headerArray16);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList17, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList17, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("default", "", (java.util.List<retrofit.client.Header>) headerList17, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("default", "", (java.util.List<retrofit.client.Header>) headerList17, typedOutput25);
        java.util.List<retrofit.client.Header> headerList27 = request26.getHeaders();
        retrofit.mime.TypedOutput typedOutput28 = null;
        retrofit.client.Request request29 = new retrofit.client.Request("", "hi!", headerList27, typedOutput28);
        retrofit.mime.TypedOutput typedOutput30 = null;
        retrofit.client.Request request31 = new retrofit.client.Request("hi!", "default", headerList27, typedOutput30);
        retrofit.mime.TypedOutput typedOutput32 = null;
        retrofit.client.Request request33 = new retrofit.client.Request("default", "hi!", headerList27, typedOutput32);
        retrofit.mime.TypedOutput typedOutput34 = null;
        retrofit.client.Request request35 = new retrofit.client.Request("hi!", "default", headerList27, typedOutput34);
        java.lang.String str36 = request35.getMethod();
        org.junit.Assert.assertNotNull(headerArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(headerList27);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
    }

    @Test
    public void test02929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02929");
        retrofit.client.Header[] headerArray12 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList13 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList13, headerArray12);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList13, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList13, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList13, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList13, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("default", "hi!", (java.util.List<retrofit.client.Header>) headerList13, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("", "default", (java.util.List<retrofit.client.Header>) headerList13, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = request26.getBody();
        java.lang.String str28 = request26.getMethod();
        java.lang.String str29 = request26.getUrl();
        java.lang.String str30 = request26.getMethod();
        org.junit.Assert.assertNotNull(headerArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(typedOutput27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "default" + "'", str29, "default");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
    }

    @Test
    public void test02930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02930");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.converter.Converter converter2 = null;
        restAdapter0.converter = converter2;
        retrofit.ErrorHandler errorHandler4 = null;
        restAdapter0.errorHandler = errorHandler4;
        retrofit.RestAdapter restAdapter6 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor7 = restAdapter6.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler8 = restAdapter6.new RestHandler();
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor10 = restAdapter9.callbackExecutor;
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor12 = restAdapter11.callbackExecutor;
        java.util.concurrent.Executor executor13 = restAdapter11.callbackExecutor;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler15 = restAdapter14.errorHandler;
        retrofit.Server server18 = new retrofit.Server("", "");
        restAdapter14.server = server18;
        restAdapter11.server = server18;
        restAdapter9.server = server18;
        retrofit.Profiler profiler22 = restAdapter9.profiler;
        retrofit.ErrorHandler errorHandler23 = null;
        restAdapter9.errorHandler = errorHandler23;
        retrofit.Profiler profiler25 = null;
        restAdapter9.profiler = profiler25;
        retrofit.RestAdapter.LogLevel logLevel27 = restAdapter9.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter9.logLevel = logLevel28;
        restAdapter6.logLevel = logLevel28;
        restAdapter0.logLevel = logLevel28;
        retrofit.ErrorHandler errorHandler32 = restAdapter0.errorHandler;
        retrofit.ErrorHandler errorHandler33 = restAdapter0.errorHandler;
        java.lang.Throwable throwable34 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable34, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(logLevel27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler32);
        org.junit.Assert.assertNull(errorHandler33);
    }

    @Test
    public void test02931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02931");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter0.logLevel = logLevel19;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler22 = builder21.errorHandler;
        retrofit.client.Client.Provider provider23 = null;
        builder21.clientProvider = provider23;
        retrofit.Server server27 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder28 = builder21.setServer(server27);
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler30 = builder29.errorHandler;
        retrofit.client.Client.Provider provider31 = null;
        builder29.clientProvider = provider31;
        retrofit.converter.Converter converter33 = builder29.converter;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder35 = builder29.setLogLevel(logLevel34);
        builder21.logLevel = logLevel34;
        restAdapter0.logLevel = logLevel34;
        retrofit.Server server38 = restAdapter0.server;
        retrofit.Server server39 = restAdapter0.server;
        retrofit.RestAdapter.RestHandler restHandler40 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler41 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(errorHandler30);
        org.junit.Assert.assertNull(converter33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(server38);
        org.junit.Assert.assertNotNull(server39);
    }

    @Test
    public void test02932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02932");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        retrofit.client.Client.Provider provider5 = null;
        builder0.clientProvider = provider5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler8 = builder7.errorHandler;
        retrofit.ErrorHandler errorHandler9 = builder7.errorHandler;
        retrofit.converter.Converter converter10 = null;
        builder7.converter = converter10;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        builder7.requestInterceptor = requestInterceptor12;
        retrofit.client.Client.Provider provider14 = builder7.clientProvider;
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor17 = restAdapter16.callbackExecutor;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor19 = restAdapter18.callbackExecutor;
        java.util.concurrent.Executor executor20 = restAdapter18.callbackExecutor;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler22 = restAdapter21.errorHandler;
        retrofit.Server server25 = new retrofit.Server("", "");
        restAdapter21.server = server25;
        restAdapter18.server = server25;
        restAdapter16.server = server25;
        retrofit.Profiler profiler29 = restAdapter16.profiler;
        retrofit.ErrorHandler errorHandler30 = null;
        restAdapter16.errorHandler = errorHandler30;
        retrofit.RequestInterceptor requestInterceptor32 = restAdapter16.requestInterceptor;
        retrofit.ErrorHandler errorHandler33 = restAdapter16.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler34 = restAdapter16.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler35 = restAdapter16.new RestHandler();
        retrofit.ErrorHandler errorHandler36 = restAdapter16.errorHandler;
        retrofit.client.Client.Provider provider37 = restAdapter16.clientProvider;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.Server server41 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder42 = builder38.setServer(server41);
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor44 = restAdapter43.callbackExecutor;
        java.util.concurrent.Executor executor45 = restAdapter43.callbackExecutor;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler47 = restAdapter46.errorHandler;
        retrofit.Server server50 = new retrofit.Server("", "");
        restAdapter46.server = server50;
        restAdapter43.server = server50;
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        restAdapter43.log = log53;
        retrofit.RestAdapter.Builder builder55 = builder42.setLog(log53);
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder57 = builder42.setLogLevel(logLevel56);
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler59 = builder58.errorHandler;
        retrofit.client.Client.Provider provider60 = null;
        builder58.clientProvider = provider60;
        retrofit.Server server64 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder65 = builder58.setServer(server64);
        retrofit.converter.Converter converter66 = null;
        builder65.converter = converter66;
        retrofit.RestAdapter restAdapter68 = builder65.build();
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler70 = builder69.errorHandler;
        java.util.concurrent.Executor executor71 = null;
        builder69.callbackExecutor = executor71;
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider74 = builder73.clientProvider;
        java.util.concurrent.Executor executor75 = null;
        builder73.callbackExecutor = executor75;
        retrofit.RestAdapter.Builder builder77 = new retrofit.RestAdapter.Builder();
        retrofit.Server server80 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder81 = builder77.setServer(server80);
        java.lang.String str82 = server80.getUrl();
        retrofit.RestAdapter.Builder builder83 = builder73.setServer(server80);
        retrofit.RestAdapter.Builder builder84 = builder69.setServer(server80);
        restAdapter68.server = server80;
        java.util.concurrent.Executor executor86 = restAdapter68.httpExecutor;
        builder42.callbackExecutor = executor86;
        restAdapter16.callbackExecutor = executor86;
        builder7.httpExecutor = executor86;
        builder0.httpExecutor = executor86;
        retrofit.Server server91 = builder0.server;
        retrofit.RestAdapter.Log log92 = builder0.log;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNull(profiler29);
        org.junit.Assert.assertNull(requestInterceptor32);
        org.junit.Assert.assertNull(errorHandler33);
        org.junit.Assert.assertNull(errorHandler36);
        org.junit.Assert.assertNull(provider37);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(executor44);
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertNull(errorHandler47);
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(errorHandler59);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(restAdapter68);
        org.junit.Assert.assertNull(errorHandler70);
        org.junit.Assert.assertNull(provider74);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "hi!" + "'", str82, "hi!");
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(executor86);
        org.junit.Assert.assertNull(server91);
        org.junit.Assert.assertNull(log92);
    }

    @Test
    public void test02933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02933");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server7 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder8 = builder4.setServer(server7);
        retrofit.converter.Converter converter9 = builder4.converter;
        retrofit.RequestInterceptor requestInterceptor10 = builder4.requestInterceptor;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider12 = builder11.clientProvider;
        java.util.concurrent.Executor executor13 = null;
        builder11.callbackExecutor = executor13;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.Server server18 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder19 = builder15.setServer(server18);
        java.lang.String str20 = server18.getUrl();
        retrofit.RestAdapter.Builder builder21 = builder11.setServer(server18);
        builder11.ensureSaneDefaults();
        retrofit.Server server23 = null;
        retrofit.client.Client.Provider provider24 = null;
        java.util.concurrent.Executor executor25 = null;
        java.util.concurrent.Executor executor26 = null;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        retrofit.converter.Converter converter28 = null;
        retrofit.Profiler profiler29 = null;
        retrofit.ErrorHandler errorHandler30 = null;
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        log31.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server23, provider24, executor25, executor26, requestInterceptor27, converter28, profiler29, errorHandler30, log31, logLevel34);
        retrofit.RestAdapter.RestHandler restHandler36 = restAdapter35.new RestHandler();
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        restAdapter35.log = log37;
        retrofit.RestAdapter.Builder builder39 = builder11.setLog(log37);
        retrofit.RestAdapter.Builder builder41 = builder11.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor42 = builder11.requestInterceptor;
        builder4.requestInterceptor = requestInterceptor42;
        builder0.requestInterceptor = requestInterceptor42;
        retrofit.client.Client.Provider provider45 = builder0.clientProvider;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter46 = builder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(converter9);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(requestInterceptor42);
        org.junit.Assert.assertNull(provider45);
    }

    @Test
    public void test02934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02934");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider5 = builder4.clientProvider;
        java.util.concurrent.Executor executor6 = null;
        builder4.callbackExecutor = executor6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.Server server11 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder12 = builder8.setServer(server11);
        java.lang.String str13 = server11.getUrl();
        retrofit.RestAdapter.Builder builder14 = builder4.setServer(server11);
        retrofit.RestAdapter.Builder builder15 = builder0.setServer(server11);
        retrofit.ErrorHandler errorHandler16 = builder15.errorHandler;
        java.util.concurrent.Executor executor17 = builder15.httpExecutor;
        retrofit.RestAdapter.Log log18 = builder15.log;
        retrofit.client.Client client19 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder20 = builder15.setClient(client19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(log18);
    }

    @Test
    public void test02935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02935");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server6 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder7 = builder0.setServer(server6);
        retrofit.converter.Converter converter8 = null;
        builder7.converter = converter8;
        retrofit.RestAdapter restAdapter10 = builder7.build();
        retrofit.Profiler profiler11 = builder7.profiler;
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder14 = builder7.setServer("default");
        retrofit.Server server15 = null;
        retrofit.client.Client.Provider provider16 = null;
        java.util.concurrent.Executor executor17 = null;
        java.util.concurrent.Executor executor18 = null;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        retrofit.converter.Converter converter20 = null;
        retrofit.Profiler profiler21 = null;
        retrofit.ErrorHandler errorHandler22 = null;
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        log23.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server15, provider16, executor17, executor18, requestInterceptor19, converter20, profiler21, errorHandler22, log23, logLevel26);
        retrofit.RestAdapter.RestHandler restHandler28 = restAdapter27.new RestHandler();
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        restAdapter27.log = log29;
        retrofit.converter.Converter converter31 = null;
        restAdapter27.converter = converter31;
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter27.getLogLevel();
        retrofit.ErrorHandler errorHandler34 = restAdapter27.errorHandler;
        retrofit.Profiler profiler35 = restAdapter27.profiler;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler37 = null;
        builder36.errorHandler = errorHandler37;
        retrofit.ErrorHandler errorHandler39 = builder36.errorHandler;
        retrofit.RestAdapter.Builder builder41 = builder36.setServer("hi!");
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler43 = builder42.errorHandler;
        retrofit.ErrorHandler errorHandler44 = builder42.errorHandler;
        retrofit.Profiler profiler45 = builder42.profiler;
        retrofit.RestAdapter.Log log46 = builder42.log;
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.FULL;
        builder42.logLevel = logLevel47;
        retrofit.RestAdapter.Builder builder49 = builder41.setLogLevel(logLevel47);
        retrofit.Server server50 = null;
        retrofit.client.Client.Provider provider51 = null;
        java.util.concurrent.Executor executor52 = null;
        java.util.concurrent.Executor executor53 = null;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        retrofit.converter.Converter converter55 = null;
        retrofit.Profiler profiler56 = null;
        retrofit.ErrorHandler errorHandler57 = null;
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        log58.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel61 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter(server50, provider51, executor52, executor53, requestInterceptor54, converter55, profiler56, errorHandler57, log58, logLevel61);
        log58.log("");
        retrofit.RestAdapter.Builder builder65 = builder49.setLog(log58);
        restAdapter27.log = log58;
        retrofit.RestAdapter.RestHandler restHandler67 = restAdapter27.new RestHandler();
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        retrofit.Server server71 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder72 = builder68.setServer(server71);
        retrofit.RestAdapter restAdapter73 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor74 = restAdapter73.callbackExecutor;
        java.util.concurrent.Executor executor75 = restAdapter73.callbackExecutor;
        retrofit.RestAdapter restAdapter76 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler77 = restAdapter76.errorHandler;
        retrofit.Server server80 = new retrofit.Server("", "");
        restAdapter76.server = server80;
        restAdapter73.server = server80;
        retrofit.RestAdapter.Log log83 = retrofit.RestAdapter.Log.NONE;
        restAdapter73.log = log83;
        retrofit.RestAdapter.Builder builder85 = builder72.setLog(log83);
        restAdapter27.log = log83;
        log83.log("");
        retrofit.RestAdapter.Builder builder89 = builder7.setLog(log83);
        retrofit.Profiler profiler90 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder91 = builder7.setProfiler(profiler90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(restAdapter10);
        org.junit.Assert.assertNull(profiler11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler34);
        org.junit.Assert.assertNull(profiler35);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(errorHandler43);
        org.junit.Assert.assertNull(errorHandler44);
        org.junit.Assert.assertNull(profiler45);
        org.junit.Assert.assertNull(log46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(log58);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNull(executor74);
        org.junit.Assert.assertNull(executor75);
        org.junit.Assert.assertNull(errorHandler77);
        org.junit.Assert.assertNotNull(log83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder89);
    }

    @Test
    public void test02936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02936");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler15 = builder14.errorHandler;
        retrofit.Server server18 = new retrofit.Server("", "");
        builder14.server = server18;
        retrofit.client.Client.Provider provider20 = null;
        java.util.concurrent.Executor executor21 = null;
        java.util.concurrent.Executor executor22 = null;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        retrofit.converter.Converter converter24 = null;
        retrofit.Profiler profiler25 = null;
        retrofit.ErrorHandler errorHandler26 = null;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler28 = builder27.errorHandler;
        retrofit.Server server31 = new retrofit.Server("", "");
        builder27.server = server31;
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        builder27.log = log33;
        retrofit.Server server35 = null;
        retrofit.client.Client.Provider provider36 = null;
        java.util.concurrent.Executor executor37 = null;
        java.util.concurrent.Executor executor38 = null;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        retrofit.converter.Converter converter40 = null;
        retrofit.Profiler profiler41 = null;
        retrofit.ErrorHandler errorHandler42 = null;
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        log43.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter(server35, provider36, executor37, executor38, requestInterceptor39, converter40, profiler41, errorHandler42, log43, logLevel46);
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter(server18, provider20, executor21, executor22, requestInterceptor23, converter24, profiler25, errorHandler26, log33, logLevel46);
        retrofit.RestAdapter.LogLevel logLevel49 = restAdapter48.logLevel;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler51 = builder50.errorHandler;
        retrofit.client.Client.Provider provider52 = null;
        builder50.clientProvider = provider52;
        retrofit.Server server56 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder57 = builder50.setServer(server56);
        retrofit.converter.Converter converter58 = null;
        builder57.converter = converter58;
        retrofit.RestAdapter restAdapter60 = builder57.build();
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler62 = builder61.errorHandler;
        java.util.concurrent.Executor executor63 = null;
        builder61.callbackExecutor = executor63;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider66 = builder65.clientProvider;
        java.util.concurrent.Executor executor67 = null;
        builder65.callbackExecutor = executor67;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        retrofit.Server server72 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder73 = builder69.setServer(server72);
        java.lang.String str74 = server72.getUrl();
        retrofit.RestAdapter.Builder builder75 = builder65.setServer(server72);
        retrofit.RestAdapter.Builder builder76 = builder61.setServer(server72);
        restAdapter60.server = server72;
        java.util.concurrent.Executor executor78 = restAdapter60.httpExecutor;
        java.util.concurrent.Executor executor79 = restAdapter60.callbackExecutor;
        restAdapter48.httpExecutor = executor79;
        restAdapter12.httpExecutor = executor79;
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler51);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(restAdapter60);
        org.junit.Assert.assertNull(errorHandler62);
        org.junit.Assert.assertNull(provider66);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "hi!" + "'", str74, "hi!");
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(executor78);
        org.junit.Assert.assertNotNull(executor79);
    }

    @Test
    public void test02937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02937");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server4 = new retrofit.Server("", "");
        builder0.server = server4;
        java.util.concurrent.Executor executor6 = null;
        builder0.httpExecutor = executor6;
        retrofit.RestAdapter.Builder builder9 = builder0.setServer("default");
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor11 = restAdapter10.callbackExecutor;
        retrofit.converter.Converter converter12 = null;
        restAdapter10.converter = converter12;
        retrofit.ErrorHandler errorHandler14 = restAdapter10.errorHandler;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler16 = null;
        builder15.errorHandler = errorHandler16;
        retrofit.ErrorHandler errorHandler18 = builder15.errorHandler;
        retrofit.ErrorHandler errorHandler19 = builder15.errorHandler;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler21 = builder20.errorHandler;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.Server server25 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder26 = builder22.setServer(server25);
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor28 = restAdapter27.callbackExecutor;
        java.util.concurrent.Executor executor29 = restAdapter27.callbackExecutor;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler31 = restAdapter30.errorHandler;
        retrofit.Server server34 = new retrofit.Server("", "");
        restAdapter30.server = server34;
        restAdapter27.server = server34;
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        restAdapter27.log = log37;
        retrofit.RestAdapter.Builder builder39 = builder26.setLog(log37);
        retrofit.RestAdapter.Builder builder40 = builder20.setLog(log37);
        retrofit.RestAdapter.Builder builder41 = builder15.setLog(log37);
        restAdapter10.log = log37;
        builder9.log = log37;
        log37.log("default");
        log37.log("hi!");
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(errorHandler18);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(errorHandler31);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test02938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02938");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.converter.Converter converter2 = null;
        restAdapter0.converter = converter2;
        retrofit.ErrorHandler errorHandler4 = restAdapter0.errorHandler;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler6 = null;
        builder5.errorHandler = errorHandler6;
        retrofit.ErrorHandler errorHandler8 = builder5.errorHandler;
        retrofit.ErrorHandler errorHandler9 = builder5.errorHandler;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler11 = builder10.errorHandler;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.Server server15 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder16 = builder12.setServer(server15);
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor18 = restAdapter17.callbackExecutor;
        java.util.concurrent.Executor executor19 = restAdapter17.callbackExecutor;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler21 = restAdapter20.errorHandler;
        retrofit.Server server24 = new retrofit.Server("", "");
        restAdapter20.server = server24;
        restAdapter17.server = server24;
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        restAdapter17.log = log27;
        retrofit.RestAdapter.Builder builder29 = builder16.setLog(log27);
        retrofit.RestAdapter.Builder builder30 = builder10.setLog(log27);
        retrofit.RestAdapter.Builder builder31 = builder5.setLog(log27);
        restAdapter0.log = log27;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler34 = restAdapter33.errorHandler;
        retrofit.Server server37 = new retrofit.Server("", "");
        restAdapter33.server = server37;
        retrofit.Profiler profiler39 = null;
        restAdapter33.profiler = profiler39;
        retrofit.Profiler profiler41 = null;
        restAdapter33.profiler = profiler41;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler44 = restAdapter43.new RestHandler();
        retrofit.client.Client.Provider provider45 = restAdapter43.clientProvider;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler47 = builder46.errorHandler;
        retrofit.Server server50 = new retrofit.Server("", "");
        builder46.server = server50;
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        builder46.log = log52;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler55 = builder54.errorHandler;
        retrofit.client.Client.Provider provider56 = null;
        builder54.clientProvider = provider56;
        retrofit.Server server60 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder61 = builder54.setServer(server60);
        retrofit.converter.Converter converter62 = null;
        builder61.converter = converter62;
        retrofit.RestAdapter restAdapter64 = builder61.build();
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler66 = builder65.errorHandler;
        java.util.concurrent.Executor executor67 = null;
        builder65.callbackExecutor = executor67;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider70 = builder69.clientProvider;
        java.util.concurrent.Executor executor71 = null;
        builder69.callbackExecutor = executor71;
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        retrofit.Server server76 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder77 = builder73.setServer(server76);
        java.lang.String str78 = server76.getUrl();
        retrofit.RestAdapter.Builder builder79 = builder69.setServer(server76);
        retrofit.RestAdapter.Builder builder80 = builder65.setServer(server76);
        restAdapter64.server = server76;
        java.util.concurrent.Executor executor82 = restAdapter64.httpExecutor;
        builder46.httpExecutor = executor82;
        restAdapter43.callbackExecutor = executor82;
        restAdapter33.callbackExecutor = executor82;
        restAdapter0.httpExecutor = executor82;
        retrofit.RestAdapter.LogLevel logLevel87 = restAdapter0.logLevel;
        java.util.concurrent.Executor executor88 = restAdapter0.callbackExecutor;
        retrofit.Server server89 = restAdapter0.server;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(errorHandler4);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(errorHandler34);
        org.junit.Assert.assertNull(provider45);
        org.junit.Assert.assertNull(errorHandler47);
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNull(errorHandler55);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(restAdapter64);
        org.junit.Assert.assertNull(errorHandler66);
        org.junit.Assert.assertNull(provider70);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "hi!" + "'", str78, "hi!");
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(executor82);
        org.junit.Assert.assertNull(logLevel87);
        org.junit.Assert.assertNull(executor88);
        org.junit.Assert.assertNull(server89);
    }

    @Test
    public void test02939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02939");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler17 = builder16.errorHandler;
        java.util.concurrent.Executor executor18 = builder16.callbackExecutor;
        retrofit.RestAdapter.Builder builder20 = builder16.setServer("hi!");
        retrofit.Server server23 = new retrofit.Server("default", "hi!");
        java.lang.String str24 = server23.getUrl();
        retrofit.RestAdapter.Builder builder25 = builder20.setServer(server23);
        retrofit.RestAdapter.LogLevel logLevel26 = builder25.logLevel;
        builder25.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler29 = builder28.errorHandler;
        retrofit.Server server32 = new retrofit.Server("", "");
        builder28.server = server32;
        java.util.concurrent.Executor executor34 = null;
        builder28.httpExecutor = executor34;
        retrofit.RestAdapter.Builder builder37 = builder28.setServer("default");
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler39 = builder38.errorHandler;
        retrofit.Server server42 = new retrofit.Server("", "");
        builder38.server = server42;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        builder38.log = log44;
        retrofit.RequestInterceptor requestInterceptor46 = builder38.requestInterceptor;
        retrofit.RestAdapter.Log log47 = retrofit.RestAdapter.Log.NONE;
        log47.log("hi!");
        log47.log("hi!");
        builder38.log = log47;
        builder37.log = log47;
        retrofit.RestAdapter.Log log54 = builder37.log;
        retrofit.RestAdapter.Builder builder55 = builder25.setLog(log54);
        retrofit.client.Client.Provider provider56 = builder55.clientProvider;
        restAdapter0.clientProvider = provider56;
        retrofit.RestAdapter.LogLevel logLevel58 = restAdapter0.logLevel;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "default" + "'", str24, "default");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNull(requestInterceptor46);
        org.junit.Assert.assertNotNull(log47);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(provider56);
        org.junit.Assert.assertNull(logLevel58);
    }

    @Test
    public void test02940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02940");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter0.getLogLevel();
        retrofit.client.Client.Provider provider20 = null;
        restAdapter0.clientProvider = provider20;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean23 = logLevel22.log();
        restAdapter0.logLevel = logLevel22;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        restAdapter0.requestInterceptor = requestInterceptor25;
        retrofit.ErrorHandler errorHandler27 = restAdapter0.errorHandler;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler29 = builder28.errorHandler;
        retrofit.ErrorHandler errorHandler30 = builder28.errorHandler;
        retrofit.RestAdapter.Log log31 = null;
        builder28.log = log31;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean34 = logLevel33.log();
        builder28.logLevel = logLevel33;
        retrofit.ErrorHandler errorHandler36 = builder28.errorHandler;
        retrofit.RestAdapter.Builder builder38 = builder28.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor39 = null;
        builder38.requestInterceptor = requestInterceptor39;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler42 = builder41.errorHandler;
        retrofit.client.Client.Provider provider43 = null;
        builder41.clientProvider = provider43;
        retrofit.Server server47 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder48 = builder41.setServer(server47);
        retrofit.client.Client.Provider provider49 = null;
        java.util.concurrent.Executor executor50 = null;
        java.util.concurrent.Executor executor51 = null;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        retrofit.converter.Converter converter53 = null;
        retrofit.Profiler profiler54 = null;
        retrofit.ErrorHandler errorHandler55 = null;
        retrofit.Server server56 = null;
        retrofit.client.Client.Provider provider57 = null;
        java.util.concurrent.Executor executor58 = null;
        java.util.concurrent.Executor executor59 = null;
        retrofit.RequestInterceptor requestInterceptor60 = null;
        retrofit.converter.Converter converter61 = null;
        retrofit.Profiler profiler62 = null;
        retrofit.ErrorHandler errorHandler63 = null;
        retrofit.RestAdapter.Log log64 = retrofit.RestAdapter.Log.NONE;
        log64.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel67 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter(server56, provider57, executor58, executor59, requestInterceptor60, converter61, profiler62, errorHandler63, log64, logLevel67);
        retrofit.RestAdapter.LogLevel logLevel69 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter(server47, provider49, executor50, executor51, requestInterceptor52, converter53, profiler54, errorHandler55, log64, logLevel69);
        log64.log("");
        builder38.log = log64;
        log64.log("default");
        restAdapter0.log = log64;
        retrofit.RestAdapter.RestHandler restHandler77 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler78 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor79 = restAdapter0.callbackExecutor;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNull(errorHandler30);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(errorHandler36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(errorHandler42);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(log64);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor79);
    }

    @Test
    public void test02941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02941");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter0.getLogLevel();
        retrofit.client.Client.Provider provider20 = null;
        restAdapter0.clientProvider = provider20;
        retrofit.converter.Converter converter22 = restAdapter0.converter;
        retrofit.ErrorHandler errorHandler23 = restAdapter0.errorHandler;
        retrofit.ErrorHandler errorHandler24 = restAdapter0.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel25 = restAdapter0.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor26 = restAdapter0.requestInterceptor;
        retrofit.Server server27 = null;
        retrofit.client.Client.Provider provider28 = null;
        java.util.concurrent.Executor executor29 = null;
        java.util.concurrent.Executor executor30 = null;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        retrofit.converter.Converter converter32 = null;
        retrofit.Profiler profiler33 = null;
        retrofit.ErrorHandler errorHandler34 = null;
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        log35.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter(server27, provider28, executor29, executor30, requestInterceptor31, converter32, profiler33, errorHandler34, log35, logLevel38);
        retrofit.RestAdapter.RestHandler restHandler40 = restAdapter39.new RestHandler();
        java.util.concurrent.Executor executor41 = null;
        restAdapter39.callbackExecutor = executor41;
        retrofit.client.Header[] headerArray45 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList46 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList46, headerArray45);
        retrofit.mime.TypedOutput typedOutput48 = null;
        retrofit.client.Request request49 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList46, typedOutput48);
        retrofit.client.Request request50 = restAdapter39.logAndReplaceRequest(request49);
        retrofit.client.Client.Provider provider51 = restAdapter39.clientProvider;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor53 = restAdapter52.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean55 = logLevel54.log();
        restAdapter52.logLevel = logLevel54;
        restAdapter39.setLogLevel(logLevel54);
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler59 = builder58.errorHandler;
        java.util.concurrent.Executor executor60 = builder58.callbackExecutor;
        retrofit.RestAdapter.Builder builder62 = builder58.setServer("hi!");
        retrofit.Server server65 = new retrofit.Server("default", "hi!");
        java.lang.String str66 = server65.getUrl();
        retrofit.RestAdapter.Builder builder67 = builder62.setServer(server65);
        retrofit.RestAdapter.LogLevel logLevel68 = builder67.logLevel;
        builder67.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler71 = builder70.errorHandler;
        retrofit.RequestInterceptor requestInterceptor72 = null;
        builder70.requestInterceptor = requestInterceptor72;
        java.util.concurrent.Executor executor74 = builder70.httpExecutor;
        retrofit.RestAdapter.Log log75 = retrofit.RestAdapter.Log.NONE;
        log75.log("default");
        builder70.log = log75;
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler80 = builder79.errorHandler;
        retrofit.client.Client.Provider provider81 = null;
        builder79.clientProvider = provider81;
        retrofit.Server server85 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder86 = builder79.setServer(server85);
        retrofit.converter.Converter converter87 = null;
        builder86.converter = converter87;
        retrofit.RestAdapter restAdapter89 = builder86.build();
        retrofit.Profiler profiler90 = builder86.profiler;
        retrofit.Profiler profiler91 = builder86.profiler;
        retrofit.client.Client.Provider provider92 = builder86.clientProvider;
        retrofit.RestAdapter.Builder builder93 = builder70.setClient(provider92);
        retrofit.RestAdapter.Builder builder94 = builder67.setClient(provider92);
        java.util.concurrent.Executor executor95 = builder67.httpExecutor;
        java.util.concurrent.Executor executor96 = builder67.httpExecutor;
        restAdapter39.httpExecutor = executor96;
        restAdapter0.httpExecutor = executor96;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(converter22);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNull(logLevel25);
        org.junit.Assert.assertNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(request50);
        org.junit.Assert.assertNull(provider51);
        org.junit.Assert.assertNull(executor53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(errorHandler59);
        org.junit.Assert.assertNull(executor60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "default" + "'", str66, "default");
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler71);
        org.junit.Assert.assertNull(executor74);
        org.junit.Assert.assertNotNull(log75);
        org.junit.Assert.assertNull(errorHandler80);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(restAdapter89);
        org.junit.Assert.assertNull(profiler90);
        org.junit.Assert.assertNull(profiler91);
        org.junit.Assert.assertNotNull(provider92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(executor95);
        org.junit.Assert.assertNotNull(executor96);
    }

    @Test
    public void test02942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02942");
        retrofit.client.Header[] headerArray10 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList11 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList11, headerArray10);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList11, typedOutput13);
        java.util.List<retrofit.client.Header> headerList15 = request14.getHeaders();
        java.util.List<retrofit.client.Header> headerList16 = request14.getHeaders();
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("hi!", "hi!", headerList16, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "", headerList16, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("default", "hi!", headerList16, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("default", "hi!", headerList16, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = request24.getBody();
        java.util.List<retrofit.client.Header> headerList26 = request24.getHeaders();
        org.junit.Assert.assertNotNull(headerArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertNotNull(headerList16);
        org.junit.Assert.assertNull(typedOutput25);
        org.junit.Assert.assertNotNull(headerList26);
    }

    @Test
    public void test02943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02943");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        restAdapter12.log = log14;
        retrofit.converter.Converter converter16 = null;
        restAdapter12.converter = converter16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server21 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder22 = builder18.setServer(server21);
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor24 = restAdapter23.callbackExecutor;
        java.util.concurrent.Executor executor25 = restAdapter23.callbackExecutor;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler27 = restAdapter26.errorHandler;
        retrofit.Server server30 = new retrofit.Server("", "");
        restAdapter26.server = server30;
        restAdapter23.server = server30;
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        restAdapter23.log = log33;
        retrofit.RestAdapter.Builder builder35 = builder22.setLog(log33);
        restAdapter12.log = log33;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler38 = builder37.errorHandler;
        retrofit.Server server41 = new retrofit.Server("", "");
        builder37.server = server41;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor44 = restAdapter43.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler45 = restAdapter43.new RestHandler();
        retrofit.Server server48 = new retrofit.Server("hi!", "hi!");
        restAdapter43.server = server48;
        retrofit.RestAdapter.Builder builder50 = builder37.setServer(server48);
        restAdapter12.server = server48;
        retrofit.Profiler profiler52 = restAdapter12.profiler;
        retrofit.Server server53 = restAdapter12.server;
        retrofit.RestAdapter.LogLevel logLevel54 = restAdapter12.getLogLevel();
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler56 = restAdapter55.new RestHandler();
        retrofit.client.Client.Provider provider57 = restAdapter55.clientProvider;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler59 = builder58.errorHandler;
        retrofit.Server server62 = new retrofit.Server("", "");
        builder58.server = server62;
        retrofit.RestAdapter.Log log64 = retrofit.RestAdapter.Log.NONE;
        builder58.log = log64;
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler67 = builder66.errorHandler;
        retrofit.client.Client.Provider provider68 = null;
        builder66.clientProvider = provider68;
        retrofit.Server server72 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder73 = builder66.setServer(server72);
        retrofit.converter.Converter converter74 = null;
        builder73.converter = converter74;
        retrofit.RestAdapter restAdapter76 = builder73.build();
        retrofit.RestAdapter.Builder builder77 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler78 = builder77.errorHandler;
        java.util.concurrent.Executor executor79 = null;
        builder77.callbackExecutor = executor79;
        retrofit.RestAdapter.Builder builder81 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider82 = builder81.clientProvider;
        java.util.concurrent.Executor executor83 = null;
        builder81.callbackExecutor = executor83;
        retrofit.RestAdapter.Builder builder85 = new retrofit.RestAdapter.Builder();
        retrofit.Server server88 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder89 = builder85.setServer(server88);
        java.lang.String str90 = server88.getUrl();
        retrofit.RestAdapter.Builder builder91 = builder81.setServer(server88);
        retrofit.RestAdapter.Builder builder92 = builder77.setServer(server88);
        restAdapter76.server = server88;
        java.util.concurrent.Executor executor94 = restAdapter76.httpExecutor;
        builder58.httpExecutor = executor94;
        restAdapter55.callbackExecutor = executor94;
        restAdapter12.httpExecutor = executor94;
        retrofit.RestAdapter.Log log98 = restAdapter12.log;
        retrofit.client.Client.Provider provider99 = restAdapter12.clientProvider;
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(errorHandler38);
        org.junit.Assert.assertNull(executor44);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(profiler52);
        org.junit.Assert.assertNotNull(server53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(provider57);
        org.junit.Assert.assertNull(errorHandler59);
        org.junit.Assert.assertNotNull(log64);
        org.junit.Assert.assertNull(errorHandler67);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(restAdapter76);
        org.junit.Assert.assertNull(errorHandler78);
        org.junit.Assert.assertNull(provider82);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "hi!" + "'", str90, "hi!");
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(executor94);
        org.junit.Assert.assertNotNull(log98);
        org.junit.Assert.assertNull(provider99);
    }

    @Test
    public void test02944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02944");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        restAdapter5.log = log15;
        retrofit.RestAdapter.Builder builder17 = builder4.setLog(log15);
        retrofit.converter.Converter converter18 = null;
        builder17.converter = converter18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler21 = builder20.errorHandler;
        retrofit.ErrorHandler errorHandler22 = builder20.errorHandler;
        retrofit.Profiler profiler23 = builder20.profiler;
        retrofit.RestAdapter.Log log24 = builder20.log;
        retrofit.Server server25 = null;
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        log33.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter(server25, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log33, logLevel36);
        builder20.log = log33;
        retrofit.RestAdapter.Builder builder39 = builder17.setLog(log33);
        retrofit.ErrorHandler errorHandler40 = null;
        builder17.errorHandler = errorHandler40;
        retrofit.RestAdapter.Log log42 = builder17.log;
        retrofit.Profiler profiler43 = builder17.profiler;
        retrofit.ErrorHandler errorHandler44 = builder17.errorHandler;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler46 = builder45.errorHandler;
        retrofit.Server server49 = new retrofit.Server("", "");
        builder45.server = server49;
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        builder45.log = log51;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler54 = builder53.errorHandler;
        retrofit.client.Client.Provider provider55 = null;
        builder53.clientProvider = provider55;
        retrofit.Server server59 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder60 = builder53.setServer(server59);
        retrofit.converter.Converter converter61 = null;
        builder60.converter = converter61;
        retrofit.RestAdapter restAdapter63 = builder60.build();
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler65 = builder64.errorHandler;
        java.util.concurrent.Executor executor66 = null;
        builder64.callbackExecutor = executor66;
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider69 = builder68.clientProvider;
        java.util.concurrent.Executor executor70 = null;
        builder68.callbackExecutor = executor70;
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        retrofit.Server server75 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder76 = builder72.setServer(server75);
        java.lang.String str77 = server75.getUrl();
        retrofit.RestAdapter.Builder builder78 = builder68.setServer(server75);
        retrofit.RestAdapter.Builder builder79 = builder64.setServer(server75);
        restAdapter63.server = server75;
        java.util.concurrent.Executor executor81 = restAdapter63.httpExecutor;
        builder45.httpExecutor = executor81;
        builder17.callbackExecutor = executor81;
        retrofit.Profiler profiler84 = null;
        builder17.profiler = profiler84;
        retrofit.RestAdapter.Builder builder87 = builder17.setServer("default");
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder89 = builder87.setServer("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be blank.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNull(profiler23);
        org.junit.Assert.assertNull(log24);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertNull(profiler43);
        org.junit.Assert.assertNull(errorHandler44);
        org.junit.Assert.assertNull(errorHandler46);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNull(errorHandler54);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(restAdapter63);
        org.junit.Assert.assertNull(errorHandler65);
        org.junit.Assert.assertNull(provider69);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "hi!" + "'", str77, "hi!");
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(executor81);
        org.junit.Assert.assertNotNull(builder87);
    }

    @Test
    public void test02945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02945");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        builder0.requestInterceptor = requestInterceptor5;
        retrofit.client.Client.Provider provider7 = null;
        builder0.clientProvider = provider7;
        builder0.ensureSaneDefaults();
        retrofit.Profiler profiler10 = null;
        builder0.profiler = profiler10;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder13 = builder0.setServer("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be blank.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
    }

    @Test
    public void test02946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02946");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.client.Client.Provider provider14 = restAdapter12.clientProvider;
        retrofit.RestAdapter.Log log15 = restAdapter12.log;
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter12.new RestHandler();
        retrofit.Profiler profiler17 = restAdapter12.profiler;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor19 = restAdapter18.callbackExecutor;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor21 = restAdapter20.callbackExecutor;
        java.util.concurrent.Executor executor22 = restAdapter20.callbackExecutor;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler24 = restAdapter23.errorHandler;
        retrofit.Server server27 = new retrofit.Server("", "");
        restAdapter23.server = server27;
        restAdapter20.server = server27;
        restAdapter18.server = server27;
        retrofit.Profiler profiler31 = restAdapter18.profiler;
        retrofit.ErrorHandler errorHandler32 = null;
        restAdapter18.errorHandler = errorHandler32;
        retrofit.Profiler profiler34 = null;
        restAdapter18.profiler = profiler34;
        retrofit.RestAdapter.RestHandler restHandler36 = restAdapter18.new RestHandler();
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.Server server40 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder41 = builder37.setServer(server40);
        retrofit.converter.Converter converter42 = builder37.converter;
        retrofit.RequestInterceptor requestInterceptor43 = builder37.requestInterceptor;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider45 = builder44.clientProvider;
        java.util.concurrent.Executor executor46 = null;
        builder44.callbackExecutor = executor46;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.Server server51 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder52 = builder48.setServer(server51);
        java.lang.String str53 = server51.getUrl();
        retrofit.RestAdapter.Builder builder54 = builder44.setServer(server51);
        builder44.ensureSaneDefaults();
        retrofit.Server server56 = null;
        retrofit.client.Client.Provider provider57 = null;
        java.util.concurrent.Executor executor58 = null;
        java.util.concurrent.Executor executor59 = null;
        retrofit.RequestInterceptor requestInterceptor60 = null;
        retrofit.converter.Converter converter61 = null;
        retrofit.Profiler profiler62 = null;
        retrofit.ErrorHandler errorHandler63 = null;
        retrofit.RestAdapter.Log log64 = retrofit.RestAdapter.Log.NONE;
        log64.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel67 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter(server56, provider57, executor58, executor59, requestInterceptor60, converter61, profiler62, errorHandler63, log64, logLevel67);
        retrofit.RestAdapter.RestHandler restHandler69 = restAdapter68.new RestHandler();
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        restAdapter68.log = log70;
        retrofit.RestAdapter.Builder builder72 = builder44.setLog(log70);
        retrofit.RestAdapter.Builder builder74 = builder44.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor75 = builder44.requestInterceptor;
        builder37.requestInterceptor = requestInterceptor75;
        restAdapter18.requestInterceptor = requestInterceptor75;
        restAdapter12.requestInterceptor = requestInterceptor75;
        retrofit.RestAdapter.LogLevel logLevel79 = restAdapter12.logLevel;
        boolean boolean80 = logLevel79.log();
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNull(profiler17);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNull(profiler31);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(converter42);
        org.junit.Assert.assertNull(requestInterceptor43);
        org.junit.Assert.assertNull(provider45);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(log64);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(requestInterceptor75);
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test02947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02947");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = builder0.clientProvider;
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server7 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder8 = builder4.setServer(server7);
        java.lang.String str9 = server7.getUrl();
        retrofit.RestAdapter.Builder builder10 = builder0.setServer(server7);
        builder0.ensureSaneDefaults();
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        log20.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel23);
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter24.new RestHandler();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        restAdapter24.log = log26;
        retrofit.RestAdapter.Builder builder28 = builder0.setLog(log26);
        retrofit.RequestInterceptor requestInterceptor29 = null;
        builder28.requestInterceptor = requestInterceptor29;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.Server server34 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder35 = builder31.setServer(server34);
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor37 = restAdapter36.callbackExecutor;
        java.util.concurrent.Executor executor38 = restAdapter36.callbackExecutor;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler40 = restAdapter39.errorHandler;
        retrofit.Server server43 = new retrofit.Server("", "");
        restAdapter39.server = server43;
        restAdapter36.server = server43;
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        restAdapter36.log = log46;
        retrofit.RestAdapter.Builder builder48 = builder35.setLog(log46);
        builder28.log = log46;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler51 = null;
        builder50.errorHandler = errorHandler51;
        retrofit.converter.Converter converter53 = builder50.converter;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.Server server57 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder58 = builder54.setServer(server57);
        retrofit.converter.Converter converter59 = builder54.converter;
        retrofit.RequestInterceptor requestInterceptor60 = builder54.requestInterceptor;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider62 = builder61.clientProvider;
        java.util.concurrent.Executor executor63 = null;
        builder61.callbackExecutor = executor63;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.Server server68 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder69 = builder65.setServer(server68);
        java.lang.String str70 = server68.getUrl();
        retrofit.RestAdapter.Builder builder71 = builder61.setServer(server68);
        builder61.ensureSaneDefaults();
        retrofit.Server server73 = null;
        retrofit.client.Client.Provider provider74 = null;
        java.util.concurrent.Executor executor75 = null;
        java.util.concurrent.Executor executor76 = null;
        retrofit.RequestInterceptor requestInterceptor77 = null;
        retrofit.converter.Converter converter78 = null;
        retrofit.Profiler profiler79 = null;
        retrofit.ErrorHandler errorHandler80 = null;
        retrofit.RestAdapter.Log log81 = retrofit.RestAdapter.Log.NONE;
        log81.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel84 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter85 = new retrofit.RestAdapter(server73, provider74, executor75, executor76, requestInterceptor77, converter78, profiler79, errorHandler80, log81, logLevel84);
        retrofit.RestAdapter.RestHandler restHandler86 = restAdapter85.new RestHandler();
        retrofit.RestAdapter.Log log87 = retrofit.RestAdapter.Log.NONE;
        restAdapter85.log = log87;
        retrofit.RestAdapter.Builder builder89 = builder61.setLog(log87);
        retrofit.RestAdapter.Builder builder91 = builder61.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor92 = builder61.requestInterceptor;
        builder54.requestInterceptor = requestInterceptor92;
        builder50.requestInterceptor = requestInterceptor92;
        builder28.requestInterceptor = requestInterceptor92;
        java.util.concurrent.Executor executor96 = builder28.httpExecutor;
        retrofit.RestAdapter.Log log97 = builder28.log;
        retrofit.ErrorHandler errorHandler98 = builder28.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel99 = builder28.logLevel;
        org.junit.Assert.assertNull(provider1);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(converter53);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(converter59);
        org.junit.Assert.assertNull(requestInterceptor60);
        org.junit.Assert.assertNull(provider62);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hi!" + "'", str70, "hi!");
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(log81);
        org.junit.Assert.assertTrue("'" + logLevel84 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel84.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log87);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(requestInterceptor92);
        org.junit.Assert.assertNotNull(executor96);
        org.junit.Assert.assertNotNull(log97);
        org.junit.Assert.assertNotNull(errorHandler98);
        org.junit.Assert.assertTrue("'" + logLevel99 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel99.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test02948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02948");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server6 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder7 = builder0.setServer(server6);
        retrofit.Server server10 = new retrofit.Server("", "");
        builder7.server = server10;
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler14 = builder13.errorHandler;
        retrofit.client.Client.Provider provider15 = null;
        builder13.clientProvider = provider15;
        retrofit.Server server19 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder20 = builder13.setServer(server19);
        retrofit.converter.Converter converter21 = null;
        builder20.converter = converter21;
        retrofit.RestAdapter restAdapter23 = builder20.build();
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler25 = builder24.errorHandler;
        java.util.concurrent.Executor executor26 = null;
        builder24.callbackExecutor = executor26;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider29 = builder28.clientProvider;
        java.util.concurrent.Executor executor30 = null;
        builder28.callbackExecutor = executor30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.Server server35 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder36 = builder32.setServer(server35);
        java.lang.String str37 = server35.getUrl();
        retrofit.RestAdapter.Builder builder38 = builder28.setServer(server35);
        retrofit.RestAdapter.Builder builder39 = builder24.setServer(server35);
        restAdapter23.server = server35;
        java.lang.String str41 = server35.getName();
        retrofit.RestAdapter.Builder builder42 = builder7.setServer(server35);
        builder7.ensureSaneDefaults();
        java.util.concurrent.Executor executor44 = builder7.callbackExecutor;
        java.lang.Class<?> wildcardClass45 = builder7.getClass();
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(restAdapter23);
        org.junit.Assert.assertNull(errorHandler25);
        org.junit.Assert.assertNull(provider29);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(executor44);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test02949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02949");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        builder0.requestInterceptor = requestInterceptor5;
        retrofit.ErrorHandler errorHandler7 = builder0.errorHandler;
        java.util.concurrent.Executor executor8 = builder0.httpExecutor;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider10 = builder9.clientProvider;
        java.util.concurrent.Executor executor11 = null;
        builder9.callbackExecutor = executor11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.Server server16 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder17 = builder13.setServer(server16);
        java.lang.String str18 = server16.getUrl();
        retrofit.RestAdapter.Builder builder19 = builder9.setServer(server16);
        builder9.ensureSaneDefaults();
        retrofit.Server server21 = null;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        log29.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel32);
        retrofit.RestAdapter.RestHandler restHandler34 = restAdapter33.new RestHandler();
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        restAdapter33.log = log35;
        retrofit.RestAdapter.Builder builder37 = builder9.setLog(log35);
        retrofit.RestAdapter.Builder builder39 = builder9.setServer("hi!");
        retrofit.RestAdapter.Builder builder41 = builder39.setServer("hi!");
        retrofit.ErrorHandler errorHandler42 = builder39.errorHandler;
        retrofit.converter.Converter converter43 = builder39.converter;
        retrofit.RestAdapter.Builder builder44 = builder0.setConverter(converter43);
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(provider10);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(errorHandler42);
        org.junit.Assert.assertNotNull(converter43);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test02950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02950");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RequestInterceptor requestInterceptor13 = null;
        restAdapter12.requestInterceptor = requestInterceptor13;
        retrofit.RestAdapter.LogLevel logLevel15 = restAdapter12.logLevel;
        java.util.concurrent.Executor executor16 = restAdapter12.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor17 = restAdapter12.requestInterceptor;
        retrofit.Profiler profiler18 = null;
        restAdapter12.profiler = profiler18;
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(requestInterceptor17);
    }

    @Test
    public void test02951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02951");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.Server server5 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder6 = builder2.setServer(server5);
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor8 = restAdapter7.callbackExecutor;
        java.util.concurrent.Executor executor9 = restAdapter7.callbackExecutor;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.Server server14 = new retrofit.Server("", "");
        restAdapter10.server = server14;
        restAdapter7.server = server14;
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        restAdapter7.log = log17;
        retrofit.RestAdapter.Builder builder19 = builder6.setLog(log17);
        retrofit.RestAdapter.Builder builder20 = builder0.setLog(log17);
        retrofit.RestAdapter.Log log21 = builder20.log;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler23 = builder22.errorHandler;
        retrofit.ErrorHandler errorHandler24 = builder22.errorHandler;
        retrofit.Profiler profiler25 = builder22.profiler;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor27 = restAdapter26.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler28 = restAdapter26.new RestHandler();
        retrofit.Server server31 = new retrofit.Server("hi!", "hi!");
        restAdapter26.server = server31;
        retrofit.RestAdapter.Builder builder33 = builder22.setServer(server31);
        retrofit.converter.Converter converter34 = null;
        builder33.converter = converter34;
        retrofit.Profiler profiler36 = null;
        builder33.profiler = profiler36;
        retrofit.RestAdapter restAdapter38 = builder33.build();
        java.util.concurrent.Executor executor39 = builder33.httpExecutor;
        builder20.httpExecutor = executor39;
        retrofit.Profiler profiler41 = builder20.profiler;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler43 = builder42.errorHandler;
        retrofit.ErrorHandler errorHandler44 = builder42.errorHandler;
        java.util.concurrent.Executor executor45 = builder42.callbackExecutor;
        retrofit.Profiler profiler46 = builder42.profiler;
        builder42.ensureSaneDefaults();
        builder42.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider50 = builder49.clientProvider;
        java.util.concurrent.Executor executor51 = null;
        builder49.callbackExecutor = executor51;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.Server server56 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder57 = builder53.setServer(server56);
        java.lang.String str58 = server56.getUrl();
        retrofit.RestAdapter.Builder builder59 = builder49.setServer(server56);
        builder49.ensureSaneDefaults();
        retrofit.Server server61 = null;
        retrofit.client.Client.Provider provider62 = null;
        java.util.concurrent.Executor executor63 = null;
        java.util.concurrent.Executor executor64 = null;
        retrofit.RequestInterceptor requestInterceptor65 = null;
        retrofit.converter.Converter converter66 = null;
        retrofit.Profiler profiler67 = null;
        retrofit.ErrorHandler errorHandler68 = null;
        retrofit.RestAdapter.Log log69 = retrofit.RestAdapter.Log.NONE;
        log69.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel72 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter73 = new retrofit.RestAdapter(server61, provider62, executor63, executor64, requestInterceptor65, converter66, profiler67, errorHandler68, log69, logLevel72);
        retrofit.RestAdapter.RestHandler restHandler74 = restAdapter73.new RestHandler();
        retrofit.RestAdapter.Log log75 = retrofit.RestAdapter.Log.NONE;
        restAdapter73.log = log75;
        retrofit.RestAdapter.Builder builder77 = builder49.setLog(log75);
        retrofit.RestAdapter.Builder builder79 = builder49.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor80 = builder49.requestInterceptor;
        retrofit.RestAdapter.Builder builder81 = builder42.setRequestInterceptor(requestInterceptor80);
        retrofit.RestAdapter.Builder builder82 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler83 = builder82.errorHandler;
        retrofit.ErrorHandler errorHandler84 = builder82.errorHandler;
        retrofit.converter.Converter converter85 = null;
        builder82.converter = converter85;
        retrofit.RequestInterceptor requestInterceptor87 = null;
        builder82.requestInterceptor = requestInterceptor87;
        retrofit.client.Client.Provider provider89 = builder82.clientProvider;
        builder82.ensureSaneDefaults();
        retrofit.client.Client.Provider provider91 = builder82.clientProvider;
        builder81.clientProvider = provider91;
        retrofit.RestAdapter.Builder builder93 = builder20.setClient(provider91);
        retrofit.Server server94 = builder93.server;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNull(profiler25);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(restAdapter38);
        org.junit.Assert.assertNotNull(executor39);
        org.junit.Assert.assertNull(profiler41);
        org.junit.Assert.assertNull(errorHandler43);
        org.junit.Assert.assertNull(errorHandler44);
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertNull(profiler46);
        org.junit.Assert.assertNull(provider50);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(log69);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(requestInterceptor80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNull(errorHandler83);
        org.junit.Assert.assertNull(errorHandler84);
        org.junit.Assert.assertNull(provider89);
        org.junit.Assert.assertNotNull(provider91);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNull(server94);
    }

    @Test
    public void test02952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02952");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        builder0.requestInterceptor = requestInterceptor5;
        retrofit.Server server7 = builder0.server;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler9 = builder8.errorHandler;
        retrofit.client.Client.Provider provider10 = null;
        builder8.clientProvider = provider10;
        retrofit.Server server14 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder15 = builder8.setServer(server14);
        retrofit.converter.Converter converter16 = null;
        builder15.converter = converter16;
        retrofit.RestAdapter restAdapter18 = builder15.build();
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler20 = builder19.errorHandler;
        java.util.concurrent.Executor executor21 = null;
        builder19.callbackExecutor = executor21;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider24 = builder23.clientProvider;
        java.util.concurrent.Executor executor25 = null;
        builder23.callbackExecutor = executor25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.Server server30 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder31 = builder27.setServer(server30);
        java.lang.String str32 = server30.getUrl();
        retrofit.RestAdapter.Builder builder33 = builder23.setServer(server30);
        retrofit.RestAdapter.Builder builder34 = builder19.setServer(server30);
        restAdapter18.server = server30;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler37 = builder36.errorHandler;
        retrofit.client.Client.Provider provider38 = null;
        builder36.clientProvider = provider38;
        retrofit.Server server42 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder43 = builder36.setServer(server42);
        retrofit.client.Client.Provider provider44 = null;
        java.util.concurrent.Executor executor45 = null;
        java.util.concurrent.Executor executor46 = null;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        retrofit.converter.Converter converter48 = null;
        retrofit.Profiler profiler49 = null;
        retrofit.ErrorHandler errorHandler50 = null;
        retrofit.Server server51 = null;
        retrofit.client.Client.Provider provider52 = null;
        java.util.concurrent.Executor executor53 = null;
        java.util.concurrent.Executor executor54 = null;
        retrofit.RequestInterceptor requestInterceptor55 = null;
        retrofit.converter.Converter converter56 = null;
        retrofit.Profiler profiler57 = null;
        retrofit.ErrorHandler errorHandler58 = null;
        retrofit.RestAdapter.Log log59 = retrofit.RestAdapter.Log.NONE;
        log59.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter(server51, provider52, executor53, executor54, requestInterceptor55, converter56, profiler57, errorHandler58, log59, logLevel62);
        retrofit.RestAdapter.LogLevel logLevel64 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter(server42, provider44, executor45, executor46, requestInterceptor47, converter48, profiler49, errorHandler50, log59, logLevel64);
        boolean boolean66 = logLevel64.log();
        boolean boolean67 = logLevel64.log();
        restAdapter18.setLogLevel(logLevel64);
        boolean boolean69 = logLevel64.log();
        retrofit.RestAdapter.Builder builder70 = builder0.setLogLevel(logLevel64);
        java.util.concurrent.Executor executor71 = builder70.callbackExecutor;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(server7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(restAdapter18);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNull(provider24);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(log59);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(executor71);
    }

    @Test
    public void test02953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02953");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.client.Client.Provider provider14 = restAdapter12.clientProvider;
        retrofit.RestAdapter.Log log15 = restAdapter12.log;
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter12.getLogLevel();
        java.util.concurrent.Executor executor17 = restAdapter12.httpExecutor;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler19 = null;
        builder18.errorHandler = errorHandler19;
        retrofit.ErrorHandler errorHandler21 = builder18.errorHandler;
        retrofit.RestAdapter.Builder builder23 = builder18.setServer("hi!");
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider25 = builder24.clientProvider;
        java.util.concurrent.Executor executor26 = null;
        builder24.callbackExecutor = executor26;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.Server server31 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder32 = builder28.setServer(server31);
        java.lang.String str33 = server31.getUrl();
        retrofit.RestAdapter.Builder builder34 = builder24.setServer(server31);
        retrofit.RestAdapter.Builder builder35 = builder23.setServer(server31);
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler37 = builder36.errorHandler;
        retrofit.ErrorHandler errorHandler38 = builder36.errorHandler;
        retrofit.Profiler profiler39 = builder36.profiler;
        retrofit.RestAdapter.Log log40 = builder36.log;
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.FULL;
        builder36.logLevel = logLevel41;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.Server server46 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder47 = builder43.setServer(server46);
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor49 = restAdapter48.callbackExecutor;
        java.util.concurrent.Executor executor50 = restAdapter48.callbackExecutor;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler52 = restAdapter51.errorHandler;
        retrofit.Server server55 = new retrofit.Server("", "");
        restAdapter51.server = server55;
        restAdapter48.server = server55;
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        restAdapter48.log = log58;
        retrofit.RestAdapter.Builder builder60 = builder47.setLog(log58);
        retrofit.RestAdapter.LogLevel logLevel61 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder62 = builder47.setLogLevel(logLevel61);
        retrofit.Profiler profiler63 = null;
        builder62.profiler = profiler63;
        retrofit.converter.Converter converter65 = null;
        builder62.converter = converter65;
        retrofit.ErrorHandler errorHandler67 = null;
        builder62.errorHandler = errorHandler67;
        retrofit.RestAdapter restAdapter69 = builder62.build();
        retrofit.ErrorHandler errorHandler70 = builder62.errorHandler;
        retrofit.RestAdapter.Builder builder71 = builder36.setErrorHandler(errorHandler70);
        retrofit.RestAdapter.Builder builder72 = builder23.setErrorHandler(errorHandler70);
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler74 = builder73.errorHandler;
        retrofit.client.Client.Provider provider75 = null;
        builder73.clientProvider = provider75;
        retrofit.Server server79 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder80 = builder73.setServer(server79);
        retrofit.RestAdapter.Builder builder81 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler82 = builder81.errorHandler;
        retrofit.client.Client.Provider provider83 = null;
        builder81.clientProvider = provider83;
        retrofit.converter.Converter converter85 = builder81.converter;
        retrofit.RestAdapter.LogLevel logLevel86 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder87 = builder81.setLogLevel(logLevel86);
        builder73.logLevel = logLevel86;
        boolean boolean89 = logLevel86.log();
        retrofit.RestAdapter.Builder builder90 = builder72.setLogLevel(logLevel86);
        retrofit.ErrorHandler errorHandler91 = builder72.errorHandler;
        restAdapter12.errorHandler = errorHandler91;
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(provider25);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNull(errorHandler38);
        org.junit.Assert.assertNull(profiler39);
        org.junit.Assert.assertNull(log40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(executor49);
        org.junit.Assert.assertNull(executor50);
        org.junit.Assert.assertNull(errorHandler52);
        org.junit.Assert.assertNotNull(log58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(restAdapter69);
        org.junit.Assert.assertNotNull(errorHandler70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNull(errorHandler74);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNull(errorHandler82);
        org.junit.Assert.assertNull(converter85);
        org.junit.Assert.assertTrue("'" + logLevel86 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel86.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(errorHandler91);
    }

    @Test
    public void test02954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02954");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server4 = new retrofit.Server("", "");
        builder0.server = server4;
        retrofit.RestAdapter restAdapter6 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor7 = restAdapter6.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler8 = restAdapter6.new RestHandler();
        retrofit.Server server11 = new retrofit.Server("hi!", "hi!");
        restAdapter6.server = server11;
        retrofit.RestAdapter.Builder builder13 = builder0.setServer(server11);
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler15 = builder14.errorHandler;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        builder14.requestInterceptor = requestInterceptor16;
        java.util.concurrent.Executor executor18 = null;
        builder14.httpExecutor = executor18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler21 = null;
        builder20.errorHandler = errorHandler21;
        retrofit.ErrorHandler errorHandler23 = builder20.errorHandler;
        retrofit.RestAdapter.Builder builder25 = builder20.setServer("hi!");
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler27 = builder26.errorHandler;
        retrofit.ErrorHandler errorHandler28 = builder26.errorHandler;
        retrofit.Profiler profiler29 = builder26.profiler;
        retrofit.RestAdapter.Log log30 = builder26.log;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.FULL;
        builder26.logLevel = logLevel31;
        retrofit.RestAdapter.Builder builder33 = builder25.setLogLevel(logLevel31);
        retrofit.RestAdapter.Builder builder34 = builder14.setLogLevel(logLevel31);
        builder13.logLevel = logLevel31;
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        log36.log("hi!");
        log36.log("hi!");
        log36.log("hi!");
        retrofit.RestAdapter.Builder builder43 = builder13.setLog(log36);
        java.util.concurrent.Executor executor44 = builder13.callbackExecutor;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler46 = builder45.errorHandler;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.Server server50 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder51 = builder47.setServer(server50);
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor53 = restAdapter52.callbackExecutor;
        java.util.concurrent.Executor executor54 = restAdapter52.callbackExecutor;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler56 = restAdapter55.errorHandler;
        retrofit.Server server59 = new retrofit.Server("", "");
        restAdapter55.server = server59;
        restAdapter52.server = server59;
        retrofit.RestAdapter.Log log62 = retrofit.RestAdapter.Log.NONE;
        restAdapter52.log = log62;
        retrofit.RestAdapter.Builder builder64 = builder51.setLog(log62);
        retrofit.RestAdapter.Builder builder65 = builder45.setLog(log62);
        retrofit.RestAdapter.Builder builder66 = builder13.setLog(log62);
        java.util.concurrent.Executor executor67 = builder13.httpExecutor;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertNull(profiler29);
        org.junit.Assert.assertNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(executor44);
        org.junit.Assert.assertNull(errorHandler46);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(executor53);
        org.junit.Assert.assertNull(executor54);
        org.junit.Assert.assertNull(errorHandler56);
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(executor67);
    }

    @Test
    public void test02955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02955");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter0.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor4 = restAdapter0.requestInterceptor;
        retrofit.ErrorHandler errorHandler5 = restAdapter0.errorHandler;
        retrofit.RestAdapter restAdapter6 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor7 = restAdapter6.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler8 = restAdapter6.new RestHandler();
        retrofit.Server server11 = new retrofit.Server("hi!", "hi!");
        restAdapter6.server = server11;
        retrofit.Server server13 = restAdapter6.server;
        retrofit.converter.Converter converter14 = restAdapter6.converter;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler16 = builder15.errorHandler;
        retrofit.client.Client.Provider provider17 = null;
        builder15.clientProvider = provider17;
        retrofit.Server server21 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder22 = builder15.setServer(server21);
        retrofit.converter.Converter converter23 = null;
        builder22.converter = converter23;
        retrofit.RestAdapter restAdapter25 = builder22.build();
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler27 = builder26.errorHandler;
        java.util.concurrent.Executor executor28 = null;
        builder26.callbackExecutor = executor28;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider31 = builder30.clientProvider;
        java.util.concurrent.Executor executor32 = null;
        builder30.callbackExecutor = executor32;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.Server server37 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder38 = builder34.setServer(server37);
        java.lang.String str39 = server37.getUrl();
        retrofit.RestAdapter.Builder builder40 = builder30.setServer(server37);
        retrofit.RestAdapter.Builder builder41 = builder26.setServer(server37);
        restAdapter25.server = server37;
        java.util.concurrent.Executor executor43 = restAdapter25.httpExecutor;
        java.util.concurrent.Executor executor44 = restAdapter25.callbackExecutor;
        restAdapter6.callbackExecutor = executor44;
        restAdapter0.httpExecutor = executor44;
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter0.logLevel;
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNull(errorHandler5);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(restAdapter25);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNull(provider31);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(executor43);
        org.junit.Assert.assertNotNull(executor44);
        org.junit.Assert.assertNull(logLevel47);
    }

    @Test
    public void test02956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02956");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.Profiler profiler3 = null;
        restAdapter0.profiler = profiler3;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler6 = null;
        builder5.errorHandler = errorHandler6;
        retrofit.ErrorHandler errorHandler8 = builder5.errorHandler;
        retrofit.RestAdapter.Builder builder10 = builder5.setServer("hi!");
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler12 = builder11.errorHandler;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.Server server16 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder17 = builder13.setServer(server16);
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor19 = restAdapter18.callbackExecutor;
        java.util.concurrent.Executor executor20 = restAdapter18.callbackExecutor;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler22 = restAdapter21.errorHandler;
        retrofit.Server server25 = new retrofit.Server("", "");
        restAdapter21.server = server25;
        restAdapter18.server = server25;
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        restAdapter18.log = log28;
        retrofit.RestAdapter.Builder builder30 = builder17.setLog(log28);
        retrofit.RestAdapter.Builder builder31 = builder11.setLog(log28);
        builder5.log = log28;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler34 = builder33.errorHandler;
        retrofit.client.Client.Provider provider35 = null;
        builder33.clientProvider = provider35;
        retrofit.Server server39 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder40 = builder33.setServer(server39);
        retrofit.converter.Converter converter41 = null;
        builder40.converter = converter41;
        retrofit.RestAdapter restAdapter43 = builder40.build();
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler45 = builder44.errorHandler;
        java.util.concurrent.Executor executor46 = null;
        builder44.callbackExecutor = executor46;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider49 = builder48.clientProvider;
        java.util.concurrent.Executor executor50 = null;
        builder48.callbackExecutor = executor50;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.Server server55 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder56 = builder52.setServer(server55);
        java.lang.String str57 = server55.getUrl();
        retrofit.RestAdapter.Builder builder58 = builder48.setServer(server55);
        retrofit.RestAdapter.Builder builder59 = builder44.setServer(server55);
        restAdapter43.server = server55;
        retrofit.client.Client.Provider provider61 = restAdapter43.clientProvider;
        retrofit.RestAdapter.Builder builder62 = builder5.setClient(provider61);
        retrofit.RestAdapter restAdapter63 = builder5.build();
        retrofit.Profiler profiler64 = null;
        restAdapter63.profiler = profiler64;
        retrofit.client.Header[] headerArray74 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList75 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList75, headerArray74);
        retrofit.mime.TypedOutput typedOutput77 = null;
        retrofit.client.Request request78 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList75, typedOutput77);
        retrofit.mime.TypedOutput typedOutput79 = null;
        retrofit.client.Request request80 = new retrofit.client.Request("", "default", (java.util.List<retrofit.client.Header>) headerList75, typedOutput79);
        retrofit.mime.TypedOutput typedOutput81 = null;
        retrofit.client.Request request82 = new retrofit.client.Request("default", "", (java.util.List<retrofit.client.Header>) headerList75, typedOutput81);
        retrofit.mime.TypedOutput typedOutput83 = null;
        retrofit.client.Request request84 = new retrofit.client.Request("default", "hi!", (java.util.List<retrofit.client.Header>) headerList75, typedOutput83);
        retrofit.client.Request request85 = restAdapter63.logAndReplaceRequest(request84);
        retrofit.RestAdapter.Log log86 = restAdapter63.log;
        log86.log("default");
        log86.log("");
        restAdapter0.log = log86;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(errorHandler34);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(restAdapter43);
        org.junit.Assert.assertNull(errorHandler45);
        org.junit.Assert.assertNull(provider49);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(provider61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(restAdapter63);
        org.junit.Assert.assertNotNull(headerArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(request85);
        org.junit.Assert.assertNotNull(log86);
    }

    @Test
    public void test02957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02957");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        restAdapter5.log = log15;
        retrofit.RestAdapter.Builder builder17 = builder4.setLog(log15);
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server21 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder22 = builder18.setServer(server21);
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor24 = restAdapter23.callbackExecutor;
        java.util.concurrent.Executor executor25 = restAdapter23.callbackExecutor;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler27 = restAdapter26.errorHandler;
        retrofit.Server server30 = new retrofit.Server("", "");
        restAdapter26.server = server30;
        restAdapter23.server = server30;
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        restAdapter23.log = log33;
        retrofit.RestAdapter.Builder builder35 = builder22.setLog(log33);
        retrofit.converter.Converter converter36 = null;
        builder35.converter = converter36;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler39 = builder38.errorHandler;
        retrofit.ErrorHandler errorHandler40 = builder38.errorHandler;
        retrofit.Profiler profiler41 = builder38.profiler;
        retrofit.RestAdapter.Log log42 = builder38.log;
        retrofit.Server server43 = null;
        retrofit.client.Client.Provider provider44 = null;
        java.util.concurrent.Executor executor45 = null;
        java.util.concurrent.Executor executor46 = null;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        retrofit.converter.Converter converter48 = null;
        retrofit.Profiler profiler49 = null;
        retrofit.ErrorHandler errorHandler50 = null;
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        log51.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter(server43, provider44, executor45, executor46, requestInterceptor47, converter48, profiler49, errorHandler50, log51, logLevel54);
        builder38.log = log51;
        retrofit.RestAdapter.Builder builder57 = builder35.setLog(log51);
        retrofit.RestAdapter.LogLevel logLevel58 = builder35.logLevel;
        retrofit.RestAdapter.Builder builder59 = builder17.setLogLevel(logLevel58);
        retrofit.RestAdapter restAdapter60 = builder17.build();
        retrofit.Server server61 = null;
        retrofit.client.Client.Provider provider62 = null;
        java.util.concurrent.Executor executor63 = null;
        java.util.concurrent.Executor executor64 = null;
        retrofit.RequestInterceptor requestInterceptor65 = null;
        retrofit.converter.Converter converter66 = null;
        retrofit.Profiler profiler67 = null;
        retrofit.ErrorHandler errorHandler68 = null;
        retrofit.RestAdapter.Log log69 = retrofit.RestAdapter.Log.NONE;
        log69.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel72 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter73 = new retrofit.RestAdapter(server61, provider62, executor63, executor64, requestInterceptor65, converter66, profiler67, errorHandler68, log69, logLevel72);
        retrofit.RequestInterceptor requestInterceptor74 = null;
        restAdapter73.requestInterceptor = requestInterceptor74;
        retrofit.RestAdapter.LogLevel logLevel76 = restAdapter73.logLevel;
        retrofit.Server server77 = restAdapter73.server;
        retrofit.client.Header[] headerArray86 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList87 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList87, headerArray86);
        retrofit.mime.TypedOutput typedOutput89 = null;
        retrofit.client.Request request90 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList87, typedOutput89);
        retrofit.mime.TypedOutput typedOutput91 = null;
        retrofit.client.Request request92 = new retrofit.client.Request("", "default", (java.util.List<retrofit.client.Header>) headerList87, typedOutput91);
        retrofit.mime.TypedOutput typedOutput93 = null;
        retrofit.client.Request request94 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList87, typedOutput93);
        retrofit.mime.TypedOutput typedOutput95 = null;
        retrofit.client.Request request96 = new retrofit.client.Request("", "default", (java.util.List<retrofit.client.Header>) headerList87, typedOutput95);
        retrofit.client.Request request97 = restAdapter73.logAndReplaceRequest(request96);
        retrofit.client.Request request98 = restAdapter60.logAndReplaceRequest(request96);
        retrofit.converter.Converter converter99 = restAdapter60.converter;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNull(profiler41);
        org.junit.Assert.assertNull(log42);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(restAdapter60);
        org.junit.Assert.assertNotNull(log69);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(server77);
        org.junit.Assert.assertNotNull(headerArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(request97);
        org.junit.Assert.assertNotNull(request98);
        org.junit.Assert.assertNotNull(converter99);
    }

    @Test
    public void test02958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02958");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        java.util.concurrent.Executor executor14 = null;
        restAdapter12.callbackExecutor = executor14;
        retrofit.client.Header[] headerArray18 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList19 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList19, headerArray18);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList19, typedOutput21);
        retrofit.client.Request request23 = restAdapter12.logAndReplaceRequest(request22);
        retrofit.client.Client.Provider provider24 = restAdapter12.clientProvider;
        retrofit.Profiler profiler25 = restAdapter12.profiler;
        retrofit.converter.Converter converter26 = restAdapter12.converter;
        retrofit.RestAdapter.Log log27 = restAdapter12.log;
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertNull(provider24);
        org.junit.Assert.assertNull(profiler25);
        org.junit.Assert.assertNull(converter26);
        org.junit.Assert.assertNotNull(log27);
    }

    @Test
    public void test02959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02959");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server4 = new retrofit.Server("", "");
        builder0.server = server4;
        java.util.concurrent.Executor executor6 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor7 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler9 = builder8.errorHandler;
        java.util.concurrent.Executor executor10 = builder8.callbackExecutor;
        retrofit.RestAdapter.Builder builder12 = builder8.setServer("hi!");
        builder12.ensureSaneDefaults();
        java.util.concurrent.Executor executor14 = builder12.callbackExecutor;
        builder0.httpExecutor = executor14;
        retrofit.RestAdapter.Log log16 = builder0.log;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(requestInterceptor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(executor14);
        org.junit.Assert.assertNull(log16);
    }

    @Test
    public void test02960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02960");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RequestInterceptor requestInterceptor1 = null;
        builder0.requestInterceptor = requestInterceptor1;
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.httpExecutor;
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
    }

    @Test
    public void test02961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02961");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter0.getLogLevel();
        retrofit.client.Client.Provider provider20 = null;
        restAdapter0.clientProvider = provider20;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean23 = logLevel22.log();
        restAdapter0.logLevel = logLevel22;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        restAdapter0.requestInterceptor = requestInterceptor25;
        retrofit.RestAdapter.Log log27 = restAdapter0.log;
        retrofit.Server server28 = restAdapter0.server;
        retrofit.ErrorHandler errorHandler29 = restAdapter0.errorHandler;
        java.util.concurrent.Executor executor30 = restAdapter0.httpExecutor;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(log27);
        org.junit.Assert.assertNotNull(server28);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNull(executor30);
    }

    @Test
    public void test02962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02962");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.RestAdapter restAdapter3 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter3.logLevel;
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter3.new RestHandler();
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler7 = builder6.errorHandler;
        retrofit.ErrorHandler errorHandler8 = builder6.errorHandler;
        retrofit.Profiler profiler9 = builder6.profiler;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor11 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter10.new RestHandler();
        retrofit.Server server15 = new retrofit.Server("hi!", "hi!");
        restAdapter10.server = server15;
        retrofit.RestAdapter.Builder builder17 = builder6.setServer(server15);
        retrofit.converter.Converter converter18 = null;
        builder17.converter = converter18;
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        log28.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log28, logLevel31);
        builder17.logLevel = logLevel31;
        restAdapter3.logLevel = logLevel31;
        restAdapter0.logLevel = logLevel31;
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter0.getLogLevel();
        retrofit.Profiler profiler37 = restAdapter0.profiler;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNull(profiler9);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler37);
    }

    @Test
    public void test02963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02963");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RequestInterceptor requestInterceptor1 = null;
        restAdapter0.requestInterceptor = requestInterceptor1;
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter0.new RestHandler();
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor5 = restAdapter4.callbackExecutor;
        retrofit.RestAdapter restAdapter6 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor7 = restAdapter6.callbackExecutor;
        java.util.concurrent.Executor executor8 = restAdapter6.callbackExecutor;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler10 = restAdapter9.errorHandler;
        retrofit.Server server13 = new retrofit.Server("", "");
        restAdapter9.server = server13;
        restAdapter6.server = server13;
        restAdapter4.server = server13;
        retrofit.Profiler profiler17 = restAdapter4.profiler;
        retrofit.ErrorHandler errorHandler18 = null;
        restAdapter4.errorHandler = errorHandler18;
        retrofit.Profiler profiler20 = null;
        restAdapter4.profiler = profiler20;
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter4.getLogLevel();
        retrofit.ErrorHandler errorHandler24 = null;
        restAdapter4.errorHandler = errorHandler24;
        retrofit.client.Client.Provider provider26 = null;
        restAdapter4.clientProvider = provider26;
        retrofit.ErrorHandler errorHandler28 = restAdapter4.errorHandler;
        retrofit.Server server29 = restAdapter4.server;
        java.lang.String str30 = server29.getName();
        restAdapter0.server = server29;
        java.lang.String str32 = server29.getUrl();
        java.lang.String str33 = server29.getName();
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNull(profiler17);
        org.junit.Assert.assertNull(logLevel22);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertNotNull(server29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
    }

    @Test
    public void test02964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02964");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        builder0.requestInterceptor = requestInterceptor5;
        retrofit.RestAdapter.LogLevel logLevel7 = builder0.logLevel;
        java.util.concurrent.Executor executor8 = builder0.callbackExecutor;
        java.util.concurrent.Executor executor9 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.Server server13 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder14 = builder10.setServer(server13);
        retrofit.converter.Converter converter15 = builder10.converter;
        retrofit.RequestInterceptor requestInterceptor16 = builder10.requestInterceptor;
        java.util.concurrent.Executor executor17 = builder10.callbackExecutor;
        retrofit.RestAdapter restAdapter18 = builder10.build();
        retrofit.client.Header[] headerArray29 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList30 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList30, headerArray29);
        retrofit.mime.TypedOutput typedOutput32 = null;
        retrofit.client.Request request33 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList30, typedOutput32);
        retrofit.mime.TypedOutput typedOutput34 = null;
        retrofit.client.Request request35 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList30, typedOutput34);
        retrofit.mime.TypedOutput typedOutput36 = null;
        retrofit.client.Request request37 = new retrofit.client.Request("", "default", (java.util.List<retrofit.client.Header>) headerList30, typedOutput36);
        retrofit.mime.TypedOutput typedOutput38 = null;
        retrofit.client.Request request39 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList30, typedOutput38);
        retrofit.mime.TypedOutput typedOutput40 = null;
        retrofit.client.Request request41 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList30, typedOutput40);
        retrofit.client.Request request42 = restAdapter18.logAndReplaceRequest(request41);
        retrofit.Server server43 = restAdapter18.server;
        builder0.server = server43;
        java.lang.String str45 = server43.getName();
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertTrue("'" + logLevel7 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel7.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(converter15);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNotNull(restAdapter18);
        org.junit.Assert.assertNotNull(headerArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(request42);
        org.junit.Assert.assertNotNull(server43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
    }

    @Test
    public void test02965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02965");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.converter.Converter converter2 = null;
        restAdapter0.converter = converter2;
        retrofit.ErrorHandler errorHandler4 = restAdapter0.errorHandler;
        retrofit.client.Client.Provider provider5 = restAdapter0.clientProvider;
        retrofit.client.Header[] headerArray18 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList19 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList19, headerArray18);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList19, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList19, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList19, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("hi!", "default", (java.util.List<retrofit.client.Header>) headerList19, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList19, typedOutput29);
        java.util.List<retrofit.client.Header> headerList31 = request30.getHeaders();
        retrofit.mime.TypedOutput typedOutput32 = null;
        retrofit.client.Request request33 = new retrofit.client.Request("", "", headerList31, typedOutput32);
        java.lang.String str34 = request33.getMethod();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request35 = restAdapter0.logAndReplaceRequest(request33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(errorHandler4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNotNull(headerArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(headerList31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
    }

    @Test
    public void test02966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02966");
        retrofit.client.Header[] headerArray12 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList13 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList13, headerArray12);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList13, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList13, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList13, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList13, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList13, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList13, typedOutput25);
        org.junit.Assert.assertNotNull(headerArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test02967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02967");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter0.requestInterceptor;
        retrofit.ErrorHandler errorHandler17 = restAdapter0.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter0.new RestHandler();
        retrofit.Server server21 = restAdapter0.server;
        retrofit.RestAdapter.Log log22 = restAdapter0.log;
        retrofit.RestAdapter.RestHandler restHandler23 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNotNull(server21);
        org.junit.Assert.assertNull(log22);
    }

    @Test
    public void test02968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02968");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        restAdapter12.log = log14;
        retrofit.converter.Converter converter16 = null;
        restAdapter12.converter = converter16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter12.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor19 = null;
        restAdapter12.requestInterceptor = requestInterceptor19;
        retrofit.RestAdapter.Log log21 = null;
        restAdapter12.log = log21;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler24 = null;
        builder23.errorHandler = errorHandler24;
        retrofit.ErrorHandler errorHandler26 = builder23.errorHandler;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler28 = builder27.errorHandler;
        retrofit.Server server31 = new retrofit.Server("", "");
        builder27.server = server31;
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        builder27.log = log33;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler36 = builder35.errorHandler;
        retrofit.client.Client.Provider provider37 = null;
        builder35.clientProvider = provider37;
        retrofit.Server server41 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder42 = builder35.setServer(server41);
        retrofit.converter.Converter converter43 = null;
        builder42.converter = converter43;
        retrofit.RestAdapter restAdapter45 = builder42.build();
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler47 = builder46.errorHandler;
        java.util.concurrent.Executor executor48 = null;
        builder46.callbackExecutor = executor48;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider51 = builder50.clientProvider;
        java.util.concurrent.Executor executor52 = null;
        builder50.callbackExecutor = executor52;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.Server server57 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder58 = builder54.setServer(server57);
        java.lang.String str59 = server57.getUrl();
        retrofit.RestAdapter.Builder builder60 = builder50.setServer(server57);
        retrofit.RestAdapter.Builder builder61 = builder46.setServer(server57);
        restAdapter45.server = server57;
        java.util.concurrent.Executor executor63 = restAdapter45.httpExecutor;
        builder27.httpExecutor = executor63;
        builder23.httpExecutor = executor63;
        restAdapter12.callbackExecutor = executor63;
        retrofit.RestAdapter.LogLevel logLevel67 = restAdapter12.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel68 = restAdapter12.logLevel;
        retrofit.client.Response response70 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response72 = restAdapter12.logAndReplaceResponse("default", response70, (long) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler26);
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNull(errorHandler36);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(restAdapter45);
        org.junit.Assert.assertNull(errorHandler47);
        org.junit.Assert.assertNull(provider51);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(executor63);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test02969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02969");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = null;
        restAdapter0.profiler = profiler16;
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter0.logLevel;
        retrofit.RequestInterceptor requestInterceptor20 = restAdapter0.requestInterceptor;
        retrofit.client.Header[] headerArray27 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList28 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList28, headerArray27);
        retrofit.mime.TypedOutput typedOutput30 = null;
        retrofit.client.Request request31 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList28, typedOutput30);
        java.lang.String str32 = request31.getMethod();
        java.util.List<retrofit.client.Header> headerList33 = request31.getHeaders();
        retrofit.mime.TypedOutput typedOutput34 = null;
        retrofit.client.Request request35 = new retrofit.client.Request("default", "", headerList33, typedOutput34);
        retrofit.mime.TypedOutput typedOutput36 = null;
        retrofit.client.Request request37 = new retrofit.client.Request("default", "hi!", headerList33, typedOutput36);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request38 = restAdapter0.logAndReplaceRequest(request37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(requestInterceptor20);
        org.junit.Assert.assertNotNull(headerArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(headerList33);
    }

    @Test
    public void test02970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02970");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.Server server6 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder7 = builder3.setServer(server6);
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor9 = restAdapter8.callbackExecutor;
        java.util.concurrent.Executor executor10 = restAdapter8.callbackExecutor;
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler12 = restAdapter11.errorHandler;
        retrofit.Server server15 = new retrofit.Server("", "");
        restAdapter11.server = server15;
        restAdapter8.server = server15;
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        restAdapter8.log = log18;
        retrofit.RestAdapter.Builder builder20 = builder7.setLog(log18);
        retrofit.converter.Converter converter21 = null;
        builder20.converter = converter21;
        retrofit.RestAdapter.Builder builder24 = builder20.setServer("hi!");
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor26 = restAdapter25.callbackExecutor;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor28 = restAdapter27.callbackExecutor;
        java.util.concurrent.Executor executor29 = restAdapter27.callbackExecutor;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler31 = restAdapter30.errorHandler;
        retrofit.Server server34 = new retrofit.Server("", "");
        restAdapter30.server = server34;
        restAdapter27.server = server34;
        restAdapter25.server = server34;
        retrofit.Profiler profiler38 = restAdapter25.profiler;
        retrofit.ErrorHandler errorHandler39 = null;
        restAdapter25.errorHandler = errorHandler39;
        retrofit.Profiler profiler41 = null;
        restAdapter25.profiler = profiler41;
        retrofit.RequestInterceptor requestInterceptor43 = null;
        restAdapter25.requestInterceptor = requestInterceptor43;
        retrofit.RestAdapter.LogLevel logLevel45 = restAdapter25.getLogLevel();
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.Server server49 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder50 = builder46.setServer(server49);
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor52 = restAdapter51.callbackExecutor;
        java.util.concurrent.Executor executor53 = restAdapter51.callbackExecutor;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler55 = restAdapter54.errorHandler;
        retrofit.Server server58 = new retrofit.Server("", "");
        restAdapter54.server = server58;
        restAdapter51.server = server58;
        retrofit.RestAdapter.Log log61 = retrofit.RestAdapter.Log.NONE;
        restAdapter51.log = log61;
        retrofit.RestAdapter.Builder builder63 = builder50.setLog(log61);
        retrofit.RestAdapter.LogLevel logLevel64 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder65 = builder50.setLogLevel(logLevel64);
        retrofit.Profiler profiler66 = null;
        builder65.profiler = profiler66;
        retrofit.converter.Converter converter68 = null;
        builder65.converter = converter68;
        retrofit.ErrorHandler errorHandler70 = null;
        builder65.errorHandler = errorHandler70;
        retrofit.RestAdapter restAdapter72 = builder65.build();
        retrofit.ErrorHandler errorHandler73 = builder65.errorHandler;
        restAdapter25.errorHandler = errorHandler73;
        retrofit.RestAdapter.Builder builder75 = builder20.setErrorHandler(errorHandler73);
        retrofit.RestAdapter.Builder builder76 = builder0.setErrorHandler(errorHandler73);
        retrofit.RestAdapter.Log log77 = builder76.log;
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider79 = builder78.clientProvider;
        java.util.concurrent.Executor executor80 = null;
        builder78.callbackExecutor = executor80;
        retrofit.RestAdapter.Builder builder82 = new retrofit.RestAdapter.Builder();
        retrofit.Server server85 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder86 = builder82.setServer(server85);
        java.lang.String str87 = server85.getUrl();
        retrofit.RestAdapter.Builder builder88 = builder78.setServer(server85);
        builder78.ensureSaneDefaults();
        java.util.concurrent.Executor executor90 = builder78.callbackExecutor;
        builder76.callbackExecutor = executor90;
        retrofit.client.Client client92 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder93 = builder76.setClient(client92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNotNull(log18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(errorHandler31);
        org.junit.Assert.assertNull(profiler38);
        org.junit.Assert.assertNull(logLevel45);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(executor52);
        org.junit.Assert.assertNull(executor53);
        org.junit.Assert.assertNull(errorHandler55);
        org.junit.Assert.assertNotNull(log61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(restAdapter72);
        org.junit.Assert.assertNotNull(errorHandler73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNull(log77);
        org.junit.Assert.assertNull(provider79);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "hi!" + "'", str87, "hi!");
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(executor90);
    }

    @Test
    public void test02971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02971");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server4 = new retrofit.Server("", "");
        builder0.server = server4;
        retrofit.Profiler profiler6 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder7 = builder0.setProfiler(profiler6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
    }

    @Test
    public void test02972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02972");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.logLevel;
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter0.new RestHandler();
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler5 = restAdapter4.errorHandler;
        retrofit.Server server8 = new retrofit.Server("", "");
        restAdapter4.server = server8;
        retrofit.Profiler profiler10 = null;
        restAdapter4.profiler = profiler10;
        retrofit.Profiler profiler12 = null;
        restAdapter4.profiler = profiler12;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter14.new RestHandler();
        retrofit.client.Client.Provider provider16 = restAdapter14.clientProvider;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler18 = builder17.errorHandler;
        retrofit.Server server21 = new retrofit.Server("", "");
        builder17.server = server21;
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        builder17.log = log23;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler26 = builder25.errorHandler;
        retrofit.client.Client.Provider provider27 = null;
        builder25.clientProvider = provider27;
        retrofit.Server server31 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder32 = builder25.setServer(server31);
        retrofit.converter.Converter converter33 = null;
        builder32.converter = converter33;
        retrofit.RestAdapter restAdapter35 = builder32.build();
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler37 = builder36.errorHandler;
        java.util.concurrent.Executor executor38 = null;
        builder36.callbackExecutor = executor38;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider41 = builder40.clientProvider;
        java.util.concurrent.Executor executor42 = null;
        builder40.callbackExecutor = executor42;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.Server server47 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder48 = builder44.setServer(server47);
        java.lang.String str49 = server47.getUrl();
        retrofit.RestAdapter.Builder builder50 = builder40.setServer(server47);
        retrofit.RestAdapter.Builder builder51 = builder36.setServer(server47);
        restAdapter35.server = server47;
        java.util.concurrent.Executor executor53 = restAdapter35.httpExecutor;
        builder17.httpExecutor = executor53;
        restAdapter14.callbackExecutor = executor53;
        restAdapter4.callbackExecutor = executor53;
        restAdapter0.httpExecutor = executor53;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(errorHandler5);
        org.junit.Assert.assertNull(provider16);
        org.junit.Assert.assertNull(errorHandler18);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNull(errorHandler26);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(restAdapter35);
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNull(provider41);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(executor53);
    }

    @Test
    public void test02973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02973");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor2 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter3 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler4 = restAdapter3.errorHandler;
        retrofit.Server server7 = new retrofit.Server("", "");
        restAdapter3.server = server7;
        restAdapter0.server = server7;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.Server server14 = new retrofit.Server("", "");
        restAdapter10.server = server14;
        restAdapter0.server = server14;
        retrofit.RestAdapter.Log log17 = restAdapter0.log;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor19 = restAdapter18.callbackExecutor;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor21 = restAdapter20.callbackExecutor;
        java.util.concurrent.Executor executor22 = restAdapter20.callbackExecutor;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler24 = restAdapter23.errorHandler;
        retrofit.Server server27 = new retrofit.Server("", "");
        restAdapter23.server = server27;
        restAdapter20.server = server27;
        restAdapter18.server = server27;
        retrofit.Profiler profiler31 = restAdapter18.profiler;
        retrofit.ErrorHandler errorHandler32 = null;
        restAdapter18.errorHandler = errorHandler32;
        retrofit.Profiler profiler34 = null;
        restAdapter18.profiler = profiler34;
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter18.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel37 = restAdapter18.getLogLevel();
        retrofit.client.Client.Provider provider38 = null;
        restAdapter18.clientProvider = provider38;
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean41 = logLevel40.log();
        restAdapter18.logLevel = logLevel40;
        retrofit.RestAdapter.Log log43 = restAdapter18.log;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler45 = builder44.errorHandler;
        retrofit.ErrorHandler errorHandler46 = builder44.errorHandler;
        retrofit.RestAdapter.Log log47 = null;
        builder44.log = log47;
        retrofit.RequestInterceptor requestInterceptor49 = null;
        builder44.requestInterceptor = requestInterceptor49;
        retrofit.client.Client.Provider provider51 = null;
        builder44.clientProvider = provider51;
        builder44.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.Server server57 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder58 = builder54.setServer(server57);
        retrofit.Server server59 = builder54.server;
        java.lang.String str60 = server59.getName();
        builder44.server = server59;
        restAdapter18.server = server59;
        restAdapter0.server = server59;
        retrofit.client.Client.Provider provider64 = restAdapter0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor65 = restAdapter0.requestInterceptor;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(errorHandler4);
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(log17);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNull(profiler31);
        org.junit.Assert.assertNull(logLevel36);
        org.junit.Assert.assertNull(logLevel37);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(log43);
        org.junit.Assert.assertNull(errorHandler45);
        org.junit.Assert.assertNull(errorHandler46);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(server59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertNull(provider64);
        org.junit.Assert.assertNull(requestInterceptor65);
    }

    @Test
    public void test02974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02974");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        java.util.concurrent.Executor executor3 = builder0.callbackExecutor;
        java.util.concurrent.Executor executor4 = null;
        builder0.callbackExecutor = executor4;
        retrofit.Server server6 = builder0.server;
        retrofit.client.Client.Provider provider7 = builder0.clientProvider;
        java.util.concurrent.Executor executor8 = builder0.callbackExecutor;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertNull(provider7);
        org.junit.Assert.assertNull(executor8);
    }

    @Test
    public void test02975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02975");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        log8.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter12.new RestHandler();
        retrofit.client.Client.Provider provider14 = restAdapter12.clientProvider;
        retrofit.RestAdapter.Log log15 = restAdapter12.log;
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter12.new RestHandler();
        retrofit.Profiler profiler17 = restAdapter12.profiler;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor19 = restAdapter18.callbackExecutor;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor21 = restAdapter20.callbackExecutor;
        java.util.concurrent.Executor executor22 = restAdapter20.callbackExecutor;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler24 = restAdapter23.errorHandler;
        retrofit.Server server27 = new retrofit.Server("", "");
        restAdapter23.server = server27;
        restAdapter20.server = server27;
        restAdapter18.server = server27;
        retrofit.Profiler profiler31 = restAdapter18.profiler;
        retrofit.ErrorHandler errorHandler32 = null;
        restAdapter18.errorHandler = errorHandler32;
        retrofit.Profiler profiler34 = null;
        restAdapter18.profiler = profiler34;
        retrofit.RestAdapter.RestHandler restHandler36 = restAdapter18.new RestHandler();
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.Server server40 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder41 = builder37.setServer(server40);
        retrofit.converter.Converter converter42 = builder37.converter;
        retrofit.RequestInterceptor requestInterceptor43 = builder37.requestInterceptor;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider45 = builder44.clientProvider;
        java.util.concurrent.Executor executor46 = null;
        builder44.callbackExecutor = executor46;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.Server server51 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder52 = builder48.setServer(server51);
        java.lang.String str53 = server51.getUrl();
        retrofit.RestAdapter.Builder builder54 = builder44.setServer(server51);
        builder44.ensureSaneDefaults();
        retrofit.Server server56 = null;
        retrofit.client.Client.Provider provider57 = null;
        java.util.concurrent.Executor executor58 = null;
        java.util.concurrent.Executor executor59 = null;
        retrofit.RequestInterceptor requestInterceptor60 = null;
        retrofit.converter.Converter converter61 = null;
        retrofit.Profiler profiler62 = null;
        retrofit.ErrorHandler errorHandler63 = null;
        retrofit.RestAdapter.Log log64 = retrofit.RestAdapter.Log.NONE;
        log64.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel67 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter(server56, provider57, executor58, executor59, requestInterceptor60, converter61, profiler62, errorHandler63, log64, logLevel67);
        retrofit.RestAdapter.RestHandler restHandler69 = restAdapter68.new RestHandler();
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        restAdapter68.log = log70;
        retrofit.RestAdapter.Builder builder72 = builder44.setLog(log70);
        retrofit.RestAdapter.Builder builder74 = builder44.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor75 = builder44.requestInterceptor;
        builder37.requestInterceptor = requestInterceptor75;
        restAdapter18.requestInterceptor = requestInterceptor75;
        restAdapter12.requestInterceptor = requestInterceptor75;
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        retrofit.Server server82 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder83 = builder79.setServer(server82);
        retrofit.RestAdapter.LogLevel logLevel84 = builder83.logLevel;
        boolean boolean85 = logLevel84.log();
        restAdapter12.setLogLevel(logLevel84);
        retrofit.RequestInterceptor requestInterceptor87 = restAdapter12.requestInterceptor;
        retrofit.RestAdapter.Log log88 = null;
        restAdapter12.log = log88;
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNull(profiler17);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNull(profiler31);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(converter42);
        org.junit.Assert.assertNull(requestInterceptor43);
        org.junit.Assert.assertNull(provider45);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(log64);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(requestInterceptor75);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertTrue("'" + logLevel84 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel84.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(requestInterceptor87);
    }

    @Test
    public void test02976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02976");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.converter.Converter converter14 = restAdapter0.converter;
        retrofit.ErrorHandler errorHandler15 = null;
        restAdapter0.errorHandler = errorHandler15;
        retrofit.converter.Converter converter17 = restAdapter0.converter;
        retrofit.RestAdapter.Log log18 = restAdapter0.log;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler20 = builder19.errorHandler;
        retrofit.ErrorHandler errorHandler21 = builder19.errorHandler;
        retrofit.RestAdapter.Log log22 = null;
        builder19.log = log22;
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean25 = logLevel24.log();
        builder19.logLevel = logLevel24;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler28 = restAdapter27.new RestHandler();
        java.util.concurrent.Executor executor29 = null;
        restAdapter27.callbackExecutor = executor29;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor32 = restAdapter31.callbackExecutor;
        java.util.concurrent.Executor executor33 = restAdapter31.callbackExecutor;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler35 = restAdapter34.errorHandler;
        retrofit.Server server38 = new retrofit.Server("", "");
        restAdapter34.server = server38;
        restAdapter31.server = server38;
        restAdapter27.server = server38;
        retrofit.RestAdapter.Builder builder42 = builder19.setServer(server38);
        java.lang.String str43 = server38.getUrl();
        java.lang.String str44 = server38.getUrl();
        restAdapter0.server = server38;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider47 = builder46.clientProvider;
        java.util.concurrent.Executor executor48 = null;
        builder46.callbackExecutor = executor48;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.Server server53 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder54 = builder50.setServer(server53);
        java.lang.String str55 = server53.getUrl();
        retrofit.RestAdapter.Builder builder56 = builder46.setServer(server53);
        builder46.ensureSaneDefaults();
        retrofit.Server server58 = null;
        retrofit.client.Client.Provider provider59 = null;
        java.util.concurrent.Executor executor60 = null;
        java.util.concurrent.Executor executor61 = null;
        retrofit.RequestInterceptor requestInterceptor62 = null;
        retrofit.converter.Converter converter63 = null;
        retrofit.Profiler profiler64 = null;
        retrofit.ErrorHandler errorHandler65 = null;
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        log66.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel69 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter(server58, provider59, executor60, executor61, requestInterceptor62, converter63, profiler64, errorHandler65, log66, logLevel69);
        retrofit.RestAdapter.RestHandler restHandler71 = restAdapter70.new RestHandler();
        retrofit.RestAdapter.Log log72 = retrofit.RestAdapter.Log.NONE;
        restAdapter70.log = log72;
        retrofit.RestAdapter.Builder builder74 = builder46.setLog(log72);
        retrofit.RestAdapter.Builder builder76 = builder46.setServer("hi!");
        retrofit.RestAdapter restAdapter77 = builder46.build();
        retrofit.RestAdapter.RestHandler restHandler78 = restAdapter77.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel79 = restAdapter77.logLevel;
        java.util.concurrent.Executor executor80 = restAdapter77.callbackExecutor;
        retrofit.Server server83 = new retrofit.Server("hi!", "hi!");
        restAdapter77.server = server83;
        retrofit.converter.Converter converter85 = restAdapter77.converter;
        restAdapter0.converter = converter85;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(converter17);
        org.junit.Assert.assertNull(log18);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertNull(errorHandler35);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNull(provider47);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(log66);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(restAdapter77);
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(executor80);
        org.junit.Assert.assertNotNull(converter85);
    }

    @Test
    public void test02977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02977");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        restAdapter5.log = log15;
        retrofit.RestAdapter.Builder builder17 = builder4.setLog(log15);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder19 = builder4.setLogLevel(logLevel18);
        retrofit.Profiler profiler20 = null;
        builder19.profiler = profiler20;
        retrofit.converter.Converter converter22 = null;
        builder19.converter = converter22;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor25 = restAdapter24.callbackExecutor;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor27 = restAdapter26.callbackExecutor;
        java.util.concurrent.Executor executor28 = restAdapter26.callbackExecutor;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.Server server33 = new retrofit.Server("", "");
        restAdapter29.server = server33;
        restAdapter26.server = server33;
        restAdapter24.server = server33;
        builder19.server = server33;
        retrofit.RestAdapter.Log log38 = builder19.log;
        retrofit.ErrorHandler errorHandler39 = builder19.errorHandler;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNull(errorHandler30);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNull(errorHandler39);
    }

    @Test
    public void test02978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02978");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.Server server7 = new retrofit.Server("default", "hi!");
        java.lang.String str8 = server7.getUrl();
        retrofit.RestAdapter.Builder builder9 = builder4.setServer(server7);
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler11 = builder10.errorHandler;
        retrofit.ErrorHandler errorHandler12 = builder10.errorHandler;
        java.util.concurrent.Executor executor13 = builder10.callbackExecutor;
        java.util.concurrent.Executor executor14 = null;
        builder10.callbackExecutor = executor14;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler17 = builder16.errorHandler;
        retrofit.Server server20 = new retrofit.Server("", "");
        builder16.server = server20;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        builder16.log = log22;
        retrofit.RestAdapter.LogLevel logLevel24 = builder16.logLevel;
        retrofit.RestAdapter.Builder builder25 = builder10.setLogLevel(logLevel24);
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler27 = builder26.errorHandler;
        retrofit.client.Client.Provider provider28 = null;
        builder26.clientProvider = provider28;
        retrofit.Server server32 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder33 = builder26.setServer(server32);
        retrofit.converter.Converter converter34 = null;
        builder33.converter = converter34;
        retrofit.RestAdapter restAdapter36 = builder33.build();
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler38 = builder37.errorHandler;
        java.util.concurrent.Executor executor39 = null;
        builder37.callbackExecutor = executor39;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider42 = builder41.clientProvider;
        java.util.concurrent.Executor executor43 = null;
        builder41.callbackExecutor = executor43;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.Server server48 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder49 = builder45.setServer(server48);
        java.lang.String str50 = server48.getUrl();
        retrofit.RestAdapter.Builder builder51 = builder41.setServer(server48);
        retrofit.RestAdapter.Builder builder52 = builder37.setServer(server48);
        restAdapter36.server = server48;
        retrofit.client.Client.Provider provider54 = restAdapter36.clientProvider;
        retrofit.RestAdapter.Builder builder55 = builder25.setClient(provider54);
        retrofit.RestAdapter.Builder builder56 = builder9.setClient(provider54);
        retrofit.RestAdapter.Log log57 = builder56.log;
        retrofit.RestAdapter restAdapter58 = builder56.build();
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "default" + "'", str8, "default");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(restAdapter36);
        org.junit.Assert.assertNull(errorHandler38);
        org.junit.Assert.assertNull(provider42);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(provider54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(log57);
        org.junit.Assert.assertNotNull(restAdapter58);
    }

    @Test
    public void test02979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02979");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server4 = new retrofit.Server("", "");
        builder0.server = server4;
        java.util.concurrent.Executor executor6 = builder0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel7 = null;
        builder0.logLevel = logLevel7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler10 = builder9.errorHandler;
        retrofit.client.Client.Provider provider11 = null;
        builder9.clientProvider = provider11;
        retrofit.Server server15 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder16 = builder9.setServer(server15);
        retrofit.converter.Converter converter17 = null;
        builder16.converter = converter17;
        retrofit.RestAdapter restAdapter19 = builder16.build();
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler21 = builder20.errorHandler;
        java.util.concurrent.Executor executor22 = null;
        builder20.callbackExecutor = executor22;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider25 = builder24.clientProvider;
        java.util.concurrent.Executor executor26 = null;
        builder24.callbackExecutor = executor26;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.Server server31 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder32 = builder28.setServer(server31);
        java.lang.String str33 = server31.getUrl();
        retrofit.RestAdapter.Builder builder34 = builder24.setServer(server31);
        retrofit.RestAdapter.Builder builder35 = builder20.setServer(server31);
        restAdapter19.server = server31;
        java.util.concurrent.Executor executor37 = restAdapter19.httpExecutor;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler39 = builder38.errorHandler;
        retrofit.Server server42 = new retrofit.Server("", "");
        builder38.server = server42;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        builder38.log = log44;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler47 = builder46.errorHandler;
        retrofit.client.Client.Provider provider48 = null;
        builder46.clientProvider = provider48;
        retrofit.Server server52 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder53 = builder46.setServer(server52);
        retrofit.converter.Converter converter54 = null;
        builder53.converter = converter54;
        retrofit.RestAdapter restAdapter56 = builder53.build();
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler58 = builder57.errorHandler;
        java.util.concurrent.Executor executor59 = null;
        builder57.callbackExecutor = executor59;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider62 = builder61.clientProvider;
        java.util.concurrent.Executor executor63 = null;
        builder61.callbackExecutor = executor63;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.Server server68 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder69 = builder65.setServer(server68);
        java.lang.String str70 = server68.getUrl();
        retrofit.RestAdapter.Builder builder71 = builder61.setServer(server68);
        retrofit.RestAdapter.Builder builder72 = builder57.setServer(server68);
        restAdapter56.server = server68;
        java.util.concurrent.Executor executor74 = restAdapter56.httpExecutor;
        builder38.httpExecutor = executor74;
        retrofit.RestAdapter.Builder builder76 = builder0.setExecutors(executor37, executor74);
        retrofit.Profiler profiler77 = builder76.profiler;
        retrofit.RestAdapter.Log log78 = retrofit.RestAdapter.Log.NONE;
        log78.log("");
        log78.log("");
        retrofit.RestAdapter.Builder builder83 = builder76.setLog(log78);
        retrofit.Server server84 = builder76.server;
        java.lang.String str85 = server84.getUrl();
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(restAdapter19);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNull(provider25);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(executor37);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNull(errorHandler47);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(restAdapter56);
        org.junit.Assert.assertNull(errorHandler58);
        org.junit.Assert.assertNull(provider62);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hi!" + "'", str70, "hi!");
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(executor74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNull(profiler77);
        org.junit.Assert.assertNotNull(log78);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(server84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
    }

    @Test
    public void test02980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02980");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        restAdapter5.log = log15;
        retrofit.RestAdapter.Builder builder17 = builder4.setLog(log15);
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server21 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder22 = builder18.setServer(server21);
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor24 = restAdapter23.callbackExecutor;
        java.util.concurrent.Executor executor25 = restAdapter23.callbackExecutor;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler27 = restAdapter26.errorHandler;
        retrofit.Server server30 = new retrofit.Server("", "");
        restAdapter26.server = server30;
        restAdapter23.server = server30;
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        restAdapter23.log = log33;
        retrofit.RestAdapter.Builder builder35 = builder22.setLog(log33);
        retrofit.converter.Converter converter36 = null;
        builder35.converter = converter36;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler39 = builder38.errorHandler;
        retrofit.ErrorHandler errorHandler40 = builder38.errorHandler;
        retrofit.Profiler profiler41 = builder38.profiler;
        retrofit.RestAdapter.Log log42 = builder38.log;
        retrofit.Server server43 = null;
        retrofit.client.Client.Provider provider44 = null;
        java.util.concurrent.Executor executor45 = null;
        java.util.concurrent.Executor executor46 = null;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        retrofit.converter.Converter converter48 = null;
        retrofit.Profiler profiler49 = null;
        retrofit.ErrorHandler errorHandler50 = null;
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        log51.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter(server43, provider44, executor45, executor46, requestInterceptor47, converter48, profiler49, errorHandler50, log51, logLevel54);
        builder38.log = log51;
        retrofit.RestAdapter.Builder builder57 = builder35.setLog(log51);
        retrofit.RestAdapter.LogLevel logLevel58 = builder35.logLevel;
        retrofit.RestAdapter.Builder builder59 = builder17.setLogLevel(logLevel58);
        retrofit.RestAdapter restAdapter60 = builder17.build();
        retrofit.Profiler profiler61 = restAdapter60.profiler;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler63 = builder62.errorHandler;
        retrofit.Server server66 = new retrofit.Server("", "");
        builder62.server = server66;
        java.util.concurrent.Executor executor68 = null;
        builder62.httpExecutor = executor68;
        retrofit.RestAdapter.Builder builder71 = builder62.setServer("default");
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler73 = builder72.errorHandler;
        retrofit.ErrorHandler errorHandler74 = builder72.errorHandler;
        retrofit.RestAdapter.Log log75 = null;
        builder72.log = log75;
        retrofit.RequestInterceptor requestInterceptor77 = null;
        builder72.requestInterceptor = requestInterceptor77;
        retrofit.client.Client.Provider provider79 = null;
        builder72.clientProvider = provider79;
        builder72.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder82 = new retrofit.RestAdapter.Builder();
        retrofit.Server server85 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder86 = builder82.setServer(server85);
        retrofit.Server server87 = builder82.server;
        java.lang.String str88 = server87.getName();
        builder72.server = server87;
        retrofit.RestAdapter.Builder builder90 = builder71.setServer(server87);
        restAdapter60.server = server87;
        java.lang.String str92 = server87.getUrl();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNull(profiler41);
        org.junit.Assert.assertNull(log42);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(restAdapter60);
        org.junit.Assert.assertNull(profiler61);
        org.junit.Assert.assertNull(errorHandler63);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNull(errorHandler73);
        org.junit.Assert.assertNull(errorHandler74);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(server87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "hi!" + "'", str88, "hi!");
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "hi!" + "'", str92, "hi!");
    }

    @Test
    public void test02981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02981");
        retrofit.client.Header[] headerArray12 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList13 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList13, headerArray12);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList13, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList13, typedOutput17);
        java.lang.String str19 = request18.getMethod();
        java.util.List<retrofit.client.Header> headerList20 = request18.getHeaders();
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("hi!", "", headerList20, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("default", "hi!", headerList20, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("", "hi!", headerList20, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("", "default", headerList20, typedOutput27);
        java.util.List<retrofit.client.Header> headerList29 = request28.getHeaders();
        java.lang.String str30 = request28.getUrl();
        org.junit.Assert.assertNotNull(headerArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(headerList20);
        org.junit.Assert.assertNotNull(headerList29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "default" + "'", str30, "default");
    }

    @Test
    public void test02982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02982");
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        log12.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel15);
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter16.new RestHandler();
        java.util.concurrent.Executor executor18 = null;
        restAdapter16.callbackExecutor = executor18;
        retrofit.client.Header[] headerArray22 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList23 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList23, headerArray22);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList23, typedOutput25);
        retrofit.client.Request request27 = restAdapter16.logAndReplaceRequest(request26);
        java.util.List<retrofit.client.Header> headerList28 = request26.getHeaders();
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("hi!", "default", headerList28, typedOutput29);
        java.util.List<retrofit.client.Header> headerList31 = request30.getHeaders();
        retrofit.mime.TypedOutput typedOutput32 = null;
        retrofit.client.Request request33 = new retrofit.client.Request("default", "hi!", headerList31, typedOutput32);
        java.lang.String str34 = request33.getMethod();
        java.lang.String str35 = request33.getMethod();
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(request27);
        org.junit.Assert.assertNotNull(headerList28);
        org.junit.Assert.assertNotNull(headerList31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "default" + "'", str34, "default");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "default" + "'", str35, "default");
    }

    @Test
    public void test02983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02983");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter0.requestInterceptor;
        retrofit.ErrorHandler errorHandler17 = restAdapter0.errorHandler;
        java.util.concurrent.Executor executor18 = null;
        restAdapter0.callbackExecutor = executor18;
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Log log21 = restAdapter0.log;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertNull(log21);
    }

    @Test
    public void test02984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02984");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        restAdapter5.log = log15;
        retrofit.RestAdapter.Builder builder17 = builder4.setLog(log15);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder19 = builder4.setLogLevel(logLevel18);
        retrofit.RestAdapter.Log log20 = builder4.log;
        retrofit.RestAdapter restAdapter21 = builder4.build();
        retrofit.ErrorHandler errorHandler22 = restAdapter21.errorHandler;
        retrofit.converter.Converter converter23 = null;
        restAdapter21.converter = converter23;
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter21.new RestHandler();
        retrofit.RestAdapter.Log log26 = restAdapter21.log;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(restAdapter21);
        org.junit.Assert.assertNotNull(errorHandler22);
        org.junit.Assert.assertNotNull(log26);
    }

    @Test
    public void test02985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02985");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.Server server5 = builder0.server;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.Server server9 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder10 = builder6.setServer(server9);
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor12 = restAdapter11.callbackExecutor;
        java.util.concurrent.Executor executor13 = restAdapter11.callbackExecutor;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler15 = restAdapter14.errorHandler;
        retrofit.Server server18 = new retrofit.Server("", "");
        restAdapter14.server = server18;
        restAdapter11.server = server18;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        restAdapter11.log = log21;
        retrofit.RestAdapter.Builder builder23 = builder10.setLog(log21);
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder25 = builder10.setLogLevel(logLevel24);
        builder0.logLevel = logLevel24;
        retrofit.client.Client.Provider provider27 = builder0.clientProvider;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor29 = restAdapter28.callbackExecutor;
        java.util.concurrent.Executor executor30 = restAdapter28.callbackExecutor;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler32 = restAdapter31.errorHandler;
        retrofit.Server server35 = new retrofit.Server("", "");
        restAdapter31.server = server35;
        restAdapter28.server = server35;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler39 = restAdapter38.errorHandler;
        retrofit.Server server42 = new retrofit.Server("", "");
        restAdapter38.server = server42;
        restAdapter28.server = server42;
        retrofit.RestAdapter.Log log45 = restAdapter28.log;
        retrofit.RestAdapter.RestHandler restHandler46 = restAdapter28.new RestHandler();
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler48 = builder47.errorHandler;
        java.util.concurrent.Executor executor49 = builder47.callbackExecutor;
        retrofit.RestAdapter.Builder builder51 = builder47.setServer("hi!");
        builder51.ensureSaneDefaults();
        java.util.concurrent.Executor executor53 = builder51.callbackExecutor;
        restAdapter28.httpExecutor = executor53;
        builder0.callbackExecutor = executor53;
        retrofit.Server server56 = builder0.server;
        retrofit.RestAdapter.Log log57 = builder0.log;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(server5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(provider27);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNull(errorHandler32);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNull(log45);
        org.junit.Assert.assertNull(errorHandler48);
        org.junit.Assert.assertNull(executor49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(executor53);
        org.junit.Assert.assertNotNull(server56);
        org.junit.Assert.assertNull(log57);
    }

    @Test
    public void test02986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02986");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.Server server5 = builder0.server;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.Server server9 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder10 = builder6.setServer(server9);
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor12 = restAdapter11.callbackExecutor;
        java.util.concurrent.Executor executor13 = restAdapter11.callbackExecutor;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler15 = restAdapter14.errorHandler;
        retrofit.Server server18 = new retrofit.Server("", "");
        restAdapter14.server = server18;
        restAdapter11.server = server18;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        restAdapter11.log = log21;
        retrofit.RestAdapter.Builder builder23 = builder10.setLog(log21);
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder25 = builder10.setLogLevel(logLevel24);
        builder0.logLevel = logLevel24;
        java.util.concurrent.Executor executor27 = builder0.callbackExecutor;
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        log28.log("");
        retrofit.RestAdapter.Builder builder31 = builder0.setLog(log28);
        log28.log("default");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(server5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test02987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02987");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        restAdapter5.log = log15;
        retrofit.RestAdapter.Builder builder17 = builder4.setLog(log15);
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.Server server21 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder22 = builder18.setServer(server21);
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor24 = restAdapter23.callbackExecutor;
        java.util.concurrent.Executor executor25 = restAdapter23.callbackExecutor;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler27 = restAdapter26.errorHandler;
        retrofit.Server server30 = new retrofit.Server("", "");
        restAdapter26.server = server30;
        restAdapter23.server = server30;
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        restAdapter23.log = log33;
        retrofit.RestAdapter.Builder builder35 = builder22.setLog(log33);
        retrofit.converter.Converter converter36 = null;
        builder35.converter = converter36;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler39 = builder38.errorHandler;
        retrofit.ErrorHandler errorHandler40 = builder38.errorHandler;
        retrofit.Profiler profiler41 = builder38.profiler;
        retrofit.RestAdapter.Log log42 = builder38.log;
        retrofit.Server server43 = null;
        retrofit.client.Client.Provider provider44 = null;
        java.util.concurrent.Executor executor45 = null;
        java.util.concurrent.Executor executor46 = null;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        retrofit.converter.Converter converter48 = null;
        retrofit.Profiler profiler49 = null;
        retrofit.ErrorHandler errorHandler50 = null;
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        log51.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter(server43, provider44, executor45, executor46, requestInterceptor47, converter48, profiler49, errorHandler50, log51, logLevel54);
        builder38.log = log51;
        retrofit.RestAdapter.Builder builder57 = builder35.setLog(log51);
        retrofit.RestAdapter.LogLevel logLevel58 = builder35.logLevel;
        retrofit.RestAdapter.Builder builder59 = builder17.setLogLevel(logLevel58);
        retrofit.RestAdapter restAdapter60 = builder17.build();
        retrofit.Profiler profiler61 = restAdapter60.profiler;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler63 = builder62.errorHandler;
        retrofit.Server server66 = new retrofit.Server("", "");
        builder62.server = server66;
        java.util.concurrent.Executor executor68 = null;
        builder62.httpExecutor = executor68;
        retrofit.RestAdapter.Builder builder71 = builder62.setServer("default");
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler73 = builder72.errorHandler;
        retrofit.ErrorHandler errorHandler74 = builder72.errorHandler;
        retrofit.RestAdapter.Log log75 = null;
        builder72.log = log75;
        retrofit.RequestInterceptor requestInterceptor77 = null;
        builder72.requestInterceptor = requestInterceptor77;
        retrofit.client.Client.Provider provider79 = null;
        builder72.clientProvider = provider79;
        builder72.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder82 = new retrofit.RestAdapter.Builder();
        retrofit.Server server85 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder86 = builder82.setServer(server85);
        retrofit.Server server87 = builder82.server;
        java.lang.String str88 = server87.getName();
        builder72.server = server87;
        retrofit.RestAdapter.Builder builder90 = builder71.setServer(server87);
        restAdapter60.server = server87;
        retrofit.Server server92 = restAdapter60.server;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNull(profiler41);
        org.junit.Assert.assertNull(log42);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(restAdapter60);
        org.junit.Assert.assertNull(profiler61);
        org.junit.Assert.assertNull(errorHandler63);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNull(errorHandler73);
        org.junit.Assert.assertNull(errorHandler74);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(server87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "hi!" + "'", str88, "hi!");
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(server92);
    }

    @Test
    public void test02988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02988");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        java.util.concurrent.Executor executor2 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("hi!");
        retrofit.Server server5 = null;
        retrofit.client.Client.Provider provider6 = null;
        java.util.concurrent.Executor executor7 = null;
        java.util.concurrent.Executor executor8 = null;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        retrofit.converter.Converter converter10 = null;
        retrofit.Profiler profiler11 = null;
        retrofit.ErrorHandler errorHandler12 = null;
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        log13.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server5, provider6, executor7, executor8, requestInterceptor9, converter10, profiler11, errorHandler12, log13, logLevel16);
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter17.new RestHandler();
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        restAdapter17.log = log19;
        retrofit.converter.Converter converter21 = null;
        restAdapter17.converter = converter21;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.Server server26 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder27 = builder23.setServer(server26);
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor29 = restAdapter28.callbackExecutor;
        java.util.concurrent.Executor executor30 = restAdapter28.callbackExecutor;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler32 = restAdapter31.errorHandler;
        retrofit.Server server35 = new retrofit.Server("", "");
        restAdapter31.server = server35;
        restAdapter28.server = server35;
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        restAdapter28.log = log38;
        retrofit.RestAdapter.Builder builder40 = builder27.setLog(log38);
        restAdapter17.log = log38;
        retrofit.RestAdapter.RestHandler restHandler42 = restAdapter17.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel43 = restAdapter17.logLevel;
        retrofit.RestAdapter.Log log44 = restAdapter17.log;
        retrofit.RestAdapter.Builder builder45 = builder0.setLog(log44);
        log44.log("hi!");
        log44.log("");
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(log13);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNull(errorHandler32);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test02989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02989");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler1 = restAdapter0.errorHandler;
        java.util.concurrent.Executor executor2 = restAdapter0.httpExecutor;
        retrofit.Server server3 = restAdapter0.server;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        log12.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel15);
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter16.new RestHandler();
        retrofit.client.Header[] headerArray26 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList27 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList27, headerArray26);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList27, typedOutput29);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList27, typedOutput31);
        retrofit.mime.TypedOutput typedOutput33 = null;
        retrofit.client.Request request34 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList27, typedOutput33);
        retrofit.mime.TypedOutput typedOutput35 = null;
        retrofit.client.Request request36 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList27, typedOutput35);
        retrofit.mime.TypedOutput typedOutput37 = request36.getBody();
        retrofit.client.Request request38 = restAdapter16.logAndReplaceRequest(request36);
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor40 = restAdapter39.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean42 = logLevel41.log();
        restAdapter39.logLevel = logLevel41;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler45 = builder44.errorHandler;
        retrofit.client.Client.Provider provider46 = null;
        builder44.clientProvider = provider46;
        retrofit.Server server50 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder51 = builder44.setServer(server50);
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler53 = builder52.errorHandler;
        retrofit.client.Client.Provider provider54 = null;
        builder52.clientProvider = provider54;
        retrofit.converter.Converter converter56 = builder52.converter;
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder58 = builder52.setLogLevel(logLevel57);
        builder44.logLevel = logLevel57;
        boolean boolean60 = logLevel57.log();
        restAdapter39.logLevel = logLevel57;
        restAdapter16.logLevel = logLevel57;
        retrofit.ErrorHandler errorHandler63 = restAdapter16.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel64 = restAdapter16.getLogLevel();
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider66 = builder65.clientProvider;
        java.util.concurrent.Executor executor67 = null;
        builder65.callbackExecutor = executor67;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        retrofit.Server server72 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder73 = builder69.setServer(server72);
        java.lang.String str74 = server72.getUrl();
        retrofit.RestAdapter.Builder builder75 = builder65.setServer(server72);
        builder65.ensureSaneDefaults();
        retrofit.Server server77 = null;
        retrofit.client.Client.Provider provider78 = null;
        java.util.concurrent.Executor executor79 = null;
        java.util.concurrent.Executor executor80 = null;
        retrofit.RequestInterceptor requestInterceptor81 = null;
        retrofit.converter.Converter converter82 = null;
        retrofit.Profiler profiler83 = null;
        retrofit.ErrorHandler errorHandler84 = null;
        retrofit.RestAdapter.Log log85 = retrofit.RestAdapter.Log.NONE;
        log85.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel88 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter89 = new retrofit.RestAdapter(server77, provider78, executor79, executor80, requestInterceptor81, converter82, profiler83, errorHandler84, log85, logLevel88);
        retrofit.RestAdapter.RestHandler restHandler90 = restAdapter89.new RestHandler();
        retrofit.RestAdapter.Log log91 = retrofit.RestAdapter.Log.NONE;
        restAdapter89.log = log91;
        retrofit.RestAdapter.Builder builder93 = builder65.setLog(log91);
        retrofit.RestAdapter.Builder builder95 = builder65.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor96 = builder65.requestInterceptor;
        java.util.concurrent.Executor executor97 = builder65.httpExecutor;
        restAdapter16.httpExecutor = executor97;
        restAdapter0.httpExecutor = executor97;
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(server3);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(headerArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(typedOutput37);
        org.junit.Assert.assertNotNull(request38);
        org.junit.Assert.assertNull(executor40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(errorHandler45);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(errorHandler53);
        org.junit.Assert.assertNull(converter56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(errorHandler63);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(provider66);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "hi!" + "'", str74, "hi!");
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(log85);
        org.junit.Assert.assertTrue("'" + logLevel88 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel88.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log91);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(requestInterceptor96);
        org.junit.Assert.assertNotNull(executor97);
    }

    @Test
    public void test02990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02990");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        restAdapter5.log = log15;
        retrofit.RestAdapter.Builder builder17 = builder4.setLog(log15);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder19 = builder4.setLogLevel(logLevel18);
        retrofit.RestAdapter.Log log20 = builder4.log;
        retrofit.RestAdapter restAdapter21 = builder4.build();
        retrofit.ErrorHandler errorHandler22 = restAdapter21.errorHandler;
        retrofit.RestAdapter.Log log23 = restAdapter21.log;
        retrofit.client.Header[] headerArray36 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList37 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList37, headerArray36);
        retrofit.mime.TypedOutput typedOutput39 = null;
        retrofit.client.Request request40 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList37, typedOutput39);
        retrofit.mime.TypedOutput typedOutput41 = null;
        retrofit.client.Request request42 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList37, typedOutput41);
        retrofit.mime.TypedOutput typedOutput43 = null;
        retrofit.client.Request request44 = new retrofit.client.Request("", "default", (java.util.List<retrofit.client.Header>) headerList37, typedOutput43);
        java.util.List<retrofit.client.Header> headerList45 = request44.getHeaders();
        retrofit.mime.TypedOutput typedOutput46 = null;
        retrofit.client.Request request47 = new retrofit.client.Request("hi!", "default", headerList45, typedOutput46);
        retrofit.mime.TypedOutput typedOutput48 = null;
        retrofit.client.Request request49 = new retrofit.client.Request("", "", headerList45, typedOutput48);
        java.util.List<retrofit.client.Header> headerList50 = request49.getHeaders();
        retrofit.mime.TypedOutput typedOutput51 = null;
        retrofit.client.Request request52 = new retrofit.client.Request("hi!", "", headerList50, typedOutput51);
        java.lang.String str53 = request52.getUrl();
        retrofit.client.Request request54 = restAdapter21.logAndReplaceRequest(request52);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(restAdapter21);
        org.junit.Assert.assertNotNull(errorHandler22);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNotNull(headerArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(headerList45);
        org.junit.Assert.assertNotNull(headerList50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(request54);
    }

    @Test
    public void test02991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02991");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
        retrofit.ErrorHandler errorHandler2 = restAdapter0.errorHandler;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider4 = builder3.clientProvider;
        java.util.concurrent.Executor executor5 = null;
        builder3.callbackExecutor = executor5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.Server server10 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder11 = builder7.setServer(server10);
        java.lang.String str12 = server10.getUrl();
        retrofit.RestAdapter.Builder builder13 = builder3.setServer(server10);
        builder3.ensureSaneDefaults();
        java.util.concurrent.Executor executor15 = builder3.callbackExecutor;
        restAdapter0.httpExecutor = executor15;
        retrofit.Server server17 = restAdapter0.server;
        retrofit.ErrorHandler errorHandler18 = restAdapter0.errorHandler;
        retrofit.client.Header[] headerArray29 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList30 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList30, headerArray29);
        retrofit.mime.TypedOutput typedOutput32 = null;
        retrofit.client.Request request33 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList30, typedOutput32);
        retrofit.mime.TypedOutput typedOutput34 = null;
        retrofit.client.Request request35 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList30, typedOutput34);
        retrofit.mime.TypedOutput typedOutput36 = null;
        retrofit.client.Request request37 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList30, typedOutput36);
        retrofit.mime.TypedOutput typedOutput38 = null;
        retrofit.client.Request request39 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList30, typedOutput38);
        retrofit.mime.TypedOutput typedOutput40 = null;
        retrofit.client.Request request41 = new retrofit.client.Request("", "default", (java.util.List<retrofit.client.Header>) headerList30, typedOutput40);
        java.lang.String str42 = request41.getUrl();
        java.util.List<retrofit.client.Header> headerList43 = request41.getHeaders();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request44 = restAdapter0.logAndReplaceRequest(request41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler2);
        org.junit.Assert.assertNull(provider4);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(executor15);
        org.junit.Assert.assertNull(server17);
        org.junit.Assert.assertNull(errorHandler18);
        org.junit.Assert.assertNotNull(headerArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "default" + "'", str42, "default");
        org.junit.Assert.assertNotNull(headerList43);
    }

    @Test
    public void test02992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02992");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.Server server4 = new retrofit.Server("", "");
        builder0.server = server4;
        java.util.concurrent.Executor executor6 = builder0.callbackExecutor;
        retrofit.converter.Converter converter7 = null;
        builder0.converter = converter7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler10 = builder9.errorHandler;
        retrofit.client.Client.Provider provider11 = null;
        builder9.clientProvider = provider11;
        retrofit.converter.Converter converter13 = builder9.converter;
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder15 = builder9.setLogLevel(logLevel14);
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor17 = restAdapter16.callbackExecutor;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor19 = restAdapter18.callbackExecutor;
        java.util.concurrent.Executor executor20 = restAdapter18.callbackExecutor;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler22 = restAdapter21.errorHandler;
        retrofit.Server server25 = new retrofit.Server("", "");
        restAdapter21.server = server25;
        restAdapter18.server = server25;
        restAdapter16.server = server25;
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler37 = builder36.errorHandler;
        retrofit.Server server40 = new retrofit.Server("", "");
        builder36.server = server40;
        retrofit.client.Client.Provider provider42 = null;
        java.util.concurrent.Executor executor43 = null;
        java.util.concurrent.Executor executor44 = null;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        retrofit.converter.Converter converter46 = null;
        retrofit.Profiler profiler47 = null;
        retrofit.ErrorHandler errorHandler48 = null;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler50 = builder49.errorHandler;
        retrofit.Server server53 = new retrofit.Server("", "");
        builder49.server = server53;
        retrofit.RestAdapter.Log log55 = retrofit.RestAdapter.Log.NONE;
        builder49.log = log55;
        retrofit.Server server57 = null;
        retrofit.client.Client.Provider provider58 = null;
        java.util.concurrent.Executor executor59 = null;
        java.util.concurrent.Executor executor60 = null;
        retrofit.RequestInterceptor requestInterceptor61 = null;
        retrofit.converter.Converter converter62 = null;
        retrofit.Profiler profiler63 = null;
        retrofit.ErrorHandler errorHandler64 = null;
        retrofit.RestAdapter.Log log65 = retrofit.RestAdapter.Log.NONE;
        log65.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel68 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter(server57, provider58, executor59, executor60, requestInterceptor61, converter62, profiler63, errorHandler64, log65, logLevel68);
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter(server40, provider42, executor43, executor44, requestInterceptor45, converter46, profiler47, errorHandler48, log55, logLevel68);
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        retrofit.Server server74 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder75 = builder71.setServer(server74);
        retrofit.RestAdapter restAdapter76 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor77 = restAdapter76.callbackExecutor;
        java.util.concurrent.Executor executor78 = restAdapter76.callbackExecutor;
        retrofit.RestAdapter restAdapter79 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler80 = restAdapter79.errorHandler;
        retrofit.Server server83 = new retrofit.Server("", "");
        restAdapter79.server = server83;
        restAdapter76.server = server83;
        retrofit.RestAdapter.Log log86 = retrofit.RestAdapter.Log.NONE;
        restAdapter76.log = log86;
        retrofit.RestAdapter.Builder builder88 = builder75.setLog(log86);
        retrofit.RestAdapter.LogLevel logLevel89 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder90 = builder75.setLogLevel(logLevel89);
        retrofit.RestAdapter restAdapter91 = new retrofit.RestAdapter(server25, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log55, logLevel89);
        builder9.logLevel = logLevel89;
        retrofit.RestAdapter.Builder builder93 = builder0.setLogLevel(logLevel89);
        retrofit.RestAdapter restAdapter94 = builder0.build();
        retrofit.RestAdapter.RestHandler restHandler95 = restAdapter94.new RestHandler();
        retrofit.Server server96 = restAdapter94.server;
        java.lang.String str97 = server96.getUrl();
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNull(errorHandler50);
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertNotNull(log65);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNull(executor77);
        org.junit.Assert.assertNull(executor78);
        org.junit.Assert.assertNull(errorHandler80);
        org.junit.Assert.assertNotNull(log86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertTrue("'" + logLevel89 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel89.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(restAdapter94);
        org.junit.Assert.assertNotNull(server96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "" + "'", str97, "");
    }

    @Test
    public void test02993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02993");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter0.requestInterceptor;
        retrofit.ErrorHandler errorHandler17 = restAdapter0.errorHandler;
        java.util.concurrent.Executor executor18 = null;
        restAdapter0.callbackExecutor = executor18;
        java.util.concurrent.Executor executor20 = restAdapter0.httpExecutor;
        retrofit.client.Client.Provider provider21 = restAdapter0.clientProvider;
        retrofit.converter.Converter converter22 = restAdapter0.converter;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler24 = builder23.errorHandler;
        retrofit.Server server27 = new retrofit.Server("", "");
        builder23.server = server27;
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        builder23.log = log29;
        retrofit.RequestInterceptor requestInterceptor31 = builder23.requestInterceptor;
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        log32.log("hi!");
        log32.log("hi!");
        builder23.log = log32;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider39 = builder38.clientProvider;
        java.util.concurrent.Executor executor40 = null;
        builder38.callbackExecutor = executor40;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.Server server45 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder46 = builder42.setServer(server45);
        java.lang.String str47 = server45.getUrl();
        retrofit.RestAdapter.Builder builder48 = builder38.setServer(server45);
        builder38.ensureSaneDefaults();
        retrofit.Server server50 = null;
        retrofit.client.Client.Provider provider51 = null;
        java.util.concurrent.Executor executor52 = null;
        java.util.concurrent.Executor executor53 = null;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        retrofit.converter.Converter converter55 = null;
        retrofit.Profiler profiler56 = null;
        retrofit.ErrorHandler errorHandler57 = null;
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        log58.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel61 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter(server50, provider51, executor52, executor53, requestInterceptor54, converter55, profiler56, errorHandler57, log58, logLevel61);
        retrofit.RestAdapter.RestHandler restHandler63 = restAdapter62.new RestHandler();
        retrofit.RestAdapter.Log log64 = retrofit.RestAdapter.Log.NONE;
        restAdapter62.log = log64;
        retrofit.RestAdapter.Builder builder66 = builder38.setLog(log64);
        retrofit.RestAdapter.LogLevel logLevel67 = builder38.logLevel;
        boolean boolean68 = logLevel67.log();
        retrofit.RestAdapter.Builder builder69 = builder23.setLogLevel(logLevel67);
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider71 = builder70.clientProvider;
        retrofit.RestAdapter.Builder builder73 = builder70.setServer("default");
        retrofit.RestAdapter restAdapter74 = builder70.build();
        retrofit.client.Client.Provider provider75 = restAdapter74.clientProvider;
        retrofit.RestAdapter.Builder builder76 = builder69.setClient(provider75);
        restAdapter0.clientProvider = provider75;
        java.util.concurrent.Executor executor78 = restAdapter0.callbackExecutor;
        retrofit.Server server79 = restAdapter0.server;
        retrofit.RestAdapter.LogLevel logLevel80 = null;
        restAdapter0.logLevel = logLevel80;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(provider21);
        org.junit.Assert.assertNull(converter22);
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertNull(requestInterceptor31);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertNull(provider39);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(log58);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNull(provider71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(restAdapter74);
        org.junit.Assert.assertNotNull(provider75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNull(executor78);
        org.junit.Assert.assertNotNull(server79);
    }

    @Test
    public void test02994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02994");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = null;
        restAdapter0.errorHandler = errorHandler14;
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter0.requestInterceptor;
        retrofit.ErrorHandler errorHandler17 = restAdapter0.errorHandler;
        retrofit.Profiler profiler18 = restAdapter0.profiler;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler20 = builder19.errorHandler;
        retrofit.client.Client.Provider provider21 = null;
        builder19.clientProvider = provider21;
        retrofit.Server server25 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder26 = builder19.setServer(server25);
        retrofit.converter.Converter converter27 = null;
        builder26.converter = converter27;
        retrofit.RestAdapter restAdapter29 = builder26.build();
        java.util.concurrent.Executor executor30 = restAdapter29.httpExecutor;
        restAdapter0.httpExecutor = executor30;
        retrofit.RestAdapter.RestHandler restHandler32 = restAdapter0.new RestHandler();
        retrofit.Profiler profiler33 = null;
        restAdapter0.profiler = profiler33;
        retrofit.RestAdapter.LogLevel logLevel35 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Log log36 = restAdapter0.log;
        java.util.concurrent.Executor executor37 = restAdapter0.callbackExecutor;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(profiler18);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(restAdapter29);
        org.junit.Assert.assertNotNull(executor30);
        org.junit.Assert.assertNull(logLevel35);
        org.junit.Assert.assertNull(log36);
        org.junit.Assert.assertNull(executor37);
    }

    @Test
    public void test02995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02995");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor6 = restAdapter5.callbackExecutor;
        java.util.concurrent.Executor executor7 = restAdapter5.callbackExecutor;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler9 = restAdapter8.errorHandler;
        retrofit.Server server12 = new retrofit.Server("", "");
        restAdapter8.server = server12;
        restAdapter5.server = server12;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        restAdapter5.log = log15;
        retrofit.RestAdapter.Builder builder17 = builder4.setLog(log15);
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder19 = builder4.setLogLevel(logLevel18);
        retrofit.Profiler profiler20 = null;
        builder19.profiler = profiler20;
        retrofit.converter.Converter converter22 = null;
        builder19.converter = converter22;
        retrofit.ErrorHandler errorHandler24 = null;
        builder19.errorHandler = errorHandler24;
        retrofit.RestAdapter.LogLevel logLevel26 = builder19.logLevel;
        retrofit.ErrorHandler errorHandler27 = builder19.errorHandler;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider29 = builder28.clientProvider;
        java.util.concurrent.Executor executor30 = null;
        builder28.callbackExecutor = executor30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.Server server35 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder36 = builder32.setServer(server35);
        java.lang.String str37 = server35.getUrl();
        retrofit.RestAdapter.Builder builder38 = builder28.setServer(server35);
        builder28.ensureSaneDefaults();
        retrofit.Server server40 = null;
        retrofit.client.Client.Provider provider41 = null;
        java.util.concurrent.Executor executor42 = null;
        java.util.concurrent.Executor executor43 = null;
        retrofit.RequestInterceptor requestInterceptor44 = null;
        retrofit.converter.Converter converter45 = null;
        retrofit.Profiler profiler46 = null;
        retrofit.ErrorHandler errorHandler47 = null;
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        log48.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter(server40, provider41, executor42, executor43, requestInterceptor44, converter45, profiler46, errorHandler47, log48, logLevel51);
        retrofit.RestAdapter.RestHandler restHandler53 = restAdapter52.new RestHandler();
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        restAdapter52.log = log54;
        retrofit.RestAdapter.Builder builder56 = builder28.setLog(log54);
        retrofit.Profiler profiler57 = null;
        builder56.profiler = profiler57;
        retrofit.RequestInterceptor requestInterceptor59 = builder56.requestInterceptor;
        retrofit.RestAdapter restAdapter60 = builder56.build();
        retrofit.ErrorHandler errorHandler61 = restAdapter60.errorHandler;
        retrofit.RestAdapter.Builder builder62 = builder19.setErrorHandler(errorHandler61);
        retrofit.RequestInterceptor requestInterceptor63 = builder19.requestInterceptor;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNull(provider29);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(requestInterceptor59);
        org.junit.Assert.assertNotNull(restAdapter60);
        org.junit.Assert.assertNotNull(errorHandler61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(requestInterceptor63);
    }

    @Test
    public void test02996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02996");
        retrofit.client.Header[] headerArray14 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList15 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList15, headerArray14);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList15, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList15, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList15, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList15, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList15, typedOutput25);
        java.util.List<retrofit.client.Header> headerList27 = request26.getHeaders();
        retrofit.mime.TypedOutput typedOutput28 = null;
        retrofit.client.Request request29 = new retrofit.client.Request("default", "hi!", headerList27, typedOutput28);
        retrofit.mime.TypedOutput typedOutput30 = null;
        retrofit.client.Request request31 = new retrofit.client.Request("default", "default", headerList27, typedOutput30);
        org.junit.Assert.assertNotNull(headerArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(headerList27);
    }

    @Test
    public void test02997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02997");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server6 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder7 = builder0.setServer(server6);
        retrofit.Server server10 = new retrofit.Server("", "");
        builder7.server = server10;
        builder7.ensureSaneDefaults();
        retrofit.converter.Converter converter13 = builder7.converter;
        retrofit.RestAdapter.Log log14 = builder7.log;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor16 = restAdapter15.callbackExecutor;
        java.util.concurrent.Executor executor17 = restAdapter15.callbackExecutor;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler19 = restAdapter18.errorHandler;
        retrofit.Server server22 = new retrofit.Server("", "");
        restAdapter18.server = server22;
        restAdapter15.server = server22;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler26 = restAdapter25.errorHandler;
        retrofit.Server server29 = new retrofit.Server("", "");
        restAdapter25.server = server29;
        restAdapter15.server = server29;
        retrofit.RestAdapter.Log log32 = restAdapter15.log;
        retrofit.Profiler profiler33 = restAdapter15.profiler;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.Server server37 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder38 = builder34.setServer(server37);
        java.lang.String str39 = server37.getUrl();
        restAdapter15.server = server37;
        retrofit.RestAdapter.Builder builder41 = builder7.setServer(server37);
        retrofit.Profiler profiler42 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder43 = builder7.setProfiler(profiler42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(converter13);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(errorHandler26);
        org.junit.Assert.assertNull(log32);
        org.junit.Assert.assertNull(profiler33);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test02998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02998");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server3 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder4 = builder0.setServer(server3);
        retrofit.RestAdapter.LogLevel logLevel5 = builder4.logLevel;
        java.util.concurrent.Executor executor6 = builder4.httpExecutor;
        retrofit.RestAdapter restAdapter7 = builder4.build();
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor9 = restAdapter8.callbackExecutor;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor11 = restAdapter10.callbackExecutor;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler14 = restAdapter13.errorHandler;
        retrofit.Server server17 = new retrofit.Server("", "");
        restAdapter13.server = server17;
        restAdapter10.server = server17;
        restAdapter8.server = server17;
        retrofit.Profiler profiler21 = restAdapter8.profiler;
        retrofit.ErrorHandler errorHandler22 = null;
        restAdapter8.errorHandler = errorHandler22;
        retrofit.Profiler profiler24 = null;
        restAdapter8.profiler = profiler24;
        retrofit.RestAdapter.LogLevel logLevel26 = restAdapter8.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter8.logLevel = logLevel27;
        retrofit.RestAdapter.RestHandler restHandler29 = restAdapter8.new RestHandler();
        retrofit.RequestInterceptor requestInterceptor30 = null;
        restAdapter8.requestInterceptor = requestInterceptor30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler33 = builder32.errorHandler;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        builder32.requestInterceptor = requestInterceptor34;
        retrofit.Server server36 = null;
        retrofit.client.Client.Provider provider37 = null;
        java.util.concurrent.Executor executor38 = null;
        java.util.concurrent.Executor executor39 = null;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        retrofit.converter.Converter converter41 = null;
        retrofit.Profiler profiler42 = null;
        retrofit.ErrorHandler errorHandler43 = null;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        log44.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter(server36, provider37, executor38, executor39, requestInterceptor40, converter41, profiler42, errorHandler43, log44, logLevel47);
        builder32.log = log44;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler51 = builder50.errorHandler;
        retrofit.client.Client.Provider provider52 = null;
        builder50.clientProvider = provider52;
        retrofit.Server server56 = new retrofit.Server("", "");
        retrofit.RestAdapter.Builder builder57 = builder50.setServer(server56);
        retrofit.converter.Converter converter58 = null;
        builder57.converter = converter58;
        retrofit.RestAdapter restAdapter60 = builder57.build();
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler62 = builder61.errorHandler;
        java.util.concurrent.Executor executor63 = null;
        builder61.callbackExecutor = executor63;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider66 = builder65.clientProvider;
        java.util.concurrent.Executor executor67 = null;
        builder65.callbackExecutor = executor67;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        retrofit.Server server72 = new retrofit.Server("hi!", "hi!");
        retrofit.RestAdapter.Builder builder73 = builder69.setServer(server72);
        java.lang.String str74 = server72.getUrl();
        retrofit.RestAdapter.Builder builder75 = builder65.setServer(server72);
        retrofit.RestAdapter.Builder builder76 = builder61.setServer(server72);
        restAdapter60.server = server72;
        retrofit.client.Client.Provider provider78 = restAdapter60.clientProvider;
        builder32.clientProvider = provider78;
        restAdapter8.clientProvider = provider78;
        retrofit.RestAdapter.Builder builder81 = builder4.setClient(provider78);
        java.util.concurrent.Executor executor82 = null;
        builder4.httpExecutor = executor82;
        retrofit.client.Client.Provider provider84 = builder4.clientProvider;
        retrofit.client.Client client85 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder86 = builder4.setClient(client85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(profiler21);
        org.junit.Assert.assertNull(logLevel26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler33);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler51);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(restAdapter60);
        org.junit.Assert.assertNull(errorHandler62);
        org.junit.Assert.assertNull(provider66);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "hi!" + "'", str74, "hi!");
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(provider78);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(provider84);
    }

    @Test
    public void test02999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02999");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        java.util.List<retrofit.client.Header> headerList11 = request10.getHeaders();
        java.util.List<retrofit.client.Header> headerList12 = request10.getHeaders();
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("hi!", "hi!", headerList12, typedOutput13);
        java.util.List<retrofit.client.Header> headerList15 = request14.getHeaders();
        retrofit.mime.TypedOutput typedOutput16 = null;
        retrofit.client.Request request17 = new retrofit.client.Request("default", "hi!", headerList15, typedOutput16);
        retrofit.mime.TypedOutput typedOutput18 = request17.getBody();
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(headerList11);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertNull(typedOutput18);
    }

    @Test
    public void test03000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test03000");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor3 = restAdapter2.callbackExecutor;
        java.util.concurrent.Executor executor4 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.ErrorHandler errorHandler6 = restAdapter5.errorHandler;
        retrofit.Server server9 = new retrofit.Server("", "");
        restAdapter5.server = server9;
        restAdapter2.server = server9;
        restAdapter0.server = server9;
        retrofit.Profiler profiler13 = restAdapter0.profiler;
        retrofit.ErrorHandler errorHandler14 = restAdapter0.errorHandler;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler16 = builder15.errorHandler;
        retrofit.ErrorHandler errorHandler17 = builder15.errorHandler;
        java.util.concurrent.Executor executor18 = builder15.callbackExecutor;
        java.util.concurrent.Executor executor19 = null;
        builder15.callbackExecutor = executor19;
        retrofit.Server server21 = null;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        log29.log("hi!");
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel32);
        builder15.log = log29;
        restAdapter0.log = log29;
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter0.logLevel;
        retrofit.client.Header[] headerArray51 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList52 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList52, headerArray51);
        retrofit.mime.TypedOutput typedOutput54 = null;
        retrofit.client.Request request55 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList52, typedOutput54);
        retrofit.mime.TypedOutput typedOutput56 = null;
        retrofit.client.Request request57 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList52, typedOutput56);
        retrofit.mime.TypedOutput typedOutput58 = null;
        retrofit.client.Request request59 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList52, typedOutput58);
        retrofit.mime.TypedOutput typedOutput60 = null;
        retrofit.client.Request request61 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList52, typedOutput60);
        retrofit.mime.TypedOutput typedOutput62 = null;
        retrofit.client.Request request63 = new retrofit.client.Request("", "default", (java.util.List<retrofit.client.Header>) headerList52, typedOutput62);
        retrofit.mime.TypedOutput typedOutput64 = null;
        retrofit.client.Request request65 = new retrofit.client.Request("default", "hi!", (java.util.List<retrofit.client.Header>) headerList52, typedOutput64);
        retrofit.mime.TypedOutput typedOutput66 = null;
        retrofit.client.Request request67 = new retrofit.client.Request("", "default", (java.util.List<retrofit.client.Header>) headerList52, typedOutput66);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request68 = restAdapter0.logAndReplaceRequest(request67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel36);
        org.junit.Assert.assertNotNull(headerArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }
}

