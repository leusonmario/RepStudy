/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 06 03:33:36 GMT 2021
 */

package retrofit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.os.Message;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ClassKey;
import com.google.gson.Gson;
import com.squareup.okhttp.ConnectionPool;
import com.squareup.okhttp.OkHttpClient;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.Array;
import java.lang.reflect.Method;
import java.net.MalformedURLException;
import java.net.ResponseCache;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.Delayed;
import java.util.concurrent.Executor;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.apache.http.client.HttpClient;
import org.apache.http.impl.client.DefaultHttpClient;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import retrofit.ErrorHandler;
import retrofit.Profiler;
import retrofit.RequestBuilder;
import retrofit.RequestInterceptor;
import retrofit.RequestInterceptorTape;
import retrofit.RestAdapter;
import retrofit.RestMethodInfo;
import retrofit.Server;
import retrofit.client.ApacheClient;
import retrofit.client.Client;
import retrofit.client.Header;
import retrofit.client.OkClient;
import retrofit.client.Request;
import retrofit.client.Response;
import retrofit.client.UrlConnectionClient;
import retrofit.converter.Converter;
import retrofit.converter.GsonConverter;
import retrofit.converter.JacksonConverter;
import retrofit.converter.ProtoConverter;
import retrofit.converter.WireConverter;
import retrofit.mime.MultipartTypedOutput;
import retrofit.mime.TypedByteArray;
import retrofit.mime.TypedFile;
import retrofit.mime.TypedOutput;
import retrofit.mime.TypedString;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RestAdapter_ESTest extends RestAdapter_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      RestAdapter restAdapter0 = new RestAdapter();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      RestAdapter.THREAD_PREFIX = restAdapter0.THREAD_PREFIX;
      assertNull(restAdapter0.getLogLevel());
      
      // Undeclared exception!
      try { 
        restAdapter0.setLogLevel(restAdapter0.logLevel);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Log level may not be null.
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertNotNull(restAdapter_LogLevelArray0);
      assertEquals(4, restAdapter_LogLevelArray0.length);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Profiler<Object> profiler0 = (Profiler<Object>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setProfiler(profiler0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      String string0 = "retrofit.RestAdapter$Log";
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(string0);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertNotNull(restAdapter_Builder2);
      
      Client.Provider client_Provider0 = null;
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder1.setLogLevel(restAdapter_Builder0.logLevel);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertNotNull(restAdapter_Builder3);
      
      Gson gson0 = null;
      String string1 = "start an array";
      GsonConverter gsonConverter0 = new GsonConverter(gson0, string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(gsonConverter0);
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setConverter(gsonConverter0);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertNotSame(string1, string0);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(restAdapter_Builder4);
      
      RestAdapter restAdapter0 = restAdapter_Builder4.build();
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertNotSame(string1, string0);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Throwable throwable0 = null;
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder0.setErrorHandler(restAdapter0.errorHandler);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertNotSame(string1, string0);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertFalse(string1.equals((Object)string0));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter_Builder5);
      
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder6 = restAdapter_Builder0.setErrorHandler(errorHandler0);
      assertSame(restAdapter_Builder6, restAdapter_Builder0);
      assertSame(restAdapter_Builder6, restAdapter_Builder1);
      assertSame(restAdapter_Builder6, restAdapter_Builder3);
      assertSame(restAdapter_Builder6, restAdapter_Builder5);
      assertSame(restAdapter_Builder6, restAdapter_Builder2);
      assertSame(restAdapter_Builder6, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertNotNull(restAdapter_Builder6);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, throwable0);
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(sQLClientInfoException0);
      
      restAdapter0.logException(sQLClientInfoException0, string1);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder6);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertNotSame(string1, string0);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder6);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string2 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder4.setServer(string2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be blank.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter restAdapter0 = new RestAdapter();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      restAdapter0.logLevel = restAdapter_LogLevel0;
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertTrue(restAdapter0.logLevel.log());
      
      ForkJoinPool forkJoinPool0 = ForkJoinTask.getPool();
      assertNull(forkJoinPool0);
      
      restAdapter0.httpExecutor = (Executor) forkJoinPool0;
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      restAdapter0.server = restAdapter_Builder0.server;
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      
      restAdapter_Log0.log(restAdapter0.THREAD_PREFIX);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      
      restAdapter_Builder0.ensureSaneDefaults();
      Class<Runnable> class0 = Runnable.class;
      Runnable runnable0 = restAdapter0.create(class0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertNotNull(runnable0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLog(restAdapter_Log0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      restAdapter_Builder0.ensureSaneDefaults();
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      String string0 = "com.fasterxml.jackson.annotation.JsonTypeInfo$None";
      int int0 = 500;
      MockFile mockFile0 = new MockFile(restAdapter0.IDLE_THREAD_NAME);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(file0.equals((Object)mockFile0));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertFalse(mockFile0.exists());
      assertEquals("Retrofit-Idle", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals("Retrofit-Idle", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/retrofit/2b6c719c6645f8e48dca6d0047c752069d321bc4/evosuite_18", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.exists());
      assertEquals("Retrofit-Idle", file0.getName());
      assertFalse(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.canRead());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/retrofit/2b6c719c6645f8e48dca6d0047c752069d321bc4/evosuite_18/Retrofit-Idle", file0.toString());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertNotNull(file0);
      
      TypedFile typedFile0 = new TypedFile(restAdapter0.THREAD_PREFIX, mockFile0);
      assertTrue(mockFile0.equals((Object)file0));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertFalse(mockFile0.exists());
      assertEquals("Retrofit-Idle", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals("Retrofit-Idle", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals(0L, typedFile0.length());
      assertEquals("Retrofit-Idle", typedFile0.fileName());
      assertEquals("Retrofit-", typedFile0.mimeType());
      assertNotNull(typedFile0);
      
      long long0 = 1280L;
      String string1 = "7UAv(#-";
      String string2 = "_\"(";
      String string3 = "\\<1KIyAGqoLq9-";
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      String string4 = ", no static serializer";
      String string5 = "";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(string4, string5, restAdapter0.LOG_CHUNK_SIZE);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals(", no static serializer", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: , no static serializer", sQLTimeoutException0.toString());
      assertEquals("", sQLTimeoutException0.getSQLState());
      assertEquals(4000, sQLTimeoutException0.getErrorCode());
      assertNotNull(sQLTimeoutException0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(string0, sQLTimeoutException0);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals(", no static serializer", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: , no static serializer", sQLTimeoutException0.toString());
      assertEquals("", sQLTimeoutException0.getSQLState());
      assertEquals(4000, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: com.fasterxml.jackson.annotation.JsonTypeInfo$None", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("com.fasterxml.jackson.annotation.JsonTypeInfo$None", sQLTransientConnectionException0.getMessage());
      assertNotNull(sQLTransientConnectionException0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(string1, sQLTransientConnectionException0);
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals(", no static serializer", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: , no static serializer", sQLTimeoutException0.toString());
      assertEquals("", sQLTimeoutException0.getSQLState());
      assertEquals(4000, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: com.fasterxml.jackson.annotation.JsonTypeInfo$None", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("com.fasterxml.jackson.annotation.JsonTypeInfo$None", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("7UAv(#-", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: 7UAv(#-", sQLFeatureNotSupportedException0.toString());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(string2, string3, int0, hashMap0, sQLFeatureNotSupportedException0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(", no static serializer", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: , no static serializer", sQLTimeoutException0.toString());
      assertEquals("", sQLTimeoutException0.getSQLState());
      assertEquals(4000, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: com.fasterxml.jackson.annotation.JsonTypeInfo$None", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("com.fasterxml.jackson.annotation.JsonTypeInfo$None", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("7UAv(#-", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: 7UAv(#-", sQLFeatureNotSupportedException0.toString());
      assertEquals("_\"(", sQLClientInfoException0.getMessage());
      assertEquals(500, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: _\"(", sQLClientInfoException0.toString());
      assertEquals("\\<1KIyAGqoLq9-", sQLClientInfoException0.getSQLState());
      assertNotNull(sQLClientInfoException0);
      
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(string1, sQLClientInfoException0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(", no static serializer", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: , no static serializer", sQLTimeoutException0.toString());
      assertEquals("", sQLTimeoutException0.getSQLState());
      assertEquals(4000, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: com.fasterxml.jackson.annotation.JsonTypeInfo$None", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("com.fasterxml.jackson.annotation.JsonTypeInfo$None", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("7UAv(#-", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: 7UAv(#-", sQLFeatureNotSupportedException0.toString());
      assertEquals("_\"(", sQLClientInfoException0.getMessage());
      assertEquals(500, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: _\"(", sQLClientInfoException0.toString());
      assertEquals("\\<1KIyAGqoLq9-", sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: 7UAv(#-", sQLTimeoutException1.toString());
      assertEquals("7UAv(#-", sQLTimeoutException1.getMessage());
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      assertNull(sQLTimeoutException1.getSQLState());
      assertNotNull(sQLTimeoutException1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string6 = ")$\"8!A%?A\"f7<Oy\\A@l";
      RestMethodInfo restMethodInfo0 = null;
      RequestBuilder requestBuilder0 = null;
      try {
        requestBuilder0 = new RequestBuilder(restAdapter_Builder0.converter, restMethodInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter restAdapter0 = new RestAdapter();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      restAdapter0.logLevel = restAdapter_LogLevel0;
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertTrue(restAdapter0.logLevel.log());
      
      ForkJoinPool forkJoinPool0 = ForkJoinTask.getPool();
      assertNull(forkJoinPool0);
      
      restAdapter0.httpExecutor = (Executor) forkJoinPool0;
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      restAdapter0.server = restAdapter_Builder0.server;
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      
      restAdapter_Log0.log(restAdapter0.THREAD_PREFIX);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      
      restAdapter_Builder0.ensureSaneDefaults();
      Class<Runnable> class0 = Runnable.class;
      Runnable runnable0 = restAdapter0.create(class0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertNotNull(runnable0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLog(restAdapter_Log0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      restAdapter_Builder0.ensureSaneDefaults();
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      String string0 = "com.fasterxml.jackson.annotation.JsonTypeInfo$None";
      int int0 = 500;
      MockFile mockFile0 = new MockFile(restAdapter0.IDLE_THREAD_NAME);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(file0.equals((Object)mockFile0));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals("Retrofit-Idle", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals("Retrofit-Idle", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.exists());
      assertFalse(file0.isDirectory());
      assertFalse(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.lastModified());
      assertTrue(file0.isFile());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/retrofit/2b6c719c6645f8e48dca6d0047c752069d321bc4/evosuite_18", file0.getParent());
      assertFalse(file0.canExecute());
      assertFalse(file0.canWrite());
      assertEquals("Retrofit-Idle", file0.getName());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/retrofit/2b6c719c6645f8e48dca6d0047c752069d321bc4/evosuite_18/Retrofit-Idle", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertNotNull(file0);
      
      TypedFile typedFile0 = new TypedFile(restAdapter0.THREAD_PREFIX, mockFile0);
      assertTrue(mockFile0.equals((Object)file0));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals("Retrofit-Idle", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals("Retrofit-Idle", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", typedFile0.fileName());
      assertEquals(0L, typedFile0.length());
      assertEquals("Retrofit-", typedFile0.mimeType());
      assertNotNull(typedFile0);
      
      long long0 = 1280L;
      String string1 = "7UAv(#-";
      String string2 = "_\"(";
      String string3 = "\\<1KIyAGqoLq9-";
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      String string4 = ", no static serializer";
      String string5 = "";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(string4, string5, restAdapter0.LOG_CHUNK_SIZE);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals(", no static serializer", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: , no static serializer", sQLTimeoutException0.toString());
      assertEquals("", sQLTimeoutException0.getSQLState());
      assertEquals(4000, sQLTimeoutException0.getErrorCode());
      assertNotNull(sQLTimeoutException0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(string0, sQLTimeoutException0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string2));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals(", no static serializer", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: , no static serializer", sQLTimeoutException0.toString());
      assertEquals("", sQLTimeoutException0.getSQLState());
      assertEquals(4000, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: com.fasterxml.jackson.annotation.JsonTypeInfo$None", sQLTransientConnectionException0.toString());
      assertEquals("com.fasterxml.jackson.annotation.JsonTypeInfo$None", sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNotNull(sQLTransientConnectionException0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(string1, sQLTransientConnectionException0);
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string2));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals(", no static serializer", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: , no static serializer", sQLTimeoutException0.toString());
      assertEquals("", sQLTimeoutException0.getSQLState());
      assertEquals(4000, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: com.fasterxml.jackson.annotation.JsonTypeInfo$None", sQLTransientConnectionException0.toString());
      assertEquals("com.fasterxml.jackson.annotation.JsonTypeInfo$None", sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("7UAv(#-", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: 7UAv(#-", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(string2, string3, int0, hashMap0, sQLFeatureNotSupportedException0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(", no static serializer", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: , no static serializer", sQLTimeoutException0.toString());
      assertEquals("", sQLTimeoutException0.getSQLState());
      assertEquals(4000, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: com.fasterxml.jackson.annotation.JsonTypeInfo$None", sQLTransientConnectionException0.toString());
      assertEquals("com.fasterxml.jackson.annotation.JsonTypeInfo$None", sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("7UAv(#-", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: 7UAv(#-", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("\\<1KIyAGqoLq9-", sQLClientInfoException0.getSQLState());
      assertEquals(500, sQLClientInfoException0.getErrorCode());
      assertEquals("_\"(", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: _\"(", sQLClientInfoException0.toString());
      assertNotNull(sQLClientInfoException0);
      
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(string1, sQLClientInfoException0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(", no static serializer", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: , no static serializer", sQLTimeoutException0.toString());
      assertEquals("", sQLTimeoutException0.getSQLState());
      assertEquals(4000, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: com.fasterxml.jackson.annotation.JsonTypeInfo$None", sQLTransientConnectionException0.toString());
      assertEquals("com.fasterxml.jackson.annotation.JsonTypeInfo$None", sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("7UAv(#-", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: 7UAv(#-", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("\\<1KIyAGqoLq9-", sQLClientInfoException0.getSQLState());
      assertEquals(500, sQLClientInfoException0.getErrorCode());
      assertEquals("_\"(", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: _\"(", sQLClientInfoException0.toString());
      assertNull(sQLTimeoutException1.getSQLState());
      assertEquals("7UAv(#-", sQLTimeoutException1.getMessage());
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: 7UAv(#-", sQLTimeoutException1.toString());
      assertNotNull(sQLTimeoutException1);
      
      String string6 = ")$\"8!A%?A\"f7<Oy\\A@l";
      // Undeclared exception!
      try { 
        restAdapter0.logException(sQLTimeoutException1, string6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertNotNull(restAdapter_LogLevelArray0);
      assertEquals(4, restAdapter_LogLevelArray0.length);
      
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      assertNotNull(threadPoolExecutor_DiscardPolicy0);
      
      Class<Integer> class0 = Integer.TYPE;
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("int", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder0.server, restAdapter_Builder0.clientProvider, restAdapter_Builder0.callbackExecutor, restAdapter_Builder0.callbackExecutor, restAdapter_Builder0.requestInterceptor, restAdapter_Builder0.converter, restAdapter_Builder0.profiler, restAdapter_Builder0.errorHandler, restAdapter_Builder0.log, restAdapter_LogLevel0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      restAdapter0.profiler = restAdapter_Builder0.profiler;
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      
      Class<ClassKey> class1 = ClassKey.class;
      // Undeclared exception!
      try { 
        restAdapter0.create(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only interface endpoint definitions are supported.
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertNotNull(restAdapter_LogLevelArray0);
      assertEquals(4, restAdapter_LogLevelArray0.length);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter_LogLevel0);
      assertTrue(restAdapter_LogLevel0.log());
      
      boolean boolean0 = restAdapter_LogLevel0.log();
      assertTrue(boolean0);
      assertTrue(restAdapter_LogLevel0.log());
      
      String string0 = "Ycw*fx(:>9Zp";
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      ArrayList<Header> arrayList0 = new ArrayList<Header>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      TypedOutput typedOutput0 = null;
      Request request0 = new Request(string0, string0, arrayList0, typedOutput0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("Ycw*fx(:>9Zp", request0.getMethod());
      assertEquals("Ycw*fx(:>9Zp", request0.getUrl());
      assertNotNull(request0);
      
      long long0 = (-2011L);
      RestAdapter restAdapter0 = new RestAdapter();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      // Undeclared exception!
      try { 
        restAdapter0.logAndReplaceRequest(request0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setRequestInterceptor(requestInterceptorTape0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      String string0 = "";
      String string1 = "!i3NO[XC";
      requestInterceptorTape0.addPathParam(string0, string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      Request request0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setClient(restAdapter_Builder0.clientProvider);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Client provider may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setRequestInterceptor(requestInterceptorTape0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      ProtoConverter protoConverter0 = new ProtoConverter();
      assertNotNull(protoConverter0);
      
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertNotNull(restAdapter_LogLevelArray0);
      assertEquals(4, restAdapter_LogLevelArray0.length);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter_LogLevel0);
      assertFalse(restAdapter_LogLevel0.log());
      
      boolean boolean0 = restAdapter_LogLevel0.log();
      assertFalse(boolean0);
      assertFalse(restAdapter_LogLevel0.log());
      
      String string0 = "Ycw*fx(:>9Zp";
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertNotNull(okHttpClient0);
      
      ResponseCache responseCache0 = null;
      OkHttpClient okHttpClient1 = okHttpClient0.setResponseCache(responseCache0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertEquals(0, okHttpClient1.getReadTimeout());
      assertEquals(0, okHttpClient1.getConnectTimeout());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertNotNull(okHttpClient1);
      
      OkClient okClient0 = new OkClient(okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertEquals(0, okHttpClient1.getReadTimeout());
      assertEquals(0, okHttpClient1.getConnectTimeout());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertNotNull(okClient0);
      
      ArrayList<Header> arrayList0 = new ArrayList<Header>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      TypedOutput typedOutput0 = null;
      Request request0 = new Request(string0, string0, arrayList0, typedOutput0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("Ycw*fx(:>9Zp", request0.getMethod());
      assertEquals("Ycw*fx(:>9Zp", request0.getUrl());
      assertNotNull(request0);
      
      try { 
        okClient0.execute(request0);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: Ycw*fx(:>9Zp
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setExecutors(restAdapter_Builder0.callbackExecutor, restAdapter_Builder0.httpExecutor);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // HTTP executor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Profiler<String> profiler0 = (Profiler<String>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setProfiler(profiler0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      OkClient okClient0 = new OkClient();
      assertNotNull(okClient0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient((Client) okClient0);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder2);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setLogLevel(restAdapter_LogLevel0);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder3);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder3.setServer(restAdapter_Builder0.server);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Profiler<String> profiler0 = (Profiler<String>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setProfiler(profiler0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      OkClient okClient0 = new OkClient();
      assertNotNull(okClient0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient((Client) okClient0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder2);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setLogLevel(restAdapter_LogLevel0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder3);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder3.setServer(restAdapter_Builder0.server);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertNotNull(restAdapter_LogLevelArray0);
      assertEquals(4, restAdapter_LogLevelArray0.length);
      
      String string0 = "BASIC";
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.valueOf(string0);
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter_LogLevel0);
      assertTrue(restAdapter_LogLevel0.log());
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.valueOf(string0);
      assertSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter_LogLevel1);
      assertTrue(restAdapter_LogLevel1.log());
      
      Server server0 = new Server(string0, string0);
      assertEquals("BASIC", server0.getName());
      assertEquals("BASIC", server0.getUrl());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int0 = 3037;
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(int0);
      assertNotNull(forkJoinPool0);
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0, server0.DEFAULT_NAME);
      assertEquals("BASIC", server0.getName());
      assertEquals("BASIC", server0.getUrl());
      assertNotNull(gsonConverter0);
      
      Profiler<Header> profiler0 = (Profiler<Header>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel2 = RestAdapter.LogLevel.FULL;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, forkJoinPool0, forkJoinPool0, requestInterceptorTape0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel2);
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel0));
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel1));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("BASIC", server0.getName());
      assertEquals("BASIC", server0.getUrl());
      assertNotNull(restAdapter0);
      
      String string1 = "";
      String string2 = "T<c:tqm~fmYIj#BG(";
      Vector<Header> vector0 = new Vector<Header>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      String string3 = "Div'3v~!W^L";
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)77;
      byteArray0[0] = byte0;
      byte byte1 = (byte)91;
      byteArray0[1] = byte1;
      byte byte2 = (byte)11;
      byteArray0[2] = byte2;
      byte byte3 = (byte)95;
      byteArray0[3] = byte3;
      byte byte4 = (byte)4;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-89);
      byteArray0[5] = byte5;
      TypedByteArray typedByteArray0 = new TypedByteArray(string3, byteArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertArrayEquals(new byte[] {(byte)77, (byte)91, (byte)11, (byte)95, (byte)4, (byte) (-89)}, byteArray0);
      assertEquals("Div'3v~!W^L", typedByteArray0.mimeType());
      assertEquals(6L, typedByteArray0.length());
      assertNull(typedByteArray0.fileName());
      assertNotNull(typedByteArray0);
      assertEquals(6, byteArray0.length);
      
      Response response0 = new Response(int0, string2, vector0, typedByteArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertArrayEquals(new byte[] {(byte)77, (byte)91, (byte)11, (byte)95, (byte)4, (byte) (-89)}, byteArray0);
      assertEquals("Div'3v~!W^L", typedByteArray0.mimeType());
      assertEquals(6L, typedByteArray0.length());
      assertNull(typedByteArray0.fileName());
      assertEquals(3037, response0.getStatus());
      assertEquals("T<c:tqm~fmYIj#BG(", response0.getReason());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(response0);
      assertEquals(6, byteArray0.length);
      
      long long0 = (-1L);
      Response response1 = restAdapter0.logAndReplaceResponse(string1, response0, long0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertSame(response0, response1);
      assertSame(response1, response0);
      assertNotSame(restAdapter_LogLevel2, restAdapter_LogLevel0);
      assertNotSame(restAdapter_LogLevel2, restAdapter_LogLevel1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel0));
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertArrayEquals(new byte[] {(byte)77, (byte)91, (byte)11, (byte)95, (byte)4, (byte) (-89)}, byteArray0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Div'3v~!W^L", typedByteArray0.mimeType());
      assertEquals(6L, typedByteArray0.length());
      assertNull(typedByteArray0.fileName());
      assertEquals(3037, response0.getStatus());
      assertEquals("T<c:tqm~fmYIj#BG(", response0.getReason());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(3037, response1.getStatus());
      assertEquals("T<c:tqm~fmYIj#BG(", response1.getReason());
      assertEquals("BASIC", server0.getName());
      assertEquals("BASIC", server0.getUrl());
      assertNotNull(response1);
      assertEquals(6, byteArray0.length);
      
      long long1 = 0L;
      Response response2 = restAdapter0.logAndReplaceResponse(string0, response1, long1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertSame(response0, response2);
      assertSame(response0, response1);
      assertSame(response1, response2);
      assertSame(response1, response0);
      assertSame(response2, response1);
      assertSame(response2, response0);
      assertNotSame(restAdapter_LogLevel2, restAdapter_LogLevel0);
      assertNotSame(restAdapter_LogLevel2, restAdapter_LogLevel1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel0));
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertArrayEquals(new byte[] {(byte)77, (byte)91, (byte)11, (byte)95, (byte)4, (byte) (-89)}, byteArray0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals("Div'3v~!W^L", typedByteArray0.mimeType());
      assertEquals(6L, typedByteArray0.length());
      assertNull(typedByteArray0.fileName());
      assertEquals(3037, response0.getStatus());
      assertEquals("T<c:tqm~fmYIj#BG(", response0.getReason());
      assertEquals(3037, response1.getStatus());
      assertEquals("T<c:tqm~fmYIj#BG(", response1.getReason());
      assertEquals("BASIC", server0.getName());
      assertEquals("BASIC", server0.getUrl());
      assertEquals("T<c:tqm~fmYIj#BG(", response2.getReason());
      assertEquals(3037, response2.getStatus());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(response2);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLog(restAdapter_Log0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      String string0 = "N;BoL2T5m,s";
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder0.setServer(string0);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder2);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder1.setRequestInterceptor(requestInterceptor0);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder3);
      
      int int0 = 3;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setExecutors(scheduledThreadPoolExecutor0, restAdapter_Builder0.callbackExecutor);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertNotNull(restAdapter_Builder4);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder4.setProfiler(restAdapter_Builder1.profiler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Profiler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      RestAdapter restAdapter0 = new RestAdapter();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      int int0 = 0;
      restAdapter0.getLogLevel();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNull(restAdapter0.getLogLevel());
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setConverter(restAdapter0.converter);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Converter may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertNotNull(restAdapter_LogLevelArray0);
      assertEquals(4, restAdapter_LogLevelArray0.length);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string1 = null;
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-25);
      byteArray0[0] = byte0;
      byte byte1 = (byte)104;
      byteArray0[1] = byte1;
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient(client_Provider0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      byte byte2 = (byte) (-48);
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-27);
      byteArray0[3] = byte3;
      boolean boolean1 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-25), (byte)104, (byte) (-48), (byte) (-27)}, byteArray0);
      assertFalse(boolean1);
      assertEquals(4, byteArray0.length);
      
      Server server0 = new Server(string1);
      assertEquals("default", server0.getName());
      assertNull(server0.getUrl());
      assertNotNull(server0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder0.setServer(server0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertEquals("default", server0.getName());
      assertNull(server0.getUrl());
      assertNotNull(restAdapter_Builder2);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder2.setErrorHandler(restAdapter_Builder0.errorHandler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Error handler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertNotNull(restAdapter_LogLevelArray0);
      assertEquals(4, restAdapter_LogLevelArray0.length);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "Fs'";
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      assertNotNull(forkJoinPool0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setExecutors(forkJoinPool0, forkJoinPool0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      restAdapter_Builder1.log = restAdapter_Builder0.log;
      String string1 = "N)k";
      boolean boolean0 = forkJoinPool0.isTerminated();
      assertFalse(boolean0);
      
      Server server0 = new Server(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("Fs'", server0.getUrl());
      assertEquals("N)k", server0.getName());
      assertNotNull(server0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setLog(restAdapter_Builder1.log);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Log may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLog(restAdapter_Log0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setRequestInterceptor(restAdapter_Builder0.requestInterceptor);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Request interceptor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertNotNull(restAdapter_LogLevelArray0);
      assertEquals(4, restAdapter_LogLevelArray0.length);
      
      RestAdapter restAdapter0 = new RestAdapter();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Class<Header> class0 = Header.class;
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter_RestHandler0);
      
      RestAdapter.RestHandler restAdapter_RestHandler1 = restAdapter0.new RestHandler();
      assertFalse(restAdapter_RestHandler1.equals((Object)restAdapter_RestHandler0));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter_RestHandler1);
      
      RestMethodInfo restMethodInfo0 = null;
      // Undeclared exception!
      try { 
        restAdapter_RestHandler1.invokeRequest(restAdapter0.requestInterceptor, restMethodInfo0, restAdapter_LogLevelArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter$RestHandler", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertNotNull(restAdapter_LogLevelArray0);
      assertEquals(4, restAdapter_LogLevelArray0.length);
      
      String string0 = "";
      RestMethodInfo restMethodInfo0 = null;
      Request request0 = null;
      // Undeclared exception!
      try { 
        RestAdapter.getRequestInfo(string0, restMethodInfo0, request0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient(client_Provider0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      String string0 = "NL^#7W&.y";
      restAdapter_Log0.log(string0);
      String string1 = "";
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setServer(string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be blank.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Profiler<Integer> profiler0 = (Profiler<Integer>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setProfiler(profiler0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setClient(restAdapter_Builder0.clientProvider);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Client provider may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      int int0 = 1338;
      Random.setNextRandom(int0);
      String string0 = "NA:sr})luX7";
      Server server0 = new Server(string0, string0);
      assertEquals("NA:sr})luX7", server0.getName());
      assertEquals("NA:sr})luX7", server0.getUrl());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      assertNotNull(forkJoinPool_ForkJoinWorkerThreadFactory0);
      
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = MockThread.getDefaultUncaughtExceptionHandler();
      assertNull(thread_UncaughtExceptionHandler0);
      
      boolean boolean0 = false;
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(int0, forkJoinPool_ForkJoinWorkerThreadFactory0, thread_UncaughtExceptionHandler0, boolean0);
      assertNotNull(forkJoinPool0);
      
      RequestInterceptor requestInterceptor0 = null;
      Converter converter0 = null;
      Profiler<String> profiler0 = (Profiler<String>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, forkJoinPool0, forkJoinPool0, requestInterceptor0, converter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals("NA:sr})luX7", server0.getName());
      assertEquals("NA:sr})luX7", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals("NA:sr})luX7", server0.getName());
      assertEquals("NA:sr})luX7", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter_RestHandler0);
      
      Object object0 = null;
      Method method0 = null;
      Object[] objectArray0 = null;
      try { 
        restAdapter_RestHandler0.invoke(object0, method0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter$RestHandler", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setRequestInterceptor(requestInterceptor0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      UrlConnectionClient urlConnectionClient0 = new UrlConnectionClient();
      assertNotNull(urlConnectionClient0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient((Client) urlConnectionClient0);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertNotNull(restAdapter_Builder2);
      
      String string0 = "2FCho#3d@R1`b.qSw";
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setServer(string0);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertNotNull(restAdapter_Builder3);
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      assertNotNull(forkJoinPool0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setExecutors(forkJoinPool0, forkJoinPool0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      Profiler<Canvas.VertexMode> profiler0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setProfiler(profiler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Profiler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      String string0 = "vH`eXdQX#L(";
      restAdapter_Log0.log(string0);
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      ApacheClient apacheClient0 = new ApacheClient();
      assertNotNull(apacheClient0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient((Client) apacheClient0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setExecutors(restAdapter_Builder0.callbackExecutor, restAdapter_Builder0.httpExecutor);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // HTTP executor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "";
      String string1 = "$VALUES";
      Server server0 = new Server(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", server0.getUrl());
      assertEquals("$VALUES", server0.getName());
      assertNotNull(server0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", server0.getUrl());
      assertEquals("$VALUES", server0.getName());
      assertNotNull(restAdapter_Builder1);
      
      OkClient okClient0 = new OkClient();
      assertNotNull(okClient0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient((Client) okClient0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", server0.getUrl());
      assertEquals("$VALUES", server0.getName());
      assertNotNull(restAdapter_Builder2);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setLogLevel(restAdapter_Builder0.logLevel);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", server0.getUrl());
      assertEquals("$VALUES", server0.getName());
      assertNotNull(restAdapter_Builder3);
      
      RestAdapter restAdapter0 = restAdapter_Builder3.build();
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals("", server0.getUrl());
      assertEquals("$VALUES", server0.getName());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      Class<Runnable> class0 = Runnable.class;
      Runnable runnable0 = restAdapter0.create(class0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals("", server0.getUrl());
      assertEquals("$VALUES", server0.getName());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(runnable0);
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      RestAdapter restAdapter0 = new RestAdapter();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      int int0 = (-1583);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(restAdapter0.IDLE_THREAD_NAME, restAdapter0.THREAD_PREFIX, int0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNull(restAdapter0.getLogLevel());
      assertEquals((-1583), sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("Retrofit-Idle", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: Retrofit-Idle", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("Retrofit-", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      String string0 = "com.fasterxml.jackson.databind.JsonMappingException";
      // Undeclared exception!
      try { 
        restAdapter0.logException(sQLInvalidAuthorizationSpecException0, string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      restAdapter_Builder0.ensureSaneDefaults();
      OkClient okClient0 = new OkClient();
      assertNotNull(okClient0);
      
      Request request0 = null;
      // Undeclared exception!
      try { 
        okClient0.execute(request0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.client.OkClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setRequestInterceptor(requestInterceptor0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setErrorHandler(restAdapter_Builder0.errorHandler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Error handler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertNotNull(okHttpClient0);
      
      OkClient okClient0 = new OkClient(okHttpClient0);
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertNotNull(okClient0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient((Client) okClient0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertNotNull(restAdapter_Builder1);
      
      Server server0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setServer(server0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Profiler<Object> profiler0 = (Profiler<Object>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setProfiler(profiler0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      int int0 = 4098;
      long long0 = 1012L;
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      int int1 = 562;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int1);
      assertFalse(int1 == int0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      BlockingQueue<Runnable> blockingQueue0 = scheduledThreadPoolExecutor0.getQueue();
      assertFalse(int1 == int0);
      assertNotNull(blockingQueue0);
      
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(int0, int0, long0, timeUnit0, blockingQueue0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(threadPoolExecutor0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertNotNull(gsonConverter0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder0.server, restAdapter_Builder0.clientProvider, restAdapter_Builder0.httpExecutor, threadPoolExecutor0, restAdapter_Builder0.requestInterceptor, gsonConverter0, restAdapter_Builder0.profiler, restAdapter_Builder0.errorHandler, restAdapter_Builder0.log, restAdapter_LogLevel0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(restAdapter0.THREAD_PREFIX);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: Retrofit-", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("Retrofit-", sQLTransactionRollbackException0.getMessage());
      assertNotNull(sQLTransactionRollbackException0);
      
      String string0 = "Only interface endpoint definitions are supported.";
      // Undeclared exception!
      try { 
        restAdapter0.logException(sQLTransactionRollbackException0, string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter_LogLevel0);
      assertTrue(restAdapter_LogLevel0.log());
      
      boolean boolean0 = restAdapter_LogLevel0.log();
      assertTrue(boolean0);
      assertTrue(restAdapter_LogLevel0.log());
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.BASIC;
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLogLevel(restAdapter_LogLevel1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setClient(restAdapter_Builder0.clientProvider);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Client provider may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLog(restAdapter_Log0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      String string0 = "---- ERROR %s";
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(string0);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertNotNull(restAdapter_Builder2);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setLogLevel(restAdapter_LogLevel0);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder3);
      
      RestAdapter restAdapter0 = restAdapter_Builder3.build();
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter_RestHandler0);
      
      HttpClient httpClient0 = null;
      ApacheClient apacheClient0 = new ApacheClient(httpClient0);
      assertNotNull(apacheClient0);
      
      WireConverter wireConverter0 = new WireConverter();
      assertNotNull(wireConverter0);
      
      Method method0 = null;
      RestMethodInfo restMethodInfo0 = null;
      try {
        restMethodInfo0 = new RestMethodInfo(method0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestMethodInfo", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setServer(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be blank.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setErrorHandler(errorHandler0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      Client client0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setClient(client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Client may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      RestAdapter restAdapter0 = new RestAdapter();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      String string0 = "D h";
      Vector<Header> vector0 = new Vector<Header>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      String string1 = "";
      TypedString typedString0 = new TypedString(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0L, typedString0.length());
      assertNull(typedString0.fileName());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNotNull(typedString0);
      
      Request request0 = new Request(string0, restAdapter0.THREAD_PREFIX, vector0, typedString0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNull(restAdapter0.getLogLevel());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0L, typedString0.length());
      assertNull(typedString0.fileName());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals("D h", request0.getMethod());
      assertEquals("Retrofit-", request0.getUrl());
      assertNotNull(request0);
      
      // Undeclared exception!
      try { 
        restAdapter0.logAndReplaceRequest(request0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLogLevel(restAdapter_LogLevel0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder0.setLog(restAdapter_Log0);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder2);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setServer(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be blank.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "HIz6-U";
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(string0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setConverter(restAdapter_Builder0.converter);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Converter may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      WireConverter wireConverter0 = new WireConverter();
      assertNotNull(wireConverter0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setConverter(wireConverter0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setProfiler(restAdapter_Builder0.profiler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Profiler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      RestAdapter restAdapter0 = new RestAdapter();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        restAdapter0.create(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only interface endpoint definitions are supported.
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      String string0 = null;
      String string1 = "y&>QY0";
      Server server0 = new Server(string0, string1);
      assertNull(server0.getUrl());
      assertEquals("y&>QY0", server0.getName());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      assertNotNull(forkJoinPool0);
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0, server0.DEFAULT_NAME);
      assertNull(server0.getUrl());
      assertEquals("y&>QY0", server0.getName());
      assertNotNull(gsonConverter0);
      
      Profiler<Canvas.VertexMode> profiler0 = null;
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, forkJoinPool0, forkJoinPool0, requestInterceptorTape0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNull(server0.getUrl());
      assertEquals("y&>QY0", server0.getName());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        restAdapter0.create(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only interface endpoint definitions are supported.
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter_LogLevel0);
      assertFalse(restAdapter_LogLevel0.log());
      
      boolean boolean0 = restAdapter_LogLevel0.log();
      assertFalse(boolean0);
      assertFalse(restAdapter_LogLevel0.log());
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "android.intent.category.APP_MARKET";
      Server server0 = new Server(string0);
      assertEquals("android.intent.category.APP_MARKET", server0.getUrl());
      assertEquals("default", server0.getName());
      assertNotNull(server0);
      
      restAdapter_Builder0.server = server0;
      assertEquals("android.intent.category.APP_MARKET", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", restAdapter_Builder0.server.getName());
      assertEquals("android.intent.category.APP_MARKET", restAdapter_Builder0.server.getUrl());
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setRequestInterceptor(requestInterceptor0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      RestAdapter restAdapter0 = restAdapter_Builder1.build();
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter_RestHandler0);
      
      boolean boolean1 = restAdapter_Builder1.logLevel.log();
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      restAdapter_Builder0.requestInterceptor = requestInterceptor0;
      String string1 = "m^%Y_gTWUc\"WfxK";
      LinkedList<Header> linkedList0 = new LinkedList<Header>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string2 = "Retrofit-";
      String string3 = "sWGCU!:66D\\T";
      String string4 = "retrofit.RestAdapter$Builder";
      MockFile mockFile0 = new MockFile(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(mockFile0);
      
      File file0 = MockFile.createTempFile(string2, string3, (File) mockFile0);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string4);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("retrofit.RestAdapter$Builder", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals("retrofit.RestAdapter$Builder", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/retrofit/2b6c719c6645f8e48dca6d0047c752069d321bc4/evosuite_18/retrofit.RestAdapter$Builder/Retrofit-0sWGCU!:66D\\T", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals("Retrofit-0sWGCU!:66D\\T", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/retrofit/2b6c719c6645f8e48dca6d0047c752069d321bc4/evosuite_18/retrofit.RestAdapter$Builder", file0.getParent());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertNotNull(file0);
      
      TypedFile typedFile0 = new TypedFile(string1, file0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("retrofit.RestAdapter$Builder", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals("retrofit.RestAdapter$Builder", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/retrofit/2b6c719c6645f8e48dca6d0047c752069d321bc4/evosuite_18/retrofit.RestAdapter$Builder/Retrofit-0sWGCU!:66D\\T", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals("Retrofit-0sWGCU!:66D\\T", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/retrofit/2b6c719c6645f8e48dca6d0047c752069d321bc4/evosuite_18/retrofit.RestAdapter$Builder", file0.getParent());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, typedFile0.length());
      assertEquals("m^%Y_gTWUc\"WfxK", typedFile0.mimeType());
      assertEquals("Retrofit-0sWGCU!:66D\\T", typedFile0.fileName());
      assertNotNull(typedFile0);
      
      String string5 = "gbq7bC\\Zz ";
      MockFile mockFile1 = new MockFile(restAdapter_Builder0.server.DEFAULT_NAME);
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(mockFile1.equals((Object)file0));
      assertNotNull(mockFile1);
      
      TypedFile typedFile1 = new TypedFile(string5, mockFile1);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(mockFile1.equals((Object)file0));
      assertFalse(typedFile1.equals((Object)typedFile0));
      assertEquals("default", mockFile1.getName());
      assertFalse(mockFile1.exists());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals("default", mockFile1.toString());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertNull(mockFile1.getParent());
      assertFalse(mockFile1.isHidden());
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile1.canExecute());
      assertFalse(mockFile1.canWrite());
      assertFalse(mockFile1.isAbsolute());
      assertEquals(0L, mockFile1.length());
      assertTrue(mockFile1.isFile());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("gbq7bC\\Zz ", typedFile1.mimeType());
      assertEquals(0L, typedFile1.length());
      assertEquals("default", typedFile1.fileName());
      assertNotNull(typedFile1);
      
      InputStream inputStream0 = typedFile0.in();
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string5);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(file0, mockFile0);
      assertNotSame(file0, mockFile1);
      assertNotSame(typedFile0, typedFile1);
      assertNotSame(string1, string5);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string4);
      assertNotSame(string2, string5);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string5);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(file0.equals((Object)mockFile1));
      assertFalse(typedFile0.equals((Object)typedFile1));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("retrofit.RestAdapter$Builder", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals("retrofit.RestAdapter$Builder", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/retrofit/2b6c719c6645f8e48dca6d0047c752069d321bc4/evosuite_18/retrofit.RestAdapter$Builder/Retrofit-0sWGCU!:66D\\T", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals("Retrofit-0sWGCU!:66D\\T", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/retrofit/2b6c719c6645f8e48dca6d0047c752069d321bc4/evosuite_18/retrofit.RestAdapter$Builder", file0.getParent());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, typedFile0.length());
      assertEquals("m^%Y_gTWUc\"WfxK", typedFile0.mimeType());
      assertEquals("Retrofit-0sWGCU!:66D\\T", typedFile0.fileName());
      assertEquals(0, inputStream0.available());
      assertNotNull(inputStream0);
      
      try { 
        typedFile0.moveTo(typedFile1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Type mismatch.
         //
         verifyException("retrofit.mime.TypedFile", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      ApacheClient apacheClient0 = new ApacheClient();
      assertNotNull(apacheClient0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient((Client) apacheClient0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient(restAdapter_Builder0.clientProvider);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder2);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setLogLevel(restAdapter_LogLevel0);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertNotNull(restAdapter_Builder3);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder3.setRequestInterceptor(restAdapter_Builder1.requestInterceptor);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Request interceptor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "HUYjPwQ^*d";
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(string0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setLog(restAdapter_Builder0.log);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Log may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      RestAdapter restAdapter0 = new RestAdapter();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      RestAdapter.THREAD_PREFIX = restAdapter0.THREAD_PREFIX;
      assertNull(restAdapter0.getLogLevel());
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      // Undeclared exception!
      try { 
        restAdapter0.setLogLevel(restAdapter_LogLevel0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Log level may not be null.
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter restAdapter0 = new RestAdapter();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      restAdapter0.logLevel = restAdapter_LogLevel0;
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertTrue(restAdapter0.logLevel.log());
      
      ForkJoinPool forkJoinPool0 = ForkJoinTask.getPool();
      assertNull(forkJoinPool0);
      
      restAdapter0.httpExecutor = (Executor) forkJoinPool0;
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      restAdapter0.server = restAdapter_Builder0.server;
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      
      restAdapter_Log0.log(restAdapter0.THREAD_PREFIX);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      
      restAdapter_Builder0.ensureSaneDefaults();
      Class<Runnable> class0 = Runnable.class;
      Runnable runnable0 = restAdapter0.create(class0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertNotNull(runnable0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLog(restAdapter_Log0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      restAdapter_Builder0.ensureSaneDefaults();
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      String string0 = "com.fasterxml.jackson.annotation.JsonTypeInfo$None";
      int int0 = 500;
      String string1 = "/y.*tATtD*";
      List<Header> list0 = null;
      MockFile mockFile0 = new MockFile(string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(mockFile0);
      
      TypedFile typedFile0 = new TypedFile(restAdapter0.THREAD_PREFIX, mockFile0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("/", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("y.*tATtD*", mockFile0.getName());
      assertEquals("/y.*tATtD*", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals("y.*tATtD*", typedFile0.fileName());
      assertEquals(0L, typedFile0.length());
      assertEquals("Retrofit-", typedFile0.mimeType());
      assertNotNull(typedFile0);
      
      Response response0 = null;
      try {
        response0 = new Response(int0, string1, list0, typedFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // headers == null
         //
         verifyException("retrofit.client.Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLog(restAdapter_Log0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      String string0 = "N;BoL2T5m,s";
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder0.setServer(string0);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder2);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder1.setRequestInterceptor(requestInterceptor0);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertNotNull(restAdapter_Builder3);
      
      int int0 = 0;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadFactory0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setExecutors(scheduledThreadPoolExecutor0, restAdapter_Builder0.callbackExecutor);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertNotNull(restAdapter_Builder4);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder4.setProfiler(restAdapter_Builder1.profiler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Profiler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      RestAdapter restAdapter0 = new RestAdapter();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      restAdapter0.logLevel = restAdapter_LogLevel0;
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertFalse(restAdapter0.logLevel.log());
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.BASIC;
      restAdapter0.setLogLevel(restAdapter_LogLevel1);
      assertNotSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      restAdapter0.clientProvider = client_Provider0;
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertNotNull(restAdapter_LogLevelArray0);
      assertEquals(4, restAdapter_LogLevelArray0.length);
      
      RestAdapter.LogLevel restAdapter_LogLevel2 = restAdapter0.getLogLevel();
      assertSame(restAdapter_LogLevel2, restAdapter_LogLevel1);
      assertNotSame(restAdapter_LogLevel2, restAdapter_LogLevel0);
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel0));
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter_LogLevel2);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertTrue(restAdapter_LogLevel2.log());
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter_LogLevel0);
      assertTrue(restAdapter_LogLevel0.log());
      
      boolean boolean0 = restAdapter_LogLevel0.log();
      assertTrue(boolean0);
      assertTrue(restAdapter_LogLevel0.log());
      
      String string0 = "Profiler may not be null.";
      String string1 = "Zz]sV)&j(@82@R/WIX";
      Server server0 = new Server(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("Zz]sV)&j(@82@R/WIX", server0.getName());
      assertEquals("Profiler may not be null.", server0.getUrl());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int0 = 1001;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      LinkedBlockingQueue<Runnable> linkedBlockingQueue0 = new LinkedBlockingQueue<Runnable>();
      assertNotNull(linkedBlockingQueue0);
      
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(int0, int0, int0, timeUnit0, linkedBlockingQueue0);
      assertNotNull(threadPoolExecutor0);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      TimeUnit timeUnit1 = TimeUnit.DAYS;
      long long0 = threadPoolExecutor0.getKeepAliveTime(timeUnit1);
      assertFalse(timeUnit0.equals((Object)timeUnit1));
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      assertEquals(0L, long0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0, string0);
      assertFalse(string0.equals((Object)string1));
      assertNotNull(gsonConverter0);
      
      String string2 = gson0.toString();
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      Profiler<String> profiler0 = (Profiler<String>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.NONE;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, threadPoolExecutor0, threadPoolExecutor0, requestInterceptor0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(timeUnit0.equals((Object)timeUnit1));
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Zz]sV)&j(@82@R/WIX", server0.getName());
      assertEquals("Profiler may not be null.", server0.getUrl());
      assertNotNull(restAdapter0);
      
      Throwable throwable0 = null;
      restAdapter0.logException(throwable0, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(timeUnit0.equals((Object)timeUnit1));
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Zz]sV)&j(@82@R/WIX", server0.getName());
      assertEquals("Profiler may not be null.", server0.getUrl());
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      Server server0 = null;
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int0 = 300;
      int int1 = 1884;
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      SynchronousQueue<Runnable> synchronousQueue0 = new SynchronousQueue<Runnable>();
      assertNotNull(synchronousQueue0);
      
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      assertNotNull(threadPoolExecutor_CallerRunsPolicy0);
      
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(int0, int1, int1, timeUnit0, synchronousQueue0, threadPoolExecutor_CallerRunsPolicy0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(threadPoolExecutor0);
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertNotNull(gsonConverter0);
      
      Profiler<String> profiler0 = (Profiler<String>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Log restAdapter_Log0 = null;
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, threadPoolExecutor0, threadPoolExecutor0, requestInterceptorTape0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = restAdapter0.getLogLevel();
      assertSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter_LogLevel1);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertTrue(restAdapter_LogLevel1.log());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      RestAdapter restAdapter0 = new RestAdapter();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      String string0 = "";
      String string1 = "44<1:CwX1IY`rgdE";
      LinkedList<Header> linkedList0 = new LinkedList<Header>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string2 = "android.intent.action.MEDIA_BUTTON";
      int int0 = 1003;
      String string3 = "Log may not be null.";
      String string4 = null;
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-116);
      byteArray0[0] = byte0;
      byte byte1 = (byte)109;
      byteArray0[1] = byte1;
      byte byte2 = (byte)76;
      byteArray0[2] = byte2;
      TypedByteArray typedByteArray0 = new TypedByteArray(string4, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-116), (byte)109, (byte)76}, byteArray0);
      assertEquals(3L, typedByteArray0.length());
      assertEquals("application/unknown", typedByteArray0.mimeType());
      assertNull(typedByteArray0.fileName());
      assertNotNull(typedByteArray0);
      assertEquals(3, byteArray0.length);
      
      Response response0 = new Response(int0, string3, linkedList0, typedByteArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte) (-116), (byte)109, (byte)76}, byteArray0);
      assertEquals(1003, response0.getStatus());
      assertEquals("Log may not be null.", response0.getReason());
      assertEquals(0, linkedList0.size());
      assertEquals(3L, typedByteArray0.length());
      assertEquals("application/unknown", typedByteArray0.mimeType());
      assertNull(typedByteArray0.fileName());
      assertNotNull(response0);
      assertEquals(3, byteArray0.length);
      
      // Undeclared exception!
      try { 
        restAdapter0.logAndReplaceResponse(string2, response0, byte0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      RestAdapter restAdapter0 = new RestAdapter();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      int int0 = 0;
      restAdapter0.getLogLevel();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNull(restAdapter0.getLogLevel());
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setConverter(restAdapter0.converter);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Converter may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      String string0 = "http://xmlpull.org/v1/doc/features.html#validation";
      Server server0 = new Server(string0);
      assertEquals("default", server0.getName());
      assertEquals("http://xmlpull.org/v1/doc/features.html#validation", server0.getUrl());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int0 = 19;
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(int0);
      assertNotNull(forkJoinPool0);
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      WireConverter wireConverter0 = new WireConverter();
      assertNotNull(wireConverter0);
      
      Profiler<Bitmap> profiler0 = (Profiler<Bitmap>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, forkJoinPool0, forkJoinPool0, requestInterceptorTape0, wireConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals("default", server0.getName());
      assertEquals("http://xmlpull.org/v1/doc/features.html#validation", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = restAdapter0.getLogLevel();
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter_LogLevel1);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals("default", server0.getName());
      assertEquals("http://xmlpull.org/v1/doc/features.html#validation", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertFalse(restAdapter_LogLevel1.log());
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertNotNull(restAdapter_LogLevelArray0);
      assertEquals(4, restAdapter_LogLevelArray0.length);
      
      String string0 = "BASIC";
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.valueOf(string0);
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter_LogLevel0);
      assertTrue(restAdapter_LogLevel0.log());
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.valueOf(string0);
      assertSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter_LogLevel1);
      assertTrue(restAdapter_LogLevel1.log());
      
      Server server0 = new Server(string0, string0);
      assertEquals("BASIC", server0.getName());
      assertEquals("BASIC", server0.getUrl());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int0 = 3037;
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(int0);
      assertNotNull(forkJoinPool0);
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0, server0.DEFAULT_NAME);
      assertEquals("BASIC", server0.getName());
      assertEquals("BASIC", server0.getUrl());
      assertNotNull(gsonConverter0);
      
      Profiler<Header> profiler0 = (Profiler<Header>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel2 = RestAdapter.LogLevel.FULL;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, forkJoinPool0, forkJoinPool0, requestInterceptorTape0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel2);
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel0));
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel1));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("BASIC", server0.getName());
      assertEquals("BASIC", server0.getUrl());
      assertNotNull(restAdapter0);
      
      String string1 = "";
      String string2 = "T<c:tqm~fmYIj#BG(";
      Vector<Header> vector0 = new Vector<Header>();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      String string3 = "Div'3v~!W^L";
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)76;
      byteArray0[0] = byte0;
      byte byte1 = (byte)91;
      byteArray0[1] = byte1;
      byte byte2 = (byte)11;
      byteArray0[2] = byte2;
      byte byte3 = (byte)95;
      byteArray0[3] = byte3;
      byte byte4 = (byte)4;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-116);
      byteArray0[5] = byte5;
      TypedByteArray typedByteArray0 = new TypedByteArray(string3, byteArray0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)76, (byte)91, (byte)11, (byte)95, (byte)4, (byte) (-116)}, byteArray0);
      assertEquals("Div'3v~!W^L", typedByteArray0.mimeType());
      assertEquals(6L, typedByteArray0.length());
      assertNull(typedByteArray0.fileName());
      assertNotNull(typedByteArray0);
      assertEquals(6, byteArray0.length);
      
      Response response0 = new Response(int0, string2, vector0, typedByteArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)76, (byte)91, (byte)11, (byte)95, (byte)4, (byte) (-116)}, byteArray0);
      assertEquals("Div'3v~!W^L", typedByteArray0.mimeType());
      assertEquals(6L, typedByteArray0.length());
      assertNull(typedByteArray0.fileName());
      assertEquals("T<c:tqm~fmYIj#BG(", response0.getReason());
      assertEquals(3037, response0.getStatus());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertNotNull(response0);
      assertEquals(6, byteArray0.length);
      
      long long0 = (-1L);
      Response response1 = restAdapter0.logAndReplaceResponse(string1, response0, long0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertSame(response0, response1);
      assertSame(response1, response0);
      assertNotSame(restAdapter_LogLevel2, restAdapter_LogLevel0);
      assertNotSame(restAdapter_LogLevel2, restAdapter_LogLevel1);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel0));
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel1));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)76, (byte)91, (byte)11, (byte)95, (byte)4, (byte) (-116)}, byteArray0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Div'3v~!W^L", typedByteArray0.mimeType());
      assertEquals(6L, typedByteArray0.length());
      assertNull(typedByteArray0.fileName());
      assertEquals("T<c:tqm~fmYIj#BG(", response0.getReason());
      assertEquals(3037, response0.getStatus());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(3037, response1.getStatus());
      assertEquals("T<c:tqm~fmYIj#BG(", response1.getReason());
      assertEquals("BASIC", server0.getName());
      assertEquals("BASIC", server0.getUrl());
      assertNotNull(response1);
      assertEquals(6, byteArray0.length);
      
      long long1 = 0L;
      Response response2 = restAdapter0.logAndReplaceResponse(string0, response1, long1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertSame(response0, response1);
      assertSame(response0, response2);
      assertSame(response1, response2);
      assertSame(response1, response0);
      assertSame(response2, response0);
      assertSame(response2, response1);
      assertNotSame(restAdapter_LogLevel2, restAdapter_LogLevel0);
      assertNotSame(restAdapter_LogLevel2, restAdapter_LogLevel1);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel0));
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel1));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)76, (byte)91, (byte)11, (byte)95, (byte)4, (byte) (-116)}, byteArray0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals("Div'3v~!W^L", typedByteArray0.mimeType());
      assertEquals(6L, typedByteArray0.length());
      assertNull(typedByteArray0.fileName());
      assertEquals("T<c:tqm~fmYIj#BG(", response0.getReason());
      assertEquals(3037, response0.getStatus());
      assertEquals(3037, response1.getStatus());
      assertEquals("T<c:tqm~fmYIj#BG(", response1.getReason());
      assertEquals("BASIC", server0.getName());
      assertEquals("BASIC", server0.getUrl());
      assertEquals(3037, response2.getStatus());
      assertEquals("T<c:tqm~fmYIj#BG(", response2.getReason());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertNotNull(response2);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 11000)
  public void test57()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertNotNull(restAdapter_LogLevelArray0);
      assertEquals(4, restAdapter_LogLevelArray0.length);
      
      String string0 = "BASIC";
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.valueOf(string0);
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter_LogLevel0);
      assertTrue(restAdapter_LogLevel0.log());
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.valueOf(string0);
      assertSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter_LogLevel1);
      assertTrue(restAdapter_LogLevel1.log());
      
      Server server0 = new Server(string0, string0);
      assertEquals("BASIC", server0.getName());
      assertEquals("BASIC", server0.getUrl());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int0 = 3037;
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(int0);
      assertNotNull(forkJoinPool0);
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0, server0.DEFAULT_NAME);
      assertEquals("BASIC", server0.getName());
      assertEquals("BASIC", server0.getUrl());
      assertNotNull(gsonConverter0);
      
      Profiler<Header> profiler0 = (Profiler<Header>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel2 = RestAdapter.LogLevel.FULL;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, forkJoinPool0, forkJoinPool0, requestInterceptorTape0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel2);
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel0));
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel1));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("BASIC", server0.getName());
      assertEquals("BASIC", server0.getUrl());
      assertNotNull(restAdapter0);
      
      String string1 = "T<c:tqm~fmYIj#BG(";
      Vector<Header> vector0 = new Vector<Header>();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      String string2 = "Div'3v~!W^L";
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)76;
      byteArray0[0] = byte0;
      byte byte1 = (byte)91;
      byteArray0[1] = byte1;
      byteArray0[2] = byteArray0[0];
      byte byte2 = (byte)95;
      byteArray0[3] = byte2;
      String string3 = "-#]8H";
      Header header0 = new Header(restAdapter0.IDLE_THREAD_NAME, string3);
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel0));
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("BASIC", server0.getName());
      assertEquals("BASIC", server0.getUrl());
      assertEquals("-#]8H", header0.getValue());
      assertEquals("Retrofit-Idle", header0.getName());
      assertNotNull(header0);
      
      boolean boolean1 = vector0.add(header0);
      assertNotSame(restAdapter_LogLevel2, restAdapter_LogLevel0);
      assertNotSame(restAdapter_LogLevel2, restAdapter_LogLevel1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertTrue(vector0.contains(header0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel0));
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertFalse(vector0.isEmpty());
      assertEquals("[Retrofit-Idle: -#]8H]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("BASIC", server0.getName());
      assertEquals("BASIC", server0.getUrl());
      assertEquals("-#]8H", header0.getValue());
      assertEquals("Retrofit-Idle", header0.getName());
      
      byte byte3 = (byte)4;
      byteArray0[4] = byte3;
      byte byte4 = (byte) (-116);
      TypedByteArray typedByteArray0 = new TypedByteArray(string2, byteArray0);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte)76, (byte)91, (byte)76, (byte)95, (byte)4, (byte)0}, byteArray0);
      assertEquals("Div'3v~!W^L", typedByteArray0.mimeType());
      assertEquals(6L, typedByteArray0.length());
      assertNull(typedByteArray0.fileName());
      assertNotNull(typedByteArray0);
      assertEquals(6, byteArray0.length);
      
      Response response0 = new Response(int0, string1, vector0, typedByteArray0);
      assertTrue(vector0.contains(header0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte)76, (byte)91, (byte)76, (byte)95, (byte)4, (byte)0}, byteArray0);
      assertEquals("Div'3v~!W^L", typedByteArray0.mimeType());
      assertEquals(6L, typedByteArray0.length());
      assertNull(typedByteArray0.fileName());
      assertFalse(vector0.isEmpty());
      assertEquals("[Retrofit-Idle: -#]8H]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(3037, response0.getStatus());
      assertEquals("T<c:tqm~fmYIj#BG(", response0.getReason());
      assertNotNull(response0);
      assertEquals(6, byteArray0.length);
      
      long long0 = (-1L);
      Response response1 = restAdapter0.logAndReplaceResponse(restAdapter0.IDLE_THREAD_NAME, response0, long0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertSame(response0, response1);
      assertSame(response1, response0);
      assertNotSame(restAdapter_LogLevel2, restAdapter_LogLevel0);
      assertNotSame(restAdapter_LogLevel2, restAdapter_LogLevel1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertTrue(vector0.contains(header0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel0));
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte)76, (byte)91, (byte)76, (byte)95, (byte)4, (byte)0}, byteArray0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Div'3v~!W^L", typedByteArray0.mimeType());
      assertEquals(6L, typedByteArray0.length());
      assertNull(typedByteArray0.fileName());
      assertFalse(vector0.isEmpty());
      assertEquals("[Retrofit-Idle: -#]8H]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(3037, response0.getStatus());
      assertEquals("T<c:tqm~fmYIj#BG(", response0.getReason());
      assertEquals("T<c:tqm~fmYIj#BG(", response1.getReason());
      assertEquals(3037, response1.getStatus());
      assertEquals("BASIC", server0.getName());
      assertEquals("BASIC", server0.getUrl());
      assertNotNull(response1);
      assertEquals(6, byteArray0.length);
      
      long long1 = 0L;
      Response response2 = restAdapter0.logAndReplaceResponse(string0, response1, long1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertSame(response0, response1);
      assertSame(response0, response2);
      assertSame(response1, response0);
      assertSame(response1, response2);
      assertSame(response2, response0);
      assertSame(response2, response1);
      assertNotSame(restAdapter_LogLevel2, restAdapter_LogLevel0);
      assertNotSame(restAdapter_LogLevel2, restAdapter_LogLevel1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertTrue(vector0.contains(header0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel0));
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte)76, (byte)91, (byte)76, (byte)95, (byte)4, (byte)0}, byteArray0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals("Div'3v~!W^L", typedByteArray0.mimeType());
      assertEquals(6L, typedByteArray0.length());
      assertNull(typedByteArray0.fileName());
      assertEquals(3037, response0.getStatus());
      assertEquals("T<c:tqm~fmYIj#BG(", response0.getReason());
      assertEquals("T<c:tqm~fmYIj#BG(", response1.getReason());
      assertEquals(3037, response1.getStatus());
      assertEquals("BASIC", server0.getName());
      assertEquals("BASIC", server0.getUrl());
      assertEquals(3037, response2.getStatus());
      assertEquals("T<c:tqm~fmYIj#BG(", response2.getReason());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertFalse(vector0.isEmpty());
      assertEquals("[Retrofit-Idle: -#]8H]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(response2);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 11000)
  public void test58()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertNotNull(restAdapter_LogLevelArray0);
      assertEquals(4, restAdapter_LogLevelArray0.length);
      
      String string0 = "BASIC";
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.valueOf(string0);
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter_LogLevel0);
      assertTrue(restAdapter_LogLevel0.log());
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.valueOf(string0);
      assertSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter_LogLevel1);
      assertTrue(restAdapter_LogLevel1.log());
      
      Server server0 = new Server(string0, string0);
      assertEquals("BASIC", server0.getUrl());
      assertEquals("BASIC", server0.getName());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int0 = 3037;
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(int0);
      assertNotNull(forkJoinPool0);
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0, server0.DEFAULT_NAME);
      assertEquals("BASIC", server0.getUrl());
      assertEquals("BASIC", server0.getName());
      assertNotNull(gsonConverter0);
      
      Profiler<Header> profiler0 = (Profiler<Header>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, forkJoinPool0, forkJoinPool0, requestInterceptorTape0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel1);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertTrue(restAdapter_LogLevel1.log());
      assertEquals("BASIC", server0.getUrl());
      assertEquals("BASIC", server0.getName());
      assertNotNull(restAdapter0);
      
      String string1 = "";
      String string2 = "T<c:tqm~fmYIj#BG(";
      Vector<Header> vector0 = new Vector<Header>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      String string3 = "Div'3v~!W^L";
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)77;
      byteArray0[0] = byte0;
      byte byte1 = (byte)91;
      byteArray0[1] = byte1;
      byte byte2 = (byte)11;
      byteArray0[2] = byte2;
      byte byte3 = (byte)95;
      byteArray0[3] = byte3;
      byte byte4 = (byte)4;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-89);
      byteArray0[5] = byte5;
      TypedString typedString0 = new TypedString(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertNull(typedString0.fileName());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals(17L, typedString0.length());
      assertNotNull(typedString0);
      
      Response response0 = new Response(int0, string2, vector0, typedString0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertNull(typedString0.fileName());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals(17L, typedString0.length());
      assertEquals(3037, response0.getStatus());
      assertEquals("T<c:tqm~fmYIj#BG(", response0.getReason());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(response0);
      
      long long0 = (-1L);
      Response response1 = restAdapter0.logAndReplaceResponse(string1, response0, long0);
      assertSame(response0, response1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertSame(response1, response0);
      assertSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertNull(typedString0.fileName());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals(17L, typedString0.length());
      assertEquals(3037, response0.getStatus());
      assertEquals("T<c:tqm~fmYIj#BG(", response0.getReason());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(3037, response1.getStatus());
      assertEquals("T<c:tqm~fmYIj#BG(", response1.getReason());
      assertTrue(restAdapter_LogLevel1.log());
      assertEquals("BASIC", server0.getUrl());
      assertEquals("BASIC", server0.getName());
      assertNotNull(response1);
      
      long long1 = 0L;
      Response response2 = restAdapter0.logAndReplaceResponse(string0, response1, long1);
      assertSame(response0, response1);
      assertSame(response0, response2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertSame(response1, response2);
      assertSame(response1, response0);
      assertSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertSame(response2, response0);
      assertSame(response2, response1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNull(typedString0.fileName());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals(17L, typedString0.length());
      assertEquals(3037, response0.getStatus());
      assertEquals("T<c:tqm~fmYIj#BG(", response0.getReason());
      assertEquals(3037, response1.getStatus());
      assertEquals("T<c:tqm~fmYIj#BG(", response1.getReason());
      assertTrue(restAdapter_LogLevel1.log());
      assertEquals("BASIC", server0.getUrl());
      assertEquals("BASIC", server0.getName());
      assertEquals("T<c:tqm~fmYIj#BG(", response2.getReason());
      assertEquals(3037, response2.getStatus());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(response2);
  }

  @Test(timeout = 11000)
  public void test59()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertNotNull(restAdapter_LogLevelArray0);
      assertEquals(4, restAdapter_LogLevelArray0.length);
      
      String string0 = "BASIC";
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.valueOf(string0);
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter_LogLevel0);
      assertTrue(restAdapter_LogLevel0.log());
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.valueOf(string0);
      assertSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter_LogLevel1);
      assertTrue(restAdapter_LogLevel1.log());
      
      Server server0 = new Server(string0, string0);
      assertEquals("BASIC", server0.getName());
      assertEquals("BASIC", server0.getUrl());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int0 = 3037;
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(int0);
      assertNotNull(forkJoinPool0);
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0, server0.DEFAULT_NAME);
      assertEquals("BASIC", server0.getName());
      assertEquals("BASIC", server0.getUrl());
      assertNotNull(gsonConverter0);
      
      Profiler<Header> profiler0 = (Profiler<Header>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel2 = RestAdapter.LogLevel.NONE;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, forkJoinPool0, forkJoinPool0, requestInterceptorTape0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel2);
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel0));
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel1));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("BASIC", server0.getName());
      assertEquals("BASIC", server0.getUrl());
      assertNotNull(restAdapter0);
      
      String string1 = "";
      String string2 = "T<c:tqm~fmYIj#BG(";
      Vector<Header> vector0 = new Vector<Header>();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      String string3 = "Div'3v~!W^L";
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)76;
      byteArray0[0] = byte0;
      byte byte1 = (byte)91;
      byteArray0[1] = byte1;
      byte byte2 = (byte)11;
      byteArray0[2] = byte2;
      byte byte3 = (byte)95;
      byteArray0[3] = byte3;
      byte byte4 = (byte)4;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-116);
      byteArray0[5] = byte5;
      TypedByteArray typedByteArray0 = new TypedByteArray(string3, byteArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte)76, (byte)91, (byte)11, (byte)95, (byte)4, (byte) (-116)}, byteArray0);
      assertNull(typedByteArray0.fileName());
      assertEquals(6L, typedByteArray0.length());
      assertEquals("Div'3v~!W^L", typedByteArray0.mimeType());
      assertNotNull(typedByteArray0);
      assertEquals(6, byteArray0.length);
      
      Response response0 = new Response(int0, string2, vector0, typedByteArray0);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte)76, (byte)91, (byte)11, (byte)95, (byte)4, (byte) (-116)}, byteArray0);
      assertNull(typedByteArray0.fileName());
      assertEquals(6L, typedByteArray0.length());
      assertEquals("Div'3v~!W^L", typedByteArray0.mimeType());
      assertEquals("T<c:tqm~fmYIj#BG(", response0.getReason());
      assertEquals(3037, response0.getStatus());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertNotNull(response0);
      assertEquals(6, byteArray0.length);
      
      long long0 = (-1L);
      Response response1 = restAdapter0.logAndReplaceResponse(string1, response0, long0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertSame(response0, response1);
      assertSame(response1, response0);
      assertNotSame(restAdapter_LogLevel2, restAdapter_LogLevel0);
      assertNotSame(restAdapter_LogLevel2, restAdapter_LogLevel1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel0));
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte)76, (byte)91, (byte)11, (byte)95, (byte)4, (byte) (-116)}, byteArray0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNull(typedByteArray0.fileName());
      assertEquals(6L, typedByteArray0.length());
      assertEquals("Div'3v~!W^L", typedByteArray0.mimeType());
      assertEquals("T<c:tqm~fmYIj#BG(", response0.getReason());
      assertEquals(3037, response0.getStatus());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(3037, response1.getStatus());
      assertEquals("T<c:tqm~fmYIj#BG(", response1.getReason());
      assertEquals("BASIC", server0.getName());
      assertEquals("BASIC", server0.getUrl());
      assertNotNull(response1);
      assertEquals(6, byteArray0.length);
      
      long long1 = 0L;
      Response response2 = restAdapter0.logAndReplaceResponse(string0, response1, long1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertSame(response0, response1);
      assertSame(response0, response2);
      assertSame(response1, response2);
      assertSame(response1, response0);
      assertSame(response2, response1);
      assertSame(response2, response0);
      assertNotSame(restAdapter_LogLevel2, restAdapter_LogLevel0);
      assertNotSame(restAdapter_LogLevel2, restAdapter_LogLevel1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel0));
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte)76, (byte)91, (byte)11, (byte)95, (byte)4, (byte) (-116)}, byteArray0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNull(typedByteArray0.fileName());
      assertEquals(6L, typedByteArray0.length());
      assertEquals("Div'3v~!W^L", typedByteArray0.mimeType());
      assertEquals("T<c:tqm~fmYIj#BG(", response0.getReason());
      assertEquals(3037, response0.getStatus());
      assertEquals(3037, response1.getStatus());
      assertEquals("T<c:tqm~fmYIj#BG(", response1.getReason());
      assertEquals("BASIC", server0.getName());
      assertEquals("BASIC", server0.getUrl());
      assertEquals("T<c:tqm~fmYIj#BG(", response2.getReason());
      assertEquals(3037, response2.getStatus());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertNotNull(response2);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 11000)
  public void test60()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertNotNull(restAdapter_LogLevelArray0);
      assertEquals(4, restAdapter_LogLevelArray0.length);
      
      String string0 = "BASIC";
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.valueOf(string0);
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter_LogLevel0);
      assertTrue(restAdapter_LogLevel0.log());
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.valueOf(string0);
      assertSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter_LogLevel1);
      assertTrue(restAdapter_LogLevel1.log());
      
      Server server0 = new Server(string0, string0);
      assertEquals("BASIC", server0.getUrl());
      assertEquals("BASIC", server0.getName());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int0 = 3037;
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(int0);
      assertNotNull(forkJoinPool0);
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0, server0.DEFAULT_NAME);
      assertEquals("BASIC", server0.getUrl());
      assertEquals("BASIC", server0.getName());
      assertNotNull(gsonConverter0);
      
      Profiler<Header> profiler0 = (Profiler<Header>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel2 = RestAdapter.LogLevel.HEADERS;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, forkJoinPool0, forkJoinPool0, requestInterceptorTape0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel2);
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel1));
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel0));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("BASIC", server0.getUrl());
      assertEquals("BASIC", server0.getName());
      assertNotNull(restAdapter0);
      
      String string1 = "T<c:tqm~fmYIj#BG(";
      Vector<Header> vector0 = new Vector<Header>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      String string2 = "Div'3v~!W^L";
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)76;
      byteArray0[0] = byte0;
      byte byte1 = (byte)91;
      byteArray0[1] = byte1;
      byteArray0[2] = byteArray0[0];
      byte byte2 = (byte)95;
      byteArray0[3] = byte2;
      byte byte3 = (byte)4;
      byteArray0[4] = byte3;
      byte byte4 = (byte) (-116);
      TypedString typedString0 = new TypedString(server0.DEFAULT_NAME);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertEquals(7L, typedString0.length());
      assertNull(typedString0.fileName());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals("BASIC", server0.getUrl());
      assertEquals("BASIC", server0.getName());
      assertNotNull(typedString0);
      
      Response response0 = new Response(int0, string1, vector0, typedString0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertEquals(7L, typedString0.length());
      assertNull(typedString0.fileName());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals(3037, response0.getStatus());
      assertEquals("T<c:tqm~fmYIj#BG(", response0.getReason());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals("BASIC", server0.getUrl());
      assertEquals("BASIC", server0.getName());
      assertNotNull(response0);
      
      long long0 = (-1L);
      Response response1 = restAdapter0.logAndReplaceResponse(restAdapter0.IDLE_THREAD_NAME, response0, long0);
      assertSame(response0, response1);
      assertSame(response1, response0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(restAdapter_LogLevel2, restAdapter_LogLevel1);
      assertNotSame(restAdapter_LogLevel2, restAdapter_LogLevel0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel1));
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(7L, typedString0.length());
      assertNull(typedString0.fileName());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals(3037, response0.getStatus());
      assertEquals("T<c:tqm~fmYIj#BG(", response0.getReason());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(3037, response1.getStatus());
      assertEquals("T<c:tqm~fmYIj#BG(", response1.getReason());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals("BASIC", server0.getUrl());
      assertEquals("BASIC", server0.getName());
      assertNotNull(response1);
      
      long long1 = 0L;
      Response response2 = restAdapter0.logAndReplaceResponse(string0, response1, long1);
      assertSame(response0, response1);
      assertSame(response0, response2);
      assertSame(response1, response0);
      assertSame(response1, response2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(response2, response1);
      assertSame(response2, response0);
      assertNotSame(restAdapter_LogLevel2, restAdapter_LogLevel1);
      assertNotSame(restAdapter_LogLevel2, restAdapter_LogLevel0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertFalse(long0 == long1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(long1 == long0);
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel1));
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(7L, typedString0.length());
      assertNull(typedString0.fileName());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals(3037, response0.getStatus());
      assertEquals("T<c:tqm~fmYIj#BG(", response0.getReason());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(3037, response1.getStatus());
      assertEquals("T<c:tqm~fmYIj#BG(", response1.getReason());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(3037, response2.getStatus());
      assertEquals("T<c:tqm~fmYIj#BG(", response2.getReason());
      assertEquals("BASIC", server0.getUrl());
      assertEquals("BASIC", server0.getName());
      assertNotNull(response2);
  }

  @Test(timeout = 11000)
  public void test61()  throws Throwable  {
      RestAdapter restAdapter0 = new RestAdapter();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = restAdapter0.getLogLevel();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNull(restAdapter0.getLogLevel());
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setLogLevel(restAdapter_LogLevel0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Log level may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test62()  throws Throwable  {
      RestAdapter restAdapter0 = new RestAdapter();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNull(restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      RestAdapter.THREAD_PREFIX = restAdapter0.THREAD_PREFIX;
      assertNull(restAdapter0.getLogLevel());
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, restAdapter0.THREAD_PREFIX);
      assertFalse(boolean0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNull(restAdapter0.getLogLevel());
      
      // Undeclared exception!
      try { 
        restAdapter0.setLogLevel(restAdapter0.logLevel);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Log level may not be null.
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test63()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertNotNull(restAdapter_LogLevelArray0);
      assertEquals(4, restAdapter_LogLevelArray0.length);
      
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      assertNotNull(threadPoolExecutor_DiscardPolicy0);
      
      Class<Integer> class0 = Integer.TYPE;
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertEquals("int", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      Profiler<Header> profiler0 = (Profiler<Header>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setProfiler(profiler0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder0.server, restAdapter_Builder0.clientProvider, restAdapter_Builder0.callbackExecutor, restAdapter_Builder0.callbackExecutor, restAdapter_Builder0.requestInterceptor, restAdapter_Builder0.converter, restAdapter_Builder0.profiler, restAdapter_Builder0.errorHandler, restAdapter_Builder0.log, restAdapter_LogLevel0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      restAdapter0.profiler = restAdapter_Builder0.profiler;
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      
      restAdapter0.profiler = restAdapter_Builder0.profiler;
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      
      Class<ClassKey> class1 = ClassKey.class;
      // Undeclared exception!
      try { 
        restAdapter0.create(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only interface endpoint definitions are supported.
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }
}
