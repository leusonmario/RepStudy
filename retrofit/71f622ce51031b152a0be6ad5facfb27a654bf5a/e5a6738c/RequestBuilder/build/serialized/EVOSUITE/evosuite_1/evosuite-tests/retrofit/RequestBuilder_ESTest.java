/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 08 23:35:56 GMT 2021
 */

package retrofit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.Gson;
import com.google.gson.TypeAdapter;
import java.io.InputStream;
import java.io.StringWriter;
import java.lang.reflect.Type;
import java.lang.reflect.WildcardType;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.mockito.internal.util.reflection.GenericMetadataSupport;
import retrofit.RequestBuilder;
import retrofit.RestMethodInfo;
import retrofit.SerializedObjectSupporter;
import retrofit.client.Header;
import retrofit.converter.Converter;
import retrofit.converter.GsonConverter;
import retrofit.mime.FormUrlEncodedTypedOutput;
import retrofit.mime.TypedByteArray;
import retrofit.mime.TypedInput;
import retrofit.mime.TypedOutput;
import retrofit.mime.TypedString;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RequestBuilder_ESTest extends RequestBuilder_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      Converter converter0 = null;
      RequestBuilder requestBuilder0 = new RequestBuilder(converter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      String string0 = "#gsKTPARL_:c5>):/";
      RequestBuilder requestBuilder1 = requestBuilder0.apiUrl(string0);
      assertNotNull(requestBuilder1);
      assertEquals("#gsKTPARL_:c5>):/", requestBuilder0.getapiUrl());
      assertEquals("#gsKTPARL_:c5>):/", requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      // Undeclared exception!
      try { 
        requestBuilder1.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      Converter converter0 = null;
      RequestBuilder requestBuilder0 = new RequestBuilder(converter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      Converter converter1 = requestBuilder0.getconverter();
      assertNull(converter1);
      assertNull(requestBuilder0.getapiUrl());
      
      requestBuilder0.setargs(requestBuilder0.args);
      assertNull(requestBuilder0.getapiUrl());
      
      List<Header> list0 = requestBuilder0.getheaders();
      assertNull(list0);
      assertNull(requestBuilder0.getapiUrl());
      
      requestBuilder0.setheaders(requestBuilder0.headers);
      assertNull(requestBuilder0.getapiUrl());
      
      RequestBuilder requestBuilder1 = requestBuilder0.methodInfo(requestBuilder0.methodInfo);
      assertNotNull(requestBuilder1);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      requestBuilder0.setmethodInfo(requestBuilder0.methodInfo);
      assertNull(requestBuilder0.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      
      requestBuilder0.setapiUrl(requestBuilder0.apiUrl);
      assertNull(requestBuilder0.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      
      Object[] objectArray0 = requestBuilder0.getargs();
      assertNull(objectArray0);
      assertNull(requestBuilder0.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      
      String string0 = requestBuilder1.getapiUrl();
      assertNull(string0);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter4();
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      RestMethodInfo restMethodInfo0 = requestBuilder0.getmethodInfo();
      assertNull(restMethodInfo0);
      assertNull(requestBuilder0.getapiUrl());
      
      RequestBuilder requestBuilder1 = requestBuilder0.headers(requestBuilder0.headers);
      assertNotNull(requestBuilder1);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      // Undeclared exception!
      try { 
        requestBuilder1.buildBody();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      String string0 = "=/?q.";
      RequestBuilder requestBuilder1 = requestBuilder0.apiUrl(string0);
      assertNotNull(requestBuilder1);
      assertEquals("=/?q.", requestBuilder0.getapiUrl());
      assertEquals("=/?q.", requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      RequestBuilder requestBuilder2 = requestBuilder0.args(requestBuilder0.args);
      assertNotNull(requestBuilder2);
      assertEquals("=/?q.", requestBuilder0.getapiUrl());
      assertEquals("=/?q.", requestBuilder2.getapiUrl());
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
      
      // Undeclared exception!
      try { 
        requestBuilder2.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter10();
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      Object[] objectArray0 = null;
      RequestBuilder requestBuilder1 = requestBuilder0.methodInfo(requestBuilder0.methodInfo);
      assertNotNull(requestBuilder1);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      RequestBuilder requestBuilder2 = requestBuilder1.args(requestBuilder0.args);
      assertNotNull(requestBuilder2);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      Converter converter0 = null;
      RequestBuilder requestBuilder0 = new RequestBuilder(converter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      String string0 = "";
      RequestBuilder requestBuilder1 = requestBuilder0.apiUrl(string0);
      assertNotNull(requestBuilder1);
      assertEquals("", requestBuilder0.getapiUrl());
      assertEquals("", requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      String string1 = "?toE4";
      RequestBuilder requestBuilder2 = requestBuilder1.apiUrl(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(requestBuilder2);
      assertEquals("?toE4", requestBuilder0.getapiUrl());
      assertEquals("?toE4", requestBuilder1.getapiUrl());
      assertEquals("?toE4", requestBuilder2.getapiUrl());
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertNotSame(string0, string1);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertNotSame(string1, string0);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      Converter converter0 = null;
      RequestBuilder requestBuilder0 = new RequestBuilder(converter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      String string0 = "9)";
      String string1 = "null";
      requestBuilder0.setapiUrl(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("null", requestBuilder0.getapiUrl());
      assertNotSame(string1, string0);
      
      RequestBuilder requestBuilder1 = requestBuilder0.apiUrl(string0);
      assertFalse(string0.equals((Object)string1));
      assertNotNull(requestBuilder1);
      assertEquals("9)", requestBuilder0.getapiUrl());
      assertEquals("9)", requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertNotSame(string0, string1);
      assertSame(requestBuilder1, requestBuilder0);
      
      // Undeclared exception!
      try { 
        requestBuilder1.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter9();
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      String string0 = "Unknown request type ";
      RequestBuilder requestBuilder1 = requestBuilder0.apiUrl(string0);
      assertNotNull(requestBuilder1);
      assertEquals("Unknown request type ", requestBuilder0.getapiUrl());
      assertEquals("Unknown request type ", requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      RequestBuilder requestBuilder2 = requestBuilder1.args(requestBuilder0.args);
      assertNotNull(requestBuilder2);
      assertEquals("Unknown request type ", requestBuilder0.getapiUrl());
      assertEquals("Unknown request type ", requestBuilder1.getapiUrl());
      assertEquals("Unknown request type ", requestBuilder2.getapiUrl());
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
      
      requestBuilder2.setmethodInfo(requestBuilder1.methodInfo);
      assertEquals("Unknown request type ", requestBuilder0.getapiUrl());
      assertEquals("Unknown request type ", requestBuilder1.getapiUrl());
      assertEquals("Unknown request type ", requestBuilder2.getapiUrl());
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) requestBuilder0;
      objectArray0[1] = (Object) gsonConverter0;
      objectArray0[2] = (Object) gsonConverter0;
      objectArray0[3] = (Object) gson0;
      RequestBuilder requestBuilder1 = requestBuilder0.args(objectArray0);
      assertNotNull(requestBuilder1);
      assertEquals(4, objectArray0.length);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      requestBuilder0.setmethodInfo(requestBuilder1.methodInfo);
      assertEquals(4, objectArray0.length);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      String string0 = "CC=Xhn19";
      RequestBuilder requestBuilder2 = requestBuilder1.apiUrl(string0);
      assertNotNull(requestBuilder2);
      assertEquals(4, objectArray0.length);
      assertEquals("CC=Xhn19", requestBuilder0.getapiUrl());
      assertEquals("CC=Xhn19", requestBuilder1.getapiUrl());
      assertEquals("CC=Xhn19", requestBuilder2.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
      
      RequestBuilder requestBuilder3 = requestBuilder2.methodInfo(requestBuilder0.methodInfo);
      assertNotNull(requestBuilder3);
      assertEquals(4, objectArray0.length);
      assertEquals("CC=Xhn19", requestBuilder0.getapiUrl());
      assertEquals("CC=Xhn19", requestBuilder1.getapiUrl());
      assertEquals("CC=Xhn19", requestBuilder2.getapiUrl());
      assertEquals("CC=Xhn19", requestBuilder3.getapiUrl());
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder1);
      
      // Undeclared exception!
      try { 
        requestBuilder1.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      Converter converter0 = null;
      RequestBuilder requestBuilder0 = new RequestBuilder(converter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      List<Header> list0 = requestBuilder0.getheaders();
      assertNull(list0);
      assertNull(requestBuilder0.getapiUrl());
      
      RequestBuilder requestBuilder1 = requestBuilder0.headers(list0);
      assertNotNull(requestBuilder1);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      List<Header> list1 = requestBuilder1.getheaders();
      assertNull(list1);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter2();
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      String string0 = requestBuilder0.getapiUrl();
      assertNull(string0);
      assertNull(requestBuilder0.getapiUrl());
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter3();
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      String string0 = "!-<t3el";
      RequestBuilder requestBuilder1 = requestBuilder0.apiUrl(string0);
      assertNotNull(requestBuilder1);
      assertEquals("!-<t3el", requestBuilder0.getapiUrl());
      assertEquals("!-<t3el", requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      // Undeclared exception!
      try { 
        requestBuilder1.buildRelativeUrl();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter5();
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      LinkedList<Header> linkedList0 = new LinkedList<Header>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      RequestBuilder requestBuilder1 = requestBuilder0.headers(linkedList0);
      assertNotNull(requestBuilder1);
      assertNull(requestBuilder0.getapiUrl());
      assertEquals(0, linkedList0.size());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      RequestBuilder requestBuilder2 = requestBuilder1.apiUrl(requestBuilder0.apiUrl);
      assertNotNull(requestBuilder2);
      assertNull(requestBuilder0.getapiUrl());
      assertEquals(0, linkedList0.size());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
      
      List<Header> list0 = requestBuilder2.getheaders();
      assertNotNull(list0);
      assertNull(requestBuilder0.getapiUrl());
      assertEquals(0, linkedList0.size());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      Converter converter0 = null;
      RequestBuilder requestBuilder0 = new RequestBuilder(converter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      List<Header> list0 = requestBuilder0.getheaders();
      assertNull(list0);
      assertNull(requestBuilder0.getapiUrl());
      
      RequestBuilder requestBuilder1 = requestBuilder0.headers(list0);
      assertNotNull(requestBuilder1);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      Converter converter1 = requestBuilder1.getconverter();
      assertNull(converter1);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      Converter converter0 = null;
      RequestBuilder requestBuilder0 = new RequestBuilder(converter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      String string0 = "uw";
      RequestBuilder requestBuilder1 = requestBuilder0.apiUrl(string0);
      assertNotNull(requestBuilder1);
      assertEquals("uw", requestBuilder0.getapiUrl());
      assertEquals("uw", requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      RequestBuilder requestBuilder2 = requestBuilder1.methodInfo(requestBuilder0.methodInfo);
      assertNotNull(requestBuilder2);
      assertEquals("uw", requestBuilder0.getapiUrl());
      assertEquals("uw", requestBuilder1.getapiUrl());
      assertEquals("uw", requestBuilder2.getapiUrl());
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      
      RequestBuilder requestBuilder3 = requestBuilder2.headers(requestBuilder0.headers);
      assertNotNull(requestBuilder3);
      assertEquals("uw", requestBuilder0.getapiUrl());
      assertEquals("uw", requestBuilder1.getapiUrl());
      assertEquals("uw", requestBuilder2.getapiUrl());
      assertEquals("uw", requestBuilder3.getapiUrl());
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder0);
      
      requestBuilder3.setargs(requestBuilder0.args);
      assertEquals("uw", requestBuilder0.getapiUrl());
      assertEquals("uw", requestBuilder1.getapiUrl());
      assertEquals("uw", requestBuilder2.getapiUrl());
      assertEquals("uw", requestBuilder3.getapiUrl());
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder0);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter6();
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      List<Header> list0 = requestBuilder0.getheaders();
      assertNull(list0);
      assertNull(requestBuilder0.getapiUrl());
      
      requestBuilder0.setheaders(list0);
      assertNull(requestBuilder0.getapiUrl());
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter1();
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) serializedObjectSupporter0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) requestBuilder0;
      objectArray0[3] = (Object) gsonConverter0;
      objectArray0[4] = (Object) gsonConverter0;
      objectArray0[5] = (Object) serializedObjectSupporter0;
      requestBuilder0.setargs(objectArray0);
      assertEquals(6, objectArray0.length);
      assertNull(requestBuilder0.getapiUrl());
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter8();
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      String string0 = "%KBU8!~)I%";
      RequestBuilder requestBuilder1 = requestBuilder0.apiUrl(string0);
      assertNotNull(requestBuilder1);
      assertEquals("%KBU8!~)I%", requestBuilder0.getapiUrl());
      assertEquals("%KBU8!~)I%", requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      RequestBuilder requestBuilder2 = requestBuilder1.methodInfo(requestBuilder0.methodInfo);
      assertNotNull(requestBuilder2);
      assertEquals("%KBU8!~)I%", requestBuilder0.getapiUrl());
      assertEquals("%KBU8!~)I%", requestBuilder1.getapiUrl());
      assertEquals("%KBU8!~)I%", requestBuilder2.getapiUrl());
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
      
      String string1 = requestBuilder2.getapiUrl();
      assertNotNull(string1);
      assertEquals("%KBU8!~)I%", requestBuilder0.getapiUrl());
      assertEquals("%KBU8!~)I%", requestBuilder1.getapiUrl());
      assertEquals("%KBU8!~)I%", requestBuilder2.getapiUrl());
      assertEquals("%KBU8!~)I%", string1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(string0, string1);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(string1, string0);
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      Converter converter0 = null;
      RequestBuilder requestBuilder0 = new RequestBuilder(converter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      String string0 = "";
      RequestBuilder requestBuilder1 = requestBuilder0.apiUrl(string0);
      assertNotNull(requestBuilder1);
      assertEquals("", requestBuilder0.getapiUrl());
      assertEquals("", requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      RequestBuilder requestBuilder2 = requestBuilder1.args(requestBuilder0.args);
      assertNotNull(requestBuilder2);
      assertEquals("", requestBuilder0.getapiUrl());
      assertEquals("", requestBuilder1.getapiUrl());
      assertEquals("", requestBuilder2.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      
      RequestBuilder requestBuilder3 = requestBuilder2.methodInfo(requestBuilder1.methodInfo);
      assertNotNull(requestBuilder3);
      assertEquals("", requestBuilder0.getapiUrl());
      assertEquals("", requestBuilder1.getapiUrl());
      assertEquals("", requestBuilder2.getapiUrl());
      assertEquals("", requestBuilder3.getapiUrl());
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder2);
      
      RequestBuilder requestBuilder4 = requestBuilder3.headers(requestBuilder2.headers);
      assertNotNull(requestBuilder4);
      assertEquals("", requestBuilder0.getapiUrl());
      assertEquals("", requestBuilder1.getapiUrl());
      assertEquals("", requestBuilder2.getapiUrl());
      assertEquals("", requestBuilder3.getapiUrl());
      assertEquals("", requestBuilder4.getapiUrl());
      assertSame(requestBuilder0, requestBuilder4);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder4);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder4);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder3, requestBuilder4);
      assertSame(requestBuilder4, requestBuilder0);
      assertSame(requestBuilder4, requestBuilder3);
      assertSame(requestBuilder4, requestBuilder2);
      assertSame(requestBuilder4, requestBuilder1);
      
      // Undeclared exception!
      try { 
        requestBuilder4.buildBody();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      Converter converter0 = null;
      RequestBuilder requestBuilder0 = new RequestBuilder(converter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) requestBuilder0;
      objectArray0[1] = (Object) converter0;
      objectArray0[2] = (Object) converter0;
      objectArray0[3] = (Object) converter0;
      objectArray0[4] = (Object) converter0;
      objectArray0[5] = (Object) requestBuilder0;
      objectArray0[6] = (Object) requestBuilder0;
      RequestBuilder requestBuilder1 = requestBuilder0.args(objectArray0);
      assertNotNull(requestBuilder1);
      assertEquals(7, objectArray0.length);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      // Undeclared exception!
      try { 
        requestBuilder0.buildBody();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      Object[] objectArray0 = null;
      RequestBuilder requestBuilder1 = requestBuilder0.args(objectArray0);
      assertNotNull(requestBuilder1);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      RequestBuilder requestBuilder2 = requestBuilder1.headers(requestBuilder0.headers);
      assertNotNull(requestBuilder2);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      
      Object[] objectArray1 = requestBuilder2.getargs();
      assertNull(objectArray1);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      LinkedList<Header> linkedList0 = new LinkedList<Header>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      RequestBuilder requestBuilder1 = requestBuilder0.headers(linkedList0);
      assertNotNull(requestBuilder1);
      assertNull(requestBuilder0.getapiUrl());
      assertEquals(0, linkedList0.size());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      RequestBuilder requestBuilder2 = requestBuilder1.apiUrl(requestBuilder0.apiUrl);
      assertNotNull(requestBuilder2);
      assertNull(requestBuilder0.getapiUrl());
      assertEquals(0, linkedList0.size());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
      
      RequestBuilder requestBuilder3 = requestBuilder2.methodInfo(requestBuilder0.methodInfo);
      assertNotNull(requestBuilder3);
      assertNull(requestBuilder0.getapiUrl());
      assertEquals(0, linkedList0.size());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertNull(requestBuilder3.getapiUrl());
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder2);
      
      RestMethodInfo restMethodInfo0 = requestBuilder3.getmethodInfo();
      assertNull(restMethodInfo0);
      assertNull(requestBuilder0.getapiUrl());
      assertEquals(0, linkedList0.size());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertNull(requestBuilder3.getapiUrl());
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder2);
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter10();
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      String string0 = "kuBZQg?q<}0lW0hE$VS";
      RequestBuilder requestBuilder1 = requestBuilder0.apiUrl(string0);
      assertNotNull(requestBuilder1);
      assertEquals("kuBZQg?q<}0lW0hE$VS", requestBuilder0.getapiUrl());
      assertEquals("kuBZQg?q<}0lW0hE$VS", requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      RequestBuilder requestBuilder2 = requestBuilder1.methodInfo(requestBuilder0.methodInfo);
      assertNotNull(requestBuilder2);
      assertEquals("kuBZQg?q<}0lW0hE$VS", requestBuilder0.getapiUrl());
      assertEquals("kuBZQg?q<}0lW0hE$VS", requestBuilder1.getapiUrl());
      assertEquals("kuBZQg?q<}0lW0hE$VS", requestBuilder2.getapiUrl());
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
      
      RestMethodInfo restMethodInfo0 = requestBuilder2.getmethodInfo();
      assertNull(restMethodInfo0);
      assertEquals("kuBZQg?q<}0lW0hE$VS", requestBuilder0.getapiUrl());
      assertEquals("kuBZQg?q<}0lW0hE$VS", requestBuilder1.getapiUrl());
      assertEquals("kuBZQg?q<}0lW0hE$VS", requestBuilder2.getapiUrl());
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
      
      RestMethodInfo restMethodInfo1 = requestBuilder2.getmethodInfo();
      assertNull(restMethodInfo1);
      assertEquals("kuBZQg?q<}0lW0hE$VS", requestBuilder0.getapiUrl());
      assertEquals("kuBZQg?q<}0lW0hE$VS", requestBuilder1.getapiUrl());
      assertEquals("kuBZQg?q<}0lW0hE$VS", requestBuilder2.getapiUrl());
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
      
      List<Header> list0 = requestBuilder1.getheaders();
      assertNull(list0);
      assertEquals("kuBZQg?q<}0lW0hE$VS", requestBuilder0.getapiUrl());
      assertEquals("kuBZQg?q<}0lW0hE$VS", requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) requestBuilder0;
      objectArray0[1] = (Object) gson0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      RequestBuilder requestBuilder1 = requestBuilder0.args(objectArray0);
      assertNotNull(requestBuilder1);
      assertEquals(3, objectArray0.length);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      RequestBuilder requestBuilder2 = requestBuilder1.apiUrl(requestBuilder0.apiUrl);
      assertNotNull(requestBuilder2);
      assertEquals(3, objectArray0.length);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
      
      RequestBuilder requestBuilder3 = requestBuilder2.methodInfo(requestBuilder0.methodInfo);
      assertNotNull(requestBuilder3);
      assertEquals(3, objectArray0.length);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertNull(requestBuilder3.getapiUrl());
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder0);
      
      List<Header> list0 = requestBuilder3.getheaders();
      assertNull(list0);
      assertEquals(3, objectArray0.length);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertNull(requestBuilder3.getapiUrl());
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder0);
      
      requestBuilder0.setmethodInfo(requestBuilder1.methodInfo);
      assertEquals(3, objectArray0.length);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      
      Object[] objectArray1 = requestBuilder1.getargs();
      assertNotNull(objectArray1);
      assertEquals(3, objectArray0.length);
      assertEquals(3, objectArray1.length);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(objectArray0, objectArray1);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(objectArray1, objectArray0);
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter9();
      assertNotNull(gsonConverter0);
      
      String string0 = "";
      TypedString typedString0 = new TypedString(string0);
      assertNotNull(typedString0);
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals(0L, typedString0.length());
      assertNull(typedString0.fileName());
      
      GsonConverter gsonConverter1 = serializedObjectSupporter0.deserializeObjectConverter9();
      assertNull(gsonConverter1);
      
      InputStream inputStream0 = typedString0.in();
      assertNotNull(inputStream0);
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals(0L, typedString0.length());
      assertNull(typedString0.fileName());
      assertEquals(0, inputStream0.available());
      
      WildcardType wildcardType0 = mock(WildcardType.class, new ViolatedAssumptionAnswer());
      InputStream inputStream1 = typedString0.in();
      assertFalse(inputStream1.equals((Object)inputStream0));
      assertNotNull(inputStream1);
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals(0L, typedString0.length());
      assertNull(typedString0.fileName());
      assertEquals(0, inputStream1.available());
      assertNotSame(inputStream1, inputStream0);
      
      GenericMetadataSupport.WildCardBoundedType genericMetadataSupport_WildCardBoundedType0 = new GenericMetadataSupport.WildCardBoundedType(wildcardType0);
      assertNotNull(genericMetadataSupport_WildCardBoundedType0);
      
      Object object0 = gsonConverter0.fromBody(typedString0, genericMetadataSupport_WildCardBoundedType0);
      assertNull(object0);
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals(0L, typedString0.length());
      assertNull(typedString0.fileName());
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      requestBuilder0.apiUrl = string0;
      assertEquals("", requestBuilder0.getapiUrl());
      
      LinkedList<Header> linkedList0 = new LinkedList<Header>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Object object1 = null;
      TypedOutput typedOutput0 = gsonConverter0.toBody(object1);
      assertNotNull(typedOutput0);
      assertEquals("application/json; charset=UTF-8", typedOutput0.mimeType());
      assertNull(typedOutput0.fileName());
      assertEquals(4L, typedOutput0.length());
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      boolean boolean0 = linkedList0.retainAll(linkedHashSet0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(boolean0);
      
      Header header0 = new Header(requestBuilder0.apiUrl, string0);
      assertNotNull(header0);
      assertEquals("", header0.getValue());
      assertEquals("", header0.getName());
      assertEquals("", requestBuilder0.getapiUrl());
      
      requestBuilder0.serializedObjectSupporter = serializedObjectSupporter0;
      assertEquals("", requestBuilder0.getapiUrl());
      
      boolean boolean1 = linkedList0.add(header0);
      assertFalse(boolean1 == boolean0);
      assertEquals("", header0.getValue());
      assertEquals("", header0.getName());
      assertEquals("", requestBuilder0.getapiUrl());
      assertEquals(1, linkedList0.size());
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(header0));
      assertSame(requestBuilder0.apiUrl, string0);
      
      requestBuilder0.setheaders(linkedList0);
      assertEquals("", requestBuilder0.getapiUrl());
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(header0));
      
      String string1 = null;
      requestBuilder0.setheaders(linkedList0);
      assertEquals("", requestBuilder0.getapiUrl());
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(header0));
      
      requestBuilder0.setapiUrl(string1);
      assertNull(requestBuilder0.getapiUrl());
      
      String string2 = "END_ARRAY";
      requestBuilder0.setapiUrl(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("END_ARRAY", requestBuilder0.getapiUrl());
      assertNotSame(string2, string0);
      
      Object[] objectArray0 = requestBuilder0.getargs();
      assertNull(objectArray0);
      assertEquals("END_ARRAY", requestBuilder0.getapiUrl());
      
      requestBuilder0.setargs(objectArray0);
      assertEquals("END_ARRAY", requestBuilder0.getapiUrl());
      
      RequestBuilder requestBuilder1 = requestBuilder0.args(objectArray0);
      assertNotNull(requestBuilder1);
      assertEquals("END_ARRAY", requestBuilder0.getapiUrl());
      assertEquals("END_ARRAY", requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      RestMethodInfo restMethodInfo0 = requestBuilder0.getmethodInfo();
      assertNull(restMethodInfo0);
      assertEquals("END_ARRAY", requestBuilder0.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      
      RequestBuilder requestBuilder2 = requestBuilder0.apiUrl(requestBuilder1.apiUrl);
      assertNotNull(requestBuilder2);
      assertEquals("END_ARRAY", requestBuilder0.getapiUrl());
      assertEquals("END_ARRAY", requestBuilder1.getapiUrl());
      assertEquals("END_ARRAY", requestBuilder2.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      
      // Undeclared exception!
      try { 
        requestBuilder2.buildBody();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) gsonConverter0;
      objectArray0[1] = (Object) gsonConverter0;
      objectArray0[2] = (Object) gsonConverter0;
      objectArray0[3] = (Object) gsonConverter0;
      objectArray0[4] = (Object) requestBuilder0;
      RequestBuilder requestBuilder1 = requestBuilder0.args(objectArray0);
      assertNotNull(requestBuilder1);
      assertEquals(5, objectArray0.length);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      RequestBuilder requestBuilder2 = requestBuilder1.headers(requestBuilder0.headers);
      assertNotNull(requestBuilder2);
      assertEquals(5, objectArray0.length);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
      
      String string0 = "com.google.common.reflect.Types$WildcardTypeImpl";
      RequestBuilder requestBuilder3 = requestBuilder2.apiUrl(string0);
      assertNotNull(requestBuilder3);
      assertEquals(5, objectArray0.length);
      assertEquals("com.google.common.reflect.Types$WildcardTypeImpl", requestBuilder0.getapiUrl());
      assertEquals("com.google.common.reflect.Types$WildcardTypeImpl", requestBuilder1.getapiUrl());
      assertEquals("com.google.common.reflect.Types$WildcardTypeImpl", requestBuilder2.getapiUrl());
      assertEquals("com.google.common.reflect.Types$WildcardTypeImpl", requestBuilder3.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder1);
      
      RequestBuilder requestBuilder4 = requestBuilder3.methodInfo(requestBuilder0.methodInfo);
      assertNotNull(requestBuilder4);
      assertEquals(5, objectArray0.length);
      assertEquals("com.google.common.reflect.Types$WildcardTypeImpl", requestBuilder0.getapiUrl());
      assertEquals("com.google.common.reflect.Types$WildcardTypeImpl", requestBuilder1.getapiUrl());
      assertEquals("com.google.common.reflect.Types$WildcardTypeImpl", requestBuilder2.getapiUrl());
      assertEquals("com.google.common.reflect.Types$WildcardTypeImpl", requestBuilder3.getapiUrl());
      assertEquals("com.google.common.reflect.Types$WildcardTypeImpl", requestBuilder4.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder4);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder4);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder4);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder3, requestBuilder4);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder4, requestBuilder0);
      assertSame(requestBuilder4, requestBuilder3);
      assertSame(requestBuilder4, requestBuilder2);
      assertSame(requestBuilder4, requestBuilder1);
      
      List<Header> list0 = requestBuilder3.getheaders();
      assertNull(list0);
      assertEquals(5, objectArray0.length);
      assertEquals("com.google.common.reflect.Types$WildcardTypeImpl", requestBuilder0.getapiUrl());
      assertEquals("com.google.common.reflect.Types$WildcardTypeImpl", requestBuilder1.getapiUrl());
      assertEquals("com.google.common.reflect.Types$WildcardTypeImpl", requestBuilder2.getapiUrl());
      assertEquals("com.google.common.reflect.Types$WildcardTypeImpl", requestBuilder3.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder4);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder4);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder4);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder3, requestBuilder4);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder1);
      
      RestMethodInfo restMethodInfo0 = requestBuilder2.getmethodInfo();
      assertNull(restMethodInfo0);
      assertEquals(5, objectArray0.length);
      assertEquals("com.google.common.reflect.Types$WildcardTypeImpl", requestBuilder0.getapiUrl());
      assertEquals("com.google.common.reflect.Types$WildcardTypeImpl", requestBuilder1.getapiUrl());
      assertEquals("com.google.common.reflect.Types$WildcardTypeImpl", requestBuilder2.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder4);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder4);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder4);
      assertSame(requestBuilder2, requestBuilder1);
      
      RequestBuilder requestBuilder5 = requestBuilder1.headers(list0);
      assertNotNull(requestBuilder5);
      assertEquals(5, objectArray0.length);
      assertEquals("com.google.common.reflect.Types$WildcardTypeImpl", requestBuilder5.getapiUrl());
      assertEquals("com.google.common.reflect.Types$WildcardTypeImpl", requestBuilder0.getapiUrl());
      assertEquals("com.google.common.reflect.Types$WildcardTypeImpl", requestBuilder1.getapiUrl());
      assertEquals("com.google.common.reflect.Types$WildcardTypeImpl", requestBuilder2.getapiUrl());
      assertEquals("com.google.common.reflect.Types$WildcardTypeImpl", requestBuilder3.getapiUrl());
      assertSame(requestBuilder5, requestBuilder2);
      assertSame(requestBuilder5, requestBuilder0);
      assertSame(requestBuilder5, requestBuilder3);
      assertSame(requestBuilder5, requestBuilder1);
      assertSame(requestBuilder5, requestBuilder4);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder5);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder4);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder5);
      assertSame(requestBuilder1, requestBuilder4);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder4);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder5);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder3, requestBuilder5);
      assertSame(requestBuilder3, requestBuilder4);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder1);
      
      Converter converter0 = requestBuilder3.getconverter();
      assertNotNull(converter0);
      assertEquals(5, objectArray0.length);
      assertEquals("com.google.common.reflect.Types$WildcardTypeImpl", requestBuilder0.getapiUrl());
      assertEquals("com.google.common.reflect.Types$WildcardTypeImpl", requestBuilder1.getapiUrl());
      assertEquals("com.google.common.reflect.Types$WildcardTypeImpl", requestBuilder2.getapiUrl());
      assertEquals("com.google.common.reflect.Types$WildcardTypeImpl", requestBuilder3.getapiUrl());
      assertSame(converter0, gsonConverter0);
      assertSame(gsonConverter0, converter0);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder5);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder4);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder5);
      assertSame(requestBuilder1, requestBuilder4);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder4);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder5);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder3, requestBuilder5);
      assertSame(requestBuilder3, requestBuilder4);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder1);
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      Converter converter0 = null;
      RequestBuilder requestBuilder0 = new RequestBuilder(converter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      String string0 = "9)";
      String string1 = "null";
      requestBuilder0.setapiUrl(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("null", requestBuilder0.getapiUrl());
      assertNotSame(string1, string0);
      
      RequestBuilder requestBuilder1 = requestBuilder0.apiUrl(string0);
      assertFalse(string0.equals((Object)string1));
      assertNotNull(requestBuilder1);
      assertEquals("9)", requestBuilder0.getapiUrl());
      assertEquals("9)", requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertNotSame(string0, string1);
      assertSame(requestBuilder1, requestBuilder0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      String string2 = "#gsKTPARL_%c5>)8/";
      RequestBuilder requestBuilder2 = requestBuilder1.apiUrl(string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(requestBuilder2);
      assertEquals("#gsKTPARL_%c5>)8/", requestBuilder0.getapiUrl());
      assertEquals("#gsKTPARL_%c5>)8/", requestBuilder1.getapiUrl());
      assertEquals("#gsKTPARL_%c5>)8/", requestBuilder2.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
      
      requestBuilder1.serializedObjectSupporter = serializedObjectSupporter0;
      assertEquals("#gsKTPARL_%c5>)8/", requestBuilder0.getapiUrl());
      assertEquals("#gsKTPARL_%c5>)8/", requestBuilder1.getapiUrl());
      
      // Undeclared exception!
      try { 
        requestBuilder1.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      String string0 = "";
      RequestBuilder requestBuilder1 = requestBuilder0.apiUrl(string0);
      assertNotNull(requestBuilder1);
      assertEquals("", requestBuilder0.getapiUrl());
      assertEquals("", requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      RequestBuilder requestBuilder2 = requestBuilder1.methodInfo(requestBuilder0.methodInfo);
      assertNotNull(requestBuilder2);
      assertEquals("", requestBuilder0.getapiUrl());
      assertEquals("", requestBuilder1.getapiUrl());
      assertEquals("", requestBuilder2.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      
      RequestBuilder requestBuilder3 = requestBuilder2.headers(requestBuilder1.headers);
      assertNotNull(requestBuilder3);
      assertEquals("", requestBuilder0.getapiUrl());
      assertEquals("", requestBuilder1.getapiUrl());
      assertEquals("", requestBuilder2.getapiUrl());
      assertEquals("", requestBuilder3.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder2);
      
      requestBuilder2.serializedObjectSupporter = requestBuilder0.serializedObjectSupporter;
      assertEquals("", requestBuilder0.getapiUrl());
      assertEquals("", requestBuilder1.getapiUrl());
      assertEquals("", requestBuilder2.getapiUrl());
      
      Object[] objectArray0 = requestBuilder3.getargs();
      assertNull(objectArray0);
      assertEquals("", requestBuilder0.getapiUrl());
      assertEquals("", requestBuilder1.getapiUrl());
      assertEquals("", requestBuilder2.getapiUrl());
      assertEquals("", requestBuilder3.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder2);
      
      RequestBuilder requestBuilder4 = requestBuilder1.methodInfo(requestBuilder2.methodInfo);
      assertNotNull(requestBuilder4);
      assertEquals("", requestBuilder0.getapiUrl());
      assertEquals("", requestBuilder1.getapiUrl());
      assertEquals("", requestBuilder2.getapiUrl());
      assertEquals("", requestBuilder4.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder4);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder4);
      assertSame(requestBuilder2, requestBuilder4);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder4, requestBuilder2);
      assertSame(requestBuilder4, requestBuilder3);
      assertSame(requestBuilder4, requestBuilder0);
      assertSame(requestBuilder4, requestBuilder1);
      
      requestBuilder4.setargs(requestBuilder3.args);
      assertEquals("", requestBuilder0.getapiUrl());
      assertEquals("", requestBuilder1.getapiUrl());
      assertEquals("", requestBuilder2.getapiUrl());
      assertEquals("", requestBuilder3.getapiUrl());
      assertEquals("", requestBuilder4.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder4);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder4);
      assertSame(requestBuilder2, requestBuilder4);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder3, requestBuilder4);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder4, requestBuilder2);
      assertSame(requestBuilder4, requestBuilder3);
      assertSame(requestBuilder4, requestBuilder0);
      assertSame(requestBuilder4, requestBuilder1);
      
      List<Header> list0 = requestBuilder0.getheaders();
      assertNull(list0);
      assertEquals("", requestBuilder0.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder4);
      assertSame(requestBuilder0, requestBuilder3);
      
      requestBuilder3.setheaders(requestBuilder2.headers);
      assertEquals("", requestBuilder0.getapiUrl());
      assertEquals("", requestBuilder1.getapiUrl());
      assertEquals("", requestBuilder2.getapiUrl());
      assertEquals("", requestBuilder3.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder4);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder4);
      assertSame(requestBuilder2, requestBuilder4);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder3, requestBuilder4);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder2);
      
      String string1 = requestBuilder3.getapiUrl();
      assertNotNull(string1);
      assertEquals("", requestBuilder0.getapiUrl());
      assertEquals("", requestBuilder1.getapiUrl());
      assertEquals("", requestBuilder2.getapiUrl());
      assertEquals("", requestBuilder3.getapiUrl());
      assertEquals("", string1);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder4);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(string0, string1);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder4);
      assertSame(requestBuilder2, requestBuilder4);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder3, requestBuilder4);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(string1, string0);
      
      int int0 = (-18548323);
      Random.setNextRandom(int0);
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      String string0 = serializedObjectSupporter0.deserializeObjectString2();
      assertNotNull(string0);
      assertEquals("http://example.com/", string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      TypedInput typedInput0 = null;
      Type type0 = null;
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter2();
      assertNotNull(gsonConverter0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Converter converter0 = null;
      RequestBuilder requestBuilder0 = new RequestBuilder(converter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      Object[] objectArray0 = new Object[0];
      RequestBuilder requestBuilder1 = requestBuilder0.args(objectArray0);
      assertNotNull(requestBuilder1);
      assertEquals(0, objectArray0.length);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      RequestBuilder requestBuilder2 = requestBuilder1.methodInfo(requestBuilder0.methodInfo);
      assertNotNull(requestBuilder2);
      assertEquals(0, objectArray0.length);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
      
      RestMethodInfo restMethodInfo0 = requestBuilder2.getmethodInfo();
      assertNull(restMethodInfo0);
      assertEquals(0, objectArray0.length);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
      
      Object[] objectArray1 = requestBuilder0.getargs();
      assertNotNull(objectArray1);
      assertEquals(0, objectArray1.length);
      assertNull(requestBuilder0.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(objectArray1, objectArray0);
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      Class<Object> class0 = Object.class;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      TypeAdapter<Object> typeAdapter0 = gson0.getAdapter(class0);
      assertNotNull(typeAdapter0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      LinkedList<Header> linkedList0 = new LinkedList<Header>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      RequestBuilder requestBuilder1 = requestBuilder0.headers(linkedList0);
      assertNotNull(requestBuilder1);
      assertNull(requestBuilder0.getapiUrl());
      assertEquals(0, linkedList0.size());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      FormUrlEncodedTypedOutput formUrlEncodedTypedOutput0 = new FormUrlEncodedTypedOutput();
      assertNotNull(formUrlEncodedTypedOutput0);
      assertEquals(0L, formUrlEncodedTypedOutput0.length());
      assertEquals("application/x-www-form-urlencoded; charset=UTF-8", formUrlEncodedTypedOutput0.mimeType());
      assertNull(formUrlEncodedTypedOutput0.fileName());
      
      TypedOutput typedOutput0 = gsonConverter0.toBody(formUrlEncodedTypedOutput0);
      assertNotNull(typedOutput0);
      assertEquals(0L, formUrlEncodedTypedOutput0.length());
      assertEquals("application/x-www-form-urlencoded; charset=UTF-8", formUrlEncodedTypedOutput0.mimeType());
      assertNull(formUrlEncodedTypedOutput0.fileName());
      assertNull(typedOutput0.fileName());
      assertEquals("application/json; charset=UTF-8", typedOutput0.mimeType());
      assertEquals(890L, typedOutput0.length());
      
      RequestBuilder requestBuilder2 = requestBuilder1.methodInfo(requestBuilder0.methodInfo);
      assertNotNull(requestBuilder2);
      assertNull(requestBuilder0.getapiUrl());
      assertEquals(0, linkedList0.size());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
      
      String string0 = "A9z5.\"`TGO{z4T4";
      Header header0 = new Header(requestBuilder0.apiUrl, requestBuilder2.apiUrl);
      assertNotNull(header0);
      assertNull(requestBuilder0.getapiUrl());
      assertEquals(0, linkedList0.size());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertNull(header0.getName());
      assertNull(header0.getValue());
      assertFalse(linkedList0.contains(header0));
      
      linkedList0.addFirst(header0);
      assertNull(requestBuilder0.getapiUrl());
      assertEquals(1, linkedList0.size());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertNull(header0.getName());
      assertNull(header0.getValue());
      assertTrue(linkedList0.contains(header0));
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
      
      String string1 = "[zK9>}Q//";
      RequestBuilder requestBuilder3 = requestBuilder2.apiUrl(string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(requestBuilder3);
      assertEquals("[zK9>}Q//", requestBuilder3.getapiUrl());
      assertEquals("[zK9>}Q//", requestBuilder0.getapiUrl());
      assertEquals(1, linkedList0.size());
      assertEquals("[zK9>}Q//", requestBuilder1.getapiUrl());
      assertEquals("[zK9>}Q//", requestBuilder2.getapiUrl());
      assertTrue(linkedList0.contains(header0));
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder3);
      assertNotSame(string1, string0);
      
      RequestBuilder requestBuilder4 = requestBuilder0.methodInfo(requestBuilder1.methodInfo);
      assertNotNull(requestBuilder4);
      assertEquals("[zK9>}Q//", requestBuilder4.getapiUrl());
      assertEquals("[zK9>}Q//", requestBuilder0.getapiUrl());
      assertEquals(1, linkedList0.size());
      assertEquals("[zK9>}Q//", requestBuilder1.getapiUrl());
      assertTrue(linkedList0.contains(header0));
      assertSame(requestBuilder4, requestBuilder1);
      assertSame(requestBuilder4, requestBuilder0);
      assertSame(requestBuilder4, requestBuilder2);
      assertSame(requestBuilder4, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder4);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder4);
      
      RequestBuilder requestBuilder5 = requestBuilder2.apiUrl(string0);
      assertFalse(string0.equals((Object)string1));
      assertNotNull(requestBuilder5);
      assertEquals("A9z5.\"`TGO{z4T4", requestBuilder5.getapiUrl());
      assertEquals("A9z5.\"`TGO{z4T4", requestBuilder0.getapiUrl());
      assertEquals(1, linkedList0.size());
      assertEquals("A9z5.\"`TGO{z4T4", requestBuilder1.getapiUrl());
      assertEquals("A9z5.\"`TGO{z4T4", requestBuilder2.getapiUrl());
      assertTrue(linkedList0.contains(header0));
      assertSame(requestBuilder5, requestBuilder3);
      assertSame(requestBuilder5, requestBuilder4);
      assertSame(requestBuilder5, requestBuilder0);
      assertSame(requestBuilder5, requestBuilder1);
      assertSame(requestBuilder5, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder4);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder5);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder5);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder4);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder5);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder4);
      assertNotSame(string0, string1);
      
      RequestBuilder requestBuilder6 = requestBuilder5.args(requestBuilder2.args);
      assertFalse(string0.equals((Object)string1));
      assertNotNull(requestBuilder6);
      assertEquals("A9z5.\"`TGO{z4T4", requestBuilder5.getapiUrl());
      assertEquals("A9z5.\"`TGO{z4T4", requestBuilder6.getapiUrl());
      assertEquals("A9z5.\"`TGO{z4T4", requestBuilder0.getapiUrl());
      assertEquals(1, linkedList0.size());
      assertEquals("A9z5.\"`TGO{z4T4", requestBuilder1.getapiUrl());
      assertEquals("A9z5.\"`TGO{z4T4", requestBuilder2.getapiUrl());
      assertTrue(linkedList0.contains(header0));
      assertSame(requestBuilder5, requestBuilder3);
      assertSame(requestBuilder5, requestBuilder4);
      assertSame(requestBuilder5, requestBuilder0);
      assertSame(requestBuilder5, requestBuilder1);
      assertSame(requestBuilder5, requestBuilder2);
      assertSame(requestBuilder5, requestBuilder6);
      assertSame(requestBuilder6, requestBuilder1);
      assertSame(requestBuilder6, requestBuilder5);
      assertSame(requestBuilder6, requestBuilder0);
      assertSame(requestBuilder6, requestBuilder3);
      assertSame(requestBuilder6, requestBuilder2);
      assertSame(requestBuilder6, requestBuilder4);
      assertSame(requestBuilder0, requestBuilder4);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder5);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder6);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder6);
      assertSame(requestBuilder1, requestBuilder5);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder4);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder6);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder5);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder4);
      assertNotSame(string0, string1);
      
      requestBuilder5.setargs(requestBuilder2.args);
      assertFalse(string0.equals((Object)string1));
      assertEquals("A9z5.\"`TGO{z4T4", requestBuilder5.getapiUrl());
      assertEquals("A9z5.\"`TGO{z4T4", requestBuilder0.getapiUrl());
      assertEquals(1, linkedList0.size());
      assertEquals("A9z5.\"`TGO{z4T4", requestBuilder1.getapiUrl());
      assertEquals("A9z5.\"`TGO{z4T4", requestBuilder2.getapiUrl());
      assertTrue(linkedList0.contains(header0));
      assertSame(requestBuilder5, requestBuilder3);
      assertSame(requestBuilder5, requestBuilder4);
      assertSame(requestBuilder5, requestBuilder0);
      assertSame(requestBuilder5, requestBuilder1);
      assertSame(requestBuilder5, requestBuilder2);
      assertSame(requestBuilder5, requestBuilder6);
      assertSame(requestBuilder0, requestBuilder4);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder5);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder6);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder6);
      assertSame(requestBuilder1, requestBuilder5);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder4);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder6);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder5);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder4);
      assertNotSame(string0, string1);
      
      RestMethodInfo restMethodInfo0 = requestBuilder6.getmethodInfo();
      assertFalse(string0.equals((Object)string1));
      assertNull(restMethodInfo0);
      assertEquals("A9z5.\"`TGO{z4T4", requestBuilder5.getapiUrl());
      assertEquals("A9z5.\"`TGO{z4T4", requestBuilder6.getapiUrl());
      assertEquals("A9z5.\"`TGO{z4T4", requestBuilder0.getapiUrl());
      assertEquals(1, linkedList0.size());
      assertEquals("A9z5.\"`TGO{z4T4", requestBuilder1.getapiUrl());
      assertEquals("A9z5.\"`TGO{z4T4", requestBuilder2.getapiUrl());
      assertTrue(linkedList0.contains(header0));
      assertSame(requestBuilder5, requestBuilder3);
      assertSame(requestBuilder5, requestBuilder4);
      assertSame(requestBuilder5, requestBuilder0);
      assertSame(requestBuilder5, requestBuilder1);
      assertSame(requestBuilder5, requestBuilder2);
      assertSame(requestBuilder5, requestBuilder6);
      assertSame(requestBuilder6, requestBuilder1);
      assertSame(requestBuilder6, requestBuilder5);
      assertSame(requestBuilder6, requestBuilder0);
      assertSame(requestBuilder6, requestBuilder3);
      assertSame(requestBuilder6, requestBuilder2);
      assertSame(requestBuilder6, requestBuilder4);
      assertSame(requestBuilder0, requestBuilder4);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder5);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder6);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder6);
      assertSame(requestBuilder1, requestBuilder5);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder4);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder6);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder5);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder4);
      assertNotSame(string0, string1);
      
      RestMethodInfo restMethodInfo1 = requestBuilder5.getmethodInfo();
      assertFalse(string0.equals((Object)string1));
      assertNull(restMethodInfo1);
      assertEquals("A9z5.\"`TGO{z4T4", requestBuilder5.getapiUrl());
      assertEquals("A9z5.\"`TGO{z4T4", requestBuilder0.getapiUrl());
      assertEquals(1, linkedList0.size());
      assertEquals("A9z5.\"`TGO{z4T4", requestBuilder1.getapiUrl());
      assertEquals("A9z5.\"`TGO{z4T4", requestBuilder2.getapiUrl());
      assertTrue(linkedList0.contains(header0));
      assertSame(requestBuilder5, requestBuilder3);
      assertSame(requestBuilder5, requestBuilder4);
      assertSame(requestBuilder5, requestBuilder0);
      assertSame(requestBuilder5, requestBuilder1);
      assertSame(requestBuilder5, requestBuilder2);
      assertSame(requestBuilder5, requestBuilder6);
      assertSame(requestBuilder0, requestBuilder4);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder5);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder6);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder6);
      assertSame(requestBuilder1, requestBuilder5);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder4);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder6);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder5);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder4);
      assertNotSame(string0, string1);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      List<Header> list0 = requestBuilder2.getheaders();
      assertNotNull(list0);
      assertEquals("A9z5.\"`TGO{z4T4", requestBuilder0.getapiUrl());
      assertEquals(1, linkedList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals("A9z5.\"`TGO{z4T4", requestBuilder1.getapiUrl());
      assertEquals("A9z5.\"`TGO{z4T4", requestBuilder2.getapiUrl());
      assertTrue(linkedList0.contains(header0));
      assertTrue(list0.contains(header0));
      assertSame(requestBuilder0, requestBuilder4);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder5);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder6);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder6);
      assertSame(requestBuilder1, requestBuilder5);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder4);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder6);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder5);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder4);
      
      RequestBuilder requestBuilder7 = requestBuilder0.args(requestBuilder2.args);
      assertNotNull(requestBuilder7);
      assertEquals("A9z5.\"`TGO{z4T4", requestBuilder0.getapiUrl());
      assertEquals(1, linkedList0.size());
      assertEquals("A9z5.\"`TGO{z4T4", requestBuilder1.getapiUrl());
      assertEquals("A9z5.\"`TGO{z4T4", requestBuilder7.getapiUrl());
      assertEquals("A9z5.\"`TGO{z4T4", requestBuilder2.getapiUrl());
      assertTrue(linkedList0.contains(header0));
      assertSame(requestBuilder0, requestBuilder4);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder5);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder6);
      assertSame(requestBuilder0, requestBuilder7);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder6);
      assertSame(requestBuilder1, requestBuilder5);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder7);
      assertSame(requestBuilder1, requestBuilder4);
      assertSame(requestBuilder7, requestBuilder6);
      assertSame(requestBuilder7, requestBuilder3);
      assertSame(requestBuilder7, requestBuilder1);
      assertSame(requestBuilder7, requestBuilder0);
      assertSame(requestBuilder7, requestBuilder4);
      assertSame(requestBuilder7, requestBuilder2);
      assertSame(requestBuilder7, requestBuilder5);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder6);
      assertSame(requestBuilder2, requestBuilder7);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder5);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder4);
      
      RequestBuilder requestBuilder8 = requestBuilder2.args(requestBuilder1.args);
      assertNotNull(requestBuilder8);
      assertEquals("A9z5.\"`TGO{z4T4", requestBuilder0.getapiUrl());
      assertEquals(1, linkedList0.size());
      assertEquals("A9z5.\"`TGO{z4T4", requestBuilder1.getapiUrl());
      assertEquals("A9z5.\"`TGO{z4T4", requestBuilder8.getapiUrl());
      assertEquals("A9z5.\"`TGO{z4T4", requestBuilder2.getapiUrl());
      assertTrue(linkedList0.contains(header0));
      assertSame(requestBuilder0, requestBuilder8);
      assertSame(requestBuilder0, requestBuilder4);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder5);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder6);
      assertSame(requestBuilder0, requestBuilder7);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder6);
      assertSame(requestBuilder1, requestBuilder5);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder7);
      assertSame(requestBuilder1, requestBuilder8);
      assertSame(requestBuilder1, requestBuilder4);
      assertSame(requestBuilder8, requestBuilder5);
      assertSame(requestBuilder8, requestBuilder1);
      assertSame(requestBuilder8, requestBuilder6);
      assertSame(requestBuilder8, requestBuilder3);
      assertSame(requestBuilder8, requestBuilder2);
      assertSame(requestBuilder8, requestBuilder7);
      assertSame(requestBuilder8, requestBuilder0);
      assertSame(requestBuilder8, requestBuilder4);
      assertSame(requestBuilder2, requestBuilder8);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder6);
      assertSame(requestBuilder2, requestBuilder7);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder5);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder4);
  }
}
