/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 02 07:05:05 GMT 2021
 */

package retrofit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import retrofit.RequestBuilder;
import retrofit.RestMethodInfo;
import retrofit.SerializedObjectSupporter;
import retrofit.client.Header;
import retrofit.converter.Converter;
import retrofit.converter.GsonConverter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RequestBuilder_ESTest extends RequestBuilder_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      Converter converter0 = null;
      RequestBuilder requestBuilder0 = new RequestBuilder(converter0);
      assertNull(requestBuilder0.getapiUrl());
      assertNotNull(requestBuilder0);
      
      String string0 = "$ssp}y}@|vH/Gh.";
      RequestBuilder requestBuilder1 = requestBuilder0.apiUrl(string0);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      assertEquals("$ssp}y}@|vH/Gh.", requestBuilder0.getapiUrl());
      assertEquals("$ssp}y}@|vH/Gh.", requestBuilder1.getapiUrl());
      assertNotNull(requestBuilder1);
      
      RequestBuilder requestBuilder2 = requestBuilder0.args(requestBuilder0.args);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      assertEquals("$ssp}y}@|vH/Gh.", requestBuilder0.getapiUrl());
      assertEquals("$ssp}y}@|vH/Gh.", requestBuilder2.getapiUrl());
      assertNotNull(requestBuilder2);
      
      RestMethodInfo restMethodInfo0 = requestBuilder0.getmethodInfo();
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertEquals("$ssp}y}@|vH/Gh.", requestBuilder0.getapiUrl());
      assertNull(restMethodInfo0);
      
      RequestBuilder requestBuilder3 = requestBuilder1.headers(requestBuilder0.headers);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder2);
      assertEquals("$ssp}y}@|vH/Gh.", requestBuilder0.getapiUrl());
      assertEquals("$ssp}y}@|vH/Gh.", requestBuilder1.getapiUrl());
      assertEquals("$ssp}y}@|vH/Gh.", requestBuilder3.getapiUrl());
      assertNotNull(requestBuilder3);
      
      // Undeclared exception!
      try { 
        requestBuilder2.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      Converter converter0 = null;
      RequestBuilder requestBuilder0 = new RequestBuilder(converter0);
      assertNull(requestBuilder0.getapiUrl());
      assertNotNull(requestBuilder0);
      
      String string0 = "c^/";
      requestBuilder0.setapiUrl(string0);
      assertEquals("c^/", requestBuilder0.getapiUrl());
      
      requestBuilder0.setheaders(requestBuilder0.headers);
      assertEquals("c^/", requestBuilder0.getapiUrl());
      
      // Undeclared exception!
      try { 
        requestBuilder0.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      Converter converter0 = null;
      RequestBuilder requestBuilder0 = new RequestBuilder(converter0);
      assertNull(requestBuilder0.getapiUrl());
      assertNotNull(requestBuilder0);
      
      requestBuilder0.setargs(requestBuilder0.args);
      assertNull(requestBuilder0.getapiUrl());
      
      // Undeclared exception!
      try { 
        requestBuilder0.buildBody();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter3();
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNull(requestBuilder0.getapiUrl());
      assertNotNull(requestBuilder0);
      
      List<Header> list0 = requestBuilder0.getheaders();
      assertNull(requestBuilder0.getapiUrl());
      assertNull(list0);
      
      Object[] objectArray0 = requestBuilder0.getargs();
      assertNull(requestBuilder0.getapiUrl());
      assertNull(objectArray0);
      
      RequestBuilder requestBuilder1 = requestBuilder0.methodInfo(requestBuilder0.methodInfo);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNotNull(requestBuilder1);
      
      String string0 = requestBuilder0.getapiUrl();
      assertSame(requestBuilder0, requestBuilder1);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(string0);
      
      requestBuilder1.setmethodInfo(requestBuilder0.methodInfo);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter8();
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNull(requestBuilder0.getapiUrl());
      assertNotNull(requestBuilder0);
      
      Converter converter0 = requestBuilder0.getconverter();
      assertSame(gsonConverter0, converter0);
      assertSame(converter0, gsonConverter0);
      assertNull(requestBuilder0.getapiUrl());
      assertNotNull(converter0);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter6();
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNull(requestBuilder0.getapiUrl());
      assertNotNull(requestBuilder0);
      
      List<Header> list0 = requestBuilder0.getheaders();
      assertNull(requestBuilder0.getapiUrl());
      assertNull(list0);
      
      Object[] objectArray0 = new Object[0];
      RequestBuilder requestBuilder1 = requestBuilder0.args(objectArray0);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      assertEquals(0, objectArray0.length);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNotNull(requestBuilder1);
      
      Object[] objectArray1 = requestBuilder1.getargs();
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(objectArray0, objectArray1);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(objectArray1, objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, objectArray1.length);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNotNull(objectArray1);
      
      RequestBuilder requestBuilder2 = requestBuilder0.apiUrl(requestBuilder1.apiUrl);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(objectArray0, objectArray1);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      assertEquals(0, objectArray0.length);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertNotNull(requestBuilder2);
      
      requestBuilder2.methodInfo = requestBuilder1.methodInfo;
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      
      requestBuilder1.setmethodInfo(requestBuilder2.methodInfo);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(objectArray0, objectArray1);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      assertEquals(0, objectArray0.length);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      
      int int0 = 3756;
      Random.setNextRandom(int0);
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      Converter converter0 = null;
      RequestBuilder requestBuilder0 = new RequestBuilder(converter0);
      assertNull(requestBuilder0.getapiUrl());
      assertNotNull(requestBuilder0);
      
      LinkedList<Header> linkedList0 = new LinkedList<Header>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string0 = "q]ZkFH]9@H+V+Q0</tX";
      Header header0 = new Header(string0, requestBuilder0.apiUrl);
      assertNull(requestBuilder0.getapiUrl());
      assertEquals("q]ZkFH]9@H+V+Q0</tX", header0.getName());
      assertNull(header0.getValue());
      assertNotNull(header0);
      
      boolean boolean0 = linkedList0.add(header0);
      assertTrue(boolean0);
      assertNull(requestBuilder0.getapiUrl());
      assertEquals(1, linkedList0.size());
      assertEquals("q]ZkFH]9@H+V+Q0</tX", header0.getName());
      assertNull(header0.getValue());
      assertTrue(linkedList0.contains(header0));
      
      Stream<Header> stream0 = linkedList0.parallelStream();
      assertEquals(1, linkedList0.size());
      assertNotNull(stream0);
      assertTrue(linkedList0.contains(header0));
      
      Header header1 = new Header(requestBuilder0.apiUrl, requestBuilder0.apiUrl);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(header1.getName());
      assertNull(header1.getValue());
      assertNotNull(header1);
      assertFalse(header1.equals((Object)header0));
      
      String string1 = header1.toString();
      assertEquals(": ", string1);
      assertNotSame(header1, header0);
      assertNotSame(string1, string0);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(header1.getName());
      assertNull(header1.getValue());
      assertNotNull(string1);
      assertFalse(header1.equals((Object)header0));
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = linkedList0.offerFirst(header1);
      assertTrue(boolean1);
      assertNotSame(header1, header0);
      assertNull(requestBuilder0.getapiUrl());
      assertEquals(2, linkedList0.size());
      assertNull(header1.getName());
      assertNull(header1.getValue());
      assertTrue(linkedList0.contains(header0));
      assertFalse(header1.equals((Object)header0));
      assertTrue(boolean1 == boolean0);
      
      requestBuilder0.setheaders(linkedList0);
      assertNull(requestBuilder0.getapiUrl());
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains(header0));
      
      // Undeclared exception!
      try { 
        requestBuilder0.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      Converter converter0 = null;
      RequestBuilder requestBuilder0 = new RequestBuilder(converter0);
      assertNull(requestBuilder0.getapiUrl());
      assertNotNull(requestBuilder0);
      
      List<Header> list0 = requestBuilder0.getheaders();
      assertNull(requestBuilder0.getapiUrl());
      assertNull(list0);
      
      RequestBuilder requestBuilder1 = requestBuilder0.headers(list0);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNotNull(requestBuilder1);
      
      RequestBuilder requestBuilder2 = requestBuilder0.headers(list0);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertNotNull(requestBuilder2);
      
      RequestBuilder requestBuilder3 = requestBuilder0.methodInfo(requestBuilder2.methodInfo);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder2);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertNull(requestBuilder3.getapiUrl());
      assertNotNull(requestBuilder3);
      
      // Undeclared exception!
      try { 
        requestBuilder2.buildRelativeUrl();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      Converter converter0 = null;
      RequestBuilder requestBuilder0 = new RequestBuilder(converter0);
      assertNull(requestBuilder0.getapiUrl());
      assertNotNull(requestBuilder0);
      
      String string0 = "retrofit.RequestBuilder";
      requestBuilder0.setapiUrl(string0);
      assertEquals("retrofit.RequestBuilder", requestBuilder0.getapiUrl());
      
      List<Header> list0 = null;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) string0;
      objectArray0[1] = (Object) list0;
      RequestBuilder requestBuilder1 = requestBuilder0.args(objectArray0);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      assertEquals(2, objectArray0.length);
      assertEquals("retrofit.RequestBuilder", requestBuilder0.getapiUrl());
      assertEquals("retrofit.RequestBuilder", requestBuilder1.getapiUrl());
      assertNotNull(requestBuilder1);
      
      // Undeclared exception!
      try { 
        requestBuilder0.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      Converter converter0 = null;
      RequestBuilder requestBuilder0 = new RequestBuilder(converter0);
      assertNull(requestBuilder0.getapiUrl());
      assertNotNull(requestBuilder0);
      
      List<Header> list0 = requestBuilder0.getheaders();
      assertNull(requestBuilder0.getapiUrl());
      assertNull(list0);
      
      RequestBuilder requestBuilder1 = requestBuilder0.headers(list0);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNotNull(requestBuilder1);
      
      RequestBuilder requestBuilder2 = requestBuilder0.headers(list0);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertNotNull(requestBuilder2);
      
      RequestBuilder requestBuilder3 = requestBuilder0.methodInfo(requestBuilder2.methodInfo);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertNull(requestBuilder3.getapiUrl());
      assertNotNull(requestBuilder3);
      
      // Undeclared exception!
      try { 
        requestBuilder2.buildRelativeUrl();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      Converter converter0 = null;
      RequestBuilder requestBuilder0 = new RequestBuilder(converter0);
      assertNull(requestBuilder0.getapiUrl());
      assertNotNull(requestBuilder0);
      
      // Undeclared exception!
      try { 
        requestBuilder0.buildBody();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      Converter converter0 = null;
      RequestBuilder requestBuilder0 = new RequestBuilder(converter0);
      assertNull(requestBuilder0.getapiUrl());
      assertNotNull(requestBuilder0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) converter0;
      objectArray0[1] = (Object) converter0;
      objectArray0[2] = (Object) converter0;
      objectArray0[3] = (Object) converter0;
      requestBuilder0.setargs(objectArray0);
      assertEquals(4, objectArray0.length);
      assertNull(requestBuilder0.getapiUrl());
      
      List<Header> list0 = requestBuilder0.getheaders();
      assertNull(requestBuilder0.getapiUrl());
      assertNull(list0);
      
      // Undeclared exception!
      try { 
        requestBuilder0.buildBody();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      Converter converter0 = null;
      RequestBuilder requestBuilder0 = new RequestBuilder(converter0);
      assertNull(requestBuilder0.getapiUrl());
      assertNotNull(requestBuilder0);
      
      List<Header> list0 = new LinkedList<Header>();
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      RequestBuilder requestBuilder1 = requestBuilder0.headers(list0);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNull(requestBuilder1.getapiUrl());
      assertNotNull(requestBuilder1);
      
      RequestBuilder requestBuilder2 = requestBuilder0.headers(list0);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNull(requestBuilder2.getapiUrl());
      assertNotNull(requestBuilder2);
      
      RequestBuilder requestBuilder3 = requestBuilder0.methodInfo(requestBuilder2.methodInfo);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder3, requestBuilder1);
      assertNull(requestBuilder0.getapiUrl());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNull(requestBuilder2.getapiUrl());
      assertNull(requestBuilder3.getapiUrl());
      assertNotNull(requestBuilder3);
      
      // Undeclared exception!
      try { 
        requestBuilder2.buildRelativeUrl();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      Converter converter0 = null;
      RequestBuilder requestBuilder0 = new RequestBuilder(converter0);
      assertNull(requestBuilder0.getapiUrl());
      assertNotNull(requestBuilder0);
      
      String string0 = "retrofit.RequestBuilder";
      requestBuilder0.setapiUrl(string0);
      assertEquals("retrofit.RequestBuilder", requestBuilder0.getapiUrl());
      
      List<Header> list0 = null;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) string0;
      RequestBuilder requestBuilder1 = requestBuilder0.args(objectArray0);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      assertEquals(2, objectArray0.length);
      assertEquals("retrofit.RequestBuilder", requestBuilder0.getapiUrl());
      assertEquals("retrofit.RequestBuilder", requestBuilder1.getapiUrl());
      assertNotNull(requestBuilder1);
      
      // Undeclared exception!
      try { 
        requestBuilder0.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      boolean boolean1 = true;
      boolean boolean2 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean1, boolean0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string0 = "'@";
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter8();
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNull(requestBuilder0.getapiUrl());
      assertNotNull(requestBuilder0);
      
      Converter converter0 = requestBuilder0.getconverter();
      assertSame(gsonConverter0, converter0);
      assertSame(converter0, gsonConverter0);
      assertNull(requestBuilder0.getapiUrl());
      assertNotNull(converter0);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      Converter converter0 = null;
      RequestBuilder requestBuilder0 = new RequestBuilder(converter0);
      assertNull(requestBuilder0.getapiUrl());
      assertNotNull(requestBuilder0);
      
      String string0 = "retrofit.RequestBuilder";
      requestBuilder0.setapiUrl(string0);
      assertEquals("retrofit.RequestBuilder", requestBuilder0.getapiUrl());
      
      List<Header> list0 = null;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) string0;
      RequestBuilder requestBuilder1 = requestBuilder0.args(objectArray0);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      assertEquals(2, objectArray0.length);
      assertEquals("retrofit.RequestBuilder", requestBuilder0.getapiUrl());
      assertEquals("retrofit.RequestBuilder", requestBuilder1.getapiUrl());
      assertNotNull(requestBuilder1);
      
      requestBuilder0.setargs(objectArray0);
      assertSame(requestBuilder0, requestBuilder1);
      assertEquals(2, objectArray0.length);
      assertEquals("retrofit.RequestBuilder", requestBuilder0.getapiUrl());
      
      requestBuilder0.setmethodInfo(requestBuilder1.methodInfo);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      assertEquals(2, objectArray0.length);
      assertEquals("retrofit.RequestBuilder", requestBuilder0.getapiUrl());
      assertEquals("retrofit.RequestBuilder", requestBuilder1.getapiUrl());
      
      List<Header> list1 = requestBuilder1.getheaders();
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      assertEquals(2, objectArray0.length);
      assertEquals("retrofit.RequestBuilder", requestBuilder0.getapiUrl());
      assertEquals("retrofit.RequestBuilder", requestBuilder1.getapiUrl());
      assertNull(list1);
      
      int int0 = (-600);
      Random.setNextRandom(int0);
      // Undeclared exception!
      try { 
        requestBuilder0.buildBody();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter6();
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNull(requestBuilder0.getapiUrl());
      assertNotNull(requestBuilder0);
      
      List<Header> list0 = requestBuilder0.getheaders();
      assertNull(requestBuilder0.getapiUrl());
      assertNull(list0);
      
      Object[] objectArray0 = new Object[0];
      RequestBuilder requestBuilder1 = requestBuilder0.args(objectArray0);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      assertEquals(0, objectArray0.length);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNotNull(requestBuilder1);
      
      Object[] objectArray1 = requestBuilder1.getargs();
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(objectArray0, objectArray1);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(objectArray1, objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, objectArray1.length);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNotNull(objectArray1);
      
      RequestBuilder requestBuilder2 = requestBuilder1.headers(list0);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(objectArray0, objectArray1);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      assertEquals(0, objectArray0.length);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertNotNull(requestBuilder2);
      
      RequestBuilder requestBuilder3 = requestBuilder2.args(objectArray0);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(objectArray0, objectArray1);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder2);
      assertEquals(0, objectArray0.length);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertNull(requestBuilder3.getapiUrl());
      assertNotNull(requestBuilder3);
      
      List<Header> list1 = requestBuilder1.getheaders();
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(objectArray0, objectArray1);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder3);
      assertEquals(0, objectArray0.length);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(list1);
      
      RequestBuilder requestBuilder4 = requestBuilder3.methodInfo(requestBuilder1.methodInfo);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder4);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(objectArray0, objectArray1);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder4);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder4);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder3, requestBuilder4);
      assertSame(requestBuilder4, requestBuilder0);
      assertSame(requestBuilder4, requestBuilder3);
      assertSame(requestBuilder4, requestBuilder1);
      assertSame(requestBuilder4, requestBuilder2);
      assertEquals(0, objectArray0.length);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertNull(requestBuilder3.getapiUrl());
      assertNull(requestBuilder4.getapiUrl());
      assertNotNull(requestBuilder4);
      
      String string0 = requestBuilder2.getapiUrl();
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder4);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(objectArray0, objectArray1);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder4);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder4);
      assertEquals(0, objectArray0.length);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertNull(string0);
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      Converter converter0 = null;
      RequestBuilder requestBuilder0 = new RequestBuilder(converter0);
      assertNull(requestBuilder0.getapiUrl());
      assertNotNull(requestBuilder0);
      
      String string0 = "retrofit.RequestBuilder";
      requestBuilder0.setapiUrl(string0);
      assertEquals("retrofit.RequestBuilder", requestBuilder0.getapiUrl());
      
      List<Header> list0 = null;
      Object[] objectArray0 = new Object[2];
      String string1 = "";
      RequestBuilder requestBuilder1 = requestBuilder0.apiUrl(string1);
      assertSame(requestBuilder0, requestBuilder1);
      assertNotSame(string1, string0);
      assertSame(requestBuilder1, requestBuilder0);
      assertEquals("", requestBuilder0.getapiUrl());
      assertEquals("", requestBuilder1.getapiUrl());
      assertNotNull(requestBuilder1);
      assertFalse(string1.equals((Object)string0));
      
      objectArray0[0] = (Object) string0;
      RequestBuilder requestBuilder2 = requestBuilder0.args(objectArray0);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      assertEquals(2, objectArray0.length);
      assertEquals("", requestBuilder0.getapiUrl());
      assertEquals("", requestBuilder2.getapiUrl());
      assertNotNull(requestBuilder2);
      
      // Undeclared exception!
      try { 
        requestBuilder0.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter6();
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNull(requestBuilder0.getapiUrl());
      assertNotNull(requestBuilder0);
      
      List<Header> list0 = requestBuilder0.getheaders();
      assertNull(requestBuilder0.getapiUrl());
      assertNull(list0);
      
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = requestBuilder0.getargs();
      assertNull(requestBuilder0.getapiUrl());
      assertNull(objectArray1);
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      Converter converter0 = null;
      Converter converter1 = null;
      RequestBuilder requestBuilder0 = new RequestBuilder(converter1);
      assertNull(requestBuilder0.getapiUrl());
      assertNotNull(requestBuilder0);
      
      String string0 = "yKWF";
      requestBuilder0.setapiUrl(string0);
      assertEquals("yKWF", requestBuilder0.getapiUrl());
      
      List<Header> list0 = null;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) string0;
      RequestBuilder requestBuilder1 = requestBuilder0.args(objectArray0);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      assertEquals(2, objectArray0.length);
      assertEquals("yKWF", requestBuilder0.getapiUrl());
      assertEquals("yKWF", requestBuilder1.getapiUrl());
      assertNotNull(requestBuilder1);
      
      requestBuilder0.setargs(objectArray0);
      assertSame(requestBuilder0, requestBuilder1);
      assertEquals(2, objectArray0.length);
      assertEquals("yKWF", requestBuilder0.getapiUrl());
      
      RequestBuilder requestBuilder2 = requestBuilder1.methodInfo(requestBuilder0.methodInfo);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      assertEquals(2, objectArray0.length);
      assertEquals("yKWF", requestBuilder0.getapiUrl());
      assertEquals("yKWF", requestBuilder1.getapiUrl());
      assertEquals("yKWF", requestBuilder2.getapiUrl());
      assertNotNull(requestBuilder2);
      
      requestBuilder0.setmethodInfo(requestBuilder1.methodInfo);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertEquals(2, objectArray0.length);
      assertEquals("yKWF", requestBuilder0.getapiUrl());
      assertEquals("yKWF", requestBuilder1.getapiUrl());
      
      List<Header> list1 = requestBuilder1.getheaders();
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertEquals(2, objectArray0.length);
      assertEquals("yKWF", requestBuilder0.getapiUrl());
      assertEquals("yKWF", requestBuilder1.getapiUrl());
      assertNull(list1);
      
      int int0 = (-600);
      Random.setNextRandom(int0);
      // Undeclared exception!
      try { 
        requestBuilder0.buildBody();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter6();
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNull(requestBuilder0.getapiUrl());
      assertNotNull(requestBuilder0);
      
      List<Header> list0 = requestBuilder0.getheaders();
      assertNull(requestBuilder0.getapiUrl());
      assertNull(list0);
      
      Object[] objectArray0 = new Object[0];
      RequestBuilder requestBuilder1 = requestBuilder0.args(objectArray0);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      assertEquals(0, objectArray0.length);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNotNull(requestBuilder1);
      
      Object[] objectArray1 = requestBuilder1.getargs();
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(objectArray0, objectArray1);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(objectArray1, objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, objectArray1.length);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNotNull(objectArray1);
      
      Converter converter0 = requestBuilder1.getconverter();
      assertSame(gsonConverter0, converter0);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(objectArray0, objectArray1);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(converter0, gsonConverter0);
      assertEquals(0, objectArray0.length);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNotNull(converter0);
      
      RestMethodInfo restMethodInfo0 = requestBuilder1.getmethodInfo();
      assertSame(gsonConverter0, converter0);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(objectArray0, objectArray1);
      assertSame(requestBuilder1, requestBuilder0);
      assertEquals(0, objectArray0.length);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(restMethodInfo0);
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      Converter converter0 = null;
      RequestBuilder requestBuilder0 = new RequestBuilder(converter0);
      assertNull(requestBuilder0.getapiUrl());
      assertNotNull(requestBuilder0);
      
      String string0 = "yKWF";
      requestBuilder0.setapiUrl(string0);
      assertEquals("yKWF", requestBuilder0.getapiUrl());
      
      List<Header> list0 = null;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) string0;
      RequestBuilder requestBuilder1 = requestBuilder0.args(objectArray0);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      assertEquals(2, objectArray0.length);
      assertEquals("yKWF", requestBuilder0.getapiUrl());
      assertEquals("yKWF", requestBuilder1.getapiUrl());
      assertNotNull(requestBuilder1);
      
      requestBuilder0.setargs(objectArray0);
      assertSame(requestBuilder0, requestBuilder1);
      assertEquals(2, objectArray0.length);
      assertEquals("yKWF", requestBuilder0.getapiUrl());
      
      requestBuilder0.setmethodInfo(requestBuilder1.methodInfo);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      assertEquals(2, objectArray0.length);
      assertEquals("yKWF", requestBuilder0.getapiUrl());
      assertEquals("yKWF", requestBuilder1.getapiUrl());
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string1 = "awt-text-attribute";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string1);
      assertFalse(boolean0);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      List<Header> list1 = requestBuilder1.getheaders();
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      assertEquals(2, objectArray0.length);
      assertEquals("yKWF", requestBuilder0.getapiUrl());
      assertEquals("yKWF", requestBuilder1.getapiUrl());
      assertNull(list1);
      
      String string2 = requestBuilder0.getapiUrl();
      assertEquals("yKWF", string2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("yKWF", requestBuilder0.getapiUrl());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      int int0 = (-600);
      Random.setNextRandom(int0);
      // Undeclared exception!
      try { 
        requestBuilder0.buildBody();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      boolean boolean1 = true;
      boolean boolean2 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean1, boolean0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string0 = "'@";
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter8();
      assertNotNull(gsonConverter0);
      
      GsonConverter gsonConverter1 = null;
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter1);
      assertNull(requestBuilder0.getapiUrl());
      assertNotNull(requestBuilder0);
      
      Converter converter0 = requestBuilder0.getconverter();
      assertNull(requestBuilder0.getapiUrl());
      assertNull(converter0);
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter6();
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNull(requestBuilder0.getapiUrl());
      assertNotNull(requestBuilder0);
      
      List<Header> list0 = requestBuilder0.getheaders();
      assertNull(requestBuilder0.getapiUrl());
      assertNull(list0);
      
      Object[] objectArray0 = new Object[1];
      RequestBuilder requestBuilder1 = requestBuilder0.args(objectArray0);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      assertEquals(1, objectArray0.length);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNotNull(requestBuilder1);
      
      Object[] objectArray1 = requestBuilder1.getargs();
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(objectArray0, objectArray1);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(objectArray1, objectArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, objectArray1.length);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNotNull(objectArray1);
      
      RequestBuilder requestBuilder2 = requestBuilder1.headers(list0);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(objectArray0, objectArray1);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      assertEquals(1, objectArray0.length);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertNotNull(requestBuilder2);
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      Converter converter0 = null;
      RequestBuilder requestBuilder0 = new RequestBuilder(converter0);
      assertNull(requestBuilder0.getapiUrl());
      assertNotNull(requestBuilder0);
      
      String string0 = "c^/";
      requestBuilder0.setapiUrl(string0);
      assertEquals("c^/", requestBuilder0.getapiUrl());
      
      List<Header> list0 = null;
      Object[] objectArray0 = new Object[1];
      RequestBuilder requestBuilder1 = requestBuilder0.args(objectArray0);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      assertEquals(1, objectArray0.length);
      assertEquals("c^/", requestBuilder0.getapiUrl());
      assertEquals("c^/", requestBuilder1.getapiUrl());
      assertNotNull(requestBuilder1);
      
      requestBuilder0.setargs(objectArray0);
      assertSame(requestBuilder0, requestBuilder1);
      assertEquals(1, objectArray0.length);
      assertEquals("c^/", requestBuilder0.getapiUrl());
      
      requestBuilder0.setheaders(list0);
      assertSame(requestBuilder0, requestBuilder1);
      assertEquals("c^/", requestBuilder0.getapiUrl());
      
      // Undeclared exception!
      try { 
        requestBuilder0.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      Converter converter0 = null;
      RequestBuilder requestBuilder0 = new RequestBuilder(converter0);
      assertNull(requestBuilder0.getapiUrl());
      assertNotNull(requestBuilder0);
      
      String string0 = "yKWF";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      requestBuilder0.setapiUrl(string0);
      assertEquals("yKWF", requestBuilder0.getapiUrl());
      
      LinkedList<Header> linkedList0 = new LinkedList<Header>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      RequestBuilder requestBuilder1 = requestBuilder0.headers(linkedList0);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      assertEquals("yKWF", requestBuilder0.getapiUrl());
      assertEquals(0, linkedList0.size());
      assertEquals("yKWF", requestBuilder1.getapiUrl());
      assertNotNull(requestBuilder1);
      
      List<Header> list0 = null;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) string0;
      RequestBuilder requestBuilder2 = requestBuilder0.args(objectArray0);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
      assertEquals(2, objectArray0.length);
      assertEquals("yKWF", requestBuilder0.getapiUrl());
      assertEquals("yKWF", requestBuilder2.getapiUrl());
      assertNotNull(requestBuilder2);
      
      requestBuilder0.setargs(objectArray0);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertEquals(2, objectArray0.length);
      assertEquals("yKWF", requestBuilder0.getapiUrl());
      
      requestBuilder0.setmethodInfo(requestBuilder2.methodInfo);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
      assertEquals(2, objectArray0.length);
      assertEquals("yKWF", requestBuilder0.getapiUrl());
      assertEquals("yKWF", requestBuilder2.getapiUrl());
      
      List<Header> list1 = requestBuilder2.getheaders();
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
      assertEquals(2, objectArray0.length);
      assertEquals("yKWF", requestBuilder0.getapiUrl());
      assertEquals("yKWF", requestBuilder2.getapiUrl());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      
      int int0 = (-600);
      Random.setNextRandom(int0);
      // Undeclared exception!
      try { 
        requestBuilder0.buildBody();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter6();
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNull(requestBuilder0.getapiUrl());
      assertNotNull(requestBuilder0);
      
      Object[] objectArray0 = requestBuilder0.getargs();
      assertNull(requestBuilder0.getapiUrl());
      assertNull(objectArray0);
      
      RequestBuilder requestBuilder1 = requestBuilder0.methodInfo(requestBuilder0.methodInfo);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNotNull(requestBuilder1);
      
      String string0 = "";
      requestBuilder1.apiUrl = string0;
      assertEquals("", requestBuilder0.getapiUrl());
      assertEquals("", requestBuilder1.getapiUrl());
      
      String string1 = requestBuilder0.getapiUrl();
      assertEquals("", string1);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(string1, string0);
      assertEquals("", requestBuilder0.getapiUrl());
      assertNotNull(string1);
      
      requestBuilder1.setmethodInfo(requestBuilder0.methodInfo);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      assertEquals("", requestBuilder0.getapiUrl());
      assertEquals("", requestBuilder1.getapiUrl());
  }
}
