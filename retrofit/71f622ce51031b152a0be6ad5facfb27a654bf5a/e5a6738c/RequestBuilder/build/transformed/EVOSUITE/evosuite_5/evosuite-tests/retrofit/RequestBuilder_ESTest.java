/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 02 06:18:56 GMT 2021
 */

package retrofit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.Gson;
import com.google.gson.JsonPrimitive;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.FilterOutputStream;
import java.io.ObjectOutputStream;
import java.io.Reader;
import java.io.StringReader;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import retrofit.RequestBuilder;
import retrofit.RestMethodInfo;
import retrofit.client.Header;
import retrofit.client.Request;
import retrofit.converter.Converter;
import retrofit.converter.GsonConverter;
import retrofit.mime.MultipartTypedOutput;
import retrofit.mime.TypedFile;
import retrofit.mime.TypedOutput;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RequestBuilder_ESTest extends RequestBuilder_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNull(requestBuilder0.getapiUrl());
      assertNotNull(requestBuilder0);
      
      String string0 = requestBuilder0.getapiUrl();
      assertNull(requestBuilder0.getapiUrl());
      assertNull(string0);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNull(requestBuilder0.getapiUrl());
      assertNotNull(requestBuilder0);
      
      RequestBuilder requestBuilder1 = requestBuilder0.apiUrl(requestBuilder0.apiUrl);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNotNull(requestBuilder1);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      RequestBuilder requestBuilder2 = requestBuilder1.headers(requestBuilder0.headers);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertNotNull(requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      
      LinkedList<Header> linkedList0 = new LinkedList<Header>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      requestBuilder0.setheaders(linkedList0);
      assertNull(requestBuilder0.getapiUrl());
      assertEquals(0, linkedList0.size());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      
      RestMethodInfo restMethodInfo0 = requestBuilder1.getmethodInfo();
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(restMethodInfo0);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      
      Object[] objectArray0 = requestBuilder1.getargs();
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(objectArray0);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      
      requestBuilder1.setmethodInfo(requestBuilder0.methodInfo);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      
      RequestBuilder requestBuilder3 = requestBuilder2.args(objectArray0);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertNull(requestBuilder3.getapiUrl());
      assertNotNull(requestBuilder3);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder2);
      
      String string0 = "M:4h6Ox4Q)Ox\\i$dux.";
      requestBuilder3.setapiUrl(string0);
      assertEquals("M:4h6Ox4Q)Ox\\i$dux.", requestBuilder0.getapiUrl());
      assertEquals("M:4h6Ox4Q)Ox\\i$dux.", requestBuilder1.getapiUrl());
      assertEquals("M:4h6Ox4Q)Ox\\i$dux.", requestBuilder2.getapiUrl());
      assertEquals("M:4h6Ox4Q)Ox\\i$dux.", requestBuilder3.getapiUrl());
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder2);
      
      // Undeclared exception!
      try { 
        requestBuilder1.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNull(requestBuilder0.getapiUrl());
      assertNotNull(requestBuilder0);
      
      List<Header> list0 = requestBuilder0.getheaders();
      assertNull(requestBuilder0.getapiUrl());
      assertNull(list0);
      
      RequestBuilder requestBuilder1 = requestBuilder0.methodInfo(requestBuilder0.methodInfo);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNotNull(requestBuilder1);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      requestBuilder1.setargs(requestBuilder0.args);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      Converter converter0 = requestBuilder0.getconverter();
      assertNull(requestBuilder0.getapiUrl());
      assertNotNull(converter0);
      assertSame(gsonConverter0, converter0);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(converter0, gsonConverter0);
      
      // Undeclared exception!
      try { 
        requestBuilder0.buildBody();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNull(requestBuilder0.getapiUrl());
      assertNotNull(requestBuilder0);
      
      String string0 = "Ud0TF/";
      requestBuilder0.setapiUrl(string0);
      assertEquals("Ud0TF/", requestBuilder0.getapiUrl());
      
      // Undeclared exception!
      try { 
        requestBuilder0.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      Converter converter0 = null;
      RequestBuilder requestBuilder0 = new RequestBuilder(converter0);
      assertNull(requestBuilder0.getapiUrl());
      assertNotNull(requestBuilder0);
      
      LinkedList<Header> linkedList0 = new LinkedList<Header>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      RequestBuilder requestBuilder1 = requestBuilder0.headers(linkedList0);
      assertNull(requestBuilder0.getapiUrl());
      assertEquals(0, linkedList0.size());
      assertNull(requestBuilder1.getapiUrl());
      assertNotNull(requestBuilder1);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      RequestBuilder requestBuilder2 = requestBuilder1.args(requestBuilder0.args);
      assertNull(requestBuilder0.getapiUrl());
      assertEquals(0, linkedList0.size());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertNotNull(requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
      
      RestMethodInfo restMethodInfo0 = requestBuilder0.getmethodInfo();
      assertNull(requestBuilder0.getapiUrl());
      assertNull(restMethodInfo0);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNull(requestBuilder0.getapiUrl());
      assertNotNull(requestBuilder0);
      
      String string0 = "retrofit.RequestBuilder$1";
      RequestBuilder requestBuilder1 = requestBuilder0.apiUrl(string0);
      assertEquals("retrofit.RequestBuilder$1", requestBuilder0.getapiUrl());
      assertEquals("retrofit.RequestBuilder$1", requestBuilder1.getapiUrl());
      assertNotNull(requestBuilder1);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      RestMethodInfo restMethodInfo0 = requestBuilder1.getmethodInfo();
      assertEquals("retrofit.RequestBuilder$1", requestBuilder0.getapiUrl());
      assertEquals("retrofit.RequestBuilder$1", requestBuilder1.getapiUrl());
      assertNull(restMethodInfo0);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNull(requestBuilder0.getapiUrl());
      assertNotNull(requestBuilder0);
      
      // Undeclared exception!
      try { 
        requestBuilder0.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertNotNull(gsonConverter0);
      
      String string0 = "byn(&*=%%";
      JsonPrimitive jsonPrimitive0 = (JsonPrimitive)gson0.toJsonTree((Object) string0);
      assertTrue(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isNumber());
      assertNotNull(jsonPrimitive0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNull(requestBuilder0.getapiUrl());
      assertNotNull(requestBuilder0);
      
      String string1 = "zv`F&V>aL";
      RequestBuilder requestBuilder1 = requestBuilder0.apiUrl(string1);
      assertEquals("zv`F&V>aL", requestBuilder0.getapiUrl());
      assertEquals("zv`F&V>aL", requestBuilder1.getapiUrl());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(requestBuilder1);
      assertSame(requestBuilder0, requestBuilder1);
      assertNotSame(string1, string0);
      assertSame(requestBuilder1, requestBuilder0);
      
      RequestBuilder requestBuilder2 = requestBuilder1.methodInfo(requestBuilder0.methodInfo);
      assertEquals("zv`F&V>aL", requestBuilder0.getapiUrl());
      assertEquals("zv`F&V>aL", requestBuilder1.getapiUrl());
      assertEquals("zv`F&V>aL", requestBuilder2.getapiUrl());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertNotSame(string1, string0);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
      
      LinkedList<Header> linkedList0 = new LinkedList<Header>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      RequestBuilder requestBuilder3 = requestBuilder2.headers(linkedList0);
      assertEquals("zv`F&V>aL", requestBuilder0.getapiUrl());
      assertEquals("zv`F&V>aL", requestBuilder1.getapiUrl());
      assertEquals("zv`F&V>aL", requestBuilder2.getapiUrl());
      assertEquals(0, linkedList0.size());
      assertEquals("zv`F&V>aL", requestBuilder3.getapiUrl());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(requestBuilder3);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertNotSame(string1, string0);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder3, requestBuilder1);
      
      Object[] objectArray0 = requestBuilder3.getargs();
      assertEquals("zv`F&V>aL", requestBuilder0.getapiUrl());
      assertEquals("zv`F&V>aL", requestBuilder1.getapiUrl());
      assertEquals("zv`F&V>aL", requestBuilder2.getapiUrl());
      assertEquals(0, linkedList0.size());
      assertEquals("zv`F&V>aL", requestBuilder3.getapiUrl());
      assertFalse(string1.equals((Object)string0));
      assertNull(objectArray0);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertNotSame(string1, string0);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder3, requestBuilder1);
      
      // Undeclared exception!
      try { 
        requestBuilder1.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      Converter converter0 = null;
      RequestBuilder requestBuilder0 = new RequestBuilder(converter0);
      assertNull(requestBuilder0.getapiUrl());
      assertNotNull(requestBuilder0);
      
      Converter converter1 = requestBuilder0.getconverter();
      assertNull(requestBuilder0.getapiUrl());
      assertNull(converter1);
      
      List<Header> list0 = requestBuilder0.getheaders();
      assertNull(requestBuilder0.getapiUrl());
      assertNull(list0);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      Converter converter0 = null;
      RequestBuilder requestBuilder0 = new RequestBuilder(converter0);
      assertNull(requestBuilder0.getapiUrl());
      assertNotNull(requestBuilder0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) requestBuilder0;
      objectArray0[1] = (Object) converter0;
      objectArray0[2] = (Object) requestBuilder0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      RequestBuilder requestBuilder1 = requestBuilder0.args(objectArray0);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNotNull(requestBuilder1);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      assertEquals(4, objectArray0.length);
      
      String string0 = "M+0EL%fab#n}";
      RequestBuilder requestBuilder2 = requestBuilder1.apiUrl(string0);
      assertEquals("M+0EL%fab#n}", requestBuilder0.getapiUrl());
      assertEquals("M+0EL%fab#n}", requestBuilder1.getapiUrl());
      assertEquals("M+0EL%fab#n}", requestBuilder2.getapiUrl());
      assertNotNull(requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
      assertEquals(4, objectArray0.length);
      
      Converter converter1 = requestBuilder2.getconverter();
      assertEquals("M+0EL%fab#n}", requestBuilder0.getapiUrl());
      assertEquals("M+0EL%fab#n}", requestBuilder1.getapiUrl());
      assertEquals("M+0EL%fab#n}", requestBuilder2.getapiUrl());
      assertNull(converter1);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
      assertEquals(4, objectArray0.length);
      
      // Undeclared exception!
      try { 
        requestBuilder0.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNull(requestBuilder0.getapiUrl());
      assertNotNull(requestBuilder0);
      
      // Undeclared exception!
      try { 
        requestBuilder0.buildRelativeUrl();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNull(requestBuilder0.getapiUrl());
      assertNotNull(requestBuilder0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) requestBuilder0;
      RequestBuilder requestBuilder1 = requestBuilder0.args(objectArray0);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNotNull(requestBuilder1);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      assertEquals(1, objectArray0.length);
      
      List<Header> list0 = requestBuilder1.getheaders();
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(list0);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNull(requestBuilder0.getapiUrl());
      assertNotNull(requestBuilder0);
      
      List<Header> list0 = requestBuilder0.getheaders();
      assertNull(requestBuilder0.getapiUrl());
      assertNull(list0);
      
      RequestBuilder requestBuilder1 = requestBuilder0.headers(list0);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNotNull(requestBuilder1);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      RequestBuilder requestBuilder2 = requestBuilder1.args(requestBuilder0.args);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertNotNull(requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      
      RequestBuilder requestBuilder3 = requestBuilder2.apiUrl(requestBuilder1.apiUrl);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertNull(requestBuilder3.getapiUrl());
      assertNotNull(requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder2);
      
      requestBuilder3.setapiUrl(requestBuilder1.apiUrl);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertNull(requestBuilder3.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder2);
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNull(requestBuilder0.getapiUrl());
      assertNotNull(requestBuilder0);
      
      // Undeclared exception!
      try { 
        requestBuilder0.buildBody();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNull(requestBuilder0.getapiUrl());
      assertNotNull(requestBuilder0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) requestBuilder0;
      objectArray0[1] = (Object) requestBuilder0;
      objectArray0[2] = (Object) gson0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      objectArray0[4] = (Object) gsonConverter0;
      objectArray0[5] = (Object) requestBuilder0;
      RequestBuilder requestBuilder1 = requestBuilder0.args(objectArray0);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNotNull(requestBuilder1);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      assertEquals(6, objectArray0.length);
      
      RequestBuilder requestBuilder2 = requestBuilder1.methodInfo(requestBuilder0.methodInfo);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertNotNull(requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
      assertEquals(6, objectArray0.length);
      
      RequestBuilder requestBuilder3 = requestBuilder2.headers(requestBuilder0.headers);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertNull(requestBuilder3.getapiUrl());
      assertNotNull(requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder2);
      assertEquals(6, objectArray0.length);
      
      requestBuilder3.setmethodInfo(requestBuilder1.methodInfo);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertNull(requestBuilder3.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder2);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNull(requestBuilder0.getapiUrl());
      assertNotNull(requestBuilder0);
      
      String string0 = "\\u003e";
      RequestBuilder requestBuilder1 = requestBuilder0.apiUrl(string0);
      assertEquals("\\u003e", requestBuilder0.getapiUrl());
      assertEquals("\\u003e", requestBuilder1.getapiUrl());
      assertNotNull(requestBuilder1);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      RequestBuilder requestBuilder2 = requestBuilder1.args(requestBuilder0.args);
      assertEquals("\\u003e", requestBuilder0.getapiUrl());
      assertEquals("\\u003e", requestBuilder1.getapiUrl());
      assertEquals("\\u003e", requestBuilder2.getapiUrl());
      assertNotNull(requestBuilder2);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      
      RequestBuilder requestBuilder3 = requestBuilder2.headers(requestBuilder0.headers);
      assertEquals("\\u003e", requestBuilder0.getapiUrl());
      assertEquals("\\u003e", requestBuilder1.getapiUrl());
      assertEquals("\\u003e", requestBuilder2.getapiUrl());
      assertEquals("\\u003e", requestBuilder3.getapiUrl());
      assertNotNull(requestBuilder3);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder0);
      
      requestBuilder3.setargs(requestBuilder0.args);
      assertEquals("\\u003e", requestBuilder0.getapiUrl());
      assertEquals("\\u003e", requestBuilder1.getapiUrl());
      assertEquals("\\u003e", requestBuilder2.getapiUrl());
      assertEquals("\\u003e", requestBuilder3.getapiUrl());
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder0);
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      Gson gson0 = null;
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNull(requestBuilder0.getapiUrl());
      assertNotNull(requestBuilder0);
      
      String string0 = "i`x^*PC^N++H";
      RequestBuilder requestBuilder1 = requestBuilder0.apiUrl(string0);
      assertEquals("i`x^*PC^N++H", requestBuilder0.getapiUrl());
      assertEquals("i`x^*PC^N++H", requestBuilder1.getapiUrl());
      assertNotNull(requestBuilder1);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      String string1 = "H";
      // Undeclared exception!
      try { 
        requestBuilder1.buildBody();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNull(requestBuilder0.getapiUrl());
      assertNotNull(requestBuilder0);
      
      LinkedList<Header> linkedList0 = new LinkedList<Header>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      RequestBuilder requestBuilder1 = requestBuilder0.headers(linkedList0);
      assertNull(requestBuilder0.getapiUrl());
      assertEquals(0, linkedList0.size());
      assertNull(requestBuilder1.getapiUrl());
      assertNotNull(requestBuilder1);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      requestBuilder1.setheaders(requestBuilder0.headers);
      assertNull(requestBuilder0.getapiUrl());
      assertEquals(0, linkedList0.size());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNull(requestBuilder0.getapiUrl());
      assertNotNull(requestBuilder0);
      
      LinkedList<Header> linkedList0 = new LinkedList<Header>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      RequestBuilder requestBuilder1 = requestBuilder0.headers(linkedList0);
      assertNull(requestBuilder0.getapiUrl());
      assertEquals(0, linkedList0.size());
      assertNull(requestBuilder1.getapiUrl());
      assertNotNull(requestBuilder1);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      String string0 = "";
      RequestBuilder requestBuilder2 = requestBuilder1.apiUrl(string0);
      assertEquals("", requestBuilder0.getapiUrl());
      assertEquals(0, linkedList0.size());
      assertEquals("", requestBuilder1.getapiUrl());
      assertEquals("", requestBuilder2.getapiUrl());
      assertNotNull(requestBuilder2);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      
      Converter converter0 = requestBuilder2.getconverter();
      assertEquals("", requestBuilder0.getapiUrl());
      assertEquals(0, linkedList0.size());
      assertEquals("", requestBuilder1.getapiUrl());
      assertEquals("", requestBuilder2.getapiUrl());
      assertNotNull(converter0);
      assertSame(gsonConverter0, converter0);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(converter0, gsonConverter0);
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNull(requestBuilder0.getapiUrl());
      assertNotNull(requestBuilder0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) requestBuilder0;
      objectArray0[1] = (Object) gson0;
      RequestBuilder requestBuilder1 = requestBuilder0.args(objectArray0);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNotNull(requestBuilder1);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      assertEquals(2, objectArray0.length);
      
      RequestBuilder requestBuilder2 = requestBuilder1.methodInfo(requestBuilder0.methodInfo);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertNotNull(requestBuilder2);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
      assertEquals(2, objectArray0.length);
      
      LinkedList<Header> linkedList0 = new LinkedList<Header>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      RequestBuilder requestBuilder3 = requestBuilder2.headers(linkedList0);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertEquals(0, linkedList0.size());
      assertNull(requestBuilder3.getapiUrl());
      assertNotNull(requestBuilder3);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder2);
      assertEquals(2, objectArray0.length);
      
      requestBuilder1.setapiUrl(requestBuilder2.apiUrl);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder1);
      assertEquals(2, objectArray0.length);
      
      requestBuilder3.args = requestBuilder0.args;
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertEquals(0, linkedList0.size());
      assertNull(requestBuilder3.getapiUrl());
      
      String string0 = "\\f";
      RequestBuilder requestBuilder4 = requestBuilder2.apiUrl(string0);
      assertEquals("\\f", requestBuilder0.getapiUrl());
      assertEquals("\\f", requestBuilder1.getapiUrl());
      assertEquals("\\f", requestBuilder2.getapiUrl());
      assertEquals("\\f", requestBuilder4.getapiUrl());
      assertNotNull(requestBuilder4);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder4);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder4);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder4);
      assertSame(requestBuilder4, requestBuilder1);
      assertSame(requestBuilder4, requestBuilder0);
      assertSame(requestBuilder4, requestBuilder2);
      assertSame(requestBuilder4, requestBuilder3);
      assertEquals(2, objectArray0.length);
      
      String string1 = "";
      RequestBuilder requestBuilder5 = requestBuilder3.apiUrl(string1);
      assertEquals("", requestBuilder0.getapiUrl());
      assertEquals("", requestBuilder1.getapiUrl());
      assertEquals("", requestBuilder2.getapiUrl());
      assertEquals(0, linkedList0.size());
      assertEquals("", requestBuilder3.getapiUrl());
      assertEquals("", requestBuilder5.getapiUrl());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(requestBuilder5);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder5);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder4);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder5);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder4);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder5);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder4);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder3, requestBuilder4);
      assertSame(requestBuilder3, requestBuilder5);
      assertNotSame(string1, string0);
      assertSame(requestBuilder5, requestBuilder2);
      assertSame(requestBuilder5, requestBuilder0);
      assertSame(requestBuilder5, requestBuilder1);
      assertSame(requestBuilder5, requestBuilder4);
      assertSame(requestBuilder5, requestBuilder3);
      assertEquals(2, objectArray0.length);
      
      List<Header> list0 = requestBuilder5.getheaders();
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals("", requestBuilder0.getapiUrl());
      assertEquals("", requestBuilder1.getapiUrl());
      assertEquals("", requestBuilder2.getapiUrl());
      assertEquals(0, linkedList0.size());
      assertEquals("", requestBuilder3.getapiUrl());
      assertEquals("", requestBuilder5.getapiUrl());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(list0);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder5);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder4);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder5);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder4);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder5);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder4);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder3, requestBuilder4);
      assertSame(requestBuilder3, requestBuilder5);
      assertNotSame(string1, string0);
      assertSame(requestBuilder5, requestBuilder2);
      assertSame(requestBuilder5, requestBuilder0);
      assertSame(requestBuilder5, requestBuilder1);
      assertSame(requestBuilder5, requestBuilder4);
      assertSame(requestBuilder5, requestBuilder3);
      assertEquals(2, objectArray0.length);
      
      requestBuilder1.setmethodInfo(requestBuilder0.methodInfo);
      assertEquals("", requestBuilder0.getapiUrl());
      assertEquals("", requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder5);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder4);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder5);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder4);
      assertEquals(2, objectArray0.length);
      
      String string2 = "r-(";
      RequestBuilder requestBuilder6 = requestBuilder5.apiUrl(string2);
      assertEquals("r-(", requestBuilder0.getapiUrl());
      assertEquals("r-(", requestBuilder6.getapiUrl());
      assertEquals("r-(", requestBuilder1.getapiUrl());
      assertEquals("r-(", requestBuilder2.getapiUrl());
      assertEquals(0, linkedList0.size());
      assertEquals("r-(", requestBuilder3.getapiUrl());
      assertEquals("r-(", requestBuilder5.getapiUrl());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(requestBuilder6);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder6);
      assertSame(requestBuilder0, requestBuilder5);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder4);
      assertSame(requestBuilder6, requestBuilder5);
      assertSame(requestBuilder6, requestBuilder2);
      assertSame(requestBuilder6, requestBuilder0);
      assertSame(requestBuilder6, requestBuilder3);
      assertSame(requestBuilder6, requestBuilder1);
      assertSame(requestBuilder6, requestBuilder4);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder5);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder6);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder4);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder5);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder4);
      assertSame(requestBuilder2, requestBuilder6);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder3, requestBuilder4);
      assertSame(requestBuilder3, requestBuilder6);
      assertSame(requestBuilder3, requestBuilder5);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(requestBuilder5, requestBuilder2);
      assertSame(requestBuilder5, requestBuilder6);
      assertSame(requestBuilder5, requestBuilder0);
      assertSame(requestBuilder5, requestBuilder1);
      assertSame(requestBuilder5, requestBuilder4);
      assertSame(requestBuilder5, requestBuilder3);
      assertEquals(2, objectArray0.length);
      
      requestBuilder2.args = requestBuilder1.args;
      assertEquals("r-(", requestBuilder0.getapiUrl());
      assertEquals("r-(", requestBuilder1.getapiUrl());
      assertEquals("r-(", requestBuilder2.getapiUrl());
      
      Converter converter0 = requestBuilder2.getconverter();
      assertEquals("r-(", requestBuilder0.getapiUrl());
      assertEquals("r-(", requestBuilder1.getapiUrl());
      assertEquals("r-(", requestBuilder2.getapiUrl());
      assertNotNull(converter0);
      assertSame(gsonConverter0, converter0);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder6);
      assertSame(requestBuilder0, requestBuilder5);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder4);
      assertSame(converter0, gsonConverter0);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder5);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder6);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder4);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder5);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder4);
      assertSame(requestBuilder2, requestBuilder6);
      assertEquals(2, objectArray0.length);
      
      requestBuilder5.setargs(requestBuilder3.args);
      assertEquals("r-(", requestBuilder0.getapiUrl());
      assertEquals("r-(", requestBuilder1.getapiUrl());
      assertEquals("r-(", requestBuilder2.getapiUrl());
      assertEquals(0, linkedList0.size());
      assertEquals("r-(", requestBuilder3.getapiUrl());
      assertEquals("r-(", requestBuilder5.getapiUrl());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertSame(gsonConverter0, converter0);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder6);
      assertSame(requestBuilder0, requestBuilder5);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder4);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder5);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder6);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder4);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder5);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder4);
      assertSame(requestBuilder2, requestBuilder6);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder3, requestBuilder4);
      assertSame(requestBuilder3, requestBuilder6);
      assertSame(requestBuilder3, requestBuilder5);
      assertSame(requestBuilder3.args, objectArray0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(requestBuilder5, requestBuilder2);
      assertSame(requestBuilder5, requestBuilder6);
      assertSame(requestBuilder5, requestBuilder0);
      assertSame(requestBuilder5, requestBuilder1);
      assertSame(requestBuilder5, requestBuilder4);
      assertSame(requestBuilder5, requestBuilder3);
      assertEquals(2, objectArray0.length);
      assertEquals(2, requestBuilder3.args.length);
      
      RequestBuilder requestBuilder7 = requestBuilder3.args(requestBuilder0.args);
      assertEquals("r-(", requestBuilder0.getapiUrl());
      assertEquals("r-(", requestBuilder1.getapiUrl());
      assertEquals("r-(", requestBuilder7.getapiUrl());
      assertEquals("r-(", requestBuilder2.getapiUrl());
      assertEquals(0, linkedList0.size());
      assertEquals("r-(", requestBuilder3.getapiUrl());
      assertNotNull(requestBuilder7);
      assertSame(gsonConverter0, converter0);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder6);
      assertSame(requestBuilder0, requestBuilder5);
      assertSame(requestBuilder0, requestBuilder7);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder4);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder5);
      assertSame(requestBuilder1, requestBuilder7);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder6);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder4);
      assertSame(requestBuilder7, requestBuilder0);
      assertSame(requestBuilder7, requestBuilder2);
      assertSame(requestBuilder7, requestBuilder6);
      assertSame(requestBuilder7, requestBuilder3);
      assertSame(requestBuilder7, requestBuilder5);
      assertSame(requestBuilder7, requestBuilder1);
      assertSame(requestBuilder7, requestBuilder4);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder7);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder5);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder4);
      assertSame(requestBuilder2, requestBuilder6);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder7);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder3, requestBuilder4);
      assertSame(requestBuilder3, requestBuilder6);
      assertSame(requestBuilder3, requestBuilder5);
      assertEquals(2, objectArray0.length);
      
      RequestBuilder requestBuilder8 = requestBuilder3.apiUrl(requestBuilder5.apiUrl);
      assertEquals("r-(", requestBuilder0.getapiUrl());
      assertEquals("r-(", requestBuilder1.getapiUrl());
      assertEquals("r-(", requestBuilder2.getapiUrl());
      assertEquals("r-(", requestBuilder8.getapiUrl());
      assertEquals(0, linkedList0.size());
      assertEquals("r-(", requestBuilder3.getapiUrl());
      assertEquals("r-(", requestBuilder5.getapiUrl());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(requestBuilder8);
      assertSame(gsonConverter0, converter0);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder6);
      assertSame(requestBuilder0, requestBuilder5);
      assertSame(requestBuilder0, requestBuilder8);
      assertSame(requestBuilder0, requestBuilder7);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder4);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder5);
      assertSame(requestBuilder1, requestBuilder8);
      assertSame(requestBuilder1, requestBuilder7);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder6);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder4);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder8);
      assertSame(requestBuilder2, requestBuilder7);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder5);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder4);
      assertSame(requestBuilder2, requestBuilder6);
      assertSame(requestBuilder8, requestBuilder7);
      assertSame(requestBuilder8, requestBuilder0);
      assertSame(requestBuilder8, requestBuilder1);
      assertSame(requestBuilder8, requestBuilder2);
      assertSame(requestBuilder8, requestBuilder3);
      assertSame(requestBuilder8, requestBuilder4);
      assertSame(requestBuilder8, requestBuilder6);
      assertSame(requestBuilder8, requestBuilder5);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder8);
      assertSame(requestBuilder3, requestBuilder7);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder3, requestBuilder4);
      assertSame(requestBuilder3, requestBuilder6);
      assertSame(requestBuilder3, requestBuilder5);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(requestBuilder5, requestBuilder2);
      assertSame(requestBuilder5, requestBuilder8);
      assertSame(requestBuilder5, requestBuilder6);
      assertSame(requestBuilder5, requestBuilder0);
      assertSame(requestBuilder5, requestBuilder7);
      assertSame(requestBuilder5, requestBuilder1);
      assertSame(requestBuilder5, requestBuilder4);
      assertSame(requestBuilder5, requestBuilder3);
      assertEquals(2, objectArray0.length);
      
      RequestBuilder requestBuilder9 = requestBuilder8.headers(linkedList0);
      assertEquals("r-(", requestBuilder0.getapiUrl());
      assertEquals("r-(", requestBuilder1.getapiUrl());
      assertEquals("r-(", requestBuilder2.getapiUrl());
      assertEquals("r-(", requestBuilder8.getapiUrl());
      assertEquals(0, linkedList0.size());
      assertEquals("r-(", requestBuilder9.getapiUrl());
      assertEquals("r-(", requestBuilder3.getapiUrl());
      assertEquals("r-(", requestBuilder5.getapiUrl());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(requestBuilder9);
      assertSame(gsonConverter0, converter0);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder6);
      assertSame(requestBuilder0, requestBuilder5);
      assertSame(requestBuilder0, requestBuilder8);
      assertSame(requestBuilder0, requestBuilder9);
      assertSame(requestBuilder0, requestBuilder7);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder4);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder5);
      assertSame(requestBuilder1, requestBuilder8);
      assertSame(requestBuilder1, requestBuilder7);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder9);
      assertSame(requestBuilder1, requestBuilder6);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder4);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder8);
      assertSame(requestBuilder2, requestBuilder7);
      assertSame(requestBuilder2, requestBuilder9);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder5);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder4);
      assertSame(requestBuilder2, requestBuilder6);
      assertSame(requestBuilder8, requestBuilder7);
      assertSame(requestBuilder8, requestBuilder0);
      assertSame(requestBuilder8, requestBuilder1);
      assertSame(requestBuilder8, requestBuilder2);
      assertSame(requestBuilder8, requestBuilder9);
      assertSame(requestBuilder8, requestBuilder3);
      assertSame(requestBuilder8, requestBuilder4);
      assertSame(requestBuilder8, requestBuilder6);
      assertSame(requestBuilder8, requestBuilder5);
      assertSame(requestBuilder9, requestBuilder5);
      assertSame(requestBuilder9, requestBuilder4);
      assertSame(requestBuilder9, requestBuilder0);
      assertSame(requestBuilder9, requestBuilder6);
      assertSame(requestBuilder9, requestBuilder8);
      assertSame(requestBuilder9, requestBuilder1);
      assertSame(requestBuilder9, requestBuilder7);
      assertSame(requestBuilder9, requestBuilder2);
      assertSame(requestBuilder9, requestBuilder3);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder8);
      assertSame(requestBuilder3, requestBuilder7);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder3, requestBuilder9);
      assertSame(requestBuilder3, requestBuilder4);
      assertSame(requestBuilder3, requestBuilder6);
      assertSame(requestBuilder3, requestBuilder5);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(requestBuilder5, requestBuilder2);
      assertSame(requestBuilder5, requestBuilder8);
      assertSame(requestBuilder5, requestBuilder6);
      assertSame(requestBuilder5, requestBuilder0);
      assertSame(requestBuilder5, requestBuilder7);
      assertSame(requestBuilder5, requestBuilder1);
      assertSame(requestBuilder5, requestBuilder4);
      assertSame(requestBuilder5, requestBuilder9);
      assertSame(requestBuilder5, requestBuilder3);
      assertEquals(2, objectArray0.length);
      
      List<Header> list1 = requestBuilder1.getheaders();
      assertEquals("r-(", requestBuilder0.getapiUrl());
      assertEquals("r-(", requestBuilder1.getapiUrl());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      assertSame(gsonConverter0, converter0);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder6);
      assertSame(requestBuilder0, requestBuilder5);
      assertSame(requestBuilder0, requestBuilder8);
      assertSame(requestBuilder0, requestBuilder9);
      assertSame(requestBuilder0, requestBuilder7);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder4);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder5);
      assertSame(requestBuilder1, requestBuilder8);
      assertSame(requestBuilder1, requestBuilder7);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder9);
      assertSame(requestBuilder1, requestBuilder6);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder4);
      assertSame(list1, list0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      Converter converter0 = null;
      RequestBuilder requestBuilder0 = new RequestBuilder(converter0);
      assertNull(requestBuilder0.getapiUrl());
      assertNotNull(requestBuilder0);
      
      List<Header> list0 = requestBuilder0.getheaders();
      assertNull(requestBuilder0.getapiUrl());
      assertNull(list0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) list0;
      requestBuilder0.setargs(objectArray0);
      assertNull(requestBuilder0.getapiUrl());
      assertEquals(1, objectArray0.length);
      
      RequestBuilder requestBuilder1 = requestBuilder0.headers(list0);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNotNull(requestBuilder1);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      Object[] objectArray1 = requestBuilder1.getargs();
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNotNull(objectArray1);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(objectArray1, objectArray0);
      assertEquals(1, objectArray1.length);
      
      List<Header> list1 = requestBuilder1.getheaders();
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(list1);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      RequestBuilder requestBuilder2 = requestBuilder0.methodInfo(requestBuilder1.methodInfo);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertNotNull(requestBuilder2);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
      
      List<Header> list2 = requestBuilder2.getheaders();
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertNull(list2);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNull(requestBuilder0.getapiUrl());
      assertNotNull(requestBuilder0);
      
      List<Header> list0 = requestBuilder0.getheaders();
      assertNull(requestBuilder0.getapiUrl());
      assertNull(list0);
      
      requestBuilder0.setheaders(list0);
      assertNull(requestBuilder0.getapiUrl());
      
      String string0 = "s\"vvxt[&Hom6m";
      requestBuilder0.setapiUrl(string0);
      assertEquals("s\"vvxt[&Hom6m", requestBuilder0.getapiUrl());
      
      RequestBuilder requestBuilder1 = requestBuilder0.apiUrl(string0);
      assertEquals("s\"vvxt[&Hom6m", requestBuilder0.getapiUrl());
      assertEquals("s\"vvxt[&Hom6m", requestBuilder1.getapiUrl());
      assertNotNull(requestBuilder1);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      requestBuilder1.setargs(requestBuilder0.args);
      assertEquals("s\"vvxt[&Hom6m", requestBuilder0.getapiUrl());
      assertEquals("s\"vvxt[&Hom6m", requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      List<Header> list1 = requestBuilder0.getheaders();
      assertEquals("s\"vvxt[&Hom6m", requestBuilder0.getapiUrl());
      assertNull(list1);
      assertSame(requestBuilder0, requestBuilder1);
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      Converter converter0 = null;
      RequestBuilder requestBuilder0 = new RequestBuilder(converter0);
      assertNull(requestBuilder0.getapiUrl());
      assertNotNull(requestBuilder0);
      
      LinkedList<Header> linkedList0 = new LinkedList<Header>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      requestBuilder0.setheaders(linkedList0);
      assertNull(requestBuilder0.getapiUrl());
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        requestBuilder0.buildBody();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNull(requestBuilder0.getapiUrl());
      assertNotNull(requestBuilder0);
      
      String string0 = "{";
      RequestBuilder requestBuilder1 = requestBuilder0.apiUrl(string0);
      assertEquals("{", requestBuilder0.getapiUrl());
      assertEquals("{", requestBuilder1.getapiUrl());
      assertNotNull(requestBuilder1);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      TypedOutput typedOutput0 = gsonConverter0.toBody(gson0);
      assertEquals(3075L, typedOutput0.length());
      assertNull(typedOutput0.fileName());
      assertNotNull(typedOutput0);
      
      RequestBuilder requestBuilder2 = requestBuilder1.methodInfo(requestBuilder0.methodInfo);
      assertEquals("{", requestBuilder0.getapiUrl());
      assertEquals("{", requestBuilder1.getapiUrl());
      assertEquals("{", requestBuilder2.getapiUrl());
      assertNotNull(requestBuilder2);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      
      RequestBuilder requestBuilder3 = requestBuilder2.args(requestBuilder1.args);
      assertEquals("{", requestBuilder0.getapiUrl());
      assertEquals("{", requestBuilder1.getapiUrl());
      assertEquals("{", requestBuilder2.getapiUrl());
      assertEquals("{", requestBuilder3.getapiUrl());
      assertNotNull(requestBuilder3);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder2);
      
      Converter converter0 = requestBuilder3.getconverter();
      assertEquals("{", requestBuilder0.getapiUrl());
      assertEquals("{", requestBuilder1.getapiUrl());
      assertEquals("{", requestBuilder2.getapiUrl());
      assertEquals("{", requestBuilder3.getapiUrl());
      assertNotNull(converter0);
      assertSame(gsonConverter0, converter0);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(converter0, gsonConverter0);
      
      requestBuilder3.args = requestBuilder2.args;
      assertEquals("{", requestBuilder0.getapiUrl());
      assertEquals("{", requestBuilder1.getapiUrl());
      assertEquals("{", requestBuilder2.getapiUrl());
      assertEquals("{", requestBuilder3.getapiUrl());
      
      requestBuilder3.apiUrl = requestBuilder1.apiUrl;
      assertEquals("{", requestBuilder0.getapiUrl());
      assertEquals("{", requestBuilder1.getapiUrl());
      assertEquals("{", requestBuilder2.getapiUrl());
      assertEquals("{", requestBuilder3.getapiUrl());
      
      requestBuilder1.setheaders(requestBuilder3.headers);
      assertEquals("{", requestBuilder0.getapiUrl());
      assertEquals("{", requestBuilder1.getapiUrl());
      assertEquals("{", requestBuilder2.getapiUrl());
      assertEquals("{", requestBuilder3.getapiUrl());
      assertSame(gsonConverter0, converter0);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder2);
      
      String string1 = requestBuilder0.getapiUrl();
      assertEquals("{", requestBuilder0.getapiUrl());
      assertNotNull(string1);
      assertSame(gsonConverter0, converter0);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(string1, string0);
      assertEquals("{", string1);
      
      // Undeclared exception!
      try { 
        requestBuilder3.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNull(requestBuilder0.getapiUrl());
      assertNotNull(requestBuilder0);
      
      String string0 = "";
      RequestBuilder requestBuilder1 = requestBuilder0.apiUrl(string0);
      assertEquals("", requestBuilder0.getapiUrl());
      assertEquals("", requestBuilder1.getapiUrl());
      assertNotNull(requestBuilder1);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      String string1 = "UTF-8/";
      requestBuilder0.setapiUrl(string1);
      assertEquals("UTF-8/", requestBuilder0.getapiUrl());
      assertFalse(string1.equals((Object)string0));
      assertSame(requestBuilder0, requestBuilder1);
      assertNotSame(string1, string0);
      
      // Undeclared exception!
      try { 
        requestBuilder1.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      String string0 = "=ueAOT1NOF N.2'l8%m";
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNull(requestBuilder0.getapiUrl());
      assertNotNull(requestBuilder0);
      
      RequestBuilder requestBuilder1 = requestBuilder0.args(objectArray0);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNotNull(requestBuilder1);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      assertEquals(1, objectArray0.length);
      
      LinkedList<Header> linkedList0 = new LinkedList<Header>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Header header0 = null;
      boolean boolean0 = linkedList0.add(header0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      RequestBuilder requestBuilder2 = requestBuilder1.headers(linkedList0);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertEquals(1, linkedList0.size());
      assertNull(requestBuilder2.getapiUrl());
      assertNotNull(requestBuilder2);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      assertEquals(1, objectArray0.length);
      
      List<Header> list0 = requestBuilder2.getheaders();
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertEquals(1, linkedList0.size());
      assertNull(requestBuilder2.getapiUrl());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      assertEquals(1, objectArray0.length);
      
      String string1 = requestBuilder2.getapiUrl();
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertEquals(1, linkedList0.size());
      assertNull(requestBuilder2.getapiUrl());
      assertNull(string1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      Gson gson0 = null;
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNull(requestBuilder0.getapiUrl());
      assertNotNull(requestBuilder0);
      
      String string0 = "Z<Yfh'f}RB0";
      String string1 = null;
      RequestBuilder requestBuilder1 = requestBuilder0.apiUrl(string1);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNotNull(requestBuilder1);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      RequestBuilder requestBuilder2 = requestBuilder1.headers(requestBuilder0.headers);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertNotNull(requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      
      RequestBuilder requestBuilder3 = requestBuilder2.methodInfo(requestBuilder1.methodInfo);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertNull(requestBuilder3.getapiUrl());
      assertNotNull(requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder2);
      
      RequestBuilder requestBuilder4 = requestBuilder0.apiUrl(requestBuilder2.apiUrl);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertNull(requestBuilder4.getapiUrl());
      assertNotNull(requestBuilder4);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder4);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder4);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder4);
      assertSame(requestBuilder4, requestBuilder0);
      assertSame(requestBuilder4, requestBuilder3);
      assertSame(requestBuilder4, requestBuilder2);
      assertSame(requestBuilder4, requestBuilder1);
      
      requestBuilder0.setargs(requestBuilder4.args);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertNull(requestBuilder4.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder4);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder4);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder4);
      assertSame(requestBuilder4, requestBuilder0);
      assertSame(requestBuilder4, requestBuilder3);
      assertSame(requestBuilder4, requestBuilder2);
      assertSame(requestBuilder4, requestBuilder1);
      
      String string2 = "";
      requestBuilder4.apiUrl = string2;
      assertEquals("", requestBuilder0.getapiUrl());
      assertEquals("", requestBuilder1.getapiUrl());
      assertEquals("", requestBuilder2.getapiUrl());
      assertEquals("", requestBuilder4.getapiUrl());
      
      String string3 = requestBuilder4.getapiUrl();
      assertEquals("", requestBuilder0.getapiUrl());
      assertEquals("", requestBuilder1.getapiUrl());
      assertEquals("", requestBuilder2.getapiUrl());
      assertEquals("", requestBuilder4.getapiUrl());
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder4);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder4);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder4);
      assertSame(requestBuilder4, requestBuilder0);
      assertSame(requestBuilder4, requestBuilder3);
      assertSame(requestBuilder4, requestBuilder2);
      assertSame(requestBuilder4, requestBuilder1);
      assertSame(string3, string2);
      assertNotSame(string3, string0);
      assertEquals("", string3);
      
      RequestBuilder requestBuilder5 = requestBuilder4.args(requestBuilder1.args);
      assertEquals("", requestBuilder0.getapiUrl());
      assertEquals("", requestBuilder1.getapiUrl());
      assertEquals("", requestBuilder2.getapiUrl());
      assertEquals("", requestBuilder4.getapiUrl());
      assertEquals("", requestBuilder5.getapiUrl());
      assertNotNull(requestBuilder5);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder4);
      assertSame(requestBuilder0, requestBuilder5);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder5);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder4);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder4);
      assertSame(requestBuilder2, requestBuilder5);
      assertSame(requestBuilder4, requestBuilder0);
      assertSame(requestBuilder4, requestBuilder5);
      assertSame(requestBuilder4, requestBuilder3);
      assertSame(requestBuilder4, requestBuilder2);
      assertSame(requestBuilder4, requestBuilder1);
      assertSame(requestBuilder5, requestBuilder0);
      assertSame(requestBuilder5, requestBuilder2);
      assertSame(requestBuilder5, requestBuilder1);
      assertSame(requestBuilder5, requestBuilder3);
      assertSame(requestBuilder5, requestBuilder4);
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNull(requestBuilder0.getapiUrl());
      assertNotNull(requestBuilder0);
      
      Object[] objectArray0 = new Object[0];
      RequestBuilder requestBuilder1 = requestBuilder0.args(objectArray0);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNotNull(requestBuilder1);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      assertEquals(0, objectArray0.length);
      
      Object[] objectArray1 = requestBuilder1.getargs();
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNotNull(objectArray1);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(objectArray0, objectArray1);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(objectArray1, objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, objectArray1.length);
      
      RequestBuilder requestBuilder2 = requestBuilder1.headers(requestBuilder0.headers);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertNotNull(requestBuilder2);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(objectArray0, objectArray1);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      assertEquals(0, objectArray0.length);
      
      RequestBuilder requestBuilder3 = requestBuilder1.headers(requestBuilder0.headers);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder3.getapiUrl());
      assertNotNull(requestBuilder3);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(objectArray0, objectArray1);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder2);
      assertEquals(0, objectArray0.length);
      
      List<Header> list0 = requestBuilder0.getheaders();
      assertNull(requestBuilder0.getapiUrl());
      assertNull(list0);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
  }
}
